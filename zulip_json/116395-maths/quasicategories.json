[
    {
        "content": "<blockquote>\n<p>I would be curious to see what a \"plain formalization\" of infinity categories looks like. HoTT is more of a \"synthetic\" formulation, a.k.a a shallow embedding, where you can't see outside the theory and so principles like univalence can be stated unqualified as axioms</p>\n</blockquote>\n<p>Here is a very simple formalization of just the definition of a quasicategory; hopefully I got it right!<br>\nThe preliminaries on <code>category Δ</code> are by Johan, from some time ago.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">yoneda</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">full_subcategory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"n\">def</span> <span class=\"n\">simplex_category</span> <span class=\"o\">:=</span> <span class=\"bp\">ℕ</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">Δ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">simplex_category</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">n</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"err\">Δ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">order_preserving_map</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">order_preserving_map</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"err\">Δ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">order_preserving_map</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"n\">monotone_id</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">monotone_comp</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">SSet</span> <span class=\"o\">:=</span> <span class=\"err\">Δᵒᵖ</span> <span class=\"err\">⥤</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">SSet</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">SSet</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">simplex</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">SSet</span> <span class=\"o\">:=</span> <span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">misses_face</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"err\">⟶</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"bp\">≠</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">i</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">misses_face_preserved</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m&#39;</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">m&#39;</span><span class=\"o\">]</span> <span class=\"err\">⟶</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:</span>\n  <span class=\"n\">misses_face</span> <span class=\"n\">k</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">misses_face</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi₁</span><span class=\"o\">,</span> <span class=\"n\">hi₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi₁</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">hi₂</span> <span class=\"bp\">_⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">horn</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">SSet</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">simplex</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">m</span> <span class=\"bp\">//</span> <span class=\"n\">misses_face</span> <span class=\"n\">k</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">},</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m&#39;</span> <span class=\"n\">m</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">((</span><span class=\"n\">simplex</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">misses_face_preserved</span> <span class=\"n\">g</span> <span class=\"n\">k</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">horn_simplex_inclusion</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"o\">:</span> <span class=\"n\">horn</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"err\">⟶</span> <span class=\"n\">simplex</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_quasicategory</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">SSet</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"err\">Δ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]),</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"bp\">→</span>\n<span class=\"bp\">∀</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">horn</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">simplex</span> <span class=\"n\">n</span> <span class=\"err\">⟶</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">horn_simplex_inclusion</span> <span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"err\">≫</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n\n<span class=\"n\">def</span> <span class=\"n\">QCat</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">SSet</span> <span class=\"bp\">//</span> <span class=\"n\">is_quasicategory</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">QCat</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">dunfold</span> <span class=\"n\">QCat</span><span class=\"o\">,</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 165386120,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557539300
    },
    {
        "content": "<p>This is similar to the definitions of Lurie, right?</p>",
        "id": 165390783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557546294
    },
    {
        "content": "<p>I don't remember the term <code>quasicategory</code>, but the definitions seem familiar</p>",
        "id": 165390795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557546312
    },
    {
        "content": "<p>It's the same thing Lurie calls \"<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">∞</span></span></span></span>-categories\", and one of several models for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(\\infty, 1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathrm\">∞</span><span class=\"mpunct\">,</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">)</span></span></span></span>-categories. \"Quasicategory\" is the original, unambiguous name</p>",
        "id": 165390939,
        "sender_full_name": "Reid Barton",
        "timestamp": 1557546580
    },
    {
        "content": "<p>Aha... that's good to know.</p>",
        "id": 165390990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557546609
    },
    {
        "content": "<p>They seem to be useful gadgets.</p>",
        "id": 165390997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557546636
    }
]