[
    {
        "content": "<p>In the liquid project we make a lot of use of <code>nnreal</code>, and hence it's convenient to also use <code>nnnorm</code>. But it looks ugly.<br>\nWhat do people think of making</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"n\">x</span><span class=\"bp\">`∥₊`</span> <span class=\"o\">:=</span> <span class=\"n\">nnnorm</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 229716356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615400549
    },
    {
        "content": "<p>We can already do this in the liquid project, but for code that is supposed to move to mathlib, I would rather not do this. Unless we also add the notation to mathlib</p>",
        "id": 229716458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615400598
    },
    {
        "content": "<p>Another option (quite radical, I admit) would be to refactor mathlib so that <code>norm</code> takes values in <code>nnreal</code>.</p>",
        "id": 229716519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615400634
    },
    {
        "content": "<p>How bad an idea would a <code>has_some_norm</code> typeclass be that instead of specifiy <code>real</code> or <code>nnreal</code> supports an arbitrary output type?</p>",
        "id": 229717204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615400882
    },
    {
        "content": "<p>Then the notation could just be the same everywhere, although you'd need to give lean a few more hints about what type you're talking about</p>",
        "id": 229717291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615400903
    },
    {
        "content": "<p>As an aside, your proposed notation is actually better behaved than the one for <code>norm</code>, as it has different opening and closing markers!</p>",
        "id": 229717349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615400930
    },
    {
        "content": "<p>Won't lean mind that the starting marker is already in use for plain <code>norm</code>?</p>",
        "id": 229717784,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615401085
    },
    {
        "content": "<p>I guess not if lean-liquid uses it already</p>",
        "id": 229717810,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1615401102
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/notation.20for.20nnnorm/near/229717204\">said</a>:</p>\n<blockquote>\n<p>How bad an idea would a <code>has_some_norm</code> typeclass be that instead of specifiy <code>real</code> or <code>nnreal</code> supports an arbitrary output type?<br>\nThen the notation could just be the same everywhere, although you'd need to give lean a few more hints about what type you're talking about</p>\n</blockquote>\n<p>I think you would need <em>a lot</em> of hints in mathlib</p>",
        "id": 229719455,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615401683
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/notation.20for.20nnnorm/near/229716356\">said</a>:</p>\n<blockquote>\n<p>In the liquid project we make a lot of use of <code>nnreal</code>, and hence it's convenient to also use <code>nnnorm</code>. But it looks ugly.<br>\nWhat do people think of making</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`∥`</span><span class=\"n\">x</span><span class=\"bp\">`∥₊`</span> <span class=\"o\">:=</span> <span class=\"n\">nnnorm</span> <span class=\"n\">x</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I think that's a very good idea!</p>",
        "id": 229720596,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615402111
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/notation.20for.20nnnorm/near/229716519\">said</a>:</p>\n<blockquote>\n<p>Another option (quite radical, I admit) would be to refactor mathlib so that <code>norm</code> takes values in <code>nnreal</code>.</p>\n</blockquote>\n<p>Please don't do that :-)</p>",
        "id": 229720623,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615402126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/notation.20for.20nnnorm/near/229717204\">said</a>:</p>\n<blockquote>\n<p>How bad an idea would a <code>has_some_norm</code> typeclass be that instead of specifiy <code>real</code> or <code>nnreal</code> supports an arbitrary output type?</p>\n</blockquote>\n<p>Please don't do that :-)</p>",
        "id": 229720653,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615402141
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> What do you think of decoupling the definition of <code>nnnorm</code> from <code>norm</code>?</p>",
        "id": 229721182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615402326
    },
    {
        "content": "<p>Currently you can only get <code>nnnorm</code> if you have a <code>normed_group</code>. But in LTE we have gadgets that are not normed groups, but still carry a norm.</p>",
        "id": 229721298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615402369
    },
    {
        "content": "<p>So I would like to have <code>has_nnnorm</code>, which is automatically filled in by <code>normed_group</code></p>",
        "id": 229721423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615402415
    },
    {
        "content": "<p>We have the syntactic class <code>has_norm</code>. You could register a <code>norm_nonneg</code> class extending <code>has_norm</code> (which would be instantiated by all usual classes), and define <code>nnnorm</code> on all <code>norm_nonneg</code> classes.</p>",
        "id": 229729609,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615405292
    },
    {
        "content": "<p>Or you could definitely have a <code>has_nnnorm</code> class if that's more convenient for you!</p>",
        "id": 229733128,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1615406589
    }
]