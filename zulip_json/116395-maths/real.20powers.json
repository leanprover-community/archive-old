[
    {
        "content": "<p>If we did <code>has_pow real real</code>, what would <code>(-1)^(1/3)</code> be?</p>",
        "id": 137159650,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541345266
    },
    {
        "content": "<p>nonono</p>",
        "id": 137159654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541345281
    },
    {
        "content": "<p>real^real is surely not a good idea</p>",
        "id": 137159696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541345296
    },
    {
        "content": "<p>what would (-1)^(1/4) be?</p>",
        "id": 137159699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541345306
    },
    {
        "content": "<p>If you want real^real then I would suggest setting <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>a</mi><mi>b</mi></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a^b=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.849108em;\"></span><span class=\"strut bottom\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">b</span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">0</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mo>≤</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a\\leq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"base\"><span class=\"mord mathit\">a</span><span class=\"mrel\">≤</span><span class=\"mord mathrm\">0</span></span></span></span></p>",
        "id": 137159702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541345340
    },
    {
        "content": "<p>You can make sense of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>a</mi><mi>b</mi></msup></mrow><annotation encoding=\"application/x-tex\">a^b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.849108em;\"></span><span class=\"strut bottom\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">b</span></span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">a</span></span></span></span> a positive real and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">b</span></span></span></span> any complex number, it should be <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>exp</mi><mo>(</mo><mi>b</mi><mi>log</mi><mo>(</mo><mi>a</mi><mo>)</mo><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\exp(b\\log(a))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord mathit\">b</span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mopen\">(</span><span class=\"mord mathit\">a</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 137159729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541345376
    },
    {
        "content": "<blockquote>\n<p>If you want real^real then I would suggest setting <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>a</mi><mi>b</mi></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a^b=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.849108em;\"></span><span class=\"strut bottom\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">b</span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">0</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi><mo>≤</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a\\leq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"base\"><span class=\"mord mathit\">a</span><span class=\"mrel\">≤</span><span class=\"mord mathrm\">0</span></span></span></span></p>\n</blockquote>\n<p>I am quite sure you made a typo. That should have been <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>a</mi><mi>b</mi></msup><mo>=</mo><mn>3</mn><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">a^b = 37</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.849108em;\"></span><span class=\"strut bottom\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">b</span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">3</span><span class=\"mord mathrm\">7</span></span></span></span>.</p>",
        "id": 137159778,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541345412
    },
    {
        "content": "<p>you can make sense of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>a</mi><mi>b</mi></msup></mrow><annotation encoding=\"application/x-tex\">a^b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.849108em;\"></span><span class=\"strut bottom\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">b</span></span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">a</span></span></span></span> any non-zero complex number and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">b</span></span></span></span> any integer</p>",
        "id": 137159779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541345413
    },
    {
        "content": "<p>I would have put 37 but maybe <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>0</mn><mrow><mn>3</mn><mn>7</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">0^{37}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">3</span><span class=\"mord mathrm mtight\">7</span></span></span></span></span></span></span></span></span></span></span></span> should be 0...</p>",
        "id": 137159784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541345430
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  the usual thing: we totalize it. I think for <code>log</code> we can force it to by symmetric. either a long the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">y</span></span></span></span>-axis, or through the origin. For power on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">R</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68889em;\"></span><span class=\"strut bottom\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> you might want to have <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>a</mi><mi>b</mi></msup><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>a</mi><msup><mi mathvariant=\"normal\">∣</mi><mi>b</mi></msup></mrow><annotation encoding=\"application/x-tex\">a^b = |a|^b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.849108em;\"></span><span class=\"strut bottom\" style=\"height:1.099108em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">b</span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">∣</span><span class=\"mord mathit\">a</span><span class=\"mord\"><span class=\"mord mathrm\">∣</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">b</span></span></span></span></span></span></span></span></span></span></span> or similar, and of course <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>0</mn><mi>a</mi></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0^a = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.664392em;\"></span><span class=\"strut bottom\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">a</span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">0</span></span></span></span>.</p>",
        "id": 137161598,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541348366
    },
    {
        "content": "<p>Don't we want <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>0</mn><mn>0</mn></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0^0 = 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">0</span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">1</span></span></span></span>?</p>",
        "id": 137161689,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541348492
    },
    {
        "content": "<p>I think you want 0^0 = undefined if both those 0's are real numbers</p>",
        "id": 137161736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541348530
    },
    {
        "content": "<p>I don't think there is a natural choice to totalize it. Theorems about <code>log</code> and <code>pow</code> will always assume that the argument is non-negative.</p>",
        "id": 137161738,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541348531
    },
    {
        "content": "<p>and undefined := 0 in Lean</p>",
        "id": 137161741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541348548
    },
    {
        "content": "<p>Undefined means we are free to choose a value</p>",
        "id": 137161742,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541348551
    },
    {
        "content": "<p>and maybe for <code>pow</code>, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>0</mn><mn>0</mn></msup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">0^0 = 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">0</span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">1</span></span></span></span> makes more sense. I don't know.</p>",
        "id": 137161748,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541348571
    },
    {
        "content": "<p>There's certainly a case for (0 : real) ^ (0 : nat) = 1</p>",
        "id": 137161749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541348573
    },
    {
        "content": "<p>Yes: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>a</mi><mrow><mi>n</mi><mo>:</mo><mrow><mi mathvariant=\"double-struck\">R</mi></mrow></mrow></msup><mo>=</mo><msup><mi>a</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">a^{n : \\mathbb{R}}= a^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.845223em;\"></span><span class=\"strut bottom\" style=\"height:0.845223em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845223em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span><span class=\"mrel mtight\">:</span><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">R</span></span></span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span></span></span></span></span></span></span> should hold</p>",
        "id": 137161766,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541348617
    },
    {
        "content": "<p>so 'real'-power should extend 'int'-power should extend 'nat'-power</p>",
        "id": 137161813,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541348684
    },
    {
        "content": "<p>But that doesn't work if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>a</mi><mi>n</mi></msup><mo>=</mo><mo>∣</mo><mi>a</mi><msup><mo>∣</mo><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">a^n = \\mid a\\mid^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mrel\">∣</span><span class=\"mord mathit\">a</span><span class=\"mrel\"><span class=\"mrel\">∣</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 137161815,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541348689
    },
    {
        "content": "<p>0^a = 0 unless a = 0, otherwise 1</p>",
        "id": 137161933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541348880
    },
    {
        "content": "<p>right it doesn't extend <code>int</code>-power. And I don't see a sensible default where it would. we could check if <code>floor</code> or <code>ceil</code> of the argument is odd/even, but this feels too forced</p>",
        "id": 137161973,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541348888
    },
    {
        "content": "<p>I have this in the metamath definition, with the if and everything</p>",
        "id": 137161979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541348909
    },
    {
        "content": "<p>for negative powers I used complexes, because there was only one definition complex ^ complex, of course that's not an option here</p>",
        "id": 137161985,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541348941
    },
    {
        "content": "<p>In metamath is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mo>−</mo><mn>1</mn><msup><mo>)</mo><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn></mrow></msup><mo>=</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">(-1)^{1/3} = -1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8879999999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">/</span><span class=\"mord mathrm mtight\">3</span></span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span></span></span></span></p>",
        "id": 137161999,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541348979
    },
    {
        "content": "<p>no, it's e^2pi i/3</p>",
        "id": 137162004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541348992
    },
    {
        "content": "<p>that ain't no real</p>",
        "id": 137162052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349008
    },
    {
        "content": "<p>like I said, complex</p>",
        "id": 137162057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349018
    },
    {
        "content": "<p>I don't think we should try for the rational extension, it's crazy and not at all complete</p>",
        "id": 137162065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349044
    },
    {
        "content": "<p>okay, what about using <code>a^b = Re (a ^ b)</code>?</p>",
        "id": 137162066,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541349046
    },
    {
        "content": "<p>You want to define the Riemann Zeta function for complex s with Re(s)&gt;1 as the infinite sum of n^{-s}</p>",
        "id": 137162072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349059
    },
    {
        "content": "<p>where the left one is on reals and right of the equality is the complex power?</p>",
        "id": 137162080,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541349066
    },
    {
        "content": "<p>that could work...</p>",
        "id": 137162087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349076
    },
    {
        "content": "<p>AFAIU it is an extension of <code>int</code>-power  and it is continuous</p>",
        "id": 137162091,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541349103
    },
    {
        "content": "<p>except of course where it isn't</p>",
        "id": 137162136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349129
    },
    {
        "content": "<p>I think the power function is discontinuous at 0,0 no matter what you do</p>",
        "id": 137162167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349162
    },
    {
        "content": "<p>argh, yes</p>",
        "id": 137162175,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541349177
    },
    {
        "content": "<p>not if you restrict the power to be in nat</p>",
        "id": 137162176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349178
    },
    {
        "content": "<p>and there is probably a branch cut somewhere that will survive in the real version</p>",
        "id": 137162187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349194
    },
    {
        "content": "<p>for example, when evaluating a polynomial, it's essential that x^0 gets sent to 1</p>",
        "id": 137162188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349197
    },
    {
        "content": "<p>but that 0 is 0:nat</p>",
        "id": 137162190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349206
    },
    {
        "content": "<p>right, I am 100% of the view that 0^0 = 1</p>",
        "id": 137162193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349216
    },
    {
        "content": "<p>but my point is that this makes things continuous in this domain of real x nat -&gt; real</p>",
        "id": 137162199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349239
    },
    {
        "content": "<p>oh</p>",
        "id": 137162239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349247
    },
    {
        "content": "<p>a lot of crazy mathematicians use \"everything is continuous\" ism to justify claiming that it is undefined there</p>",
        "id": 137162240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349249
    },
    {
        "content": "<p>in this case one wants to use <code>pow : nat -&gt; real -&gt; real</code> anyway. I think the case we are discussing now is how to define <code>pow : real -&gt; real -&gt; real</code></p>",
        "id": 137162244,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541349251
    },
    {
        "content": "<p>but one issue is whether it should extend the nat version</p>",
        "id": 137162248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349276
    },
    {
        "content": "<p>of course, that should be easy</p>",
        "id": 137162251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349287
    },
    {
        "content": "<p>I agree, it should extend the <code>nat</code>-version. and it would be nice if we could extend the <code>int</code> version in a sensible way</p>",
        "id": 137162261,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541349316
    },
    {
        "content": "<p>extending int should also be possible</p>",
        "id": 137162262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349319
    },
    {
        "content": "<p>I know a lot of crazy computer scientists use \"everything must extend what we already have in every case even if answers are junk\"ism...</p>",
        "id": 137162266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349324
    },
    {
        "content": "<p>extending to rat is possible but a bad idea in my view</p>",
        "id": 137162273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349345
    },
    {
        "content": "<p>I think (0 : real) ^ (0 : real) is junk so should be 0</p>",
        "id": 137162274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349354
    },
    {
        "content": "<p>lolno</p>",
        "id": 137162278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349359
    },
    {
        "content": "<p>but (0 : real) ^ (0 : nat) is not junk so should be 1</p>",
        "id": 137162315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349364
    },
    {
        "content": "<p>Noooo</p>",
        "id": 137162322,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541349369
    },
    {
        "content": "<p>:-)</p>",
        "id": 137162329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349382
    },
    {
        "content": "<p>we don't extend everything. In Isabelle the logarithm of a negative argument is undefined in the sense of a fixed but unknown value</p>",
        "id": 137162331,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541349383
    },
    {
        "content": "<p>But then <code>cast_pow</code> requires proving things are non zero.</p>",
        "id": 137162335,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541349392
    },
    {
        "content": "<p>I was not sure about log of negatives either</p>",
        "id": 137162343,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349418
    },
    {
        "content": "<p>log of 0 is even worse</p>",
        "id": 137162348,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349424
    },
    {
        "content": "<p>junk!</p>",
        "id": 137162349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349425
    },
    {
        "content": "<p>37</p>",
        "id": 137162352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349431
    },
    {
        "content": "<p>log x = log |x| makes some calculus stuff very slightly slicker</p>",
        "id": 137162359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349450
    },
    {
        "content": "<p>but I don't think it will come up much anyway</p>",
        "id": 137162408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349505
    },
    {
        "content": "<p>What about <code>sgn x * log |x|</code>?  I think both have their advantages/disadvantages.</p>",
        "id": 137162409,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541349508
    },
    {
        "content": "<p>whoa</p>",
        "id": 137162412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349517
    },
    {
        "content": "<p>what is that for?</p>",
        "id": 137162415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349524
    },
    {
        "content": "<p>it looks cool on the graph paper in my head...</p>",
        "id": 137162430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349560
    },
    {
        "content": "<p>I think there were some cases where it could have been helpful. But I don't remember the exact statements where it would save some non-negativity assumption. But yes the graph looks nice :-)</p>",
        "id": 137162481,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541349619
    },
    {
        "content": "<p>But <code>x /= 0 -&gt; y /= 0 -&gt; log (x * y) = log x + log y</code> only works for the <code>log x = log |x|</code> case</p>",
        "id": 137162601,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541349784
    },
    {
        "content": "<p>that's a junk theorem!</p>",
        "id": 137162613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349827
    },
    {
        "content": "<p>This islike you trying to figure out what the square root of anegative number should be so that sqrt(ab)=sqrt(a)sqrt(b) always works. Nobody who wants to apply that theorem will have a,b&lt;0</p>",
        "id": 137162668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349871
    },
    {
        "content": "<p>sometimes a,b&gt;0 but it's a hassle to prove</p>",
        "id": 137162682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349904
    },
    {
        "content": "<p>you can't say \"x != 0\" is any better than \"x &gt; 0\". It's still a precondition, so tehe user has to supply something</p>",
        "id": 137162687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349906
    },
    {
        "content": "<p>but sometimes <code>x !=0</code> is easier to proof than <code>x &gt; 0</code>.</p>",
        "id": 137162700,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1541349947
    },
    {
        "content": "<p><em>boggle</em></p>",
        "id": 137162712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349959
    },
    {
        "content": "<p>I mean it is literally a weaker hypothesis</p>",
        "id": 137162752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541349974
    },
    {
        "content": "<p>if you're in a situation where you're taking logs and you don't have x&gt;0 as a hypothesis then something is seriously wrong with your local context anyway</p>",
        "id": 137162753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541349978
    },
    {
        "content": "<p>Proving things are <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">&gt;0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.68354em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mrel\">&gt;</span><span class=\"mord mathrm\">0</span></span></span></span> is cheap on paper but expensive in lean. Keeping track of which theorems are randomly true for some non-intuitive definition is cheap in Lean but expensive on paper.</p>",
        "id": 137162756,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1541350004
    },
    {
        "content": "<p>you had it in your context once, then you did 5 rewrites and it's not obviously true any more</p>",
        "id": 137162764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350013
    },
    {
        "content": "<p>I did see that in a 1st year's code recently -- \"let H2 := H,...\" and I thought \"wooah what is this fool doing?\" and then I understood that they wanted to rewrite H but keep track of it anyway</p>",
        "id": 137162781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350057
    },
    {
        "content": "<p>those could be some combination of rewrites to the log(s) and rewrites to the hypothesis too</p>",
        "id": 137162834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350144
    },
    {
        "content": "<p>What are the preconditions to <code>log (log (log x + 1)) &lt; 3</code>?</p>",
        "id": 137162843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350189
    },
    {
        "content": "<p>x&gt;&gt;0</p>",
        "id": 137162849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350200
    },
    {
        "content": "<p>but not too &gt;&gt; or else it won't be <code>&lt; 3</code> :)</p>",
        "id": 137162897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350225
    },
    {
        "content": "<p>If it's too &gt;&gt; then it's false. If it's not &gt;&gt; enough then it makes no sense</p>",
        "id": 137162907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350246
    },
    {
        "content": "<p>it's NaN</p>",
        "id": 137162919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350265
    },
    {
        "content": "<p>unfortunately (or fortunately), <code>real</code> has no NaN</p>",
        "id": 137162921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350287
    },
    {
        "content": "<p>just ask anyone who has dealt with IEEE floats, NaN is a mess</p>",
        "id": 137162928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350314
    },
    {
        "content": "<p>If you say to a mathematician \"this is true for x=20\" they will assume you mean that the LHS evaluates to something meaningful in maths</p>",
        "id": 137162929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350316
    },
    {
        "content": "<p>right, and that's one of the more expensive in lean things to do</p>",
        "id": 137162970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350358
    },
    {
        "content": "<p>you might think \"we could just have preconditions on <code>log</code> and then it would all make sense\" but that would just make the problem worse</p>",
        "id": 137162980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350397
    },
    {
        "content": "<p>I think we need a <code>with_NaN</code> structure</p>",
        "id": 137162987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350433
    },
    {
        "content": "<p><code>with_bot</code>?</p>",
        "id": 137163030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350445
    },
    {
        "content": "<p>but it might not be a bottom</p>",
        "id": 137163033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350457
    },
    {
        "content": "<p>or equal to itself..</p>",
        "id": 137163035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350469
    },
    {
        "content": "<p>well obviously we'd have to modify eq</p>",
        "id": 137163043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350490
    },
    {
        "content": "<p>obviously</p>",
        "id": 137163045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350497
    },
    {
        "content": "<p>we need not_a_Type</p>",
        "id": 137163057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350518
    },
    {
        "content": "<p>or not_a_term or something</p>",
        "id": 137163064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350534
    },
    {
        "content": "<p>it was silly of us to assume that all types have a reflexive relation... we should generalize to semitypes</p>",
        "id": 137163122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350567
    },
    {
        "content": "<p>rofl that's clearly what these guys have been missing for the last 100 years</p>",
        "id": 137163129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350582
    },
    {
        "content": "<p>we realised we needed semimodules</p>",
        "id": 137163140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350590
    },
    {
        "content": "<p>it was only a matter of time before we had the real breakthrough</p>",
        "id": 137163145,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350598
    },
    {
        "content": "<p>I joke, but PERs (partial equivalence relations) as types are a thing</p>",
        "id": 137163172,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350637
    },
    {
        "content": "<p>nuprl uses it</p>",
        "id": 137163177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350652
    },
    {
        "content": "<p>is that where you drop reflexivity?</p>",
        "id": 137163181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350668
    },
    {
        "content": "<p>yeah</p>",
        "id": 137163183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350673
    },
    {
        "content": "<p>so you get equivalence classes and then some wasteland</p>",
        "id": 137163222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350683
    },
    {
        "content": "<p>of terms which are related to nothing</p>",
        "id": 137163229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350690
    },
    {
        "content": "<p>it's just an equivalence relation on a subtype</p>",
        "id": 137163236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350697
    },
    {
        "content": "<p>right</p>",
        "id": 137163238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541350701
    },
    {
        "content": "<p>In type theory it has the purpose of rolling subtyping and quotients into one construct</p>",
        "id": 137163245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350729
    },
    {
        "content": "<p>so you get some nice categorical structure</p>",
        "id": 137163259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1541350772
    }
]