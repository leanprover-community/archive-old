[
    {
        "content": "<p>I want to define the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/convex_cone.positive\">docs#convex_cone.positive</a> consisting of vectors of a finite size <code>n</code> with all coordinates non-negative. If I try </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">convex_cone.positive</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I get the following error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">,</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">ordered_smul</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I'm getting really lost in the various instance hierarchies in trying to define this. Any suggestions on how to do this?</p>",
        "id": 292928662,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1660224016
    },
    {
        "content": "<p>That should be obvious.</p>",
        "id": 292928698,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660224035
    },
    {
        "content": "<p>Are you importing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.ordered_smul\">docs#pi.ordered_smul</a>?</p>",
        "id": 292928743,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660224058
    },
    {
        "content": "<p>Didn't know about this file. Let me try.</p>",
        "id": 292928954,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1660224134
    },
    {
        "content": "<p>Same error even with the import</p>",
        "id": 292929037,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1660224180
    },
    {
        "content": "<p>Give me a MWE, I'll fix it.</p>",
        "id": 292929071,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660224196
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.cone.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.module</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">convex_cone.positive</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 292929170,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1660224240
    },
    {
        "content": "<p><code>analysis.cone.basic</code> doesn't exist</p>",
        "id": 292929305,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660224275
    },
    {
        "content": "<p>typo, <code>convex</code></p>",
        "id": 292929390,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1660224306
    },
    {
        "content": "<p><code>analysis.convex.basic</code></p>\n<p>sorry</p>",
        "id": 292929419,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1660224322
    },
    {
        "content": "<p><a href=\"https://tqft.net/mathlib/analysis/convex/cone\">file#analysis/convex/cone</a>, actually</p>",
        "id": 292929462,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660224340
    },
    {
        "content": "<p>my vscode is stuck, 1 min, will fix the MWE</p>",
        "id": 292929729,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1660224433
    },
    {
        "content": "<p>ok here's is the corrected mwe </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.convex.cone</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.order.module</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">convex_cone.positive</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and the error is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">ordered_smul</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 292930162,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1660224600
    },
    {
        "content": "<p>Okay, this is really weird.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.module</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ordered_smul</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ordered_smul</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ordered_smul</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">pi.ordered_smul'</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- works</span>\n</code></pre></div>",
        "id": 292932724,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660225525
    },
    {
        "content": "<p>TC inference does try unifying<code>pi.ordered_smul'</code> but then it fails to find <code>linear_ordered_field ‚Ñù</code>, even though it's clearly there.</p>",
        "id": 292933140,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660225675
    },
    {
        "content": "<p>Looking at the trace, it might be because it finds a huge term for <code>ordered_add_comm_monoid (fin 2 ‚Üí ‚Ñù)</code>. Maybe it would also help if <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_smul\">docs#ordered_smul</a> only assumed <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_smul\">docs#has_smul</a>, not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smul_with_zero\">docs#smul_with_zero</a>.</p>",
        "id": 292933331,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660225743
    },
    {
        "content": "<p>Should I try removing it? I don't think my laptop can handle this deep a change though lol. I can only push this change to mathlib and wait for CI.</p>",
        "id": 292936839,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1660226913
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.ordered_smul\">docs#pi.ordered_smul</a> true more generally without needing <code>linear_ordered_field</code>?</p>",
        "id": 292938256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660227380
    },
    {
        "content": "<p>But this shouldn't cause problems for <code>‚Ñù</code> modules, no?</p>",
        "id": 292949722,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1660230904
    },
    {
        "content": "<p>Yes it should be. Looks like everything got dumped into the same section by accident.</p>",
        "id": 292950539,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660231154
    },
    {
        "content": "<p>Should I create an Issue for now?</p>",
        "id": 293048663,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1660282160
    },
    {
        "content": "<p>Am still trying to fix it, fwiw</p>",
        "id": 293049103,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660282618
    },
    {
        "content": "<p>Oh, oops, thank you so much! I saw your reply one min after I posted <a href=\"https://github.com/leanprover-community/mathlib/pull/16021\">#16021</a></p>",
        "id": 293049637,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1660283167
    },
    {
        "content": "<p>I cleaned up <code>algebra.order.smul</code> and <code>algebra.order.module</code>, but that still didn't the error, so in # I am adding yet another redundant instance.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.module</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ordered_smul</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_field</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">mul_action_with_zero</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ordered_add_comm_group</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ordered_smul</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ordered_smul</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">pi.ordered_smul'</span> <span class=\"n\">Œπ</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- works</span>\n</code></pre></div>\n<p>(MWE on <a href=\"https://github.com/leanprover-community/mathlib/pull/16131\">#16131</a> when removing <code>pi.ordered_smul''</code>)<br>\ncc <span class=\"user-mention\" data-user-id=\"245078\">@Apurva Nakade</span></p>",
        "id": 294104875,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660834901
    },
    {
        "content": "<p>Thank you! Do you have a general sense of why this is happening? Are there some diamonds being created which prevents lean from infering the correct instance?</p>",
        "id": 294213793,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1660893448
    },
    {
        "content": "<p>No, I don't understand why Lean fails to find <code>linear_ordered_field ‚Ñù</code> within the search for <code>ordered_smul ‚Ñù (Œπ ‚Üí ‚Ñù)</code>.</p>",
        "id": 294214194,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660893666
    },
    {
        "content": "<p>Maybe <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> will have an idea?</p>",
        "id": 294214518,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660893849
    },
    {
        "content": "<p>It's the standard pi typeclass issue for dependent type classes</p>",
        "id": 294216662,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660895226
    },
    {
        "content": "<p>Yes, but why is it failing given that we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.ordered_smul'\">docs#pi.ordered_smul'</a>?</p>",
        "id": 294217731,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660895816
    },
    {
        "content": "<p>Because that's about <code>@module (ring.to_semiring)</code> or similar, but here you need <code>@module (comm_semiring.to_semiring)</code> or similar</p>",
        "id": 294218896,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660896368
    },
    {
        "content": "<p>(or more likely, the same problem but for the <code>add_comm_monoid</code> argument since that's about a pi type)</p>",
        "id": 294219007,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660896437
    },
    {
        "content": "<p>But surely that doesn't matter? This kind of mismatch happens all over the place.</p>",
        "id": 294219376,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1660896625
    },
    {
        "content": "<p>Yeah, and it causes problems all over the place too</p>",
        "id": 294271240,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660917312
    },
    {
        "content": "<p>See for instance <a href=\"https://github.com/leanprover-community/mathlib/blob/be87e2504a0c96de2efb63d3f80098edf5f00085/src/analysis/normed_space/matrix_exponential.lean#L66-L93\">these lines</a> which provide <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.algebra_ring\">docs#function.algebra_ring</a> and friends</p>",
        "id": 294271419,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660917361
    },
    {
        "content": "<p>It's possible having a <code>function.module_ring</code> shortcut instance would solve the <code>ordered_smul</code> problem being faced here.</p>",
        "id": 294271667,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1660917423
    }
]