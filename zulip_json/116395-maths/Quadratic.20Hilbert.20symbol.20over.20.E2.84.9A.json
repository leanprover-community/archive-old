[
    {
        "content": "<p>As already mentioned in a different thread, I have written code that defines the (quadratic) Hilbert symbol for rational numbers and proves (among other properties) the product formula.<br>\nThere appears to be interest to include this into mathlib, so I'll try to break this up (it is several thousand lines of code) into a number of reasonably-sized PRs, which I'm going to discuss here first.</p>",
        "id": 278066950,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649269906
    },
    {
        "content": "<p>The overall plan is roughly as follows.</p>\n<ul>\n<li>Define a type for places of ℚ</li>\n<li>\n<p>Define the symbol on integers and separately for</p>\n<ul>\n<li>the place at infinity</li>\n<li>the place 2</li>\n<li>the odd places<br>\nby an explicit formula</li>\n</ul>\n</li>\n<li>\n<p>Prove properties (symmetry, multiplicativity, ...) in each case separately</p>\n</li>\n<li>Then conclude that these properties are valid in general (over the integers)</li>\n<li>Prove the product formula (over the integers) by multiplicativity using quadratic reciprocity</li>\n<li>Define the symbol over ℚ via the integral version and prove the relevant things over ℚ</li>\n</ul>",
        "id": 278067337,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649270098
    },
    {
        "content": "<p>Do you think it's worth defining a type of places for a general number field and then proving that the places of \\Q are what we know they are? Other than that, this looks like a fine plan</p>",
        "id": 278067935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649270393
    },
    {
        "content": "<p>In particular, I am relying on Quadratic Reciprocity (and the auxiliary laws), so I need to use properties of the Legendre symbol. The relevant file, <a href=\"https://leanprover-community.github.io/mathlib_docs/number_theory/quadratic_reciprocity.html#zmod.legendre_sym\">number_theory.quadratic_reciprocity</a>, unfortunately does not have a lot of API lemmas, and some of those that are there are only for natural numbers <code>a</code> (in the symbol <code>(a/p)</code>), whereas the symbol is defined for integers <code>a</code>. This is a bit painful, since there is no obvious reduction to natural numbers.<br>\nSo I propose to change the lemmas that are there to deal with integers <code>a</code> (using search in VScode, I checked that they arenot used outside the file) and add some new ones that I find useful. Does that sound like a good first step?</p>",
        "id": 278068435,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649270641
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/278067935\">said</a>:</p>\n<blockquote>\n<p>Do you think it's worth defining a type of places for a general number field and then proving that the places of \\Q are what we know they are? Other than that, this looks like a fine plan</p>\n</blockquote>\n<p>I want to define <code>def hilbert_sym (v : plcℚ) (a b : ℚ) : ℤ := ...</code>, where <code>plcℚ</code> is the type for places of ℚ, and then be able to do case distinctions according to the nature of the place (so that I can invoke the explicit definitions). For this purpose, my simple-minded definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive decidable_eq]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">plcℚ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"n\">infty</span> <span class=\"o\">:</span> <span class=\"n\">plcℚ</span> <span class=\"c1\">-- the place at infinity</span>\n<span class=\"bp\">|</span> <span class=\"n\">finpl</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">plcℚ</span> <span class=\"c1\">-- finite places correspond to prime numbers</span>\n</code></pre></div>\n<p>works fine. (One question here is whether <code>hp</code> should better be a type class instance argument.)</p>",
        "id": 278068941,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649270886
    },
    {
        "content": "<p>For my purposes right now, places of general number fields seem to be overkill.</p>",
        "id": 278068980,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649270910
    },
    {
        "content": "<p>But it would make sense to eventually have suitable glue.</p>",
        "id": 278069004,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649270928
    },
    {
        "content": "<p>I seem to recall Ostrowski's theorem being formalized somewhere...</p>",
        "id": 278070914,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649271822
    },
    {
        "content": "<p><a href=\"https://github.com/RaitoBezarius/berkovich-spaces\">https://github.com/RaitoBezarius/berkovich-spaces</a> is the relevant repo, but it seems that this never made it into mathlib</p>",
        "id": 278071176,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649271937
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 278071198,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1649271950
    },
    {
        "content": "<p>At one point I tried to generalize the Legendre symbol file to integers completely</p>",
        "id": 278080116,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1649276145
    },
    {
        "content": "<p>So what happened to that attempt?</p>",
        "id": 278080212,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649276180
    },
    {
        "content": "<p>But I remember it being a bit subtle / annoying to convert some of the proofs there. A lot of it should be doable though, but it's not clear to me if it's easiest to generalize the proofs or to just add the integer versions using the natural ones and dealing with negation appropriately</p>",
        "id": 278080297,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1649276223
    },
    {
        "content": "<p>I will try to find it tomorrow. It may be on GitHub or on my computer or deleted unfortunately</p>",
        "id": 278080370,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1649276262
    },
    {
        "content": "<p>OK; I hadn't yet looked at the proofs in that file in detail. I was assuming that it should in fact be more natural to work with integers. I'll wait to see if you find something.</p>",
        "id": 278080634,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649276386
    },
    {
        "content": "<p>Shouldn't we generalize to the Jacobi symbol, or something like that?</p>",
        "id": 278113824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649302717
    },
    {
        "content": "<p>Another direction of generalization would be Hilbert symbol -&gt; <a href=\"https://en.wikipedia.org/wiki/Steinberg_symbol\">Steinberg symbol</a> :) A lot of basic algebraic K-theory seems low-hanging ...</p>",
        "id": 278114608,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1649303801
    },
    {
        "content": "<p>Yeah it would take about 5 minutes to define Milnor K theory. I actually have some (other) applications for this in mind. Maybe we should just do it! Proving that the tame symbol and norm maps are well defined should be a fun project.</p>",
        "id": 278114885,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649304047
    },
    {
        "content": "<p>You should just do it. We have things like definition of flat and projective modules with very little API because we're not quite ready for the API (need more homological algebra) but it was clear what the definition should be</p>",
        "id": 278126504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649316607
    },
    {
        "content": "<p>I'm not sure whether I should open a new topic on this, but it is related to my attempt at refactoring the Legendre symbol code.</p>\n<p>The present file <a href=\"https://leanprover-community.github.io/mathlib_docs/number_theory/quadratic_reciprocity.html\">number_theory/quadratic_reciprocity</a> uses <code>[fact (p % 2 = 1)]</code> in a number of places. Doing <code>grep</code> with <code>fact (.* % 2 = 1)</code> over all of mathlib shows that it is used exactly twice elsewhere: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.le_div_two_iff_lt_neg\">docs#zmod.le_div_two_iff_lt_neg</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zmod.ne_neg_self\">docs#zmod.ne_neg_self</a>. Of these two, the first apears to be used nowhere, and the second is used only in quadratic_reciprocity.</p>\n<p>My question is, is it at all useful to have statements depending on <code>[fact (n % 2 = 1)]</code>? Or would it be better to just add explicit hypotheses? In the Legendre symbol code, I would prefer to have an explicit hypothesis <code>p ≠ 2</code> instead. Opinions?</p>",
        "id": 278423323,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649528229
    },
    {
        "content": "<p>(<code>#find fact (_ % 2) = 1</code> times out, BTW...)</p>",
        "id": 278423425,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649528355
    },
    {
        "content": "<p>If you need it everywhere then another possibility is just to add it as a hypothesis and then <code>include</code> it. The <code>fact</code> solution for adding a fact everywhere is not a great one.</p>",
        "id": 278423922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649529053
    },
    {
        "content": "<p>I have no problem with adding explicit hypotheses where I need them.</p>",
        "id": 278424383,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649529688
    },
    {
        "content": "<p>Of course, most statements about the Legendre symbol need that <code>p</code> is an odd prime, but for some, it is not necessary (the way it is defined).</p>",
        "id": 278424434,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649529736
    },
    {
        "content": "<p>Another question: is there a naming convention for statements that say that something is a multiplicative function? Concretely, I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">legendre_sym_mult</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">legendre_sym</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">legendre_sym</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">legendre_sym</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>(add <code>(p : nat) [fact p.prime])</code> but I am not sure about the name...</p>",
        "id": 278424463,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649529818
    },
    {
        "content": "<p>Mathlib's definition of the Legendre symbol is wrong for <code>p = 2</code>, isn't it?</p>",
        "id": 278425485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649531184
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> The name would be <code>legendre_sym_mul</code>, or possibly <code>mul_left</code> if you think it's ambiguous.</p>",
        "id": 278425496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649531235
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/278425485\">said</a>:</p>\n<blockquote>\n<p>Mathlib's definition of the Legendre symbol is wrong for <code>p = 2</code>, isn't it?</p>\n</blockquote>\n<p>The Legendre symbol is only defined when the second argument is an odd prime, so there is no \"wrong\" definition...</p>",
        "id": 278425552,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649531286
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/278425496\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> The name would be <code>legendre_sym_mul</code>, or possibly <code>mul_left</code> if you think it's ambiguous.</p>\n</blockquote>\n<p>I'll change the name to <code>legendre_sym_mul</code> then, since there is no <code>mul_right</code>. (That would be different for the Jacobi symbol.)</p>",
        "id": 278425565,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649531340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/278425552\">said</a>:</p>\n<blockquote>\n<p>The Legendre symbol is only defined when the second argument is an odd prime, so there is no \"wrong\" definition...</p>\n</blockquote>\n<p>Aah, ok. But the Legendre symbol for <code>p = 2</code> is also not computing what's needed for quadratic reciprocity with <code>p = 2</code>. I think that's what I remembered, at least.</p>",
        "id": 278425681,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649531500
    },
    {
        "content": "<p>Unless somebody objects, I will also replace the <code>[fact (p % 2 = 1)]</code> arguments with <code>p  ≠ 2</code>s.</p>",
        "id": 278425734,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649531530
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/278425681\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/278425552\">said</a>:</p>\n<blockquote>\n<p>The Legendre symbol is only defined when the second argument is an odd prime, so there is no \"wrong\" definition...</p>\n</blockquote>\n<p>Aah, ok. But the Legendre symbol for <code>p = 2</code> is also not computing what's needed for quadratic reciprocity with <code>p = 2</code>. I think that's what I remembered, at least.</p>\n</blockquote>\n<p>One could try to define <code>(a / 2)</code> so that QR works. But then the problem is that 2 is neither 1 nor 3 mod 4, so it is not clear what the \"correct\" version of QR would be.</p>",
        "id": 278425758,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649531589
    },
    {
        "content": "<p>I agree that using <code>p ≠ 2</code> assumptions makes more sense than <code>[fact (p % 2 = 1)]</code>. I think the QR file is pretty old. We didn't haven an even/odd API back then either.</p>",
        "id": 278425827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649531691
    },
    {
        "content": "<p>The copyright notice says 2018. I have no idea what \"pretty old\" means for mathlib <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 278425848,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649531732
    },
    {
        "content": "<p>If you define <code>legendre a p = if (a : zmod p) = 0 then 0 else if is_square (a : zmod p) then 1 else -1</code>, then you get something different from what we have now, for <code>p = 2</code>, right?</p>",
        "id": 278425858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649531756
    },
    {
        "content": "<p>No: when <code>p = 2</code>, we have <code>a ^ (p /2) = a = 1</code> (in <code>zmod 2</code>) when <code>a</code> is not zero mod 2.</p>",
        "id": 278425928,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649531833
    },
    {
        "content": "<p>Aahrg, I'm being terribly confused.</p>",
        "id": 278425947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649531868
    },
    {
        "content": "<p>I would be inclined to make the definition at <code>2</code> work out to be true for as many theorems as possible, so that the assumption <code>p ≠ 2</code> only bugs you as little as possible.</p>",
        "id": 278426114,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649532068
    },
    {
        "content": "<p>Maybe I shouldn't try to recall some issue I had when I was working with this file more than a year ago...</p>",
        "id": 278426115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649532071
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">legendre_sym</span> <span class=\"n\">a</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">legendre_sym</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hh</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"bp\">↑</span><span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(The proof can certainly be simplified.)</p>",
        "id": 278426119,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649532079
    },
    {
        "content": "<p>\"Everyone\" knows that two is odd and that Legendre symbols shouldn't make sense at 2.  That's a little like dividing by zero, in my understanding.</p>",
        "id": 278426177,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649532125
    },
    {
        "content": "<p>I think it is the usual approach to prefer total functions with \"garbage\" values at arguments where they should not be defined.</p>",
        "id": 278426198,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649532173
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/278424463\">said</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">legendre_sym_mult</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">legendre_sym</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">legendre_sym</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">legendre_sym</span> <span class=\"n\">b</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>It's <code>map_mul</code> if you make <code>λ x, legendre_sym x p</code> a <code>monoid_hom</code>.</p>",
        "id": 278426277,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1649532268
    },
    {
        "content": "<p>But to do that you have to swap the order of the arguments...</p>",
        "id": 278426303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649532333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/278426303\">said</a>:</p>\n<blockquote>\n<p>But to do that you have to swap the order of the arguments...</p>\n</blockquote>\n<p>I was debating with my self whether I should suggest swapping the arguments anyway.</p>",
        "id": 278426354,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649532386
    },
    {
        "content": "<p>Should I set up a poll on this? How would I do that?</p>",
        "id": 278426383,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649532451
    },
    {
        "content": "<p>Would it make sense to make the Legendre symbol take value in <code>sign_type</code>?</p>",
        "id": 278426459,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649532548
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">poll</span> <span class=\"n\">some</span> <span class=\"n\">title</span>\n<span class=\"bp\">-</span> <span class=\"n\">some</span> <span class=\"n\">option</span>\n<span class=\"bp\">-</span> <span class=\"n\">another</span> <span class=\"n\">option</span>\n</code></pre></div>\n<p>Make sure you don't have other text in the same post.</p>",
        "id": 278426470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649532576
    },
    {
        "content": "<p>Is <code>sign_type</code> a multiplicative monoid?</p>",
        "id": 278426472,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649532579
    },
    {
        "content": "<p>Yes, it is, but I'm not sure it is already in mathlib: let me check</p>",
        "id": 278426502,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649532603
    },
    {
        "content": "<p><del>docs#sign_type</del></p>",
        "id": 278426527,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649532622
    },
    {
        "content": "<p>/poll Order of arguments in <code>legendre_sym</code>: should (a / p) be</p>\n<ul>\n<li><code>legendre_sym a p</code> (this is what it is currently)</li>\n<li><code>legendre_sym p a</code> (would make <code>legendre_sym p</code> a multiplicative function)</li>\n</ul>",
        "id": 278426544,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649532671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/278426527\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/sign_type\">docs#sign_type</a></p>\n</blockquote>\n<p>The link gives me a 404 error.</p>",
        "id": 278426561,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649532707
    },
    {
        "content": "<p>Not yet: <a href=\"https://github.com/leanprover-community/mathlib/pull/12835\">#12835</a></p>",
        "id": 278426566,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649532712
    },
    {
        "content": "<p>How do I get from <code>h : (a : zmod p) ≠ 0</code> and <code>hp : p = 2</code> to <code>(a : zmod 2) ≠ 0</code>?</p>",
        "id": 278427285,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649533737
    },
    {
        "content": "<p><code>simp_rw [hp] at h</code> does not seem to work...</p>",
        "id": 278427310,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649533798
    },
    {
        "content": "<p>Does <code>subst hp</code> work?</p>",
        "id": 278427387,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649533875
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">revert</span> <span class=\"bp\">'</span><span class=\"n\">_inst_1'</span><span class=\"o\">,</span> <span class=\"n\">it</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">frozen</span> <span class=\"kn\">local</span> <span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">possible</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">use</span> <span class=\"n\">tactic</span> <span class=\"bp\">`</span><span class=\"n\">unfreezing</span><span class=\"bp\">`</span> <span class=\"n\">to</span> <span class=\"n\">temporarily</span> <span class=\"n\">reset</span> <span class=\"n\">the</span> <span class=\"n\">set</span> <span class=\"n\">of</span> <span class=\"kn\">local</span> <span class=\"n\">instances</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(there is <code>[fact p.prime]</code> somewhere...)</p>",
        "id": 278427454,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649533925
    },
    {
        "content": "<p><code>unfreezing { subst hp }</code></p>",
        "id": 278427461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649533948
    },
    {
        "content": "<p><code>unfreezing</code> is unknown, but <code>unfreezingI</code> exists and seems to work.</p>",
        "id": 278427493,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649533997
    },
    {
        "content": "<p>Is it unfreezing or unfreezingI?  Is there a difference?</p>",
        "id": 278427495,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649534004
    },
    {
        "content": "<p>Ooh, so that error message contains a typo.</p>",
        "id": 278427501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649534017
    },
    {
        "content": "<p>This sentence contais three erors.</p>",
        "id": 278427552,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649534067
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/278426277\">said</a>:</p>\n<blockquote>\n<p>It's <code>map_mul</code> if you make <code>λ x, legendre_sym x p</code> a <code>monoid_hom</code>.</p>\n</blockquote>\n<p>This now looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">legendre_sym_mul'</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→*</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">legendre_sym</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"n\">legendre_sym_one</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"n\">legendre_sym_mul</span> <span class=\"n\">p</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(after swapping the arguments of <code>legendre_sym</code>).</p>",
        "id": 278431232,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649539052
    },
    {
        "content": "<p>While working on Legendre symbols, I find myself changing the file number_theory/quadratic_reciprocity quite thoroughly; it is also growing longer. What would be the recommended way of proceeding so that the PRs are manageable?</p>",
        "id": 278480002,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649611884
    },
    {
        "content": "<p>If you make a new def or change a def then don't do much else, try to PR the def and some basic stuff because people might complain about the definition and then everything breaks when you change it. If you're refactoring theorems you can probably get away with bigger PRs.</p>",
        "id": 278481633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649613900
    },
    {
        "content": "<p>Hmmm... I guess this means that I start fresh with a new branch and move my changes over incrementally?</p>",
        "id": 278482971,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649615645
    },
    {
        "content": "<p>I have now started by swapping the arguments to <code>legendre_sym</code>based on the result of the poll above: <a href=\"https://github.com/leanprover-community/mathlib/pull/13311\">#13311</a></p>",
        "id": 278483638,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649616647
    },
    {
        "content": "<p>Thanks a lot for taking this on. As you know I'm a number theorist but I seem to spend much of my lean research time doing other stuff (eg this Scholze project). My post-doc Maria has defined Adeles and ideles and we hope to start our journey towards things related to class field theory later</p>",
        "id": 278486424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649620190
    },
    {
        "content": "<p>I have looked at the RPs labeled \"ready-to-merge\" and see that \"my\" PR <a href=\"https://github.com/leanprover-community/mathlib/pull/13311\">#13311</a> is blocked because of a \"merge conflict\" (the same seems to be true for most of the other ones currently in the queue). Is this normal? Is there something I should do? In any case, when I click on \"Details\" next to \"bors — Merge conflict\", I only see \"Permission denied\", so it seems I have no way of figuring our what the problem might be.</p>",
        "id": 278585681,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649696914
    },
    {
        "content": "<p>I think you don't have to do anything. The merge conflict happened with another PR. Bors should give more precise error messages <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 278587749,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649697842
    },
    {
        "content": "<p>How long will it take until this is resolved? (I'd like to get on with my list of changes...)</p>",
        "id": 278587930,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649697927
    },
    {
        "content": "<p>Can you see <a href=\"https://app.bors.tech/repositories/24316\">https://app.bors.tech/repositories/24316</a>? Or do you get a \"Permission denied\" error?</p>",
        "id": 278591813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649699469
    },
    {
        "content": "<p>As you can see, there are a lot of PRs trying to get into master right now.</p>",
        "id": 278591845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649699483
    },
    {
        "content": "<p>Bors is trying to make sure that they all play well together, and get merged in batches.</p>",
        "id": 278591877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649699502
    },
    {
        "content": "<p>But this might take a couple of hours to sort out <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 278591891,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649699513
    },
    {
        "content": "<p>In principle, you can just create other PRs that depend on your current PR. <code>git</code> provides good support for that.</p>",
        "id": 278591998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649699547
    },
    {
        "content": "<p>I can see the page under the link, thanks.</p>",
        "id": 278592133,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649699613
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/278591891\">said</a>:</p>\n<blockquote>\n<p>But this might take a couple of hours to sort out <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>\n<p>What an understatement <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> The queue has been going haywire for two days straight. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.groupoid_of_elements\">docs#category_theory.groupoid_of_elements</a> timing out is still causing most batch failures.</p>",
        "id": 278592167,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649699630
    },
    {
        "content": "<p>I'll have to learn <code>git</code> while doing this... Is there a nice and easy introduction available somewhere?</p>",
        "id": 278592306,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649699682
    },
    {
        "content": "<p>There is now the second PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/13393\">#13393</a>.<br>\nThis is just changing the type of <code>a</code> from <code>ℕ</code> to the more natural <code>ℤ</code> in a number of places, so that one can use the API lemmas for all allowed arguments of <code>legendre_symbol</code>.</p>",
        "id": 278702828,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649774682
    },
    {
        "content": "<p>Since I am going to add a substantial amount of code eventually, I would like to distribute the material over several files.<br>\nI assume the most reasonable way of doing this is to set up a new subdirectory <code>legendre_symbol</code> (say) in the <code>number_theory</code> directory and put the various files in there.<br>\nThe first step (and next PR) would then be to create that subdirectory and move <code>quadratic_reciprocity</code> in there.<br>\nAre there any objections to that or suggestions to proceed differently?</p>",
        "id": 278933956,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649923119
    },
    {
        "content": "<p>Sounds good to me</p>",
        "id": 278936855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649925019
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13441\">#13441</a></p>",
        "id": 278938564,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649926090
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> It looks like you forgot to <code>git add</code> the new file</p>",
        "id": 278938948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649926332
    },
    {
        "content": "<p>I had moved it outside VScode. It should be added now...</p>",
        "id": 278939039,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649926384
    },
    {
        "content": "<p>Thanks. I kicked it on the queue</p>",
        "id": 278939147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649926444
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13449\">#13449</a> splits off part of the code into a new file <code>gauss_eisenstein_lemmas.lean</code>. This is the part of the code I'm going to leave alone.</p>",
        "id": 278974715,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649947265
    },
    {
        "content": "<p>The linter is complaining that you should now write a module docstring for this file...</p>",
        "id": 278975143,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649947457
    },
    {
        "content": "<p>OK, will do.</p>",
        "id": 278975178,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1649947470
    },
    {
        "content": "<p>Could somebody push this along? Johan seems to be taking a break...</p>",
        "id": 279088054,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650034861
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> How do I get a <code>decidable</code> instance for <code>is_square a</code> when <code>a : F</code> and <code>F</code> is a finite field?</p>",
        "id": 279103847,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650044354
    },
    {
        "content": "<p><code>decidable_of_iff (∃ b, b * b = a) your_proof_here</code></p>",
        "id": 279104223,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650044590
    },
    {
        "content": "<p>And what do I write for <code>your_proof_here</code>?<br>\nIntuitively, every statement should be decidable in a finite field...</p>",
        "id": 279104367,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650044704
    },
    {
        "content": "<p>Something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_square_iff_exists_sq\">docs#is_square_iff_exists_sq</a></p>",
        "id": 279104931,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650045037
    },
    {
        "content": "<p>I found the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">haveI</span> <span class=\"n\">hdec</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">is_square</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">exact</span> <span class=\"n\">set.decidable_set_of</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">Exists</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>which seems to work.</p>",
        "id": 279104993,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650045083
    },
    {
        "content": "<p>Don't!</p>",
        "id": 279105009,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650045094
    },
    {
        "content": "<p>Oh wait, it's definitionally equal, then it's fine.</p>",
        "id": 279105112,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650045146
    },
    {
        "content": "<p>This is fine, but you can also just write <code>decidable_of_iff (∃ b, a = b * b) iff.rfl</code> or something</p>",
        "id": 279105126,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650045156
    },
    {
        "content": "<p>This?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">haveI</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">decidable_of_iff</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">iff.rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">unfreezingI</span> <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">is_square</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n</code></pre></div>",
        "id": 279105956,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650045568
    },
    {
        "content": "<p>More simply, just declare <code>h</code> with the intended type from the start</p>",
        "id": 279106232,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650045676
    },
    {
        "content": "<p>OK, thanks; I tend to forget about this possibility...</p>",
        "id": 279106529,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650045844
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">is_square</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">decidable_of_iff'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">is_square_iff_exists_sq</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>is one answer to the question</p>",
        "id": 279106794,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1650046020
    },
    {
        "content": "<p>This looks like it should go either into <code>field_theory.finite.basic</code> or into <code>algebra.parity</code>.</p>",
        "id": 279107139,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650046204
    },
    {
        "content": "<p>In any case, this looks like the best way of achieving what I want.</p>",
        "id": 279107180,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650046235
    },
    {
        "content": "<p>Notice that this has nothing to do with fields.</p>",
        "id": 279109519,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650047607
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13474\">#13474</a> removes arguments of the form <code>[fact (p % 2 = 1)]</code> and replaces them by <code>(p ≠ 2)</code> in <code>quadratic_reciprocity.lean</code>.</p>",
        "id": 279118165,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650053146
    },
    {
        "content": "<p>The next step will be to define the quadratic character on a finite field (and, by specialization, on <code>zmod p</code>) and prove the relevant properties in this setting. Then I will change the definition of <code>legendre_sym</code> to use this and simplify the proofs by making use of the API for the quadratic character.</p>",
        "id": 279118325,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650053251
    },
    {
        "content": "<p>Is the following name reasonable for mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">quadratic_char_dichotomy</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">quadratic_char</span> <span class=\"n\">F</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">quadratic_char</span> <span class=\"n\">F</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>or is the more unwieldy, but also more precise <code>quadratic_char_eq_one_or_neg_one</code> preferred?</p>",
        "id": 279172701,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650122094
    },
    {
        "content": "<p>I probably would have gone with the snd option. But I understand your <code>dichotomy</code> name perfectly fine.</p>",
        "id": 279173894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650124105
    },
    {
        "content": "<p>Can you have a look at <a href=\"https://github.com/leanprover-community/mathlib/pull/13474\">#13474</a> and, if it's OK, put it in the merge queue?</p>",
        "id": 279174003,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650124266
    },
    {
        "content": "<p>For the next PR, which will be a new file with new code, would it be OK to have ~300 lines of code in one go? Or should I split it up? Since it usually takes a day or so for one PR to be merged, the second option looks to me to be the less efficient one, but it may be more efficient in terms of the review.</p>",
        "id": 279174133,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650124442
    },
    {
        "content": "<p>300 lines of continuous diff is probably fine. A 300 line diff split over 5 files is probably a lot harder to review.</p>",
        "id": 279174486,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650124865
    },
    {
        "content": "<p>OK, thanks. I'll then go ahead with this once <a href=\"https://github.com/leanprover-community/mathlib/pull/13474\">#13474</a> is done.</p>",
        "id": 279174564,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650124950
    },
    {
        "content": "<p>A general question: How do I rewrite terms under a sum? E.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.ring</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-∑</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">],</span> <span class=\"c1\">-- does not work</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(<code>simp_rw</code> does not work, either.) Do I have to use stuff like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype.sum_bijective\">docs#fintype.sum_bijective</a> or is there a simpler way?</p>",
        "id": 279180967,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650134781
    },
    {
        "content": "<p>I think I'd try neg_sum and then sum_congr (untested)</p>",
        "id": 279181046,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1650134915
    },
    {
        "content": "<p>I was trying to give a simple example. My use case is more involved. My question is, how can I manipulate the term under the sum? (A simple <code>simp</code> solves the goal in the example, so maybe it was not a good choice here.)</p>",
        "id": 279181332,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650135347
    },
    {
        "content": "<p>You should use <code>simp_rw</code></p>",
        "id": 279181404,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650135428
    },
    {
        "content": "<p>The term under the sum in my case is a product of four factors <code>a * b * (c * d)</code>, which I want to rewrite to <code>(a * c) * (b * d)</code>.</p>",
        "id": 279181405,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650135432
    },
    {
        "content": "<p>As mentioned above, <code>simp_rw</code> did not work.</p>",
        "id": 279181414,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650135451
    },
    {
        "content": "<p>You can <code>simp_rw mul_mul_mul_comm _ b</code></p>",
        "id": 279181415,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650135472
    },
    {
        "content": "<p>The reason it did not work is that <code>simp_rw</code> rewrites as long as it finds an occurrence of the LHS of the lemma you're rewriting by, so in your case it was turning <code>a * b * (c * d)</code> into <code>a * c * (b * d)</code>into <code>a * b * (c * d)</code> into <code>a * c * (b * d)</code>... Givingexplicit arguments prevents it from looping.</p>",
        "id": 279181496,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650135573
    },
    {
        "content": "<p>The problem is that <code>b</code> is really some term involving the summation variable, so if I use that, I get an <code>unknown identifier</code> error.</p>",
        "id": 279181509,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650135597
    },
    {
        "content": "<p>When <code>simp_rw</code> does not work, <code>conv</code> can be helpful.  It takes some time to learn how to navigate thee expressions, but eventually you should be able to reach what you want.</p>",
        "id": 279181702,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650135742
    },
    {
        "content": "<p>In particular, <code>conv in (Type) { tactics }</code> is usually helpful.  Note that in <code>Type</code> you should use underscores for bound variables (or at least I think so).</p>",
        "id": 279181721,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650135814
    },
    {
        "content": "<p>Roughly something like <code>∑ (x :  α × β), (f x.fst) * (g x.fst) * ((f' x.snd) * (g' x.snd))</code>.</p>",
        "id": 279181767,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650135845
    },
    {
        "content": "<p>Besides <code>rw</code>, you move around with <code>congr, funext, skip</code>.</p>",
        "id": 279181779,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650135873
    },
    {
        "content": "<p>Does <code>conv in (_ * _ * _) { rw mul_mul_mul_comm }</code> work?</p>",
        "id": 279181854,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650135977
    },
    {
        "content": "<p>Yes, that looks reasonably good. Let's see how far I get with this.</p>",
        "id": 279181933,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650136093
    },
    {
        "content": "<p>You can chain more <code>rw</code> in the same <code>conv</code>.</p>",
        "id": 279181942,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650136119
    },
    {
        "content": "<p>How would I navigate within <code>conv begin ... end</code> to the term under the sum?</p>",
        "id": 279182066,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650136343
    },
    {
        "content": "<p>Maybe <code>funext</code>?</p>",
        "id": 279182094,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650136441
    },
    {
        "content": "<p>It always takes me quite a bit of guess-work.</p>",
        "id": 279182139,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650136458
    },
    {
        "content": "<p>I cycle using <code>funext, congr, skip</code> and some list formed of those commands works.  When that fails, I use <code>conv in (_)</code>.</p>\n<p>Others can tell you more about using <code>conv</code>, I hope!</p>",
        "id": 279182170,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650136551
    },
    {
        "content": "<p>My mental picture is that <code>congr</code> will take apart stuff that looks like relations, <code>funext</code> gets you inside function applications and <code>skip</code> moves over to the next part`.</p>",
        "id": 279182244,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650136643
    },
    {
        "content": "<p>This mental picture is not always coherent/accurate, but is what I go by.</p>",
        "id": 279182256,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650136669
    },
    {
        "content": "<p>If you have a LHS and a RHS, I think that <code>conv_lhs {...}</code> gets you to the obvious starting point.</p>",
        "id": 279182307,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650136736
    },
    {
        "content": "<p>Honestly, <code>conv</code> and <code>calc</code> were some of the hardest tools to learn for me.</p>",
        "id": 279182316,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650136796
    },
    {
        "content": "<p>I'm still not too comfortable with <code>conv</code> and I try to put myself in a situation of not needing it.   Ultimately, trying to <code>rw</code> bound variables is a major source of difficulty.</p>",
        "id": 279182375,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650136883
    },
    {
        "content": "<p>My impression is that for <code>rw</code> to work, they need to be in a not-so-bound state, hence the <code>funext</code> might allow for progress.</p>",
        "id": 279182428,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650136952
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> Just checking you know about <a href=\"https://leanprover-community.github.io/extras/conv.html\">https://leanprover-community.github.io/extras/conv.html</a></p>",
        "id": 279187077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650144612
    },
    {
        "content": "<p>works in this case:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.card</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">f'</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x.1</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">x.1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">x.2</span> <span class=\"bp\">*</span> <span class=\"n\">g'</span> <span class=\"n\">x.2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">fintype.sum_congr</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_mul_mul_comm</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"c\">/-</span><span class=\"cm\">∑ (a : α × α), f a.fst * (f' a.snd * (g a.fst * g' a.snd)) = 0 → true-/</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">trivial</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279187921,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1650145910
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/279187077\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> Just checking you know about <a href=\"https://leanprover-community.github.io/extras/conv.html\">https://leanprover-community.github.io/extras/conv.html</a></p>\n</blockquote>\n<p>I've had a look at it, yes.<br>\nBut I think I'm going to organize my proof a bit differently...</p>",
        "id": 279237828,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650225793
    },
    {
        "content": "<p>New question:<br>\nWhen I add <code>#lint</code> at the end of the file that is supposed to be added in the next PR, I get some messages like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `unused_arguments` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> UNUSED ARGUMENTS. -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">char.finite_field.odd_card_of_char_not_two</span> <span class=\"c\">/-</span><span class=\"cm\"> argument 4: [_inst_3 : decidable_eq F] -/</span>\n</code></pre></div>\n<p>and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `decidable_classical` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> USES OF `decidable` SHOULD BE REPLACED WITH `classical` IN THE PROOF. -/</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">char.finite_field.odd_card_of_char_not_two</span> <span class=\"c\">/-</span><span class=\"cm\"> The following `decidable` hypotheses should be replaced with</span>\n<span class=\"cm\">                      `classical` in the proof. argument 4: [_inst_3 : decidable_eq F] -/</span>\n</code></pre></div>\n<p>I have a line</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>near the beginning.</p>\n<p>Should I do anything about these?<br>\n(I need <code>[decidable_eq F]</code> for a definition using <code>ite</code>, and anyway, any finite field will satisfy decidability, so the use/advantage of removing this assumption seems questionable to me.)</p>",
        "id": 279313697,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650304414
    },
    {
        "content": "<p>Put the <code>decidable_eq</code> on the definition, and skip it elsewhere. Mathematically, sure, but it makes things easier with typeclasses if you just skip proofs' decidability requirements and just use <code>classical</code> instead.</p>",
        "id": 279314157,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650304649
    },
    {
        "content": "<p>Yes, you should follow what the linter says. This might be a bit annoying to add and remove <code>decidable_eq F</code> by sections, so instead you can call it <code>[dec : decidable_eq F]</code> and <code>include dec</code>/<code>omit dec</code> at will.</p>",
        "id": 279314240,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650304684
    },
    {
        "content": "<p>OK, thanks!</p>",
        "id": 279314301,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650304719
    },
    {
        "content": "<p>This is now <a href=\"https://github.com/leanprover-community/mathlib/pull/13503\">#13503</a>.<br>\nIt adds a new file <code>quadratic_char.lean</code> in <code>number_theory/legendre_symbol/</code>, which defines the quadratic character on a finite field and proves a number of properties.<br>\nThe next step will then be to change the definition of <code>legendre_sym</code> to use <code>quadratic_char</code> and to add API/simplify proofs based on <code>quadratic_char.lean</code>.</p>",
        "id": 279325676,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650311038
    },
    {
        "content": "<p>As suggested by <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, I'm trying to weaken the assumptions on the definition of <code>quadratic_char</code>. However, I'm running into problems with decidability instances:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">is_square</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">decidable_of_iff'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">is_square_iff_exists_sq</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quadratic_char</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">is_square</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">is_square</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">qcF</span> <span class=\"o\">:=</span> <span class=\"n\">quadratic_char</span> <span class=\"n\">F</span> <span class=\"c1\">-- complains \"failed to synthesize type class instance for decidable_pred is_square\"</span>\n\n<span class=\"c1\">-- but the following works fine</span>\n<span class=\"kd\">def</span> <span class=\"n\">quadratic_char'</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">is_square</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n</code></pre></div>\n<p>So why is Lean unable to infer the instance <code>[decidable_pred (is_square : F  → Prop)]</code> when I try to specialize the more general definition to the case of a (finite) field <code>F</code>, whereas this does not seem to be a problem when I use the same definition in this more restricted setting? (And how can I work around it?)</p>",
        "id": 279714288,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650562823
    },
    {
        "content": "<p>this seems to be the relevant TC log:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span>  <span class=\"kd\">class</span><span class=\"bp\">-</span><span class=\"kd\">instance</span> <span class=\"n\">resolution</span> <span class=\"n\">trace</span>\n<span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_square</span> <span class=\"n\">F</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib.to_has_mul</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_distrib</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">F</span> <span class=\"n\">_inst_2</span><span class=\"o\">))))</span>\n     <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">asda</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_3</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_4</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_5</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_6</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">x_7</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"n\">failed</span> <span class=\"n\">is_def_eq</span>\n</code></pre></div>\n<p>I renamed the above instance to <code>asda</code> for ctrl+f purposes, and I made a goal to look-up the instance of <code>decidable_pred (is_square : M \\to Prop)</code></p>",
        "id": 279715439,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650563412
    },
    {
        "content": "<p>I don't know what <code>a</code> is here</p>",
        "id": 279715508,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650563459
    },
    {
        "content": "<p>In the original context, <code>a</code> is a term of type <code>F</code>.</p>",
        "id": 279715904,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650563646
    },
    {
        "content": "<p>In any case, the <code>?x_n a</code> arguments look weird, but I don't have any experience so far in trouble-shooting these things...</p>",
        "id": 279716025,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650563712
    },
    {
        "content": "<p>this is the trace for the line <code>def test : decidable_pred (is_square : F → Prop) := by apply_instance</code>, so there's no <code>a</code></p>",
        "id": 279716052,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650563725
    },
    {
        "content": "<p><code>a</code> is a bound variable in the definition of the instance.</p>",
        "id": 279716190,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650563773
    },
    {
        "content": "<p>How do I get the trace?</p>",
        "id": 279716419,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650563872
    },
    {
        "content": "<p><code>set_option trace.class_instances true</code></p>",
        "id": 279716508,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650563896
    },
    {
        "content": "<p>For the second definition, the trace looks like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">class_instances</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">x_0</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_square</span> <span class=\"n\">F</span>\n     <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib.to_has_mul</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_distrib</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">division_ring.to_ring</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">field.to_division_ring</span> <span class=\"n\">F</span> <span class=\"n\">_inst_2</span><span class=\"o\">))))</span>\n     <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">is_square_decidable</span> <span class=\"bp\">?</span><span class=\"n\">x_3</span> <span class=\"bp\">?</span><span class=\"n\">x_4</span> <span class=\"bp\">?</span><span class=\"n\">x_5</span> <span class=\"bp\">?</span><span class=\"n\">x_6</span> <span class=\"bp\">?</span><span class=\"n\">x_7</span>\n</code></pre></div>\n<p>(I used the name <code>is_square_decidable</code> instead of <code>asda</code>.)</p>",
        "id": 279717961,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650564470
    },
    {
        "content": "<p>I'm guessing it has to do with the fact that <code>is_square</code> only needs a <code>has_mul</code> instance but your decidability instance asks for <code>monoid</code>, and Lean chose some goofy path from <code>field</code> to <code>has_mul</code> that doesn't pass through <code>monoid</code></p>",
        "id": 279718052,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650564490
    },
    {
        "content": "<p><code>monoid</code> is needed for <code>is_square_iff_exists_sq</code>.</p>",
        "id": 279718203,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650564568
    },
    {
        "content": "<p>True, but you can easily avoid doing that</p>",
        "id": 279718315,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650564615
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.finite.basic</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">is_square</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">fintype.decidable_exists_fintype</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">quadratic_char</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">monoid_with_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">is_square</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"k\">if</span> <span class=\"n\">is_square</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"bp\">-</span><span class=\"mi\">1</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">qcF</span> <span class=\"o\">:=</span> <span class=\"n\">quadratic_char</span> <span class=\"n\">F</span>\n</code></pre></div>",
        "id": 279718316,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650564615
    },
    {
        "content": "<p>but not for just unfolding <code>is_square</code>:)</p>",
        "id": 279718343,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1650564625
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/279718052\">said</a>:</p>\n<blockquote>\n<p>I'm guessing it has to do with the fact that <code>is_square</code> only needs a <code>has_mul</code> instance but your decidability instance asks for <code>monoid</code>, and Lean chose some goofy path from <code>field</code> to <code>has_mul</code> that doesn't pass through <code>monoid</code></p>\n</blockquote>\n<p>It goes via <code>field</code> --&gt; <code>division_ring</code> --&gt; <code>ring</code> --&gt; <code>distrib</code> --&gt; <code>has_mul</code>.</p>",
        "id": 279718469,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650564698
    },
    {
        "content": "<p>Ahh, good old <code>distrib</code>s strike back (-;</p>",
        "id": 279719814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650565347
    },
    {
        "content": "<p>Now what would be interesting is what to do about this if you really did need <code>monoid</code> to write the instance</p>",
        "id": 279719911,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650565407
    },
    {
        "content": "<p>I doubt this can be the problem. Such things happen all the time.</p>",
        "id": 279720037,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650565456
    },
    {
        "content": "<p>I am confused about this too, including why it apparently did work in the last part of the example.</p>",
        "id": 279720105,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650565488
    },
    {
        "content": "<p>Does it have something to do with the higher-order-ness of <code>decidable_pred</code>?</p>",
        "id": 279720217,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650565541
    },
    {
        "content": "<p>I guess normally what would happen is that the first argument <code>?x_3</code> of the instance gets filled in with <code>F</code>, then the others get synthesized by instance search and Lean notices that the two different paths are defeq</p>",
        "id": 279721063,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650565911
    },
    {
        "content": "<p>I take it <code>qcF</code> does actually work after generalizing the <code>decidable_pred</code> instance?</p>",
        "id": 279721209,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650565980
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/279721209\">said</a>:</p>\n<blockquote>\n<p>I take it <code>qcF</code> does actually work after generalizing the <code>decidable_pred</code> instance?</p>\n</blockquote>\n<p>Yes, it does.</p>",
        "id": 279721822,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650566300
    },
    {
        "content": "<p>The second definition apparently went via ... --&gt; <code>ring</code> --&gt; <code>monoid</code> (which is what I would have expected as a mathematician).</p>",
        "id": 279722110,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650566437
    },
    {
        "content": "<p>Anyway, I have now made most of the changes <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> suggested to <a href=\"https://github.com/leanprover-community/mathlib/pull/13503\">#13503</a>.</p>",
        "id": 279722221,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650566485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, can you look at <a href=\"https://github.com/leanprover-community/mathlib/pull/13503\">#13503</a> again?</p>",
        "id": 279819881,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650632313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> Thanks for the ping. I left some comments.</p>",
        "id": 279821705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650633204
    },
    {
        "content": "<p>I made the changes you suggested. Thanks!</p>",
        "id": 279823951,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650634231
    },
    {
        "content": "<p>Thanks! Please kick it on the queue after CI gives a <span aria-label=\"check\" class=\"emoji emoji-2705\" role=\"img\" title=\"check\">:check:</span></p>",
        "id": 279824190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650634346
    },
    {
        "content": "<p>OK.</p>",
        "id": 279824246,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650634377
    },
    {
        "content": "<p>eliminary result in some mod_forms repo/project, for example</p>",
        "id": 279835399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650639687
    },
    {
        "content": "<p>Sorry for the noise. I blame the German railway network and mobile internet infrastructure.</p>",
        "id": 279847750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650645173
    },
    {
        "content": "<p>I see you have started to assimilate. Complaining about the Deutsche Bahn is a national past time here.</p>",
        "id": 279850998,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1650646644
    },
    {
        "content": "<p>Is there a simpler way of proving the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.parity</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h.symm</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279973699,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650794777
    },
    {
        "content": "<p><code>by simp_rw eq_comm</code> or <code>exists_congr $ λ _, eq_comm</code></p>",
        "id": 279973741,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650794862
    },
    {
        "content": "<p>A useful general rule to remember is that <code>foo.symm : foo x y → foo y x</code> and <code>foo_comm : foo x y ↔ foo y x</code></p>",
        "id": 279973814,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650794959
    },
    {
        "content": "<p>Which of the two would be preferred for mathlib?</p>",
        "id": 279973818,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650794968
    },
    {
        "content": "<p>Either is fine. The second one is particularly useful if you're building a proof term.</p>",
        "id": 279973890,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650795029
    },
    {
        "content": "<p>I'm not so much into building proof terms (yet?)... <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 279973918,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650795110
    },
    {
        "content": "<p>The next PR is <a href=\"https://github.com/leanprover-community/mathlib/pull/13667\">#13667</a>.<br>\nIt mainly changes the definition of <code>legendre_sym</code> to use <code>quadratic_char</code>for <code>zmod p</code>. Then we can use properties of the quadratic character to prove corresponding properties of the Legendre symbol. I'm also adding a few more API lemmas.</p>",
        "id": 279974422,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650795862
    },
    {
        "content": "<p>The next steps will be to add statements on the quadratic character of <code>-1</code> (first in <code>quadratic_char.lean</code>) and then on the quadratic character of <code>2</code>. The ultimate goal here is to formalise the proof of QR using Gauss sums (and use this to replace the current proof using Gauss' and Eisenstein's lemmas).</p>",
        "id": 279974507,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650795982
    },
    {
        "content": "<p>Probably in the tactic proof you can do <code>exact \\&lt;x, h.symm\\&gt;</code> instead of <code>use</code> + <code>exact</code> (untested but I'm optimistic); <code>exist</code> goals are no different to any other structure so you can use the pointy bracket constructor to just build the term you want.</p>",
        "id": 279975854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650797992
    },
    {
        "content": "<p>To give a term of type <code>exists a, P a</code> is to give a pair consisting of a term <code>x</code> and a proof of <code>P x</code>.</p>",
        "id": 279975978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650798071
    },
    {
        "content": "<p>I would like to write down the set <code>{x : F | x ^ 2 = a}</code> as a <code>finset</code> (where <code>F</code> is a finite field and <code>a : F</code>). How do I do that?</p>",
        "id": 279994778,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650827207
    },
    {
        "content": "<p><code>finset.univ.filter (λ x, x ^ 2 = a)</code>. You will need <code>decidable_eq F</code>.</p>",
        "id": 279994865,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650827342
    },
    {
        "content": "<p>Thanks. It doesn't read very naturally, though...</p>",
        "id": 279995027,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650827588
    },
    {
        "content": "<p>In Lean 3, the <code>{ x : X | P x}</code> notation is built into core Lean IIRC, which means it's very inflexible. In Lean 4 syntax will be super-flexible and it would not surprise me if one could use this notation or something very close to it to make finsets from fintypes.</p>",
        "id": 279995094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650827701
    },
    {
        "content": "<p>Yeah, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.filter\">docs#finset.filter</a> is really the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.sep\">docs#set.sep</a>, and it's a bit of a shame that the notation doesn't follow through.</p>",
        "id": 279995264,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650827967
    },
    {
        "content": "<p>I guess one issue is that people might still want to make subsets from fintypes, so one might have to use separate notation for the two constructions.</p>",
        "id": 279995386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650828135
    },
    {
        "content": "<p>Context can be enough to infer the type.</p>",
        "id": 279995407,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650828185
    },
    {
        "content": "<p>Is something like this in mathlib?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(The assumptions can be weakened, of course.)</p>",
        "id": 279996822,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650830281
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sq_eq_sq_iff_abs_eq_abs\">docs#sq_eq_sq_iff_abs_eq_abs</a> which is pretty close</p>",
        "id": 279996988,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650830431
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/eq_or_eq_neg_of_sq_eq_sq\">docs#eq_or_eq_neg_of_sq_eq_sq</a> <br>\nThe other one requires a linearly ordered structure.</p>",
        "id": 279997083,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650830524
    },
    {
        "content": "<p>Ah that's the one I was looking for!</p>",
        "id": 279997096,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650830546
    },
    {
        "content": "<p>Why is it not stated as an iff?</p>",
        "id": 279997119,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650830599
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/279994865\">said</a>:</p>\n<blockquote>\n<p><code>finset.univ.filter (λ x, x ^ 2 = a)</code>. You will need <code>decidable_eq F</code>.</p>\n</blockquote>\n<p>I would expect something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">set_to_finset_of_fintype</span> <span class=\"o\">{</span><span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">T</span>\n</code></pre></div>\n<p>in mathlib, with the obvious property that <code>↑(set_to_finset_of_fintype s) = s</code>.</p>",
        "id": 280000002,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650834547
    },
    {
        "content": "<p>... so that I could write <code>set_ot_finset_of_fintype {x : F | x ^ 2 = a}</code>.</p>",
        "id": 280000010,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650834586
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.to_finset\">docs#set.to_finset</a></p>",
        "id": 280000011,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650834592
    },
    {
        "content": "<p>We don't include <code>of_fintype</code> in the name because it doesn't work otherwise so you can infer it</p>",
        "id": 280000061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650834630
    },
    {
        "content": "<p>Is there also <code>coe : set T → finset T</code>? When I tried <code>{x : F | x^2 = a} : finset F</code>, it didn't work.</p>",
        "id": 280000135,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650834733
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.coe_to_finset\">docs#set.coe_to_finset</a> . Note that you can use dot notation. Does <code>{x : P x}.to_finset</code> work though?</p>",
        "id": 280000140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650834741
    },
    {
        "content": "<p>I think there won't be a coercion because I think the type class inference system handles it and there's a coercion the other way so this would give a loop</p>",
        "id": 280000170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650834792
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.coe_to_finset\">docs#set.coe_to_finset</a> is just the specification.</p>",
        "id": 280000186,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650834807
    },
    {
        "content": "<p>But I'm not an expert in these matters, I could be wrong</p>",
        "id": 280000188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650834815
    },
    {
        "content": "<p>Right -- the specification is the \"obvious property\" you wanted above, right?</p>",
        "id": 280000235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650834855
    },
    {
        "content": "<p><code>{x : F | x^2 = a}.to_finset</code> does typecheck.</p>",
        "id": 280000259,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650834894
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13667\">#13667</a> has now a merge conflict. Apparently some other PR changed <code>number_theory/legendre_symbol/quadratic_reciprocity.lean</code> before my PR was merged. How do I resolve this?</p>",
        "id": 280089772,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650902164
    },
    {
        "content": "<p>You can either click the \"resolve conflicts\" button in-browser, which will give you a clumsy editor and markers along the lines of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span> <span class=\"n\">your_branch</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">your_version</span>\n<span class=\"bp\">=======</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">their_version</span>\n<span class=\"bp\">&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span> <span class=\"n\">master</span>\n</code></pre></div>\n<p>or you can run <code>git fetch; git merge origin/master</code> locally, and solve the same markers in vscode</p>",
        "id": 280091634,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650902923
    },
    {
        "content": "<p>(your goal is to merge the things within the <code>&lt;&lt;&lt;&lt;&lt;&lt; ... ====== ... &gt;&gt;&gt;&gt;&gt;</code>)</p>",
        "id": 280091707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650902953
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> can you (or somebody else) have a look at <a href=\"https://github.com/leanprover-community/mathlib/pull/13667\">#13667</a> at some point?</p>",
        "id": 280119793,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650916158
    },
    {
        "content": "<p>On the latest commit of <a href=\"https://github.com/leanprover-community/mathlib/pull/13667\">#13667</a>, I get the message that \"Lint mathlib failed\", but when I click on \"Details\", the orange circle in front of \"lint\" is still spinning. So how do I figure out what the complaint is? (Adding <code>#lint</code> to the bottom of the files I changed does not turn up any problems, BTW.)</p>",
        "id": 280196859,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650973438
    },
    {
        "content": "<p>I'd guess the linter failed to __run__ (for unknown reasons) rather than to succeed.</p>",
        "id": 280201729,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1650975955
    },
    {
        "content": "<p>I've just clicked the \"rerun\" button: if this succeeds then my above hypothesis is very likely correct.</p>",
        "id": 280201840,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1650976005
    },
    {
        "content": "<p>OK, thanks! Let's see what happens.</p>",
        "id": 280205553,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650977938
    },
    {
        "content": "<p>Looks good...</p>",
        "id": 280211231,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650980475
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I made the suggested change to <a href=\"https://github.com/leanprover-community/mathlib/pull/13667\">#13667</a>. It should be ready now.</p>",
        "id": 280241388,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650993400
    },
    {
        "content": "<p>Thanks for the ping: <img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\"></p>",
        "id": 280241645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1650993530
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 280241682,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1650993552
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Why is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/even.neg_one_pow\">docs#even.neg_one_pow</a> not a <code>simp</code> lemma? (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/odd.neg_one_pow\">docs#odd.neg_one_pow</a> is.)</p>",
        "id": 280687296,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651265875
    },
    {
        "content": "<p>I was the one (re)writing it two weeks ago. Neither <code>even.neg_one_pow</code> nor <code>odd.neg_pow</code> is a simp lemma because <code>even n</code> or <code>odd n</code> is not a precondition that's usually filled by <code>simp</code> (or rather we have specific lemmas when it is).</p>",
        "id": 280688360,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651266357
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/even.neg_one_zpow\">docs#even.neg_one_zpow</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/odd.neg_one_zpow\">docs#odd.neg_one_zpow</a> are not simp either. I don't know where you've seen this.</p>",
        "id": 280688482,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651266397
    },
    {
        "content": "<p>The relevant PR is <a href=\"https://github.com/leanprover-community/mathlib/pull/13268\">#13268</a>.</p>",
        "id": 280688669,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651266484
    },
    {
        "content": "<p>Yaël already gave a justification.  I am not too sure of what constitutes a good <code>simp</code> lemma and what does not.  Until recently, I would have probably thought \"<code>even/odd</code>\" is a condition that <code>simp</code> will not produce, so this lemma should always be passed onto <code>simp</code> to trigger it, defeating the purpose of the <code>simp</code> tag.</p>\n<p>However, Johan pointed out to me that if <code>even 2</code> were a <code>simp</code> lemma (maybe it is, I'm on mobile), then the lemma might trigger when <code>n = 2</code>.  So, my heuristic is not correct and I am back at not knowing what a good <code>simp</code> lemma is!</p>",
        "id": 280717321,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651295331
    },
    {
        "content": "<p>But <code>2 = bit0 1</code>, and we have lemmas about <code>(-a)^bit0 b</code>.</p>",
        "id": 280717977,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651296599
    },
    {
        "content": "<p>So, I think that I am even further back at the step where I am not really sure what is a good <code>simp</code> lemma!</p>",
        "id": 280718146,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651296887
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/280688482\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/even.neg_one_zpow\">docs#even.neg_one_zpow</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/odd.neg_one_zpow\">docs#odd.neg_one_zpow</a> are not simp either. I don't know where you've seen this.</p>\n</blockquote>\n<p>You are right; I guess my eye slipped to the next line (where <a href=\"https://leanprover-community.github.io/mathlib_docs/find/even_neg_two\">docs#even_neg_two</a> <em>is</em> a <code>simp</code> lemma). Sorry about that; I was getting tired...</p>",
        "id": 280727474,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651312109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> the concept of a good <code>simp</code> lemma is a bit subtle. Scott once mentioned to me that I could do a better job of teaching <code>simp</code> in NNG; the explanation was that I didn't understand <code>simp</code> at the time myself. One thing which suddenly made it all look easy was when I learnt about the Knuth-Bendix theorem, which gives a concrete Noetherian confluent rewrite system for groups ie proves that you can make a <code>group</code> tactic like <code>ring</code> but for groups just with the command <code>simp only [mul_assoc, one_inv, ...]</code> (you need about ten random statements in group theory of the form X=Y with Y in some kind of simpler form than X). However that doesn't mean that all the things on the list are good <code>simp</code> lemmas in practice! For example <code>mul_assoc</code> is not a <code>simp</code> lemma.</p>",
        "id": 280727478,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651312114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/280717321\">said</a>:</p>\n<blockquote>\n<p>However, Johan pointed out to me that if <code>even 2</code> were a <code>simp</code> lemma (maybe it is, I'm on mobile), then the lemma might trigger when <code>n = 2</code>.  So, my heuristic is not correct and I am back at not knowing what a good <code>simp</code> lemma is!</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/even_two\">docs#even_two</a> <em>is</em> a <code>simp</code> lemma in fact (as is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/even_neg_two\">docs#even_neg_two</a>).<br>\nI would think that if I have a hypothesis <code>h : even n</code> in my context and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/even.neg_one_pow\">docs#even.neg_one_pow</a> were a <code>simp</code> lemma,<br>\nthen <code>simp [h]</code> would simpify <code>(-1)^n</code> to <code>1</code>, which could be useful.</p>",
        "id": 280727567,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651312244
    },
    {
        "content": "<p>That's true. But arguably it shouldn't be in the default <code>simp</code>-set. Maybe <code>simp [h, even.neg_one_pow]</code> is also a reasonable way.<br>\nIn this case, there is also another option: add it to the <code>parity_simps</code> simp-set. Then <code>simp [h] with parity_simps</code> will make that simplification.</p>",
        "id": 280728499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651313707
    },
    {
        "content": "<p>In the end, this is a question about balancing UX (user experience) vs performance.</p>",
        "id": 280728507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651313729
    },
    {
        "content": "<p>Putting everything in the default simp-set makes it easy to have short proofs, and it can help people discover simp-lemmas that they didn't know about. But it comes at the cost/risk of making the default simp-set very slow.</p>",
        "id": 280728554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651313777
    },
    {
        "content": "<p>Of course, I can use <code>simp [even.neg_one_pow h]</code> in any case.</p>",
        "id": 280728702,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651314009
    },
    {
        "content": "<p>You mean <code>h.neg_one_pow</code>!</p>",
        "id": 280729567,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651315158
    },
    {
        "content": "<p>Kevin, thanks for putting this concept in words!  I have observed something similar while working with <code>laurent_polynomial</code>, where I feel that I am declaring lemmas to be <code>simp</code>, just because it makes sense in this context.  In this situation, I am helped by the fact that they are in the <code>laurent_polynomial</code> namespace, so they won't trigger when they shouldn't.  The situation is different with <code>mul_assoc</code>, of course.</p>",
        "id": 280733360,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651320654
    },
    {
        "content": "<p>You know <code>simp</code> doesn't care about namespaces? They are all there as soon as the file is imported.</p>",
        "id": 280734338,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1651322130
    },
    {
        "content": "<p>Scott, I do, what I meant is that they will not apply unless you really have a <code>laurent_polynomial</code>, in which case they are useful!</p>",
        "id": 280736078,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651324678
    },
    {
        "content": "<p>It is just that the lemmas \"look like\" they would apply to polynomials as well, but they do not!</p>",
        "id": 280736122,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651324703
    },
    {
        "content": "<p>I think it's more the type of the lemma, rather than the namespace, which is making that happen.</p>",
        "id": 280738403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651327967
    },
    {
        "content": "<p>Yes, maybe I should have said that the types of the lemmas all contain <code>laurent_polynomial</code> somewhere, rather than confusing this with the fact that the lemmas are all in the <code>laurent_polynomial</code> namespace.</p>",
        "id": 280738509,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651328130
    },
    {
        "content": "<p>Another <code>simp</code> story while I'm waiting for a local LTE to compile: when I made the complex number game (a super-unpopular game because I never made a web interface, despite the fact that the levels are really clean), I found that to prove that the complex numbers were a ring it was great to have <code>z = w \\iff z.re = w.re \\and z.im = w.im</code> in the simp set, because I was proving all the ring axioms, which are equalities, and I always wanted to do it by checking on real and imaginary parts. But then Scott pointed out to me that you don't want that to be the default behaviour in the wild, because people don't want <code>simp</code> randomly breaking up their equality of some random integrals into real and imaginary parts. Better to use the proper tool, which is <code>ext</code>.</p>",
        "id": 280738518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1651328150
    },
    {
        "content": "<p>Actually, this makes me think that I sometimes wonder why the lemma that says that a product is zero iff one of its factors is zero (with appropriate typeclass assumptions) is in the <code>simp</code> set: I almost never want to get to an <code>or</code> in my proofs!  And I constantly go through the loop:<br>\n<code>simp → squeeze_simp → Try this</code> add a <code>-</code> in front of the name of the lemma, remove <code>only</code> and <code>squeeze</code> again!</p>",
        "id": 280738663,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651328330
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_eq_zero\">docs#mul_eq_zero</a>: I was convinced that the name of the lemma was more complicated...</p>",
        "id": 280738758,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1651328445
    },
    {
        "content": "<p>New PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/13831\">#13831</a> adds two properties of quadratic characters/Legendre symbols (value is -1 precisely on non-squares and number of square roots of a given element is 1 plus the value of the character).</p>",
        "id": 280739373,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651329321
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.odd_of_mod_four_eq_one\">docs#nat.odd_of_mod_four_eq_one</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.odd_of_mod_four_eq_three\">docs#nat.odd_of_mod_four_eq_three</a>. For the API for the quadratic character of <code>-1</code>, I will need the converse, i.e.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">nat.odd_mod_four</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">\\</span><span class=\"n\">or</span> <span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>Would it make sense to put it next to the other two? And is the name OK? (I don't like <code>nat.eq_one_or_three_mod_four_of_odd</code>, since I will also need a similar one for mod 8, and the name would get really unwieldy...)</p>",
        "id": 280739889,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651330042
    },
    {
        "content": "<p>Should there also be counterparts for <code>int</code>?</p>",
        "id": 280739946,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651330116
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Can you have a look at <a href=\"https://github.com/leanprover-community/mathlib/pull/13831\">#13831</a> (see above) at some point?</p>",
        "id": 280781926,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651393649
    },
    {
        "content": "<p>I'd also like to get feedback on <code>nat.odd_mod_four</code>...</p>",
        "id": 280781938,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651393680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> I left some comments</p>",
        "id": 280834775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651469345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I have replied to your comments on <a href=\"https://github.com/leanprover-community/mathlib/pull/13831\">#13831</a>.</p>",
        "id": 280864897,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651493100
    },
    {
        "content": "<p>There is a new PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/13978\">#13978</a>.<br>\nIt adds results on the quadratic character of <code>-1</code>; the main new lemmas are</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">char.quadratic_char_neg_one</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hF</span> <span class=\"o\">:</span> <span class=\"n\">ring_char</span> <span class=\"n\">F</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">quadratic_char</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">χ₄</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">char.is_square_neg_one_iff</span> <span class=\"o\">:</span> <span class=\"n\">is_square</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">fintype.card</span> <span class=\"n\">F</span> <span class=\"bp\">%</span> <span class=\"mi\">4</span> <span class=\"bp\">≠</span> <span class=\"mi\">3</span>\n</code></pre></div>\n<p>The first has a counterpart for the Legendre symbol; the second was already present in a similar form (but now has a simpler proof based on <code>char.is_square_neg_one_iff</code>). I have taken the liberty of rewriting the statement in terms of <code>is_square</code> (rather than spelling it out explicitly); similarly for <code>zmod.euler_criterion</code>.</p>\n<p>I needed some additional auxiliary lemmas (<code>odd_mod_four</code> as mentioned earlier and <code>finite_field.even_card_of_char_two</code>), which I have added near the top of <code>number_theory/legendre_symbol/quadratic_char.lean</code>; the plan is to collect these auxiliary lemmas there and move them collectively to appropriate places at some later point.<br>\nThere is also some API for the quadratic character mod 4, <code>zmod.χ₄</code>.<br>\nPerhaps <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  can have a look, but of course, everybody is welcome to review it.</p>",
        "id": 281360479,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651785451
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Can you have another look? The points you raised should now be dealt with.</p>",
        "id": 281477931,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1651862122
    },
    {
        "content": "<p>LGTM <img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\"></p>",
        "id": 281478564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651862433
    },
    {
        "content": "<p>New PR <a href=\"https://github.com/leanprover-community/mathlib/pull/14027\">#14027</a>. This just moves the auxiliary lemmas into a separate file, to facilitate future changes. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 281591966,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1652005553
    },
    {
        "content": "<p>Another PR that is meant to improve the file structure: <a href=\"https://github.com/leanprover-community/mathlib/pull/14178\">#14178</a>. It moves the material on the quadratic characters on <code>zmod 4</code> and <code>zmod 8</code> to a separate file <code>zmod_char.lean</code> (within <code>number_theory/legendre_symbol/</code>) and also adds some API lemmas for the characters on <code>zmod 8</code> (and shortens a proof). <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 282516309,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1652716719
    },
    {
        "content": "<p>I have code for the \"Gauss sum proof\" of the value of the quadratic character at 2, but before I add this, I want to see if it can be obtained from more general Gauss sum machinery (which I will need for the Gauss sum proof of Quadratic Reciprocity).</p>",
        "id": 282516705,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1652716849
    },
    {
        "content": "<p>LGTM!</p>",
        "id": 282521321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652718719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> Do you think it's worth it to deduplicate the two characters for <code>n = 8</code>, by passing a parameter to the character?</p>",
        "id": 282521422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1652718749
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I don't think it would save a lot of code (I don't really expect more API lemmas here). We can perhaps lookt at it again at some later point.</p>",
        "id": 282530941,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1652721871
    },
    {
        "content": "<p>I have now finished writing the code that leads to the proof of Quadratic Reciprocity via Gauss sums.</p>\n<p>This is a total of ~1400 lines of code. Would the following be a reasonable sequence of PRs?</p>\n<ol>\n<li>Add the necessary auxiliary statements to <code>number_theory/legendre_symbol/auxiliary.lean</code> (~200 lines)</li>\n<li>Add results on multiplicative characters (new file <code>.../mul_character.lean</code>, ~200 lines)</li>\n<li>Add results on additive characters (new file <code>.../add_character.lean</code>, ~300 lines)</li>\n<li>Add results on Gauss sums (new file <code>.../gauss_sum.lean</code>, ~400 lines)</li>\n<li>Add results on the value of the quadratic character at <code>2</code> and at odd primes to <code>.../quadratic_char.lean</code> (~150 lines)</li>\n<li>Add corresponding statements to <code>.../quadratic_reciprocity.lean</code> (replacing the current combinatorial proofs) and move the Gauss and Eisenstein lemmas to <code>.../gauss_eisenstein_lemmas.lean</code></li>\n</ol>\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 285053214,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654459877
    },
    {
        "content": "<p>This sounds great to me, keeping stuff &lt;= 200 lines is really helpful to the maintainers</p>",
        "id": 285054099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654461297
    },
    {
        "content": "<p>I take it that 400 may still be OK?</p>",
        "id": 285054158,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654461386
    },
    {
        "content": "<p>Of course, if desired, I can split the longer files into two parts and PR them separately.</p>",
        "id": 285054174,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654461426
    },
    {
        "content": "<p>Once you've got good at PRs people are a lot more tolerant of 400 line efforts :-)</p>",
        "id": 285054178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1654461438
    },
    {
        "content": "<p><del>you can sometimes convince them of much larger things if you're good enough or nagging enough</del></p>",
        "id": 285060444,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1654470196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> Sounds like a good plan to me.</p>",
        "id": 285076529,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654492071
    },
    {
        "content": "<p>Also \"400 lines in one file\" is typically easier to review than \"300 lines scattered across 5 files\".</p>",
        "id": 285076583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654492113
    },
    {
        "content": "<p>The first PR is there: <a href=\"https://github.com/leanprover-community/mathlib/pull/14572\">#14572</a></p>",
        "id": 285093597,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654509904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> Concerning the Github discussion about moving preliminary lemmas. Do you already have a good overview of 10-20 prelim lemmas that you'll be adding in the next few PRs? Because then you could already gather all of those together now, and make a prep PR first.</p>",
        "id": 285096394,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654512424
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> That's what I'm doing with <a href=\"https://github.com/leanprover-community/mathlib/pull/14572\">#14572</a>. It should contain all the lemmas I need for the sequence of PRs I outlined.<br>\nWhen the sequence of PRs is complete, we can move everything that is in <code>auxiliary.lean</code> to appropriate places (that would be number 7 in the list above).</p>",
        "id": 285099150,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654514855
    },
    {
        "content": "<p>I've edited the message above to add item number 7.</p>",
        "id": 285105438,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654518929
    },
    {
        "content": "<p>I still don't really understand why not make step 1 and 7 at the same time then? That seems way less confusing for review. If 1 is merged with lemmas in the right place you will soon get the olean files for it and not have to recompile anything later</p>",
        "id": 285112934,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654522589
    },
    {
        "content": "<p>Yes, step 1 and step 7 should be one and only. We basically never purposefully put lemmas in the wrong place (I've only done it once, and it was to ease a refactor touching 138 files).</p>",
        "id": 285121314,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654526522
    },
    {
        "content": "<p>OK; if you tell me where to put each lemma, then I'll move them now. I just would like to avoid having to make changes later on (beacuse a lemma was moved to the \"wrong\" file or was too specific or ...).</p>",
        "id": 285121698,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654526696
    },
    {
        "content": "<p>That's why reviewing is for <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 285122323,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654526985
    },
    {
        "content": "<p>The best way to decide where a lemma should go is by</p>\n<ol>\n<li>Looking for similar lemmas</li>\n<li>Looking for the lemmas used in the proof</li>\n</ol>",
        "id": 285122462,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654527024
    },
    {
        "content": "<p>Is there a way of avoiding triggering CI every time I push a commit? Building/linting mathlib is likely to take a long time each time I modify a file like <code>algebra/group/basic.lean</code>...</p>",
        "id": 285143150,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654536092
    },
    {
        "content": "<p>If you push, the previous runs will automatically be cancelled.</p>",
        "id": 285143440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654536221
    },
    {
        "content": "<p>If you still want to save CI cycles, I guess the solution is to commit, but postpone pushing till you have a batch of commits that you want to test with CI.</p>",
        "id": 285143520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1654536251
    },
    {
        "content": "<p>Or you can manually cancel if you still want to have the commits distributed. If the GitHub actions extension for vscode or the command like gh tool supports cancelling actions this could be quite quick</p>",
        "id": 285143782,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1654536380
    },
    {
        "content": "<p>I was thinking of having the review process work its way without triggering CI. This will reqire that I push the commits so that reviewers can see them and comment on them.</p>",
        "id": 285143808,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654536394
    },
    {
        "content": "<p>Perhaps one way to go is for me to add comments to the lemmas with suggestions where they should go?<br>\nIf there are no objections, I can then move them and hope for the best...</p>",
        "id": 285143997,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654536487
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I have now added suggestions regarding suitable places for the lemmas to <a href=\"https://github.com/leanprover-community/mathlib/pull/14572\">#14572</a>. Please comment!</p>",
        "id": 285158360,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654543315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> How can I help to push this along reasonably quickly?<br>\nI'd like to get on to the \"real\" stuff...</p>",
        "id": 285294275,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654626446
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/285122462\">said</a>:</p>\n<blockquote>\n<p>The best way to decide where a lemma should go is by</p>\n<ol>\n<li>Looking for similar lemmas</li>\n<li>Looking for the lemmas used in the proof</li>\n</ol>\n</blockquote>\n<p>Have you tried doing this? <span aria-label=\"point of information\" class=\"emoji emoji-261d\" role=\"img\" title=\"point of information\">:point_of_information:</span></p>",
        "id": 285294527,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654626552
    },
    {
        "content": "<p>Also, what are we supposed to do with your suggestions? We're the ones suggesting and you're the one changing <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 285294666,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654626609
    },
    {
        "content": "<p>I basically did what you said and added suggestions (in comments) where the lemmas should go.</p>",
        "id": 285294784,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654626675
    },
    {
        "content": "<p>I'm basically waiting to see if you think they make sense, as I would like to avoid moving things around several times.</p>",
        "id": 285294860,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654626708
    },
    {
        "content": "<p>Also, in some cases, the obvious files are missing some imports, and I'm not sure what the established way is in such cases.</p>",
        "id": 285295001,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654626753
    },
    {
        "content": "<p>See point number 1.</p>",
        "id": 285295319,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654626901
    },
    {
        "content": "<p>Can you define \"similar\"?</p>",
        "id": 285295436,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654626950
    },
    {
        "content": "<p>When this happens, it usually means that there's a file lower down the hierarchy which has the same theme but heavier imports.</p>",
        "id": 285295440,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654626953
    },
    {
        "content": "<p>By \"similar\", I mean similar conclusions and similar assumptions (including instance ones!).</p>",
        "id": 285295551,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654626987
    },
    {
        "content": "<p>See <a href=\"https://tqft.net/mathlib/data/set/pointwise\">file#data/set/pointwise</a>, <a href=\"https://tqft.net/mathlib/analysis/normed/group/pointwise\">file#analysis/normed/group/pointwise</a>, <a href=\"https://tqft.net/mathlib/analysis/normed_space/pointwise\">file#analysis/normed_space/pointwise</a> for an example of such file gradation.</p>",
        "id": 285295655,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654627054
    },
    {
        "content": "<p>For example, there does not seem to be a file that imports both <code>algebra.group.units</code>and <code>algebra.char_p.basic</code>.<br>\n(BTW, is there a way to check that rigorously without clicking through everything?)</p>",
        "id": 285295698,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654627081
    },
    {
        "content": "<p>This is probably false, given that <code>algebra.group.units</code> is very low down the hierarchy. You can try <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s import tree tool, but I haven't yet managed to use it myself.</p>",
        "id": 285295847,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654627139
    },
    {
        "content": "<p>If it is false, how do I find a file that imports both?</p>",
        "id": 285296124,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654627277
    },
    {
        "content": "<p>You can also write <code>#check some_declaration_in_algebra_group_units</code> in <code>algebra.char_p.basic</code> and see whether Lean knows the declaration.</p>",
        "id": 285296196,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654627314
    },
    {
        "content": "<p>If the tool you're talking about is my visualization, it's not useful for this</p>",
        "id": 285296268,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654627331
    },
    {
        "content": "<p>I think there's another thread with some python or JavaScript code that _might_ be useful</p>",
        "id": 285296317,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654627351
    },
    {
        "content": "<p>Yes, I'm talking about the python code.</p>",
        "id": 285296344,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654627364
    },
    {
        "content": "<p>... and indeed</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">units</span>\n<span class=\"c1\">-- units : Π (α : Type u_1) [_inst_1 : monoid α], Type u_1</span>\n</code></pre></div>",
        "id": 285296551,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654627464
    },
    {
        "content": "<p>OK; it tlooks like the chain from <code>algebra.char_p.basic</code> to <code>algebra.group.units</code> is fairly long, though.</p>",
        "id": 285296663,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654627531
    },
    {
        "content": "<p>Anyway, I still don't quite know what to do. If you say you are the ones suggesting and I'm supposed to make the changes, then I'm missing the suggestions.</p>",
        "id": 285296860,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654627609
    },
    {
        "content": "<p>I am currently writing some <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 285296915,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654627630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Are there any further suggested changes to <a href=\"https://github.com/leanprover-community/mathlib/pull/14572\">#14572</a>?</p>",
        "id": 285580891,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654801269
    },
    {
        "content": "<p>It would be easier if you simply performed the moves instead of waiting for our pre-emptive approval, which you won't get because it's much easier to review things when they are in the correct place.</p>",
        "id": 285607977,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654817279
    },
    {
        "content": "<p>I'm trying to do that now.<br>\nMy experience is that when I change things in files like <code>algebra.char_p.basic</code>, then work becomes nearly impossible -- orange bars won't go away, building takes ages...<br>\nSo I would like to endure this only once if possible.</p>",
        "id": 285729476,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654893450
    },
    {
        "content": "<p>Actually, <code>data.nat.modeq</code> is even worse...</p>",
        "id": 285729508,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654893467
    },
    {
        "content": "<p>you can check the file itself without too much trouble, and if you are working on a different file which is far away you can either <code>lean --make</code> that particular file which shouldn't take too long, or you can push to the PR and wait for CI to finish to download the oleans</p>",
        "id": 285729893,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654893625
    },
    {
        "content": "<p>Don't try to use the server itself to compile that far away file. It's a complete waste of resources because it doesn't produce oleans on disk and is more likely to cause lean to run out of memory</p>",
        "id": 285729990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1654893688
    },
    {
        "content": "<p>The trick is to touch the far away files top to bottom. That is, if A imports B and you want to modify them both, start by modifying B. And close the file you're moving the lemmas from, to avoid triggering its recompilation.</p>",
        "id": 285736143,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1654897423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/285729893\">said</a>:</p>\n<blockquote>\n<p>you can check the file itself without too much trouble, and if you are working on a different file which is far away you can either <code>lean --make</code> that particular file which shouldn't take too long, or you can push to the PR and wait for CI to finish to download the oleans</p>\n</blockquote>\n<p><code>lean --make </code> the relevant files also takes something like two hours...</p>",
        "id": 285794743,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654976684
    },
    {
        "content": "<p>Anyway, I have now moved everything (and deleted <code>auxiliary.lean</code>).</p>",
        "id": 285794751,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654976712
    },
    {
        "content": "<p>Let's see how long CI will take...</p>",
        "id": 285795203,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1654977367
    },
    {
        "content": "<p>Building mathlib failed after two hours, but clicking on the \"details\" link showed the orange circle still spinning at \"leanpkg build\", so I restarted the faeild job(s). Now it progressed to linting...</p>",
        "id": 285830995,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655025305
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14572\">#14572</a> is now green. It would be nice if it could be merged soon.</p>",
        "id": 285834123,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655029687
    },
    {
        "content": "<p>Can you please hit the <code>Resolve conversation</code> button if you've taken into account a comment?</p>",
        "id": 285834973,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655030862
    },
    {
        "content": "<p>(This has no effect on the code, but it makes easier to read the discussion.)</p>",
        "id": 285835030,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655030894
    },
    {
        "content": "<p>I think it's almost ready to go.</p>",
        "id": 285836198,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655032238
    },
    {
        "content": "<p>Just doing the two hours recompilation of everything between <code>algebra.group_power.basic</code> and <code>field_theory.finite.basic</code> again on my machine, so that I can then check the comment on <code>field_theory.finite.trace</code>...</p>",
        "id": 285839859,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655037157
    },
    {
        "content": "<p>You know how to get cache using <code>leanproject</code>, right?</p>",
        "id": 285839965,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655037253
    },
    {
        "content": "<p>I changed <code>algebra.group_power.basic</code> by adding the suggested <code>simp</code> lemmas, so I don't see how I can avoid the recompilation (other than pushing and then later getting the new oleans from the branch, which I assume would not really be faster).</p>",
        "id": 285840142,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655037509
    },
    {
        "content": "<p>You can temporarily cancel the changes you made to get back to a situation you have the oleans for, do the other changes, then put back the changes which invalidated the oleans and tada!</p>",
        "id": 285840307,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655037693
    },
    {
        "content": "<p>It just finished. I guess the real problem was <code>data.nat.modeq</code> when I did this before (and it took two hours or so).</p>",
        "id": 285840653,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655038154
    },
    {
        "content": "<p>Michael, have you seen <a href=\"https://leanprover-community.github.io/tips_and_tricks.html#old-mode\">https://leanprover-community.github.io/tips_and_tricks.html#old-mode</a>, if you are sure that you just changed a proof or docstring or lemma only used by you and want to quickly get working on other stuff based on it, you can use this flag to tell lean to ignore intermediate files. I.e. pretend that they still compile fine</p>",
        "id": 285841682,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1655039378
    },
    {
        "content": "<p>Yes, but I have tried to avoid that so far.</p>",
        "id": 285841841,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655039545
    },
    {
        "content": "<p>I have now pushed the changes that were suggested.</p>",
        "id": 285842194,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655039963
    },
    {
        "content": "<p>bors tells me that <a href=\"https://github.com/leanprover-community/mathlib/pull/14572\">#14572</a> was merged, but when I download mathlib, the changes are not there. Do I just have to wait a bit longer, or is there a problem somewhere?</p>",
        "id": 285857408,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655061554
    },
    {
        "content": "<p>What <em>precisely</em> are you doing when you say you \"download mathlib\"?</p>",
        "id": 285858279,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1655062563
    },
    {
        "content": "<p>(For example, <code>git pull</code> for me correctly points <code>origin/master</code> to commit d6eb634b58906ef0cc4bba155e099da9d7d99615, which is the most recent commit according to GitHub and which is the commit resulting from the merge of <a href=\"https://github.com/leanprover-community/mathlib/pull/14572\">#14572</a>.)</p>",
        "id": 285858341,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1655062648
    },
    {
        "content": "<p>I did <code>leanproject up</code> in another project.</p>",
        "id": 285858449,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655062792
    },
    {
        "content": "<p>Also, <a href=\"https://leanprover-community.github.io/mathlib_docs/\">https://leanprover-community.github.io/mathlib_docs/</a> still mentions 97c9ef8cd3e7a896a61ee35aa39c7827e03980ce, which is the commit before <a href=\"https://github.com/leanprover-community/mathlib/pull/14572\">#14572</a>.</p>",
        "id": 285858580,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655062966
    },
    {
        "content": "<p>OK, now I get the latest commit. So I guess it takes a while until it becomes visible?</p>",
        "id": 285858592,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655063000
    },
    {
        "content": "<p>The documentation is rendered automatically from <a href=\"https://github.com/leanprover-community/mathlib_docs\">https://github.com/leanprover-community/mathlib_docs</a> which happens some time after the commit enters <code>master</code>, yes. I don't <em>know</em> about <code>leanproject up</code>, although looking at its definition (<a href=\"https://github.com/leanprover-community/mathlib-tools/blob/bdae7e9ae3e014fd845e7023e68a084e1165c9a2/mathlibtools/lib.py#L755\">https://github.com/leanprover-community/mathlib-tools/blob/bdae7e9ae3e014fd845e7023e68a084e1165c9a2/mathlibtools/lib.py#L755</a>) it really should be instant unless you were on the wrong git branch; were you on <code>master</code> when you ran <code>leanproject up</code>?</p>",
        "id": 285859298,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1655064063
    },
    {
        "content": "<p>I realized that I forgot to update the module docstring for the new file <code>field_theory.finite.trace</code> after I removed the definition of <code>trace_to_zmod</code>. I'm fixing this with <a href=\"https://github.com/leanprover-community/mathlib/pull/14711\">#14711</a>.</p>",
        "id": 285916339,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655121816
    },
    {
        "content": "<p>I have now made the next PR (adding results on multiplicative characters): <a href=\"https://github.com/leanprover-community/mathlib/pull/14716\">#14716</a>.</p>",
        "id": 285975331,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655147357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span></p>",
        "id": 285984455,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655151660
    },
    {
        "content": "<p>I've left a couple of comments, but I think you should define what a <code>mul_character</code> is. If we do it carefully we can take advantage of the existing API for <code>monoid_with_zero_hom</code> and friends.</p>",
        "id": 285990606,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655154923
    },
    {
        "content": "<p>Unless for you a multiplicative character it's just a <code>monoid_with_zero_hom</code> (I don't know if we want nonunits to be mapped to <code>0</code> or not).</p>",
        "id": 285990716,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655154973
    },
    {
        "content": "<p>In applications, the domain will usually be a field (then 0 is the only non-unit). I didn't want to restrict what a multiplicative character is (beyond a <code>monoid_with_zero_hom</code>), since I'm not sure whether there might be cases where it's reasonable to use a map that takes nonzero values on some non-units.<br>\nIn the intended application (to Gauss sums), I do have an assumption that non-units are mapped to zero in some places, though.</p>",
        "id": 285993830,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655156669
    },
    {
        "content": "<p>Well, I think this is a delicate question. It's really important to set up good definitions.  If we map nonunits to <code>0</code> then multiplicative characters form a group, right? So this allows all the usual notation <code>χ ^ 0</code> would be the trivial character, and that's nice.</p>",
        "id": 285994588,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655157126
    },
    {
        "content": "<p>Because otherwise you have to prove by hand all the stuff like <code>χ ^ (n + m) = ...</code>, and that can be <em>a lot</em> of work</p>",
        "id": 285994675,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655157213
    },
    {
        "content": "<p>OK. I see the following advantages.</p>\n<ul>\n<li>commutative group structure on <code>mul_char R R'</code> (as you mentioned)</li>\n<li>no need for extra hypotheses that non-units are mapped to zero</li>\n<li>can define, e.g., Dirichlet characters modulo <code>n</code> as composition of <code>ℤ → zmod n</code> with a <code>mul_char (zmod n) ℂ</code></li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>Dirichlet characters are  not <code>mul_char</code>s (there are very few <code>mul_char</code>s on the integers with the restricted def.)</li>\n<li>the <code>comm_group</code> structure has a lot of fields that need to be filled</li>\n<li>whenever one constructs a <code>mul_char</code>, one has a proof obligations that non-units are mapped to zero</li>\n</ul>",
        "id": 286088587,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655220014
    },
    {
        "content": "<p>But I would think that the advantages are worth it.</p>",
        "id": 286088653,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655220041
    },
    {
        "content": "<p>Would it be better to define <code>mul_char</code> as an extension of <code>monoid_with_zero_hom</code> or as an extension of <code>monoid_hom</code>?<br>\nIn both cases by a field <code>map_non_unit</code> (or so) that contains a proof that non-units are mapped to zero, I would think.</p>",
        "id": 286088912,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655220123
    },
    {
        "content": "<p>And I may need some help in setting this up in the right way, since I haven't yet done something similar so far.</p>",
        "id": 286089098,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655220191
    },
    {
        "content": "<p>I have now managed to get a <code>comm_group</code> instance on <code>mul_char R R'</code>. I will continue with rewriting the file to see how well I can work with it and then push a new version (perhaps tomorrow).</p>",
        "id": 286131053,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655240006
    },
    {
        "content": "<p>Hmm, I don't know, excluding Dirichlet character seems quite bad.</p>",
        "id": 286177753,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655280334
    },
    {
        "content": "<p>Sending non-units to zero is the wrong behavior for the inverse in a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/division_monoid\">docs#division_monoid</a>, at least.</p>",
        "id": 286193463,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655289135
    },
    {
        "content": "<p>Sacrificing the inverse is not a big deal.  But I am afraid we are missing a good <code>pnat</code>-powers  API on semigroups...</p>",
        "id": 286195082,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655290261
    },
    {
        "content": "<p>The point is that the theory is a mess. Peoples tend to modify these little details to their needs, but we really want a uniform definition, otherwise we will have to do a lot of code duplication.</p>",
        "id": 286195290,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655290433
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/286193463\">said</a>:</p>\n<blockquote>\n<p>Sending non-units to zero is the wrong behavior for the inverse in a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/division_monoid\">docs#division_monoid</a>, at least.</p>\n</blockquote>\n<p>The nice thing with this definition is that one does get a commutative group structure (it is isomorphic to the group structure on group homomorphisms from the units of the domain ring into the units of the target ring), which should make it easier to work with the characters. I'll now continue working on the file, using the group structure.</p>",
        "id": 286253834,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655317628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Is the following reasonable?<br>\nI add the variant with non_units mapped to zero as another file <code>mul_char_alt.lean</code> for comparison in <a href=\"https://github.com/leanprover-community/mathlib/pull/14716\">#14716</a> (and mark the PR as WIP for the time being), so that the two can be compared.</p>",
        "id": 286259382,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655320232
    },
    {
        "content": "<p>Thanks, it's good that we can see both versions. I suggest you open a new thread with your question (the title of this one refers to something else).</p>",
        "id": 286263737,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655322461
    },
    {
        "content": "<p>The title of this one refers to the end goal <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>, but it looks like there are quite some detours on the way...</p>",
        "id": 286264850,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655323028
    },
    {
        "content": "<p>I'll push the alternative file tomorrow (and open a new thread at the same time). It is getting late, and I'm tired...</p>",
        "id": 286270280,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655325544
    },
    {
        "content": "<blockquote>\n<p>I add the variant with non_units mapped to zero as another file mul_char_alt.lean for comparison in <a href=\"https://github.com/leanprover-community/mathlib/pull/14716\">#14716</a> (and mark the PR as WIP for the time being), so that the two can be compared.</p>\n</blockquote>\n<p>Isn't it better create another branch but leave it in the same file, so we can compare the new branch with the current branch side by side? If you implement the change in one commit (in the new branch), then we can just look at the diff of that one commit.</p>",
        "id": 286301336,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655349039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"479359\">Michael Stoll</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/286088587\">said</a>:</p>\n<blockquote>\n<p>OK. I see the following advantages.</p>\n<ul>\n<li>commutative group structure on <code>mul_char R R'</code> (as you mentioned)</li>\n<li>no need for extra hypotheses that non-units are mapped to zero</li>\n<li>can define, e.g., Dirichlet characters modulo <code>n</code> as composition of <code>ℤ → zmod n</code> with a <code>mul_char (zmod n) ℂ</code></li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>Dirichlet characters are  not <code>mul_char</code>s (there are very few <code>mul_char</code>s on the integers with the restricted def.)</li>\n<li>the <code>comm_group</code> structure has a lot of fields that need to be filled</li>\n<li>whenever one constructs a <code>mul_char</code>, one has a proof obligations that non-units are mapped to zero</li>\n</ul>\n</blockquote>\n<p>Hi, I have done some stuff on Dirichlet characters, in case you are interested</p>",
        "id": 286336578,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1655377853
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/p-adic/src/number_theory/dirichlet_character.lean\">https://github.com/leanprover-community/mathlib/blob/p-adic/src/number_theory/dirichlet_character.lean</a></p>",
        "id": 286336661,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1655377906
    },
    {
        "content": "<p>And <a href=\"https://github.com/leanprover-community/mathlib/blob/p-adic/src/number_theory/dirichlet_character_properties.lean\">https://github.com/leanprover-community/mathlib/blob/p-adic/src/number_theory/dirichlet_character_properties.lean</a></p>",
        "id": 286336673,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1655377913
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/286301336\">said</a>:</p>\n<blockquote>\n<p>Isn't it better create another branch but leave it in the same file, so we can compare the new branch with the current branch side by side? If you implement the change in one commit (in the new branch), then we can just look at the diff of that one commit.</p>\n</blockquote>\n<p>How would I do that? (Still a beginner with <code>git</code>...)</p>",
        "id": 286347395,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655383729
    },
    {
        "content": "<p>For each PR you create a branch, so you know how to create a new branch right? Instead of creating it out of <code>master</code>, you could also create it out of another existing branch, like the branch <code>legendre_symbol_mul_char</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/14716\">#14716</a>. Github allows you to <a href=\"https://github.com/leanprover-community/mathlib/compare/master...legendre_symbol_mul_char\">compare any two branches</a> even without opening PR (but comment is not possible without PR), and each commit also has its own <a href=\"https://github.com/leanprover-community/mathlib/commit/2977b88c3eec6d392b3ff6757161d3db02d18a1a\">diff view</a>.</p>",
        "id": 286353415,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1655386625
    },
    {
        "content": "<p>The variant implementation is at <a href=\"https://github.com/leanprover-community/mathlib/pull/14768\">#14768</a> now.<br>\n<span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span></p>",
        "id": 286363928,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655391110
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span> <a href=\"#narrow/stream/116395-maths/topic/Quadratic.20Hilbert.20symbol.20over.20.E2.84.9A/near/286336661\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/p-adic/src/number_theory/dirichlet_character.lean\">https://github.com/leanprover-community/mathlib/blob/p-adic/src/number_theory/dirichlet_character.lean</a></p>\n</blockquote>\n<p>Thanks for the pointers. My goal at this point is to define Gauss sums and prove some properties, so I need (additive and multiplicative) characters on finite commutative rings. But it would certainly make sense to have some interface with Dirichlet characters eventually.</p>",
        "id": 286364192,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655391216
    },
    {
        "content": "<p>I have now started a <a href=\"#narrow/stream/116395-maths/topic/Implementation.20of.20multiplicative.20characters\">separate topic to discuss the relative merits of the two approaches to multiplicative characters</a>.</p>",
        "id": 286396733,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655405289
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"479359\">@Michael Stoll</span> Why not change all the <code>R'</code>s to <code>C</code>s, for the following reason. I find it really helpful when reading mathlib code to follow good variable naming conventions. This is something which apparently doesn't exist in computer science (they just say <code>{\\alpha \\beta \\gamma \\delta : Type*}</code> whether they're groups or fields or whatever. Your <code>R'</code> , the target ring, is the ring of coefficients, so <code>C</code>. </p>\n<p>Imagine trying to explain your code to a smart 17 year old. You tell them that is says <code>R</code> is a ring, but if you like you can just pretend it's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>, the reals (I often do this with 1st year undergraduates when we're looking at modules over rings in Lean, I just say imagine <code>R=</code><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> and tell them that module is French for vector space). And similarly <code>C</code> is a ring, but you can just imagine it's the complexes if you don't know what a ring is, because in practice it often is.</p>",
        "id": 286407010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655410299
    },
    {
        "content": "<p>I'll keep this in mind for later. But since I don't want to do twice the work, I'd like to wait until it is clear which of the two variants will make it.</p>",
        "id": 286407423,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1655410498
    }
]