[
    {
        "content": "<p>Hi, do we have a special name for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x, y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> converges to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">g(y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>→</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi></mrow><annotation encoding=\"application/x-tex\">x\\to...</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.10556em;vertical-align:0em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span></span></span></span> uniformly in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span></span></span></span>? I probably can define it using uniformity and <code>comap</code> but I'd prefer to avoid reinventing the wheel.</p>",
        "id": 181221094,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1574265801
    },
    {
        "content": "<p>I don't think so. What definition are you thinking?</p>",
        "id": 181221282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574265917
    },
    {
        "content": "<p>Should be something like <code>tendsto (λ p, (g p.2, f p.1 p.2)) ((nhds a).comap prod.snd) uniformity</code> (not tested).</p>",
        "id": 181222380,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1574266586
    },
    {
        "content": "<p>what is <code>a</code> there?</p>",
        "id": 181222406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574266609
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>→</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">x\\to a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">a</span></span></span></span>. Actually, we can use any other filter instead of <code>nhds a</code>.</p>",
        "id": 181222452,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1574266645
    },
    {
        "content": "<p>oh, <code>nhds a</code> should be the limit filter on <code>x</code></p>",
        "id": 181222453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574266645
    },
    {
        "content": "<p>yeah, this looks like a good definition. Perhaps <code>tendsto_uniformly</code>?</p>",
        "id": 181222709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1574266830
    },
    {
        "content": "<p>Maybe I'll PR it later. Now I'm trying to formalize rotation numbers of circle homeomorphisms without adding things not required for this task.</p>",
        "id": 181222931,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1574267006
    },
    {
        "content": "<p>Maybe we should first do the universal cover, and the lift of a map to the universal cover -- or are you planning to just do the specific case of lifting circle maps to the real line?</p>",
        "id": 181223928,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574267628
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I'd take a shortcut for now, and work with the lifts.</p>",
        "id": 181225664,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1574268502
    },
    {
        "content": "<p>Something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">circle_deg1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">End</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mono&#39;</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">to_fun</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">deg1&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 181225706,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1574268541
    },
    {
        "content": "<p>This makes sense (maybe replacing <code>monotone</code> with <code>strict_mono</code>, and adding continuity). I don't know if we already have the circle as a compact topological space in mathlib. I am aware of <code>angle</code> in <code>analysis.complex.exponential</code>, but maybe there are other instances scattered around.</p>",
        "id": 181228007,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574269987
    }
]