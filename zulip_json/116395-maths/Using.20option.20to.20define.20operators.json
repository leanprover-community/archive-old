[
    {
        "content": "<p>If I were to define an operator like division whose output is <code>option</code> how can I unify the operator with the <code>has_div</code> class?  For instance, as a mwe, if I wanted to define division for the rational numbers as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rat.div2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">ℚ</span>\n<span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">option.some</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"n\">option.none</span>\n</code></pre></div>\n<p>I felt like <code>option.get</code> was in the right direction, but I couldn't get it to work. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">rat.has_div2</span> <span class=\"o\">:</span> <span class=\"n\">has_div</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span> <span class=\"n\">option.get</span> <span class=\"n\">rat.div2</span>\n</code></pre></div>\n<p>I've been playing around with this idea when defining addition for my dimensional analysis project so I didn't have to use a junk value.</p>",
        "id": 319032233,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1672681350
    },
    {
        "content": "<p>To avoid using an option or a junk value:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rat.div2</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"n\">classical.epsilon</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"bp\">⁻¹</span>\n</code></pre></div>",
        "id": 319036390,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1672683516
    },
    {
        "content": "<p>If you want to keep the option and use your original definition, then you can't avoid having a junk value. In that case, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/option.get_or_else\">docs#option.get_or_else</a> is the function you want.</p>",
        "id": 319036481,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1672683596
    },
    {
        "content": "<p>interesting. I'm not interested in keeping the option, I wasn't aware of this way. Thanks!</p>",
        "id": 319079809,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1672684348
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/classical.epsilon\">docs#classical.epsilon</a> is a junk value too</p>",
        "id": 319080293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672684621
    },
    {
        "content": "<p>Technically yes, but more subtle. It's actually a junk function of <code>a</code> in this case (when <code>b=0</code>, you get a potentially different result for each <code>a</code>). It's better than an explicit junk value because you can't accidentally prove an intuitively wrong theorem.</p>",
        "id": 319080718,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1672684819
    },
    {
        "content": "<p>Ah I missed that the epsilon was happening on the space of functions</p>",
        "id": 319080986,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672685003
    },
    {
        "content": "<p>I'm not sure whether I fully agree with your second sentence; certainly many intuitively wrong theorems are out of reach, but are you sure all of them are?</p>",
        "id": 319081005,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672685032
    },
    {
        "content": "<p>I mean you can't prove <code>div2 1 0 = 0</code> for instance.</p>",
        "id": 319081114,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1672685088
    },
    {
        "content": "<p>Been trying to use the classical.epsilon, but I don't think I understand fully how to use the classical.choice to close the goal. I was able to close the goal of the if statement, but the else statement which uses classical.choice is tripping me up. I wanted to know if anyone had any advice on working with classical.choice? I attached the code I'm working on below just so you can see what I did.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--supporting stuff</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.rat.basic</span>\n<span class=\"kd\">def</span> <span class=\"n\">dimension</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">dimension</span>\n<span class=\"kd\">def</span> <span class=\"n\">dimensionless</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">dimension</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">dimension.dimensionless</span> <span class=\"n\">α</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">dimension</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">has_one.nonempty</span>\n<span class=\"kn\">protected</span> <span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">add</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">dimension</span> <span class=\"n\">α</span><span class=\"o\">)]:</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">classical.epsilon</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n\n<span class=\"c1\">--code I'm working on</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">dimension</span> <span class=\"n\">α</span><span class=\"o\">)]:</span> <span class=\"n\">a.add</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dimension.add</span><span class=\"o\">,</span> <span class=\"n\">classical.epsilon</span><span class=\"o\">,</span> <span class=\"n\">classical.strong_indefinite_description</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">classical.indefinite_description</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">H</span><span class=\"o\">,</span><span class=\"n\">H2</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">H2</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">specialize</span> <span class=\"n\">h</span> <span class=\"n\">dimension.add</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 319234292,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1672764034
    },
    {
        "content": "<p>When proving things that involve classical epsilon, you need to prove that at least one object exists that satisfies the epsilon condition. In this case, you need to prove that there exists function <code>f</code> such that <code>f a b = a</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">dimension</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">a.add</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">generalize</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">symmetry'</span> <span class=\"n\">at</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">nth_rewrite</span> <span class=\"mi\">1</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">dimension.add</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">classical.epsilon_spec</span> <span class=\"o\">(⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">dimension</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 319235083,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1672764287
    },
    {
        "content": "<p>Ahhh, I see. I wasn't aware of a couple the ability to use a couple of the tactics like that. Thank you</p>",
        "id": 319235608,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1672764442
    }
]