[
    {
        "content": "<p>Several people have been playing with graph theory in Lean. Recently <span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span>, and in the past <span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> and <span class=\"user-mention\" data-user-id=\"241485\">@Vaibhav Karve</span>. I think we should try to carve out a little library. I'm certainly not an expert in this area, but I would like to do propose a project similar to what happened after the sensitivity conjecture was proven. We formalised it as a community in a matter of days.<br>\nLast year the Hedetniemi conjecture was disproven, in 3 pages: <a href=\"https://arxiv.org/pdf/1905.02167.pdf\" title=\"https://arxiv.org/pdf/1905.02167.pdf\">https://arxiv.org/pdf/1905.02167.pdf</a><br>\nWe could try to take this as a target. It will require formalising some graph theory, but not too much (hopefully). Experts are welcome to chime in.</p>\n<p>Here is a little start:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">universe</span> <span class=\"kn\">variables</span> <span class=\"n\">v</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">v₃</span> <span class=\"n\">u</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span> <span class=\"n\">u₃</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">multigraph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">multigraph</span>\n\n<span class=\"n\">def</span> <span class=\"n\">multigraph</span><span class=\"bp\">.</span><span class=\"n\">vertices</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">multigraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">directed_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">multigraph</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"bp\">.</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">directed_graph</span>\n\n<span class=\"n\">def</span> <span class=\"n\">directed_graph</span><span class=\"bp\">.</span><span class=\"n\">vertices</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">directed_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">directed_graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">symm</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">edge</span><span class=\"o\">)</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">graph</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">x</span> <span class=\"bp\">`~</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">G</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">edge</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">graph</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V₃</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₃</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G₁</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G₂</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G₃</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V₃</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vertices</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V</span>\n\n<span class=\"n\">def</span> <span class=\"n\">edge</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">e</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_linked</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">relation</span><span class=\"bp\">.</span><span class=\"n\">refl_trans_gen</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">edge</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_connected</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">is_linked</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_loopless</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">complete</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">complete_is_loopless</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">complete</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_loopless</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">irrefl</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- A homomorphism of graphs is a function on the vertices that preserves edges. -/</span>\n<span class=\"kn\">structure</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">G₁</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G₂</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span>    <span class=\"o\">:</span> <span class=\"n\">V₁</span> <span class=\"bp\">→</span> <span class=\"n\">V₂</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_edge&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₁</span><span class=\"o\">]</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₂</span><span class=\"o\">]</span> <span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_fun</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">G₁</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">V₁</span> <span class=\"bp\">→</span> <span class=\"n\">V₂</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">to_fun_eq_coe</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G₁</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V₁</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G₁</span> <span class=\"n\">G₂</span> <span class=\"n\">G₃</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">ematch</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">map_edge</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G₁</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₁</span><span class=\"o\">]</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₂</span><span class=\"o\">]</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_edge&#39;</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G₁</span> <span class=\"n\">G₂</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V₁</span> <span class=\"bp\">→</span> <span class=\"n\">V₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G₁</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V₁</span> <span class=\"bp\">→</span> <span class=\"n\">V₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">congr_arg</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">id</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G₂</span> <span class=\"n\">G₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G₁</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G₁</span> <span class=\"n\">G₃</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">map_edge&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">map_edge</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_edge</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The internal hom in the category of graphs. -/</span>\n<span class=\"kn\">instance</span> <span class=\"n\">ihom</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"bp\">→</span> <span class=\"n\">V₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₁</span><span class=\"o\">]</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₂</span><span class=\"o\">]</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n          <span class=\"k\">show</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₂</span><span class=\"o\">]</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">G₂</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">h</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The product in the category of graphs. -/</span>\n<span class=\"kn\">instance</span> <span class=\"n\">prod</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"bp\">×</span> <span class=\"n\">V₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₁</span><span class=\"o\">]</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₂</span><span class=\"o\">]</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">),</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"bp\">⟨</span><span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">e₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">e₁</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">e₂</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">G₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"n\">G₁</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">G₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"n\">G₂</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">pair</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G</span> <span class=\"n\">G₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">G₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">map_edge&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">map_edge</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">icurry</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">((</span><span class=\"n\">G₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">G₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ihom</span> <span class=\"n\">G₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G₁</span><span class=\"bp\">.</span><span class=\"n\">ihom</span> <span class=\"o\">(</span><span class=\"n\">G₂</span><span class=\"bp\">.</span><span class=\"n\">ihom</span> <span class=\"n\">G₃</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">curry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_edge&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">x₁</span> <span class=\"n\">y₁</span> <span class=\"n\">e₁</span> <span class=\"n\">x₂</span> <span class=\"n\">y₂</span> <span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">e₂</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">iuncurry</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">G₁</span><span class=\"bp\">.</span><span class=\"n\">ihom</span> <span class=\"o\">(</span><span class=\"n\">G₂</span><span class=\"bp\">.</span><span class=\"n\">ihom</span> <span class=\"n\">G₃</span><span class=\"o\">))</span> <span class=\"o\">((</span><span class=\"n\">G₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">G₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ihom</span> <span class=\"n\">G₃</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">map_edge&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G₁</span> <span class=\"n\">G₂</span> <span class=\"n\">G₃</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">curry</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">G₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"n\">G₃</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G₁</span> <span class=\"o\">(</span><span class=\"n\">G₂</span><span class=\"bp\">.</span><span class=\"n\">ihom</span> <span class=\"n\">G₃</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"n\">icurry</span> <span class=\"n\">G₁</span> <span class=\"n\">G₂</span> <span class=\"n\">G₃</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">map_edge&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">x₁</span> <span class=\"n\">y₁</span> <span class=\"n\">e₁</span> <span class=\"n\">x₂</span> <span class=\"n\">y₂</span> <span class=\"n\">e₂</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_edge</span> <span class=\"bp\">⟨</span><span class=\"n\">e₁</span><span class=\"o\">,</span> <span class=\"n\">e₂</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">uncurry</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G₁</span> <span class=\"o\">(</span><span class=\"n\">G₂</span><span class=\"bp\">.</span><span class=\"n\">ihom</span> <span class=\"n\">G₃</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">G₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"n\">G₃</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"n\">iuncurry</span> <span class=\"n\">G₁</span> <span class=\"n\">G₂</span> <span class=\"n\">G₃</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">map_edge&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_edge</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">G₁</span><span class=\"o\">)</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">ihom</span> <span class=\"n\">G₁</span> <span class=\"n\">G₂</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">curry</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">uncurry</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">y</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">colouring</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hom</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">complete</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">is_nat_colouring</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_lt</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edge</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">chromatic_number</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">col_exists</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">is_nat_colouring</span> <span class=\"n\">n</span> <span class=\"n\">G</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">min</span>        <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">f</span><span class=\"o\">},</span> <span class=\"n\">is_nat_colouring</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_nat_colouring</span><span class=\"bp\">.</span><span class=\"n\">colouring_fin</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_nat_colouring</span> <span class=\"n\">n</span> <span class=\"n\">G</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">colouring</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">is_lt</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">map_edge&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">e</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">edge</span> <span class=\"n\">e</span> <span class=\"err\">$</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">veq_of_eq</span> <span class=\"n\">H</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G₁</span> <span class=\"n\">G₂</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_nat_colouring</span><span class=\"bp\">.</span><span class=\"n\">comp</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_nat_colouring</span> <span class=\"n\">n</span> <span class=\"n\">G₂</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">G₁</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_nat_colouring</span> <span class=\"n\">n</span> <span class=\"n\">G₁</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">is_lt</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">is_lt</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">edge</span>  <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">edge</span> <span class=\"err\">$</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_edge</span> <span class=\"n\">e</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">hedetniemi</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">chromatic_number</span> <span class=\"n\">G₁</span> <span class=\"n\">n₁</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">chromatic_number</span> <span class=\"n\">G₂</span> <span class=\"n\">n₂</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">chromatic_number</span> <span class=\"o\">(</span><span class=\"n\">G₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n\n<span class=\"n\">include</span> <span class=\"n\">h₁</span> <span class=\"n\">h₂</span> <span class=\"n\">h</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- Hedetniemi&#39;s conjecture, which has been disproven in &lt;https://arxiv.org/pdf/1905.02167.pdf&gt;. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">hedetniemi</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">min</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">chromatic_number_prod_le_min</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">min</span> <span class=\"n\">n₁</span> <span class=\"n\">n₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">f₁</span><span class=\"o\">,</span> <span class=\"n\">hf₁</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f₁</span> <span class=\"o\">:</span> <span class=\"n\">V₁</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">is_nat_colouring</span> <span class=\"n\">n₁</span> <span class=\"n\">G₁</span> <span class=\"n\">f₁</span> <span class=\"o\">:=</span> <span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">col_exists</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">f₂</span><span class=\"o\">,</span> <span class=\"n\">hf₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">V₂</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">is_nat_colouring</span> <span class=\"n\">n₂</span> <span class=\"n\">G₂</span> <span class=\"n\">f₂</span> <span class=\"o\">:=</span> <span class=\"n\">h₂</span><span class=\"bp\">.</span><span class=\"n\">col_exists</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">c₁</span> <span class=\"o\">:</span> <span class=\"n\">is_nat_colouring</span> <span class=\"n\">n₁</span> <span class=\"o\">(</span><span class=\"n\">G₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₁</span> <span class=\"err\">∘</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hf₁</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">G₁</span> <span class=\"n\">G₂</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">c₂</span> <span class=\"o\">:</span> <span class=\"n\">is_nat_colouring</span> <span class=\"n\">n₂</span> <span class=\"o\">(</span><span class=\"n\">G₁</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f₂</span> <span class=\"err\">∘</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hf₂</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"n\">G₁</span> <span class=\"n\">G₂</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">le_min_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">min</span> <span class=\"n\">c₁</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">min</span> <span class=\"n\">c₂</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">hedetniemi</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">graph</span>\n</pre></div>",
        "id": 191947028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585255865
    },
    {
        "content": "<p>I'm not sure if it would be useful for this, but just adding the tiny amount of graph theory I've done in case some of it helps: <a href=\"https://github.com/b-mehta/combinatorics/blob/extras/src/handshaking.lean\" title=\"https://github.com/b-mehta/combinatorics/blob/extras/src/handshaking.lean\">the handshaking lemma and a few finite Ramsey results for graphs</a>, <a href=\"https://github.com/b-mehta/combinatorics/blob/extras/src/ramsey.lean\" title=\"https://github.com/b-mehta/combinatorics/blob/extras/src/ramsey.lean\">a different form of finite Ramsey for graphs and the pigeonhole principle</a>, and <a href=\"https://github.com/b-mehta/combinatorics/blob/extras/src/inf_ramsey.lean\" title=\"https://github.com/b-mehta/combinatorics/blob/extras/src/inf_ramsey.lean\">infinite Ramsey for hypergraphs</a></p>",
        "id": 191948181,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1585256437
    },
    {
        "content": "<p>Isn't infinite Ramsey about hypergraphs?</p>",
        "id": 191948609,
        "sender_full_name": "David Wärn",
        "timestamp": 1585256652
    },
    {
        "content": "<p>Yup, my bad, I forgot what multigraph means</p>",
        "id": 191950585,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1585257554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, this looks great. Put it on a branch so we can start hacking?</p>",
        "id": 191959011,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585263061
    },
    {
        "content": "<p>I just pushed to <code>hedetniemi</code></p>",
        "id": 191979111,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585288464
    },
    {
        "content": "<p>There is a new <code>graph_theory</code> directory.</p>",
        "id": 191979116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585288475
    },
    {
        "content": "<p>I've pushed some updates</p>",
        "id": 191993384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585301825
    },
    {
        "content": "<p>Can you prove that chromatic number is at most max degree plus one?</p>",
        "id": 191995445,
        "sender_full_name": "David Wärn",
        "timestamp": 1585303114
    },
    {
        "content": "<p>I haven't defined max degree yet (-;</p>",
        "id": 191997281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585304110
    },
    {
        "content": "<p>I just proved that every colouring on the exponential graph can be turned into a <em>suited</em> one.</p>",
        "id": 191997315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585304144
    },
    {
        "content": "<p>I pushed a proof of \"Observation 1\"</p>",
        "id": 192001100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585306291
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Thank you starting this! I have some basic definitions too. I was aiming towards two targets so far:</p>\n<ol>\n<li><a href=\"https://en.wikipedia.org/wiki/Seven_Bridges_of_K%C3%B6nigsberg\" title=\"https://en.wikipedia.org/wiki/Seven_Bridges_of_K%C3%B6nigsberg\">Seven Bridges of Königsberg</a> because this problem is also on the 100 theorems list.</li>\n<li>Results about <a href=\"https://www.sciencedirect.com/science/article/abs/pii/S0166218X19305608\" title=\"https://www.sciencedirect.com/science/article/abs/pii/S0166218X19305608\">Graph-satisfiability</a> because this is my research -- but this will need lot more in terms of definitions.</li>\n</ol>",
        "id": 192059025,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1585333072
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">multiset</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">function</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">relation</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">elide</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">find</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">graph</span>\n\n  <span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n  <span class=\"kn\">structure</span> <span class=\"n\">digraph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">adj</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n  <span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">pair</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V</span> <span class=\"bp\">×</span> <span class=\"n\">V</span>\n  <span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">is_edge</span> <span class=\"o\">(</span><span class=\"n\">dg</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pair</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">uncurry&#39;</span> <span class=\"n\">dg</span><span class=\"bp\">.</span><span class=\"n\">adj</span>  <span class=\"c1\">-- uncurry only works on Types.</span>\n                              <span class=\"c1\">-- uncurry&#39; works on Sorts.</span>\n                              <span class=\"c1\">-- use uncurry&#39;.</span>\n\n\n  <span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">dg</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">pair</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n  <span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">dg</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">dg</span><span class=\"bp\">.</span><span class=\"n\">adj</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"n\">is_edge</span> <span class=\"n\">dg</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">is_edge</span><span class=\"o\">,</span>\n      <span class=\"n\">unfold</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">uncurry&#39;</span><span class=\"o\">,</span>\n      <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n\n\n  <span class=\"kn\">structure</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">digraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">adj</span><span class=\"o\">)</span>\n\n\n  <span class=\"kn\">structure</span> <span class=\"n\">weighted_digraph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"o\">(</span><span class=\"n\">digraph</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">has_zero</span> <span class=\"n\">W</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">weight</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">W</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">weight_hom</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">adj</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">weight</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n  <span class=\"kn\">structure</span> <span class=\"n\">weighted_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">weighted_digraph</span> <span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">adj</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">weight_symm</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">pair</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">weight</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">weight</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n\n\n  <span class=\"n\">def</span> <span class=\"n\">multi_digraph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">weighted_digraph</span> <span class=\"n\">V</span> <span class=\"bp\">ℕ</span>\n  <span class=\"n\">def</span> <span class=\"n\">multi_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">weighted_graph</span> <span class=\"n\">V</span> <span class=\"bp\">ℕ</span>\n\n\n  <span class=\"n\">def</span> <span class=\"n\">order</span> <span class=\"o\">{</span><span class=\"n\">graph_type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">graph_type</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n    <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">V</span>\n\n\n  <span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">edges_digraph</span> <span class=\"o\">(</span><span class=\"n\">dg</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">pair</span> <span class=\"n\">V</span> <span class=\"bp\">//</span> <span class=\"n\">is_edge</span> <span class=\"n\">dg</span> <span class=\"n\">e</span><span class=\"o\">}</span>\n\n  <span class=\"kn\">instance</span> <span class=\"n\">dec_eq_V_implies_dec_eq_edges_digraph</span>\n    <span class=\"o\">(</span><span class=\"n\">dg</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"o\">(</span><span class=\"n\">edges_digraph</span> <span class=\"n\">dg</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n  <span class=\"kn\">instance</span> <span class=\"n\">fintype_V_and_dec_rel_adj_implies_fintype_edges_digraph</span>\n  <span class=\"o\">(</span><span class=\"n\">dg</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">dg</span><span class=\"bp\">.</span><span class=\"n\">adj</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">edges_digraph</span> <span class=\"n\">dg</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"bp\">_</span>\n\n  <span class=\"n\">def</span> <span class=\"n\">size_digraph</span> <span class=\"o\">(</span><span class=\"n\">dg</span> <span class=\"o\">:</span> <span class=\"n\">digraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"n\">dg</span><span class=\"bp\">.</span><span class=\"n\">adj</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">edges_digraph</span> <span class=\"n\">dg</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 192059286,
        "sender_full_name": "Vaibhav Karve",
        "timestamp": 1585333173
    },
    {
        "content": "<p>You're the guy who spoke about this stuff in Pittsburgh right? Nice job getting the publication :-)</p>",
        "id": 192060069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585333504
    },
    {
        "content": "<p>maybe we should all dump our code in the <code>graph_theory</code> folder of the <code>hedetniemi</code> branch. And then try to sort out the common definitions.</p>",
        "id": 192060082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585333508
    },
    {
        "content": "<p>There's a definition of paths now that could be used for formalizing Königsberg</p>",
        "id": 192072404,
        "sender_full_name": "David Wärn",
        "timestamp": 1585339308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span>, in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_category</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">f_obj</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">to_hom</span> <span class=\"n\">f_obj</span> <span class=\"bp\">@</span><span class=\"n\">f_edge</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">to_hom</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">to_category</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">to_category</span> <span class=\"n\">f_obj</span> <span class=\"bp\">@</span><span class=\"n\">f_edge</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"bp\">=</span> <span class=\"n\">f_obj</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">to_category</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">path</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">to_category</span> <span class=\"n\">f_obj</span> <span class=\"bp\">@</span><span class=\"n\">f_edge</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">to_hom</span> <span class=\"n\">f_obj</span> <span class=\"bp\">@</span><span class=\"n\">f_edge</span> <span class=\"n\">p</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"n\">rfl</span>\n</pre></div>\n\n\n<ol>\n<li>You should make these lemmas <code>simp</code> lemmas!</li>\n<li>Instead you can just write:</li>\n</ol>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">to_category</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">f_obj</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">to_hom</span> <span class=\"n\">f_obj</span> <span class=\"bp\">@</span><span class=\"n\">f_edge</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">to_hom</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>which will automatically synthesize those lemmas for you.</p>",
        "id": 192102786,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585365588
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span>, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> why do you have this messed up design where <code>graph</code> is sometimes a class, and sometimes not? It is a mess.</p>",
        "id": 192103371,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585366624
    },
    {
        "content": "<p>It will be so much easier if we just make up our minds. :-) Either way is viable, but at present the code switched back and forth.</p>",
        "id": 192103378,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585366670
    },
    {
        "content": "<p>Ok. It is no longer a class, and the \"path category\" David defined now used a type synonym, and has been cleaned up.</p>",
        "id": 192104113,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585368157
    },
    {
        "content": "<p>I've also moved the path category to a separate file. While I'm happy to have it, it's not very useful for doing graph theory. :-)</p>",
        "id": 192104941,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585369648
    },
    {
        "content": "<p>(Someone should use it however to prove the presentation of the simplex category, for when we start doing homological algebra!)</p>",
        "id": 192104947,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585369673
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> It's because we hadn't made up our mind yet.</p>",
        "id": 192108163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585375613
    },
    {
        "content": "<p>okay :-)</p>",
        "id": 192108181,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585375625
    },
    {
        "content": "<p>It's not clear to me what the best approach is (-;</p>",
        "id": 192108186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585375629
    },
    {
        "content": "<p>well, I made up my mind :-)</p>",
        "id": 192108187,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585375641
    },
    {
        "content": "<p>I think in the end maybe tc is not the right approach here</p>",
        "id": 192108189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585375643
    },
    {
        "content": "<p>I was just writing the statement of the Konigsberg problem</p>",
        "id": 192108199,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585375659
    },
    {
        "content": "<p>and realised the setup you sketched can't talk about undirected multigraphs</p>",
        "id": 192108201,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585375674
    },
    {
        "content": "<p>so I was thinking about doing that</p>",
        "id": 192108238,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585375683
    },
    {
        "content": "<p>but it is not super pretty</p>",
        "id": 192108240,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585375686
    },
    {
        "content": "<p>My proposal is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">directed_multigraph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">directed_multigraph</span><span class=\"bp\">.</span><span class=\"n\">vertices</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">directed_multigraph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">multigraph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">directed_multigraph</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"n\">edge</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">≃</span> <span class=\"n\">edge</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">directed_graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">directed_multigraph</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">V</span><span class=\"bp\">.</span>\n\n<span class=\"n\">def</span> <span class=\"n\">directed_graph</span><span class=\"bp\">.</span><span class=\"n\">vertices</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">directed_graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">V</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">directed_graph</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">multigraph</span> <span class=\"n\">V</span><span class=\"bp\">.</span>\n</pre></div>\n\n\n<p>but then all the <code>symm</code> fields of <code>graph</code> become more work than they used to be</p>",
        "id": 192108244,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585375718
    },
    {
        "content": "<p>but perhaps a helper function does it</p>",
        "id": 192108245,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585375735
    },
    {
        "content": "<p>Ah --- let's call <code>symm</code> on <code>multigraph</code> <code>involution</code>, then define <code>symm</code> as a new field on <code>graph</code>, and provide a default value of <code>symm</code> in terms of it</p>",
        "id": 192108258,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585375771
    },
    {
        "content": "<p>That sounds good</p>",
        "id": 192108307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585375840
    },
    {
        "content": "<p>And then a custom <code>mk'</code> that takes <code>edge</code> and <code>symm</code> and builds <code>involution</code> if you want to make a <code>graph</code>?</p>",
        "id": 192108312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585375874
    },
    {
        "content": "<p>no, it's even easier than that</p>",
        "id": 192108315,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585375887
    },
    {
        "content": "<p>Ok, note that I just pushed.</p>",
        "id": 192108318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585375904
    },
    {
        "content": "<p>A little commit to the end of that file.</p>",
        "id": 192108320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585375913
    },
    {
        "content": "<p><code>graph</code> will actually have two fields, <code>symm</code>, <code>inv</code>, and <code>inv</code> will just receive a default value in terms of <code>symm</code></p>",
        "id": 192108322,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585375921
    },
    {
        "content": "<p>We should probably split the file now...</p>",
        "id": 192108333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585375922
    },
    {
        "content": "<p>so the constructor will look the same</p>",
        "id": 192108361,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585375926
    },
    {
        "content": "<p>Aah, <code>inv</code> will get the default value. Sure.</p>",
        "id": 192108367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585375957
    },
    {
        "content": "<p>One thing that isn't clear to me if we drop the tc approach is how easy it will be to apply statements about directed multigraphs to ordinary graphs.</p>",
        "id": 192108371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585375999
    },
    {
        "content": "<p>Do we manually need to apply coercions?</p>",
        "id": 192108373,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585376009
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Are you making this change atm?</p>",
        "id": 192108488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585376171
    },
    {
        "content": "<p>yes</p>",
        "id": 192108490,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585376179
    },
    {
        "content": "<p>Cool</p>",
        "id": 192108493,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585376192
    },
    {
        "content": "<p>Did you see Vaibhav's code upstairs? He also has definitions of weighted graphs. I hope we can fit those in the mix.</p>",
        "id": 192108520,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585376242
    },
    {
        "content": "<p>Gah, I made the mistake of thinking \"oooh, this belongs in data/equiv/basic, I'll just pop it in there\". And now everything is recompiling.</p>",
        "id": 192109228,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585377721
    },
    {
        "content": "<p>I committed</p>",
        "id": 192110008,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585379261
    },
    {
        "content": "<p>I managed to state konigsberg in the current setup, and it locally doesn't look too bad:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">KonigsbergBridges</span> <span class=\"o\">:</span> <span class=\"n\">multigraph</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">multigraph_of_edges</span> <span class=\"o\">[(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span><span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span><span class=\"mi\">3</span><span class=\"o\">)]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">KonigsbergBridgesProblem</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">¬</span> <span class=\"n\">is_Eulerian</span> <span class=\"n\">KonigsbergBridges</span>\n</pre></div>",
        "id": 192110071,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585379308
    },
    {
        "content": "<p>using</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">multigraph_of_edges</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">multigraph</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">countp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))),</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">convert</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">or_comm</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>to construct the graph from a list of edges</p>",
        "id": 192110079,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585379349
    },
    {
        "content": "<p>But it's absolutely disgusting that I have to have a coercion from multigraph to directed_multigraph</p>",
        "id": 192110130,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585379413
    },
    {
        "content": "<p>and struggling to make that coercion fire makes things ugly</p>",
        "id": 192110132,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585379427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thanks!</p>",
        "id": 192111338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585381982
    },
    {
        "content": "<p>Cleaning up the coercion issues seems to be an important issue</p>",
        "id": 192111342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585381996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> This looks good!</p>",
        "id": 192113483,
        "sender_full_name": "David Wärn",
        "timestamp": 1585386053
    },
    {
        "content": "<p>If you defined Eulerian paths by counting edge occurrences and demanding that the counts are all <code>1 : nat</code>, then you could prove non-Eulerianess by appeal to the universal property of the path category, but maybe this is silly.</p>",
        "id": 192113542,
        "sender_full_name": "David Wärn",
        "timestamp": 1585386201
    },
    {
        "content": "<p>(Specifically, the two maps sending a path <code>p : G.path x y</code> to the additive monoid <code>V -&gt; zmod 2</code> given by \"taking edge counts adjacent to a vertex\" and \"adding x and y\", respectively, agree)</p>",
        "id": 192113805,
        "sender_full_name": "David Wärn",
        "timestamp": 1585386705
    },
    {
        "content": "<p>Shouldn't multigraph have a condition that <code>inv (inv e) = e</code>?</p>",
        "id": 192113943,
        "sender_full_name": "David Wärn",
        "timestamp": 1585386877
    },
    {
        "content": "<p>At the risk of being \"that guy\", I think that this <a href=\"http://us.metamath.org/mpeuni/konigsberg.html\" title=\"http://us.metamath.org/mpeuni/konigsberg.html\">metamath proof of konigsberg</a> is particularly relevant for this discussion. It appears that I used a list of unordered pairs (or rather, a function from some index set to unordered pairs) for the edge function.</p>",
        "id": 192114109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585387098
    },
    {
        "content": "<p>this is actually one of my favorite examples of computable data structures in metamath</p>",
        "id": 192114147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585387183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you have input on the general setup of the hierarchy of graphy definitions?</p>",
        "id": 192115544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585389552
    },
    {
        "content": "<p>I am growing more and more fond of the approach that doesn't bother with unifying different notions of graph</p>",
        "id": 192115553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585389598
    },
    {
        "content": "<p>use whatever is most convenient for the theorem in front of you</p>",
        "id": 192115616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585389625
    },
    {
        "content": "<p>In this case, a reasonable substitute for unordered pairs is the quotient of A x A by swap</p>",
        "id": 192115647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585389722
    },
    {
        "content": "<p>And manually apply a functor when you need it...</p>",
        "id": 192115681,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585389723
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> That change to <code>data/equiv</code> is already part of an existing PR to mathlib, right?</p>",
        "id": 192115760,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585389852
    },
    {
        "content": "<p>yes</p>",
        "id": 192115766,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585389873
    },
    {
        "content": "<p>I hope it gets merged quickly (-;</p>",
        "id": 192115769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585389886
    },
    {
        "content": "<p>You know that CI builds all branches?</p>",
        "id": 192115791,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585389941
    },
    {
        "content": "<p>So <code>leanproject up</code> should get you oleans.</p>",
        "id": 192115797,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585389953
    },
    {
        "content": "<p>and indeed, they are available now</p>",
        "id": 192115840,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585389980
    },
    {
        "content": "<p>I did <code>leanproject get-cache</code> which didn't work</p>",
        "id": 192115908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585390124
    },
    {
        "content": "<p>But I was on a wrong commit... it seems</p>",
        "id": 192115923,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585390186
    },
    {
        "content": "<p>I have a one-line proof saying</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">edge</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n</pre></div>\n\n\n<p>I thought that <code>solve_by_elim</code> should do this, but it didn't. What is the recommended way of writing this proof? Or is this the idiomatic, optimal form?</p>",
        "id": 192116248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585390763
    },
    {
        "content": "<p>Are you sure? <code>solve_by_elim [or.imp, and.imp, edge.symm, eq.symm] {max_steps:=100}</code>?</p>",
        "id": 192116300,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585390810
    },
    {
        "content": "<p><code>max_steps</code> got renamed recently, it may be something else still</p>",
        "id": 192116319,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585390830
    },
    {
        "content": "<p><code>solve_by_elim</code> has a very conservative default for <code>max_steps</code>.</p>",
        "id": 192116339,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585390888
    },
    {
        "content": "<p>This doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">strong_prod</span> <span class=\"o\">(</span><span class=\"n\">G₁</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G₂</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">V₁</span> <span class=\"bp\">×</span> <span class=\"n\">V₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span>\n    <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₁</span><span class=\"o\">]</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₂</span><span class=\"o\">]</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">∨</span>\n    <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₂</span><span class=\"o\">]</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"bp\">∨</span>\n    <span class=\"o\">((</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₁</span><span class=\"o\">]</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)),</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"k\">by</span>\n   <span class=\"o\">{</span> <span class=\"n\">solve_by_elim</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">imp</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">imp</span><span class=\"o\">,</span> <span class=\"n\">edge</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">max_steps</span> <span class=\"o\">:=</span> <span class=\"mi\">100</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 192116468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585391102
    },
    {
        "content": "<p>I don't understand why.</p>",
        "id": 192116476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585391109
    },
    {
        "content": "<p>I think 20 <code>apply</code>s are more than enough.</p>",
        "id": 192116484,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585391130
    },
    {
        "content": "<p>commit something with the <code>repeat { apply ... }</code> proof and I'll see if I can get <code>solve_by_elim</code> going.</p>",
        "id": 192116767,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585391598
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Hedetniemi/near/192116767\" title=\"#narrow/stream/116395-maths/topic/Hedetniemi/near/192116767\">said</a>:</p>\n<blockquote>\n<p>commit something with the <code>repeat { apply ... }</code> proof and I'll see if I can get <code>solve_by_elim</code> going.</p>\n</blockquote>\n<p>Done.</p>",
        "id": 192116987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585391979
    },
    {
        "content": "<p>hmm, okay, I don't see it yet.</p>",
        "id": 192117515,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585392852
    },
    {
        "content": "<p>by the way, did you notice the new <code>show_term</code> tactic?</p>",
        "id": 192117518,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585392864
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> by show_term { repeat {apply or.imp &lt;|&gt; apply and.imp &lt;|&gt; apply edge.symm &lt;|&gt; apply eq.symm } }\n</pre></div>",
        "id": 192117520,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585392871
    },
    {
        "content": "<p>it is a 3 line tactic, but also the best thing since sliced bread :-)</p>",
        "id": 192117523,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585392889
    },
    {
        "content": "<p>I need to sleep. Could you put a <code>TODO: Scott, diagnose why </code>solve_by_elim<code> can't do this</code> note at that line, and I'll try again with the latest version of <code>solve_by_elim</code>?</p>",
        "id": 192117711,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585393236
    },
    {
        "content": "<p>Ok, I'll do that. And thanks for <code>show_term</code>!</p>",
        "id": 192117789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585393333
    },
    {
        "content": "<p>Sleep tight. See you tomorrow morning (-;</p>",
        "id": 192117809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585393422
    },
    {
        "content": "<p>(Definitely a <code>solve_by_elim</code> bug, thank you. </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">solve_by_elim</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">imp</span><span class=\"o\">,</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">imp</span><span class=\"o\">,</span> <span class=\"n\">edge</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">edge</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">edge</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">edge</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">max_steps</span><span class=\"o\">:=</span><span class=\"mi\">15</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>works. Something is going wrong with metavariables getting stuck between one application and the next.)</p>",
        "id": 192119317,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585396131
    },
    {
        "content": "<p>Aren't you sleeping?</p>",
        "id": 192119338,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585396153
    },
    {
        "content": "<p>Minimised as</p>\n<div class=\"codehilite\"><pre><span></span>example (P : ℕ → Type) (f : Π {n : ℕ}, P n) : P 2 × P 3 :=\nbegin\n  fsplit,\n  solve_by_elim* only [f], -- fails!\n  solve_by_elim* only [f, f]\nend\n</pre></div>",
        "id": 192119339,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585396155
    },
    {
        "content": "<p>:-)</p>",
        "id": 192119341,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585396158
    },
    {
        "content": "<p>Scott is a very effective sleeper (-;</p>",
        "id": 192120027,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585397266
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span>  <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">path</span> <span class=\"n\">h</span> <span class=\"n\">h</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">edge</span> <span class=\"n\">h</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">path</span> <span class=\"n\">h</span> <span class=\"n\">t</span>\n</pre></div>\n\n\n<p>should this be defined differently to enable based path recursion?</p>",
        "id": 192182058,
        "sender_full_name": "David Wärn",
        "timestamp": 1585498841
    },
    {
        "content": "<p>Can't you do path based recursion with that? I don't understand.</p>",
        "id": 192208931,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585540719
    },
    {
        "content": "<p>Try <code>cases p</code> or <code>induction p</code> when <code>p</code> is a path?</p>",
        "id": 192208939,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585540752
    },
    {
        "content": "<p>For example this doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">length&#39;</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">path</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">path</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">::</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">length&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">p</span>\n</pre></div>\n\n\n<p>I get <code>failed to prove recursive application is decreasing</code>.</p>",
        "id": 192222338,
        "sender_full_name": "David Wärn",
        "timestamp": 1585555205
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">length&#39;</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"n\">V</span> <span class=\"n\">G</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">path</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">e</span> <span class=\"n\">p</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">s</span>\n</pre></div>",
        "id": 192223212,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585555689
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">path</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"bp\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">path</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"n\">G</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">(</span><span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">path</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"n\">e</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">length</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span>\n</pre></div>",
        "id": 192223564,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585555921
    },
    {
        "content": "<p>looks like you need to put <code>t</code> inside the recursion as well</p>",
        "id": 192223610,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585555933
    },
    {
        "content": "<p>Yes, this works here. So <code>path.rec</code> does constructions on all paths, not on all paths ending at a specific vertex. What do I do if have a some assumptions about a specific vertex, and want to prove something that only makes sense for paths ending at that vertex?</p>",
        "id": 192224350,
        "sender_full_name": "David Wärn",
        "timestamp": 1585556516
    },
    {
        "content": "<p>too bad</p>",
        "id": 192224711,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585556719
    },
    {
        "content": "<p>You can do this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">based_rec&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">path</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">s&#39;</span> <span class=\"o\">(</span><span class=\"n\">p&#39;</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">path</span> <span class=\"n\">s&#39;</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">path</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">s&#39;</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">edge</span> <span class=\"n\">s&#39;</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">path</span> <span class=\"n\">m</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n    <span class=\"n\">C</span> <span class=\"n\">m</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">s&#39;</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">)),</span> <span class=\"n\">C</span> <span class=\"n\">s</span> <span class=\"n\">p</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">path</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">C</span> <span class=\"n\">hn</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">hn</span>\n<span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">path</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">m</span> <span class=\"bp\">_</span> <span class=\"n\">e</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">C</span> <span class=\"n\">hn</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span> <span class=\"n\">hc</span> <span class=\"n\">s</span> <span class=\"n\">m</span> <span class=\"n\">e</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">based_rec&#39;</span> <span class=\"n\">m</span> <span class=\"n\">t</span> <span class=\"n\">l</span> <span class=\"n\">C</span> <span class=\"n\">hn</span> <span class=\"n\">hc</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">based_rec_on</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">path</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">path</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">t</span> <span class=\"o\">(</span><span class=\"n\">path</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">s</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">edge</span> <span class=\"n\">s</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">path</span> <span class=\"n\">m</span> <span class=\"n\">t</span><span class=\"o\">),</span>\n    <span class=\"n\">C</span> <span class=\"n\">m</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">::</span><span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"n\">s</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">based_rec&#39;</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">p</span> <span class=\"n\">C</span> <span class=\"n\">hn</span> <span class=\"n\">hc</span>\n</pre></div>\n\n\n<p>But I feel like this is a problem that the equation compiler should solve</p>",
        "id": 192225056,
        "sender_full_name": "David Wärn",
        "timestamp": 1585556962
    },
    {
        "content": "<p>I guess I would be more interested in just having the interface available to me rather than caring about what the equation compiler can do</p>",
        "id": 192225307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585557121
    },
    {
        "content": "<p>I guess that makes sense. You'd need some sort of interface anyway e.g. for recursion on paths starting at a specific vertex; might as  well make it symmetric</p>",
        "id": 192225944,
        "sender_full_name": "David Wärn",
        "timestamp": 1585557516
    },
    {
        "content": "<p>Of course there are those who are excited by the equation compiler. They tend to be the more computer science folk. I've seen the equation compiler solving some tricky problems before in a very efficient manner. But I don't even teach it to people at Xena, it tends not to come up in generic maths unless you're doing some kind of fancy induction which seems to be more commonplace in CS style constructions than mathematical ones.</p>",
        "id": 192226339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585557756
    },
    {
        "content": "<p>In maths it's always just induction on size of thing</p>",
        "id": 192226375,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585557786
    },
    {
        "content": "<p>I think this is happening because both <code>s</code> and <code>t</code> occur to the right of the colon in the definition of <code>path</code></p>",
        "id": 192246851,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585570761
    },
    {
        "content": "<p>I think so too. With</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">path&#39;</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">path&#39;</span> <span class=\"n\">s</span>\n<span class=\"bp\">|</span> <span class=\"n\">app</span> <span class=\"o\">{</span><span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">path&#39;</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">edge</span> <span class=\"n\">h</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">path&#39;</span> <span class=\"n\">t</span>\n</pre></div>\n\n\n<p>you get a based path recursor <code>path'.rec</code></p>",
        "id": 192251046,
        "sender_full_name": "David Wärn",
        "timestamp": 1585573077
    },
    {
        "content": "<p>I've created two files <code>basic.lean</code> and <code>chromatic_number.lean</code>.</p>",
        "id": 192360997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585644933
    },
    {
        "content": "<p>Out of interest, why not use <code>list.chain G.edge</code> instead of defining a new thing? <code>list.chain</code> already comes with a bunch of lemmas to work with it</p>",
        "id": 192387462,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1585660704
    },
    {
        "content": "<p>there is also something about transitive closure of a relation</p>",
        "id": 192387809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585660842
    },
    {
        "content": "<p><code>refl_trans_gen</code> and <code>trans_gen</code> in <code>logic.relation</code></p>",
        "id": 192388012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585660923
    },
    {
        "content": "<p><code>list.chain'</code> is better if you want the path itself as a list, while <code>refl_trans_gen G.edge</code> will give you the <code>path'</code> inductive type above</p>",
        "id": 192388667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585661187
    },
    {
        "content": "<p>in particular, the library provides the ability to do recursion on either the head or the tail of the path, as well as proving that two paths make a path</p>",
        "id": 192388745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585661234
    },
    {
        "content": "<p>Isn't <code>refl_trans_gen</code> Prop-valued?</p>",
        "id": 192388900,
        "sender_full_name": "David Wärn",
        "timestamp": 1585661308
    },
    {
        "content": "<p>oh that's true, this is the \"there is a path\" relation</p>",
        "id": 192388969,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585661351
    },
    {
        "content": "<p><code>list.chain'</code> will give you the path itself</p>",
        "id": 192388988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585661362
    },
    {
        "content": "<p>I didn't know <code>list.chain</code> existed! I guess this gives an untyped definition of paths. It's not clear to me that it would be easier to work with. But I guess if you prove that any path can be expressed as a list, then you'll be able to do recursion?</p>",
        "id": 192389805,
        "sender_full_name": "David Wärn",
        "timestamp": 1585661658
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">logic</span><span class=\"bp\">.</span><span class=\"n\">relation</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">list</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">loopless</span> <span class=\"o\">:</span> <span class=\"n\">irreflexive</span> <span class=\"n\">edge</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">undirected</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">edge</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">symmetric_edge</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">edge</span> <span class=\"o\">:=</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">undirected</span>\n\n<span class=\"n\">def</span> <span class=\"n\">connected</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">relation</span><span class=\"bp\">.</span><span class=\"n\">refl_trans_gen</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">edge</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">conn_symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"o\">(</span><span class=\"n\">connected</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">relation</span><span class=\"bp\">.</span><span class=\"n\">reflexive_refl_trans_gen</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">relation</span><span class=\"bp\">.</span><span class=\"n\">refl_trans_gen</span><span class=\"bp\">.</span><span class=\"n\">head</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">undirected</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">equiv_con</span> <span class=\"o\">:</span> <span class=\"n\">equivalence</span> <span class=\"o\">(</span><span class=\"n\">connected</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">relation</span><span class=\"bp\">.</span><span class=\"n\">reflexive_refl_trans_gen</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">conn_symm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">relation</span><span class=\"bp\">.</span><span class=\"n\">transitive_refl_trans_gen</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_path_from</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">edge</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">path_implies_connected</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp₁</span> <span class=\"o\">:</span> <span class=\"n\">is_path_from</span> <span class=\"n\">G</span> <span class=\"n\">a</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp₂</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">connected</span> <span class=\"n\">G</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">p</span> <span class=\"n\">hp₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_path_from</span> <span class=\"n\">at</span> <span class=\"n\">hp₁</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">p</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"n\">generalizing</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hp₂</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hp₁</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">last_singleton</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">relation</span><span class=\"bp\">.</span><span class=\"n\">refl_trans_gen</span><span class=\"bp\">.</span><span class=\"n\">single</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">last_cons_cons</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">hp₂</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">relation</span><span class=\"bp\">.</span><span class=\"n\">refl_trans_gen</span><span class=\"bp\">.</span><span class=\"n\">head</span> <span class=\"n\">hp₁_a_1</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">connected_gives_path</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">connected</span> <span class=\"n\">G</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">diff</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span><span class=\"o\">),</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">last</span> <span class=\"n\">p</span> <span class=\"n\">hp</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"n\">is_path_from</span> <span class=\"n\">G</span> <span class=\"n\">a</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_path_from</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">diff</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">relation</span><span class=\"bp\">.</span><span class=\"n\">refl_trans_gen</span><span class=\"bp\">.</span><span class=\"n\">head_induction_on</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">diff</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">clear</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"n\">t</span> <span class=\"n\">ih</span> <span class=\"n\">cb</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"o\">[</span><span class=\"n\">d</span><span class=\"o\">],</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons_ne_nil</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain_singleton</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hp₁</span><span class=\"o\">,</span> <span class=\"n\">hp₂</span><span class=\"o\">,</span> <span class=\"n\">hp₃</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">ih</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">d</span> <span class=\"bp\">::</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">cons_ne_nil</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">last_cons</span> <span class=\"bp\">_</span> <span class=\"n\">hp₁</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain_cons</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I put this together a while ago, I think you're using a different definition of graph but it might still be helpful</p>",
        "id": 192390901,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1585662156
    },
    {
        "content": "<p>In particular I defined <code>connected</code> as the reflexive transitive closure of <code>edge</code>, and showed that it's equivalent to having a path in the sense of <code>list.chain</code></p>",
        "id": 192391014,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1585662208
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> If you want a type of paths, you can define <code>path a b := {l // list.chain G.edge l a b}</code></p>",
        "id": 192391030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585662221
    },
    {
        "content": "<p>Ah. This definition makes a lot of sense for graphs without multiplicity</p>",
        "id": 192391481,
        "sender_full_name": "David Wärn",
        "timestamp": 1585662436
    },
    {
        "content": "<p>Oh, that's a good point. I think in the metamath version I had to define a path as an alternating sequence of edges and vertices</p>",
        "id": 192391656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585662515
    },
    {
        "content": "<p>If <code>G.edge</code> is not prop-valued, then probably your inductive type is the simplest way to define this in lean</p>",
        "id": 192392054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585662670
    },
    {
        "content": "<p>I guess the alternative would be to define the total type of edges, and a compatibility relation on it, and define a total type of paths using <code>list.chain</code> on this. I think it would make sense to prove that the inductive definition is equivalent to this</p>",
        "id": 192392380,
        "sender_full_name": "David Wärn",
        "timestamp": 1585662813
    },
    {
        "content": "<p>If you want a graph theory challenge, can you prove that a tree with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> vertices has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n-1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> edges?</p>",
        "id": 192396240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585664581
    },
    {
        "content": "<p>I leave it to Mario to tell us what I am asserting in the impossible case where the tree has 0 vertices.</p>",
        "id": 192396282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585664609
    },
    {
        "content": "<p>The empty tree has 37 edges... this was proven by Erdos several decades ago.</p>",
        "id": 192396391,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585664644
    },
    {
        "content": "<p>If you're a crazy algebraist, the answer to this problem is to say that a graph with <code>0</code> vertices is not a tree.</p>",
        "id": 192399585,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1585666151
    },
    {
        "content": "<p>Yes of course</p>",
        "id": 192399616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585666168
    },
    {
        "content": "<p>this is why it can have 37 edges</p>",
        "id": 192399642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585666180
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> just ran into the same issue in <a href=\"https://github.com/leanprover-community/mathlib/issues/2298\" title=\"https://github.com/leanprover-community/mathlib/issues/2298\">#2298</a> when trying to differentiate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">X^0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span>, and deciding that it was <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><mo>×</mo><msup><mi>X</mi><mrow><mn>0</mn><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mn>0</mn><mo>×</mo><msup><mi>X</mi><mn>37</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0\\times X^{0-1}=0\\times X^{37} = 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">0</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>.</p>",
        "id": 192399753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585666225
    },
    {
        "content": "<p>We don't have trees yet, but there's rooted trees, or \"arborescences\". At some point you should be able to prove that any tree can be rooted at any vertex to give an arborescence, and the edge-counting result should follow</p>",
        "id": 192400247,
        "sender_full_name": "David Wärn",
        "timestamp": 1585666437
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> <span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> I would love to know whether you can integrate your definitions of graphs with the stuff in <code>basic.lean</code>. If so, I think we might have stuff for a 1st PR.</p>",
        "id": 192420925,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585675069
    },
    {
        "content": "<p>I pushed some things to <code>arborescences.lean</code> a while ago that might be useful for proving existence of spanning tree. It uses the definition of <code>directed_multigraph</code> from <code>basic.lean</code></p>",
        "id": 192439440,
        "sender_full_name": "David Wärn",
        "timestamp": 1585683575
    },
    {
        "content": "<p>I finished a global framework of Shitov's proof. Now we just need to fill in some sorrys <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> .<br>\nAmong them a theorem by Erdos, saying that there exist finite graphs with arbitrary high girth and fractional chromatic number.</p>",
        "id": 192445022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585686457
    },
    {
        "content": "<p>I pushed a refactor of (multi)chromatic numbers. No new content, just slicker proofs. This comes at the expense of a new <code>to_mathlib</code> file, with all the stuff that I found was missing all over finset/fintype/function.embedding...</p>",
        "id": 192485804,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585720086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thanks, I'm taking a look right now!</p>",
        "id": 192485961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585720297
    },
    {
        "content": "<p>I think we should PR changes outside <code>graph_theory/</code> as soon as possible.</p>",
        "id": 192486028,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585720363
    },
    {
        "content": "<p>One of the gaps that needs to be filled in is the existence of the fractional chromatic number... I do not yet have a good idea how to do that.</p>",
        "id": 192486451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585720885
    },
    {
        "content": "<p>The only proof I know of this is via the linear programming definition of the fractional chromatic number...</p>",
        "id": 192486578,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585721027
    },
    {
        "content": "<p>and the observation that the vertices of a polyhedron cut out by rational inequalities have rational coordinates</p>",
        "id": 192486633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585721056
    },
    {
        "content": "<p>that seems like a lot of machinery we don't have yet</p>",
        "id": 192486636,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585721063
    },
    {
        "content": "<p>Is there an easy argument why it exists as a real number?</p>",
        "id": 192486651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585721090
    },
    {
        "content": "<p>there's an easy lower bound, take the inf?</p>",
        "id": 192486671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585721108
    },
    {
        "content": "<p>Right... of course <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 192486679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585721123
    },
    {
        "content": "<p>Regarding the <code>to_mathlib</code> file. I suggest whenever someone is bored (I realise I made the mess and should clean it up, but I can hope), we move these lemmas to their natural homes in mathlib, still in the <code>hedetniemi</code> branch.</p>",
        "id": 192486800,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585721261
    },
    {
        "content": "<p>Then we can make one or more PRs by checking out non <code>graph_theory</code> directories into new branches</p>",
        "id": 192486869,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585721289
    },
    {
        "content": "<p>But since mathlib moves fast, we better try to do this regularly. Also, big <code>to_mathlib</code> files never get PR'd (see perfectoid project...)</p>",
        "id": 192486903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585721376
    },
    {
        "content": "<p>Lol.... we have a bug: all fractional chromatic numbers are zero:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">is_frac_chromatic_number_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_frac_chromatic_number</span> <span class=\"n\">G</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">nonneg</span><span class=\"o\">),</span>\n  <span class=\"n\">suffices</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">nat_multicolouring</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">min</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_zero</span><span class=\"o\">,</span> <span class=\"n\">div_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_empty</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">disjoint</span> <span class=\"err\">∅</span> <span class=\"err\">∅</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">disjoint_self</span><span class=\"o\">,</span> <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192497811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585730373
    },
    {
        "content": "<p>I've pushed a bugfix</p>",
        "id": 192500187,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585731860
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> do you think it would be feasible to formalize Erdos' probabilistic method to show that there are graphs of large girth and small independence number?</p>",
        "id": 192503443,
        "sender_full_name": "David Wärn",
        "timestamp": 1585733987
    },
    {
        "content": "<p>I think it would be very interesting to try that. It's one of those methods where I don't see how to formalise it in a user-friendly way.</p>",
        "id": 192503675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585734110
    },
    {
        "content": "<p>For the record, for others interested in this, we're talking about papers like</p>\n<ul>\n<li><a href=\"https://www.cambridge.org/core/journals/canadian-journal-of-mathematics/article/graph-theory-and-probability/154EF813293BC7D0652C4CBCD9D18E84\" title=\"https://www.cambridge.org/core/journals/canadian-journal-of-mathematics/article/graph-theory-and-probability/154EF813293BC7D0652C4CBCD9D18E84\">https://www.cambridge.org/core/journals/canadian-journal-of-mathematics/article/graph-theory-and-probability/154EF813293BC7D0652C4CBCD9D18E84</a></li>\n<li><a href=\"https://www.renyi.hu/~p_erdos/1959-11.pdf\" title=\"https://www.renyi.hu/~p_erdos/1959-11.pdf\">https://www.renyi.hu/~p_erdos/1959-11.pdf</a></li>\n</ul>",
        "id": 192504023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585734299
    },
    {
        "content": "<p>I suppose there is a general question of how to deal with concrete random variables on a fixed probability space, and how to compute expectations. Something something monadic computation? Other than that the method relies on reasoning about rates of growth of various functions, and things like \"if this event has non-zero probability, then here's a point in the sample space where it happens\", or \"given <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi><mo stretchy=\"false\">(</mo><mi>X</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>E</mi><mo stretchy=\"false\">(</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">E(X) &gt; E(Y)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span></span></span></span>, here's a point in the sample space where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>&gt;</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">X &gt; Y</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>\"</p>",
        "id": 192532227,
        "sender_full_name": "David Wärn",
        "timestamp": 1585749778
    },
    {
        "content": "<p>I think it would be a lot of fun to make this usable</p>",
        "id": 192534670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585750646
    },
    {
        "content": "<p>We have something called the Giry monad. I've no clue if it would help in making a usable api here.</p>",
        "id": 192534723,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585750676
    },
    {
        "content": "<p>I always had the impression that the random graph method was really just using the language of probability theory rather than actually using any measure theory. It's just a way of explaining counting arguments in a way which is intuitive to humans.</p>",
        "id": 192555862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585758938
    },
    {
        "content": "<p>Well yes, all sets involved are finite and so everything is measurable</p>",
        "id": 192556905,
        "sender_full_name": "David Wärn",
        "timestamp": 1585759407
    },
    {
        "content": "<p>My guess is that the difficulty will be something like this: suppose you define a function F that takes a  graph on n vertices and returns the number of g-cycles. Then you define a probability measure on the set of graphs on n vertices (or a family of weights on the finite set if you like). How do you actually reason about the expectation of F(G)? You'll need to unfold the definition of F somehow, this time being careful about probabilities and expectations</p>",
        "id": 192557521,
        "sender_full_name": "David Wärn",
        "timestamp": 1585759666
    },
    {
        "content": "<p>Maybe this is the way to go. But maybe it's better to define F as a random variable (or probability distribution) to begin with, in a monadic context?</p>",
        "id": 192557832,
        "sender_full_name": "David Wärn",
        "timestamp": 1585759791
    },
    {
        "content": "<p>I've scrapped together an <a href=\"https://github.com/b-mehta/combinatorics/blob/graphs/src/lower_ramsey.lean\" title=\"https://github.com/b-mehta/combinatorics/blob/graphs/src/lower_ramsey.lean\">incredibly messy proof</a> for a ramsey lower bound (that is, R(s) &gt;= Omega(2^(s/2))) - there's one sorry in there but it should be just a calculation and i've sketched the idea in comments. The idea is exactly as Kevin says, I didn't use any ideas of probability, just counting the size of finsets - but the core idea is the standard probabilistic argument</p>",
        "id": 192559399,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1585760399
    },
    {
        "content": "<p>I personally feel that if you're doing an argument which involves probability on finite sets, you're better off just using counting arguments on finsets and removing all probability language, but this might be just because I've done a lot of stuff with finsets in lean</p>",
        "id": 192559937,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1585760579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, the lemma <code>whut</code> should just come from the fact that every k-colouring of <code>G.strong_prod (K_ n)</code> gives an (n,k)-multicolouring of G, by taking all the colours in a fibre.</p>",
        "id": 192628022,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585811763
    },
    {
        "content": "<p>I've stubbed this out in the branch, although something mysteriously doesn't typecheck, and there are some new sorries.</p>",
        "id": 192628051,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585811786
    },
    {
        "content": "<p>Fixed the typechecking issue.  All these predicates <code>is_chromatic_number G k</code> seem like more trouble than they're worth.</p>",
        "id": 192628859,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585812434
    },
    {
        "content": "<p>Maybe... I know that in the perfectoid project is was happy with <code>char_p R p</code> instead of <code>ring_char R</code>. The problem with the latter is that you will have <code>R → A → B</code> and you will need to rewrite along <code>ring_char R = ring_char A = ring_char B</code> all the time, and sometimes your motive will not be correct etc... So then it helps if you just have <code>p</code> everywhere.<br>\nBut maybe this is less of an issue with chromatic numbers.</p>",
        "id": 192629467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585812950
    },
    {
        "content": "<p>Also, thanks for sketching a proof of <code>whut</code>, I'll look at it as soon as my github inbox is empty</p>",
        "id": 192629518,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585812977
    },
    {
        "content": "<p><span aria-label=\"fencing\" class=\"emoji emoji-1f93a\" role=\"img\" title=\"fencing\">:fencing:</span></p>",
        "id": 192631268,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585814310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> The reason is again <code>classical.decidable*</code></p>",
        "id": 192636356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585817516
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>@multicolouring V\n        (fin\n         (@chromatic_number (V × fin n) (@prod.fintype V (fin n) _inst_1 (fin.fintype n))\n          (@strong_prod V (fin n) G (K_ n))\n          _))\n        (λ\n         (a b :\n          fin\n          (@chromatic_number (V × fin n) (@prod.fintype V (fin n) _inst_1 (fin.fintype n))\n           (@strong_prod V (fin n) G (K_ n))\n           _)), classical.prop_decidable (a = b))\n        n\n        G\n</pre></div>\n\n\n<p>versus</p>\n<div class=\"codehilite\"><pre><span></span>@multicolouring V\n        (fin\n         (@chromatic_number (V × fin n) (@prod.fintype V (fin n) _inst_1 (fin.fintype n))\n          (@strong_prod V (fin n) G (K_ n))\n          _))\n        (λ\n         (a b :\n          fin\n          (@chromatic_number (V × fin n) (@prod.fintype V (fin n) _inst_1 (fin.fintype n))\n           (@strong_prod V (fin n) G (K_ n))\n           _)),\n         fin.decidable_eq\n         (@chromatic_number (V × fin n) (@prod.fintype V (fin n) _inst_1 (fin.fintype n))\n          (@strong_prod V (fin n) G (K_ n))\n          _)\n         a\n         b)\n        n\n        G\n</pre></div>",
        "id": 192636466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585817557
    },
    {
        "content": "<p>If you use</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hn</span><span class=\"bp\">.</span><span class=\"n\">col_exists</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">mc</span> <span class=\"o\">:=</span> <span class=\"n\">multicolouring_of_strong_prod_K_colouring</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">mc&#39;</span> <span class=\"o\">:</span> <span class=\"n\">nat_multicolouring</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">delta</span> <span class=\"n\">nat_multicolouring</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mc</span> <span class=\"o\">}</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hχ</span><span class=\"bp\">.</span><span class=\"n\">min</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>then the error will be very clear.</p>",
        "id": 192636683,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585817700
    },
    {
        "content": "<p>And upsetting.</p>",
        "id": 192636688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585817704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> So... what do we do with</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"bp\">@</span><span class=\"n\">multicolouring</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"n\">n</span> <span class=\"n\">G</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">multicolouring</span> <span class=\"n\">V</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">fin</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span> <span class=\"n\">k</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">G</span>\n</pre></div>",
        "id": 192637372,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585818092
    },
    {
        "content": "<p>Just make everything classical?</p>",
        "id": 192637389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585818101
    },
    {
        "content": "<p>And ignore the fact that people might want to use decidability in the proof of Königsberg?</p>",
        "id": 192637454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585818123
    },
    {
        "content": "<p>Ok, I've fixed this issue. (For now...)</p>",
        "id": 192638210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585818490
    },
    {
        "content": "<p>See the commit I pushed.</p>",
        "id": 192638334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585818568
    },
    {
        "content": "<p>I'm confused. What did you fix? I thought I'd fixed the typechecking problem already.</p>",
        "id": 192638373,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585818593
    },
    {
        "content": "<p>Ooh, wait, now I see there is a conflict...</p>",
        "id": 192638487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585818629
    },
    {
        "content": "<p>I see how to resolve the conflict, but I'm not sure if you're in the midst of it already.</p>",
        "id": 192638851,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585818812
    },
    {
        "content": "<p>Then you can resolve the conflict that arises from the resolution of conflicts</p>",
        "id": 192638959,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585818848
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I've pushed</p>",
        "id": 192639044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585818894
    },
    {
        "content": "<p>Now there is no <code>convert</code> anymore</p>",
        "id": 192639086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585818929
    },
    {
        "content": "<p>but there's also no proof?</p>",
        "id": 192639107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585818950
    },
    {
        "content": "<p>it looks like in what you pushed you make less progress on the proof that we used to</p>",
        "id": 192639184,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585818976
    },
    {
        "content": "<p>oh, my mistake, ignore me</p>",
        "id": 192639269,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585819036
    },
    {
        "content": "<p>your push is great</p>",
        "id": 192639274,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585819038
    },
    {
        "content": "<p>so great I couldn't even see where the proof was happening :-)</p>",
        "id": 192639295,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585819055
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">have</span> <span class=\"n\">npos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hn</span><span class=\"bp\">.</span><span class=\"n\">col_exists</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">mc</span> <span class=\"o\">:=</span> <span class=\"n\">multicolouring_of_strong_prod_K_colouring</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hχ</span><span class=\"bp\">.</span><span class=\"n\">min</span> <span class=\"n\">mc</span> <span class=\"n\">npos</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">le_div_iff</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption_mod_cast</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 192639428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585819109
    },
    {
        "content": "<p>Now we only need to argue that <code>n</code> is positive</p>",
        "id": 192639442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585819118
    },
    {
        "content": "<p>So what's going on with <code>helpme</code>?</p>",
        "id": 192639453,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585819130
    },
    {
        "content": "<p>I think Shitov is not very careful there, but probably taking a slightly bigger <code>c</code> or something will make things work. I haven't thought about the issue yet.</p>",
        "id": 192639498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585819167
    },
    {
        "content": "<p>In Erdos's theorem, why do you introduce the <code>n</code>?</p>",
        "id": 192639625,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585819226
    },
    {
        "content": "<p>Sorry, I meant a bigger <code>q</code></p>",
        "id": 192639653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585819252
    },
    {
        "content": "<p>Oh, I see, <code>girth</code> is only a predicate, not a function.</p>",
        "id": 192639660,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585819260
    },
    {
        "content": "<p>I'm really unconvinced by all these predicates.</p>",
        "id": 192639671,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585819269
    },
    {
        "content": "<p>I understand. For <code>char_p</code> it was really helpful. Here maybe less. I don't know.</p>",
        "id": 192639777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585819324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Done</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Scott: @Johan, why all these predicates?</span>\n<span class=\"c1\">-- Why not just write `frac_chromatic_number G * n ≤ chromatic_number (G.strong_prod (K_ n))`</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">whut</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">χ</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">is_chromatic_number</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">strong_prod</span> <span class=\"o\">(</span><span class=\"n\">K_</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hχ</span> <span class=\"o\">:</span> <span class=\"n\">is_frac_chromatic_number</span> <span class=\"n\">G</span> <span class=\"n\">χ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">χ</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hk</span><span class=\"bp\">.</span><span class=\"n\">col_exists</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">mc</span> <span class=\"o\">:=</span> <span class=\"n\">multicolouring_of_strong_prod_K_colouring</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hχ</span><span class=\"bp\">.</span><span class=\"n\">min</span> <span class=\"n\">mc</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">le_div_iff</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption_mod_cast</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192640288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585819726
    },
    {
        "content": "<p>Pushed</p>",
        "id": 192640413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585819806
    },
    {
        "content": "<p>So... if I can take the current framework and de-predicate it, that would be okay? The remaining holes in the proof have nothing to do with the predicate stuff, right?</p>",
        "id": 192640556,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585819921
    },
    {
        "content": "<p>I really don't know what's happening with <code>helpme</code>, still. It looks alarming, but I have very little sense of the overall proof at this point.</p>",
        "id": 192640670,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585819977
    },
    {
        "content": "<p>Another design question: can't we just bundle <code>is_loopless</code> into a <code>simple_graph</code>?</p>",
        "id": 192640896,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585820095
    },
    {
        "content": "<p>It feels painful having to carry around all these <code>loopless</code> facts.</p>",
        "id": 192640927,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585820114
    },
    {
        "content": "<p>and just setup the whole chromatic number story for loopless graphs (the only ones for which the story has any interesting, anyway)?</p>",
        "id": 192640994,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585820154
    },
    {
        "content": "<p>Yup, bundling <code>is_loopless</code> seems a good move</p>",
        "id": 192641604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585820503
    },
    {
        "content": "<p>If you depredicate everything, that's fine with me. If it turns out that it makes it really annoying to talk about a family of graphs whose chromatic number is equal to the characteristic of a certain ring, I'll know where to find you <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 192641740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585820586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I'll be having lunch pretty soon, so you can do whatever you want. I was planning to move lots of facts to their own files. But if you want to clean things up now, that's fine with me.</p>",
        "id": 192641857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585820662
    },
    {
        "content": "<p>Okay. Ping me when you get back from lunch and I'll hand the files back over to you. I'll try to commit often in any case.</p>",
        "id": 192641895,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585820687
    },
    {
        "content": "<p>I'll think about the <code>helpme</code> issue. It might be that we just want to apply something with <code>q+1</code> instead of <code>q</code>, and then everythings is fine again.</p>",
        "id": 192641954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585820740
    },
    {
        "content": "<p>I'm under the impression that \"girth\" is only ever used in the phrase \"the girth is at least X\", i.e. \"there is no cycle of length &lt; X\". Would it make sense to just have a predicate for this, something like<code>girth_is_at_least G k : Prop</code>?</p>",
        "id": 192642986,
        "sender_full_name": "David Wärn",
        "timestamp": 1585821246
    },
    {
        "content": "<p>Re \"only ever used\". Do you mean in this project, or in maths in general?</p>",
        "id": 192643056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585821289
    },
    {
        "content": "<p>Certainly in this project, and afaik in graph theory in general</p>",
        "id": 192644249,
        "sender_full_name": "David Wärn",
        "timestamp": 1585821926
    },
    {
        "content": "<p>\"large girth\" is an efficient way of saying \"there's no short cycle\"</p>",
        "id": 192644667,
        "sender_full_name": "David Wärn",
        "timestamp": 1585822194
    },
    {
        "content": "<p>In particular an acyclic graph should have very large girth (infinite according to Wikipedia). If I'm supposed to prove that a graph has girth at least 37, then I  shouldn't have to exhibit a cycle</p>",
        "id": 192645452,
        "sender_full_name": "David Wärn",
        "timestamp": 1585822694
    },
    {
        "content": "<p>Similar points could be made about chromatic number</p>",
        "id": 192645465,
        "sender_full_name": "David Wärn",
        "timestamp": 1585822710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> In the current setup, I'm not sure if you have to exhibit a cycle either...</p>",
        "id": 192648808,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585824994
    },
    {
        "content": "<p>ugh, I'm getting stuck on something</p>",
        "id": 192649477,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585825432
    },
    {
        "content": "<p>I've made a big mess, not sure if I should push...</p>",
        "id": 192649500,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585825442
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 192649607,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585825516
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 192649624,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585825538
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 192649762,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585825661
    },
    {
        "content": "<p>my intuition for ihom directly is very poor</p>",
        "id": 192649771,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585825674
    },
    {
        "content": "<p>Why do I want this? I rewrote <code>chromatic</code> so it was all about <code>simple_graph</code>. That worked fine, in fact everything became marginally nicer.</p>",
        "id": 192649858,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585825728
    },
    {
        "content": "<p>But now the <code>suited</code> stuff at the top of Hedetniemi doesn't typecheck, because I don't know that <code>G.ihom (complete _)</code> is simple, so it doesn't even make sense to talk about colourings of it.</p>",
        "id": 192649895,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585825776
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 192651083,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585826690
    },
    {
        "content": "<p>I'm really confused about what's going on. <code>G.ihom H</code> has a self-loop at every function which is a graph homomorphism. So if we're looking at <code>G.ihom (K_ n)</code>, there is a self loop somewhere precisely if G is n-colourable.</p>",
        "id": 192651697,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585827193
    },
    {
        "content": "<p>I think I am going to declare my attempt to bundle <code>simple_graph</code> a failure. :-(</p>",
        "id": 192654122,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585828759
    },
    {
        "content": "<p>Right... <code>G.ihom H</code> will be simple if and only if <code>card H &lt; chromatic G</code></p>",
        "id": 192654959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585829185
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Hedetniemi/near/192648808\" title=\"#narrow/stream/116395-maths/topic/Hedetniemi/near/192648808\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130377\">David Wärn</span> In the current setup, I'm not sure if you have to exhibit a cycle either...</p>\n</blockquote>\n<p>You don't if the current setup is to define \"large girth\" as \"for any g s.t. g is the girth, g is large\" (this seems a bit perverse to me, but maybe it works the best)</p>",
        "id": 192655071,
        "sender_full_name": "David Wärn",
        "timestamp": 1585829272
    },
    {
        "content": "<p>Do you ever use looplessness in the argument? Isn't it just a nice feature of the counter-example?</p>",
        "id": 192655180,
        "sender_full_name": "David Wärn",
        "timestamp": 1585829331
    },
    {
        "content": "<p>I guess it's a nice feature, hence maybe worth adding?</p>",
        "id": 192655941,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585829808
    },
    {
        "content": "<p>Of course, it's definitely worth mentioning. I was just confused about how it's relevant for the arguments</p>",
        "id": 192657009,
        "sender_full_name": "David Wärn",
        "timestamp": 1585830399
    },
    {
        "content": "<p>I'm starting to switch things over to using <code>at_least</code> predicates</p>",
        "id": 192657991,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585830908
    },
    {
        "content": "<p>Maybe the following is also a relevant source: <a href=\"https://arxiv.org/pdf/1906.06783.pdf\" title=\"https://arxiv.org/pdf/1906.06783.pdf\">https://arxiv.org/pdf/1906.06783.pdf</a></p>",
        "id": 192658643,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585831192
    },
    {
        "content": "<p>Some computations seem to have a bit more details</p>",
        "id": 192658716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585831203
    },
    {
        "content": "<p>And it seems that without much extra work we can get a stronger result</p>",
        "id": 192658746,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585831217
    },
    {
        "content": "<p>Okay, I've found a route that avoids using the incorrect lemma</p>",
        "id": 192663843,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585833669
    },
    {
        "content": "<p>it requires applying Erdos' theorem with 4.1 instead of 3.1,</p>",
        "id": 192663883,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585833687
    },
    {
        "content": "<p>Ok thanks for figuring this out!</p>",
        "id": 192664714,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585834069
    },
    {
        "content": "<p>Some hack like that must have worked</p>",
        "id": 192664733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585834081
    },
    {
        "content": "<p>I just didn't yet look into which knob I had to turn and fiddle with</p>",
        "id": 192664813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585834104
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Here's the sorry in <code>helpme'</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">helpme&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⌈</span><span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"err\">⌉</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"err\">⌈</span><span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">q</span><span class=\"err\">⌉</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ceil_lt_add_one</span> <span class=\"bp\">_</span>\n               <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"bp\">+</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">add_le_add_left</span><span class=\"o\">,</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n               <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n</pre></div>",
        "id": 192665702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585834503
    },
    {
        "content": "<p>I'm done on this for tonight</p>",
        "id": 192665735,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585834520
    },
    {
        "content": "<p>We should now probably also rename some of these (-;</p>",
        "id": 192665738,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585834523
    },
    {
        "content": "<p>Ok! Thanks for all you've done so far!</p>",
        "id": 192665756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585834534
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Have you pushed everything? Or should I wait for a second?</p>",
        "id": 192665877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585834586
    },
    {
        "content": "<p>all pushed</p>",
        "id": 192665912,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585834602
    },
    {
        "content": "<p>sorry it is a mess</p>",
        "id": 192665918,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585834605
    },
    {
        "content": "<p>Ooh, I think I was the one to start the mess</p>",
        "id": 192665949,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585834621
    },
    {
        "content": "<p>and there are new sorries in a bunch of places, hopefully all straightforward, but I was getting tired</p>",
        "id": 192665951,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585834622
    },
    {
        "content": "<p>where's the git?</p>",
        "id": 192665989,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585834652
    },
    {
        "content": "<p><code>hedetniemi</code></p>",
        "id": 192666032,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585834677
    },
    {
        "content": "<p>branch <code>hedetniemi</code></p>",
        "id": 192666035,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585834679
    },
    {
        "content": "<p>(I just pushed one more comment)</p>",
        "id": 192666088,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585834689
    },
    {
        "content": "<p>I also pushed</p>",
        "id": 192666137,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585834730
    },
    {
        "content": "<p>what language is <code>hedetniemi</code>?</p>",
        "id": 192666291,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585834803
    },
    {
        "content": "<p>It's the name of a mathematician</p>",
        "id": 192666363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585834846
    },
    {
        "content": "<p>Lean</p>",
        "id": 192666370,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585834848
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span><span class=\"bp\">.</span><span class=\"n\">ne_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">mt</span> <span class=\"err\">$</span> <span class=\"n\">congr_arg</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"bp\">.</span><span class=\"n\">ne</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">coe_monotone</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">lt_iff_le_and_ne</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"err\">⊢</span><span class=\"bp\">;</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_le</span><span class=\"o\">,</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_injective</span><span class=\"bp\">.</span><span class=\"n\">ne_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 192666698,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585835026
    },
    {
        "content": "<p>yeah, but what language is this name in</p>",
        "id": 192666709,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585835032
    },
    {
        "content": "<p>it doesn't sound like any language I've heard of</p>",
        "id": 192666740,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585835041
    },
    {
        "content": "<p>maybe it's Polish</p>",
        "id": 192666784,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585835047
    },
    {
        "content": "<p>Data on the internet about this seems to be scant. I suspect it is of Finnish origin</p>",
        "id": 192667260,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585835287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Wanna contribute? I just pushed some more sorry fixes.</p>",
        "id": 192667887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585835602
    },
    {
        "content": "<p>\"niemi\" is a Finnish noun meaning \"cape (form of land near lake or sea), (small) peninsula, ness\"</p>",
        "id": 192668328,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585835780
    },
    {
        "content": "<p>so maybe you're right</p>",
        "id": 192668335,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585835784
    },
    {
        "content": "<p>I've pushed lots of stuff into other files.</p>",
        "id": 192673848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585838117
    },
    {
        "content": "<p>And fixed some sorrys.</p>",
        "id": 192673866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585838124
    },
    {
        "content": "<p>The remaining stuff has actual mathematical content</p>",
        "id": 192673885,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585838134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Hedetniemi/near/192673848\" title=\"#narrow/stream/116395-maths/topic/Hedetniemi/near/192673848\">said</a>:</p>\n<blockquote>\n<p>I've pushed lots of stuff into other files.</p>\n</blockquote>\n<p>Did you forget to add <code>frac_chromatic_number.lean</code>?</p>",
        "id": 192676491,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1585839213
    },
    {
        "content": "<p>Whooops, I forgot all the new files <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 192678523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585839972
    },
    {
        "content": "<p>Pushed</p>",
        "id": 192678533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585839975
    },
    {
        "content": "<p>I pushed a cleaner version of the proof that for any directed graph with a vertex <code>root</code> s.t. every vertex has a path to <code>root</code>, there is a subgraph where every vertex has a unique path to <code>root</code></p>",
        "id": 192692551,
        "sender_full_name": "David Wärn",
        "timestamp": 1585845053
    },
    {
        "content": "<p>It uses this definition: <code>def subgraph := Π a b, set (G.edge a b)</code>. Is this sensible? It doesn't seem to typecheck if the edge-sets are Props</p>",
        "id": 192692663,
        "sender_full_name": "David Wärn",
        "timestamp": 1585845098
    },
    {
        "content": "<p>I installed some <code>pnat</code>s in places, hopefully it is okay.</p>",
        "id": 192768210,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585900343
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thanks!</p>",
        "id": 192778280,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585906175
    },
    {
        "content": "<p>I've added independent sets, and shown <code>|V| ≤ \\alpha(G) * \\chi(G)</code></p>",
        "id": 192778329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585906197
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I'm trying to prove <code>graph.ext</code>... but getting stuck on ugly <code>==</code>s.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"n\">G₁</span> <span class=\"n\">G₂</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₁</span><span class=\"o\">]</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₂</span><span class=\"o\">]</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">G₁</span> <span class=\"bp\">=</span> <span class=\"n\">G₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">G₁</span> <span class=\"k\">with</span> <span class=\"n\">G₁</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">G₂</span> <span class=\"k\">with</span> <span class=\"n\">G₂</span><span class=\"o\">},</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192813983,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585925005
    },
    {
        "content": "<p>the technique for getting rid of <code>==</code> is to case on any equality that is preventing the heterogeneous equality from being homogeneous</p>",
        "id": 192814241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585925092
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> no equalities in my context <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">G₁</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">G₁_inv</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">G₁</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">≃</span> <span class=\"n\">G₁</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">G₁_symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">G₁</span><span class=\"o\">,</span>\n<span class=\"n\">G₂</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n<span class=\"n\">G₂_inv</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">G₂</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">≃</span> <span class=\"n\">G₂</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"n\">G₂_symm</span> <span class=\"o\">:</span> <span class=\"n\">symmetric</span> <span class=\"n\">G₂</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">G₁</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"n\">G₂</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"err\">⊢</span> <span class=\"n\">G₁_inv</span> <span class=\"bp\">==</span> <span class=\"n\">G₂_inv</span>\n</pre></div>",
        "id": 192815170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585925393
    },
    {
        "content": "<p>Use propext on <code>h</code>?</p>",
        "id": 192815420,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585925471
    },
    {
        "content": "<p>But that's a <code>forall</code> type, right?</p>",
        "id": 192815737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585925581
    },
    {
        "content": "<p>Use funext too</p>",
        "id": 192815949,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585925651
    },
    {
        "content": "<p>In fact you already proved this earlier I think (<code>{ ext x y, exact h x y, }</code>)</p>",
        "id": 192816031,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585925679
    },
    {
        "content": "<p>Yeah, actually the equality in that proof is the one you want to case on</p>",
        "id": 192816148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585925718
    },
    {
        "content": "<p>Aha</p>",
        "id": 192816303,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585925765
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G₁</span> <span class=\"n\">G₂</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₁</span><span class=\"o\">]</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">~</span><span class=\"o\">[</span><span class=\"n\">G₂</span><span class=\"o\">]</span> <span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">G₁</span> <span class=\"bp\">=</span> <span class=\"n\">G₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">cases</span> <span class=\"n\">G₁</span> <span class=\"k\">with</span> <span class=\"n\">G₁</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">G₂</span> <span class=\"k\">with</span> <span class=\"n\">G₂</span><span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">G₁</span> <span class=\"bp\">=</span> <span class=\"n\">G₂</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span>\n  <span class=\"n\">funext</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192816339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585925781
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 192817689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585926251
    },
    {
        "content": "<p>I've merged master into <code>hedetniemi</code>.</p>",
        "id": 193191787,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586268145
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> I think that <code>cycle</code> should play nice with <code>path</code>. I'll try to merge this stuff. If you have good ideas, please let me know</p>",
        "id": 193304187,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586344497
    },
    {
        "content": "<p>You'd probably want to start by defining an equivalence between <code>path</code> and homs from \"the path of length n\"</p>",
        "id": 193674979,
        "sender_full_name": "David Wärn",
        "timestamp": 1586632462
    },
    {
        "content": "<p>We also want a notion of homomorphisms for <code>directed_multigraph</code></p>",
        "id": 193674988,
        "sender_full_name": "David Wärn",
        "timestamp": 1586632497
    },
    {
        "content": "<p>Have you done any of this yet?</p>",
        "id": 193675009,
        "sender_full_name": "David Wärn",
        "timestamp": 1586632534
    },
    {
        "content": "<p>The theorem you're trying to prove is about a product of graphs, right?</p>",
        "id": 193675059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586632564
    },
    {
        "content": "<p>Will it be the categorical product, if you define morphisms?</p>",
        "id": 193675069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586632608
    },
    {
        "content": "<p>He's trying to disprove a conjecture about products of graphs I think</p>",
        "id": 193675071,
        "sender_full_name": "David Wärn",
        "timestamp": 1586632620
    },
    {
        "content": "<p>Yes, so the theorem you're trying to prove is that the conjecture is false.</p>",
        "id": 193675077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586632643
    },
    {
        "content": "<p>We've shown that it's the categorical product in the category of simple graphs</p>",
        "id": 193675080,
        "sender_full_name": "David Wärn",
        "timestamp": 1586632648
    },
    {
        "content": "<p>Oh I see, yes the conjecture was just about graphs</p>",
        "id": 193675090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586632681
    },
    {
        "content": "<p>Yes so I think currently we know a lot about <code>graph</code>s, i.e. undirected graphs with no repeated edges, but we don't have a notion of morphism for <code>directed_multigraph</code>.</p>",
        "id": 193675403,
        "sender_full_name": "David Wärn",
        "timestamp": 1586633147
    },
    {
        "content": "<p>Anyway, I tried to merge master into <code>hedetniemi</code>, but it seems like there are a few conflicts that I'm not sure how to resolve. (one thing that should be easy to fix is that the graph is now implicit in <code>path.nil</code>) <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , could you look into this?</p>",
        "id": 193675659,
        "sender_full_name": "David Wärn",
        "timestamp": 1586633431
    },
    {
        "content": "<p>I'll see if I can find some time. But probably not before monday <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 193675963,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586633820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> I don't see any conflicts...</p>",
        "id": 193676312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586634282
    },
    {
        "content": "<p>I merged latest master and pushed</p>",
        "id": 193676389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586634372
    },
    {
        "content": "<p>Sorry, I meant that code didn't seem to compile, not that there were conflicts. I guess it should be easy to fix anyway</p>",
        "id": 193676634,
        "sender_full_name": "David Wärn",
        "timestamp": 1586634725
    },
    {
        "content": "<p>Aha... well I agree that there is probably quite a bit of broken code... I tried to experiment with random graphs. So far it was a failure.</p>",
        "id": 193676854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586635122
    },
    {
        "content": "<p>Maybe we should try to flesh out a more stable part of the code, and move that to a different branch. I think there is stuff that is ready for a PR</p>",
        "id": 193676865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586635162
    },
    {
        "content": "<p>But I agree that things like <code>hom</code> should (first) be generalised</p>",
        "id": 193676880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586635175
    },
    {
        "content": "<p>That sounds like a good idea</p>",
        "id": 193676958,
        "sender_full_name": "David Wärn",
        "timestamp": 1586635242
    },
    {
        "content": "<p>For what it's worth, there's been some improvement in the bounds: <a href=\"https://arxiv.org/abs/2004.09028\" title=\"https://arxiv.org/abs/2004.09028\">https://arxiv.org/abs/2004.09028</a>. 7pages + references</p>",
        "id": 194760452,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1587444264
    },
    {
        "content": "<p>Thanks for the pointer!</p>",
        "id": 194760843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587444974
    },
    {
        "content": "<p>Sounds like it is now in Martijn Heule's territory...</p>",
        "id": 194760876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587445049
    },
    {
        "content": "<p>Out of interest, how's this going?</p>",
        "id": 195102678,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1587667395
    },
    {
        "content": "<p>It's been dormant...</p>",
        "id": 195102896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587667488
    },
    {
        "content": "<p>Too many other stuff going on <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 195102918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587667501
    }
]