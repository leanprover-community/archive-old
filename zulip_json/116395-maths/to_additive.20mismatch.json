[
    {
        "content": "<p>This is a little annoying: <code>to_additive</code> fails because it can't unify <code>x - y</code> with <code>x + -y</code>. If I change the definition of <code>conj</code> in <code>add_group_filter_basis</code> to <code>x₀+x+-x₀</code> then it works, but that seems ugly. Does anyone know a cleaner way of handling this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.algebra.group</span>\n\n<span class=\"sd\">/-- An alternative characterization of a `topological_add_group`, given by</span>\n<span class=\"sd\">  axiomatizing properties of a filter basis for the neighborhood filter at `0`. -/</span>\n<span class=\"kd\">class</span> <span class=\"n\">add_group_filter_basis</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">filter_basis</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span><span class=\"o\">},</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span><span class=\"o\">},</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">+</span> <span class=\"n\">V</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span><span class=\"o\">},</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x₀</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"bp\">-</span><span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n\n<span class=\"sd\">/-- An alternative characterization of a `topological_group` structure, given by</span>\n<span class=\"sd\">  axiomatizing properties of a filter basis for the neighborhood filter at `1`. -/</span>\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">class</span> <span class=\"n\">group_filter_basis</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">filter_basis</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span><span class=\"o\">},</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span><span class=\"o\">},</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">*</span> <span class=\"n\">V</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">U</span><span class=\"o\">},</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">conj</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"n\">sets</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">⊆</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x₀</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x₀</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">group_filter_basis.has_mem</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">group_filter_basis</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f.sets</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"n\">add_group_filter_basis.has_mem</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">add_group_filter_basis</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f.sets</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">@[to_additive]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_blah</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">basis</span><span class=\"o\">:</span> <span class=\"n\">group_filter_basis</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">W</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hW</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">∈</span> <span class=\"n\">basis</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">true</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">group_filter_basis.conj</span> <span class=\"n\">g</span> <span class=\"n\">W</span> <span class=\"n\">hW</span><span class=\"o\">,</span>\n  <span class=\"n\">trivial</span>\n<span class=\"kd\">end</span>\n<span class=\"sd\">/--</span>\n<span class=\"sd\">type mismatch at application</span>\n<span class=\"sd\">  (add_group_filter_basis.conj g W hW).dcases_on</span>\n<span class=\"sd\">term</span>\n<span class=\"sd\">  add_group_filter_basis.conj g W hW</span>\n<span class=\"sd\">has type</span>\n<span class=\"sd\">  ∃ (V : set G) (H : V ∈ add_group_filter_basis.to_filter_basis.sets), V ⊆ (λ (x : G), g + x - g) ⁻¹' W</span>\n<span class=\"sd\">but is expected to have type</span>\n<span class=\"sd\">  ∃ (V : set G) (H : V ∈ add_group_filter_basis.to_filter_basis.sets), V ⊆ (λ (x : G), g + x + -g) ⁻¹' W -/</span>\n</code></pre></div>",
        "id": 230006003,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1615544646
    },
    {
        "content": "<p>So your issue is that multiplicatively <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>h</mi><msup><mi>g</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">ghg^{-1}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span> looks nice but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mi>h</mi><mi mathvariant=\"normal\">/</mi><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">gh/g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">h</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> looks odd because who does division in groups -- they're not in general commutative. Conversely <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>−</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a+b-a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> looks nice but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a+b+(-a)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span></span></span> looks odd because addition is always commutative so subtraction is far more natural and useful than the weird negation function.</p>",
        "id": 230009185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615546271
    },
    {
        "content": "<p>Yep exactly</p>",
        "id": 230009360,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1615546351
    },
    {
        "content": "<p>I guess I could just change it to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a + b + (-a)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span></span></span>, but I hope this won't cause weird errors down the line</p>",
        "id": 230009471,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1615546413
    },
    {
        "content": "<p>If you made a <code>conj a b</code> and <code>add_conj a b</code> API, then the actual definition won't matter any more</p>",
        "id": 230011616,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615547477
    },
    {
        "content": "<p>Then you can have <code>conj</code> defined with <code>inv</code> and <code>add_conj</code> defined with <code>neg</code>, but as long as you don't unfold it once you've made the API then <code>to_additive</code> won't care</p>",
        "id": 230011719,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615547523
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_aut.conj\">docs#mul_aut.conj</a> but no add_aut.conj right now</p>",
        "id": 230011782,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615547550
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 230020076,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1615551780
    },
    {
        "content": "<p>Sorry ignore that</p>",
        "id": 230020894,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1615552213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/to_additive.20mismatch/near/230011782\">said</a>:</p>\n<blockquote>\n<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_aut.conj\">docs#mul_aut.conj</a> but no add_aut.conj right now</p>\n</blockquote>\n<p>Ah right. I tried adding <code>add_aut.conj</code> but it's a bit awkward because <code>add_aut A</code> is a <code>group</code> and not an <code>add_group</code>...</p>",
        "id": 230023923,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1615553731
    },
    {
        "content": "<p>Is this a sensible thing to do?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">conj</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">add_aut</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 230026648,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1615555044
    },
    {
        "content": "<p>Proving <code>map_mul'</code> and <code>map_one'</code> seems to be a headache</p>",
        "id": 230026688,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1615555072
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/to_additive.20mismatch/near/230011616\">said</a>:</p>\n<blockquote>\n<p>If you made a <code>conj a b</code> and <code>add_conj a b</code> API, then the actual definition won't matter any more</p>\n</blockquote>\n<p>I would even go as far as putting <code>@[to_additive]</code> on <code>def conj (a b) := a * b * a⁻¹</code>, and a pair of lemmas <code>conj_eq_mul_mul_inv</code> and <code>conj_eq_mul_div</code>. Just let the user choose between the two ways to write it.</p>",
        "id": 230027107,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615555271
    },
    {
        "content": "<p>Perhaps even simp lemmas rewriting <code>a * b * a\\-1 = conj a b</code> and <code>a * b / a = conj a b</code> (with the caveat that you would need to copy the whole <code>group</code> simp API as well).</p>",
        "id": 230027305,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615555369
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"235423\">Ashwin Iyengar</span> <a href=\"#narrow/stream/116395-maths/topic/to_additive.20mismatch/near/230026648\">said</a>:</p>\n<blockquote>\n<p>Is this a sensible thing to do?</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">conj</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">add_aut</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I think you'd have a better time with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add_aut.conj</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">multiplicative</span> <span class=\"n\">G</span> <span class=\"bp\">→*</span> <span class=\"n\">add_aut</span> <span class=\"n\">G</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">add_aut.conj</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">add_aut</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 230029845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615556549
    },
    {
        "content": "<p>This seems to work out alright:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">additive.has_coe_to_fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_to_fun</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">has_coe_to_fun.F</span> <span class=\"n\">a.to_mul</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">has_coe_to_fun.coe</span> <span class=\"n\">a.to_mul</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">add_aut.conj</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">add_aut</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">additive.of_mul</span> <span class=\"o\">(</span><span class=\"n\">add_aut</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">add_aut.conj</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 230031665,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615557323
    },
    {
        "content": "<p>Perhaps <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> has a feeling for whether <code>additive.has_coe_to_fun</code> is a reasonable thing to exist</p>",
        "id": 230031713,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615557343
    },
    {
        "content": "<p>Which way should the simp lemma go?  <code>f x = to_mul f x</code>?</p>",
        "id": 230033328,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615557955
    },
    {
        "content": "<p>Do you mean<code>f x = (to_mul f) x</code>?</p>",
        "id": 230041766,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615560977
    },
    {
        "content": "<p>I can't even work out how to state that lemma</p>",
        "id": 230042257,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615561170
    },
    {
        "content": "<p>This seems to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">has_coe_to_fun.simps.coe</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_to_fun</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_coe_to_fun.F</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">coe_fn</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">additive.has_coe_to_fun</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_coe_to_fun</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">has_coe_to_fun.F</span> <span class=\"n\">a.to_mul</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">coe_fn</span> <span class=\"n\">a.to_mul</span><span class=\"o\">⟩</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">additive.has_coe_to_fun_coe</span>\n<span class=\"c1\">-- additive.has_coe_to_fun_coe : ∀ (a : additive ?M_1), ⇑a = ⇑(⇑additive.to_mul a)</span>\n</code></pre></div>",
        "id": 230042978,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615561392
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I'm having trouble proving the last <code>map_add'</code> in your suggestion, it's having trouble figuring out that it needs to use <code>add_aut.mul_apply</code> with the additive notation</p>",
        "id": 230043849,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1615561661
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- group conjugation as a group homomorphism into the automorphism group.</span>\n<span class=\"sd\">  `conj g h = g + h - g` -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">conj</span> <span class=\"o\">[</span><span class=\"n\">add_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→+</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">add_aut</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">additive.of_mul</span> <span class=\"o\">(</span><span class=\"n\">add_aut</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">h</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">g</span> <span class=\"bp\">+</span> <span class=\"n\">h</span> <span class=\"bp\">+</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n    <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_assoc</span><span class=\"o\">,</span> <span class=\"n\">sub_eq_add_neg</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"c1\">-- }λ _ _, by ext; simp [add_assoc, sub_eq_add_neg] }</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simpa</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 230043961,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1615561692
    },
    {
        "content": "<p>Do I need to somehow unfold <code>additive.has_add</code>?</p>",
        "id": 230044080,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1615561737
    },
    {
        "content": "<p>Where did the <code>@additive.of_mul (add_aut G)</code> line go?</p>",
        "id": 230044155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615561766
    },
    {
        "content": "<p>oh whoops</p>",
        "id": 230044243,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1615561794
    },
    {
        "content": "<p>Still doesn't simp automatically with that line though</p>",
        "id": 230044465,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1615561873
    },
    {
        "content": "<p><code>apply additive.to_mul.injective,</code> seems to get you out of the trouble</p>",
        "id": 230044685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615561948
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 230044817,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1615561999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/to_additive.20mismatch/near/230041766\">said</a>:</p>\n<blockquote>\n<p>Do you mean<code>f x = (to_mul f) x</code>?</p>\n</blockquote>\n<p>The parentheses are optional.</p>",
        "id": 230049585,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1615563661
    },
    {
        "content": "<p>I added <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>'s coercion in <a href=\"https://github.com/leanprover-community/mathlib/issues/6657\">#6657</a>, but was made aware that <a href=\"https://github.com/leanprover-community/mathlib/issues/6045\">#6045</a> exists and might conflict</p>",
        "id": 230065547,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1615569157
    }
]