[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> What was the motivation for defining the type alias <code>algebra.comap</code>. Could we have a docstring explaining the decision?</p>",
        "id": 179193647,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572222498
    },
    {
        "content": "<p>to avoid looping</p>",
        "id": 179193653,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572222522
    },
    {
        "content": "<p>Which loop?</p>",
        "id": 179193672,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572222550
    },
    {
        "content": "<p>maybe there's no loop. I'm not sure if it's necessary.</p>",
        "id": 179193685,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572222588
    },
    {
        "content": "<p>I'm just a bit worried about <code>algebra R A</code> and <code>algebra S A</code> both in the class instance</p>",
        "id": 179193726,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572222603
    },
    {
        "content": "<p>ah there's a loop: everytime you want <code>algebra S A</code> you would want to search for <code>algebra S T</code> and <code>algebra T A</code></p>",
        "id": 179193742,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572222630
    },
    {
        "content": "<p>because <code>algebra R S + algebra S A =&gt; algebra R (comap R S A)</code></p>",
        "id": 179193749,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572222659
    },
    {
        "content": "<p>if you remove the <code>comap</code> then you get <code>algebra R S + algebra S A =&gt; algebra R A</code>, very dangerous</p>",
        "id": 179193759,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572222673
    },
    {
        "content": "<p>I think it's not a loop, it's just a search with a metavariable in it.</p>",
        "id": 179193767,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572222697
    },
    {
        "content": "<p>Because it can't tell what the inbetween ring should be.</p>",
        "id": 179193774,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1572222716
    },
    {
        "content": "<p>then to search for <code>algebra R S</code> you would want to look at <code>algebra R ?m_1 + algebra ?m_1 S</code></p>",
        "id": 179193805,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572222723
    },
    {
        "content": "<p>and to search for <code>algebra R ?m_1</code> you would want to look at <code>algebra R ?m_2 + algebra ?m_2 ?m_1</code></p>",
        "id": 179193820,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1572222740
    },
    {
        "content": "<p>Also, commutative diagrams, aka diamond.  If you have <code>R → A → C</code> and <code>R → B → C</code> then everyone knows that there is a unique <code>R</code>-algebra structure on <code>C</code>. (If not, then what are you doing!!!!) But of course Lean cares to differ (-; By using <code>comap</code> we explicitly hard code which algebra structure we are talking about. Ugly, but I don't see how to avoid it.</p>",
        "id": 179206553,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1572245955
    }
]