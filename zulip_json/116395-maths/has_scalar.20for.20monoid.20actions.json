[
    {
        "content": "<p>Is there a reason why we are not using <code>•</code> to denote monoid/group actions?</p>",
        "id": 161330248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553161695
    },
    {
        "content": "<p>Please take a look at the last line of 6.20 on page 50 of <a href=\"http://math.stanford.edu/~conrad/Perfseminar/refs/wedhornadic.pdf\" target=\"_blank\" title=\"http://math.stanford.edu/~conrad/Perfseminar/refs/wedhornadic.pdf\">http://math.stanford.edu/~conrad/Perfseminar/refs/wedhornadic.pdf</a></p>",
        "id": 161353127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553180200
    },
    {
        "content": "<p>There is a calculation that involves taking products of sets and subgroups</p>",
        "id": 161353165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553180225
    },
    {
        "content": "<p><code>s • G</code> is defined as <code>add_group.closure {x | ∃ (r ∈ s) (g ∈ G), x = r g}</code>.</p>",
        "id": 161353245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553180279
    },
    {
        "content": "<p>This calculation becomes completely unreadable without the correct notation and framework.</p>",
        "id": 161353314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553180302
    },
    {
        "content": "<p>I would appreciate if people could review this patch:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/02baf145de6a796bd0b946caf7735f416330b854\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/02baf145de6a796bd0b946caf7735f416330b854\">https://github.com/leanprover-community/mathlib/commit/02baf145de6a796bd0b946caf7735f416330b854</a></p>\n<p>I introduce notation for monoid/group actions, and refactor <code>sylow.lean</code> which is the only place where group actions are used.<br>\nIt seems to work quite nicely in the two files that I edited. However... for some reason that I really don't understand, it is now no longer possible to coerce from <code>units int</code> to an arbitrary ring. And this is causing breakage in <code>determinant.lean</code>. I have no clue why this coercion is affected...</p>",
        "id": 161472627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553279821
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Do you have a clue what is the cause of the breakage?</p>",
        "id": 161482320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553287566
    },
    {
        "content": "<p>No, but I have had the same problem with code I wrote affecting that coercion.</p>",
        "id": 161482360,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553287609
    },
    {
        "content": "<p>Was it related code?</p>",
        "id": 161482390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553287638
    },
    {
        "content": "<p>It would be sad if we have to make that coercion explicit... Otoh, it isn't too much trouble to make <code>determinant.lean</code> a bit less fragile.</p>",
        "id": 161482482,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553287699
    },
    {
        "content": "<p>I just ended up import <code>group_theory/subgroup</code> or something into that file, which broke it.</p>",
        "id": 161482505,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553287723
    },
    {
        "content": "<p>Is <code>algebra/module</code> the only thing that has changed that is imported by <code>determinant</code>?</p>",
        "id": 161482549,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553287756
    },
    {
        "content": "<p>I think so. <code>algebra.module</code> now imports <code>group_action</code> because of the notation.</p>",
        "id": 161482588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553287794
    },
    {
        "content": "<p>I could put that notation in a separate file... but I was planning on making <code>module</code> extend <code>monoid_action</code> by definition... so that would only be a temporary fix.</p>",
        "id": 161482667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553287833
    },
    {
        "content": "<p>You could dump it in <code>algebra/group</code>. It's not really a long term fix.</p>",
        "id": 161482687,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553287859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you know how to make these thing play nice together?</p>",
        "id": 161482740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553287898
    },
    {
        "content": "<p>FYI the <code>coe</code> that breaks is from <code>units int</code> to a ring.</p>",
        "id": 161483010,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553288114
    },
    {
        "content": "<p>what if you put an intermediate type ascription to <code>int</code>?</p>",
        "id": 161484015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553288780
    },
    {
        "content": "<p>Doesn't fix it )-;</p>",
        "id": 161484199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553288934
    },
    {
        "content": "<p>It works for me.</p>",
        "id": 161489147,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1553293439
    },
    {
        "content": "<p>Hmm, maybe what I tried was to recreate the coercion with that intermediate type ascription...<br>\nAnyway, if you say it worked for you, I'll try to follow that approach. It's likely the best way forward.</p>",
        "id": 161512616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553325325
    },
    {
        "content": "<p>What is an intermediate type ascription?</p>",
        "id": 161516917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553332772
    },
    {
        "content": "<p>if <code>x : A</code> and you want a <code>C</code> and you write <code>(x : B)</code></p>",
        "id": 161517558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1553333825
    },
    {
        "content": "<p>As a small contribution to this discussion, I pushed <a href=\"https://github.com/leanprover-community/mathlib/commit/0d92ca165e83f0d37f9e2c42ac9510c258113526\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/0d92ca165e83f0d37f9e2c42ac9510c258113526\">https://github.com/leanprover-community/mathlib/commit/0d92ca165e83f0d37f9e2c42ac9510c258113526</a> It fixes the file <code>determinant.lean</code> by pushing all coercions into a local notation (which improves readability anyway). I'm not saying this is perfect, but I like it so far</p>",
        "id": 161522076,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553341251
    },
    {
        "content": "<p>Don't worry about the Travis fail, I realized while reading the diff on GitHub that I missed one coercion to remove, so I forced pushed and amended commit</p>",
        "id": 161522152,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553341401
    },
    {
        "content": "<p>Oh, you didn't say <code>dimension.lean</code> was also broken. Hence the Travis fail</p>",
        "id": 161522447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553341908
    },
    {
        "content": "<p>I fixed that one <a href=\"https://github.com/leanprover-community/mathlib/commit/84ed310358a818b9b779e18ff81ee07f17c94af7\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/84ed310358a818b9b779e18ff81ee07f17c94af7\">https://github.com/leanprover-community/mathlib/commit/84ed310358a818b9b779e18ff81ee07f17c94af7</a> We'll see what Travis has to say during my lunch</p>",
        "id": 161522729,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553342341
    },
    {
        "content": "<p>I stopped the compile after two screen fills of breakage in <code>determinant.lean</code>. There might well be more breakage.</p>",
        "id": 161522961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553342650
    },
    {
        "content": "<p>Thanks for contributing <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I really like what you've done.</p>",
        "id": 161522981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553342719
    },
    {
        "content": "<p>If this passes Travis, I think we can PR it.</p>",
        "id": 161523037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553342786
    },
    {
        "content": "<p>One thing I realised is that almost all instances of <code>has_pow</code> are also monoid/group actions... I don't know if/how we should unify that...</p>",
        "id": 161523054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553342854
    },
    {
        "content": "<p>But maybe that is an issue for another time.</p>",
        "id": 161523059,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553342873
    },
    {
        "content": "<p>Travis is happy</p>",
        "id": 161524925,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553345798
    },
    {
        "content": "<p>Globally, I think it's a good idea not to type <code>⇑</code> or <code>↑</code>. If Lean needs them then an explicit type ascription is probably much better for readability and maintenance. I think the case of <code>↥</code> is a bit different because there probably less ambiguity</p>",
        "id": 161525136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1553346179
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Do you agree that we can PR this? Or would you want to add other stuff?</p>",
        "id": 161525294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553346471
    },
    {
        "content": "<p>Done <a href=\"https://github.com/leanprover-community/mathlib/issues/846\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/846\">#846</a></p>",
        "id": 161527648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553350671
    }
]