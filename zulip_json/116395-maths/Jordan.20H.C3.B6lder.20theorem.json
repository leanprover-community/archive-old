[
    {
        "content": "<p>I've proved a general version of the Jordan Hölder theorem for a class <code>jordan_hoelder_class</code> which I defined and this should mean that it should be possible to prove that <code>subgroup G</code> or <code>submodule M</code> is a Jordan Hölder class. The main definitions are as follows</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">jordan_hoelder_class</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_maximal</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">lt_of_is_maximal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">is_maximal</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">sup_eq_of_is_maximal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">},</span> <span class=\"n\">is_maximal</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">is_maximal</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span>\n  <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_maximal_inf_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">},</span> <span class=\"n\">is_maximal</span> <span class=\"n\">x</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">is_maximal</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">y</span> <span class=\"bp\">→</span>\n  <span class=\"n\">is_maximal</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">isom</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"c1\">--(isom_refl : ∀ x, isom x x)</span>\n<span class=\"o\">(</span><span class=\"n\">isom_symm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"n\">isom</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">isom</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">isom_trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">},</span> <span class=\"n\">isom</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">isom</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">isom</span> <span class=\"n\">x</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">second_iso</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">isom</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">⊔</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">⊓</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">))</span><span class=\"bp\">```</span>\n\n<span class=\"bp\">```</span><span class=\"n\">lean</span>\n<span class=\"kd\">structure</span> <span class=\"n\">composition_series</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">lattice</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">jordan_hoelder_class</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">series</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">length</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">step'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">length</span><span class=\"o\">,</span> <span class=\"n\">is_maximal</span> <span class=\"o\">(</span><span class=\"n\">series</span> <span class=\"n\">i.cast_succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">series</span> <span class=\"n\">i.succ</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>I'm looking for comments on this stuff. There needs to be an API for composition series which includes mapping over morphisms (so we maybe need to define morphisms of  and I'm not sure whether to attempt to write this all in the generality of Jordan Hölder class or not). I'm not sure if there are any applications other than groups and modules, obviously if there are more, then we might want a more general API. I may have to change the definition of <code>second_iso</code> to stipulate that <code>x</code> is maximal inside <code>x ⊔ y</code>.</p>",
        "id": 250607073,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1629890923
    },
    {
        "content": "<p>I definitely think generality is useful here, at least I've seen applications that make use of Jordan Holder for p-divisible groups and the like. My understanding was that the \"right\" generality is that the theorem holds in any abelian category, how does your Jordan-Holder class compare to that? (Edit: I guess it really should be more general! groups aren't an abelian category after all)</p>",
        "id": 250610388,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629893228
    },
    {
        "content": "<p>I'm guessing you already saw <a href=\"https://en.wikipedia.org/wiki/Composition_series#Generalization\">https://en.wikipedia.org/wiki/Composition_series#Generalization</a>, I've never heard of those things before but if its the right generality to reduce duplicate proofs maybe groups with a set of operators is the way to go?</p>",
        "id": 250611384,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629893870
    },
    {
        "content": "<p>Is there a reason to prefer the dependent fin for a series as opposed to a list.chain'?</p>",
        "id": 250614060,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629895498
    },
    {
        "content": "<p>You could have local notation within the structure like \"&lt;m\" so that it's more clear that is_maximal has the maximal term on the right.</p>",
        "id": 250614288,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629895646
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/116395-maths/topic/Jordan.20H.C3.B6lder.20theorem/near/250614060\">said</a>:</p>\n<blockquote>\n<p>Is there a reason to prefer the dependent fin for a series as opposed to a list.chain'?</p>\n</blockquote>\n<p><code>fin</code> makes it a lot easier to state equivalence of composition series. I just need a <code>fin s₁.length ≃ fin s₂.length</code> to define equivalence, but isomorphisms of lists is harder to deal with.</p>",
        "id": 250616169,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1629896585
    },
    {
        "content": "<p><a href=\"https://www.isa-afp.org/entries/Jordan_Hoelder.html\">Here</a>'s my Isabelle formalisation of Jordan-Hölder. I compared the isomorphism classes of the quotients as multisets</p>",
        "id": 250620725,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1629898617
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/116395-maths/topic/Jordan.20H.C3.B6lder.20theorem/near/250620725\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://www.isa-afp.org/entries/Jordan_Hoelder.html\">Here</a>'s my Isabelle formalisation of Jordan-Hölder. I compared the isomorphism classes of the quotients as multisets</p>\n</blockquote>\n<p>That might have been a better idea for me in hindsight.</p>",
        "id": 250624802,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1629900284
    },
    {
        "content": "<p>One issue is that we don't have a great way of taking the list of adjacent pairs given a list, but I could easily have defined a composition series to be a list of pairs.</p>",
        "id": 250625049,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1629900389
    },
    {
        "content": "<p><code>zip l l.tail</code></p>",
        "id": 250625594,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629900691
    },
    {
        "content": "<p>Which I use to great extent in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.form_perm\">docs#list.form_perm</a></p>",
        "id": 250625629,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629900715
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/116395-maths/topic/Jordan.20H.C3.B6lder.20theorem/near/250611384\">said</a>:</p>\n<blockquote>\n<p>I'm guessing you already saw <a href=\"https://en.wikipedia.org/wiki/Composition_series#Generalization\">https://en.wikipedia.org/wiki/Composition_series#Generalization</a>, I've never heard of those things before but if its the right generality to reduce duplicate proofs maybe groups with a set of operators is the way to go?</p>\n</blockquote>\n<p>I really think anyone interested in math formalization should have a look at Bourbaki. Some of the greatest mathematicians of their time faced a lot of those questions, and they sorted it out. Groups with operators are defined on Page 31 of Algebra I. Jordan-Hölder starts on Page 41.</p>",
        "id": 250626769,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629901247
    },
    {
        "content": "<p>I just fixed that Wikipedia page.</p>",
        "id": 250630450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1629902800
    },
    {
        "content": "<p>Context is <a href=\"https://github.com/leanprover-community/mathlib/pull/17226\">#17226</a>. I'm looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/jordan_holder_lattice.is_maximal\">docs#jordan_holder_lattice.is_maximal</a>. Is there any other notion of maximality than <a href=\"https://leanprover-community.github.io/mathlib_docs/find/covby\">docs#covby</a>?</p>",
        "id": 307003595,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667160797
    },
    {
        "content": "<p>By that I mean: Will we ever define an instance of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/jordan_holder_lattice\">docs#jordan_holder_lattice</a> that won't set <code>is_maximal := (⋖)</code>?</p>",
        "id": 307003754,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667160896
    },
    {
        "content": "<p>The docstring in the file mentions</p>\n<blockquote>\n<p>In the example of subgroups of a group, <code>is_maximal H K </code>means that <code>H</code> is a maximal <em>normal</em> subgroup of <code>K</code>.</p>\n</blockquote>",
        "id": 307003799,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1667160939
    },
    {
        "content": "<p>Somehow this is still <code>covby</code>, simply in another lattice <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 307003896,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667160991
    },
    {
        "content": "<p>Okay, better question: Will <code>is_maximal</code> always be the pullback of <code>covby</code> over some sublattice of <code>α</code>?</p>",
        "id": 307003946,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667161032
    },
    {
        "content": "<p>I'm trying to see whether there's something automatic about checking the <code>jordan_holder_lattice</code> axioms.</p>",
        "id": 307004065,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667161095
    },
    {
        "content": "<p>(as an aside, that really should be called <code>jordan_hoelder_lattice</code>!)</p>",
        "id": 307004091,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667161125
    },
    {
        "content": "<p>(<code>jordan_hölder_lattice</code> would be even better.)</p>",
        "id": 307004249,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667161250
    },
    {
        "content": "<p>(French keyboard users would be overadvantaged <span aria-label=\"wine\" class=\"emoji emoji-1f377\" role=\"img\" title=\"wine\">:wine:</span>)</p>",
        "id": 307004365,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667161337
    },
    {
        "content": "<p>mathlib convention is to not include any accent in declaration names, e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/stone_cech\">docs#stone_cech</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/witt_vector.teichmuller\">docs#witt_vector.teichmuller</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/picard_lindelof\">docs#picard_lindelof</a> ...</p>",
        "id": 307018874,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667173805
    },
    {
        "content": "<p>The fact that this is the convention, does not mean that having accents would be worst!  <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 307018920,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667173883
    },
    {
        "content": "<p>Lean 4 also use capital letters extensively in declaration names. Maybe we should capitalize appropriately and add accents to the Lean3-Lean4 mathport dictionary?</p>",
        "id": 307019100,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667174050
    },
    {
        "content": "<p>We also need proper VSCode (and other text editor) support to type the accents. It seems to follow LaTeX convention now, but you can't actually type ö using <code>\\\"o</code> according to <a href=\"https://github.com/vihdzp/vscode-lean/blob/3ddd1b669a5f09f67bb34978153974284fd34d9e/src/abbreviation/abbreviations.json#L141\">the list</a>.</p>",
        "id": 307019585,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667174609
    },
    {
        "content": "<p>The thing is that german umlauts have prescribed digramm transcriptions:</p>\n<ul>\n<li>ä → ae</li>\n<li>ö → oe</li>\n<li>ü → ue</li>\n</ul>",
        "id": 307020002,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667175082
    },
    {
        "content": "<p>If we really go there, an option could be to allow <code>jordan_hölder_lattice</code> and <code>jordan_holder_lattice</code> to be the same declaration, similar to how <code>-&gt;</code> and <code>→</code> already mean the same.</p>",
        "id": 307020773,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1667175849
    },
    {
        "content": "<p>In Swedish web addresses and such, people just write aao instead of åäö (never aa ae oe). It does lose information but it feels like a smaller change than turning one letter into two</p>",
        "id": 307051657,
        "sender_full_name": "David Wärn",
        "timestamp": 1667203235
    },
    {
        "content": "<p>As Swedes won't get tired to explain the Swedish åäö are separate vowels while the German äöü are umlaut, so it makes sense that there are different rules to transcribe them if they are not available :-)</p>",
        "id": 307053346,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1667203987
    },
    {
        "content": "<p>Indeed I could have this discussion all day :-) Let me just say that I agree with the conclusion: we have two different languages with two different conventions and they both make sense. Most occurrences of äö in mathlib are surely German, but there's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/picard_lindelof\">docs#picard_lindelof</a> and <a href=\"https://tqft.net/mathlib/analysis/complex/phragmen_lindelof\">file#analysis/complex/phragmen_lindelof</a>, where I approve of the status quo</p>",
        "id": 307085977,
        "sender_full_name": "David Wärn",
        "timestamp": 1667217096
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Umlaut_(diacritic)#History\">https://en.wikipedia.org/wiki/Umlaut_(diacritic)#History</a> The German <code>ö ↦ oe</code> phenomenon has a good historical explanation: it reverts a process that took place several centuries ago.</p>",
        "id": 307105417,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1667223677
    },
    {
        "content": "<blockquote>\n<p>In the example of subgroups of a group, <code>is_maximal H K </code>means that <code>H</code> is a maximal <em>normal</em> subgroup of <code>K</code>.</p>\n</blockquote>\n<p>Let me note that if you take the lattice of <em>normal</em> subgroups and consider the <code>covby</code> relation, then the composition_series you get is called a <a href=\"https://en.wikipedia.org/wiki/Chief_series\">chief series</a>. Normal subgroups and submodules are both examples of  <a href=\"https://en.wikipedia.org/wiki/Group_with_operators\">Ω-subgroups</a>, and it's apparently possible to <a href=\"https://en.wikipedia.org/wiki/Composition_series#Generalization\">unify both cases</a>.</p>\n<p>(Update: Wikipedia says <a href=\"https://en.wikipedia.org/wiki/Zassenhaus_lemma\">the butterfly lemma</a> (not in mathlib?) holds for the lattice of Ω-subgroups for any choice of Ω. Maybe that's how you may unify the proofs.)</p>",
        "id": 308490474,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667862589
    },
    {
        "content": "<p>But is it a good idea to set up a theory for Omega groups (or I guess monoids acting on groups sounds slightly more modern)? Certainly you won't want to define a module as a commutative Omega group with extra properties.</p>",
        "id": 308569084,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1667908493
    },
    {
        "content": "<p>I think the current approach is already general enough. <br>\nWe might want to separate the <code>is_maximal</code> and <code>iso</code> part of the typeclass so that composition series of modules is definitionally equal to compositon series on modular lattices.</p>",
        "id": 308569451,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1667908671
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Jordan.20H.C3.B6lder.20theorem/near/307003896\">said</a>:</p>\n<blockquote>\n<p>Somehow this is still <code>covby</code>, simply in another lattice <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>\n</blockquote>\n<p>It isn't really, because the relation of being a normal subgroup is not transitive</p>",
        "id": 308577003,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1667911653
    },
    {
        "content": "<p>Then we just need a generalization of lattices where <code>le</code> need not be transitive <span aria-label=\"yum\" class=\"emoji emoji-1f60b\" role=\"img\" title=\"yum\">:yum:</span></p>",
        "id": 308577824,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1667911984
    },
    {
        "content": "<p>it makes me wonder though how often transitivity is used in all those proofs</p>",
        "id": 308578194,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1667912114
    },
    {
        "content": "<p>Actually, maybe just taking the transitive closure of the normal subgroup relation works.</p>",
        "id": 308590896,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1667915273
    },
    {
        "content": "<p>Since we take <code>is_maximal</code> to be <code>covby</code> I guess we don't care about those extra relations.</p>",
        "id": 308608093,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1667920334
    },
    {
        "content": "<p>Side note:  Is it a problem that our underlying set <code>subgroup G</code> gets two partial orders (the usual inclusion and the closure of normal_in)?</p>",
        "id": 308608203,
        "sender_full_name": "Daan van Gent",
        "timestamp": 1667920368
    },
    {
        "content": "<blockquote>\n<p>But is it a good idea to set up a theory for Omega groups (or I guess monoids acting on groups sounds slightly more modern)? Certainly you won't want to define a module as a commutative Omega group with extra properties.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_distrib_mul_action\">docs#mul_distrib_mul_action</a> is the proper typeclass, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module\">docs#module</a> extends its additive version <a href=\"https://leanprover-community.github.io/mathlib_docs/find/distrib_mul_action\">docs#distrib_mul_action</a>. So if to_additive can handle this, then you can write the code for Ω-groups and it automatically applies to modules. We'd also need the multiplicative version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/submodule\">docs#submodule</a>, and relax <code>[module]</code> to <code>[distrib_mul_action]</code>, but this has <a href=\"#narrow/stream/113489-new-members/topic/Working.20on.20Frobenius.20elements/near/297067912\">led to timeout</a>. Maybe after transition to Lean 4?</p>",
        "id": 308624028,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667924879
    },
    {
        "content": "<blockquote>\n<p>Actually, maybe just taking the transitive closure of the normal subgroup relation works.</p>\n</blockquote>\n<p>This isn't a lattice though. If H is a maximal subgroup in the whole group G that is not normal, then H and G have no supremum :( G isn't a top element, even though the trivial group is always a bottom element.</p>",
        "id": 308629252,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667926412
    },
    {
        "content": "<p>If we only consider those subgroups reachable from the whole group G via (the transitive closure of) the normal-subgroup relation, i.e. the <a href=\"https://en.wikipedia.org/wiki/Subnormal_subgroup\">subnormal subgroups</a>, it's true that a subnormal subgroup H of G is a subnormal subgroup of any subgroup containing it, so the transitive closure of the normal-subgroup relation is just the subgroup relation on subnormal subgroups, and the intersection of two subnormal subgroups is still subnormal so infima exist. However, the subgroup generated by two subnormal subgroups may not be subnormal, so it's not clear whether the supremum exists. <a href=\"https://math.stackexchange.com/a/1319663/12932\">https://math.stackexchange.com/a/1319663/12932</a></p>",
        "id": 308652380,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667933571
    },
    {
        "content": "<blockquote>\n<p>Side note: Is it a problem that our underlying set subgroup G gets two partial orders (the usual inclusion and the closure of normal_in)?</p>\n</blockquote>\n<p>I think we don't need to do this; I think in the general situation, the <code>is_maximal H K</code> relation on the lattice of Ω-subgroup is always \"H is a maximal Ω-stable normal subgroup in K\" (Ω-stable subgroup means the same thing as Ω-subgroup and is a notion independent of K). When G is commutative (e.g. it's a module) or when Ω is the inner automorphisms (so H is normal in G and hence in K), the normality requirement is vacuous and we recover the <code>covby</code> relation.</p>",
        "id": 308653690,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1667933973
    }
]