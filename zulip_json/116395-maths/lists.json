[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, I'm about to write docstrings for <code>lists</code>. How should I understand the choice to make <code>lists' α</code> contain a copy of <code>α</code> (using <code>atom</code>)? Also, is the <code>bool</code> in there really meaning \"this is a proper list, not an atom\"?</p>",
        "id": 251692767,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630577304
    },
    {
        "content": "<p>You should think of <code>lists A</code> as a kind of naive set theory, like you find in early discussions about <code>\\in</code> and <code>\\subseteq</code>. It is basically finite ZFA</p>",
        "id": 251692885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630577390
    },
    {
        "content": "<p>it's computable, so that you can evaluate stuff like <code>{2, 3} \\in {2, {2, 3}, 5}</code></p>",
        "id": 251692970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630577422
    },
    {
        "content": "<p>Indeed the bool in the underlying implementation is there to distinguish proper lists from list-or-atom</p>",
        "id": 251693042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630577481
    },
    {
        "content": "<p>It would have been a mutual inductive but the support for that in lean 3 isn't so great</p>",
        "id": 251693074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630577513
    },
    {
        "content": "<p>It was originally intended to be used for formalizing elementary set theory problems, back when <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> was looking at formalizing his problem sheets and got stuck on questions about set theory</p>",
        "id": 251693284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630577631
    },
    {
        "content": "<p>But terms of <code>lists A</code> are ordered, right?</p>",
        "id": 251693376,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630577680
    },
    {
        "content": "<p>I never got around to the quotient part, <code>lists</code> is just the substrate</p>",
        "id": 251693443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630577730
    },
    {
        "content": "<p>Ah okay, that makes more sense!</p>",
        "id": 251693460,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630577748
    },
    {
        "content": "<p>you can take a quotient in much the same way as <code>pSet</code> / <code>Set</code></p>",
        "id": 251693473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630577757
    },
    {
        "content": "<p>Yeah that's what I was expecting to see.</p>",
        "id": 251693521,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630577770
    },
    {
        "content": "<p>And how should I explain the difference between <code>lists'</code> and <code>lists</code>?</p>",
        "id": 251693581,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630577838
    },
    {
        "content": "<p>it would be nice to finish it at some point but the demand wasn't so high and it wasn't a high priority</p>",
        "id": 251693599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630577850
    },
    {
        "content": "<p>I think <code>lists'</code> is an implementation detail</p>",
        "id": 251693616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630577864
    },
    {
        "content": "<p>And why using the plural? You used a cap for <code>pSet</code> and <code>Set</code>.</p>",
        "id": 251693729,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630577953
    },
    {
        "content": "<p>The reason for the distinction is that we don't want <code>cons 1 2</code> to be well formed</p>",
        "id": 251693741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630577960
    },
    {
        "content": "<p>Aaah yeah</p>",
        "id": 251693756,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630577972
    },
    {
        "content": "<p>Actually, isn't <code>Set</code> the usual notation for the category of sets?</p>",
        "id": 251693764,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630577984
    },
    {
        "content": "<p>Would it make more sense if they were called <code>zfc_set</code>, <code>zfc_pset</code>, <code>zfa_list</code>, <code>zfa_list'</code>?</p>",
        "id": 251693858,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630578043
    },
    {
        "content": "<p>I don't see a contradiction in the naming, the caps are since it is a higher order object containing all the sets at once, much like the category</p>",
        "id": 251693929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630578106
    },
    {
        "content": "<p>in fact I imagine you could also make it the category literally</p>",
        "id": 251693941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630578118
    },
    {
        "content": "<p>Well it will nameclash when people will want to define the category. But yeah stuff can be decided then.</p>",
        "id": 251694040,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630578162
    },
    {
        "content": "<p>but keep in mind that these were all written a very long time ago (category theory was not in mathlib at all)</p>",
        "id": 251694041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630578162
    },
    {
        "content": "<p>Still I don't get <code>lists</code>. It's not the type of several <code>list</code>s</p>",
        "id": 251694076,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630578187
    },
    {
        "content": "<p>most category stuff is in the <code>category_theory</code> namespace</p>",
        "id": 251694089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630578195
    },
    {
        "content": "<p>Ah okay, then I retract</p>",
        "id": 251694116,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630578223
    },
    {
        "content": "<p>It's still a type constructor, like <code>list</code>, since it's parameterized over a base type of atoms</p>",
        "id": 251694121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630578226
    },
    {
        "content": "<p>it's the type of list-of-list-of-list... of A</p>",
        "id": 251694177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630578249
    },
    {
        "content": "<p>So the plural refers to the fact that elements of a list are themselves lists?</p>",
        "id": 251694219,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630578287
    },
    {
        "content": "<p>except not really since it also allows mixed level objects like [1, [2, 3]]</p>",
        "id": 251694228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630578292
    },
    {
        "content": "<p>yeah</p>",
        "id": 251694240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630578298
    },
    {
        "content": "<p>it's lists all the way down :)</p>",
        "id": 251694271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630578323
    },
    {
        "content": "<p>Aaaah <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 251694282,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630578332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/lists/near/251693284\">said</a>:</p>\n<blockquote>\n<p>It was originally intended to be used for formalizing elementary set theory problems, back when <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> was looking at formalizing his problem sheets and got stuck on questions about set theory</p>\n</blockquote>\n<p>At that time I was making the canonical error of saying \"it says it like this in the book, therefore I need to make an exact copy of this somehow in Lean\" (I didn't know anything about type theory at the time).</p>",
        "id": 251701853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630583101
    },
    {
        "content": "<p>Dumb question, what is the A in ZFA standing for?</p>",
        "id": 251708240,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630586551
    },
    {
        "content": "<p>Maybe \"atoms\"? Is this some theory with urelements?</p>",
        "id": 251708313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630586594
    },
    {
        "content": "<p>Hmm, yeah, maybe. The central object is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">lists'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bool</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">lists'</span> <span class=\"n\">ff</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">lists'</span> <span class=\"n\">tt</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons'</span> <span class=\"o\">{</span><span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">lists'</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">lists'</span> <span class=\"n\">tt</span> <span class=\"bp\">→</span> <span class=\"n\">lists'</span> <span class=\"n\">tt</span>\n</code></pre></div>",
        "id": 251708517,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630586683
    },
    {
        "content": "<p>yes, this is ZF with \"atoms\" that are not sets. It is the perfect setting for talking about simple sets of natural numbers like <code>{1, {2, 3}, 4}</code></p>",
        "id": 251711185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630587906
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/lists/near/251701853\">said</a>:</p>\n<blockquote>\n<p>At that time I was making the canonical error of saying \"it says it like this in the book, therefore I need to make an exact copy of this somehow in Lean\" (I didn't know anything about type theory at the time).</p>\n</blockquote>\n<p>I think this is only half of an error. You shouldn't exactly replicate the book, but you also shouldn't be too eager to simply drop an area or a kind of question just because it's not easy to formalize. That's the mentality that leads to formal mathematics only ever exploring stuff like finite combinatorics, lists, and natural numbers</p>",
        "id": 251711697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630588108
    },
    {
        "content": "<p>I now reached an alternate state of mind. All docstrings in this file now look like \"does something to a <strong>list</strong> to make it a <strong>list</strong>\" and now my brain can't access the meaning of \"list\" anymore <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span></p>",
        "id": 251726021,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630593556
    },
    {
        "content": "<p>All I see is a chain of four characters sounding funny together. <em>list, list, list, lissst</em></p>",
        "id": 251726119,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630593600
    },
    {
        "content": "<p>I can't let the opportunity to mention \"semantic satiation\" go by!</p>",
        "id": 251729583,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1630594870
    },
    {
        "content": "<p>Eheheh <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 251729715,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630594923
    },
    {
        "content": "<p>Here's <a href=\"https://github.com/leanprover-community/mathlib/issues/8967\">#8967</a> for the vertigo-enjoyers.</p>",
        "id": 251729847,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630594960
    },
    {
        "content": "<p>If I understand it correctly, <code>lists'</code> and <code>lists</code> together are \"compiling\" the following (invalid) recursive definition as an inductive type:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lists</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">lists</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>The <code>bool</code> index in <code>lists'</code> is encoding which side of the sum something is. If this is correct, maybe mentioning it might help motivate things in the documentation.</p>\n<p>In that case, it seems the goal for ZFA sets is to compile the following recursive definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">finsets</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"bp\">⊕</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finsets</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 251745396,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630600860
    },
    {
        "content": "<p>Yes, you're absolutely right.</p>",
        "id": 251746415,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1630601254
    },
    {
        "content": "<p>Hmm, this seems to execute very slowly:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">lists</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">lists</span>\n<span class=\"bp\">|</span> <span class=\"n\">list</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">lists</span> <span class=\"bp\">→</span> <span class=\"n\">lists</span>\n</code></pre></div>",
        "id": 251746430,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630601259
    },
    {
        "content": "<p>Universe issue?</p>",
        "id": 251746604,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1630601314
    },
    {
        "content": "<p>Don't think so.  It seems like nested inductive types might just be slow for Lean to work out -- it generates a whole lot of auxiliary definitions, and it seems to be coming up with something along the lines of Mario's <code>lists</code> definition (haven't really confirmed that, though).</p>\n<p>Lean doesn't allow the following, since it doesn't know how to eliminate the recursion:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">finsets</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">finsets</span>\n<span class=\"bp\">|</span> <span class=\"n\">fs</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">finsets</span> <span class=\"bp\">→</span> <span class=\"n\">finsets</span>\n</code></pre></div>",
        "id": 251748752,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1630602101
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/116395-maths/topic/lists/near/251746430\">said</a>:</p>\n<blockquote>\n<p>Hmm, this seems to execute very slowly:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">lists</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">atom</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">lists</span>\n<span class=\"bp\">|</span> <span class=\"n\">list</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">lists</span> <span class=\"bp\">→</span> <span class=\"n\">lists</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>It might be good to put this exact definition in the comment for <code>lists</code> and/or <code>lists'</code> as motivation</p>",
        "id": 251815131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1630636960
    }
]