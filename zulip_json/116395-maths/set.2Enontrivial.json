[
    {
        "content": "<p>I am considering the benefits of a <code>set.nontrivial</code> predicate, with the property that <code>s.nontrivial iff ¬ s.subsingleton</code>. This would allow for the use of dot notation etc. This is analogous to the <code>subsingleton</code> and <code>nontrivial</code> typeclasses. What are people's thoughts?</p>",
        "id": 291876305,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659544347
    },
    {
        "content": "<p>(This comes up naturally when considering things like the infimum distance of a set under a metric.)</p>",
        "id": 291876379,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659544391
    },
    {
        "content": "<p>Would writing <code>¬ s.subsingleton</code> be sufficient? Or would you be wanting to have lemmas you access via dot notation on a <code>set.nontrivial</code> term?</p>",
        "id": 291902873,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659552166
    },
    {
        "content": "<p>I think the reason a special <code>nontrivial</code> class exists is that typeclass inference wouldn't really work for <code>¬ (subsingleton X)</code>.</p>",
        "id": 291903086,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659552268
    },
    {
        "content": "<p>I had been writing <code>¬ s.subsingleton</code>, but, exactly as you say, I kept wanting a dot notation for it.</p>\n<p>(Also I would define <code>s.nontrivial</code> as the push_neg version, i.e. not \"not forall\" but \"exists\" - bit easier to actually use.)</p>",
        "id": 291903232,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659552354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"330967\">Wrenna Robson</span> <a href=\"#narrow/stream/116395-maths/topic/set.2Enontrivial/near/291876305\">said</a>:</p>\n<blockquote>\n<p>I am considering the benefits of a <code>set.nontrivial</code> predicate, with the property that <code>s.nontrivial iff ¬ s.subsingleton</code>. This would allow for the use of dot notation etc. This is analogous to the <code>subsingleton</code> and <code>nontrivial</code> typeclasses. What are people's thoughts?</p>\n</blockquote>\n<p>Given that we already have quite a few set analogs of typeclasses, such as <code>set.nonempty</code>, <code>set.subsingleton</code>, <code>set.finite</code>, <code>set.infinite</code>, <code>set.countable</code>, I think one more will be welcome as long as it has the appropriate API</p>",
        "id": 291903575,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659552515
    },
    {
        "content": "<p>Dot notation seems to be sufficient cause for a special predicate. I think it's fair define it in the most convenient form, then prove it's equivalent to <code>¬ s.subsingleton</code> (I assume they're literally push_negs of each other.)</p>\n<p>You'll still need to create API to link up <code>nontrivial</code> and <code>set.nontrivial</code> (and rename any <code>not_subsingleton</code> lemmas), but maybe some of that already exists.</p>",
        "id": 291904340,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659552930
    },
    {
        "content": "<p>I'd say the \"correct\" definition of <code>set.nontrivial</code> is the one that matches <code>nontrivial</code>, which is <code>∃ x y ∈ s, x ≠ y</code></p>",
        "id": 291904976,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659553215
    },
    {
        "content": "<p>(Yes, that's the push-neg of the negation of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.subsingleton\">docs#set.subsingleton</a>)</p>",
        "id": 291905141,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659553302
    },
    {
        "content": "<p>The simp-normal form of <code>¬ s.subsingleton</code> should be made into <code>s.nontrivial</code>, and you should also have a lemma <code>set.nontrivial_coe_iff : nontrivial (↥s) ↔ s.nontrivial</code>.</p>",
        "id": 291905148,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659553304
    },
    {
        "content": "<blockquote>\n<p>Dot notation seems to be sufficient cause for a special predicate.</p>\n</blockquote>\n<p>I've thought about an extension to dot notation that would help us out here, but there are still some details I'm not sure about, and like always Lean 4 is around the corner so it's not the best idea to put energy into this.</p>\n<p>The idea is that when doing dot notation lookup for <code>x.foo</code> when <code>x : a (b ...)</code> you would first look for <code>a.foo</code> and then if that fails you would look for <code>b.a.foo</code>. It'd only go looking this far, not recursively.</p>\n<p>Then you could have <code>set.subsingleton.not</code> lemmas.</p>",
        "id": 291905650,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659553535
    },
    {
        "content": "<p>One place this is not the best is with <code>has_mem</code> lemmas. When you have <code>h : x ∈ s</code> and <code>s : a</code>, ideally <code>h.foo</code> would look at <code>a.has_mem.mem.foo</code>. With my simpler idea, it only would look for a lemma associated to <code>x</code>.</p>",
        "id": 291906007,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659553704
    },
    {
        "content": "<p>Do we have such a coe_iff lemma for subsingleton?</p>",
        "id": 291930517,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659566842
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.subsingleton_coe\">docs#set.subsingleton_coe</a></p>",
        "id": 291930647,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659566936
    },
    {
        "content": "<p>Right. My plan was to essentially mirror all the API for <code>set.subsingleton</code>. I don't <em>think</em> we have many <code>not_subsingleton</code> lemmas but they might be called something different.</p>",
        "id": 291930957,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659567171
    },
    {
        "content": "<p>(...arguably you could have a similar pair of predicates for finset...)</p>",
        "id": 291930981,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659567187
    },
    {
        "content": "<p>Actually we don't even have <code>finset.subsingleton</code>.</p>",
        "id": 291931048,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659567231
    },
    {
        "content": "<p>Right.</p>",
        "id": 291931104,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659567249
    },
    {
        "content": "<p>Is there a need for it? I can see that it might come up.</p>",
        "id": 291931149,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659567284
    },
    {
        "content": "<p>Is there a need for it? I can see that it might come up.</p>",
        "id": 291931155,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659567294
    },
    {
        "content": "<p>My take on API is to add it only when it's either relevant or trivial</p>",
        "id": 291948543,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659572691
    },
    {
        "content": "<p>If we don't need <code>finset.singleton</code> yet, no need to add the API</p>",
        "id": 291948562,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659572708
    },
    {
        "content": "<p>At the end of the day, it's the theorems you use the API on that inform how it should look, not the other way around</p>",
        "id": 291948573,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1659572724
    },
    {
        "content": "<p>Well, I do have a need for it... but it might just be me.</p>",
        "id": 292001333,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659616836
    },
    {
        "content": "<p>incidentally, <code>set.nontrivial</code> is currently the name of the nontrivial instance of set.</p>",
        "id": 292001368,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659616854
    },
    {
        "content": "<p>Could rename to <code>nontrivial_of_nonempty</code> or something</p>",
        "id": 292001404,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659616876
    },
    {
        "content": "<p>What do you think?</p>",
        "id": 292001412,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659616885
    },
    {
        "content": "<p>Renaming the instance seems fine to me. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.nontrivial\">docs#set.nontrivial</a> is the fact that <code>set X</code> itself is nontrivial -- I wonder if something like <code>nontrivial_set</code> is a more appropriate name? I'm not sure.</p>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.nontrivial_mono\">docs#set.nontrivial_mono</a> might want to be renamed too (or replaced with a <code>set.nontrivial</code> version?)</p>",
        "id": 292022313,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659626320
    },
    {
        "content": "<p>No because we will call the <code>set.nontrivial</code> version <code>set.nontrivial.mono</code>.</p>",
        "id": 292033417,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659631084
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15867\">#15867</a> now exists</p>",
        "id": 292040999,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659633172
    },
    {
        "content": "<p>(I kept <code>nontrivial_mono</code>, though I moved it later in the file to take advantage of the new functionality.)</p>",
        "id": 292041099,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659633216
    },
    {
        "content": "<p>I've made a couple of additions and changes to <code>subsingleton</code>, but they were really only things that I noticed as I was going, I've tried to keep to a fairly tight scope.</p>",
        "id": 292041214,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659633255
    },
    {
        "content": "<p>And I finally got it to build...!</p>",
        "id": 292088751,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1659659692
    }
]