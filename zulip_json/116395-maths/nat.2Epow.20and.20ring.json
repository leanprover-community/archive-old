[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">â„•</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_pow</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127802027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528507192
    },
    {
        "content": "<p>Could I have done that in one line with <code>ring</code>? [using some options or something]</p>",
        "id": 127802028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528507192
    },
    {
        "content": "<p>[deleted - incorrect information]</p>",
        "id": 127802751,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528508704
    },
    {
        "content": "<p>So I could make an even cooler ring tactic by writing a tactic which tries to do those unfolds and then applies ring?</p>",
        "id": 127802943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528509149
    },
    {
        "content": "<p>Is life that easy?</p>",
        "id": 127802946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528509173
    },
    {
        "content": "<p>[deleted - incorrect information]</p>",
        "id": 127803089,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528509489
    },
    {
        "content": "<p>[deleted - incorrect information]</p>",
        "id": 127803099,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528509569
    },
    {
        "content": "<p>ring should handle powers... it automatically handles ring like operations that make sense as polynomial expressions, although it can't handle x^n for nonconstant n</p>",
        "id": 127808199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1528521886
    },
    {
        "content": "<p>in particular it has optimizations for sparse polynomials like x^100 + x, which requires interpreting ^</p>",
        "id": 127808250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1528521978
    },
    {
        "content": "<p>that's pretty sweet! I didn't expect that you'd put that much effort into the tactic. thanks for writing it!</p>",
        "id": 127809868,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1528525552
    },
    {
        "content": "<p>Yes thanks very much indeed for writing it. It is an essential part of the \"mathematician's interface\" to Lean. Writing it was I'm sure nontrivial but at the end of the day, as I know I've said before, if a mathematician can't prove things like the example above with one or two lines then they will never take to Lean.</p>",
        "id": 127816599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528540896
    },
    {
        "content": "<p>Just to be clear -- in the example above <code>ring</code> falls without the initial unfolding</p>",
        "id": 127816655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1528540963
    },
    {
        "content": "<p>The <code>ring</code> tactic is already very useful but it has bugs</p>",
        "id": 127816664,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1528540988
    },
    {
        "content": "<p>How hard would it be to state a theorem about the <code>ring</code> tactic, and prove that the implementation is compliant? Then we are sure we won't have bugs. But I guess that the <code>meta</code> stuff makes this complicated.</p>",
        "id": 127822932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1528555867
    }
]