[
    {
        "content": "<p>If <code>α</code>is a <code>fintype</code> and <code>s : set α</code>, how can one talk about the cardinality of <code>s</code>, for example, compare it to <code>fintype.card α</code>?<br>\nI skimmed through <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset\">docs#finset</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fintype\">docs#fintype</a> but couldn't guess the relevant coercion functions…</p>",
        "id": 263909002,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638820016
    },
    {
        "content": "<p>There is also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.card\">docs#nat.card</a> which will take an arbitrary type, and of course there's a coercion which will take the term <code>s</code> to the corresponding type (a subtype of alpha). But who knows if it will be nice to work with...</p>",
        "id": 263909418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638820098
    },
    {
        "content": "<p>Alternatively you could probably noncomputably convert <code>s</code> into a <code>finset</code>. Is there <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.to_finset\">docs#set.to_finset</a> or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.of_set\">docs#finset.of_set</a> ? Aah, the first one exists but it needs a fintype instance on the coercion. Is it there? Note that I just guessed the name of the function instead of looking through the files ;-)</p>",
        "id": 263909728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638820161
    },
    {
        "content": "<p>Yup, it does</p>",
        "id": 263910009,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638820210
    },
    {
        "content": "<p>and to tie everything together there's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.to_finset_card\">docs#set.to_finset_card</a></p>",
        "id": 263910425,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1638820296
    },
    {
        "content": "<p>If you have <code>[decidable_eq α]</code> (or have things suitably classical) then you should be able to do <code>fintype.card s</code> too.</p>",
        "id": 263911447,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638820504
    },
    {
        "content": "<p>What I don't understand with these functions is that all of them have as an argument (sometimes implicit) the fact that <code>↥s</code> is a <code>fintype</code>, so I even didn't try using them ? How does Lean guess about this ? <br>\nActually, none of the following works :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">set_fintype</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">set.to_fintype</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">finset.subtype</span> <span class=\"n\">s</span><span class=\"o\">)</span>  <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 263914574,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638821157
    },
    {
        "content": "<p>It's because of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.fintype\">docs#set.fintype</a></p>",
        "id": 263915543,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638821359
    },
    {
        "content": "<p>Lean doesn't do magic -- any question you have about how something happens, you can find out from Lean by asking it directly.</p>",
        "id": 263916070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638821460
    },
    {
        "content": "<p><code>set.fintype</code> says that the \"power set\" of a finite type is finite.</p>",
        "id": 263919136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638822096
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> This works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 263919331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638822132
    },
    {
        "content": "<p>To do it without <code>open_locale classical</code> you probably need to know that membership of <code>s</code> is decidable.</p>",
        "id": 263919509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638822175
    },
    {
        "content": "<p>I forgot you needed <code>[decidable_pred (∈ s)]</code>, not <code>decidable_eq</code>. Sorry for the incorrect advice</p>",
        "id": 263919822,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638822312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> That's for <code>fintype (set α)</code> -- <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.fintype\">docs#subtype.fintype</a> is what gives individual sets their fintype instance</p>",
        "id": 263919953,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1638822369
    },
    {
        "content": "<p>Yes Antoine you're not classical enough yet. If you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>and then click on <code>fintype.card ↥s</code> in the infoview you can see that it's using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.fintype\">docs#subtype.fintype</a> , and if you click on that you can see it is using <code>classical.prop_decidable (a ∈ s)</code>, so now we know you can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">fintype.card</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263919984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638822393
    },
    {
        "content": "<p>and as Kyle says, <code>[∀ a, decidable (a ∈ s)]</code> is usually abbreviated <code>[decidable_pred (∈ s)]</code></p>",
        "id": 263920097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638822462
    },
    {
        "content": "<p>Oh, I see! Actually, I'm glad to have fallen on a constructivism problem… Thanks to all of you.</p>",
        "id": 263920111,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638822478
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/116395-maths/topic/subsets.20of.20fintypes/near/263919953\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> That's for <code>fintype (set α)</code> -- <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.fintype\">docs#subtype.fintype</a> is what gives individual sets their fintype instance</p>\n</blockquote>\n<p>Sorry, I meant <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_fintype\">docs#set_fintype</a>. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.fintype\">docs#subtype.fintype</a> is defeq to it, but won't fire here.</p>",
        "id": 263920232,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638822545
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite.to_finset\">docs#set.finite.to_finset</a></p>",
        "id": 263924905,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638824927
    },
    {
        "content": "<p>One can use that, and you know that s.finite by s.finite.of_fintype</p>",
        "id": 263925072,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638825016
    },
    {
        "content": "<p>The linking lemma to the approaches mentioned previously is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite.card_to_finset\">docs#set.finite.card_to_finset</a></p>",
        "id": 263925370,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638825183
    }
]