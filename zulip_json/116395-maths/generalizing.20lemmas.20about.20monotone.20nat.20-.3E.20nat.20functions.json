[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/12443\">#12443</a> I proved the following, very specific lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fib_between</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">fib</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fib</span> <span class=\"n\">k.succ</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>This is obviously be generalized, but I'm not exactly sure how much. So far I've split it into two lemmas: an unbounded monotone function satisfies this property, and a strictly monotone function is unbounded. However so far I'm only stating it for <code>ℕ → ℕ</code> functions, and I'm having trouble stating exactly what kind of an ordered set is necessary. At least for <code>ℤ</code> one could state something similar, but the <code>f 0 ≤ n</code> assumption then becomes problematic...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">ex_le_lt_of_mono_of_unbounded</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hmono</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hunbounded</span> <span class=\"o\">:</span> <span class=\"n\">set.unbounded</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hlow</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">):</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">k.succ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra'</span> <span class=\"n\">next</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">k.succ</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">all_bounded</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">Hlow</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">next</span> <span class=\"n\">k</span> <span class=\"n\">IH</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">bounded</span> <span class=\"o\">:</span> <span class=\"n\">set.bounded</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hv</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">Hk</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">Hv</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">Hv</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">Hk</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">all_bounded</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">not_unbounded</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">set.unbounded</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">set.not_unbounded_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">contradiction</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">arg_le_strict_mono</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Hmono</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">zero_le</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">n.succ</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">IH</span>\n    <span class=\"bp\">...</span>    <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">n.succ</span> <span class=\"o\">:</span> <span class=\"n\">Hmono</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">lt_succ_iff</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">unbounded_of_strict_mono</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hmono</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set.unbounded</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra'</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">bounded</span> <span class=\"o\">:</span> <span class=\"n\">set.bounded</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">set.not_unbounded_iff</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">Hm</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">bounded</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n    <span class=\"k\">calc</span> <span class=\"n\">m.succ</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">m.succ</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">arg_le_strict_mono</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span>\n    <span class=\"bp\">...</span>         <span class=\"bp\">≤</span> <span class=\"n\">m</span>        <span class=\"o\">:</span> <span class=\"n\">Hm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">m.succ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set.mem_range_self</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">linarith</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 274423838,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646673080
    },
    {
        "content": "<p>Your <code>arg_le_strict_mono</code> is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/strict_mono.id_le\">docs#strict_mono.id_le</a>. For the <code>strict_mono</code> -&gt; <code>unbounded</code> part, you need <code>no_max_order</code>on the domain and something like eventually <a href=\"https://leanprover-community.github.io/mathlib_docs/find/well_founded\">docs#well_founded</a> on the codomain. For the <code>unbounded</code> -&gt; <code>exists_between</code> part, you need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_order\">docs#linear_order</a> + <a href=\"https://leanprover-community.github.io/mathlib_docs/find/succ_order\">docs#succ_order</a> on the domain.</p>",
        "id": 274425451,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646673634
    },
    {
        "content": "<p>are you sure you need <code>well_founded</code>? I'm pretty sure \\Z isn't and yet it works on \\Z...</p>",
        "id": 274431094,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646675775
    },
    {
        "content": "<p>\"<strong>eventually</strong> well-founded\"</p>",
        "id": 274435147,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646677224
    },
    {
        "content": "<p>It's like <code>∀ a, (Ici a).is_wf</code>.</p>",
        "id": 274435335,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646677301
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/generalizing.20lemmas.20about.20monotone.20nat.20-.3E.20nat.20functions/near/274425451\">said</a>:</p>\n<blockquote>\n<p>For the <code>unbounded</code> -&gt; <code>exists_between</code> part, you need <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_order\">docs#linear_order</a> + <a href=\"https://leanprover-community.github.io/mathlib_docs/find/succ_order\">docs#succ_order</a> on the domain.</p>\n</blockquote>\n<p>Well that's not enough, consider <code>f(n) = 1 - 1/n</code></p>",
        "id": 274436424,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646677746
    },
    {
        "content": "<p>What's the codomain?</p>",
        "id": 274440078,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646679260
    },
    {
        "content": "<p>nat -&gt; rat</p>",
        "id": 274455764,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646686510
    },
    {
        "content": "<p>Well, <code>range f</code> is bounded then.</p>",
        "id": 274475664,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646696868
    },
    {
        "content": "<p>looks like I've misread something :P</p>",
        "id": 274475773,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646696941
    },
    {
        "content": "<p>just realized that there's <code>set.bounded</code> and <code>bdd_above</code>. Is one of these preferred?</p>",
        "id": 274530924,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646740584
    },
    {
        "content": "<p><code>bdd_above</code></p>",
        "id": 274531754,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646741055
    }
]