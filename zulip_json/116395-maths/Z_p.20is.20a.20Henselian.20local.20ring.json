[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">henselian</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">local_ring</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_henselian</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.monic</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a₀</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">f.eval</span> <span class=\"n\">a₀</span> <span class=\"bp\">∈</span> <span class=\"n\">maximal_ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"n\">f.derivative.eval</span> <span class=\"n\">a₀</span><span class=\"o\">)),</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">f.is_root</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">a₀</span> <span class=\"bp\">∈</span> <span class=\"n\">maximal_ideal</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">is_adic_complete.henselian</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">local_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_adic_complete</span> <span class=\"o\">(</span><span class=\"n\">maximal_ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">henselian</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"c1\">-- long proof</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"n\">p.prime</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">henselian</span> <span class=\"n\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/8986/files#diff-cfe5a51d476c544368bad568fb985d5b8dae8a645bd7434e8da6b9a9da5f29e4R664\">https://github.com/leanprover-community/mathlib/pull/8986/files#diff-cfe5a51d476c544368bad568fb985d5b8dae8a645bd7434e8da6b9a9da5f29e4R664</a></p>",
        "id": 251939521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630701844
    },
    {
        "content": "<p>I still need to clean up a bunch of prerequisites. But the code is sorry free.</p>",
        "id": 251939552,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630701864
    },
    {
        "content": "<p>Dumb maths question: is this equivalent to \"a factorization of f mod m into coprime monics lifts\"? You've just done the case where a factor is linear.</p>",
        "id": 251947922,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630706557
    },
    {
        "content": "<p>Henselization is I think like localization and completion -- it's unique up to unique isomorphism.</p>",
        "id": 251947990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630706610
    },
    {
        "content": "<p>Dumb Lean question: why should these things be classes rather than structures? Is it just because they're props so they may as well be?</p>",
        "id": 251948146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630706723
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Z_p.20is.20a.20Henselian.20local.20ring/near/251947922\">said</a>:</p>\n<blockquote>\n<p>Dumb maths question: is this equivalent to \"a factorization of f mod m into coprime monics lifts\"? You've just done the case where a factor is linear.</p>\n</blockquote>\n<p>This is equivalent, but the proof is not easy: <a href=\"https://stacks.math.columbia.edu/tag/04GG\">stacks#04GG</a></p>",
        "id": 251948924,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630707273
    },
    {
        "content": "<p>It's time to work on etale maps :)</p>",
        "id": 251948946,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630707297
    },
    {
        "content": "<p>(There may be a more elementary proof of this equivalence though.)</p>",
        "id": 251948996,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1630707347
    },
    {
        "content": "<p>My feeling is that if we take <em>any</em> interesting class of morphisms of schemes (e.g. finite, etale, affine...) and define this concept for rings and then try to extend it to schemes, we will find out pretty quickly what we should be doing next in algebraic geometry (or we might even find that our current set-up is not ideal).</p>",
        "id": 251949080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1630707386
    },
    {
        "content": "<p>I've finished cleaning up the whole mess. It's now about 10 PRs</p>",
        "id": 251989121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630749824
    },
    {
        "content": "<p>The next two PRs in this saga are</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/8991\">#8991</a> feat(ring_theory/ideal/local_ring): residue field is an algebra</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/8993\">#8993</a> feat(linear_algebra/smodeq): sub_mem, eval</li>\n</ul>",
        "id": 252169737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1630932077
    },
    {
        "content": "<p>Another one is unblocked:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/8994\">#8994</a> feat(ring_theory/discrete_valuation_ring): is_Hausdorff</li>\n</ul>",
        "id": 252425629,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631090500
    },
    {
        "content": "<p>And we're ready for the \"big\" one:</p>\n<ul>\n<li><a href=\"https://github.com/leanprover-community/mathlib/issues/8986\">#8986</a> feat(ring_theory/henselian): Henselian local rings</li>\n</ul>",
        "id": 252600000,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631181602
    },
    {
        "content": "<p>The PR contains</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"c1\">-- `R` is a local ring</span>\n  <span class=\"k\">let</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_unit</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"bp\">↑</span><span class=\"n\">hx.some</span><span class=\"bp\">⁻¹</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hinv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">is_unit</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">inv</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">inv</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span><span class=\"o\">],</span> <span class=\"n\">convert</span> <span class=\"n\">units.mul_inv</span> <span class=\"n\">hx.some</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hx.some_spec</span> <span class=\"o\">},</span>\n</code></pre></div>\n<p>as part of a proof.<br>\nShould we have a noncomputable <code>monoid_with_zero.inv</code> globally?</p>",
        "id": 252600198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631181685
    },
    {
        "content": "<p>Hmm, if the junk value is <code>1</code>, it could even be defined for arbitrary monoids.</p>",
        "id": 252600324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631181751
    },
    {
        "content": "<p>That seems like it would give a lot of defeq issues, if you want to use <code>monoid.inv</code> in the place of <code>group_with_zero.has_inv.inv</code>.</p>",
        "id": 252600424,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631181818
    },
    {
        "content": "<p>If we define it globally, it should come with a big warning sign: <span aria-label=\"danger\" class=\"emoji emoji-26a0\" role=\"img\" title=\"danger\">:danger:</span> <img alt=\":bourbaki:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/17547.png\" title=\"bourbaki\"> <span aria-label=\"nuclear\" class=\"emoji emoji-2622\" role=\"img\" title=\"nuclear\">:nuclear:</span> <span aria-label=\"biohazard\" class=\"emoji emoji-2623\" role=\"img\" title=\"biohazard\">:biohazard:</span> USE WITH CARE!</p>",
        "id": 252601233,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631182294
    },
    {
        "content": "<p>probably it should not be called <code>inv</code>, since it isn't the inverse</p>",
        "id": 252601869,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631182653
    },
    {
        "content": "<p>of course the same could be said for <code>inv</code> on a field...</p>",
        "id": 252601895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631182675
    },
    {
        "content": "<p><code>inv_ish</code>? <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 252601965,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631182695
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">x</span><span class=\"bp\">`☡`</span> <span class=\"o\">:=</span> <span class=\"n\">monoid.accursed_unutterable_unsafe_inv</span>\n</code></pre></div>",
        "id": 252602927,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631183145
    },
    {
        "content": "<p>That notation is already taken for nat.sub on my branch of mathlib.</p>",
        "id": 252603008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631183174
    },
    {
        "content": "<p>It's only three lines of code. I'm fine with keeping it inline in the proof, for now.</p>",
        "id": 252605779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631184898
    },
    {
        "content": "<p>If it shows up more often, we can extract it into a global def.</p>",
        "id": 252605803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631184914
    },
    {
        "content": "<p>We kinda have this already for fields and my wip PR on matrices, where one can upgrade a monoid to a div_inv_monoid over some predicate. Cf fpow</p>",
        "id": 252606118,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1631185100
    },
    {
        "content": "<p>Isn't this <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring.inverse\">docs#ring.inverse</a>?</p>",
        "id": 253586954,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631801011
    },
    {
        "content": "<p>Which just to keep things interesting, only requires <code>monoid_with_zero</code></p>",
        "id": 253587163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631801083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Brilliant, so it already exists.</p>",
        "id": 253588407,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631801562
    },
    {
        "content": "<p>Having looked at its definition, it might be better to replace <code>h.some</code> with <code>h.unit</code></p>",
        "id": 253588472,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631801587
    },
    {
        "content": "<p>I don't have thoughts about that</p>",
        "id": 253588806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631801721
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Z_p.20is.20a.20Henselian.20local.20ring/near/253588472\">said</a>:</p>\n<blockquote>\n<p>Having looked at its definition, it might be better to replace <code>h.some</code> with <code>h.unit</code></p>\n</blockquote>\n<p>Done. And updated the henselian PR to use <code>ring.inverse</code></p>",
        "id": 253736514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631883009
    }
]