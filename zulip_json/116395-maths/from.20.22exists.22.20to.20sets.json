[
    {
        "content": "<p>I was very surprised with how much I had to struggle here. Making topological spaces from first principles for pedagogical reasons. The axiom for infinite unions uses <code>sUnion</code>. When I went to prove that a subset was open iff it was locally open, I really got bogged down with <code>classical.some</code>. I just ran into Jeremy in a breakout room and told him my woes, and he encouraged me to press on. I've done it. The difficulty is that if <code>V</code> is locally open then to create my set of subsets I need to use <code>classical.some</code>, which I always feel is intimidating for beginners. Am I missing a trick? Is there some infrastructure which can help me here?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"n\">class</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_open</span>        <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_open_univ</span>   <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">univ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_open_inter</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"err\">∩</span> <span class=\"n\">V</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">is_open_sUnion</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"err\">𝒞</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"err\">⋃₀</span> <span class=\"err\">𝒞</span><span class=\"o\">))</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">open_iff_locally_open</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">V</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hV</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"err\">𝒞</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">hU</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n    <span class=\"n\">convert</span> <span class=\"n\">is_open_sUnion</span> <span class=\"err\">𝒞</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">mem_sUnion</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n        <span class=\"n\">split</span><span class=\"o\">,</span>\n          <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">],</span>\n        <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some_spec</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n        <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">mem_sUnion</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">,</span> <span class=\"n\">hxU</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">h</span><span class=\"err\">𝒞</span> <span class=\"n\">U</span> <span class=\"n\">hU</span> <span class=\"k\">with</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hUV</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">hUV</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hxU</span> <span class=\"o\">}},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"err\">𝒞</span> <span class=\"n\">U</span> <span class=\"n\">hU</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hU</span> <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">topological_space</span>\n</code></pre></div>",
        "id": 204076120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594902758
    },
    {
        "content": "<p>I guess my question is whether there is a better definition for <code>𝒞</code>, the set of sets I need to apply <code>is_open_sUnion</code>.</p>",
        "id": 204076346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594902866
    },
    {
        "content": "<p>The usual \"trick\" is to take all the sets which could be chosen</p>",
        "id": 204076420,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594902902
    },
    {
        "content": "<p>i.e. here all the sets which are open and contained in V</p>",
        "id": 204076439,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594902914
    },
    {
        "content": "<p>their union is open and contained in V and, by <code>h</code>, contains every point of V, so equals V</p>",
        "id": 204076456,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594902936
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">open_iff_locally_open&#39;</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">V</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hV</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hV</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"err\">𝒞</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"n\">U</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span><span class=\"o\">},</span>\n    <span class=\"n\">convert</span> <span class=\"n\">is_open_sUnion</span> <span class=\"err\">𝒞</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n        <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">mem_sUnion</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_sUnion</span><span class=\"o\">,</span>\n        <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hUV</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hxU</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hUV</span> <span class=\"n\">hxU</span> <span class=\"o\">}},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">U</span> <span class=\"bp\">⟨</span><span class=\"n\">hU</span><span class=\"o\">,</span> <span class=\"n\">hUV</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hU</span> <span class=\"o\">}}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 204089520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594909149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> can you pull off a similar trick to prove that a compact subspace of a Hausdorff space is closed? The proof I know involves showing that the complement is open, because if C compact, x \\notin C is fixed (and we're looking for an open neighbourhood in the complement of C) and y \\in C, then we can choose x \\in V(y) and y \\in W(y) disjoint; the union of the W(y) covers C so there's a finite subcover, and the corresponding finite intersection of the V's is open and disjoint from C. But when I apply Hausdorffness infinitely often I'm using AC.</p>",
        "id": 204110585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594918029
    },
    {
        "content": "<p>I guess you can look at all those open sets W whose complement contains an open neighborhood of x. This is a cover of C (because for every y in C, there exists blah blah--this doesn't use choice) and then after passing to a finite subcover, you can pick the finitely many open neighborhoods V of x.</p>",
        "id": 204111248,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594918362
    },
    {
        "content": "<p>But maybe more natural is to form the family indexed by all pairs (V, W) where V and W are disjoint open neighborhoods of x and y respectively, which assigns to such a pair W.</p>",
        "id": 204111320,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594918407
    },
    {
        "content": "<p>Sorry, I mean the family of all pairs (V, W) such that V is an open neighborhood of x, and W is an open set disjoint from V.</p>",
        "id": 204111391,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594918442
    },
    {
        "content": "<p>Proving it's a cover of C doesn't require choice, and then from a finite subcover (as in, a finite subset of the indexing set) you directly obtain the Vs</p>",
        "id": 204111500,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594918526
    },
    {
        "content": "<p>I think I might have learned this exact argument from Mario actually.</p>",
        "id": 204112377,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594918899
    },
    {
        "content": "<p>Kenny is at Xena and he told me a version involving y but this is even better :-)</p>",
        "id": 204119475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594922292
    }
]