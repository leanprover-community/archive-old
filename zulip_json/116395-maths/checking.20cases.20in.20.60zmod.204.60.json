[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.zmod.algebra</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- check all the cases</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">    16 goals, but -- disaster -- many are not in a good form.</span>\n<span class=\"cm\">    Example goal:</span>\n\n<span class=\"cm\">    h : bit1 ⟨1, _⟩ ^ 2 = ⟨1, _⟩ ^ 3 - 1</span>\n<span class=\"cm\">    ⊢ ⟨1, _⟩ = 1</span>\n\n<span class=\"cm\">  -/</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't know how to break into cases whilst making the goals sensible. <code>cases h</code> makes progress but it takes a long time, and can time out when you try it 15 times. Is this a bug in <code>fin_cases</code>? Or is it something to do with the term of type <code>fintype (zmod 4)</code>?</p>",
        "id": 292591435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660056111
    },
    {
        "content": "<p>if you <code>dsimp at *</code> it should clear those up</p>",
        "id": 292591755,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1660056232
    },
    {
        "content": "<p>Oh I just found a hack:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- check all the cases</span>\n  <span class=\"n\">change</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"n\">at</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"n\">at</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">fin_cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">fin_cases</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 292592514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660056482
    },
    {
        "content": "<p><code>dec_trivial!</code> does this in one go.<br>\nDo you need all the cases specifically for some reason?</p>",
        "id": 292592715,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1660056538
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 292593073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660056646
    },
    {
        "content": "<p>I've learnt this some while ago (through some of the community members on Zulip); I was also first trying <code>fin_cases</code>...</p>",
        "id": 292593208,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1660056699
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I actually wrote a tactic for this a while ago, and then <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> wrote a better one!  It's not PR'd, but by popular request it could be.</p>",
        "id": 292634256,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1660070003
    },
    {
        "content": "<p><a href=\"#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Code.20review.20for.20small.20tactic\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F-tactics/topic/Code.20review.20for.20small.20tactic</a></p>",
        "id": 292634307,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1660070021
    },
    {
        "content": "<p>Yeah I knew this had come up before but I didn't remember that! Thanks for letting me know!</p>",
        "id": 292635460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660070448
    }
]