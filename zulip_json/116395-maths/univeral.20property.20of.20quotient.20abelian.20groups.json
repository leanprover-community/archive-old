[
    {
        "content": "<p>I have a <code>comm_group G</code> and a subgroup <code>N</code>, which is the kernel of an <code>is_group_hom f : G -&gt; H</code>. I'd like a quotient group <code>G/N</code>, and an injective group homomorphism from <code>G/N</code> to <code>H</code>. The quotient has been made for general groups (in <code>group_theory.coset</code>) but not the injective hom as far as I can see, and also for modules over an arbitrary ring (with the injective hom), so I can either build the injection for general groups or I can persuade Lean that an abelian group is the same as a Z-module. Have either of these been done? Neither should be hard, but which to do?</p>",
        "id": 129953243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532030609
    },
    {
        "content": "<p>Should there be an instance <code>(add_comm_group G) -&gt; module ℤ G</code>? What about <code>comm_group G -&gt; module ℤ G</code>? Do either of these cause problems?</p>",
        "id": 129953396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532030768
    },
    {
        "content": "<p>Modules cause problems, in general. I would stay away of them for now.</p>",
        "id": 129953422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532030820
    },
    {
        "content": "<p>I think it is best to prove a bit about the universal property of group quotients.</p>",
        "id": 129953456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532030863
    },
    {
        "content": "<p>I'm trying to define perfectoid spaces, I've just spent an hour worrying about constructing an object isomorphic to an object I already have but in a different universe, and now I'm doing quotient groups :-) Some things are just slow going, I guess!</p>",
        "id": 129953616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532031058
    },
    {
        "content": "<p>I'm also having universe issues and type class inference issues at the moment</p>",
        "id": 129953639,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532031109
    },
    {
        "content": "<p>It's good for the soul I guess...</p>",
        "id": 129953691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532031144
    },
    {
        "content": "<p>I'm discovering new error messages</p>",
        "id": 129953783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532031260
    },
    {
        "content": "<p><code>synthesized type class instance is not definitionally equal to expression inferred by typing rules</code></p>",
        "id": 129953784,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532031269
    },
    {
        "content": "<p>I think an instance for <code>add_comm_group G -&gt; module ℤ G</code> will not go awry</p>",
        "id": 129953797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532031296
    },
    {
        "content": "<p>Does that say \"you have a diamond\"?</p>",
        "id": 129953799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532031297
    },
    {
        "content": "<p><code>comm_group G -&gt; module ℤ G</code> doesn't make any sense</p>",
        "id": 129953812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532031309
    },
    {
        "content": "<blockquote>\n<p>I think an instance for <code>add_comm_group G -&gt; module ℤ G</code> will not go awry</p>\n</blockquote>\n<p><code>module</code> might extend <code>add_comm_group</code> -- will there be an instance the other way?</p>",
        "id": 129953831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532031345
    },
    {
        "content": "<blockquote>\n<p><code>comm_group G -&gt; module ℤ G</code> doesn't make any sense</p>\n</blockquote>\n<p>well that's a pain because my group laws are all <code>*</code> :-/</p>",
        "id": 129953882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532031377
    },
    {
        "content": "<p>ah, actually I think you are right</p>",
        "id": 129953884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532031379
    },
    {
        "content": "<p>I'm sticking to groups.</p>",
        "id": 129953931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532031467
    },
    {
        "content": "<p>I think it's about time we had a mathlib issue about modules, the chat about the problems is dispersed here and there in Zulip, I don't understand the problems myself, and they're stopping Patrick from doing stuff.</p>",
        "id": 129953995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532031515
    },
    {
        "content": "<p><code>instance [group α] (s : set α) [normal_subgroup s] : group (left_cosets s) := ...</code>. That's in <code>section quotient_group</code>. How do I find out the name of that instance?</p>",
        "id": 129954121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532031715
    },
    {
        "content": "<p>[all in <code>group_theory/coset.lean</code>]</p>",
        "id": 129954166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532031735
    },
    {
        "content": "<p><code>left_cosets.group</code></p>",
        "id": 129954201,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532031823
    },
    {
        "content": "<p>Clue is in the statement.</p>",
        "id": 129954207,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532031837
    },
    {
        "content": "<p>I remembered there was an algorithm but couldn't remember what it was. Thanks Chris.</p>",
        "id": 129954251,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532031865
    },
    {
        "content": "<p>you could also use that <code>print_names</code> command we did recently</p>",
        "id": 129954312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532031955
    },
    {
        "content": "<p>That's the other type of answer to this question. All that was way over my head, but I cut and pasted some stuff and it was pretty cool :-)</p>",
        "id": 129954363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532031990
    },
    {
        "content": "<blockquote>\n<p>you could also use that <code>print_names</code> command we did recently</p>\n</blockquote>\n<p>Is that in mathlib?</p>",
        "id": 129954396,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532032051
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/full.20names\" title=\"#narrow/stream/113488-general/topic/full.20names\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/full.20names</a></p>",
        "id": 129954475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532032142
    },
    {
        "content": "<blockquote>\n<p>I think it's about time we had a mathlib issue about modules, the chat about the problems is dispersed here and there in Zulip, I don't understand the problems myself, and they're stopping Patrick from doing stuff.</p>\n</blockquote>\n<p>I completely agree. They are also stopping me from doing stuff. (Both with simplicial homology and with Lie algebras...)</p>",
        "id": 129989346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532083976
    },
    {
        "content": "<p>My hope here is that someone will fix my issue in the norms PR, and this will explain how to handle modules</p>",
        "id": 129989432,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532084136
    },
    {
        "content": "<p>But you've been hoping that someone will fix modules for a long time now, and what I find I'm doing is: occasionally asking \"what is the problem with modules again?\", and someone answers, in some random thread, and I go \"oh\", and then the discussion degenerates into <code>out_param</code> stuff, and peters out, and then I forget everything, and it was a waste of everyone's time even talking about it. Making it an issue will at least give me a place where I can read about what the problem is and exactly what it is stopping people from doing.</p>",
        "id": 129989535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532084322
    },
    {
        "content": "<p>The difference this time is I opened a PR for normed spaces. But feel free to open an issue</p>",
        "id": 129989565,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532084365
    },
    {
        "content": "<p>If I open the issue it will just be a one-liner saying \"something is wrong with modules and this issue is a place where we can talk about what it is and how to fix it\".</p>",
        "id": 129989631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532084462
    },
    {
        "content": "<p>But I'm happy to do this.</p>",
        "id": 129989638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532084471
    },
    {
        "content": "<p>The only ones who could write a much better description are Mario, Johannes and Sebastian</p>",
        "id": 129989649,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532084516
    },
    {
        "content": "<p>Not you?</p>",
        "id": 129989701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532084635
    }
]