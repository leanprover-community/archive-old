[
    {
        "content": "<p>What is the right notion of an eventually monotone function? I would like a slightly stronger version of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">tendsto_of_monotone</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">Œπ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œπ</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h_mono</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"bp\">‚à®</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>only requiring that <code>‚àÄ·∂†  ‚¶Éa b‚¶Ñ in at_top,  a ‚â§ b ‚Üí f a ‚â§ f b</code> instead of <code>monotone f</code> which is <code>‚àÄ ‚¶Éa b‚¶Ñ,  a ‚â§ b ‚Üí f a ‚â§ f b</code></p>",
        "id": 255020591,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632736028
    },
    {
        "content": "<p>Oooh, that's interesting. I'll have a think.</p>",
        "id": 255020990,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632736231
    },
    {
        "content": "<p>In particular, does it make sense to say that a function is monotone at a filter?</p>",
        "id": 255021102,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632736297
    },
    {
        "content": "<p>Well, it seems very natural - I guess it is a question for <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> .</p>",
        "id": 255021232,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632736349
    },
    {
        "content": "<p>At <strong>any</strong> filter? I can't yet see what would be the correct definition.</p>",
        "id": 255021296,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632736396
    },
    {
        "content": "<p>Ah well, at <strong>any</strong> filter I don't know.</p>",
        "id": 255021326,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632736414
    },
    {
        "content": "<p><del>Well, actually yes: it just means that there exists <code>x</code> in the filter where they coincide.</del> Sorry, I take it back - I now understand your question. Let me think more.</p>",
        "id": 255021421,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632736446
    },
    {
        "content": "<p>No?</p>",
        "id": 255021427,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632736450
    },
    {
        "content": "<p>Okay, I have an idea, but it works when the topology is on codomain, not the domain <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 255021962,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632736718
    },
    {
        "content": "<p>Well, the definition of something holding eventually is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eventually</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">‚àà</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>And I don't see why this can't generalise to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">eventually_pair</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"n\">x</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">}</span> <span class=\"bp\">‚àà</span>  <span class=\"n\">f</span> <span class=\"bp\">√ó·∂†</span> <span class=\"n\">g</span>\n</code></pre></div>",
        "id": 255021983,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632736729
    },
    {
        "content": "<p>(Of course you can make it more general, I have just tried something for the sake of the discussion).</p>",
        "id": 255022043,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632736771
    },
    {
        "content": "<p>So you want this, right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">monotone_at</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ±</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">ab</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"n\">b</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"bp\">‚àà</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 255022253,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632736850
    },
    {
        "content": "<p>Well, yes; actually my question was really if this had already been implemented.</p>",
        "id": 255022313,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632736881
    },
    {
        "content": "<p>Most probably not</p>",
        "id": 255022334,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632736893
    },
    {
        "content": "<p>Strange, no?</p>",
        "id": 255022347,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632736901
    },
    {
        "content": "<p>The thing is we're talking about filters on <code>Œ±</code>, not on <code>Œ± √ó Œ±</code>.</p>",
        "id": 255022354,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632736906
    },
    {
        "content": "<p>Well, but given a pair of filters on <code>Œ±</code> you get a filter on <code>Œ± √ó Œ±</code>...</p>",
        "id": 255022471,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632736957
    },
    {
        "content": "<p>Yes, but is that the correct definition? The best test would be to prove your lemma above.</p>",
        "id": 255022526,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632736992
    },
    {
        "content": "<p>Good point! I'll go ahead and post the result ASAP.</p>",
        "id": 255022557,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632737014
    },
    {
        "content": "<p>I must say I didn't know even to the existence of filters<br>\n<span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/116395-maths/topic/eventually.20monotone/near/255022347\">said</a>:</p>\n<blockquote>\n<p>Strange, no?</p>\n</blockquote>\n<p>I must say I didn't know even to the existence of filters before joining mathlib, so I can't say what I was expecting. Is eventual monotonicity a well-established concept?</p>",
        "id": 255022763,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632737112
    },
    {
        "content": "<p>Wait, I now remember reading about limits of relations.</p>",
        "id": 255022899,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632737190
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.rtendsto\">docs#filter.rtendsto</a></p>",
        "id": 255022973,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632737244
    },
    {
        "content": "<p>Well, before joining mathlib, I had been taught (oddly enough) to run away from filters as fast as possible. So I have no idea about what is \"well-estabished\".</p>",
        "id": 255022988,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632737253
    },
    {
        "content": "<p>Aaah, I remember. I wrote those docstrings.</p>",
        "id": 255023004,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632737266
    },
    {
        "content": "<p>Great!</p>",
        "id": 255023006,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632737266
    },
    {
        "content": "<p>You wrote them ?!? Wow, but do you also find the time to breath, from time to time?</p>",
        "id": 255023094,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632737310
    },
    {
        "content": "<p>I was on holidays <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 255023118,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632737334
    },
    {
        "content": "<p>Note however that I'm not sure this is what you want. It is considering functions <code>Œ± ‚Üí Œ≤</code>as relations <code>rel Œ± Œ≤</code>. What you want is rather considering relations as functions with twice as much input.</p>",
        "id": 255023252,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632737410
    },
    {
        "content": "<p>I swear I did take a break from Lean! Every day! It's what other people euphemically call \"sleep\".</p>",
        "id": 255023331,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632737466
    },
    {
        "content": "<p>Other people call it addiction... <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 255023377,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632737499
    },
    {
        "content": "<p>Thanks, at any rate. I'll have a look and will try to see if I can come up with something useful</p>",
        "id": 255023488,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1632737555
    },
    {
        "content": "<p>My first thought would be that a function is eventually monotone along a filter <code>f</code> if there is a set belonging to <code>f</code> on which it is monotone. Is that the same as <code>eventually_pair</code> with <code>f</code> twice? I think so, right?</p>",
        "id": 255114402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632774347
    },
    {
        "content": "<p>Yeah, I had the same definition in mind, but I'm not so sure it's the correct definition for a general filter.</p>",
        "id": 255114527,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632774389
    },
    {
        "content": "<p>How is it going, Filippo?</p>",
        "id": 255114584,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632774417
    },
    {
        "content": "<p>I think that the following 3 definitions are equivalent (the first two use a non-existing <code>mono_on</code>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">l.lift'</span> <span class=\"n\">powerset</span><span class=\"o\">,</span> <span class=\"n\">mono_on</span> <span class=\"n\">f</span> <span class=\"n\">s</span>\n<span class=\"bp\">‚àÉ·∂†</span> <span class=\"n\">s</span> <span class=\"k\">in</span> <span class=\"n\">l.lift'</span> <span class=\"n\">powerset</span><span class=\"o\">,</span> <span class=\"n\">mono_on</span> <span class=\"n\">f</span> <span class=\"n\">s</span>\n<span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">p</span> <span class=\"k\">in</span> <span class=\"n\">l.prod</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">p.1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">p.2</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">f</span> <span class=\"n\">p.1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">f</span> <span class=\"n\">p.2</span>\n</code></pre></div>",
        "id": 255115315,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632774747
    },
    {
        "content": "<p>Note that I'm introducing <code>monotone_on</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/9119\">#9119</a>, so just assume it exists.</p>",
        "id": 255115497,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632774835
    },
    {
        "content": "<p>The first one says that for some <code>s ‚àà l</code>, your function is monotone on any <code>t  ‚äÜ s</code>.</p>",
        "id": 255115579,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632774855
    },
    {
        "content": "<p>I think the last one is what is more intuitively eventual monotonicity.</p>",
        "id": 255115651,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632774889
    },
    {
        "content": "<p>What about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">b</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"n\">b</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 255115671,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632774898
    },
    {
        "content": "<p>So these are the same basically because <code>mono_on f s</code> is itself monotone (or antitone I guess we're supposed to say) in <code>s</code></p>",
        "id": 255115741,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632774926
    },
    {
        "content": "<p>Yes.</p>",
        "id": 255115763,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632774940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Ya√´l Dillies</span> This one in case <code>l = at_top</code> says <code>‚àÉ N, ‚àÄ n ‚â• N, ‚àÉ M, ‚àÄ m ‚â• M, n ‚â§ m ‚Üí f n ‚â§ f m</code>.</p>",
        "id": 255115945,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632775017
    },
    {
        "content": "<p>This is not what you want.</p>",
        "id": 255115965,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632775023
    },
    {
        "content": "<p>Because <code>M</code> can depend on <code>N</code>.</p>",
        "id": 255115993,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632775032
    },
    {
        "content": "<p>Well, I'm not sure this isn't what we want. It is definitely looser than your other definitions, but maybe that's enough?</p>",
        "id": 255116270,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1632775162
    },
    {
        "content": "<p>Well it might be enough for something, but it's not what \"evenually monotone\" means.</p>",
        "id": 255116526,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632775295
    },
    {
        "content": "<p>E.g., you get a different notion if you swap to <code>eventually</code>s.</p>",
        "id": 255116659,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1632775361
    },
    {
        "content": "<p>e.g. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>+</mo><mn>10</mn><mi>sin</mi><mo>‚Å°</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">x + 10 \\sin(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">10</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\">sin</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> has this kind of behavior (that has domain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>, but the behavior is the same if you sample finely enough)</p>",
        "id": 255116706,
        "sender_full_name": "Reid Barton",
        "timestamp": 1632775385
    }
]