[
    {
        "content": "<p>I remember Andrej Bauer pointing out to me that if one has a \"cardinal of a set\" definition of natural numbers, then statements like commutativity of addition need not be proved by induction, they can instead be proved by showing that A disjoint union B bijects with B disjoint union A.</p>\n<p>So I was thinking of trying to implement this in Lean because I'm giving a talk about numbers at <a href=\"http://semf.org.es/numerosity/\">this conference</a> and in particular I was wondering how to actually define nat in a different way to the \"Peano\" Lean definition. One can start by defining <code>equiv</code> and proving it's an equivalence relation on <code>Type</code> and then taking the quotient (this is cardinals). Now one can define addition and show it's well-defined commutative -- but one still hasn't defined the naturals. One now wants to define the naturals as the \"finite cardinals\" but is there a non-inductive definition? One can define <code>succ</code> on cardinals, and then define finite inductively, via \"the cardinal of the empty type is finite; if the cardinal of X is finite then the cardinal of <code>option X</code> is finite\" -- but that is essentially rewriting Peano's definition. One could define finite as \"every injection from X to X is a bijection\" but now I'm a bit worried about whether one can prove that these are precisely the finite cardinals without using tools such as \"if there's an injection which isn't a bijection then there's an injection from nat into your type\" which uses nat, which of course isn't allowed.</p>",
        "id": 237628097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620292303
    },
    {
        "content": "<p>Can't you use <code>Fintype</code> mod equivalence?</p>",
        "id": 237628276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620292415
    },
    {
        "content": "<p>Oh that's a good idea! I should check to see if there is any mention of <code>nat</code> in any discussions here, but I am optimistic...</p>",
        "id": 237628498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620292548
    },
    {
        "content": "<p>I think you can make the definition \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span> is finite iff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi><mo>&lt;</mo><mi>κ</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\kappa &lt; \\kappa + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">κ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">κ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>\" non-circular. With this definition, you want an induction principle for finite cardinals, saying they are generated from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> by adding <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. The idea is that any finite <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span> is either <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>κ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\kappa&#x27; + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.835222em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">κ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, in which case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>κ</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>&lt;</mo><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa&#x27; &lt; \\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.790992em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">κ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span> is still finite. So you just need well-foundedness of cardinal <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&lt;</mo></mrow><annotation encoding=\"application/x-tex\">&lt;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&lt;</span></span></span></span>, which follows from the well-ordering principle.</p>",
        "id": 237632985,
        "sender_full_name": "David Wärn",
        "timestamp": 1620294968
    },
    {
        "content": "<p>where &lt; means \"injection but no bijection\" I guess. Yes, this looks like it's worth a try as well!</p>",
        "id": 237633238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620295125
    },
    {
        "content": "<p>Yes, you might want to be a bit more careful than usual with this definition since Cantor-Schöder-Bernstein sort of uses the naturals, but \"injection but no bijection\" should work.</p>",
        "id": 237633572,
        "sender_full_name": "David Wärn",
        "timestamp": 1620295272
    },
    {
        "content": "<p>The <code>Fintype</code> approach is certainly more natural, but it's not very different from Peano's definition. Basically a type is a fintype if it's empty or equivalent to a fintype plus one. Still the way you set up arithmetic becomes different.</p>",
        "id": 237633605,
        "sender_full_name": "David Wärn",
        "timestamp": 1620295292
    },
    {
        "content": "<p>You could pick out the naturals from the surreals. :-)</p>",
        "id": 237634662,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620295864
    },
    {
        "content": "<p>Yet another approach is</p>\n<ul>\n<li>use Peano naturals</li>\n<li>define <code>fin n</code></li>\n<li>prove that if <code>fin m</code> bijects with <code>fin n</code> then <code>m = n</code>. The key lemma for this is that you can subtract 1: if <code>option X</code> bijects with <code>option Y</code> then <code>X</code> bijects with <code>Y</code>.</li>\n<li>define addition and multiplication by recursion</li>\n<li>show by induction that <code>fin n + fin m</code> bijects with <code>fin (n+m)</code>, and <code>fin n x fin m</code> bijects with <code>fin (n * m)</code></li>\n<li>deduce semiring axioms</li>\n</ul>",
        "id": 237635473,
        "sender_full_name": "David Wärn",
        "timestamp": 1620296372
    },
    {
        "content": "<p>Yeah, I wanted to try and avoid Peano naturals completely -- it's an exercise to see if I can do this. Scott I had somehow imagined that going via surreals would be cheating because \"Peano's axioms are buried in there somewhere\" but looking at the definition of <code>pgame</code> it only has one constructor so it \"can't\" be, right? This is great, I'm really glad I asked here, I might do this as well and I think that's basically written the talk for me :-)</p>",
        "id": 237638053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620297842
    },
    {
        "content": "<p>I'm pretty sure no natural numbers are mentioned in setting up <code>pgame</code>, except to cast the natural numbers into <code>pgame</code>. It would actually be fun to have the very initial part of <code>pgame</code> defined without even the prelude. I think it is closer to the bare metal than anything else we have. :-)</p>",
        "id": 237638294,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298017
    },
    {
        "content": "<p>Don't you need some induction to prove the ring axioms, like with Peano naturals?</p>",
        "id": 237638452,
        "sender_full_name": "David Wärn",
        "timestamp": 1620298103
    },
    {
        "content": "<p>Sure there's lots of induction when setting up <code>pgame</code> and <code>surreal</code>. But none of it is induction on natural numbers, it's all just some-other-inductive-type-induction.</p>",
        "id": 237638563,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298196
    },
    {
        "content": "<p>It is definitely much more complicated in every way that setting up the Peano naturals!</p>",
        "id": 237638635,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1620298221
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I don't like this <code>Fintype</code> idea any more. <code>Fintype</code>, and <code>set finite</code>, use <code>fintype</code>, which uses <code>finset</code> which uses <code>multiset</code> which uses <code>list</code>, and <code>list</code> is cheating because the definition of <code>list unit</code> is the same as the definition of <code>nat</code> so it's not allowed.</p>",
        "id": 237688529,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620318479
    },
    {
        "content": "<p>That's sneaky</p>",
        "id": 237688671,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620318546
    },
    {
        "content": "<p><code>Fintype</code> is \"just\" the category of compact objects of <code>Type*</code></p>",
        "id": 237688931,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620318652
    },
    {
        "content": "<p>No nat involved</p>",
        "id": 237688949,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620318661
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> fair enough, I give up (-;</p>",
        "id": 237689093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620318724
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/alternative.20definition.20of.20naturals/near/237688931\">said</a>:</p>\n<blockquote>\n<p><code>Fintype</code> is \"just\" the category of compact objects of <code>Type*</code></p>\n</blockquote>\n<p>Can I define compact without mentioning \"finite subcover\"?</p>",
        "id": 237692195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620319974
    },
    {
        "content": "<p>Well, you can define <code>Fintype</code> as those types for which every injection is a bijection, right?</p>",
        "id": 237692594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620320131
    },
    {
        "content": "<p>This is David's claim above but I've not checked it yet.</p>",
        "id": 237692655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620320159
    },
    {
        "content": "<p>Compact in the categorical sense</p>",
        "id": 237692893,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620320250
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> that mentions <code>finite</code> somewhere, right?</p>",
        "id": 237693005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620320285
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/compact+object\">https://ncatlab.org/nlab/show/compact+object</a></p>",
        "id": 237693026,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620320292
    },
    {
        "content": "<p>Nope, just need the notion of a filtered colimit</p>",
        "id": 237693132,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620320339
    },
    {
        "content": "<p>But usually you define filtered category in terms of finite diagrams right? Or do you want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">κ</span></span></span></span>-filtered colimites for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">\\kappa =</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">κ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span></span> <code>Type</code>?</p>",
        "id": 237693795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620320563
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.is_filtered\">docs#category_theory.is_filtered</a></p>",
        "id": 237693901,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620320596
    },
    {
        "content": "<p>You need to know what a \"pair\" of things is.</p>",
        "id": 237694086,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620320659
    },
    {
        "content": "<p>If you want to use topological compactness, then you can use the ultrafilter characterization to avoid speaking about finite subcovers</p>",
        "id": 237694252,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620320725
    },
    {
        "content": "<p>So a set is finite if and only if every ultrafilter is principal</p>",
        "id": 237694300,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620320751
    },
    {
        "content": "<p>But this is more-or-less the same argument since the ultrafilter monad is a Kan extension of the inclusion of fintype to type</p>",
        "id": 237694451,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620320815
    },
    {
        "content": "<p>When I was a kid I was taught that a set is infinite if it is in bijection with the disjoint union of itself and one extra element (without discussing why this extra element exists), and it is finite otherwise.</p>",
        "id": 237694463,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620320820
    },
    {
        "content": "<p>TBH I don't remember the definition of \"finite\" I was taught in school...</p>",
        "id": 237694793,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620320931
    },
    {
        "content": "<p>You probably went to school outside France...</p>",
        "id": 237694824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620320946
    },
    {
        "content": "<p>Indeed <span aria-label=\"pensive\" class=\"emoji emoji-1f614\" role=\"img\" title=\"pensive\">:pensive:</span></p>",
        "id": 237695205,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620321112
    },
    {
        "content": "<p>TBH this was during my first undergrad year.</p>",
        "id": 237695387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620321183
    },
    {
        "content": "<p>Metamath has a delightful section on <a href=\"http://us.metamath.org/mpeuni/mmtheorems88.html#mm8775s\">Eight inequivalent definitions of finite set</a> which are all equivalent in the presence of the axiom of choice (real AC, not LEM). The one we are all familiar with is Fin-I, that is, the numbers inductively generated from zero and successor. The fintype-mod-equivalence definition is also Fin-I. Another one that some may be familiar with is Fin-IV, also known as dedekind-finite. A set is dedekind-finite if it is not in bijection with a proper subset of itself. (The definitions mentioned by <span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> and <span class=\"user-mention silent\" data-user-id=\"130377\">David Wärn</span>'s <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>κ</mi><mo>&lt;</mo><mi>κ</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">\\kappa&lt;\\kappa+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">κ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">κ</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> are using Fin-IV.)  Other definitions include:</p>\n<ul>\n<li>Fin-V: <code>A + A ≃ A</code> fails (discounting 0)</li>\n<li>Fin-VI: <code>A × A ≃ A</code> fails (discounting 0 and 1)</li>\n<li>Fin-II: Every nonempty chain of subsets contains a maximum element</li>\n</ul>",
        "id": 237749854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620346681
    },
    {
        "content": "<p>The main source is A. Lévy, <a href=\"http://matwbn.icm.edu.pl/ksiazki/fm/fm46/fm4611.pdf\">The independence of various definitions of finiteness</a></p>",
        "id": 237750230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620346987
    },
    {
        "content": "<p>Regarding carving out a subset of <code>pgame</code>, that depends on exactly how you pick the subset. <code>pgame</code> is basically equivalent to the set of ordinal numbers, so there is well ordering but no finiteness embedded in the definition. You can find all 8 of the Fins in there except for Fin-VII, whose definition is basically \"non-well-ordered or Fin-I\" which is kind of a cop-out definition. (The equivalence of Fin-VII and Fin-I is equivalent to the axiom of choice.)</p>",
        "id": 237751519,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1620348058
    },
    {
        "content": "<p>There's also the definitions on nlab: <a href=\"https://ncatlab.org/nlab/show/finite+set\">https://ncatlab.org/nlab/show/finite+set</a> which are again equivalent with AC plus definitions without naturals and apparently one in terms of schemes(!)</p>",
        "id": 237753927,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1620350092
    }
]