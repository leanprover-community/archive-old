[
    {
        "content": "<p>I needed these simple lemmas, and was unable to find them in the library.<br>\nBefore these lemmas can be added to mathlib, they need to be generalized.<br>\nI would like some help with that. Whoever helps can take full credit by making the GitHub commit if they wish.<br>\nAlso, the lemmas need to be renamed to mathlib style.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric.basic</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cpowIntExponentSplitBase</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"n\">z2</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"bp\">*</span> <span class=\"n\">z2</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">z1</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">z2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span><span class=\"n\">pow_succ</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">z1</span> <span class=\"bp\">*</span> <span class=\"n\">z1</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z2</span> <span class=\"bp\">*</span> <span class=\"n\">z2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z1</span> <span class=\"bp\">*</span> <span class=\"n\">z2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">z2</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cpowIntExponentSplitExponent</span> <span class=\"o\">(</span><span class=\"n\">z1</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z1</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z1</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">z1</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">k.succ</span> <span class=\"bp\">=</span>  <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"bp\">=</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">succ</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span><span class=\"o\">:</span> <span class=\"n\">z1</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"bp\">*</span> <span class=\"n\">z1</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z1</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">z1</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cpowIntTimesIntExponent</span> <span class=\"o\">(</span><span class=\"n\">z1</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">z1</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">z1</span> <span class=\"bp\">^</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">^</span> <span class=\"n\">k</span><span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">k.succ</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"n\">n</span><span class=\"bp\">*</span><span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h3</span><span class=\"o\">:</span><span class=\"n\">z1</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z1</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">z1</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">cpowIntExponentSplitExponent</span> <span class=\"n\">z1</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 300227787,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1663873884
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_pow\">docs#mul_pow</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_add\">docs#pow_add</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pow_mul\">docs#pow_mul</a> I believe. I think will save time if assume that lemmas of this level are in mathlib already (things like this generally are) and look for them with <code>library_search</code> or the naming convention or <a class=\"stream\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F\">#Is there code for X?</a> first</p>",
        "id": 300228529,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663874117
    },
    {
        "content": "<p>Nice; this will make my file smaller. I tried <code>library_search</code>, but didn't ask at <a class=\"stream\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F\">#Is there code for X?</a> .<br>\nMaybe <code>library_search!</code>needs to be improved?</p>",
        "id": 300230410,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1663874760
    },
    {
        "content": "<p>Hmm library search works fine for me for the first one at least. Though I would say the naming convention is even faster</p>",
        "id": 300231144,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663875019
    },
    {
        "content": "<p>Interesting. I double-checked that <code>library_search!</code> did not result in anything before making this post. Checking again now, the cause is <code>(deterministic) timeout</code>.</p>",
        "id": 300231780,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1663875250
    },
    {
        "content": "<p>This is the <a href=\"https://leanprover-community.github.io/contribute/naming.html\">#naming</a> that Alex is referring to. With this consistency in naming, many simple lemmas can be found just by guessing and using the autocomplete feature in VS Code (or in the API documentation). However, if there is something that you think should exist, but can't find, definitely ask in <a class=\"stream\" data-stream-id=\"217875\" href=\"/#narrow/stream/217875-Is-there-code-for-X.3F\">#Is there code for X?</a> first. Simple things especially don't bother to try and reprove.</p>",
        "id": 300232546,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663875525
    },
    {
        "content": "<p>For example, if you want a lemma to say that <code>a - b - c = a - (b + c)</code>, you can easily guess that this will be called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sub_sub\">docs#sub_sub</a>.</p>",
        "id": 300232679,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663875582
    },
    {
        "content": "<p>Ah yes, deterministic timeout isnt a fair per se, just that there are too many lemmas to check with your imports, for the purposes of library search its helpful to set it a bit higher than the default, <a href=\"https://leanprover-community.github.io/tips_and_tricks.html#memory-and-deterministic-timeout\">https://leanprover-community.github.io/tips_and_tricks.html#memory-and-deterministic-timeout</a>.</p>",
        "id": 300232785,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663875616
    },
    {
        "content": "<p>Curious what others have set their memory limits at who have done so...</p>",
        "id": 300232968,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663875693
    },
    {
        "content": "<p>Or rather, not the exact limits, but if they have found this to actually be beneficial and have noticed a marked difference.</p>",
        "id": 300233097,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663875732
    },
    {
        "content": "<p>I changed the Lean settings to have a memory limit of 39000 (most of my RAM), and now <code>library_search!</code> works for all 3 lemmas. I will need to remember this next time I reinstall Linux.</p>",
        "id": 300233843,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1663875993
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385848\">Mark Gerads</span> <a href=\"#narrow/stream/116395-maths/topic/Help.20.7Bgeneralize.2C.20rename.7D.20these.20.20lemmas.20for.20mathlib/near/300233843\">said</a>:</p>\n<blockquote>\n<p>I changed the Lean settings to have a memory limit of 39000 (most of my RAM), and now <code>library_search!</code> works for all 3 lemmas. I will need to remember this next time I reinstall Linux.</p>\n</blockquote>\n<p>Good to know! Thanks.</p>",
        "id": 300234207,
        "sender_full_name": "Newell Jensen",
        "timestamp": 1663876114
    },
    {
        "content": "<p>If you are regularly hitting timeouts during development (with the standard heartbeat limit of 100000), in my experience it either means (a) that you are working on some very complicated stuff, or (b) you need to find ways to make your code more efficient and/or idiomatic (e.g., squeezing simps). I just wrote a rather long and complicated proof while using the standard timeout and didn't hit it.</p>",
        "id": 300234227,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663876122
    },
    {
        "content": "<p>I dont think the memory limit should affect library search, only the timeout.</p>",
        "id": 300234592,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663876249
    },
    {
        "content": "<p>And while that's definitely true Jireh I do find it useful to write a slow proof that works and then speed it up when its done. Something like double the default timeout is normally enough for me</p>",
        "id": 300234840,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663876336
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/116395-maths/topic/Help.20.7Bgeneralize.2C.20rename.7D.20these.20.20lemmas.20for.20mathlib/near/300234592\">said</a>:</p>\n<blockquote>\n<p>I dont think the memory limit should affect library search, only the timeout.</p>\n</blockquote>\n<p>I did not change the timeout, only the memory, so counter-example.</p>",
        "id": 300235194,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1663876478
    },
    {
        "content": "<p>Alex, I see what you mean, and that can be useful in certain circumstances. However, if I'm constantly hitting 100000 heartbeats in a proof that isn't super complex, then I'm spending too much time waiting for Lean to compile every step and I should speed up the proof early anyway to save myself time developing. I guess if you have a very fast machine this is less of an issue, but I'm frequently working on my laptop with only 4 cores.</p>",
        "id": 300241888,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663879223
    },
    {
        "content": "<p>sometimes having the timeout higher can be useful when squeezing simps though.</p>",
        "id": 300242092,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663879311
    }
]