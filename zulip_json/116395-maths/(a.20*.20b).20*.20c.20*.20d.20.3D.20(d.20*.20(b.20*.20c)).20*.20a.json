[
    {
        "content": "<p>What is the fastest way to prove such a statement in an arbitrary structure with associative and commutative multiplication? I am currently in a <code>with_zero G</code> where <code>G</code> is a comm_group. That prevents me from using <code>abel</code> or such.</p>",
        "id": 158049932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549907673
    },
    {
        "content": "<p>I guess there is room for a <code>perm</code> tactic that takes a assoc comm operator, and proves that two permutations are equal.</p>",
        "id": 158050012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549907744
    },
    {
        "content": "<p><code>simp [mul_comm, mul_assoc, mul_left_comm]</code> is fairly reliable.</p>",
        "id": 158050502,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549908146
    },
    {
        "content": "<p>When Kenny and I were faced with stuff like this we were doing cases on it; if a = 0 then both sides are 0 and if not then a = some a; now case on b and kill the zero case; etc. When all zero cases are killed, <code>change</code> to <code>some ((a * b) * c * d) = ...</code>, apply injectivity of <code>some</code> and then use <code>abel</code>. But if Chris' technique works that would be great. I guess your monoid isn't even cancellative though.</p>",
        "id": 158050655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549908336
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>! That works like a charm!</p>",
        "id": 158051519,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549909132
    }
]