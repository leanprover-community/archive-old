[
    {
        "content": "<p>If you have a subring <code>S</code> of a comm_ring then:</p>\n<div class=\"codehilite\"><pre><span></span>is_subring S ---- subset.comm_ring ---&gt; comm_ring S\n   |                                        |\n   | comm_ring.ring                         | comm_ring.ring\n   v                                        v\nis_subring S ---- subset.ring ----------&gt; ring S\n</pre></div>\n\n\n<p>The downwards arrow on the left is taking place on the ambient ring.</p>",
        "id": 160489845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552319067
    },
    {
        "content": "<p>Does that mean that one of these instances has to be removed? They're not defeq, right?</p>",
        "id": 160520916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552340846
    },
    {
        "content": "<p>it should be possible to make them defeq</p>",
        "id": 160521651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552341396
    },
    {
        "content": "<p>What is subset.comm_ring? If it extends subset.ring then this should work out</p>",
        "id": 160521681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1552341432
    },
    {
        "content": "<p>This is really confusing</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_subring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">S</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">ring</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">S</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_subring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_ring</span> <span class=\"n\">S</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">ring</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</pre></div>\n\n\n<p>If you replace the first <code>rfl</code> with <code>_</code> you will see that the <code>pp.all</code> output is identical to what you get in the second example.</p>",
        "id": 160555946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552383864
    },
    {
        "content": "<p>Kenny had something like this recently, and I think it was caused by the elaborator doing things in a funny order.</p>",
        "id": 160563934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552392117
    },
    {
        "content": "<p>I don't have time to find the thread right now, but I suggested to Kenny that he start filling in the holes, and he was surprised to find that it fixed the problem. <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> do you remember this thread?</p>",
        "id": 160563992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552392147
    },
    {
        "content": "<p>Of course I don't mind filling in those holes if it's a one time thing. But it becomes a problem if type class search is the one who ought to be filling in the holes and just breaks down in tears saying it hit a diamond.</p>",
        "id": 160564177,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552392345
    },
    {
        "content": "<p>Maybe some useful comments were made there</p>",
        "id": 160564183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552392349
    },
    {
        "content": "<p><a href=\"#narrow/stream/113489-new-members/topic/type.20mismatch\" title=\"#narrow/stream/113489-new-members/topic/type.20mismatch\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/type.20mismatch</a></p>",
        "id": 160564338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552392484
    },
    {
        "content": "<p>It was just me and Kenny moaning about a similar issue</p>",
        "id": 160564348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552392497
    },
    {
        "content": "<p>I don't know what's going on</p>",
        "id": 160564356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552392506
    },
    {
        "content": "<p>yeah no just fill in the blanks</p>",
        "id": 160564390,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1552392555
    },
    {
        "content": "<p>Is the conclusion that this is not a diamond after all?</p>",
        "id": 160564419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552392597
    },
    {
        "content": "<p>Yes, I think that is the conclusion. Which only makes the situation worse.</p>",
        "id": 160564488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552392634
    },
    {
        "content": "<p>and the real problem is that we don't understand why rfl fails? [like we already didn't with Kenny's example]</p>",
        "id": 160564489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552392635
    },
    {
        "content": "<p>Because now we can't fix it.</p>",
        "id": 160564492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552392642
    },
    {
        "content": "<p>Because I have some ring hom, and I can't use it, because type class inference fails.</p>",
        "id": 160564516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552392669
    },
    {
        "content": "<p>And then you need to put <code>@</code>s everywhere, and fill in lots of holes, and all of a sudden the code is unreadable</p>",
        "id": 160564551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552392710
    },
    {
        "content": "<p>Anyway, Kevin, thanks for the link to that other thread. It's encouraging to know I'm not alone (-;</p>",
        "id": 160564611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552392749
    },
    {
        "content": "<p>It is actually possible to debug this sort of thing yourself, using the tricks Sebastian mentioned in the \"leaves office again\" thread. I've seen Kenny doing this live.</p>",
        "id": 160564733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552392869
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/unification/near/156841375\" title=\"#narrow/stream/113488-general/topic/unification/near/156841375\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/unification/near/156841375</a></p>",
        "id": 160564768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552392919
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">implicit</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span> <span class=\"n\">true</span>\n</pre></div>",
        "id": 160564838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552392978
    }
]