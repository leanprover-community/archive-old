[
    {
        "content": "<p>Here is a version of FTC I have now:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">continuous_at</span><span class=\"bp\">.</span><span class=\"n\">integral_sub_linear_is_o_ae</span>\n  <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">opens_measurable_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">second_countable_topology</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">Œº</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">locally_finite_measure</span> <span class=\"n\">Œº</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">continuous_at</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfm</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_o</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"err\">‚à´</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"err\">‚àÇ</span><span class=\"n\">Œº</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_real</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">Œº</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_real</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"err\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">lift&#39;</span> <span class=\"n\">powerset</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>Now I just need to apply this to <code>s = Ioc a x</code>.</p>",
        "id": 205548996,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596157491
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3640\">#3640</a> has <a href=\"https://github.com/leanprover-community/mathlib/pull/3640/files#diff-92a40ac0ab1938da64f1ad1e0d3adbf9R212\">FTC-1</a></p>",
        "id": 205561266,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596176274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> I introduce typeclass <code>filter.is_interval_generated</code>. For filters on <code>\\R</code> it is equivalent to \"a filter has a basis which consists of connected sets\". It can be useful as a way to speak about different filters in l'Hopital's rule (not sure).</p>",
        "id": 205561391,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596176451
    },
    {
        "content": "<p>Oooooh this may be useful indeed ! I need some time to think about it, but this is really interesting</p>",
        "id": 205581894,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1596195915
    }
]