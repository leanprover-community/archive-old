[
    {
        "content": "<p>Proposal 1.</p>\n<p>The following lemma is useful:</p>\n<p><code>nat.le_add_right : ∀ (n k : ℕ), n ≤ n + k</code></p>\n<p>could we have the following lemma in mathlib:</p>\n<div class=\"codehilite\"><pre><span></span>def  nat.le_add_right_of_le:  ∀ (n m k : nat) (n_le_m : n &lt;= m), n &lt;= m + k\n    | n m 0 n_le_m := n_le_m\n    | n m (k +  1) n_le_m := nat.le_succ_of_le (nat.le_add_right_of_le n m k n_le_m)\n</pre></div>\n\n\n<p>Proposal 2.</p>\n<p>Can we rename <code>lt_add_of_pos_of_lt</code> to  <code>lt_add_right_of_pos_of_lt</code> and <code>lt_add_of_lt_of_pos</code> <code>lt_add_left_of_lt_of_pos</code>?  Can we perhaps make things more standard, and change the signature of <code>lt_add_of_lt_of_pos</code> and rename it to <code>lt_add_of_pos_of_lt</code>?</p>\n<p>Proposal 3.</p>\n<p>Can we have this in mathlib: <code>def  nat.le_mul_right_of_le_of_pos:  ∀ (n m k : nat) (n_le_m : n &lt;= m) (k_pos : 0  &lt; k), n &lt;= m * k :=  sorry</code> (I haven't tried proving it yet, but I assume induction should work too quite straightforwardly). Perhaps we would want a more general result too in <code>ordered_group.lean</code>, i.e. <code>le_mul_right_of_le_of_pos</code>?</p>",
        "id": 124761510,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1523101393
    },
    {
        "content": "<p>Just to comment that <code>theorem  nat.le_add_right_of_le (n m k : nat) (n_le_m : n &lt;= m) : n &lt;= m + k := le_trans n_le_m $ nat.le_add_right _ _</code></p>",
        "id": 124762729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523104599
    },
    {
        "content": "<p>Things like <code>lt_add_of_pos_of_lt</code> are in the core lean library and it's very difficult currently to change anything in the core library, as the devs are busy with Lean 4 and are not amenable to \"minor\" changes like this. When Lean 4 hits a bunch of maths might be moved out of the core library and this might be the time to change these things. However I really want a place where comments such as this can sit festering until the devs are ready; it's difficult to find such a place as you can see from the Lean FAQ that opening minor issues is currently not really welcome.</p>",
        "id": 124762821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523104857
    },
    {
        "content": "<p>Proposal 3 also looks like a case for transitivity, because it's naturally the conjunction of <code>n &lt;=m</code> and <code>m &lt;= m * k</code></p>",
        "id": 124763149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523105754
    },
    {
        "content": "<p>Thanks, I didn't realise that these were from standard library. I thought it was in <a href=\"https://github.com/leanprover/mathlib/blob/d84dfb17b9cfbb29e0f728fd22b4f5176f7bd0a9/algebra/ordered_group.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/d84dfb17b9cfbb29e0f728fd22b4f5176f7bd0a9/algebra/ordered_group.lean\">mathlib in ordered_group.lean</a>, but actually it is in <a href=\"https://github.com/leanprover/lean/blob/51a87212fa30883bc8f39b41fc9ed2bed1cfed77/library/init/algebra/ordered_group.lean\" target=\"_blank\" title=\"https://github.com/leanprover/lean/blob/51a87212fa30883bc8f39b41fc9ed2bed1cfed77/library/init/algebra/ordered_group.lean\">standard library ordered_group.lean</a>. It appears that many lemmas are copied over to mathlib from standard library, but they appear with a single apostrophe at the end in mathlib!</p>\n<p>I think you're talking about a place to keep the backlog. I've seen people using trello boards for this purpose. I've set one up for this:<br>\n<a href=\"https://trello.com/b/we2kRiDw/lean-4-proposals\" target=\"_blank\" title=\"https://trello.com/b/we2kRiDw/lean-4-proposals\">https://trello.com/b/we2kRiDw/lean-4-proposals</a></p>\n<p>I've added you to it. Happy to add everybody else if this is what we want to use? If a different solution catches on, I can migrate these proposals over.</p>",
        "id": 124774128,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1523131884
    },
    {
        "content": "<p>The \"apostrophe lemmas\" have a different typeclass assumption, namely <code>ordered_comm_group</code>, which doesn't exist in core</p>",
        "id": 124774177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523131994
    },
    {
        "content": "<p>in an ideal world the core lemmas would be removed since you get them from the mathlib lemmas by typeclass inference, but core lib is basically frozen for now</p>",
        "id": 124774178,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523132042
    },
    {
        "content": "<p>I see, this all makes sense now.</p>",
        "id": 124774229,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1523132150
    },
    {
        "content": "<p>Do apostrophed lemmas somehow shadow non-apostrophed lemmas? Certainly vscode doesn't autosuggest them for me.</p>",
        "id": 124774281,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1523132254
    },
    {
        "content": "<p>No, that sort of shadowing isn't allowed by lean. You have to have the file imported to see them in autosuggest</p>",
        "id": 124774324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523132300
    },
    {
        "content": "<p>One possibility is a \"core lib wishlist\" file we can maintain on mathlib. I used <code>pending.lean</code> for this briefly, but I've since become convinced that Leo is unlikely to ever accept a change from mathlib, so I have spent most of my time working around core as it exists rather than trying to change it. Such a wishlist may become useful if we ever fork lean, but I don't see what other good it would do.</p>",
        "id": 124774332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523132393
    },
    {
        "content": "<p>Sounds a bit nuclear. Surely there must be a way for mathlib and stdlib to work closely together? Are main goals/objectives of lean and mathlib different?</p>",
        "id": 124774658,
        "sender_full_name": "Adam Kurkiewicz",
        "timestamp": 1523133149
    },
    {
        "content": "<p>Trust me, this isn't what I want, but Leo has gone hermit in a big way and we have to work around this if we want to keep using and improving lean</p>",
        "id": 124774664,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523133208
    },
    {
        "content": "<p>For now I'm keeping the possibility open but not making any steps towards a fork until it becomes absolutely necessary</p>",
        "id": 124774705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523133270
    },
    {
        "content": "<p>I really hope Lean 4 and its reduced core lib will make all these problem disappear</p>",
        "id": 124791116,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523174079
    }
]