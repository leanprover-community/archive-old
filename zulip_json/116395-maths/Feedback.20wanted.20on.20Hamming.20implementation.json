[
    {
        "content": "<p>Quite puzzled about</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">to_distrib_mul_action'</span>\n  <span class=\"n\">module.to_distrib_mul_action</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">distrib_mul_action</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"n\">ham</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">distrib_mul_action</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ham</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"n\">u_2</span> <span class=\"n\">u_3</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>when I try and use the module instance to define a normed space (however doomed that might be).</p>",
        "id": 286145509,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655248845
    },
    {
        "content": "<p>Is the context <a href=\"https://github.com/leanprover-community/mathlib/pull/14739\">#14739</a> still?</p>",
        "id": 286145640,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1655248934
    },
    {
        "content": "<p>It could be an issue with universes. Try adding universe parameters explicitly?</p>",
        "id": 286145842,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655249097
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Feedback.20wanted.20on.20Hamming.20implmentation/near/286145640\">said</a>:</p>\n<blockquote>\n<p>Is the context <a href=\"https://github.com/leanprover-community/mathlib/pull/14739\">#14739</a> still?</p>\n</blockquote>\n<p>I'm not sure what else it'd be.</p>",
        "id": 286146646,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655249734
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Feedback.20wanted.20on.20Hamming.20implmentation/near/286145842\">said</a>:</p>\n<blockquote>\n<p>It could be an issue with universes. Try adding universe parameters explicitly?</p>\n</blockquote>\n<p>Hmm - maybe. It gets \"fixed\" if I make it so that the module instance is only defined coming from <code>add_comm_group</code> rather than <code>add_comm_monoid</code> - so my hypothesis is some kind of nasty non-def-eq thing somewhere.</p>",
        "id": 286146751,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655249792
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ham</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm_smul_le</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"bp\">..@</span><span class=\"n\">ham.module</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>This works.</p>",
        "id": 286147072,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655250058
    },
    {
        "content": "<p>(Instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">module</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">ham</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm_smul_le</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">ham.module</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 286147211,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655250190
    },
    {
        "content": "<p>oh no... there may be a diamond somewhere...</p>",
        "id": 286147445,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655250404
    },
    {
        "content": "<p>do you have a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> ?</p>",
        "id": 286147452,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1655250411
    },
    {
        "content": "<p>Unfortunately it's a bit hard to do because this really uses most things in the file.</p>",
        "id": 286147615,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655250579
    },
    {
        "content": "<p>So the MWE is, well, the file in that PR</p>",
        "id": 286147634,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655250590
    },
    {
        "content": "<p>I was very busy today, I will have a look at the PR tomorrow.</p>",
        "id": 286249733,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655315825
    },
    {
        "content": "<p>Sure, when you can :)</p>",
        "id": 286354938,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655387308
    },
    {
        "content": "<p>It looks like a very good start to me!</p>",
        "id": 286363275,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655390876
    },
    {
        "content": "<p>Sweet! What do you think you'd like to see next in the coding theory/Hamming space?</p>",
        "id": 286377378,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655396534
    },
    {
        "content": "<p>Also: I've been trying to decide how to define linear codes or more generally non-linear block codes, and whether they should have the encoding function which constructs them attached.</p>",
        "id": 286377490,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655396584
    },
    {
        "content": "<p>Would be interested to see what you think?</p>",
        "id": 286377511,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655396593
    },
    {
        "content": "<p>(Also: specifically would be useful to know what else you think could go in this PR so that the Hamming stuff, at least, is fully featured. It might be nice to have some way of saying \"the minimum distance of a set\"...?</p>",
        "id": 286377749,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655396685
    },
    {
        "content": "<p>I can't speak for others, but I personally would be interested to see Reed-Solomon codes in mathlib. RS codes are used in STARK cryptography and it's something I've been working on in Coq for the company I'm working at this summer. It would be interesting to see how easy or hard they are to implement.</p>",
        "id": 286520730,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1655487463
    },
    {
        "content": "<p>Oh, interesting - yeah I mean my interests are also cryptographic.</p>",
        "id": 286521498,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655487854
    },
    {
        "content": "<p>What've you been doing in Coq?</p>",
        "id": 286521510,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655487863
    },
    {
        "content": "<p>Have you been building on the existing work in this area?</p>",
        "id": 286521530,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655487874
    },
    {
        "content": "<p>I've been trying my hand at some Goppa code stuff for Classic McEliece but was finding it frustrating.</p>",
        "id": 286521763,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655487980
    },
    {
        "content": "<p>I've been working for <a href=\"https://www.risczero.com/\">RiscZero</a>, which has produced a zk-STARK to verify computations on the RISC-V architecture. I've been working on verifying the soundness of their system. Still in early stages of that project.</p>",
        "id": 286521814,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1655488017
    },
    {
        "content": "<p>Cool. This is the area I work in (at least, well, it would be if I could get anything to work, but nominally this is my PhD). I would be very interested in anything that's been publicly released.</p>",
        "id": 286521902,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655488062
    },
    {
        "content": "<p>Well, at least my interest in general is formal methods in cryptography.</p>",
        "id": 286521936,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655488078
    },
    {
        "content": "<p>Nothing publically released yet, since it's still under development. I'll be sure to let you know when we do come out with something though.</p>",
        "id": 286522052,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1655488139
    },
    {
        "content": "<p>Sweet.</p>",
        "id": 286522231,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655488227
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> <span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span> I just saw this thread and was curious if there are specifications of either of these now.  I've been off-and-on working on porting the one of the Classic Mceeliece reference implementations to Lean 4, and finally got that today.  The repo is <a href=\"https://github.com/joehendrix/lean-crypto\">here</a>.</p>\n<p>The plan is to eventually have reasonable efficient executable specifications of a cryptographic algorithms (that can equivalence checked with other implementations) along with proofs to related the efficient executable specifications with more general definitions in Mathlib 4.</p>",
        "id": 293212491,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1660350213
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110994\">@Joe Hendrix</span> good to hear there's another person interested in using Lean for cryptography. My own work on STARKs is not public yet, but the PR <a href=\"https://github.com/leanprover-community/mathlib/pull/14739\">#14739</a> did get merged. Not sure what Wrenna's plans are for more coding theory/cryptography in mathlib, but I imagine there's quite a bit you could build out.</p>",
        "id": 293230646,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1660371073
    },
    {
        "content": "<p>Hi, yeah, sorry, I've been on holiday the last couple weeks</p>",
        "id": 294967341,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661303079
    },
    {
        "content": "<p>I've been working on a PR to add \"infsep\", which you can essentially think of as minimum distance</p>",
        "id": 294967395,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661303148
    },
    {
        "content": "<p>This turned out to need rather a bit of API work to do properly.</p>",
        "id": 294967442,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661303164
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15689\">https://github.com/leanprover-community/mathlib/pull/15689</a></p>",
        "id": 294967465,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661303203
    },
    {
        "content": "<p>This will allow us to coherently talk about the minimum distance of a set in the language of mathlib.</p>",
        "id": 294967494,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661303224
    },
    {
        "content": "<p>Which obviously we need for coding reasons.</p>",
        "id": 294967508,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661303239
    },
    {
        "content": "<p>I'm considering the best next steps. I would like to settle on a definition of what a code is, but I was going round a bit on the right generality for that.</p>",
        "id": 294967593,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661303322
    },
    {
        "content": "<p>Getting Reed-Solomon codes in would be a good next goal.</p>",
        "id": 294967670,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661303406
    },
    {
        "content": "<p>I'm going to be on an internship from October for a few months so will have less time for mathlib stuff, but I will be keeping an eye on things and thinking about it in my free time.</p>",
        "id": 294967687,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661303437
    },
    {
        "content": "<p>(as you can see, two months ago I was wondering on the right definition for a code - ironically the issue was that it's such a simple definition. But there's a few ways you could do it.)</p>",
        "id": 294967750,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661303522
    },
    {
        "content": "<p>Oh, I'm not sure if I mentioned it above, but I also refactored the Lagrange interpolation file, in part with an eye towards RS-style constructions.</p>",
        "id": 294967810,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661303590
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"282271\">@Bolton Bailey</span> what is the definition of RS codes that is used in your context?</p>",
        "id": 294967824,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661303610
    },
    {
        "content": "<p>I agree that it would probably be best to define a structure for codes and then go from there in terms of implementing RS as an instantiation of that structure. Essentially the definition that is used in the papers I work with is that an RS code is parameterized by a field, a code length and a rate, and the code is the subset of vectors of field elements of that length.</p>",
        "id": 294971681,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1661308057
    },
    {
        "content": "<p>Maybe we could make a short hierarchy where we define a very general code, and then quickly go on to define block codes so we can prove theorems about code distances and things like that.</p>",
        "id": 294971862,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1661308239
    },
    {
        "content": "<p>Right and then have linear codes as an instance of that? Maybe. Or we could just start with block codes.</p>",
        "id": 294988923,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661323687
    },
    {
        "content": "<p>The thing about block codes is that on some level you don't actually care about the encoding function.</p>",
        "id": 294988941,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661323703
    },
    {
        "content": "<p>Just the set of codewords.</p>",
        "id": 294988952,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661323709
    },
    {
        "content": "<p>While that's really not true for general codes I think?</p>",
        "id": 294988965,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661323723
    },
    {
        "content": "<p>You could define block codes of length n over an alphabet C as set (fin n -&gt; C).</p>",
        "id": 294989054,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661323800
    },
    {
        "content": "<p>Or if you want to maintain it as an encoding, you could define a block code with message length k and block length n as an injective map from fin k -&gt; C to fin n -&gt; C.</p>",
        "id": 294989323,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1661323987
    }
]