[
    {
        "content": "<p>Greetings from the Berkeley Lean Seminar, where a bunch of us are learning Lean this summer.  As my first \"real\" project, I decided to formalize the Nash-Williams argument for the following version of the De Bruijn–Erdős theorem, that if a graph with countably many vertices has the property that every finite subgraph can be n-colored, then the graph can be n-colored.  This involved proving a specialization of Kőnig's lemma, that the inverse limit of an ℕ-indexed family of nonempty finite sets is nonempty.</p>\n<p>So, fresh off the presses, here it is:</p>\n<p>Coloring statement: <a href=\"https://github.com/kmill/lean-graphcoloring/blob/master/src/graph.lean#L347\">https://github.com/kmill/lean-graphcoloring/blob/master/src/graph.lean#L347</a></p>\n<p>Kőnig's lemma: <a href=\"https://github.com/kmill/lean-graphcoloring/blob/master/src/konig.lean#L153\">https://github.com/kmill/lean-graphcoloring/blob/master/src/konig.lean#L153</a></p>\n<p>The proofs are terrible, but, hey, it's proved.  (While any hints to clean things up would be appreciated, I don't want to harm any of your eyes with its very hacky state.  I feel like much of it was constructed through pure force of will.)</p>\n<p>Many decisions were made for pedagogical reasons, to learn different parts of Lean.  Probably a more straightforward proof would be for the full De Bruijn–Erdős theorem, using ultrafilters to construct a coloring from a choice of coloring for each finite subgraph. (That is, a compactness argument.)</p>",
        "id": 200298738,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591741374
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> Nice! We also wrote a bunch of graph colouring stuff on the <code>hedetniemi</code> branch. But it hasn't made it into mathlib master yet.</p>",
        "id": 200382504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591770840
    },
    {
        "content": "<p>Are you planning to PR this to mathlib?</p>",
        "id": 200382546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591770848
    },
    {
        "content": "<p>feature request: GUI for hedetniemi branch</p>",
        "id": 200382660,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591771032
    },
    {
        "content": "<p>Assigned to: <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span> <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 200382679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591771072
    },
    {
        "content": "<p>Very nice! I agree that the full theorem might be easier to prove -- either using ultrafilters, or Tychonoff, or Zorn (consider the poset of partial colourings that can be extended to cover any finite subgraph).</p>",
        "id": 200396512,
        "sender_full_name": "David Wärn",
        "timestamp": 1591782769
    },
    {
        "content": "<p>I want to say that this follows from the compactness theorem from logic but I'm no expert in this area</p>",
        "id": 200397353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591783375
    },
    {
        "content": "<p>Who hacked Kevin's Zulip account <em>again</em>?</p>",
        "id": 200397436,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591783429
    },
    {
        "content": "<p>We already had people posting type theory messages using his account and now logic?!</p>",
        "id": 200397528,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591783464
    },
    {
        "content": "<p>Yes, compactness theorem for propositional logic is basically same thing as Tychonoff for products of finite spaces</p>",
        "id": 200398101,
        "sender_full_name": "David Wärn",
        "timestamp": 1591783903
    },
    {
        "content": "<p>^This is not totally true. Tychonoff implies it, yes, but you only need Boolean prime ideal theorem (they are equivalent), which is weaker than choice and so weaker than Tychonoff.</p>",
        "id": 200405778,
        "sender_full_name": "Dave",
        "timestamp": 1591789914
    },
    {
        "content": "<p>Right, I'm saying it's equivalent to \"product of finite spaces is compact\", which is all you need for De Bruijn–Erdos</p>",
        "id": 200414071,
        "sender_full_name": "David Wärn",
        "timestamp": 1591794893
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  Yes, there is a pretty straightforward proof using the compactness theorem for first order logic. That proof also works for uncountable graphs, unlike the Konig's lemma proof (but like the Tychonoff proof).</p>",
        "id": 200444704,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1591808382
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/countable.20De.20Bruijn.E2.80.93Erd.C5.91s.20theorem/near/200382546\">said</a>:</p>\n<blockquote>\n<p>Are you planning to PR this to mathlib?</p>\n</blockquote>\n<p>I'm willing to create PRs, but I'm not exactly sure what the criteria for inclusion is.  I've at least now factored out and cleaned up some possibly useful results in <code>mylist</code>, <code>myoption</code>, and <code>myfintype</code> (<a href=\"https://github.com/kmill/lean-graphcoloring/tree/master/src\">https://github.com/kmill/lean-graphcoloring/tree/master/src</a>).  The proof of this specialization of Konig's lemma has also been cleaned up a bit.</p>",
        "id": 200616821,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1591915573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> The criteria for inclusion are: it should follow the style guidelines, and it should not be \"crackpot\". If you cook up a definition of <code>boolala</code>s and prove 10.000 lines of code about them, without any connection to the outside world... then we probably aren't very interested. (Clearly, this doesn't apply to whay you've done.)<br>\nAlso, when you PR, expect to get 50 comments about how to improve things... they're meant to help you (-;</p>",
        "id": 200634758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591937164
    },
    {
        "content": "<p>I don't know, <code>boolala</code> sounds pretty interesting if there is that much to say about it</p>",
        "id": 200634885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591937421
    },
    {
        "content": "<p>If it's \"recognisably maths\", it passes the interest criterion. :-)</p>",
        "id": 200634888,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591937434
    },
    {
        "content": "<p>I've been wondering about whether to submit my <a href=\"https://github.com/digama0/vc0\">formalization of the type theory of C</a> to mathlib. It's definitely starting to rot but it's also very far removed from everything else currently in mathlib</p>",
        "id": 200634908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591937510
    },
    {
        "content": "<p>Why don't you start a <code>computer_science/</code> top-level directory?</p>",
        "id": 200634960,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591937569
    },
    {
        "content": "<p>You could always put it in <code>archive/</code></p>",
        "id": 200634967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591937592
    },
    {
        "content": "<p>After about a year almost exactly, mathlib now has a generalized version of Kőnig's lemma integrated into the category theory library: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nonempty_sections_of_fintype_inverse_system\">docs#nonempty_sections_of_fintype_inverse_system</a></p>\n<p>At this rate, there will be a PR for the De Bruijn–Erdős theorem by June 2022 <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 242458713,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1623514474
    },
    {
        "content": "<p>Isn't this theorem true with <code>J</code> satisfying <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.is_cofiltered\">docs#category_theory.is_cofiltered</a> ?</p>",
        "id": 242458916,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623514735
    },
    {
        "content": "<p>Hah! I just saw your comment <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">TODO</span><span class=\"o\">:</span> <span class=\"n\">The</span> <span class=\"kd\">theorem</span> <span class=\"n\">hold</span> <span class=\"n\">also</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">case</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">J</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_cofiltered</span> <span class=\"n\">J</span><span class=\"o\">]</span><span class=\"bp\">`.</span>\n</code></pre></div>",
        "id": 242459471,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623515330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Yeah, I would have liked this generalized version, but as far as I understood the entries on the Stacks project, you reduce to the directed order case and then relate the limit you get there to the original cofiltered limit.  I wasn't sure how to organize this, so it's a TODO for now.</p>",
        "id": 242459635,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1623515532
    },
    {
        "content": "<p>I think there is just a direct proof... I'll see if I can generalize</p>",
        "id": 242459659,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623515579
    },
    {
        "content": "<p>Not only would it be more general, but it should clean up the universe and instance wrangling.  There were two conflicting instances: the <code>small_category</code> from the <code>directed_order</code> applied to the <code>ulift</code> of <code>J</code>, vs the <code>category</code> from the <code>ulift</code> of the <code>small_category</code> from the <code>directed_order</code> on <code>J</code>.</p>",
        "id": 242459788,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1623515756
    },
    {
        "content": "<p>A <code>[is_cofiltered J] : is_cofiltered (ulift J)</code> instance would simplify this</p>",
        "id": 242459857,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1623515843
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I generalized this in the branch <a href=\"https://github.com/leanprover-community/mathlib/tree/koenig_generalize\">branch#koenig_generalize</a> but it needs some golfing and some cleanup which I don't have time for right now.</p>",
        "id": 242468075,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623526935
    },
    {
        "content": "<p>The <code>small_category J</code> condition can probably be relaxed further to just <code>category J</code></p>",
        "id": 242468317,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623527256
    },
    {
        "content": "<p>(Note that the small category condition is required to have a <code>Top.limit_cone F</code> in <code>nonempty_limit_cone_of_compact_t2_inverse_system</code>)</p>",
        "id": 242468489,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623527378
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>! That was a nice and clean generalization -- I had tried a direct proof, but the right notion of a partial section eluded me.</p>\n<p>I've refactored things, updated documentation, and generalized the <code>fintype</code> version to <code>category J</code>.</p>",
        "id": 242635669,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1623693163
    },
    {
        "content": "<p>The <code>ulift.small_category</code> instance seemed like it might be problematic, since it conflicts with the <code>category_theory.ulift_category</code> instance (different morphism types).  I replaced it with something to lift a category to a universe where it's a small category:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">as_small</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">ulift.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">small_category</span> <span class=\"o\">(</span><span class=\"n\">as_small</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">ulift.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X.down</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y.down</span><span class=\"o\">),</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">𝟙</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">f.down</span> <span class=\"bp\">≫</span> <span class=\"n\">g.down</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Not sure if this makes sense to have, but it helped with the <code>small_category</code> to <code>category</code> generalization.</p>",
        "id": 242635844,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1623693229
    },
    {
        "content": "<p>Yes, you're right about the ulift category instance. The <code>as_small</code> thing looks like a good solution. It should go somewhere in the category theory folder!</p>",
        "id": 242637136,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623693829
    },
    {
        "content": "<p>Maybe in <code>category_theory/category/ulift</code>?</p>",
        "id": 242637268,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623693893
    },
    {
        "content": "<p>Similarly the <code>directed_order</code> to <code>is_(co)filtered</code> instance (and its various variants) should probably go in <code>category_theory/filtered</code>. Do we want to add a <code>codirected_order</code> class?</p>",
        "id": 242638455,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623694441
    },
    {
        "content": "<p>Do you have any thoughts about having an abbreviation for <code>Σ' (X Y : C) (mX : X ∈ O) (mY : Y ∈ O), X ⟶ Y</code> in <code>category_theory/filtered</code>?  I was using a local abbreviation <code>finite_diagram_arrow O</code> for it, but an argument can be made that it doesn't need a name. (Pinging <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>)</p>",
        "id": 242644547,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1623697452
    },
    {
        "content": "<p>Hmmm... I don't know. TBH I only used it because it's the format needed for things like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.is_cofiltered.inf\">docs#category_theory.is_cofiltered.inf</a></p>",
        "id": 242645300,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623697824
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> I'd worry about duplicate code with directed and codirected orders, but at least for now there really aren't any theorems about directed orders.  Given that there are both filtered and cofiltered categories already, it seems like it would make sense to add a <code>codirected_order</code> class (and I wouldn't mind dropping all the <code>op</code>'s!).</p>",
        "id": 242645395,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1623697868
    },
    {
        "content": "<p>I don't know if it makes sense to introduce an abbreviation for this Sigma type. Maybe <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> has an opinion?</p>",
        "id": 242645527,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623697924
    },
    {
        "content": "<p>Do we have a <code>directed_order</code> instance given a <code>semilattice_sup</code> (we should!)? If so, these sort of instances in category_theory/filtered could be generalized</p>",
        "id": 242645942,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623698127
    },
    {
        "content": "<p>According to the mathlib docs, the only <a href=\"https://leanprover-community.github.io/mathlib_docs/find/directed_order\">docs#directed_order</a> instance is the one from a <code>linear_order</code></p>",
        "id": 242646449,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1623698353
    },
    {
        "content": "<p>Ah. Well, that's another missing instance then...</p>",
        "id": 242646576,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623698409
    },
    {
        "content": "<p>I don't have much experience working with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual\">docs#order_dual</a> but working with opposites in category theory is annoying enough that I do think it could be useful to have a codirected order class</p>",
        "id": 242646747,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623698497
    },
    {
        "content": "<p>(I don't even know what the opposite order is called...)</p>",
        "id": 242646869,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1623698539
    },
    {
        "content": "<p>It's called <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≥</mo></mrow><annotation encoding=\"application/x-tex\">\\ge</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≥</span></span></span></span>, you may have known this at one point.</p>",
        "id": 242647022,
        "sender_full_name": "Reid Barton",
        "timestamp": 1623698621
    },
    {
        "content": "<p>Oh wow, I remember that ancient rune</p>",
        "id": 242648330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623699273
    }
]