[
    {
        "content": "<p>I would like to introduce notation for (1) the span of a single vector, (2) the orthogonal complement.  I was thinking of using <code>ùïú ‚àô v</code> (that's <code>\\.</code>) and <code>K‚Ä†</code> (that's <code>\\dagger</code>).  So:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.inner_product</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">real_inner_product_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">ùïú`‚àô`</span><span class=\"o\">:</span><span class=\"mi\">1000</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">span</span> <span class=\"bp\">ùïú</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">singleton</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">set.has_singleton</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"kd\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`‚Ä†`</span><span class=\"o\">:</span><span class=\"mi\">1000</span> <span class=\"o\">:=</span> <span class=\"n\">submodule.orthogonal</span> <span class=\"n\">K</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hw</span> <span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"bp\">‚àà</span> <span class=\"o\">(</span><span class=\"n\">‚Ñù</span> <span class=\"bp\">‚àô</span> <span class=\"n\">v</span><span class=\"o\">)</span><span class=\"bp\">‚Ä†</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚ü™</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"bp\">‚ü´</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">inner_left_of_mem_orthogonal</span> <span class=\"o\">(</span><span class=\"n\">mem_span_singleton_self</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">hw</span>\n</code></pre></div>\n<p>Any alternative suggestions, or objections, before I do this?  One point is that obviously <code>‚ä•</code> (<code>\\bot</code>) would have been ideal for the orthogonal complement notation, but it is already taken.  Does anyone know of a visual twin?</p>",
        "id": 221222486,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609344050
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/113488-general/topic/Notation.20for.20span\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Notation.20for.20span</a> for brief previous discussion of the span notation (mostly focused on getting the notation to work).</p>",
        "id": 221222565,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609344119
    },
    {
        "content": "<p>is <code>\\perp</code> the same character as <code>\\bot</code> ?</p>",
        "id": 221222615,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609344135
    },
    {
        "content": "<p>Yes, unfortunately.</p>",
        "id": 221222649,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609344173
    },
    {
        "content": "<p>Actually, I just found a OCR site for unicode<br>\n<a href=\"https://shapecatcher.com/\">https://shapecatcher.com/</a><br>\nwhich provided some visual twins for <code>‚ä•</code>, namely <code>‚üÇ</code> and <code>‚î¥</code>.  Let me try to use one of them.</p>",
        "id": 221223702,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609344814
    },
    {
        "content": "<p>Oh this one is nice: <code>V·óÆ</code></p>",
        "id": 221223874,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609344959
    },
    {
        "content": "<p>Oh, that's perfect!</p>",
        "id": 221223977,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609345076
    },
    {
        "content": "<p>That's a really cool webpage btw. Similar to <code>detexify</code> (in case you don't know about that yet :) ) <a href=\"https://detexify.kirelabs.org/classify.html\">https://detexify.kirelabs.org/classify.html</a></p>",
        "id": 221224043,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609345121
    },
    {
        "content": "<p>Yes, I found it by thinking to myself, \"I need detexify for unicode!\" :)</p>",
        "id": 221224061,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609345149
    },
    {
        "content": "<p>So, at the moment, <code>\\perp</code> in vscode gives the same result as <code>\\bot</code>.  Do I understand correctly that if<br>\n<a href=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json\">https://github.com/leanprover/vscode-lean/blob/master/translations.json</a><br>\nis edited to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"s2\">\"perp\"</span><span class=\"o\">:</span> <span class=\"s2\">\"·óÆ\"</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>then <code>\\perp</code> would produce the new notation?  Is this a kind of PR to <code>vscode-lean</code> that would be accepted?</p>",
        "id": 221224402,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609345455
    },
    {
        "content": "<p>Yes and yes.</p>",
        "id": 221224432,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1609345496
    },
    {
        "content": "<p>Maybe <code>^perp</code>?</p>",
        "id": 221224462,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609345524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/New.20linear.20algebra.20notation/near/221224462\">said</a>:</p>\n<blockquote>\n<p>Maybe <code>^perp</code>?</p>\n</blockquote>\n<p>I would rather save the extra character, is your concern that some people might be used to writing <code>\\perp</code> for <code>\\bot</code>?</p>",
        "id": 221224547,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609345577
    },
    {
        "content": "<p>Yeah, but maybe everyone just uses <code>\\bot</code>.</p>",
        "id": 221224623,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609345653
    },
    {
        "content": "<p>I would prefer <code>\\perp</code>. People can get used to writing <code>\\bot</code> quite easily, I think.</p>",
        "id": 221224700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609345696
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5536\">#5536</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/5538\">#5538</a></p>",
        "id": 221254238,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609369582
    },
    {
        "content": "<p>Shouldn't <code>\\bot</code> be \"up tack\", <code>\\perp</code> be \"perpendicular\", and <code>\\^perp</code> be the character you use?</p>",
        "id": 221256208,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609371684
    },
    {
        "content": "<p>(\"\" show unicode character names)</p>",
        "id": 221256297,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609371783
    },
    {
        "content": "<p>Hmm ... but personally, I like it when the vscode input is the same as the LaTeX input.  I find it easier to remember.</p>",
        "id": 221256489,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609371980
    },
    {
        "content": "<p>latex doesn't use unicode anyway, it has its own character naming convention</p>",
        "id": 221257086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609372683
    },
    {
        "content": "<p>Ok, more precisely, it's nice when the vscode input matches the Latex character naming convention for the corresponding mathematical symbol.</p>",
        "id": 221258456,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609374315
    },
    {
        "content": "<p>Wait, but isn't what I suggest above closer to latex anyway? \"\\perp\", isn't automatically superscript: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>‚ä•</mo></mrow><annotation encoding=\"application/x-tex\">\\perp</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mrel\">‚ä•</span></span></span></span></p>",
        "id": 221277348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609403992
    },
    {
        "content": "<p>I agree with Eric actually. I think <code>\\^perp</code> makes more sense even from a LaTeX perspective.</p>",
        "id": 221279008,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609406525
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/New.20linear.20algebra.20notation/near/221257086\">said</a>:</p>\n<blockquote>\n<p>latex doesn't use unicode anyway, it has its own character naming convention</p>\n</blockquote>\n<p>You meant: \"Mario doesn't use unicode in LaTeX\", right? Modern LaTeX has no trouble with unicode:</p>\n<div class=\"codehilite\" data-code-language=\"TeX\"><pre><span></span><code><span class=\"k\">\\documentclass</span><span class=\"nb\">{</span>article<span class=\"nb\">}</span>\n\n<span class=\"k\">\\usepackage</span><span class=\"nb\">{</span>unicode-math<span class=\"nb\">}</span>\n\n<span class=\"k\">\\begin</span><span class=\"nb\">{</span>document<span class=\"nb\">}</span>\n  <span class=\"s\">$</span><span class=\"nb\">Œî ‚ä• Œî'</span><span class=\"s\">$</span>\n<span class=\"k\">\\end</span><span class=\"nb\">{</span>document<span class=\"nb\">}</span>\n</code></pre></div>",
        "id": 221279094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1609406654
    },
    {
        "content": "<p>I mean that latex and unicode are independent approaches to having lots of squiggly things in text</p>",
        "id": 221279320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609406979
    },
    {
        "content": "<p>there are latex symbols that are not in unicode and vice versa</p>",
        "id": 221279376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609407017
    },
    {
        "content": "<p>I don't really mind, but let's decide before the vscode extension PR goes through.<br>\n<a href=\"https://github.com/leanprover/vscode-lean/pull/246\">https://github.com/leanprover/vscode-lean/pull/246</a></p>",
        "id": 221302048,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609433609
    },
    {
        "content": "<p>/poll name for <code>·óÆ</code><br>\n\\perp<br>\n\\^perp</p>",
        "id": 221302060,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609433620
    },
    {
        "content": "<p><code>^\\perp</code> would be cool, but it's not consistent with <code>\\^1</code> etc right now</p>",
        "id": 221302155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609433701
    },
    {
        "content": "<p>aagh, disregard the middle option with the typo!  I can't figure out how to delete it.</p>",
        "id": 221302162,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609433707
    },
    {
        "content": "<p><code>·óÆ</code> (canadian syllabics carrier p) at least semantically seems like a really odd choice of symbol</p>",
        "id": 221302280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609433819
    },
    {
        "content": "<p><code>·öÜ</code> (Ogham letter uath) suffers from the same flaw</p>",
        "id": 221302554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609434055
    },
    {
        "content": "<p><code>V‚î¥</code></p>",
        "id": 221302616,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609434111
    },
    {
        "content": "<p><code>Box drawings light up and horizontal</code></p>",
        "id": 221302659,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609434123
    },
    {
        "content": "<p>that doesn't seem too bad (-;</p>",
        "id": 221302737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609434205
    },
    {
        "content": "<p>Mathjax renders <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>V</mi><mo>‚ä•</mo></msup></mrow><annotation encoding=\"application/x-tex\">V^\\perp</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.849108em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mrel mtight\">‚ä•</span></span></span></span></span></span></span></span></span></span></span> as the following mathml:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">&lt;</span><span class=\"n\">math</span> <span class=\"n\">xmlns</span><span class=\"bp\">=</span><span class=\"s2\">\"http://www.w3.org/1998/Math/MathML\"</span><span class=\"bp\">&gt;</span>\n  <span class=\"bp\">&lt;</span><span class=\"n\">msup</span><span class=\"bp\">&gt;</span>\n    <span class=\"bp\">&lt;</span><span class=\"n\">mi</span><span class=\"bp\">&gt;</span><span class=\"n\">V</span><span class=\"bp\">&lt;/</span><span class=\"n\">mi</span><span class=\"bp\">&gt;</span>\n    <span class=\"bp\">&lt;</span><span class=\"n\">mo</span><span class=\"bp\">&gt;&amp;#</span><span class=\"n\">x22A5</span><span class=\"bp\">;&lt;/</span><span class=\"n\">mo</span><span class=\"bp\">&gt;</span>\n  <span class=\"bp\">&lt;/</span><span class=\"n\">msup</span><span class=\"bp\">&gt;</span>\n<span class=\"bp\">&lt;/</span><span class=\"n\">math</span><span class=\"bp\">&gt;</span>\n</code></pre></div>",
        "id": 221302761,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609434240
    },
    {
        "content": "<p>Is that <code>$V^\\perp$</code>?</p>",
        "id": 221302820,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609434278
    },
    {
        "content": "<p>Yeah, <code>V^\\perp</code> is the latex</p>",
        "id": 221302827,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609434292
    },
    {
        "content": "<p>Strikes me as a bug in mathjax</p>",
        "id": 221302885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609434323
    },
    {
        "content": "<p>I think the <code>&lt;msup&gt;</code> tag puts the character in the superscript.</p>",
        "id": 221302922,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609434357
    },
    {
        "content": "<p>Right, but <code>22A5</code> is \"up tack\", and there's a dedicated unicode character for \"perpendicular\"</p>",
        "id": 221303055,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609434452
    },
    {
        "content": "<p>So, <code>&amp;#x22A5;</code> is just the plain old <code>\\bot</code></p>",
        "id": 221303059,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609434457
    },
    {
        "content": "<p>I actually like <code>V‚î¥</code> a bit better than <code>V·óÆ</code></p>",
        "id": 221303143,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609434510
    },
    {
        "content": "<p>I agree, <code>0x2534 Box drawings light up and horizontal</code> seems like a good character to me</p>",
        "id": 221303214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609434586
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/New.20linear.20algebra.20notation/near/221303143\">said</a>:</p>\n<blockquote>\n<p>I actually like <code>V‚î¥</code> a bit better than <code>V·óÆ</code></p>\n</blockquote>\n<p>I might need my glasses to check whether that second one isn't just a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>V</mi><mn>1</mn></msup></mrow><annotation encoding=\"application/x-tex\">V^1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 221303307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609434648
    },
    {
        "content": "<p>VScode renders it for me as</p>",
        "id": 221303350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609434704
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/hK8BGAfmqsiFi2LbnEiOw7Qj/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hK8BGAfmqsiFi2LbnEiOw7Qj/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/hK8BGAfmqsiFi2LbnEiOw7Qj/image.png\"></a></div>",
        "id": 221303352,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609434706
    },
    {
        "content": "<p>That's reasonable imo</p>",
        "id": 221303410,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609434732
    },
    {
        "content": "<p>Really?  I like the small one, I think it looks more natural.</p>",
        "id": 221303417,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609434742
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/10f6c151e5abd7711c1cb06e720cc98f86234803/src/analysis/normed_space/inner_product.lean#L1715\">https://github.com/leanprover-community/mathlib/blob/10f6c151e5abd7711c1cb06e720cc98f86234803/src/analysis/normed_space/inner_product.lean#L1715</a></p>",
        "id": 221303424,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609434746
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">submodule.inf_orthogonal</span> <span class=\"o\">(</span><span class=\"n\">K‚ÇÅ</span> <span class=\"n\">K‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K‚ÇÅ</span><span class=\"bp\">·óÆ</span> <span class=\"bp\">‚äì</span> <span class=\"n\">K‚ÇÇ</span><span class=\"bp\">·óÆ</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">K‚ÇÅ</span> <span class=\"bp\">‚äî</span> <span class=\"n\">K‚ÇÇ</span><span class=\"o\">)</span><span class=\"bp\">·óÆ</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 221303433,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609434757
    },
    {
        "content": "<p>I think we already make it pretty hard to distinguish all our crazy unicode stuffs. Bigger is better</p>",
        "id": 221303464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609434790
    },
    {
        "content": "<p>ctrl-shift-+ is usually a good replacement for when I've mislaid my glasses</p>",
        "id": 221303504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609434835
    },
    {
        "content": "<p>Also what if people want to state theorems about <a href=\"https://en.wikipedia.org/wiki/Canadian_Aboriginal_syllabics\">canadian syllabics</a>? /s</p>",
        "id": 221303591,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609434884
    },
    {
        "content": "<p>Here's what it looks like in my emacs:<br>\n<a href=\"/user_uploads/3121/quz209Lorck2m63X_d73-F9R/Screenshot-from-2020-12-31-10-13-35.png\">Screenshot-from-2020-12-31-10-13-35.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/quz209Lorck2m63X_d73-F9R/Screenshot-from-2020-12-31-10-13-35.png\" title=\"Screenshot-from-2020-12-31-10-13-35.png\"><img src=\"/user_uploads/3121/quz209Lorck2m63X_d73-F9R/Screenshot-from-2020-12-31-10-13-35.png\"></a></div>",
        "id": 221303626,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1609434923
    },
    {
        "content": "<p><code>\\^perp</code> is the winner.  I've updated <a href=\"https://github.com/leanprover/vscode-lean/pull/246\">https://github.com/leanprover/vscode-lean/pull/246</a></p>",
        "id": 221363958,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609527543
    },
    {
        "content": "<p>By the way, I voted for <code>\\^bot</code> as well because both abbreviations can refer to the same symbol</p>",
        "id": 221364032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1609527631
    },
    {
        "content": "<p>Ok, I added that too.</p>",
        "id": 221364363,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1609528112
    }
]