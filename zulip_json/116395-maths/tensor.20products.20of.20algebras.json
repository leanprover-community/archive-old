[
    {
        "content": "<p>I'm playing with <a href=\"https://github.com/leanprover-community/mathlib/issues/3050\">#3050</a> (which is now released) in hopes of getting a slick proof of cayley-hamilton.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">tensor_product</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">tensor_product</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">elem_matrix</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">i&#39;</span> <span class=\"n\">j&#39;</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">j&#39;</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">of_semimodule</span> <span class=\"bp\">_</span> <span class=\"bp\">_;</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">dot_product</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">smul_sum</span><span class=\"o\">]},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"err\">⊗</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"err\">ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">A</span> <span class=\"err\">⊗</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"err\">∑</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"err\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">elem_matrix</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">),</span>\n  <span class=\"n\">map_one&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">map_mul&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">map_zero&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">commutes&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201429340,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592593813
    },
    {
        "content": "<p>my problem right now is that in the last <code>example</code> above, typeclass inference wants to know <code>algebra R (A ⊗ matrix n n R)</code></p>",
        "id": 201429385,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592593848
    },
    {
        "content": "<p>i think that I told it so pretty explicitly in the previous decl</p>",
        "id": 201429433,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592593876
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 201429456,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592593894
    },
    {
        "content": "<p>Try changing <code>\\ox</code> to <code>\\ox[R]</code>?</p>",
        "id": 201429758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592594055
    },
    {
        "content": "<p>ooh thank</p>",
        "id": 201429775,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592594074
    },
    {
        "content": "<p>Lean perhaps can't guess what you're tensoring over.</p>",
        "id": 201429797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592594090
    },
    {
        "content": "<p>yeah, I expected that I would see metavariables in the goal if that were the case, but I was wrong</p>",
        "id": 201429873,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592594137
    },
    {
        "content": "<p>Dealing with double sums is tricky. I feel like i should be able to do this without conv mode.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">tensor_product</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">tensor_product</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"err\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n      <span class=\"o\">(</span><span class=\"err\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"err\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">+</span>\n        <span class=\"err\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"err\">⊗ₜ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">sum_add_distrib</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_rhs</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">sum_add_distrib</span><span class=\"o\">,},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sum_congr</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">},</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sum_congr</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">},</span> <span class=\"n\">intro</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_tmul</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201431576,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592595199
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">add_tmul</span><span class=\"o\">,</span> <span class=\"n\">sum_add_distrib</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201450005,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592609160
    },
    {
        "content": "<p>my latest problem is that I can't get this algebra_equiv construction to fire</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">tensor_product</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">tensor_product</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">tensor_product</span> <span class=\"n\">finset</span>\n<span class=\"kn\">open</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">tensor_product</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">tensor_product</span><span class=\"bp\">.</span><span class=\"n\">alg_equiv_of_linear_equiv_tensor_product</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">of_semimodule</span> <span class=\"bp\">_</span> <span class=\"bp\">_;</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">dot_product</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">smul_sum</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⊗</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"err\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">alg_equiv_of_linear_equiv_tensor_product</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201451274,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592610482
    },
    {
        "content": "<p>In the last example, we get </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">A</span> <span class=\"err\">⊗</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"err\">≃ₐ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">A</span>\n<span class=\"k\">with</span>\n  <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"err\">⊗</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"err\">≃ₐ</span><span class=\"o\">[</span><span class=\"err\">?</span><span class=\"n\">m_1</span><span class=\"o\">]</span> <span class=\"err\">?</span><span class=\"n\">m_9</span>\n</code></pre></div>\n\n\n<p>which I think means it can't infer some typeclass relating the arguments</p>",
        "id": 201451326,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592610561
    },
    {
        "content": "<p>I tried using <code>@</code> and filling in holes but haven't yet figured out what instance is missing (or if the problem has some different nature)</p>",
        "id": 201451386,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592610606
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>  <span class=\"n\">refine</span> <span class=\"n\">alg_equiv_of_linear_equiv_tensor_product</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>works. This might be the <code>apply</code> bug? All I know is that there's a bug in apply, I don't know what it is exactly.</p>",
        "id": 201451417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592610665
    },
    {
        "content": "<p>wait, maybe it didn't work</p>",
        "id": 201451443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592610708
    },
    {
        "content": "<p>hah no it did work, a very small a changed to a very small l</p>",
        "id": 201451498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592610754
    },
    {
        "content": "<p>thanks!</p>",
        "id": 201451538,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592610842
    },
    {
        "content": "<p>Cool. I'm glad to see you're working on this <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>! I had a go at this route, but I got stuck on the annoying fact that <code>matrix n n A</code> had two non-definitionally equal <code>semimodule</code> structures, from <code>matrix.semimodule</code> and from <code>algebra.to_semimodule</code>. It would be good to work out a clean fix for this.</p>",
        "id": 201470267,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592645770
    },
    {
        "content": "<p>The standard way would be to have inside of <code>algebra</code> a semimodule field, and a Prop saying that the semimodule structure coincides with the one coming from algebra. Together with a constructor that builds the semimodule from the algebra structure if one doesn't care about another semimodule structure.</p>",
        "id": 201470804,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592646817
    },
    {
        "content": "<p>See Note [forgetful inheritance]</p>",
        "id": 201470845,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592646855
    },
    {
        "content": "<p>It's the metric space nightmare all over again</p>",
        "id": 201470962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592647143
    },
    {
        "content": "<p>We do a very good job of covering this up, but the moment someone looks at the definition of a metric space in mathlib they're like o_O</p>",
        "id": 201470973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592647196
    },
    {
        "content": "<p>On the other hand it's well explained in the docs</p>",
        "id": 201471091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592647344
    },
    {
        "content": "<p>Okay. I can have a go at this, unless/until someone (<span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>?) chimes in to point out an algebra-specific obstacle. (Or that they're already doing it. :-)</p>",
        "id": 201471118,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592647441
    },
    {
        "content": "<p>Though I feel they should be defeq, there is nothing different in both definitions. Indeed,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">semimodule</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">to_semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">delta</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">semimodule</span><span class=\"o\">,</span>\n  <span class=\"n\">delta</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">to_semimodule</span><span class=\"o\">,</span>\n  <span class=\"n\">delta</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">semimodule</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>Is the problem just because we are missing eta (or whatever it's called, I mean, two structures with equal fields are equal)?</p>",
        "id": 201472082,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592649205
    },
    {
        "content": "<p>I have had some frustrations working with algebras but I think they're unrelated. Algebras are a pretty weird way of bundling morphisms, because they're a class -- a \"canonical map\". In category theory you'd just make R-algebras and it would be embedded in the system in a different way.</p>",
        "id": 201472083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592649213
    },
    {
        "content": "<p>Patrick thought very hard about topology as part of the perfectoid project and ended up making substantial changes. Algebras are something which hasn't really been pushed in that way but I hope to start on this over the summer</p>",
        "id": 201472259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592649512
    }
]