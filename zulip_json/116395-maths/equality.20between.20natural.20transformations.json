[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <br>\nIn <a href=\"https://github.com/leanprover-community/mathlib/issues/986\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/986\">#986</a> the following issue came up: how do we formulate equalities between natural transformations? We can of course use <code>α = β</code>, but we can also use <code>∀X, α.app X = β.app X</code> (of course, these are equivalent). I would have a preference for the latter: I think in general equalities between morphisms are easier to work with. In either case, we should choose one of the options, and then consistently stick with it throughout the library.</p>\n<p>One disadvantage when we use <code>α = β</code> is that we sometimes have to insert unitors/associators between functors, which disappear on the morphism level. For example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">⥤</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"err\">⟶</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"err\">⋙</span> <span class=\"n\">F</span> <span class=\"err\">⟶</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">whisker_left</span> <span class=\"n\">G</span> <span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"n\">β</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">right_unitor</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inv</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"err\">⟶</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">id</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"err\">⋙</span> <span class=\"n\">F</span> <span class=\"err\">⟶</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"o\">(</span><span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"n\">sorry</span>\n</pre></div>",
        "id": 165001300,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1557163753
    },
    {
        "content": "<p>I'm not sure if I understand the reason lying behind your proposal... but I trust your experience. I can't say much about how well your suggestion would \"compose\". But presumably you are claiming it will be at least as good as our current setup...</p>",
        "id": 165004761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557166257
    },
    {
        "content": "<p>One of the questions is what would be more useful to <code>tidy</code>. Does <code>tidy</code> apply <code>ext</code> before <code>simp</code> when proving an equality between natural transformations? If so, a lemma like <code>whisker_left G α = β ≫ (right_unitor G).inv</code> will probably never be applied by <code>tidy</code>, while <code>α.app (G.obj X) = β.app X</code> would be.</p>\n<blockquote>\n<p>But presumably you are claiming it will be at least as good as our current setup...</p>\n</blockquote>\n<p>Probably there are (small) trade-offs either way.</p>",
        "id": 165007001,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1557167827
    },
    {
        "content": "<p>I think <code>ext</code> appears before <code>simp</code> in the list of tactics...</p>",
        "id": 165007117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557167906
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/00aaf05a00b928ea9ac09721d87ae5d2ca1ae5a1/src/tactic/tidy.lean#L42\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/00aaf05a00b928ea9ac09721d87ae5d2ca1ae5a1/src/tactic/tidy.lean#L42\">https://github.com/leanprover-community/mathlib/blob/00aaf05a00b928ea9ac09721d87ae5d2ca1ae5a1/src/tactic/tidy.lean#L42</a></p>",
        "id": 165007158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557167945
    },
    {
        "content": "<p>In some recent work (on stalks) I actually switched it around. Tidy seems to work between with <code>ext</code> after <code>simp</code>, so I'd prefer we get used to that. :-)</p>",
        "id": 165011412,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557171018
    },
    {
        "content": "<p>I can't parse your last sentence... Could you rephrase?</p>",
        "id": 165011917,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557171375
    },
    {
        "content": "<p>Better?</p>",
        "id": 165012571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1557171872
    },
    {
        "content": "<p>Aah... <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> You switched <code>ext</code> and <code>simp</code> around?<br>\nI should just go to bed. I thought you were saying you switched from <code>\\a = \\b</code> to the version that Floris is proposing.</p>",
        "id": 165012851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557172085
    },
    {
        "content": "<p>/me <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span></p>",
        "id": 165012892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557172091
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Interesting! How often do you have to insert unitors. Is that annoying?</p>\n<p>About the unit-counit laws specifically: do we want to \"abuse\" that <code>functor.id ⋙ F = F ⋙ functor.id</code> definitionally, or do we want to use both unitors?</p>",
        "id": 165032575,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1557190231
    },
    {
        "content": "<p>I guess I don't have an opinion about the <code>functor.id ⋙ F = F ⋙ functor.id</code> trick. If we get burnt by it, it's unlikely to be much trouble to fix.</p>",
        "id": 165035458,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1557194554
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> This commit <a href=\"https://github.com/leanprover-community/mathlib/pull/986/commits/56a95da8dbfd7610bc99cf72f621f8c967204604\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/986/commits/56a95da8dbfd7610bc99cf72f621f8c967204604\">https://github.com/leanprover-community/mathlib/pull/986/commits/56a95da8dbfd7610bc99cf72f621f8c967204604</a> by Scott shows why I'm inclined to go for the <code>\\a = \\b</code> version...</p>",
        "id": 165040401,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1557201699
    }
]