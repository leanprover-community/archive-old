[
    {
        "content": "<p>A student of mine <span class=\"user-mention\" data-user-id=\"243895\">@Shenyang Wu</span>  has a G-module M, so an abelian group with a left action of a group G, with notation <code>\\bub</code> or <code>\\bu</code>, the blob thing. He also wants to have the usual action of <code>int</code> on M. Can he use <code>\\bub</code> for this too? </p>\n<p>We just had a torrid time getting <code>add_gsmul</code> to work, until I realised that now one has to put <code>open_locale add_group</code>. Is this what I'm supposed to be doing? The bub notation in algebra.group_power is \"localized notation\".</p>",
        "id": 182190801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575045969
    },
    {
        "content": "<p>It should work out of the box:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 182191024,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575046283
    },
    {
        "content": "<p>I think all of the <code>add_gsmul</code>/localized notation is to bootstrap our way before we have declared the actual module instance? Not sure though.</p>",
        "id": 182191093,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575046366
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group_power</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">blah</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_gsmul</span><span class=\"o\">,</span> <span class=\"c1\">-- rewrite fails</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Why does this fail though?</p>",
        "id": 182191178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575046457
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">add_gsmul</span>\n<span class=\"c1\">-- add_gsmul : ∀ (a : ?M_1) (i j : ℤ), gsmul (i + j) a = gsmul i a + gsmul j a</span>\n</pre></div>\n\n\n<p>It's defined using localised notation which doesn't make it out of the file</p>",
        "id": 182191207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575046502
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">add_gsmul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">gpow_add</span> <span class=\"o\">(</span><span class=\"n\">multiplicative</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>[from mathlib]</p>",
        "id": 182191223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575046525
    },
    {
        "content": "<p>They're not syntactically equal, but only definitionally equal. <code>•</code> is defined to be <code>gsmul</code>, but not syntactically the same as it. There should be a corresponding theorem in <code>algebra.module</code> though (probably called <code>add_smul</code>.</p>",
        "id": 182191329,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575046633
    },
    {
        "content": "<p>so here I can fix this with <code>open_locale add_group</code>. Is this what I'm supposed to be doing?</p>",
        "id": 182191335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575046647
    },
    {
        "content": "<p>If I don't do this <code>open_locale</code> thing then <code>add_gsmul</code> is unusable (unless I constantly unfold the notation)</p>",
        "id": 182191405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575046712
    },
    {
        "content": "<p>I just don't know if I'm asking too much here.</p>",
        "id": 182191411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575046722
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">blah</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">j</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_smul</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 182191413,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575046725
    },
    {
        "content": "<p>OK we'll press on with <code>add_smul</code> but I might be back here whining when the roof falls in. Thanks Floris.</p>",
        "id": 182191457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575046795
    },
    {
        "content": "<p>So if you do <code>open_locale</code>, the notation <code>•</code> is hijacked to mean <code>gsmul</code> instead of its usual definition (<code>has_smul.smul</code>). This is probably not a good idea, not in the least because you also want to write <code>g • m</code> with <code>g : G</code>.</p>",
        "id": 182191520,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575046816
    },
    {
        "content": "<p>All theorems about <code>gsmul</code> should have a corresponding theorem about <code>smul</code> in <code>algebra.module</code>. Hopefully...</p>",
        "id": 182191547,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575046855
    },
    {
        "content": "<p>well, that is not true... You might eventually want to use a lemma that <code>i • a = gsmul i a</code> (by <code>rfl</code>).<br>\nPerhaps <code>algebra.group_power</code> should be refactored: we want to use the operation <code>•</code> and not <code>gsmul</code> as much as possible.</p>",
        "id": 182191728,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575047036
    },
    {
        "content": "<p>One other option you have is to <code>open_locale smul</code>. Then <code>•ℤ</code> will be the notation for <code>gsmul</code>, which means you can rewrite with all the <code>gsmul</code>-lemmas. It will be annoying though, since you might accidentally type <code>•</code> instead of <code>•ℤ</code> which will type-check, but might lead to errors down the road.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">smul</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">•</span><span class=\"bp\">ℤ</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">•</span><span class=\"bp\">ℤ</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 182191912,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575047205
    }
]