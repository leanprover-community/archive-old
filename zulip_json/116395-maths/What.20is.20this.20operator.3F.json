[
    {
        "content": "<p>This is kind of a weird question, but I find myself needing to make use of the following logical operator:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Q</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n\n<span class=\"kd\">notation</span> <span class=\"bp\">`ùîΩ`</span> <span class=\"n\">P</span> <span class=\"bp\">`</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"bp\">`</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">P</span> <span class=\"n\">Q</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">ùîΩ</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"c1\">-- #check ùîΩ x, P x &gt;&gt; Q x</span>\n</code></pre></div>\n<p>What would you call it? Bonus points if you can figure out how to declare the commented notation</p>",
        "id": 219081054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607348804
    },
    {
        "content": "<p>Though not completely related, a <em>porism</em> is a statement that, as long as it is true once, it is always true (see <a href=\"https://en.wikipedia.org/wiki/Poncelet%27s_closure_theorem\">Poncelet's porism</a>).  Hope that this helps!</p>\n<p>(I may have completely misunderstood the question, though...)</p>",
        "id": 219081648,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607349150
    },
    {
        "content": "<p>the working title for it is \"positive implication\". It's pretty weird since it isn't monotone or antitone wrt the first argument. You might gloss it as \"P implies Q, but not vacuously\"</p>",
        "id": 219082189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607349445
    },
    {
        "content": "<p>It comes up \"often\": a topological space is connected if it is non-empty and [something else].  It is frequent to simply check the something else, though.  I rarely like this...</p>",
        "id": 219082433,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607349577
    },
    {
        "content": "<p>A natural number is prime if it is at least 2 and had only 1 and itself as prime divisors.  The latter condition is often the only one to be checked...</p>",
        "id": 219082563,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607349635
    },
    {
        "content": "<p>(Often, likely outside of the crowd of Lean users...)</p>",
        "id": 219082593,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607349647
    },
    {
        "content": "<p>well, notice that the same P has to be used in both conjuncts</p>",
        "id": 219082648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607349676
    },
    {
        "content": "<p>Actually, I was using the same P and the same Q!  Sorry!</p>",
        "id": 219082707,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607349701
    },
    {
        "content": "<p>the connectedness example might fit this, if [something else] is a statement about every point in the space</p>",
        "id": 219082729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607349716
    },
    {
        "content": "<p>Hmmm, to be honest, I am now a little skeptical that either of my examples fit what you want....</p>",
        "id": 219083059,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607349860
    },
    {
        "content": "<p>I think that I read your initial statement as <code>(‚àÉ x, P x) ‚àß ‚àÄ x, P x</code>.  My examples might fit this operator...</p>",
        "id": 219083212,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607349952
    },
    {
        "content": "<p>I put parentheses in to clarify</p>",
        "id": 219083311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607350000
    },
    {
        "content": "<p>I think this operator has been considered as a way to read the natural language \"if then\"</p>",
        "id": 219083392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607350048
    },
    {
        "content": "<p>That is, \"when I go to lunch, I order a sandwich\" is nominally a universal conditional, but there is some additional pragmatic content that implies that I go to lunch sometimes (or else it would be a weird thing to say)</p>",
        "id": 219083555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607350143
    },
    {
        "content": "<p>\"nonempty implication\" instead of \"positive application\"?</p>",
        "id": 219083715,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1607350219
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> didn't you just suggest a name? <code>when</code>, or the <code>when-then</code> operator.</p>",
        "id": 219084318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607350517
    },
    {
        "content": "<p>For the bonus points:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`ùîΩ`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">s</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">`</span> <span class=\"bp\">&gt;&gt;'</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">s</span> <span class=\"n\">r</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n\n<span class=\"k\">#check</span> <span class=\"bp\">ùîΩ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;&gt;'</span> <span class=\"n\">Q</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 219084358,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607350540
    },
    {
        "content": "<p><code>&gt;&gt;</code> doesn't seem to work because it's already an operator</p>",
        "id": 219084383,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607350551
    },
    {
        "content": "<p>Oh that's how that works</p>",
        "id": 219084453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607350575
    },
    {
        "content": "<p>The syntax of notation commands is a mystery to me</p>",
        "id": 219084512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607350612
    },
    {
        "content": "<p>Maybe adjusting the binding precedence can make <code>&gt;&gt;</code> work</p>",
        "id": 219084518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607350614
    },
    {
        "content": "<p>Also your original version <code>#check ùîΩ (Œªx, P x) &gt;&gt; (Œªx, Q x)</code> seems to poison the parser on the following line</p>",
        "id": 219084556,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607350633
    },
    {
        "content": "<p>oh, so it does</p>",
        "id": 219084621,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607350669
    },
    {
        "content": "<p>With your version, this fails on the second line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">ùîΩ</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"bp\">ùîΩ</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 219084627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1607350672
    },
    {
        "content": "<p>Let me try with another example.  In the case in which <code>Œ± = ‚Ñï</code> and <code> Q n = P n.succ</code> your operator is \"eventual induction\", right?</p>\n<p>For instance, <code>P n := 37 \\leq n</code> and <code>Q n := 37 \\leq n.succ</code> fit the requirements?</p>\n<p>Kind of a silly example, however, <code>P 36</code> is false, while <code>Q 36</code> is true.  Otherwise, they are either both true or both false.</p>",
        "id": 219086149,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1607351430
    },
    {
        "content": "<p>ah yes, that's an interesting example</p>",
        "id": 219086455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607351567
    },
    {
        "content": "<p>The context where this came up for me was in the safety property for a nondeterministic state machine: if s is \"safe\" then this means that there exists s' such that s -&gt; s', and every s' such that s -&gt; s' is \"safe\"</p>",
        "id": 219086819,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1607351727
    }
]