[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>  I think I just completed the topological ring completion project. Remember where we got stuck last time: we could define a ring structure on <code>completion a</code> assuming that <code>a</code> was a <em>separated</em> topological ring, see <a href=\"https://github.com/leanprover/mathlib/blob/master/analysis/topology/completion.lean#L1168\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/analysis/topology/completion.lean#L1168\">https://github.com/leanprover/mathlib/blob/master/analysis/topology/completion.lean#L1168</a>. We could also construct a ring structure on <code>quotient (separatation_setoid a)</code>, see <a href=\"https://github.com/leanprover/mathlib/blob/master/analysis/topology/quotient_topological_structures.lean#L204\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/analysis/topology/quotient_topological_structures.lean#L204\">https://github.com/leanprover/mathlib/blob/master/analysis/topology/quotient_topological_structures.lean#L204</a>. I did that by leveraging the algebraic quotient construction, using that the separation relation for uniform groups is the same as the left coset relation for the closure of zero. This meant fighting the system to use an equivalence relation equality to relate the quotients. Then I constructed <a href=\"https://github.com/leanprover/mathlib/blob/master/analysis/topology/completion.lean#L710-L711\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/analysis/topology/completion.lean#L710-L711\">https://github.com/leanprover/mathlib/blob/master/analysis/topology/completion.lean#L710-L711</a> <code>completion (quotient $ separatation_setoid a) ≃ completion α</code> which I hoped to use to glue the preceding two constructions and get a ring structure on <code>completion α</code>. But this meant fighting Lean again, for lack of transport of structure along this equiv.</p>",
        "id": 152110493,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545142597
    },
    {
        "content": "<p>Yes, I remember. How did you solve it. Or did you copy the structure and wrote down the transport for each rule?</p>",
        "id": 152110596,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1545142723
    },
    {
        "content": "<p>So I backtracked completely. I defined a ring structure on <code>sep_quot α := quotient (separatation_setoid a)</code> directly, using the link between the separation relation and the closure of zero only in the lemma proving that multiplication descends to the quotient. And then I defined <code>hcompletion α := completion (sep_quot α)</code>. This looks really weird because remember <code>completion α := quotient (separation_setoid $ Cauchy α)</code>, so we use the separation relation twice. But it works very smoothly</p>",
        "id": 152110617,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545142772
    },
    {
        "content": "<p>Remember how Bourbaki does it: they replace <code>Cauchy α</code> with the space of <em>minimal</em> Cauchy filters on α. And they define the completion as <code>min_cauchy (quotient $ separatation_setoid a)</code>. That's how they avoid the double quotient</p>",
        "id": 152110717,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545142873
    },
    {
        "content": "<p>while still first getting rid of the separation issue</p>",
        "id": 152110728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545142894
    },
    {
        "content": "<p>I didn't start that road because I saw you did everything with non-minimal Cauchy filters. And of course all three constructions solve the same universal problem, so there are uniquely isomorphic</p>",
        "id": 152110785,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545142941
    },
    {
        "content": "<p>Cool! Congrats on completing this! <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>",
        "id": 152110831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545143018
    },
    {
        "content": "<p>The messy thing with my construction is that <code>completion α</code> becomes a purely intermediate thing, still with a rather large theory, which needs to be restated for <code>hcompletion</code></p>",
        "id": 152110892,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545143053
    },
    {
        "content": "<p>Is \"Bourbaki did it this way\" an argument for or against \"Lean should do it this way\", or are they just independent things?</p>",
        "id": 152111034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545143201
    },
    {
        "content": "<p>It's part of my excuse for creating this mess</p>",
        "id": 152111074,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545143248
    },
    {
        "content": "<p>I mean this mess: <code>instance : has_coe α (hcompletion α) := ⟨quotient.mk ∘ Cauchy.pure_cauchy ∘ quotient.mk⟩</code></p>",
        "id": 152111173,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545143300
    },
    {
        "content": "<p>If it works, it works :-)</p>",
        "id": 152111181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545143313
    },
    {
        "content": "<p>you can't maintain a library by bodging...</p>",
        "id": 152111293,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545143413
    },
    {
        "content": "<p>It has a very clean interface since it solves a very clearly specified universal problem</p>",
        "id": 152111369,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545143513
    },
    {
        "content": "<p>Is one of the the issues that we need to transport theorems along isomorphisms and this is still not yet possible, so we fudge our way around it?</p>",
        "id": 152111438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545143552
    },
    {
        "content": "<p>The transport idea was already a work-around actually</p>",
        "id": 152111474,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545143584
    },
    {
        "content": "<p>The big thing is at <a href=\"https://github.com/PatrickMassot/mathlib/commit/6dbdbbfe5304e85d95784f18d9a978ab129a84c8\" target=\"_blank\" title=\"https://github.com/PatrickMassot/mathlib/commit/6dbdbbfe5304e85d95784f18d9a978ab129a84c8\">https://github.com/PatrickMassot/mathlib/commit/6dbdbbfe5304e85d95784f18d9a978ab129a84c8</a></p>",
        "id": 152113098,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545144992
    },
    {
        "content": "<p>That's 500 more lines to <code>completion.lean</code></p>",
        "id": 152113142,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545145048
    },
    {
        "content": "<p>But some of them should move elsewhere, independently of the reorganization discussion</p>",
        "id": 152113277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545145168
    },
    {
        "content": "<p>It includes using <code>def function.comp₂ (f : α → β → γ) (g : γ → δ) : α → β → δ := λ  x y, g (f x y)</code> and its companions <code>def continuous₂ (f : α → β → γ) := continuous (function.uncurry f)</code> etc to nicely handle functions of two variables (like addition and multiplication), as was mentioned in another thread</p>",
        "id": 152113409,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545145265
    },
    {
        "content": "<p>I'd like to get <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> input before finishing restating stuff for <code>hcompletion</code></p>",
        "id": 152113626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545145458
    },
    {
        "content": "<p>I think <code> continuous₂</code> and <code>uniform_continuous₂</code> should be fully transparent, without any rules about them. So only use them when writing down concrete instances</p>",
        "id": 152113645,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1545145479
    },
    {
        "content": "<p>I need them as assumption for many statements</p>",
        "id": 152113690,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545145517
    },
    {
        "content": "<p>Yes, there its okay</p>",
        "id": 152113703,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1545145529
    },
    {
        "content": "<p>and the most important piece is the composition lemma</p>",
        "id": 152113719,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545145551
    },
    {
        "content": "<p><a href=\"https://github.com/PatrickMassot/mathlib/commit/6dbdbbfe5304e85d95784f18d9a978ab129a84c8#diff-f7d0385aaa9b17579cee0f2af9cc9135R120\" target=\"_blank\" title=\"https://github.com/PatrickMassot/mathlib/commit/6dbdbbfe5304e85d95784f18d9a978ab129a84c8#diff-f7d0385aaa9b17579cee0f2af9cc9135R120\">https://github.com/PatrickMassot/mathlib/commit/6dbdbbfe5304e85d95784f18d9a978ab129a84c8#diff-f7d0385aaa9b17579cee0f2af9cc9135R120</a></p>",
        "id": 152113731,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545145559
    },
    {
        "content": "<p>This is what make this so convenient</p>",
        "id": 152113791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545145579
    },
    {
        "content": "<blockquote>\n<p>Remember how Bourbaki does it: they replace <code>Cauchy α</code> with the space of <em>minimal</em> Cauchy filters on α. And they define the completion as <code>min_cauchy (quotient $ separatation_setoid a)</code>. That's how they avoid the double quotient</p>\n</blockquote>\n<p>I just checked, and actually the above is not quite correct. It seems that minimal Cauchy filters are already separated.</p>",
        "id": 152124223,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545154297
    },
    {
        "content": "<p>So this is a really more economical way of building the Hausdorff completion. But they don't solve problem of factorizing morphisms into complete spaces (not hausdorff complete spaces), whereas we do it.</p>",
        "id": 152124381,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1545154441
    }
]