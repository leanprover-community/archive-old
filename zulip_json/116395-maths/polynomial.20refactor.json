[
    {
        "content": "<p>I split data/polynomial.lean into several files on the branch <code>mathlib:polynomial_refactor</code>. I'm currently working on </p>\n<ul>\n<li>fix some proofs that broke during the shuffle</li>\n<li>add module docstrings</li>\n<li>find homes for the last 200 lines of code in data/polynomial/misc.lean</li>\n</ul>",
        "id": 203965083,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594824621
    },
    {
        "content": "<p>currently several means, uh, 15. one optimization i'm not yet attempting is to reduce the height of the import DAG. i think some of the content will end up in <code>ring_theory</code> and/or <code>field_theory</code>, though I think most of it should go to <code>algebra/polynomial</code></p>",
        "id": 203965384,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594824760
    },
    {
        "content": "<p>great. small files are good</p>",
        "id": 203965752,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594824934
    },
    {
        "content": "<p>i am very confused about this broken proof:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/compare/polynomial_refactor#diff-ad4dee56670fd030e11668e3244f9379R123-R126\">https://github.com/leanprover-community/mathlib/compare/polynomial_refactor#diff-ad4dee56670fd030e11668e3244f9379R123-R126</a></p>",
        "id": 203966795,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594825376
    },
    {
        "content": "<p>is that the current branch?</p>",
        "id": 203966851,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594825399
    },
    {
        "content": "<p>oh i guess that link doesn't do what I thought it did</p>",
        "id": 203966909,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594825437
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">eval₂_comp</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→+*</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">eval₂</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"c1\">--   show (p.sum (λ e a, C a * q ^ e)).eval₂ f x = p.eval₂ f (eval₂ f x q),</span>\n<span class=\"c1\">-- by simp only [eval₂_mul, eval₂_C, eval₂_pow, eval₂_sum]; refl</span>\n</code></pre></div>",
        "id": 203967053,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594825493
    },
    {
        "content": "<p>the old proof is commented out. all of the lemmas used in the <code>simp only</code> have been proven and their statements haven't changed, but now it doesn't close the goal</p>",
        "id": 203967111,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594825522
    },
    {
        "content": "<p>oh I maybe have the wrong set of comm_semiring hypotheses (nope, I have them for both <code>R</code> and <code>S</code>)</p>",
        "id": 203967351,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594825659
    },
    {
        "content": "<p>gah, I have a local branch also called polynomial_refactor, which I'll have to move before I can check out yours</p>",
        "id": 203968051,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594825962
    },
    {
        "content": "<p>oops</p>",
        "id": 203968193,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594826020
    },
    {
        "content": "<p>i'm going to open it as a WIP PR; that will make it easier to discuss specific pieces of code</p>",
        "id": 203970052,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594826778
    },
    {
        "content": "<p>aha! there are some places where I proved something about <code>{p q : polynomial R}</code> when they used to be proven for <code>{q : polynomial R} {q : polynomial S}</code></p>",
        "id": 203977254,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594829785
    },
    {
        "content": "<p>fixed all the sorries. thinking about docstrings, while waiting for CI to tell me which things I broke outside of data/poynomial with my changes</p>",
        "id": 203984372,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594833229
    },
    {
        "content": "<p>Thank you so much for doing this</p>",
        "id": 203984456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594833251
    },
    {
        "content": "<p>I'm glad I have this community to teach me how to contribute to a large software project</p>",
        "id": 203984595,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594833329
    },
    {
        "content": "<p>is <code>rec_on_horner</code>a programming thing? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.rec_on_horner\">docs#polynomial.rec_on_horner</a></p>",
        "id": 203988061,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594834910
    },
    {
        "content": "<p>Not really... just a \"programming name\" (-;</p>",
        "id": 203988131,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594834930
    },
    {
        "content": "<p>i think i've heard \"horner normal form\" before, maybe if i stare at this anothe rminute i'll see why it's a normal form</p>",
        "id": 203988191,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594834964
    },
    {
        "content": "<p>(it is a def without a docstring. i'm not sure why it's not a lemma instead)</p>",
        "id": 203988307,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594835026
    },
    {
        "content": "<p>oh okay</p>",
        "id": 203988405,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594835051
    },
    {
        "content": "<p>it is a <code>Sort</code>-valued induction</p>",
        "id": 203988420,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594835058
    },
    {
        "content": "<p>i don't know why you need that other than for programming, but I will now try to write a dosctring</p>",
        "id": 203988456,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594835081
    },
    {
        "content": "<p>It could be that for a particular proof this is the kind of induction strategy that works well</p>",
        "id": 203988569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594835150
    },
    {
        "content": "<p>but if you're just proving something then you wouldn't mind being <code>Prop</code>-valued?</p>",
        "id": 203988743,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594835237
    },
    {
        "content": "<p>Sure... but it also works for definitions. Although I can't think of a use-case...</p>",
        "id": 203988796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594835265
    },
    {
        "content": "<p>(to be clear, I'm not definitely not arguing to change the definition; i'm just trying to understand what its docstring should be)</p>",
        "id": 203988955,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594835330
    },
    {
        "content": "<p>I didn't know it was called that, but I remember learning about the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><mi>X</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo>+</mo><mi>X</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mn>2</mn></msub><mo>+</mo><mi>X</mi><mo stretchy=\"false\">(</mo><mo>…</mo><mtext> </mtext><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a_0+X(a_1+X(a_2+X(\\dots)))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mopen\">(</span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> form for polynomials in high school algebra.  As far as I know, it's mostly useful for computation, since it saves you from calculating all those powers.  Though, I guess <code>rec_on_horner</code> is essentially induction on the coefficient list with two operations: insert 0 at the beginning, or replace a 0 at the beginning with a non-zero constant, which seems relatively easy to work with.</p>",
        "id": 203990744,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594836211
    },
    {
        "content": "<p>oof, I broke a proof in polynomial_algebra.lean, which suggests that I've changed the behavior of the polynomial simp set :(</p>",
        "id": 203991505,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594836535
    },
    {
        "content": "<p>Ooo.oo... I'm sorry for you</p>",
        "id": 203991736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594836620
    },
    {
        "content": "<p>After tomorrow I would be able to help</p>",
        "id": 203991779,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594836643
    },
    {
        "content": "<p>I'm feeling good about pushing forward and trying to get to the bottom of things myself; hopefully by the time you have time to think about it the remaining questions will be big-picture design stuff :)</p>",
        "id": 203991846,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594836682
    },
    {
        "content": "<p>i think my problems are with <code>apply_eq_coeff</code> in particular. I've had to write <code>p.to_fun</code> a lot</p>",
        "id": 203993253,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594837344
    },
    {
        "content": "<p>Oooh, that shouldn't happen</p>",
        "id": 203994607,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594837927
    },
    {
        "content": "<p>Please use <code>coeff n p</code> instead of <code>p.to_fun n</code></p>",
        "id": 203994663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594837952
    },
    {
        "content": "<p>in at least one case, the <code>to_fun</code> is coming from <code>finsupp.mem_support_iff</code></p>",
        "id": 203995899,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594838566
    },
    {
        "content": "<p>Ouch</p>",
        "id": 203996185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594838718
    },
    {
        "content": "<p>it builds</p>",
        "id": 204012144,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594846773
    },
    {
        "content": "<p>there are a lot of module docstrings which want to be elaborated</p>",
        "id": 204012356,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594846872
    },
    {
        "content": "<p>Thank you so so much!</p>",
        "id": 204039843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594868678
    },
    {
        "content": "<p>I think you shouldn't feel burdened by more documentation. That can be done later.</p>",
        "id": 204039851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594868696
    },
    {
        "content": "<p>what do we need to check before merging?</p>",
        "id": 204040259,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594869206
    },
    {
        "content": "<p>Did you fix the conflict already? Otherwise we have to wait a bit for someone to do that.</p>",
        "id": 204040457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594869438
    },
    {
        "content": "<p>I don't think I can review this today, maybe tomorrow. And this weekend I'll take a healthy break away from my screen.</p>",
        "id": 204040531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594869502
    },
    {
        "content": "<p>Monday it would be top of my list.</p>",
        "id": 204040534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594869513
    },
    {
        "content": "<p>i think i need to figure out what changed in data/polynomial.lean in master and then distribute those changes into the current file structure</p>",
        "id": 204041104,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594870259
    },
    {
        "content": "<p>Maybe <code>git diff HEAD~5 HEAD -- src/data/polynomial.lean</code> can help (and tweak the <code>5</code> a bit)</p>",
        "id": 204041128,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594870310
    },
    {
        "content": "<p>running that command gives me no output, including with 5 \\to 1 and 5 \\to 10</p>",
        "id": 204041586,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594870916
    },
    {
        "content": "<p>i'll try using the github ui to look at commits</p>",
        "id": 204041657,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594870986
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> Did you <code>git pull</code> on the <code>master</code> branch?</p>",
        "id": 204041790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594871169
    },
    {
        "content": "<p>Maybe you didn't have the conflicting changes yet, since they are probably quite new</p>",
        "id": 204041795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594871185
    },
    {
        "content": "<p>I did <code>git fetch</code> and <code>git merge origin master</code> and have not made a merge commit</p>",
        "id": 204041827,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594871242
    },
    {
        "content": "<p>i guess if i make a merge commit that keeps the file, your method will work</p>",
        "id": 204041834,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594871263
    },
    {
        "content": "<p>agh i just get the trivial diff of adding the whole file</p>",
        "id": 204041922,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594871346
    },
    {
        "content": "<p>but now I guess both files live on my machine and I could diff them manually</p>",
        "id": 204041929,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594871358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/116395-maths/topic/polynomial.20refactor/near/204041922\">said</a>:</p>\n<blockquote>\n<p>agh i just get the trivial diff of adding the whole file</p>\n</blockquote>\n<p>Sounds like you are not on the master branch</p>",
        "id": 204042098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594871594
    },
    {
        "content": "<p>ah, i just figured it out</p>",
        "id": 204042166,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594871648
    },
    {
        "content": "<p>i was using too small numbers</p>",
        "id": 204042172,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594871654
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/commit/58dde5b8fe3778d11b8e4d936a7b98fb790ea085\">https://github.com/leanprover-community/mathlib/commit/58dde5b8fe3778d11b8e4d936a7b98fb790ea085</a></p>",
        "id": 204042179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594871665
    },
    {
        "content": "<p>if i go back 50 commits, then that's before I deleted the file</p>",
        "id": 204042180,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594871666
    },
    {
        "content": "<p>Right, but <code>master</code> doesn't know about those 50 commits</p>",
        "id": 204042185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594871681
    },
    {
        "content": "<p>Hence, on the master branch, I guess you could use small numbers</p>",
        "id": 204042195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594871696
    },
    {
        "content": "<p>oh i see</p>",
        "id": 204042197,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594871700
    },
    {
        "content": "<p>Is it Kenny's commit I linked above?</p>",
        "id": 204042201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594871705
    },
    {
        "content": "<p>I won't be able to look at this until at least tomorrow, but I did see this thing above about having to use <code>p.to_fun</code> in places.</p>",
        "id": 204042211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594871711
    },
    {
        "content": "<p>We definitely don't want that.</p>",
        "id": 204042217,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594871717
    },
    {
        "content": "<p>In fact, a thorough refactor of <code>polynomial</code> is probably going to want to make <code>polynomial</code> <code>@[irreducible]</code> as early as possible, so it's not even possible to convert it to a function.</p>",
        "id": 204042225,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594871756
    },
    {
        "content": "<p>(i.e. <code>coeff</code> will be the only option)</p>",
        "id": 204042262,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594871763
    },
    {
        "content": "<p>yes, the problem was that we accidentally went the other direction, making a global instance of coe_to_fn</p>",
        "id": 204042273,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594871807
    },
    {
        "content": "<p>once we got rid of the bad instance we stopped having the problem</p>",
        "id": 204042300,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594871845
    },
    {
        "content": "<p>i'll work on merging kenny's tensor product commit</p>",
        "id": 204042390,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594871935
    },
    {
        "content": "<p>ah, great, the only change to polynomial.lean was a deletion of one instance</p>",
        "id": 204042701,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594872357
    },
    {
        "content": "<p><code>git log -p filename</code> will give you the complete history of a file, expressed as a series of patches - sounds like it might have been helpful</p>",
        "id": 204047429,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1594878194
    }
]