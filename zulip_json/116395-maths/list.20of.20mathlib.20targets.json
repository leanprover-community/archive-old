[
    {
        "content": "<p>Over the next couple of days I'm going to have a good look at the perfectoid project from a \"bottom up\" perspective and try and get a coherent idea of some easy targets for mathlib. For example (although not directly related to the perfectoid project) I would imagine it would be relatively easy to define PID's now and prove that Euclidean domains are PID's and that PID's are UFD's. My feeling is that achievable goals like this should be on some sort of informal list somewhere. Once the p-adic numbers get accepted then defining the adeles of a number field should also be on this list (and if people aren't happy with a definition being on the list then I can propose a random simple theorem about adeles, but for me a definition is fine). Where should such a list live? I remember once, when I was thinking about formalising my graduate course of earlier this year, I thought about formalising the adeles and I made it an issue in mathlib, but now I realise that probably there is a huge list of little things which I'd like to see in mathlib (several of which I'll probably end up doing myself) and I don't think it's sane to have an issue for each of them.</p>",
        "id": 132746533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535197712
    },
    {
        "content": "<p>I should perhaps say that as well as some easy targets I guess I might also end up listing some harder targets. Is there already a place for this? I've realised now that I want mathlib to become the new Bourbaki; that's what people are doing here, and that's the style that they're writing. I think it would be nice to help things along the way by having a list of goals.</p>",
        "id": 132746635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535197928
    },
    {
        "content": "<p>p-adic numbers are already in mathlib: <a href=\"https://github.com/leanprover/mathlib/pull/262\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/262\">https://github.com/leanprover/mathlib/pull/262</a></p>",
        "id": 132747583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535200012
    },
    {
        "content": "<p>I didn't notice that it already got merged! I was just leaving for a holiday the day it did</p>",
        "id": 132748753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535202505
    },
    {
        "content": "<p>There is <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/wip.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/wip.md\">https://github.com/leanprover/mathlib/blob/master/docs/wip.md</a> but you can also use <a href=\"https://github.com/leanprover-community/mathlib/wiki\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/wiki\">https://github.com/leanprover-community/mathlib/wiki</a></p>",
        "id": 132750840,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535207268
    },
    {
        "content": "<p>This is not works in progress -- this is stuff which I want there to be progress on :-)</p>",
        "id": 132751311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535208231
    },
    {
        "content": "<p>I agree PIDs are gap that needs fixing soon! I've been suggesting my students <span class=\"user-mention\" data-user-id=\"120536\">@Jack Crawford</span> and Ed Hofflin look at those, but as they're still getting started on Lean it may take a while.</p>",
        "id": 132751428,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535208477
    },
    {
        "content": "<p>Let's have a list on the leanprover-community wiki!</p>",
        "id": 132751469,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535208488
    },
    {
        "content": "<p>How does that work? If you start something, can other people edit it?</p>",
        "id": 132751530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535208671
    },
    {
        "content": "<p>I think so --- everyone who has commit access on leanprover-community, and I think the intention is that everyone who wants to make PRs to mathlib can have this.</p>",
        "id": 132751532,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535208699
    },
    {
        "content": "<p>You should try editing the list I wrote for ideas of things to go over next week: <a href=\"https://github.com/leanprover-community/mathlib/wiki/Lean-in-Orsay,-2018\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/wiki/Lean-in-Orsay,-2018\">https://github.com/leanprover-community/mathlib/wiki/Lean-in-Orsay,-2018</a></p>",
        "id": 132751573,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535208737
    },
    {
        "content": "<p>My first thought would be to just use the github issue tracker. You can organize issues using labels, so I don't think having lots of \"feature request\" issues would be overwhelming.</p>",
        "id": 132751574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535208741
    },
    {
        "content": "<p>What if we used issues on the main mathlib repository to indicate defects, and issues on the leanprover-community fork of mathlib for summaries of work in progress, or for wishlists?</p>",
        "id": 132751593,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535208810
    },
    {
        "content": "<p>That's possible if that arrangement is clearly signposted somewhere (like, at the top of mathlib's README.md). I do like the idea of including entries for work-in-progress since we're already at the stage at which it can be hard to keep track of what everyone is working on.<br>\nActually, brainstorming small projects of just the sort that Kevin mentioned is on my list of things to do next week, and part of the aim here is to give potential new contributors things to work on.</p>",
        "id": 132751747,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535209106
    },
    {
        "content": "<p>For example, Zulip has the \"good first issue\" tag<br>\n<a href=\"https://github.com/zulip/zulip/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22\" target=\"_blank\" title=\"https://github.com/zulip/zulip/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22\">https://github.com/zulip/zulip/issues?q=is%3Aopen+is%3Aissue+label%3A%22good+first+issue%22</a></p>",
        "id": 132751831,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535209284
    },
    {
        "content": "<p>Maybe it does make sense to have them all in one place...</p>",
        "id": 132752066,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535209657
    },
    {
        "content": "<p>I'm kind of neutral about it. I do also see the appeal of keeping a separate list.</p>",
        "id": 132752140,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535209765
    },
    {
        "content": "<p>BTW, one of the items on my wishlist is the structure theorem for f.g. modules over a PID. Guess I didn't realize there are no PIDs yet either :)</p>",
        "id": 132752210,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535209856
    },
    {
        "content": "<p>Smith normal form is a great project for someone who wants to learn how to do recursion well!</p>",
        "id": 132752296,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535209994
    },
    {
        "content": "<p>Yeah <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  Iâ€™m pretty keen on tackling Smith Normal Form sometime soon, along with PIDs. (At least, after midsems next week)</p>",
        "id": 132752682,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1535210647
    },
    {
        "content": "<p>Someone should also take a serious stab at algebraic closures.</p>",
        "id": 132756802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535218818
    },
    {
        "content": "<p>I'm occasionally pestering <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> to do these :-) Kenny -- can you give us an update of what needs to be done?</p>",
        "id": 132758625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535222564
    },
    {
        "content": "<p>I think the issue is that there's some infrastructure which isn't there yet, but I've forgotten what.</p>",
        "id": 132758632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535222587
    },
    {
        "content": "<p>For a while the hold-up was no robust theory of polynomials in 1 variable, but that is now done thanks to Chris.</p>",
        "id": 132758642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535222615
    },
    {
        "content": "<p>splitting fields</p>",
        "id": 132758645,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535222627
    },
    {
        "content": "<p><em>boggle</em></p>",
        "id": 132758647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535222632
    },
    {
        "content": "<p>Do you need all the facts about them?</p>",
        "id": 132758649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535222639
    },
    {
        "content": "<p>I mean -- uniqueness? That's the annoying one</p>",
        "id": 132758702,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535222656
    },
    {
        "content": "<p>no</p>",
        "id": 132758704,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535222659
    },
    {
        "content": "<p>we don't even need minimality</p>",
        "id": 132758705,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535222663
    },
    {
        "content": "<p>Given a polynomial of degree n over a field K it's not too hard to prove by induction on n that there's a bigger field L contaning K where that polynomial factors into linear factors.</p>",
        "id": 132758731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535222713
    },
    {
        "content": "<p>yeah</p>",
        "id": 132758734,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535222726
    },
    {
        "content": "<p>right</p>",
        "id": 132758735,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535222727
    },
    {
        "content": "<p>Is that tough?</p>",
        "id": 132758740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535222753
    },
    {
        "content": "<p>Oh!</p>",
        "id": 132758741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535222756
    },
    {
        "content": "<p>You need that K[X]/(irred poly) is a field.</p>",
        "id": 132758787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535222767
    },
    {
        "content": "<p>and you also need to prove that K[X] is UFD</p>",
        "id": 132758792,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535222793
    },
    {
        "content": "<p>I don't think you need as much as that</p>",
        "id": 132758794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535222805
    },
    {
        "content": "<p>Do you need uniqueness?</p>",
        "id": 132758798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535222822
    },
    {
        "content": "<p>no</p>",
        "id": 132758807,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535222841
    },
    {
        "content": "<p>actually we don't need it to be a field</p>",
        "id": 132758808,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535222853
    },
    {
        "content": "<p>It suffices to prove we can add a root of a poly to a field and get a new field</p>",
        "id": 132758809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535222855
    },
    {
        "content": "<p>given f</p>",
        "id": 132758810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535222857
    },
    {
        "content": "<p>K[X]/(f) is a ring</p>",
        "id": 132758812,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535222864
    },
    {
        "content": "<p>now what do you do with rings</p>",
        "id": 132758813,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535222871
    },
    {
        "content": "<p>now take a max ideal</p>",
        "id": 132758814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535222874
    },
    {
        "content": "<p>you quotient by a maximal ideal</p>",
        "id": 132758815,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535222875
    },
    {
        "content": "<p>tada</p>",
        "id": 132758816,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535222877
    },
    {
        "content": "<p>right</p>",
        "id": 132758817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535222878
    },
    {
        "content": "<p>genius</p>",
        "id": 132758860,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535222891
    },
    {
        "content": "<p>I think Chris proved quotient by a max ideal was a field, recently</p>",
        "id": 132758861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535222892
    },
    {
        "content": "<p>Polynomials are a Euclidean domain is there. I don't think Euclidean implies PID and PID implies prime ideals are maximal is that hard.</p>",
        "id": 132759244,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1535223618
    },
    {
        "content": "<p>also PID doesn't imply prime ideals are maximal</p>",
        "id": 132759250,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535223652
    },
    {
        "content": "<p>also s/is/are/</p>",
        "id": 132759251,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535223656
    },
    {
        "content": "<p>Would the following idea be an option. It's a bit of a hack, because of <code>K : Type u</code>, then <code>K-bar : Type (u+1)</code>.</p>",
        "id": 132759352,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535223883
    },
    {
        "content": "<p>You let <code>Alg(K)</code> be the type of algebraic extensions of <code>K</code>, and then apply Zorn's lemma.</p>",
        "id": 132759361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535223913
    },
    {
        "content": "<p>Maybe with some trickery you can even get <code>K-bar</code> back into <code>Type u</code>. I'm not an expert on this.</p>",
        "id": 132759365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535223945
    },
    {
        "content": "<p>Anyway, whatever the definition, we will want a theorem that says that <code>K-bar</code> is unique up to iso.</p>",
        "id": 132759411,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535224028
    },
    {
        "content": "<p>I've actually defined PIDs and have a proof that compiles of ED -&gt; PID (with some help from Chris) <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 132787623,
        "sender_full_name": "Morenikeji Neri",
        "timestamp": 1535287582
    },
    {
        "content": "<p>great, now get it to mathlib :P</p>",
        "id": 132787801,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535288004
    },
    {
        "content": "<p>I saw that yesterday!</p>",
        "id": 132788247,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535288900
    },
    {
        "content": "<p>I'm hoping we can bring the proof down to something much smaller. After all, to explain it to a human is only a few lines!</p>",
        "id": 132788248,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535288925
    }
]