[
    {
        "content": "<p>I proved the first lemma of my new bigop lib!</p>",
        "id": 125509497,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524353658
    },
    {
        "content": "<p><a href=\"https://github.com/PatrickMassot/lean-scratchpad/blob/01776fcb1eedc65df32e457427d06feacb321910/src/bigop.lean#L107\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-scratchpad/blob/01776fcb1eedc65df32e457427d06feacb321910/src/bigop.lean#L107\">https://github.com/PatrickMassot/lean-scratchpad/blob/01776fcb1eedc65df32e457427d06feacb321910/src/bigop.lean#L107</a></p>",
        "id": 125509498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524353660
    },
    {
        "content": "<p>I'm so happy <span class=\"emoji emoji-1f604\" title=\"smile\">:smile:</span></p>",
        "id": 125509501,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524353679
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Could you have a look to tell me if I started wrong, before I try to prove 50 more lemmas of this kind?</p>",
        "id": 125509515,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524353736
    },
    {
        "content": "<p>I think you can simply copy and paste the content of this file</p>",
        "id": 125509519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524353756
    },
    {
        "content": "<p>It depends on nothing but mathlib</p>",
        "id": 125509559,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524353780
    },
    {
        "content": "<p>I'm especially curious about what you think about using <code>is_associative</code> and <code>is_left_id</code> here</p>",
        "id": 125509570,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524353854
    },
    {
        "content": "<p>Usually I love the old algebraic hierarchy but here it seems to me I wanted something directly attached to the operation</p>",
        "id": 125509613,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524353896
    },
    {
        "content": "<p>btw <code>[∀ i, decidable $ P i]</code> is just <code>[decidable_pred P]</code></p>",
        "id": 125509616,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524353933
    },
    {
        "content": "<p>Good to know, thanks!</p>",
        "id": 125509621,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524353951
    },
    {
        "content": "<p>I hope you noticed my effort not to use the usual <code>non computable theory</code>/<code>local attribute [instance] classical.prop_decidable</code></p>",
        "id": 125509673,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524354023
    },
    {
        "content": "<p>Actually I needed it in order to compute 5! in the examples...</p>",
        "id": 125509676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524354046
    },
    {
        "content": "<p>:D</p>",
        "id": 125509677,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524354050
    },
    {
        "content": "<p>did you?</p>",
        "id": 125509679,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524354060
    },
    {
        "content": "<p>I removed the <code>open classical</code> at the top and everything worked fine</p>",
        "id": 125509685,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524354072
    },
    {
        "content": "<p>and how does noncomputable things help with computation</p>",
        "id": 125509686,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524354081
    },
    {
        "content": "<p>Right, I forgot to erase that line</p>",
        "id": 125509688,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524354101
    },
    {
        "content": "<p>Which is the third line that is normally on top of all my Lean file before I start writing anything else</p>",
        "id": 125509730,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524354126
    },
    {
        "content": "<p>feature request: make it work with finset if your <code>op</code> is commutative</p>",
        "id": 125509740,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524354237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110172\">@Assia Mahboubi</span> could you have a look at this <a href=\"https://github.com/PatrickMassot/lean-scratchpad/blob/01776fcb1eedc65df32e457427d06feacb321910/src/bigop.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-scratchpad/blob/01776fcb1eedc65df32e457427d06feacb321910/src/bigop.lean\">https://github.com/PatrickMassot/lean-scratchpad/blob/01776fcb1eedc65df32e457427d06feacb321910/src/bigop.lean</a> and tell me if this tiny starts means I can forget about the canonical instance propaganda, and Lean type class is doing just fine for the purpose of porting the bigop lib from Coq to Lean?</p>",
        "id": 125509789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524354353
    },
    {
        "content": "<blockquote>\n<p>feature request: make it work with finset if your <code>op</code> is commutative</p>\n</blockquote>\n<p>Of course that on the TODO list</p>",
        "id": 125509829,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524354379
    },
    {
        "content": "<p>I think that <code>apply_bigop</code> can be removed and replaced by <code>list.foldr</code> of <code>list.filter</code>, although the notations seem okay (very stylish)</p>",
        "id": 125510402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524355644
    },
    {
        "content": "<p>I wonder if the new lean 4 parser will permit stuff like python list comprehensions</p>",
        "id": 125510443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524355697
    },
    {
        "content": "<p>comparison:</p>\n<div class=\"codehilite\"><pre><span></span>/- python\n&gt;&gt;&gt; [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]\n[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n-/\n#eval do x ← [1,2,3], y ← [3,1,4], guard (x ≠ y), return (x, y)\n-- [(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]\n</pre></div>",
        "id": 125510595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524356065
    },
    {
        "content": "<blockquote>\n<p>I think that <code>apply_bigop</code> can be removed and replaced by <code>list.foldr</code> of <code>list.filter</code>, although the notations seem okay (very stylish)</p>\n</blockquote>\n<p>Do you suggest I write <code>def apply_bigop  := foldr (λ i, op (F i)) nil (filter P r)</code> or completely remove <code>apply_bigop</code> and copy-paste the RHS everywhere I had <code>apply_bigop</code>?</p>",
        "id": 125523815,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524389343
    },
    {
        "content": "<blockquote>\n<p>I wonder if the new lean 4 parser will permit stuff like python list comprehensions</p>\n</blockquote>\n<p>If this happens it will become very hard to come up with something that Lean doesn't do great.</p>",
        "id": 125523821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524389398
    },
    {
        "content": "<p>I created a separate repo, the new place to look at is <a href=\"https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean\">https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean</a></p>",
        "id": 125531677,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524408604
    },
    {
        "content": "<p>Every help is welcome</p>",
        "id": 125531681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524408610
    },
    {
        "content": "<p>Writing lemmas with minimal hypotheses is so fun. I find myself having lemmas assuming <code>op</code> is associative with an element <code>nil</code> which is a left identity (<code>op nil a = a</code> for all <code>a</code>) but not a right identity. Then I keep the same hypothesis for the next lemma I find myself surprised to see I actually need right identity this time.</p>",
        "id": 125570257,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524492213
    },
    {
        "content": "<p>I feel I'm Bourbaki</p>",
        "id": 125570261,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524492227
    },
    {
        "content": "<p>I thought someone doesn't care about which axioms we use</p>",
        "id": 125570264,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524492238
    },
    {
        "content": "<p>It's not about axioms, it's about hypotheses</p>",
        "id": 125570312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524492283
    },
    {
        "content": "<p>aha</p>",
        "id": 125570314,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524492287
    },
    {
        "content": "<p>I fail to see any difference</p>",
        "id": 125570316,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524492299
    },
    {
        "content": "<p>assuming AoC, omega &lt;= a implies a^2 = a</p>",
        "id": 125570328,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524492310
    },
    {
        "content": "<p>hypotheses are what you need to make your lemmas work. Axioms are what you need to make everything work.</p>",
        "id": 125575621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524499148
    },
    {
        "content": "<p>Oh, I have proof containing <code>rw assoc op,  rw ← assoc op, </code></p>",
        "id": 125575735,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524499297
    },
    {
        "content": "<p>and it's not simplifiable</p>",
        "id": 125575784,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524499327
    },
    {
        "content": "<p>That can happen if you have more than two multiplications</p>",
        "id": 125576872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524500657
    },
    {
        "content": "<p>because it just finds the first match</p>",
        "id": 125576877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524500663
    },
    {
        "content": "<p>sure</p>",
        "id": 125576880,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524500679
    },
    {
        "content": "<p>that's what is happening here</p>",
        "id": 125576884,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524500690
    },
    {
        "content": "<p>I suspect <code>a * (b * c) = (d * e) * f</code> would work, right?</p>",
        "id": 125576885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524500691
    },
    {
        "content": "<p>But I agree it looks funny :-)</p>",
        "id": 125576887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524500696
    },
    {
        "content": "<p>it still looks funny</p>",
        "id": 125576888,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524500697
    },
    {
        "content": "<p>heh</p>",
        "id": 125576891,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524500700
    },
    {
        "content": "<p>That one is also cute in a different direction: <code>simp [H', H h (by simp)]</code></p>",
        "id": 125577124,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524500942
    },
    {
        "content": "<p>nested <code>simp</code>!</p>",
        "id": 125577154,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524500999
    },
    {
        "content": "<p>Two more lemmas tonight, culminating with <a href=\"https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean#L165\" target=\"_blank\" title=\"https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean#L165\">https://github.com/PatrickMassot/bigop/blob/master/src/bigop.lean#L165</a>. The needs some polishing but the statement is nice.</p>",
        "id": 125595701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524529325
    },
    {
        "content": "<p>Will you eventually also formalize Kantorovitch’s theorem? The bigop paper mentions a whole bunch of results that seem to follow easily</p>",
        "id": 125595848,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524529662
    },
    {
        "content": "<p>I'm not interested in numerical analysis but I certainly intend to continue working on (multi-variable) calculus at some point. And I really hope we will have some linear algebra in the not too far distant future (it's a bit embarrassing to have schemes but no finite dimensional vector spaces...)</p>",
        "id": 125609667,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524557481
    },
    {
        "content": "<p>Did you see the short proof of Cayley-Hamilton Patrick? I can't remember where I saw it -- was it actually in the paper you're reading?</p>",
        "id": 125611380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524560434
    },
    {
        "content": "<p>It's mentioned in that paper but not spelled out</p>",
        "id": 125612752,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524562570
    },
    {
        "content": "<p>I've already seen it though</p>",
        "id": 125612754,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524562589
    },
    {
        "content": "<p>But now I really need to work (understand an old paper by DBA Epstein which is not formalized, not even in automath)</p>",
        "id": 125612769,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524562633
    },
    {
        "content": "<p>HI <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>! Cool, this looks really promising! However, I am afraid that the potential problems will not show up at this stage (if ever).  The tricky part is the predictability and robustness of the algorithm inferring the <em>instances</em>. So for instance (foobar example) when writing \\sum_(1 &lt; p &lt;= n | p prime) f ( \\prod(x \\ I_n) x),  i.e. you have to infer and combine different instances of monoids, on different types.</p>",
        "id": 127198065,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1527501112
    },
    {
        "content": "<p>Hi Assia! Of course I have no idea how predictable and robust is the algorithm here. I only tried to use my lemmas in <a href=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/support.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/support.lean\">https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/support.lean</a> where I got completely stuck because of natural numbers arithmetic (with the crazy non-properties of substraction). So I gave up and wait for <a href=\"https://github.com/skbaek/qelim\" target=\"_blank\" title=\"https://github.com/skbaek/qelim\">https://github.com/skbaek/qelim</a> to become usable</p>",
        "id": 127198398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527501534
    },
    {
        "content": "<p>Thinking about more concrete benchmarks. A first test case could be the definition of the determinant of a matrix, as the sum over the elements of the symetric group, etc. Another good one might be Cayley Hamilton and friends (juggling with matrices of polynomials and polynomials over matrices).</p>",
        "id": 127198413,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1527501557
    },
    {
        "content": "<p>Ok, I will probably try to define determinants. Of course the problem is everything takes forever, and I also have real work to do...</p>",
        "id": 127198587,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527501780
    },
    {
        "content": "<p>And it's lunch time</p>",
        "id": 127198673,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527501862
    }
]