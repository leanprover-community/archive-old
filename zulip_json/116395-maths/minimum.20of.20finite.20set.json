[
    {
        "content": "<blockquote>\n<p>with <code>sup</code> you don't need to use <code>iget</code>. <code>max</code> is the better name but I think <code>sup</code> has the better behaviour.</p>\n</blockquote>\n<p>What is this sup you are talking about?</p>",
        "id": 126993170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527104610
    },
    {
        "content": "<p><code>finset.sup</code> defined, or at least used in <code>multivariate_polynomial</code></p>",
        "id": 126993263,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527104750
    },
    {
        "content": "<p>Only defined for <code>semilattice_sup_bot</code></p>",
        "id": 126993324,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527104789
    },
    {
        "content": "<p>That's unexpected</p>",
        "id": 126993423,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527104927
    },
    {
        "content": "<p>Thanks</p>",
        "id": 126993424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527104929
    },
    {
        "content": "<p>I still can't use it though. I'll try harder</p>",
        "id": 126993428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527104941
    },
    {
        "content": "<p>Why not?</p>",
        "id": 126993435,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527104950
    },
    {
        "content": "<p>It takes the sup of the image of a given function.</p>",
        "id": 126993443,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527104974
    },
    {
        "content": "<p>failed to synthesize type class instance for ⊢ semilattice_sup_bot ℝ</p>",
        "id": 126993499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527105003
    },
    {
        "content": "<p>It means I need to learn</p>",
        "id": 126993510,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527105010
    },
    {
        "content": "<p>what is a semilattice_sup_bot</p>",
        "id": 126993514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527105020
    },
    {
        "content": "<p>reals aren't a semilattice sup bot</p>",
        "id": 126993517,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527105023
    },
    {
        "content": "<p>It needs a least element of the type.</p>",
        "id": 126993519,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527105032
    },
    {
        "content": "<p><code>ennreal</code> is</p>",
        "id": 126993522,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527105039
    },
    {
        "content": "<p>the nonnegative (in your case, positif) reals also is</p>",
        "id": 126993533,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527105056
    },
    {
        "content": "<p>Using the type of nonnegative real would probably mess up lots of things</p>",
        "id": 126993723,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527105256
    },
    {
        "content": "<p>in my norms.lean</p>",
        "id": 126993749,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527105299
    },
    {
        "content": "<p>Incidentally, I just defined some stuff on nonnegative reals this week...</p>",
        "id": 126993759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527105311
    },
    {
        "content": "<p>Like that it is a comm_semiring, and its topology</p>",
        "id": 126993770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527105331
    },
    {
        "content": "<p>Nooo! I don't want to do topological commutative semi-ring theory!</p>",
        "id": 126993831,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527105380
    },
    {
        "content": "<p>Well, it is very useful for defining the standard simplices. Because it takes care of the condition that all the coordinates are positive</p>",
        "id": 126993927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527105501
    },
    {
        "content": "<p>is this part of your bigop project? I am dying to have useable matrices and summations in Lean, maybe I will take a look</p>",
        "id": 126993946,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527105547
    },
    {
        "content": "<p>No, I'm back to calculus while I wait for omega/cooper to be usable, just in case it makes using nat possible</p>",
        "id": 126994048,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527105661
    },
    {
        "content": "<p>well, studying cooper was also on my recreational to-do list, so i'll have to get on it</p>",
        "id": 126994149,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527105726
    },
    {
        "content": "<p>I was not able to import it in any way</p>",
        "id": 126994166,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527105748
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> The point of my questions about max is to try to get a norm on ℝ^n. But this goes through the dreaded definition of Lean metric spaces. Could you get me started by doing</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">fintype_function</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>(using the max distance between images) I think I could manage from there.</p>",
        "id": 126995176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527106867
    },
    {
        "content": "<p>Do you want to use the max distance in general, or just because we don't have sqrt yet?</p>",
        "id": 126995281,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527106931
    },
    {
        "content": "<p>We started using max on products a long time ago. It's partly for lack of square root tooling, but I also don't see why square root would be better</p>",
        "id": 126995324,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527107001
    },
    {
        "content": "<p>The current state of this story is <a href=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/norms.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/norms.lean\">https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/norms.lean</a></p>",
        "id": 126995353,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527107039
    },
    {
        "content": "<p>(with products of two types only)</p>",
        "id": 126995399,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527107054
    },
    {
        "content": "<p>(and added segfault)</p>",
        "id": 126995564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107206
    },
    {
        "content": "<p>(no)</p>",
        "id": 126995569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107209
    },
    {
        "content": "<p>(assertion violation)</p>",
        "id": 126995576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527107215
    },
    {
        "content": "<p>The version up at github has no assertion violation</p>",
        "id": 126995619,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527107264
    },
    {
        "content": "<p>And I was linking to this only so that Johannes could see my definition of normed group</p>",
        "id": 126995689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527107298
    },
    {
        "content": "<p>For me somehow the Euclidean distance (l_2-norm) as the canonical distance. But yeah, we can first start with the max-distance. That's one advantage of uniform spaces: the produce construction is more canonical :-)</p>",
        "id": 126996448,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527108177
    },
    {
        "content": "<p>\"more canonical\" :-)</p>",
        "id": 126997326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109291
    },
    {
        "content": "<p>We didn't formalise canonical yet</p>",
        "id": 126997332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109301
    },
    {
        "content": "<p>let alone make it a partial order</p>",
        "id": 126997334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527109305
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  <a href=\"https://gist.github.com/johoelzl/2ea9c95fb3a4773c8da5f63384906105\" target=\"_blank\" title=\"https://gist.github.com/johoelzl/2ea9c95fb3a4773c8da5f63384906105\">https://gist.github.com/johoelzl/2ea9c95fb3a4773c8da5f63384906105</a> here is the metric space for finite function.<br>\n<span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span>  I think I will change <code>max</code> to my version of <code>maxi</code>. How would you do these kind of proofs?</p>",
        "id": 127000110,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527113053
    },
    {
        "content": "<p>We can make <code>imax</code> (I usually use the <code>i</code> as a prefix) as an alternative to <code>max</code> defined for inhabited sets if you like. If it is defined as <code>max.iget</code> then we get all the theorems for free</p>",
        "id": 127000293,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527113364
    },
    {
        "content": "<p>I want to make <code>finset.max</code> a special case of <code>finset.sup</code> by defining a <code>with_bot A := option A</code>  type which extends the order with <code>none &lt;= some a</code></p>",
        "id": 127000354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527113451
    },
    {
        "content": "<p>I still don't see cases where the current <code>max</code> has advantages, or how to do proofs properly. Using <code>with_bot</code>, could we just use <code>sup</code> instead of the current <code>max</code>, and use <code>sup</code> + <code>iget</code> as <code>max</code>?</p>",
        "id": 127002306,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527116303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>  Sorry, I haven't been following. Which proofs do you mean?</p>",
        "id": 127003581,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527118460
    },
    {
        "content": "<p>Using <code>with_bot</code>, <code>sup</code> over <code>with_bot</code> would be the same as <code>max</code> is currently (in particular, it would return an <code>option</code>), and then you could postprocess the result with <code>iget</code> if that makes sense in your application. I like the way <code>max</code> works at the moment because it lets you work relationally with max, i.e. \"x is the max of s\" rather than a term \"max of s\" which may or may not actually be a max of s</p>",
        "id": 127012241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527136054
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">maxi</span> <span class=\"o\">[</span><span class=\"n\">decidable_linear_order</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">max</span><span class=\"bp\">.</span><span class=\"n\">iget</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">maxi_empty</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">∅</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">maxi</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">default</span> <span class=\"n\">β</span>\n</pre></div>\n\n\n<p>I don't understand how <code>maxi_empty</code> is useful.</p>",
        "id": 127014486,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527141326
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> the proofs in <a href=\"https://gist.github.com/johoelzl/2ea9c95fb3a4773c8da5f63384906105\" target=\"_blank\" title=\"https://gist.github.com/johoelzl/2ea9c95fb3a4773c8da5f63384906105\">https://gist.github.com/johoelzl/2ea9c95fb3a4773c8da5f63384906105</a> Its a little bit of a special case (we are working essentially in R &gt;= 0) and we explicitly want <code>s = empty -&gt; max s = 0</code>. Without adding my own rules for <code>maxi</code> (a.k.a. <code>imax</code>) I would need a lot of annoying case distinctions (ala <code>finset.univ = empty</code>)</p>",
        "id": 127014487,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527141338
    },
    {
        "content": "<p>At least at the beginning <code>maxi_empty</code> is helpful: the following rules have a special condition to compare to the default when <code>s = empty</code>, which can be resolved using <code>by simp * at *</code>.</p>",
        "id": 127014574,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527141540
    },
    {
        "content": "<p>I see: <code>(hd : s = ∅ → b ≤ default β)</code> is what you mean. So with an <code>option</code> result, you don't need that? But you still think using <code>inhabited</code> is better?</p>",
        "id": 127014687,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527141811
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">le_maxi_of_forall</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"err\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">default</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">maxi</span> <span class=\"n\">f</span>\n</pre></div>\n\n\n<p>looks a lot <a href=\"https://github.com/leanprover/mathlib/pull/133/commits/351dd66c84cc45c53f7de49836f0086d35071327#diff-e7d41a6a4fb2225734fc2fb30e4dceeeR1069\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/133/commits/351dd66c84cc45c53f7de49836f0086d35071327#diff-e7d41a6a4fb2225734fc2fb30e4dceeeR1069\">like</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">le_max_of_mem</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"n\">b</span> <span class=\"n\">s</span>\n</pre></div>",
        "id": 127014782,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527141974
    },
    {
        "content": "<p>BTW, I'm really just trying to wrap my head around the use of <code>inhabited</code> and why it's better. I'm not trying to claim mine is universally better or anything. Since I haven't tried to implement it or use it myself, I don't have an intuition for it.</p>",
        "id": 127014831,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527142128
    },
    {
        "content": "<p><code>le_maxi_of_forall</code> is slightly different, as it is about a lower bound. Either <code>s</code> is empty, than you compare it to the default: handling the case where <code>s</code> is empty, <strong>or</strong> where the default value is well defined. In your <code>le_max_of_mem</code> case you show that an element is a lower bound, also there is no difference between non-empty <code>s</code> and <code>b</code> being well defined.</p>",
        "id": 127015010,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527142530
    },
    {
        "content": "<p>Right. But they both deal with a “default,” whether that be <code>b</code> in <code>le_max_of_mem</code> or <code>default β</code> in <code>le_maxi_of_forall</code>. That's the similarity I see.</p>",
        "id": 127015170,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527142905
    },
    {
        "content": "<p>I'm not a fan of these <code>inhabited</code> solutions because <code>default</code> is (supposed to be) a completely arbitrary element with no semantic value. It's not supposed to be compared to stuff because in a given structure you have no idea what it could be. If it happens to work out in some type, that should be treated as coincidence and should not be relied on.</p>",
        "id": 127015318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527143178
    },
    {
        "content": "<p>which is why I find the hypothesis <code> s = ∅ → b ≤ default β</code> very strange</p>",
        "id": 127015323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527143213
    },
    {
        "content": "<p>if you care about having a particular fallback value, there is <code>get_or_else</code> for that</p>",
        "id": 127015335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527143279
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> and <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> did you decide something about this <code>max</code> debate? Can I use <a href=\"https://gist.github.com/johoelzl/2ea9c95fb3a4773c8da5f63384906105\" target=\"_blank\" title=\"https://gist.github.com/johoelzl/2ea9c95fb3a4773c8da5f63384906105\">https://gist.github.com/johoelzl/2ea9c95fb3a4773c8da5f63384906105</a> or is it already outdated with respect to current mathlib?</p>",
        "id": 127197478,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527500232
    },
    {
        "content": "<p>I'm not sure yet. I didn't try to write the proof only using the <code>option</code> variant of <code>max</code>. <span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> did you use <code>max</code> already?<br>\nBut we have a new possibility now: use <code>nnreal</code> to define <code>dist</code> and <code>norm</code> (or maybe <code>nndist</code>). Then we can use <code>sup</code> and don't need to worry about the empty case. It should still easily embed into <code>real</code>.</p>",
        "id": 127197858,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527500774
    },
    {
        "content": "<p>I don't understand how <code>nnreal</code> could help here</p>",
        "id": 127197894,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527500880
    },
    {
        "content": "<p>Please, please, please don't use nnreals for dist and norm! I tried to do something like that for Gromov hyperbolic space (except that I needed distances taking the value infinity, so I used ennreal). And then I had to start everything over again using ereal once I was deep enough in the theory, when I had to do serious computations and inequalities, as the fact that subtraction on ennreal (or nnreal, or nat) is truncating things makes everything a total mess -- I think Patrick has been bitten by this quite a few times, right?</p>",
        "id": 127198066,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1527501114
    },
    {
        "content": "<p>Oh yes, I don't want more crazy substraction</p>",
        "id": 127198135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527501165
    },
    {
        "content": "<blockquote>\n<p>I'm not sure yet. I didn't try to write the proof only using the <code>option</code> variant of <code>max</code>. <span class=\"user-mention\" data-user-id=\"110045\">@Sean Leather</span> did you use <code>max</code> already?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> No, I haven't started using the <code>max</code> in mathlib.</p>",
        "id": 127200413,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527504869
    }
]