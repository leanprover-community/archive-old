[
    {
        "content": "<p>So, I'm stuck trying to prove the following: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_lemma</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">HI</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">)</span>  <span class=\"o\">:</span>\n<span class=\"n\">summable</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Now, if I've understood <code>summable</code> correctly then this should hopefully be true as I am essentially reordering the index (i.e. I want to break up the sum intro a sum over some finite (disjoint) subsets) and hopefully I have enough hypotheses for this.  I've been looking through the <code>infinte_sum</code> file and I'm struggling to find something to prove this with. I thought about using <code>equiv.summable_iff</code> but I can't see how to write down an equivalent indexing set that would easily break up into the sum on the rhs.  So, I wanted to see if anyone has any ideas how one might try and prove this (provided I've not missunderstood something and its actually false!).</p>",
        "id": 241752419,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1623059524
    },
    {
        "content": "<p>I don't think your lemma is true. Since <code>ℤ × ℤ</code> does not really play a role in your statement, let me replace it by <code>ℕ</code>. Take <code>f n = (-1)^n</code> (which is not summable) and <code>I n = {2 n, 2 n + 1}</code> (so that the sum of <code>f</code> on each <code>I n</code> is zero). Then <code>summable (λ ( n : ℕ), ∑ x in I (n), f x)</code> is true and <code>summable f</code> is false.</p>",
        "id": 241753505,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623060168
    },
    {
        "content": "<p>Oh maybe I'm confused about what summable is then. I though it was the same as absolutely convergent (?)</p>",
        "id": 241753872,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1623060411
    },
    {
        "content": "<p>Essentially yes. My function <code>f</code> is not absolutely convergent, but the sums over the different <code>I n</code> are, as they are all zero.</p>",
        "id": 241753995,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623060487
    },
    {
        "content": "<p>The left to right implication is true, but the right to left is not.</p>",
        "id": 241754047,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623060535
    },
    {
        "content": "<p>But what you say makes sence, so maybe I need to think a bit more about how to state this. Thanks!</p>",
        "id": 241754081,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1623060559
    },
    {
        "content": "<p>If the function is nonnegative, your equivalence is true.</p>",
        "id": 241754533,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1623060851
    },
    {
        "content": "<p>ah yes, the function I have in mind is non-negative, so maybe that is the hyp I forgot</p>",
        "id": 241754650,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1623060943
    },
    {
        "content": "<p>So maybe what I want is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">sum_lemma</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"bp\">≥</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">HI</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"bp\">∃!</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">)</span>  <span class=\"o\">:</span>\n<span class=\"n\">summable</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 241754885,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1623061117
    },
    {
        "content": "<p>So, now that I think of it there is this <code>summable_sigma_of_nonneg</code> lemma in the ennreal file. It sort of looks like what I want but I dont know what sigmas are? can this be intepreted as a (disjoint) union? I which case I think this might almost be the result I want.</p>",
        "id": 241755616,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1623061591
    },
    {
        "content": "<p>Yes, <code>Σ x, β x</code> is disjoint union. If beta is a map from X to Type (i.e. a collection of sets <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>β</mi><mi>x</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\beta_x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> runs through some index set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>) then to give a term of type <code>Σ x, β x</code> is to give a pair consisting of <code>x : X</code> and <code>y : β x</code>, so if you think about it then this is just the same as giving an element of the disjoint union.</p>",
        "id": 241758830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1623063659
    },
    {
        "content": "<p>Ah great, I'll see if I can get it to work with this then. Thanks!</p>",
        "id": 241761130,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1623065028
    }
]