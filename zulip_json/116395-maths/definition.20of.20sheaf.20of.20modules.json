[
    {
        "content": "<p>I am trying to write down a definition of (pre)sheaf of modules. I can think of two ways of doing this:</p>\n<ol>\n<li>be explicit about what the (pre)sheaf of ring is:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">PresheafOfModules1</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">ùí™</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">CommRing</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">‚Ñ±</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">AddCommGroup</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">is_module</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">),</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"bp\">ùí™.</span><span class=\"n\">obj</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">‚Ñ±.obj</span> <span class=\"n\">U</span><span class=\"o\">)]</span>\n<span class=\"o\">(</span><span class=\"n\">res_compatible</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ùí™.</span><span class=\"n\">obj</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">‚Ñ±.obj</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n  <span class=\"n\">‚Ñ±.map</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">ùí™.</span><span class=\"n\">map</span> <span class=\"n\">h</span> <span class=\"n\">r</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">‚Ñ±.map</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>be implicit about what the ring is:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">PresheafOfModules2</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">‚Ñ±</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">presheaf</span> <span class=\"n\">BundledModule</span> <span class=\"n\">BundledModule.is_cat</span> <span class=\"n\">X</span><span class=\"o\">):=</span>\n<span class=\"o\">(</span><span class=\"n\">res_compatible</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">·µí·µñ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">‚Ñ±.obj</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">‚Ñ±.obj</span> <span class=\"n\">U</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">M</span><span class=\"o\">),</span>\n    <span class=\"o\">(</span><span class=\"n\">‚Ñ±.map</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">‚Ä¢</span> <span class=\"o\">(</span><span class=\"n\">‚Ñ±.map</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>Here bundled module is the category of pairs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>R</mi><mo separator=\"true\">,</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(R, M)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a ring and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module.</p>\n<p>Which way, if any, is a good definition? Or is there a better way.</p>",
        "id": 264569317,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639238101
    },
    {
        "content": "<p>Did you see <a href=\"#narrow/stream/267928-condensed-mathematics/topic/tensor.20product.20of.20sheaves/near/263012430\">https://leanprover.zulipchat.com/#narrow/stream/267928-condensed-mathematics/topic/tensor.20product.20of.20sheaves/near/263012430</a>?</p>",
        "id": 264569416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639238217
    },
    {
        "content": "<p>(And the messages that follow it)</p>",
        "id": 264569424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639238231
    },
    {
        "content": "<p>I actually write restrict of scalars part and finished the bundled module category</p>",
        "id": 264569498,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639238316
    },
    {
        "content": "<p>Could it be useful if I pr it, even if it didn't end up being used in defining sheaf of modules</p>",
        "id": 264569511,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639238338
    },
    {
        "content": "<p><a href=\"https://github.com/jjaassoonn/sheaf_of_modules\">https://github.com/jjaassoonn/sheaf_of_modules</a></p>",
        "id": 264569646,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639238418
    },
    {
        "content": "<p>My <em>guess</em> is that nobody really knows which definition will be better, and we'll only find out once we start proving theorems about the idea.</p>",
        "id": 264569717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639238462
    },
    {
        "content": "<p>My guess is that some stuff will be easier with one definition and some stuff will be easier with the other definition, and the real question will in some sense be whether the stuff which is easier with one definition is just completely horrible with the other definition, or whether it's not too bad.</p>",
        "id": 264569748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639238508
    },
    {
        "content": "<p>Isn't the axiom in <code>res_compatible</code> part of the definition of what a hom in <code>BundledModule</code> is?</p>",
        "id": 264570099,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639238973
    },
    {
        "content": "<p>Bundled module tells that <code>r ‚Ä¢ (‚Ñ±.map h).2 m)</code> is actually <code>(‚Ñ±.map h).1 r ‚Ä¢ (‚Ñ±.map h).2 m)</code> but not saying that <code>(‚Ñ±.map h).2 (r ‚Ä¢ m) = (r ‚Ä¢ (‚Ñ±.map h).2 m))</code></p>",
        "id": 264570286,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639239196
    },
    {
        "content": "<p>I may be missing something here, but given a map <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><msup><mi>f</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">‚Ä≤</mo></msup><mo stretchy=\"false\">)</mo><mo>:</mo><mo stretchy=\"false\">(</mo><mi>R</mi><mo separator=\"true\">,</mo><mi>M</mi><mo stretchy=\"false\">)</mo><mo>‚Üí</mo><mo stretchy=\"false\">(</mo><mi>S</mi><mo separator=\"true\">,</mo><mi>N</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(f, f&#x27;) : (R, M) \\to (S, N)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">‚Ä≤</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">)</span></span></span></span>,  the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">‚Ä≤</mo></msup><mo>:</mo><mi>M</mi><mo>‚Üí</mo><msup><mi>f</mi><mo lspace=\"0em\" rspace=\"0em\">‚àó</mo></msup><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">f&#x27; : M \\to f^{*}N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9463em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">‚Ä≤</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">‚àó</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is a map of $R$-modules should tell you that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>f</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">‚Ä≤</mo></msup><mo stretchy=\"false\">(</mo><mi>r</mi><mo>‚ãÖ</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>r</mi><mo>‚ãÖ</mo><msup><mi>f</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">‚Ä≤</mo></msup><mo stretchy=\"false\">(</mo><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f&#x27;(r\\cdot m) = r \\cdot f&#x27;(m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">‚Ä≤</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">‚ãÖ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4445em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">‚ãÖ</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0019em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">‚Ä≤</span></span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 264570765,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639239808
    },
    {
        "content": "<p>You are absolutely right.</p>",
        "id": 264571006,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639240127
    },
    {
        "content": "<p>If you use the category you called <code>BundledModule</code>, you could just take presheaves resp. sheaves with values in that given category. I don't see why you need any further axioms. Then prove that the forgetful functor from that category to the category of rings preserves limits to obtain the forgetful functor from sheaves taking values in <code>BundledModule</code> to sheaves of rings.</p>",
        "id": 264571010,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639240133
    },
    {
        "content": "<p>Yes.</p>",
        "id": 264571018,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639240166
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.Sheaf_compose\">docs#category_theory.Sheaf_compose</a></p>",
        "id": 264571019,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639240168
    },
    {
        "content": "<p>Should I make a pr about bundledModule</p>",
        "id": 264571023,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639240176
    },
    {
        "content": "<p>I think this should be useful regardless of the final definition of sheaves of modules.</p>",
        "id": 264571102,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639240237
    },
    {
        "content": "<p>Thank you. Sorry about the confusion. Let me pr bundled module</p>",
        "id": 264571116,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639240259
    },
    {
        "content": "<p>Note that <code>linear_map</code> is now precisely the morphism you want.</p>",
        "id": 264571128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639240294
    },
    {
        "content": "<p>(I just read the most recent community blog post)</p>",
        "id": 264571132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639240302
    },
    {
        "content": "<p>I thought the explicit sheaf of ring definition is somewhat cumbersome exactly because the restriction map is just a map of abelian groups. But I forget that linear_map has <code>map_smul</code></p>",
        "id": 264571195,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1639240370
    },
    {
        "content": "<p>I think Kevin is referring to the fact that linear maps are now just a special case of a semilinear map</p>",
        "id": 264571274,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639240459
    },
    {
        "content": "<p>Regarding the definition of sheaves of modules, I would prefer the second one, especially after the recent advancements Adam has made in the  sheaf library.</p>",
        "id": 264571297,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1639240517
    },
    {
        "content": "<p>Adam: to my surprise, semilinear maps are now called <code>linear_map</code>.</p>",
        "id": 264571311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639240551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> here is an approximation for how I would start the definition, with the new semilinear map stuff:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.category.Module.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.CommRing</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">structure</span> <span class=\"n\">BundledModule</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">CommRing.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span>\n<span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">Module.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">BundledModule.hom</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">BundledModule</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X.A</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y.A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X.M</span> <span class=\"bp\">‚Üí‚Çõ‚Çó</span><span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"n\">Y.M</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 264571555,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639240806
    },
    {
        "content": "<p>(I don't know whether you already have a definition of <code>BundledModule</code>)</p>",
        "id": 264571580,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639240855
    },
    {
        "content": "<p>You could generalize the universe levels, but I don't know how useful that would be.</p>",
        "id": 264571839,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639241134
    },
    {
        "content": "<p>I'll remark that Jujian and I have already discussed this issue a bit, and at some point he was having trouble with universes, and I already suggested that he used fewer than 4 :-)</p>",
        "id": 264572885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639242352
    }
]