[
    {
        "content": "<p>Suppose that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> is a (semi)ring. Does anyone have any thoughts about how we might teach lean about the multiplicative subgroups of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>A</mi><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">A^\\times</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7713em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7713em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span>? Of course, we could just work with <code>subgroup A\\^x</code>, but for many applications it would be nice to be able to write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>∈</mo><mi>H</mi></mrow><annotation encoding=\"application/x-tex\">a \\in H</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.08125em;\">H</span></span></span></span> for such a multiplicative subgroup. </p>\n<p>We could define <code>mul_subgroup A := subgroup A\\^x</code> with a different <code>has_mem</code> instance.<br>\nWe could also define <code>mul_subgroup A</code> as a bespoke structure with a <code>carrier : set A</code> field and various assumptions.</p>\n<p>Thoughts? Ideas?</p>",
        "id": 280931345,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651524320
    },
    {
        "content": "<p>Could you generalize <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup\">docs#subgroup</a> to not require working over a <code>group</code>?</p>",
        "id": 280931620,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651524443
    },
    {
        "content": "<p>(You could take <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> to be any monoid in the above)</p>",
        "id": 280931710,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651524486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I'm not sure what you mean...</p>",
        "id": 280931730,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651524498
    },
    {
        "content": "<p>Replace the <code>[group G]</code> assumption by <code>[has_mul G] [has_one G]</code> and find a way to rephrase <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subgroup.inv_mem'\">docs#subgroup.inv_mem'</a> without referring to <code>⁻¹</code>.</p>",
        "id": 280931843,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651524557
    },
    {
        "content": "<p>How would you do that?</p>",
        "id": 280931889,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651524591
    },
    {
        "content": "<p>Something like <code>∀ a b, a * b = 1 → a ∈ carrier → b ∈ carrier</code>. The problem with this approach is that your subgroups don't inherit any inverse from <code>G</code>, precisely because <code>G</code> doesn't have any...</p>",
        "id": 280932111,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651524692
    },
    {
        "content": "<p>I guess you could say \"for all elements which are units, and are members of the carrier, their inverses are members of the carrier\"</p>",
        "id": 280932135,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651524712
    },
    {
        "content": "<p>But that's not what you want, you want \"has an inverse which is also a member\"</p>",
        "id": 280932290,
        "sender_full_name": "Reid Barton",
        "timestamp": 1651524782
    },
    {
        "content": "<p>Maybe you can then define <code>a⁻¹</code> for <code>a : H : subgroup G</code> as <code>↑a.to_unit</code> where we need to define <code>subgroup.unit</code> appropriately.</p>",
        "id": 280932320,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651524792
    },
    {
        "content": "<p>Oops! yeah of course</p>",
        "id": 280932367,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651524820
    },
    {
        "content": "<p>Oh right, Reid. You should also add <code>∀ a ∈ carrier, is_unit a</code>, or <code>carrier → units G</code>.</p>",
        "id": 280932382,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651524829
    },
    {
        "content": "<p>Do we care about definitional equality here? If we define the inverse of elements of subgroups using <code>Gˣ</code>, we lose the defeq <code>↑a⁻¹ = (↑a)⁻¹</code>, but that's not one you were gonna have with your <code>mul_subgroup</code> either.</p>",
        "id": 280932757,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651524995
    },
    {
        "content": "<p>We could arrange to have good defeq properties.</p>",
        "id": 280932778,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651525007
    },
    {
        "content": "<p>At any rate, I value not duplicating the subgroup API over defeq properties.</p>",
        "id": 280932865,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1651525048
    },
    {
        "content": "<p>This sounds a bit like a previous discussion about subfields of (noncommutative) rings</p>",
        "id": 280936991,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651526924
    },
    {
        "content": "<p>Yeah, it's a very similar discussion. How did that resolve?</p>",
        "id": 280937578,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1651527248
    },
    {
        "content": "<p>I'll just point out that this discussion may be relevant even for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unitary\">docs#unitary</a> as a special case.</p>",
        "id": 280943106,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1651530448
    },
    {
        "content": "<p>If we define <code>subgroup G</code> to be <code>old_subgroup Gˣ</code>, then we won't need <code>classical.choice</code> for simple facts about subgroups.</p>",
        "id": 281102538,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1651629924
    },
    {
        "content": "<p>This is a pro compared to the <code>is_unit</code> approach.</p>",
        "id": 281102594,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1651629978
    }
]