[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/16290\">#16290</a>, I introduce a few lemmas</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">odd.mod_even_iff</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">even.mod_even_iff</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">n</span> <span class=\"bp\">↔</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">odd.mod_even</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">even.mod_even</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">%</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">odd.factors_ne_two</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">odd</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∈</span> <span class=\"n\">n.factors</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span>\n</code></pre></div>\n<p>(in part based on suggestions by <span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span>).<br>\nQuestion: Should they full name be <code>nat.odd....</code> or just <code>odd....</code>?<br>\nThe first seems more appropriate in view of the statements, but the second is more convenient for dot notation.<br>\nOpinions?</p>",
        "id": 296382378,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1661962370
    },
    {
        "content": "<p>The first two should be reversed.</p>",
        "id": 296382503,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661962406
    },
    {
        "content": "<p>The first is about <code>odd ↔ odd</code>, the second about <code>even ↔ even</code>, and in both we go mod an even number. So I think the names are OK (but for the first two, dot notation is maybe less relevant).</p>",
        "id": 296387871,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1661962636
    },
    {
        "content": "<p>Or did you mean the statements, not the names?</p>",
        "id": 296387999,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1661962669
    },
    {
        "content": "<p>the <code>iff</code>s</p>",
        "id": 296388033,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661962674
    },
    {
        "content": "<p>Because the RHS looks more complicated?</p>",
        "id": 296388137,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1661962699
    },
    {
        "content": "<p>Yes, so it should become the LHS.</p>",
        "id": 296388183,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1661962709
    },
    {
        "content": "<p>OK.</p>",
        "id": 296388274,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1661962733
    },
    {
        "content": "<p><code>iff</code> is not symmetric in Lean! Tactics like <code>rw</code> and <code>simp</code> change the LHS to the RHS, so the rule is to always have the LHS the less simple of the two sides.</p>",
        "id": 296388336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1661962749
    },
    {
        "content": "<p>In my use case, I need the other direction (i.e., <code>odd.mod_even</code>), but I see the point.</p>",
        "id": 296414026,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1661966993
    },
    {
        "content": "<p>But this discussion does not answer my original question.</p>",
        "id": 296414198,
        "sender_full_name": "Michael Stoll",
        "timestamp": 1661967022
    }
]