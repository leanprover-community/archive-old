[
    {
        "content": "<p>I have put almost all of my Lean files at <a href=\"https://github.com/NeilStrickland/lean_lib/tree/master\" target=\"_blank\" title=\"https://github.com/NeilStrickland/lean_lib/tree/master\">https://github.com/NeilStrickland/lean_lib/tree/master</a>.  There are about 19000 lines by the crudest metric, although I am sure that someone more skilful could achieve the same results with much less space.  There is a README outlining what is there, and many files have substantial header comments.  I would be interested in moving some of it to mathlib, although that will probably take a large amount of work with refactoring, complying with coding conventions and so on.  I would be interested in comments and suggestions.</p>",
        "id": 163332181,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1555272500
    },
    {
        "content": "<p>Which of the homotopy stuff do you think is appropriate for mathlib? Do you know about what Reid Barton has been doing with homotopy theory? (I don't but there's a repo somewhere)</p>",
        "id": 163334481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555275535
    },
    {
        "content": "<p>The file <code>itloc.lean</code> is rather specialised, but <code>poset.lean</code>, <code>subdiv.lean</code> and <code>upper.lean</code> could certainly move into mathlib,  possibly after some reorganisation.  I don't think that anything I have done or am thinking of doing actually overlaps with what Reid has done, although it would be sensible to ensure that there is a smooth interface between them.</p>",
        "id": 163334860,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1555276066
    },
    {
        "content": "<p><code>rw[mul_assoc (r0 ^ i) r0 s0,mul_assoc (r0 ^ i)]</code> -- I think mathlib convention is a space between <code>rw</code> and <code>[</code>, and also space after the comma.</p>",
        "id": 163336395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1555278168
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130308\">@Neil Strickland</span>, you should definitely start PRing stuff, so that others can use it, it doesn't get lost, and it can all be polished up!</p>",
        "id": 163339224,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555282661
    },
    {
        "content": "<p>Regardling <code>poset.lean</code>: you should look at <code>category_theory/concrete_category.lean</code>, or some of the examples in the <code>category_theory/instances/</code> directory, where you'll see an existing general framework for this kind of thing, which should save some repetition. By the time you're define <code>comp, comp_id, id_comp</code>, and <code>assoc</code>, you really should provide the <code>category</code> instance. (After which, as I keep telling Kevin, you get a lot of things for free :-)</p>",
        "id": 163339307,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555282766
    },
    {
        "content": "<p>There's tonnes of things in there that can be stand alone PRs. (<a href=\"https://github.com/NeilStrickland/lean_lib/blob/master/src/group_theory/elementary_two.lean\" target=\"_blank\" title=\"https://github.com/NeilStrickland/lean_lib/blob/master/src/group_theory/elementary_two.lean\">e.g.</a>) I think it's best to make \"minimal\" PRs, as big ones tend to get stuck in the throat of the reviewing process, unless they are done really well. :-)</p>",
        "id": 163339401,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555282906
    },
    {
        "content": "<p>Do you have examples yet of categories that are self-enriched?  I really need to use the fact that <code>poset.hom P Q</code> has a poset structure such that composition and (co)evaluation are poset morphisms.  I don't know if that will cause any problems with your general framework.</p>",
        "id": 163341956,
        "sender_full_name": "Neil Strickland",
        "timestamp": 1555287110
    },
    {
        "content": "<p>No, we haven't done (self-) enrichment yet. It really needs to happen.</p>",
        "id": 163346273,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555294248
    },
    {
        "content": "<p>I waited a long time on doing this because I wanted to do something overly general. :-) I've seen the error of my ways.</p>",
        "id": 163346300,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555294322
    },
    {
        "content": "<p>The long-standing issue of how to handle products in categories (are they just special cases of limits, or do you provide a separate API for them?) has also been a hold up on this.</p>",
        "id": 163346354,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1555294385
    }
]