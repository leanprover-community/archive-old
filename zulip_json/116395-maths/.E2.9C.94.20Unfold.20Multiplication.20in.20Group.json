[
    {
        "content": "<p>The canonical way to help along with this is right after</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"n\">C</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a.val</span> <span class=\"bp\">+</span> <span class=\"n\">b.val</span> <span class=\"bp\">+</span> <span class=\"n\">a.val</span> <span class=\"bp\">*</span> <span class=\"n\">b.val</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">⟩⟩</span>\n<span class=\"c1\">-- you put</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">mul_def</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">⟨</span><span class=\"n\">a.val</span> <span class=\"bp\">+</span> <span class=\"n\">b.val</span> <span class=\"bp\">+</span> <span class=\"n\">a.val</span> <span class=\"bp\">*</span> <span class=\"n\">b.val</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>and use that. You'll also likely need an extensionality lemma like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">C.ext_iff</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span>  <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.ext_iff</span>\n</code></pre></div>",
        "id": 307232428,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667266516
    },
    {
        "content": "<p>Ok. That makes sense. If you don't mind me asking, what is the h parameter in your mul_def theorem used for?</p>",
        "id": 307233475,
        "sender_full_name": "Charles Murphy",
        "timestamp": 1667267474
    },
    {
        "content": "<p>It's me being lazy and using a hypothesis to prove that <code>a.val + b.val + a.val * b.val ≠ 1</code></p>",
        "id": 307234193,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667268082
    },
    {
        "content": "<p>In general, one doesn't need to supply it because it'll be true \"by definition\" that you can even have the <code>a * b</code> expression</p>",
        "id": 307234220,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1667268113
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"560136\">Charles Murphy</span> has marked this topic as resolved.</p>",
        "id": 307235668,
        "sender_full_name": "Notification Bot",
        "timestamp": 1667269416
    }
]