[
    {
        "content": "<p>Following the pattern in algebra.group.hom I'm trying to extend the <code>add_monoid_hom</code> structure and <code>add_monoid_hom_class</code> class as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[ancestor add_monoid_hom]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">centroid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lmul_comm'</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">to_add_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">to_add_monoid_hom</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">rmul_comm'</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">to_add_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">to_add_monoid_hom</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">nolint</span> <span class=\"n\">doc_blame</span><span class=\"o\">]</span> <span class=\"n\">centroid.to_add_monoid_hom</span>\n\n<span class=\"kd\">@[ancestor add_monoid_hom_class]</span>\n<span class=\"kd\">class</span> <span class=\"n\">centroid_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"bp\">$</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">add_monoid_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">lmul_comm</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">rmul_comm</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- c.f. https://github.com/leanprover-community/mathlib/blob/5d405e2a7028f87e962e7cc2133dc0cfc9c55f7d/src/algebra/group/hom.lean#L276</span>\n<span class=\"kd\">instance</span> <span class=\"n\">centroid.centroid_class</span> <span class=\"o\">:</span> <span class=\"n\">centroid_class</span> <span class=\"o\">(</span><span class=\"n\">centroid</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">lmul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">centroid.lmul_comm'</span><span class=\"o\">,</span>\n  <span class=\"n\">rmul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">centroid.rmul_comm'</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">add_monoid_hom.add_monoid_hom_class</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I'm getting the following error with <code>instance centroid.centroid_class : centroid_class (centroid A) A</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">centroid.lean</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">coe'</span>\n  <span class=\"n\">add_monoid_hom_class.coe</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→+</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">centroid</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">centroid.lean</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">coe_injective''</span>\n  <span class=\"n\">add_monoid_hom_class.coe_injective'</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">function.injective</span> <span class=\"n\">add_monoid_hom_class.coe</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">function.injective</span> <span class=\"bp\">?</span><span class=\"n\">coe</span>\n<span class=\"n\">centroid.lean</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">map_add'</span>\n  <span class=\"n\">add_monoid_hom_class.map_add</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→+</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"n\">y</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">centroid</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"n\">y</span>\n<span class=\"n\">centroid.lean</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span><span class=\"mi\">0</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">map_zero'</span>\n  <span class=\"n\">add_monoid_hom_class.map_zero</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→+</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">),</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">centroid</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n\n<span class=\"n\">centroid.lean</span><span class=\"o\">:</span><span class=\"mi\">25</span><span class=\"o\">:</span><span class=\"mi\">15</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">lmul_comm'</span>\n  <span class=\"n\">centroid.lmul_comm'</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">centroid</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">self.to_add_monoid_hom</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">self.to_add_monoid_hom</span><span class=\"o\">)</span> <span class=\"n\">b</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">centroid</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"n\">b</span>\n\n<span class=\"n\">centroid.lean</span><span class=\"o\">:</span><span class=\"mi\">26</span><span class=\"o\">:</span><span class=\"mi\">15</span>\n<span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">rmul_comm'</span>\n  <span class=\"n\">centroid.rmul_comm'</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">self</span> <span class=\"o\">:</span> <span class=\"n\">centroid</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">self.to_add_monoid_hom</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">self.to_add_monoid_hom</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">centroid</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>I'm afraid I can't quite untangle what I'm supposed to be doing here?</p>\n<p>Thanks,</p>\n<p>Christopher</p>",
        "id": 274729663,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1646849619
    },
    {
        "content": "<p>Your problem is with the last line of code: <code>..add_monoid_hom.add_monoid_hom_class</code> says \"I'll fill in the rest of the fields using <code>add_monoid_hom.add_monoid_hom_class</code>, which is an instance of <code>add_monoid_hom_class (M →+ N) M N</code> so which can (only) be used to make a term of type <code>centroid_class F A</code> if this matches with <code>add_monoid_hom_class F A A</code>. OK let me figure out how all this matches\". Solving this we see that <code>M=N=A</code> and <code>F=A →+ A</code>. But your <code>F</code> is <code>centroid A</code> so the matching problem can't be solved.</p>",
        "id": 274732095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646850838
    },
    {
        "content": "<p>The very first line of your error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"bp\">'</span><span class=\"n\">coe'</span>\n  <span class=\"n\">add_monoid_hom_class.coe</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→+</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span><span class=\"o\">),</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">centroid</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">_x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n</code></pre></div>\n<p>says \"OK I have something which eats an additive monoid hom but you're telling me I need to eat a term of type <code>centroid A</code>\" so this is unification failing explicitly (and correctly).</p>",
        "id": 274732452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646850993
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- this is what you're missing</span>\n<span class=\"kd\">instance</span> <span class=\"n\">centroid.add_monoid_hom_class</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_hom_class</span> <span class=\"o\">(</span><span class=\"n\">centroid</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c.to_add_monoid_hom</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- c.f. https://github.com/leanprover-community/mathlib/blob/5d405e2a7028f87e962e7cc2133dc0cfc9c55f7d/src/algebra/group/hom.lean#L276</span>\n<span class=\"kd\">instance</span> <span class=\"n\">centroid.centroid_class</span> <span class=\"o\">:</span> <span class=\"n\">centroid_class</span> <span class=\"o\">(</span><span class=\"n\">centroid</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">lmul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">centroid.lmul_comm'</span><span class=\"o\">,</span>\n  <span class=\"n\">rmul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">centroid.rmul_comm'</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">centroid.add_monoid_hom_class</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 274734472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646851911
    },
    {
        "content": "<p>This at least doesn't have any errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">centroid.centroid_class</span> <span class=\"o\">:</span> <span class=\"n\">centroid_class</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">lmul_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">rmul_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">add_monoid_hom.add_monoid_hom_class</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Although I'm not sure if this is what I need to prove to satisfy the <code>make sure to extend </code>monoid_hom_class<code>.</code> requirement?</p>",
        "id": 274734599,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1646851963
    },
    {
        "content": "<p>I don't know how <code>add_monoid_class</code> works but looking at the docstring it seems that you should be extending it when you define centroid.</p>",
        "id": 274734690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646852006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373192\">Christopher Hoskin</span> <a href=\"#narrow/stream/116395-maths/topic/Extending.20.60add_monoid_hom.60.20and.20.60add_monoid_hom_class.60/near/274734599\">said</a>:</p>\n<blockquote>\n<p>This at least doesn't have any errors:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">centroid.centroid_class</span> <span class=\"o\">:</span> <span class=\"n\">centroid_class</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→+</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">lmul_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">rmul_comm</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">add_monoid_hom.add_monoid_hom_class</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Although I'm not sure if this is what I need to prove to satisfy the <code>make sure to extend </code>monoid_hom_class<code>.</code> requirement?</p>\n</blockquote>\n<p>Sure this doesn't have any errors -- but the sorrys are not provable, right?</p>",
        "id": 274735945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646852523
    },
    {
        "content": "<p>Nearly there?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">centroid.add_monoid_hom_class</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_hom_class</span> <span class=\"o\">(</span><span class=\"n\">centroid</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c.to_add_monoid_hom</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f.to_add_monoid_hom.map_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.to_add_monoid_hom.map_zero</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- c.f. https://github.com/leanprover-community/mathlib/blob/5d405e2a7028f87e962e7cc2133dc0cfc9c55f7d/src/algebra/group/hom.lean#L276</span>\n<span class=\"kd\">instance</span> <span class=\"n\">centroid.centroid_class</span> <span class=\"o\">:</span> <span class=\"n\">centroid_class</span> <span class=\"o\">(</span><span class=\"n\">centroid</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">lmul_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">f.lmul_comm'</span><span class=\"o\">,</span>\n  <span class=\"n\">rmul_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">f.rmul_comm'</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 274736836,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1646852873
    },
    {
        "content": "<p>This appears to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">centroid.add_monoid_hom_class</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid_hom_class</span> <span class=\"o\">(</span><span class=\"n\">centroid</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">c.to_add_monoid_hom</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">coe_injective'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">congr'</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">fun_like.ext</span> <span class=\"n\">f__to_add_monoid_hom</span> <span class=\"n\">g__to_add_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">congr_fun</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">f.to_add_monoid_hom.map_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.to_add_monoid_hom.map_zero</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- c.f. https://github.com/leanprover-community/mathlib/blob/5d405e2a7028f87e962e7cc2133dc0cfc9c55f7d/src/algebra/group/hom.lean#L276</span>\n<span class=\"kd\">instance</span> <span class=\"n\">centroid.centroid_class</span> <span class=\"o\">:</span> <span class=\"n\">centroid_class</span> <span class=\"o\">(</span><span class=\"n\">centroid</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">lmul_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">f.lmul_comm'</span><span class=\"o\">,</span>\n  <span class=\"n\">rmul_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">apply</span> <span class=\"n\">f.rmul_comm'</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 274738142,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1646853368
    },
    {
        "content": "<p>Doesn't the type you want already exist as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/distrib_mul_action_hom\">docs#distrib_mul_action_hom</a>?</p>",
        "id": 274741636,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646854953
    },
    {
        "content": "<p>That is, as <code>R →+[R] R</code>?</p>",
        "id": 274741709,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646855002
    },
    {
        "content": "<p>That seems to be something similar - but is that equivariant with respect to both the right and left action of <code>R</code> on <code>R</code>?</p>",
        "id": 274745395,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1646856673
    },
    {
        "content": "<p>I guess I would need to extend <code>R →+[R] R</code> and <code>R →[Rᵐᵒᵖ] R</code>?</p>",
        "id": 274753933,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1646860834
    },
    {
        "content": "<p>Trying:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">centroid</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">]</span> <span class=\"n\">A</span>\n</code></pre></div>\n<p>but I get field collisions, regardless of whether or not I use <code>set_option old_structure_cmd true</code>.</p>",
        "id": 274755110,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1646861461
    },
    {
        "content": "<p>GIve me 5Min.</p>",
        "id": 274755187,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646861506
    },
    {
        "content": "<p>Here you go! <a href=\"https://github.com/leanprover-community/mathlib/tree/centroid_hom\">branch#centroid_hom</a></p>",
        "id": 274759748,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646863872
    },
    {
        "content": "<p>Feel free to modify, kick me out of the copyright, or whatever. This is your branch, with the correct design.</p>",
        "id": 274759789,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646863907
    },
    {
        "content": "<p>You're right, <code>distrib_mul_action_hom</code> only captures one of your requirements, and extending it twice is likely just a headache</p>",
        "id": 274764621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646866407
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  Wow - thanks! I'll take a look this evening.</p>",
        "id": 274808057,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1646903632
    },
    {
        "content": "<p>I've managed to show that <code>centroid_hom</code> is a semiring, and a ring when <code>α</code> is a ring. As a further example of the sort of result one can prove, I'm trying to show that prime associative rings have commutative centroid (using a hypothesis for prime which avoids the use of two sided ideals). Nearly there, but stuck on how to bring all the threads of the argument together:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/centroid_hom/src/algebra/group/hom/centroid.lean#L228\">https://github.com/leanprover-community/mathlib/blob/centroid_hom/src/algebra/group/hom/centroid.lean#L228</a></p>\n<p>The goal is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">⊢</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>which I don't understand.</p>",
        "id": 275148453,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1647170671
    },
    {
        "content": "<p>That means you have to provide some term of type \\a</p>",
        "id": 275149307,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647172069
    },
    {
        "content": "<p>Having a look! Did you push all your changes?</p>",
        "id": 275149421,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647172244
    },
    {
        "content": "<p>Lean can't figure out what <code>r</code> you want to use in the <code>h'</code> application. The nice thing is that it doesn't matter, though - you can use any value</p>",
        "id": 275150163,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647173295
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<p>Either</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">apply</span> <span class=\"n\">h'</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h'''</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>or</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>      <span class=\"n\">apply</span> <span class=\"n\">h'</span> <span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"bp\">-</span> <span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h'''</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>will do the trick</p>\n</div></div>",
        "id": 275150181,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647173363
    },
    {
        "content": "<p>I think your <code>h</code> may be overly strong, though</p>",
        "id": 275150253,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647173496
    },
    {
        "content": "<p>Did you mean <code>∀ a b : α, (∀ r : α, a * r * b = 0) → a = 0 ∨ b = 0</code>?</p>",
        "id": 275150255,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647173510
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373192\">@Christopher Hoskin</span> ↑</p>",
        "id": 275150299,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647173531
    },
    {
        "content": "<p>With the similar change to <code>h'</code>, the proof then goes through</p>",
        "id": 275150391,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1647173704
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"307953\">@Ruben Van de Velde</span>  Thanks! That seems to have fixed it.</p>\n<p>Am I right in thinking that we don't have a notion of two sided ideals in non-associative non-unital rings yet?</p>",
        "id": 275151759,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1647175652
    }
]