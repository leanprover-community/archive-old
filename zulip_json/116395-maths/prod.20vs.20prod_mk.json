[
    {
        "content": "<p>I see that in many parts of Mathlib (especially for more basic stuff, such as topology) lemmas having to do with the function <code>(λ x, (f x, g x))</code> are named with <code>prod_mk</code>, whereas in some newer part of mathlib they are named with simply <code>prod</code> (for example there is<code>times_cont_diff.prod</code> instead of <code>times_cont_diff.prod_mk</code>). I guess the reason for the first name was to distinguish it from <code>prod_map</code>(<code>(λ x y, (f x, g y))</code>) to avoid ambiguity. Since I am about to PR a lot of lemmas on product manifolds, I was wondering if it may be a good idea to look for uniformity in Mathlib on these names. This firstly for the sake of coherence itself, that is always a good thing and second because there are a lot of lemmas regarding smooth manifolds that have an identical counterpart in topology up to changing continuous with smooth and adding a few <code>model_with_corners</code> here and there and I want to use exactly the same names for these lemmas as in the continuous case because this way one can write a lemma of this kind in topology, copy and paste it in geometry, do just one smart replace, and that's it. Otherwise one has to look names twice and in general think of different processes for what is in the end the same exact proof. I believe <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> and <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> used the name <code>prod_mk</code> in topology and <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> used the name <code>prod</code> in geometry. If you guys can decide what you like better between these two conventions, I will adapt the library myself accordingly (at least the geometry and topology sections) and name my lemmas accordingly. For what it counts I like <code>prod_mk</code> better because it completely avoids ambiguity with <code>prod_map</code> and <code>prod</code> is a good name for both, but you should decide on your own and I will just update the library</p>",
        "id": 204080270,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594904992
    },
    {
        "content": "<p>I believe the switch to <code>prod</code> by <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> was deliberate, there should be a justification here somewhere</p>",
        "id": 204145990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594935123
    },
    {
        "content": "<p>He wrote this message answering the same thing I wrote here (but in the stream new members) some time ago (when I was writing that code the first time, now I wrote it again here because I want to PR it and I need to sort this out)<br>\n<span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/113489-new-members/topic/prod.20vs.20prod_mk/near/202287599\">said</a>:</p>\n<blockquote>\n<p>Coherence is definitely a good option. As to whether we should use <code>prod_mk</code> or <code>prod</code>, I don't have a strong opinion, but I think I prefer slightly <code>prod</code> as it is shorter, and not really ambiguous.</p>\n</blockquote>",
        "id": 204148737,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594936703
    },
    {
        "content": "<p>It was actually him who told me to ask this publicly in order to decide which of the two conventions to choose so I guess he's also open to hear if anybody has a strong opinion for some reason or if it's the same thing for everybody</p>",
        "id": 204149124,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1594936954
    },
    {
        "content": "<p>I believe that <code>prod_mk</code> is the more technically correct name, but I have great sympathy for shortening names and name segments when there is no ambiguity</p>",
        "id": 204149262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594937056
    },
    {
        "content": "<p>I'm not sure it's entirely true that there is no ambiguity though; especially in theorems about the term the name will reappear smashed together with a bunch of other names and it's entirely possible for the type <code>prod</code> to appear in the same \"grammatical position\" as the function <code>prod_mk</code></p>",
        "id": 204149371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594937134
    },
    {
        "content": "<p>While refactoring <code>measure_theory/</code> I also met <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.simple_func.pair/src\">src#measure_theory.simple_func.pair</a></p>",
        "id": 204274752,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1595032651
    },
    {
        "content": "<p>When everybody will have agreed on one of these names I will change it in the topology and geometry sections and leave to other people to change it in the other parts of mathlib if they'll believe it is a good thing to adopt the same conventions of the topology section</p>",
        "id": 204301054,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1595079609
    },
    {
        "content": "<p>My personal vote goes to <code>pair</code> &gt; <code>prod</code> &gt; <code>prod_mk</code>. See also <code>set_theory/zfc.lean:507: def pair (x y : Set.{u}) : Set.{u} := {{x}, {x, y}}</code>.</p>",
        "id": 204306262,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595088488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/116395-maths/topic/prod.20vs.20prod_mk/near/204306262\">said</a>:</p>\n<blockquote>\n<p>My personal vote goes to <code>pair</code> &gt; <code>prod</code> &gt; <code>prod_mk</code>. See also <code>set_theory/zfc.lean:507: def pair (x y : Set.{u}) : Set.{u} := {{x}, {x, y}}</code>.</p>\n</blockquote>\n<p>Sorry, I did not understand, from <code>pair</code> &gt; <code>prod</code> &gt; <code>prod_mk</code> I'd guess that <code>pair</code> would be your first choice, but I interpret your second comment as \"<code>pair</code> could be confused with set's <code>pair</code>\". So is <code>pair</code> your first choice?</p>",
        "id": 204314705,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1595101119
    },
    {
        "content": "<p>Let me start a poll on this.</p>",
        "id": 204345600,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595158833
    },
    {
        "content": "<p>Vote here if you prefer <code>pair</code>.</p>",
        "id": 204345602,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595158847
    },
    {
        "content": "<p>Vote here if you prefer <code>prod</code>.</p>",
        "id": 204345604,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595158858
    },
    {
        "content": "<p>Vote here if you prefer <code>prod_mk</code>.</p>",
        "id": 204345611,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595158870
    },
    {
        "content": "<p>Vote here if you don't care really care, but you think that coherence over mathlib is a good idea.</p>",
        "id": 204345619,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1595158893
    },
    {
        "content": "<p>Just out of curiosity, why is <code>pair</code> a good name?</p>",
        "id": 204403277,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1595238170
    },
    {
        "content": "<p>I prefer <code>pair</code> because it is the constructor of (ordered) pairs.</p>",
        "id": 204403670,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595238475
    },
    {
        "content": "<p>But isn't it the constructor for set pair? I thought the constructor for elements of the product of types is something like <code>prod.mk</code> or something similar (even if I always use langle rangle)</p>",
        "id": 204404003,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1595238722
    },
    {
        "content": "<p>I agree that the specific function used to construct a pair in the <code>prod</code> type is called <code>prod.mk</code> by Lean, but that is just one implementation of putting things together so we can take them apart later. Another implementation is <code>Set.pair</code>. A third one is <code>sigma.mk</code>. Arguably, <code>and.intro</code> is another. There are also many structures with an addition operator, and I'm happy with using <code>add</code> to refer to any of them, or all of them.</p>",
        "id": 204405830,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595240248
    },
    {
        "content": "<p>Anyway, I don't care a lot about the specific name we use in the end so I will try to refrain from commenting so we can just get this bike shed painted :)</p>",
        "id": 204405918,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595240305
    }
]