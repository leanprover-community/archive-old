[
    {
        "content": "<p>Should complex.ext_iff be a simp lemma? In <code>data.complex.basic</code> I added the attribute to it, and the following happened:  two proofs broke, but they were easily fixed (one became shorter), and about 20 proofs could be changed from <code>ext_iff.2 $ by simp</code> to <code>by simp</code>. I then tried compiling the rest of mathlib and a bunch of stuff had broken. I cannot currently contemplate fixing it, but I was just interested in hearing the community's ideas about whether this is a bad idea in general. The lemma says <code>z = w ↔ z.re = w.re ∧ z.im = w.im</code>. In the complex number game it seems to work fine.</p>",
        "id": 199026513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590674729
    },
    {
        "content": "<p>Doesn't sound like a good idea to me. You won't ever be able to reason about equality of complex numbers without having the argue separately about their real and imaginary parts...</p>",
        "id": 199026659,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590674793
    },
    {
        "content": "<p>When you're first setting up complex numbers in terms of pairs of real numbers, it's great and helpful. Less so once you want to seal off that implementation detail! :-)</p>",
        "id": 199026753,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590674851
    },
    {
        "content": "<p>Instead, you could use <code>local attribute [simp] ext_iff</code> just in this file.</p>",
        "id": 199026901,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1590674918
    },
    {
        "content": "<p>I think that making it a local attribute is a great idea, because it really makes <code>data.complex.basic</code> look a lot sexier.</p>",
        "id": 199027294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590675117
    },
    {
        "content": "<p>There's a slight counter argument: that having _all_ the proofs in a good introductory pedagogical file consist of <code>by simp</code> may induce superstition about the power of <code>simp</code>. :-)</p>",
        "id": 199027438,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590675191
    },
    {
        "content": "<p>At least <code>by { ext; simp }</code> may lead people to understand: \"think about it in components; then it's easy\".</p>",
        "id": 199027512,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1590675235
    },
    {
        "content": "<p>That's an interesting counter-argument.</p>",
        "id": 199028224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590675596
    },
    {
        "content": "<p>So I see that there is no module docstring either, and the doc_blame linter is actually complaining a lot, so at some point when marking is over in a few days I will probably fix this up; to be quite honest I even prefer <code>by {ext; simp}</code> to what we currently have, but I am looking at this from a different point of view to some people, perhaps (for all I know I just put compilation time up by 20% which might be a cardinal sin)</p>",
        "id": 199028541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590675743
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/complex-tidyup\">https://github.com/leanprover-community/mathlib/tree/complex-tidyup</a> ; I won't make a PR until I've added the module docstrong (and won't make a PR of this edit at all if people think that <code>ext_iff.2 $ by simp</code> is better). In the complex number game I'll perhaps play with the idea when I'm streaming live</p>",
        "id": 199028898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590675906
    },
    {
        "content": "<p>On a somewhat related note, I wonder whether <code>ext</code> should only locally be an <code>ext</code> lemma.</p>",
        "id": 199029541,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590676197
    },
    {
        "content": "<p>If you have two, I don't know, bundled holomorphic functions and you want to prove they're equal because they're pointwise equal, probably you do not want to split into real and imaginary components.</p>",
        "id": 199029704,
        "sender_full_name": "Reid Barton",
        "timestamp": 1590676267
    }
]