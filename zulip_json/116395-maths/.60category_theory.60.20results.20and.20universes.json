[
    {
        "content": "<p>Hi, do I understand correctly that (currently) there is no easy way to prove some results for all (concrete) categories, then apply them for <code>Type</code>s living in different universes? I mean, even if I define <code>is_conj (f : End X) (g : End Y) := ∃ h : X ≅ Y, f ≫ h = h ≫ g</code>, then in order to apply it to <code>X : Type u</code> and <code>Y : Type v</code> I have to use <code>ulift</code> functor.<br>\nDo I understand correctly that there is no (simple) way to overcome this, because we obviously can't have a category of \"all types from all universes\"?</p>",
        "id": 168229540,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1560646500
    },
    {
        "content": "<p>Yes.</p>",
        "id": 168229718,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1560646817
    },
    {
        "content": "<p>Hi again,<br>\nWhat do you think about the following alternative approach to dealing with multiple universes:<br>\n1. In most cases (may be, outside of <code>/category_theory</code>), use one universe.<br>\n2. If really needed, use <code>ulift</code><br>\n3. To make 2 possible, write a tactic that lifts properties/instances/... to <code>ulift</code>.<br>\nThis way it would be possible to, e.g., directly apply various category theory facts to groups/rings/etc. I guess there should be something bad about this approach (I mean, you must've had some reason not to take this path), but I fail to guess what exactly is bad.</p>",
        "id": 169723241,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562346789
    },
    {
        "content": "<p>I think the main difference is that universes are mostly handled automatically by lean, while <code>ulift</code> makes its presence known whenever you deal with it</p>",
        "id": 169723323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562346877
    },
    {
        "content": "<p>How often somebody really needs more than one universe? My guess is that more rarely than someone needs to prove a lemma/def that can be stated for categories.</p>",
        "id": 169723613,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562347199
    },
    {
        "content": "<p>You would be surprised. A common one is if you have a ring <code>R</code> in <code>Type u</code> and then it interacts with a concrete structure like <code>int : Type 0</code></p>",
        "id": 169723703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562347281
    },
    {
        "content": "<p>When do you need a ring <code>R</code> in <code>Type u</code> and not <code>Type</code>?</p>",
        "id": 169723766,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562347327
    },
    {
        "content": "<p>as soon as you start doing enough category theory that ZFC isn't enough</p>",
        "id": 169723785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562347355
    },
    {
        "content": "<p>ZFC is always enough. It's just that sometimes it's a bit painful to show this</p>",
        "id": 169723800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562347375
    },
    {
        "content": "<p>that's the kind of constraint you can't undo without a huge refactor</p>",
        "id": 169723804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562347381
    },
    {
        "content": "<p>The ZFC'ists would argue that a ring in Type u is not a ring, it's something weirder.</p>",
        "id": 169723820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562347417
    },
    {
        "content": "<p>a conglomer-ring</p>",
        "id": 169723866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562347443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> For me, choosing between \"explicit <code>ulift</code> in advanced topics of one branch of math\" vs \"restating almost every category theory result for every concrete category\" would mean \"go with option 1\". But I understand that I'm not the one who decides. At least, now I know that all this extra code is not a complete waste of time.</p>",
        "id": 169726187,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562349939
    },
    {
        "content": "<p>What do you mean by \"restating almost every category theory result for every concrete category\"</p>",
        "id": 169726241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562349970
    },
    {
        "content": "<p>The definition of a group hom is not provided by any category theory machination</p>",
        "id": 169726274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562350028
    },
    {
        "content": "<p>AFAIK there aren't many theorems that would actually benefit from a category formulation</p>",
        "id": 169726296,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562350063
    },
    {
        "content": "<p>Probably, I badly formulated my thoughts.</p>",
        "id": 169726298,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562350064
    },
    {
        "content": "<p>Here are a few facts/defs I'd prefer to have in various categories for free:<br>\n1. <code>iso</code> and <code>Aut</code> for groups, rings etc, compare with <code>data/equiv/algebra</code><br>\n2. (semi)conjugacy of morphisms</p>",
        "id": 169726531,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562350273
    },
    {
        "content": "<p>(thinking about other examples)</p>",
        "id": 169726559,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562350311
    },
    {
        "content": "<p>While it might be nice to transport results from the category theory iso, I think we actually want a group_iso to have a particular definition as a structure</p>",
        "id": 169726705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562350438
    },
    {
        "content": "<p>because people will be constructing these with structure builders and such</p>",
        "id": 169726761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562350464
    },
    {
        "content": "<p>I think it would be good to have more meta-structure in the algebraic hierarchy...</p>",
        "id": 169726887,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562350584
    },
    {
        "content": "<p>Currently there is no (<code>meta</code>?) dictionary that relates <code>group</code>, <code>is_group_hom</code>, <code>is_group_hom.comp</code>, and <code>is_group_hom.id</code>,<br>\nand similarly for <code>monoid</code> and <code>ring</code>, etc...</p>",
        "id": 169726925,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562350635
    },
    {
        "content": "<p>If we had those, we could use a little <code>meta</code>-programming to define <code>Aut</code> in one go for all the cases that we care about.</p>",
        "id": 169726986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562350661
    },
    {
        "content": "<p>We could unify a lot of boilerplate by looping over that dictionary.</p>",
        "id": 169727039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562350688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210057\">@Fabian Glöckle</span> Currently has a 400-line file that basically does that. And I'm sure that <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>  and <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> can probably golf it to &lt; 300 lines in one evening.</p>",
        "id": 169727055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562350730
    },
    {
        "content": "<p>Shame on me. I can't think about any other good example where the \"non-category theory\" version involves morphisms between types in different universes. I'm very sorry for starting this conversation without preparing examples.</p>",
        "id": 169727078,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562350753
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> If we have a (meta) dictionary like this, we can define corresponding categories \"for free\" as well.</p>",
        "id": 169727188,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562350883
    },
    {
        "content": "<p>Exactly, that is what Fabian has been focusing on so far.</p>",
        "id": 169727297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562350981
    },
    {
        "content": "<p>But all sorts of definitions and little simp-lemmas could also be unified.</p>",
        "id": 169727310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562351002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  So, basically the idea is to move \"really useful\" category theory definitions/lemmas to a <code>meta def</code>, and define them (semi-)automatically with every concrete category?<br>\nBTW, I think that it's better to have a command or a user attr, not one loop for the following reason. If we have one loop in one file, then all \"ground work\" for all concrete categories has to be below this file in the <code>import</code> tree. In particular, we can't use these autogenerated results in these files.</p>",
        "id": 169727734,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562351455
    },
    {
        "content": "<p>Sure, I guess the best thing would be something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">category</span> <span class=\"n\">Aut</span> <span class=\"n\">blah</span> <span class=\"n\">foo</span> <span class=\"n\">bar</span> <span class=\"n\">etc</span><span class=\"o\">]</span>\n<span class=\"n\">class</span> <span class=\"n\">monoid</span> <span class=\"bp\">...</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>",
        "id": 169727829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562351567
    },
    {
        "content": "<p>Of course we can't do that for the monoids we have atm, because they are locked into core. But we could still run a user-command to generate a bunch of stuff.</p>",
        "id": 169727851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562351606
    },
    {
        "content": "<p>How can you derive category before you have <code>is_monoid_hom</code>?</p>",
        "id": 169727928,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562351681
    },
    {
        "content": "<p>You can autogenerate <code>is_monoid_hom</code>.</p>",
        "id": 169728024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562351772
    },
    {
        "content": "<p>An autogenerated <code>is_group_hom</code> will probably have <code>map_one</code> and <code>map_inv</code></p>",
        "id": 169728257,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562352023
    },
    {
        "content": "<p>Also, it's better not to autogenerate <code>is_*_hom</code> for topology/analysis-related categories (e.g., metric spaces, topology, manifolds).</p>",
        "id": 169728349,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562352151
    },
    {
        "content": "<p>Sure, so you should be able to define manually, and then add an entry to the dictionary.</p>",
        "id": 169728393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562352234
    },
    {
        "content": "<p>That shouldn't be too hard...</p>",
        "id": 169728444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562352253
    },
    {
        "content": "<blockquote>\n<p>Mario Carneiro: While it might be nice to transport results from the category theory iso, I think we actually want a group_iso to have a particular definition as a structure<br>\nMario Carneiro: because people will be constructing these with structure builders and such</p>\n</blockquote>\n<p>I'm not sure what the objection is here. <code>iso</code> is defined just like <code>equiv</code>, it's a structure you define like so:</p>\n<div class=\"codehilite\"><pre><span></span>{ hom := ...,\n  inv := ... }\n</pre></div>\n\n\n<p>and each of those <code>...</code> is constructing say a <code>subtype is_group_hom</code>.</p>",
        "id": 169733144,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1562357480
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  For many algebraic objects, with the current implementation you only need to prove that <code>hom</code> is an <code>is_group_hom</code>. Also, you don't need to use <code>ext</code> in proofs of <code>inv * hom = id</code> and <code>hom * inv = id</code>.<br>\nOf course, a method like <code>of_equiv_hom (e : equiv α β) [is_group_hom e.to_fun] : iso α β</code> would solve this issue.</p>",
        "id": 169734379,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562358834
    }
]