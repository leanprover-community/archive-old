[
    {
        "content": "<p>Hey, in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/quotient.lean\"><code>category_theory.quotient</code></a> the type of the quotient of a category is taken as a struct with one field, where I would have expected <code>def quotient {V : Type*} [category V] (rel : …) := V</code>. Is there a specific reason behind this choice?</p>",
        "id": 303200324,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665380976
    },
    {
        "content": "<p>I think it's similar to the case of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.discrete\">docs#category_theory.discrete</a>, where the docstring says it well (it's changed to a structure in a huge recent refactor <a href=\"https://github.com/leanprover-community/mathlib/pull/13762\">#13762</a>):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">A wrapper for promoting any type to a category,</span>\n<span class=\"sd\">with the only morphisms being equalities.</span>\n<span class=\"sd\">-/</span>\n<span class=\"c1\">-- This is intentionally a structure rather than a type synonym</span>\n<span class=\"c1\">-- to enforce using `discrete_equiv` (or `discrete.mk` and `discrete.as`) to move between</span>\n<span class=\"c1\">-- `discrete α` and `α`. Otherwise there is too much API leakage.</span>\n</code></pre></div>",
        "id": 303200812,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665381345
    },
    {
        "content": "<p>Mmh, I see. Does this mean <code>category.paths</code> and any other place with \"transparent\" type synonyms should be corrected in this direction?</p>",
        "id": 303201769,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665382055
    },
    {
        "content": "<p>I think it depends on the situation but I am not sure about the criteria. There's a recent PR <a href=\"https://github.com/leanprover-community/mathlib/pull/16760\">#16760</a> to remove <code>irreducible</code> from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_opposite\">docs#mul_opposite</a>, and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_opposite\">docs#add_opposite</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual\">docs#order_dual</a> are not irreducible currently. However, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/opposite\">docs#opposite</a>, mostly used in category theory, is irreducible.</p>",
        "id": 303204858,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665384266
    },
    {
        "content": "<p><code>irreducible</code> makes the abstraction less leaky, so that a type synonym using <code>def</code> can't be seen though, right? So at the same time some type synonyms are made leakier, while at other places, we'd rather have them tighter?</p>",
        "id": 303205514,
        "sender_full_name": "Rémi Bottinelli",
        "timestamp": 1665384830
    },
    {
        "content": "<p>Yes, <code>irreducible</code> basically has the same effect as a single-field structure; both force you to use another function (<code>op</code>, <code>unop</code> etc. rather than <code>id</code>) to go between a type and its synonym. If the synonym isn't irreducible or a structure, you're still supposed to use specific functions <a href=\"https://leanprover-community.github.io/mathlib_docs/find/additive.of_mul\">docs#additive.of_mul</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual.of_dual\">docs#order_dual.of_dual</a> etc., but sometimes it can be convenient to abuse defeq (mostly in proofs). Also introduce a non-defeq synonym would require duplication of APIs. Sometimes I find it annoying that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial\">docs#polynomial</a> isn't defeq to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_algebra\">docs#add_monoid_algebra</a> ...</p>",
        "id": 303210237,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665387626
    }
]