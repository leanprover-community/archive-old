[
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/sym2.lift\">docs#sym2.lift</a> allows to lift symmetric maps <code>f : α → α → β</code> to functions <code>sym2 α → β</code>. Now, I want to define the unoriented edges of a multiset, so instead of the equality <code>f a b = f b a</code>, I have an equivalence <code>f a b ≃ f b a</code>. How do I lift that to a function from <code>sym2</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.sym.sym2</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">sym2</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lift_sort</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≃</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sym2</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≃</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lift_sort_equiv</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">lift_sort</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"n\">he</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">≃</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"c1\">-- maybe some lemma along the lines of</span>\n<span class=\"c1\">-- `(lift_sort_equiv f e a b).symm.trans (lift_sort_equiv f e b a) = e a b`?</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">sym2</span>\n</code></pre></div>\n<p>Note that I don't know how to handle the diagonal. If we consider that an edge should always come from two darts, then <code>lift_sort_equiv</code> should take <code>a ≠ b</code> as assumption.<br>\nBut really any progress would help. I've been stuck on that for several days now.</p>\n<p>Maybe <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> can help?</p>",
        "id": 266080753,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640475278
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.sym.sym2</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">sym2</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≃</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lift_sort</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">sym2</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">quotient.out</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">quotient.out</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">out_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⟧.</span><span class=\"n\">out</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⟧.</span><span class=\"n\">out</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⟧.</span><span class=\"n\">out.1</span><span class=\"o\">,</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⟧.</span><span class=\"n\">out.2</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⟧</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sym2.eq_iff</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">prod.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">prod.ext_iff</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">lift_sort_equiv</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≃</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">lift_sort</span> <span class=\"n\">f</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">≃</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">dite</span> <span class=\"o\">(</span><span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⟧.</span><span class=\"n\">out</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">equiv.cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span> <span class=\"o\">}))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">equiv.cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">out_eq</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"n\">h</span> <span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">))</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">sym2</span>\n</code></pre></div>",
        "id": 266080817,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640475453
    },
    {
        "content": "<p>I'm not sure what your lemma is meant to be describing, I can't make it typecheck</p>",
        "id": 266080868,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640475584
    },
    {
        "content": "<p>Ah, maybe you mean</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lift_sort_equiv_symm_trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">lift_sort_equiv</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span> <span class=\"o\">(</span><span class=\"n\">equiv.trans</span> <span class=\"o\">(</span><span class=\"n\">equiv.cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sym2.eq_swap</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">lift_sort_equiv</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 266081173,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640476131
    },
    {
        "content": "<p>Yes exactly</p>",
        "id": 266081174,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640476139
    },
    {
        "content": "<p>When <code>a = b</code>, this lemma implies <code>equiv.refl (f a a) = e a a</code></p>",
        "id": 266081186,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640476173
    },
    {
        "content": "<p>And with that assumption, it's not too tricky to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">lift_sort_equiv_symm_trans</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">equiv.refl</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">lift_sort_equiv</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm.trans</span>\n    <span class=\"o\">((</span><span class=\"n\">equiv.cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">sym2.eq_swap</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">lift_sort_equiv</span> <span class=\"n\">f</span> <span class=\"n\">e</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lift_sort_equiv</span><span class=\"o\">,</span> <span class=\"n\">lift_sort_equiv</span><span class=\"o\">],</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">hab</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">out_eq</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">sym2.eq_swap</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hab</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">dif_neg</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">he</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">sym2.eq_swap</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hab</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266081288,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640476338
    },
    {
        "content": "<p>So Kyle, what do you think of making this <code>sym2 α → Sort u</code> edges map the primitive for <code>multigraph</code>? It seems quite hard to build it from the <code> α → α → Sort u</code> homs. The other way around is trivial and can be handled by the typeclasses I'm offering.</p>",
        "id": 266081307,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640476423
    },
    {
        "content": "<p>Surprisingly (at least it wasn't my initial reaction) it is also possible to implement this without choice (e.g. <code>quotient.out</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.sym.sym2</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"kd\">parameters</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">≃</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">he'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"n\">a</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">aux</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">aux_rel</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">aux</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">aux</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">sym</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">aux_rel</span> <span class=\"o\">⟨</span><span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">a₂</span><span class=\"o\">,</span> <span class=\"n\">a₁</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">sym2.eq_swap</span> <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"n\">e</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">x</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">lift_type</span> <span class=\"o\">:</span> <span class=\"n\">sym2</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">quot</span> <span class=\"o\">(</span><span class=\"n\">aux_rel</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266081665,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640476929
    },
    {
        "content": "<p>I didn't try to implement <code>lift_sort_equiv</code> so there may be more surprises there, but it seems like the right construction math-wise.</p>",
        "id": 266081749,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640477089
    },
    {
        "content": "<p>Woah I wasn't expecting it to be possible computably either, nice!</p>",
        "id": 266081769,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1640477140
    },
    {
        "content": "<p>Basically the <code>h : ⟦(a₁, a₂)⟧ = s</code> is a kind of strictification that produces an equality in <code>Type</code> where you wouldn't expect to obtain one</p>",
        "id": 266081816,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640477166
    },
    {
        "content": "<p>I think the hypothesis <code>he'</code> that I added \"just in case\" probably isn't really necessary</p>",
        "id": 266081939,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640477414
    },
    {
        "content": "<p>The way to arrive at this is rather than trying to build the type family <code>lift_type : sym2 α → Type u</code>, try to build the map <code>X → sym2 α</code> that it classifies</p>",
        "id": 266082020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1640477594
    },
    {
        "content": "<p>Here's a translation of <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>'s construction into multigraph language. I wonder if there's a way to keep the universes for <code>edges'</code> from being bumped up?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.sym.sym2</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">multigraph</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">edges</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">≃</span> <span class=\"n\">edges</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"n\">flip</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">loops</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">flip</span> <span class=\"n\">v</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">multigraph</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">multigraph.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dart_at</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">edge</span> <span class=\"o\">:</span> <span class=\"n\">G.edges</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">is_flipped_dart_at</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G.dart_at</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">G.dart_at</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">is_flip</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G.edges</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_flipped_dart_at</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">G.flip</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">subst_vars</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">sym2.eq_swap</span> <span class=\"o\">}⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">edges'</span> <span class=\"o\">:</span> <span class=\"n\">sym2</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">quot</span> <span class=\"o\">(</span><span class=\"n\">G.is_flipped_dart_at</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">multigraph</span>\n</code></pre></div>",
        "id": 266088341,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640488700
    },
    {
        "content": "<p>I find going through a map <code>E -&gt; sym2 V</code> more natural on the way to the <code>edges</code> map, though (like what Reid mentioned):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.sym.sym2</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">multigraph</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">edges</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">edges</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">≃</span> <span class=\"n\">edges</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">flip</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">=</span> <span class=\"n\">flip</span> <span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">loops</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">flip</span> <span class=\"n\">v</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">multigraph</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">multigraph.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dart</span> <span class=\"o\">:=</span> <span class=\"bp\">Σ'</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">G.edges</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">dart.flip</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">multigraph</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">G.dart</span> <span class=\"bp\">→</span> <span class=\"n\">G.dart</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">G.flip</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">e</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">inductive</span> <span class=\"n\">is_flipped_dart</span> <span class=\"o\">:</span> <span class=\"n\">G.dart</span> <span class=\"bp\">→</span> <span class=\"n\">G.dart</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">flip</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">G.dart</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_flipped_dart</span> <span class=\"n\">d</span> <span class=\"n\">d.flip</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">quot</span> <span class=\"n\">G.is_flipped_dart</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ends</span> <span class=\"o\">:</span> <span class=\"n\">G.E</span> <span class=\"bp\">→</span> <span class=\"n\">sym2</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">quot.lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">G.dart</span><span class=\"o\">),</span> <span class=\"bp\">⟦</span><span class=\"o\">(</span><span class=\"n\">d.1</span><span class=\"o\">,</span> <span class=\"n\">d.2.1</span><span class=\"o\">)</span><span class=\"bp\">⟧</span><span class=\"o\">)</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">e</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">u'</span><span class=\"o\">,</span><span class=\"n\">v'</span><span class=\"o\">,</span><span class=\"n\">e'</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">sym2.eq_swap</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">edges'</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">sym2</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">G.E</span> <span class=\"bp\">//</span> <span class=\"n\">G.ends</span> <span class=\"n\">e</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">multigraph</span>\n</code></pre></div>",
        "id": 266088895,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1640489768
    },
    {
        "content": "<p>If you want to take this perspective seriously you will probably need to work with the transport from <code>edges' ⟦(a, b)⟧</code> to <code>edges' ⟦(b, a)⟧</code>. I don't think this is any easier than having <code>edges</code> indexed by <code>α × α</code> and making <code>flip</code> explicit. I'm also sceptical of including  this <code>loops</code> condition in the basic <code>multigraph</code> class (it means you can't view a groupoid as a multigraph). If you drop the <code>loops</code> condition then you can no longer think of a multigraph as a type family over some set, rather it would be a presheaf over a (non-discrete) groupoid analogue of <code>sym2</code>.</p>",
        "id": 266105949,
        "sender_full_name": "David Wärn",
        "timestamp": 1640518969
    }
]