[
    {
        "content": "<p>In <code>lemma ruesDiffRotationallySymmetric</code>, I get an error when trying <code>rw h6,</code> just above the <code>sorry</code>.<br>\nLooking at the tactic state makes me wonder if this is a bug. Help appreciated.<br>\n<a href=\"/user_uploads/3121/Xus2Hacc2Xd2jsa1xLmpBYM7/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/Xus2Hacc2Xd2jsa1xLmpBYM7/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/Xus2Hacc2Xd2jsa1xLmpBYM7/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.exponential</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.complex.log</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group_with_zero.defs</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">classical</span> <span class=\"n\">complex</span> <span class=\"n\">asymptotics</span> <span class=\"n\">real</span> <span class=\"n\">normed_space</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">big_operators</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ruesDiff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffTsumForm</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">tsum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"k\">if</span> <span class=\"o\">((</span><span class=\"n\">k</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">%</span><span class=\"n\">n</span><span class=\"bp\">=</span><span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"n\">z</span> <span class=\"bp\">^</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"n\">k.factorial</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"c1\">-- needed for zpow_add to work</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">multiplicative.group</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffRotationallySymmetric</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₀</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"n\">rou</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"o\">:</span><span class=\"n\">rou</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">rou</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">rou</span> <span class=\"bp\">^</span> <span class=\"bp\">-</span><span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"n\">ruesDiffTsumForm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">tsum_mul_left.symm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">ext1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">euclidean_domain.mod_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">zpow_neg</span><span class=\"o\">,</span> <span class=\"n\">mul_ite</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:=</span> <span class=\"n\">classical.em</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"bp\">∣</span> <span class=\"bp\">↑</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_pos</span> <span class=\"n\">h0</span><span class=\"o\">,</span><span class=\"n\">if_pos</span> <span class=\"n\">h0</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mul_pow</span> <span class=\"n\">z</span> <span class=\"n\">rou</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">rou</span> <span class=\"bp\">^</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">rou</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"k\">let</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">h2</span> <span class=\"n\">at</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n        <span class=\"n\">clear_value</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n        <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">k1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">rou</span> <span class=\"bp\">^</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n          <span class=\"n\">rw</span> <span class=\"n\">zpow_mul</span> <span class=\"n\">rou</span> <span class=\"bp\">↑</span><span class=\"n\">n</span> <span class=\"n\">k1</span><span class=\"o\">,</span>\n          <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">rou</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span>\n            <span class=\"n\">exact_mod_cast</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n          <span class=\"o\">},</span>\n          <span class=\"n\">rw</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n          <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_zpow</span><span class=\"o\">],</span>\n        <span class=\"o\">},</span>\n        <span class=\"k\">have</span> <span class=\"n\">h5</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">z₀</span><span class=\"o\">:</span><span class=\"n\">ℂ</span><span class=\"o\">),</span><span class=\"n\">z₀</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">rou</span> <span class=\"bp\">^</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">h3.symm</span><span class=\"o\">,</span>\n        <span class=\"n\">clear</span> <span class=\"n\">h3</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n        <span class=\"n\">clear</span> <span class=\"n\">h5</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"n\">zpow_add</span> <span class=\"n\">rou</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n        <span class=\"c1\">-- rw h6, -- fails, but should work</span>\n        <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n      <span class=\"n\">ring_nf</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">if_neg</span> <span class=\"n\">h0</span><span class=\"o\">,</span><span class=\"n\">if_neg</span> <span class=\"n\">h0</span><span class=\"o\">],</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">topological_ring.mk</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">t2_5_space.t2_space</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 303362303,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1665466439
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"385848\">@Mark Andrew Gerads</span> If you click on those <code>↑</code> appearing in the goal and in <code>h6</code> you should get little pop-ups.</p>",
        "id": 303362665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665466725
    },
    {
        "content": "<p>Do they say the same thing?</p>",
        "id": 303362672,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665466730
    },
    {
        "content": "<p>That instance looks like it will give you trouble, and probably exactly at this point</p>",
        "id": 303364013,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1665467754
    },
    {
        "content": "<p>Do you now have two multiplications on the complex numbers?</p>",
        "id": 303364076,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1665467778
    },
    {
        "content": "<p>Ooh, that instance is certainly bad. <code>ℂ</code> is not a multiplicative group.</p>",
        "id": 303364259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665467939
    },
    {
        "content": "<p><code>zpow_add</code> isn't working for a reason. There's probably a lemma <code>zpow_add₀</code> that can be used here.</p>",
        "id": 303364311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665467986
    },
    {
        "content": "<p>I'm guessing that zpow_add is false for 0^0</p>",
        "id": 303364374,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1665468013
    },
    {
        "content": "<p>The pop-ups that usually say what type a chunk of code is (that show tiny 'copy' buttons) is not working.<br>\nBecause zpow_add appears to work when it should not (before the rw attempt), does that mean randomly claiming the instance broke the consistency of Lean, and if so, what advice should I follow to avoid such errors in the future? I am wondering where exactly my bug is, and how to generalize it to similar sets of bugs so that I could avoid similar mistakes in the future.<br>\nHow does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"n\">zpow_add</span> <span class=\"n\">rou</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>not throw any error in the first place, unless the 'theorem' is correct?<br>\nAlso, I noticed I was missing a <code>noncomputable</code>, but my problem persists.</p>",
        "id": 303365751,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1665468996
    },
    {
        "content": "<p>The issue is that after defining the <code>group C</code> instance you have two different multiplications on C so you are in hell. You don't want to do that, whatever you think it \"fixes\".</p>",
        "id": 303365978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665469167
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 303365995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665469182
    },
    {
        "content": "<p>What you did certainly doesn't amount to \"breaking the consistency of Lean\" in the literal sense.</p>",
        "id": 303366412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665469471
    },
    {
        "content": "<p>I guess the confusing thing is that mathlib is very picky about notation. <code>+</code> and <code>*</code> are not treated as \"arbitrary binary operations\".</p>",
        "id": 303366463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665469515
    },
    {
        "content": "<p>You told Lean, please treat <code>ℂ</code> as a group with multiplicative notation. And you told it to do that by turning all <code>+</code>s into <code>*</code> (when you set up that instance).</p>",
        "id": 303366488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665469547
    },
    {
        "content": "<p>So now <code>x * y</code> is new notation for <code>x + y</code>.</p>",
        "id": 303366502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665469559
    },
    {
        "content": "<p>Which is probably not what you intended.</p>",
        "id": 303366550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665469568
    },
    {
        "content": "<p>And the lemma <code>zpow_add</code> is now a new way of saying <code>n * (x + y) = n * x + n * y</code>.</p>",
        "id": 303366587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665469596
    },
    {
        "content": "<p>By focusing on the line,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>        <span class=\"k\">have</span> <span class=\"n\">h6</span> <span class=\"o\">:=</span> <span class=\"n\">zpow_add</span> <span class=\"n\">rou</span> <span class=\"n\">x</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n</code></pre></div>\n<p>I discovered both up arrows were, as I suspected, Int.<br>\nI am interested in the possibility of a <code>zpow_add₀</code> which does not need the instance.</p>",
        "id": 303366638,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1665469641
    },
    {
        "content": "<p>Let's try: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/zpow\">docs#zpow</a>_add₀</p>",
        "id": 303366750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665469712
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/algebra/group_with_zero/power.html#zpow_add%E2%82%80\">https://leanprover-community.github.io/mathlib_docs/algebra/group_with_zero/power.html#zpow_add%E2%82%80</a></p>",
        "id": 303366790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1665469745
    },
    {
        "content": "<p>Thank you. That looks like it will solve my problem nicely.</p>",
        "id": 303366812,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1665469762
    }
]