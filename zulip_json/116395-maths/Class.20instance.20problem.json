[
    {
        "content": "<p>Can anybody tell me why this code does not work (it says it fails to synthesize instance of add_monoid M): <br>\nexample : Prop := ∀ (M : Type 0) [add_monoid M] (f : M →+ MM), true. Thanks!</p>",
        "id": 203746925,
        "sender_full_name": "Roman Fedorov",
        "timestamp": 1594662709
    },
    {
        "content": "<p>Tip: use <a href=\"https://github.com/leanprover-community/mathlib/wiki/Code-in-backticks\">#backticks</a> to format code on Zulip</p>",
        "id": 203747050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594662766
    },
    {
        "content": "<p>It's because <code>add_monoid</code> is after the colon.</p>",
        "id": 203747136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594662825
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">true</span>\n</code></pre></div>\n\n\n<p>gives no errors for me</p>",
        "id": 203747215,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594662858
    },
    {
        "content": "<p>You can write it like this:<br>\n<code>example : Prop := ∀ (M : Type 0) [add_monoid M], by exactI ∀ (f : M →+ M), true</code></p>",
        "id": 203747507,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594663012
    },
    {
        "content": "<p>More obscurely, this version also works for some reason:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">ex</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→+</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">true</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 203747727,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594663103
    },
    {
        "content": "<p>The reason the original doesn't work is there is something called the \"instance cache\" where Lean looks for instances (like <code>add_monoid M</code>), and variables introduced by ∀ and other binders don't get added to the cache automatically, only variables that appear in the arguments before the <code>:</code> like in Jalex's example.</p>",
        "id": 203748163,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594663257
    },
    {
        "content": "<p><code>exactI</code> is a tactic that's like <code>exact</code> but first causes everything in scope to get added to the instance cache.<br>\n(There are some other <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#Instance%20cache%20tactics\">related tactics</a>.)</p>",
        "id": 203748424,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594663365
    },
    {
        "content": "<p>Thanks for the answers! But is there a better way to quantify over a module (or more generally, over something inferred by class resolution)?</p>",
        "id": 203750553,
        "sender_full_name": "Roman Fedorov",
        "timestamp": 1594664289
    },
    {
        "content": "<p>what's wrong with <code>∀ (M : Type 0) [add_monoid M], by exactI ∀ (f : M →+ M), true</code> as suggested by Reid?</p>",
        "id": 203750637,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594664320
    },
    {
        "content": "<p>Well it's a bit inconvenient of course. I wonder whether the behavior will change in Lean 4.</p>",
        "id": 203753518,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594665668
    }
]