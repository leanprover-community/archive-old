[
    {
        "content": "<p>I remember there was some discussion about this a while back but I can't remember the conclusion or find the discussion. <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> were you involved? I was just showcasing the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> was algebraically closed and came unstuck:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.polynomial</span> <span class=\"c1\">-- import proof of fundamental theorem of algebra</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span> <span class=\"c1\">-- notation for polynomials</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span> <span class=\"c1\">-- so I can write `X` and not `polynomial.X`</span>\n\n<span class=\"kd\">noncomputable theory</span> <span class=\"c1\">-- we are not supplying algorithms for being able</span>\n<span class=\"c1\">-- to compute what is about to happen</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">5</span> <span class=\"bp\">+</span> <span class=\"n\">X</span> <span class=\"bp\">+</span> <span class=\"mi\">37</span> <span class=\"c1\">-- a random polynomial</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">f_has_a_root</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"n\">f.is_root</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">complex.exists_root</span><span class=\"o\">,</span> <span class=\"c1\">-- the fundamental theorem of algebra</span>\n  <span class=\"c1\">-- ⊢ 0 &lt; f.degree -- gaargh</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>A sticking plaster would be to try <code>have foo : f.eval 0 ≠ f.eval 1 := by norm_num [f],</code> as the next line and then invoke a library lemma which I couldn't find saying that if f evaluates to two different things then it can't be constant. But I would rather that <code>norm_num</code> proved that the degree was 5 (perhaps in Lean 4?)</p>",
        "id": 319935764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673088540
    },
    {
        "content": "<p>Kevin, the tactic is in <a href=\"https://github.com/leanprover-community/mathlib/pull/15691\">#15691</a>, but I was not going to push for it to get into mathlib, until I felt confident that I could also port it to Lean4.  I have been learning some Lean4 during the holidays and may have some time in the coming weeks to help with the port.</p>",
        "id": 319984033,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673110177
    },
    {
        "content": "<p>I am now at a computer.  On that branch, <a href=\"https://github.com/leanprover-community/mathlib/tree/adomani_compute_degree_take_two\">branch#adomani_compute_degree_take_two</a>, this is valid proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">f_has_a_root</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">),</span> <span class=\"n\">f.is_root</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">complex.exists_root</span><span class=\"o\">,</span> <span class=\"c1\">-- the fundamental theorem of algebra</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_lt_of_eq</span> <span class=\"o\">(</span><span class=\"n\">with_bot.coe_lt_coe.mpr</span> <span class=\"o\">(</span><span class=\"n\">ne_zero.pos</span> <span class=\"mi\">5</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>  <span class=\"c1\">-- currently, `compute_degree` wants the polynomial on the left and the degree on the right</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">f</span><span class=\"o\">,</span>  <span class=\"c1\">-- also, the tactic does not see through the definition of `f` and treats `f` as a generic polynomial</span>\n  <span class=\"n\">compute_degree</span><span class=\"o\">,</span>  <span class=\"c1\">-- now this works</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 319987388,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1673112097
    }
]