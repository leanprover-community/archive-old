[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">one_nonneg</span>\n</pre></div>\n\n\n<p>is puzzling me (as you expect,  <code>int.one_nonneg</code> does not mention <code>2</code>). I guess the kernel computes by itself, but still this is funny. This was found by <code>library_search</code>.</p>",
        "id": 161453925,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553266119
    },
    {
        "content": "<p>What you wrote is by definition <code>1 &lt; 2</code> which is by definition <code>0 &lt; 1</code>. Is that right?</p>",
        "id": 161454010,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553266199
    },
    {
        "content": "<p>It also works with <code>17</code>, or whatever you like. Even <code>0</code> (but not <code>-1</code> :)</p>",
        "id": 161454096,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553266237
    },
    {
        "content": "<p>The proof of <code>int.one_nonneg</code> mentions <code>zero_lt_one</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">17</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_one</span> <span class=\"c1\">-- works fine</span>\n</pre></div>",
        "id": 161454759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553266679
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">17</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 161454852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553266730
    },
    {
        "content": "<p>curiouser and curiouser</p>",
        "id": 161454863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553266742
    },
    {
        "content": "<p>Both sides are true by definition?</p>",
        "id": 161454888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553266757
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch, term</span>\n<span class=\"cm\">  rfl</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ?m_2 = ?m_2</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  2 + 2 = 4 = (3 + 3 = 6)</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 161455088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553266871
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">17</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_one</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 161455215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553266931
    },
    {
        "content": "<p>/me <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 161455245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1553266950
    },
    {
        "content": "<p>maybe you can just prove everything using <code>int.zero_lt_one</code></p>",
        "id": 161455247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553266952
    },
    {
        "content": "<p><code>2 + 2 = 4</code> is not true by definition. For the inequalities, the kernels can reduce them to <code>true</code>. So, when you give a proof which also reduces to <code>true</code>, it is happy.</p>",
        "id": 161455270,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553266973
    },
    {
        "content": "<p>I thought 2 + 2 = 4 was true by definition.</p>",
        "id": 161455302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553266994
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"err\">^</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_one</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 161455362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553267041
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">17</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">trivial</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 161455410,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553267047
    },
    {
        "content": "<p>I see, <code>rfl</code> is different</p>",
        "id": 161455437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553267074
    },
    {
        "content": "<p>So I can go through the library replacing all calls to <code>int.zero_lt_one</code> by <code>trivial</code>?</p>",
        "id": 161455547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553267150
    },
    {
        "content": "<p><code>rfl</code> is for equalities only, I would say. And yes, it should work.</p>",
        "id": 161455606,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553267172
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">17</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>I see.</p>",
        "id": 161455803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1553267305
    },
    {
        "content": "<p>So should I consider this example <code>example : (0:ℤ) ≤ (2:ℤ) := int.one_nonneg</code> as a bug report against <code>library_search</code>?</p>",
        "id": 161609389,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1553480999
    },
    {
        "content": "<p>Not at all, this a perfectly valid and efficient proof. Rather as a remark that <code>library_search</code> is so efficient that it can uncover beautiful unexpected proofs.</p>",
        "id": 161619085,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1553496858
    }
]