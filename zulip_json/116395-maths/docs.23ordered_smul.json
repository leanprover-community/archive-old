[
    {
        "content": "<p>What is the motivation for <code>ordered_smul</code>? It seems to me like it's quite restrictive due to the <code>∀ {a b : M} {c : R}, c • a &lt; c • b → 0 &lt; c → a &lt; b</code> axiom. </p>\n<p>And indeed structural instances (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.ordered_smul\">docs#pi.ordered_smul</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prod.ordered_smul\">docs#prod.ordered_smul</a>) are only true under strong assumptions on the scalars (namely <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_field\">docs#linear_ordered_field</a>), and the only non-structural instances that we have is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_semiring.to_ordered_smul\">docs#linear_ordered_semiring.to_ordered_smul</a> that proves <code>ordered_smul R R</code>.</p>\n<p>In particular, I was expecting to find instances for <code>ordered_smul ℕ α</code>, <code>ordered_smul ℤ α</code>, <code>ordered_smul ℚ α</code> each under reasonable assumptions for <code>α</code>. But they may still be true?</p>",
        "id": 294406849,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660983143
    },
    {
        "content": "<p>Ages ago I thought I wanted <code>ordered_smul ℕ R</code> for something or other. I have some horrible code that I wrote before I realised I didn't need it after all which shows that <code>linear_ordered_cancel_add_comm_monoid</code> suffices:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.order.smul</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_cancel_add_comm_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hab</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">•</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m.succ</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m.succ</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat.succ_pred_eq_of_pos</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_nsmul</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">succ_nsmul</span> <span class=\"n\">_</span> <span class=\"n\">m.succ</span><span class=\"o\">,</span> <span class=\"n\">add_lt_add</span> <span class=\"n\">hab</span> <span class=\"n\">ih</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ordered_nsmul</span> <span class=\"o\">:</span> <span class=\"n\">ordered_smul</span> <span class=\"n\">ℕ</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_lt_smul_of_pos</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"n\">hab</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">m.succ</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m.succ</span> <span class=\"bp\">•</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat.succ_pred_eq_of_pos</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">intros</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n    <span class=\"n\">induction</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">one_nsmul</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">succ_nsmul</span> <span class=\"n\">_</span> <span class=\"n\">m.succ</span><span class=\"o\">,</span> <span class=\"n\">add_lt_add</span> <span class=\"n\">hab</span> <span class=\"n\">ih</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">lt_of_smul_lt_smul_of_pos</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"n\">hab</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"c1\">-- TODO Generalise this approach: should have `ordered_smul` constructor with single proof</span>\n    <span class=\"c1\">-- obligation for any linearly-ordered scalars?</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"n\">rfl</span> <span class=\"bp\">|</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">assumption</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">lt_self_iff_false</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">contradiction</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hab.trans</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">b</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"n\">h</span> <span class=\"n\">hn</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 294434528,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660998233
    },
    {
        "content": "<p>Isn't your TODO <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_smul.mk'\">docs#ordered_smul.mk'</a>? Or do you want something intermediate?</p>",
        "id": 294435036,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660998531
    },
    {
        "content": "<p>Oh, it looks like it is. That snippet is from months ago, I barely remember writing it. Oh except I note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_smul.mk'\">docs#ordered_smul.mk'</a> demands a field.</p>",
        "id": 294436334,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660999249
    },
    {
        "content": "<p>I just wanted to demonstrate that <code>linear_ordered_cancel_add_comm_monoid</code> was sufficient.</p>",
        "id": 294436393,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1660999274
    },
    {
        "content": "<p>It really looks like <code>ordered_smul</code>, as currently designed, is only useful over linear orders.</p>",
        "id": 294438224,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661000353
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/16247\">#16247</a></p>",
        "id": 295179995,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661414859
    }
]