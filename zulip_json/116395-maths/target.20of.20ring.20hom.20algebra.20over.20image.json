[
    {
        "content": "<p>If I have a commutative unital ring homomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">f: A \\to B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, then does mathlib know that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>A</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(A)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mclose\">)</span></span></span></span>-algebra? What would be the best way to access this instance of being an algebra?</p>",
        "id": 275017440,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1647024928
    },
    {
        "content": "<p>Or do I just have to construct it</p>",
        "id": 275017483,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1647024946
    },
    {
        "content": "<p>What do you mean by <code>f(A)</code>? There is a type v term issue here. The image of <code>f</code> has type <code>subring B</code> so in particular it's a term. However <code>algebra X B</code> needs <code>X</code> to be a type. Do you really need to consider this image? Would you be happy with the idea that B is an A-algebra? That is much easier.</p>",
        "id": 275023296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647027401
    },
    {
        "content": "<p>If you insist:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→+*</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"n\">f.range</span><span class=\"o\">)</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"n\">algebra.of_subring</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 275023601,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647027536
    },
    {
        "content": "<p>(found using <code>library_search</code> BTW)</p>",
        "id": 275023772,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647027605
    },
    {
        "content": "<p>Doesn't <code>apply_instance</code> find it?</p>",
        "id": 275037428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647034952
    },
    {
        "content": "<p>Thanks! I think I am actually happy for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> to be an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> algebra in the end.</p>",
        "id": 275069679,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1647049198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"235423\">Ashwin Iyengar</span> has marked this topic as unresolved.</p>",
        "id": 275072064,
        "sender_full_name": "Notification Bot",
        "timestamp": 1647052732
    },
    {
        "content": "<p>I guess I want to say \"a field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span></span></span> of characteristic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>F</mi><mo>:</mo><msup><mi>F</mi><mi>p</mi></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[F:F^p]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> is finite\". So I want to write something like <code>finite_dimensional (frobenius F p).range F</code>, but this doesn't work because, among other reasons, <code>(frobenius F p).range</code> is a term rather than a type. So instead I want to say something like <code>finite_dimensional F F</code> but I want to view the second <code>F</code> as a module over <code>F</code> via frobenius rather than the canonical module structure. I've been searching the docs but can't figure out how to do this in a clean way. Any help would be appreciated.</p>",
        "id": 275074445,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1647056490
    },
    {
        "content": "<p>I would introduce a type alias for the second <code>F</code> (the target of the Frobenius map), and consider it as an <code>F</code> algebra w.r.t. Frob.</p>",
        "id": 275074573,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647056666
    },
    {
        "content": "<p>In any case, you can still use the range and write <code>finite_dimensional Frob.range F</code> or something like this. I don't know how Frobenius is denoted in mathlib.</p>",
        "id": 275074661,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647056823
    },
    {
        "content": "<p>Oh, I guess it should be <code>finite_dimensional (frobenius F p).range F</code>. I'm surprised that doesn't work...</p>",
        "id": 275074726,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647056903
    },
    {
        "content": "<p>Aha! The issue is not that it's a term as opposed to a type (because there is a coercion to sort), but rather that mathlib doesn't know that the image will be a division ring, which is required for <code>finite_dimensional</code>.</p>",
        "id": 275074927,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647057264
    },
    {
        "content": "<p>Okay, that's indeed the issue:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">char_p</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">div</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">div_eq_mul_inv</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zpow</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zpow_zero'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zpow_succ'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">zpow_neg'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">exists_pair_ne</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_zero</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">finite_dimensional</span> <span class=\"o\">(</span><span class=\"n\">frobenius</span> <span class=\"n\">F</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">F</span>\n</code></pre></div>",
        "id": 275075082,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647057503
    },
    {
        "content": "<p>Ah ok! That's interesting, thanks</p>",
        "id": 275075225,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1647057661
    },
    {
        "content": "<p>the mathlib docs suggest you can make an aliases of a def or theorem, but how do you alias a type?</p>",
        "id": 275075411,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1647057871
    },
    {
        "content": "<p>It can be as easy as <code>def K := F</code>.</p>",
        "id": 275075561,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647058156
    },
    {
        "content": "<p>But the issue of considering F as an algebra over itself with respect to Frobenius is important enough that we should give some thought about how to do this properly so that it's easy to work with. Unfortunately, I won't be able to help with this tonight.</p>",
        "id": 275075619,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647058285
    },
    {
        "content": "<p>Ah okay. Maybe it's worth making an instance of <code>field</code> for the image whenever you have a nontrivial homomorphism from a field?</p>",
        "id": 275081018,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1647067141
    },
    {
        "content": "<p>I think the right generality is \"homomorphism from a field into a nontrivial ring\" and yes I think the type class inference system should be able to handle this.</p>",
        "id": 275086659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647076302
    },
    {
        "content": "<p>There's possibly a trap here when that nontrivial ring is already a field</p>",
        "id": 275088554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647079361
    },
    {
        "content": "<p>Which might end up creating an equal but not defeq diamond in <code>has_inv</code></p>",
        "id": 275088575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647079390
    },
    {
        "content": "<p>but the <code>range</code> will be a <code>subring</code>, right?</p>",
        "id": 275089779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647081359
    },
    {
        "content": "<p>Picking up on what Eric says, non-trivial field automorphisms seem worrying.  For instance, there was a recent thread precisely about the image of Frobenius.  If the field is perfect (and not the prime field), wouldn't this create issues?</p>",
        "id": 275094825,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647088971
    },
    {
        "content": "<p>I am not sure what the concern is here; <code>↥(frobenius F p).range</code> will never be definitionally equal to <code>F</code>.</p>",
        "id": 275095078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647089376
    },
    {
        "content": "<p>Ok, I think that I understand, thanks!</p>\n<p>I was worried about potentially creating loops, where the image of a field is a field recursively.  But, if I understand correctly, this creates more and more complicated types.</p>",
        "id": 275095338,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647089758
    },
    {
        "content": "<p>Yeah, subrings are more complex than rings in Lean! Just like the quotient <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mi mathvariant=\"normal\">/</mi><mo>∼</mo></mrow><annotation encoding=\"application/x-tex\">X/\\sim</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∼</span></span></span></span> is more complicated than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> so they write it above it and we get <code>quotient.lift</code> :-)</p>",
        "id": 275095652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647090020
    },
    {
        "content": "<p>Yes, I find this very confusing, even though I understand the motivation.  Even knowing this, I still get it wrong!</p>",
        "id": 275096202,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1647090507
    },
    {
        "content": "<p>When I do <code>obtain</code> below it suddenly changes the goal state so that the code below doesn't compile. I'm a little confused as to why not.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">f.range</span> <span class=\"o\">:=</span>\n<span class=\"n\">field_of_is_unit_or_eq_zero</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">function.injective.exists_unique_of_mem_range</span> <span class=\"n\">f.injective</span> <span class=\"n\">a.prop</span><span class=\"o\">,</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">lift</span><span class=\"o\">,</span> <span class=\"n\">prop</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">lift</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">a_unit</span> <span class=\"o\">:=</span> <span class=\"n\">ring_hom.is_unit_map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">is_unit.mk0</span> <span class=\"n\">lift</span> <span class=\"n\">l</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"n\">prop.1</span> <span class=\"n\">at</span> <span class=\"n\">a_unit</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">a_unit</span>\n    <span class=\"o\">}</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275104619,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1647101807
    },
    {
        "content": "<p>Okay nevermind, this apparently had something to do with the fact that I used <code>y</code>, this almost works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.algebra.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→+*</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">f.range</span> <span class=\"o\">:=</span>\n<span class=\"n\">field_of_is_unit_or_eq_zero</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">lift</span><span class=\"o\">,</span> <span class=\"n\">prop</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">function.injective.exists_unique_of_mem_range</span> <span class=\"n\">f.injective</span> <span class=\"n\">a.prop</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">lift</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">a_unit</span> <span class=\"o\">:=</span> <span class=\"n\">ring_hom.is_unit_map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">is_unit.mk0</span> <span class=\"n\">lift</span> <span class=\"n\">l</span><span class=\"o\">),</span>\n      <span class=\"n\">rw</span> <span class=\"n\">prop.1</span> <span class=\"n\">at</span> <span class=\"n\">a_unit</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">a_unit</span>\n    <span class=\"o\">}</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">)</span>\n</code></pre></div>",
        "id": 275105111,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1647102499
    },
    {
        "content": "<p>I suspect the culprit was <code>let</code>.</p>",
        "id": 275105307,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647102738
    },
    {
        "content": "<p>This should be true for division rings as well, right?</p>",
        "id": 275105347,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1647102802
    },
    {
        "content": "<p>The one thing you have to pay attention to diamond-wise is to never define <code>field (subtype p)</code>, because it would match yours.</p>",
        "id": 275105415,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647102873
    },
    {
        "content": "<p>Yaël <a href=\"#narrow/stream/116395-maths/topic/target.20of.20ring.20hom.20algebra.20over.20image/near/275105307\">said</a>:</p>\n<blockquote>\n<p>I suspect the culprit was <code>let</code>.</p>\n</blockquote>\n<p>What he means is \"use <code>let</code> when defining data, but use <code>have</code> when defining proofs\". So for example your <code>let l : lift ≠ 0 := sorry,</code> should be <code>have l :  lift ≠ 0 := sorry,</code>.</p>",
        "id": 275107345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647105556
    },
    {
        "content": "<blockquote>\n<p>this almost works</p>\n</blockquote>\n<p>Your problem is that you haven't quite proved enough. You have <code>a</code> in the range and you know <code>↑a</code>, its image in <code>R</code>, is a unit, but that's not enough to deduce that <code>a</code> is a unit because you don't know the inverse is also in the range.</p>",
        "id": 275107738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647106109
    },
    {
        "content": "<p>I think a case split on the preimage of a in F is easier.</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">f.range</span> <span class=\"o\">:=</span>\n<span class=\"n\">field_of_is_unit_or_eq_zero</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">is_unit.map</span> <span class=\"n\">f.range_restrict</span> <span class=\"o\">(</span><span class=\"n\">is_unit.mk0</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n  <span class=\"kd\">end</span>\n<span class=\"o\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 275108038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647106610
    },
    {
        "content": "<p>Ohh thank you, I didn't know about range_restrict</p>",
        "id": 275463641,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1647401445
    },
    {
        "content": "<p>Neither did I until I went looking for it because of your question :-)</p>",
        "id": 275475773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647416700
    }
]