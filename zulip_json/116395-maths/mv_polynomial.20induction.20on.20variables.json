[
    {
        "content": "<p>There are a few proofs in <code>ring_theory.polynomial.basic</code> that follow the same general path through several lemmas</p>",
        "id": 216504030,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605203766
    },
    {
        "content": "<p>Proving that a property is invariant under ring isos, and then proving that <code>P R -&gt; P (polynomial R)</code></p>",
        "id": 216504118,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605203810
    },
    {
        "content": "<p>and then concluding that <code>P R → P (mv_polynomial σ R)</code> given <code>fintype σ</code>.</p>",
        "id": 216504242,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605203864
    },
    {
        "content": "<p>Is there a way that we can generalize this into a single lemma, to use on the remaining properties of that sort?</p>",
        "id": 216504346,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605203900
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> Good question, I've also been thinking about this (but not for very long). We would want some sort of <code>mv_polynomial.induction_on_vars</code> or something like that. I haven't tried actually implementing it.</p>",
        "id": 216573282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605250242
    },
    {
        "content": "<p>I also thought about this once but never tried, I just had a go and ended up with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">aa</span> <span class=\"o\">{</span><span class=\"n\">R0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R0</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">resetI</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">S</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">S</span> <span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">],</span> <span class=\"bp\">@</span><span class=\"n\">P</span> <span class=\"n\">R</span> <span class=\"n\">h</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">resetI</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hR0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">R0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">ring_equiv_of_equiv</span> <span class=\"n\">R0</span> <span class=\"o\">(</span><span class=\"n\">fintype.equiv_fin</span> <span class=\"n\">σ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"o\">),</span>\n  <span class=\"n\">induction</span> <span class=\"n\">fintype.card</span> <span class=\"n\">σ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">ring_equiv_of_equiv</span> <span class=\"n\">R0</span> <span class=\"n\">fin_zero_equiv'</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">pempty_ring_equiv</span> <span class=\"n\">R0</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hR0</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.fin_succ_equiv</span> <span class=\"n\">R0</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216578257,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605255131
    },
    {
        "content": "<p>yeah its kinda janky with the universe levels and typeclasses lol but it semi works</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">is_noetherian_ring'</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_noetherian_ring</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">aa</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">resetI</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_noetherian_ring</span> <span class=\"n\">R_1</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">σ</span><span class=\"o\">,</span>\n  <span class=\"n\">swap</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">_</span>  <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span> <span class=\"n\">hh</span><span class=\"o\">,</span> <span class=\"n\">resetI</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">is_noetherian_ring_of_ring_equiv</span> <span class=\"n\">_</span> <span class=\"n\">f.symm</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">resetI</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">polynomial.is_noetherian_ring</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216579472,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605256114
    },
    {
        "content": "<p>It gets a bit nicer if I leave R0 and sigma explicit</p>",
        "id": 216579839,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605256337
    },
    {
        "content": "<p>These <code>by resetI; exact S ≃+* R → P R → P S</code> really don't look nice. We should at least encapsulate them into some definition.</p>",
        "id": 216596718,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1605265883
    },
    {
        "content": "<p>is <code>by resetI; exact</code> the same as <code>by exactI</code>?</p>",
        "id": 216608329,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605273461
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> version of <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>'s lemma (complete with <code>exactI</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aa</span> <span class=\"o\">{</span><span class=\"n\">R0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R0</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">S</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">P</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hR0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">R0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">ring_equiv_of_equiv</span> <span class=\"n\">R0</span> <span class=\"o\">(</span><span class=\"n\">fintype.equiv_fin</span> <span class=\"n\">σ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"o\">),</span>\n  <span class=\"n\">induction</span> <span class=\"n\">fintype.card</span> <span class=\"n\">σ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">ring_equiv_of_equiv</span> <span class=\"n\">R0</span> <span class=\"n\">fin_zero_equiv'</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">pempty_ring_equiv</span> <span class=\"n\">R0</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hR0</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.fin_succ_equiv</span> <span class=\"n\">R0</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216614754,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605276367
    },
    {
        "content": "<p>I think we should refactor some of the proofs in mathlib to use this lemma.</p>",
        "id": 216627023,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605281572
    },
    {
        "content": "<p>It seems to me that the input hypotheses to the lemma are overly general</p>",
        "id": 216628013,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605281988
    },
    {
        "content": "<p>Using <code>(hp : ∀ {R S} [comm_ring R], by exactI mv_polynomial S R0 ≃+* R → P R → P (mv_polynomial S R0))</code> is a little more constrained (replacing <code>S</code> with <code>mv_polynomial S R0</code>)</p>",
        "id": 216628506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605282181
    },
    {
        "content": "<p>True, but I can't think of an application where this difference matters.</p>",
        "id": 216629089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605282405
    },
    {
        "content": "<p>We want to apply it to <code>P</code> that are isom-invariant. And proving the isom-invariance is usually \"trivial\".</p>",
        "id": 216629164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605282432
    },
    {
        "content": "<p>FWIW, this should be able to refactor the proofs for <code>is_integral_domain</code>, <code>is_noetherian_ring</code>, and <code>is_jacobson</code>, and then quickly provide proofs for <code>unique_factorization_monoid</code>, and given a version with data, <code>gcd_monoid</code>.</p>",
        "id": 216643800,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605288279
    },
    {
        "content": "<p>I don't think the version with data will be very simple or necessarily similar...</p>",
        "id": 216644154,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1605288429
    },
    {
        "content": "<p>There are some highly nonconstructive steps in this induction method.</p>",
        "id": 216649243,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605290698
    },
    {
        "content": "<p>But if there were a <code>gcd_monoid.copy</code>, then we could at least use this method to get all the proofs. Might still be useful.</p>",
        "id": 216649283,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605290727
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/mv_polynomial.20induction.20on.20variables/near/216614754\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> version of <span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span>'s lemma (complete with <code>exactI</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial.equiv</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.mv_polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aa</span> <span class=\"o\">{</span><span class=\"n\">R0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R0</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">S</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">P</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hR0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">R0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">ring_equiv_of_equiv</span> <span class=\"n\">R0</span> <span class=\"o\">(</span><span class=\"n\">fintype.equiv_fin</span> <span class=\"n\">σ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"o\">),</span>\n  <span class=\"n\">induction</span> <span class=\"n\">fintype.card</span> <span class=\"n\">σ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">ring_equiv_of_equiv</span> <span class=\"n\">R0</span> <span class=\"n\">fin_zero_equiv'</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">pempty_ring_equiv</span> <span class=\"n\">R0</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hR0</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.fin_succ_equiv</span> <span class=\"n\">R0</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n</blockquote>\n<p>Is there any way to make this work for different universes?</p>",
        "id": 217534604,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606020847
    },
    {
        "content": "<p>why would you want to?</p>",
        "id": 217535108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606021831
    },
    {
        "content": "<p>all the hypotheses can be in the same universe as the inputs</p>",
        "id": 217535114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606021855
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">aa</span> <span class=\"o\">{</span><span class=\"n\">R0</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">σ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R0</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">],</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">S</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">S</span> <span class=\"bp\">≃+*</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">exactI</span> <span class=\"n\">P</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hR0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">R0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hq</span> <span class=\"o\">(</span><span class=\"n\">ring_equiv_of_equiv</span> <span class=\"n\">R0</span> <span class=\"o\">(</span><span class=\"n\">fintype.equiv_fin</span> <span class=\"n\">σ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">out</span><span class=\"o\">),</span>\n  <span class=\"n\">induction</span> <span class=\"n\">fintype.card</span> <span class=\"n\">σ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hp</span> <span class=\"o\">((</span><span class=\"n\">ring_equiv_of_equiv</span> <span class=\"n\">R0</span> <span class=\"n\">fin_zero_equiv'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">pempty_ring_equiv</span> <span class=\"n\">R0</span><span class=\"o\">)),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hR0</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hp</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.fin_succ_equiv</span> <span class=\"n\">R0</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217535919,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606023512
    }
]