[
    {
        "content": "<p>I am about to start pouring <a href=\"https://github.com/leanprover-community/mathlib/tree/sperner-again\">branch#sperner-again</a> into mathlib and wanted your opinion on two things:</p>\n<ol>\n<li>Does this definition look right to you? It definitely does to me, but I've worked on it day and night for a month so my eye is far from fresh.</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.convex.hull</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.affine_space.independent</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"sd\">/-- A simplicial complex in a `𝕜`-module. -/</span>\n<span class=\"kd\">@[ext]</span> <span class=\"kd\">structure</span> <span class=\"n\">simplicial_complex</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">faces</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">indep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">faces</span> <span class=\"bp\">→</span> <span class=\"n\">affine_independent</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">down_closed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">},</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">faces</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">⊆</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">∈</span> <span class=\"n\">faces</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">},</span> <span class=\"n\">X</span> <span class=\"bp\">∈</span> <span class=\"n\">faces</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">∈</span> <span class=\"n\">faces</span> <span class=\"bp\">→</span>\n  <span class=\"n\">convex_hull</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">↑</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">convex_hull</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">↑</span><span class=\"n\">Y</span> <span class=\"bp\">⊆</span> <span class=\"n\">convex_hull</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">∩</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>Where should it live? Instinctively, I'd say <code>analysis.convex.</code> (yeah, I took permanent residence here), but <code>linear_algebra.affine_space.</code> is also a candidate.</li>\n</ol>",
        "id": 256648881,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633640435
    },
    {
        "content": "<p>Have you considered formalizing \"abstract simplicial complexes\" in the sense of <br>\n<a href=\"https://en.wikipedia.org/wiki/Simplicial_complex\">https://en.wikipedia.org/wiki/Simplicial_complex</a> ?</p>",
        "id": 256649781,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633640765
    },
    {
        "content": "<p>(Adam, you mean <a href=\"https://en.wikipedia.org/wiki/Abstract_simplicial_complex\">https://en.wikipedia.org/wiki/Abstract_simplicial_complex</a> ?)</p>",
        "id": 256649887,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1633640814
    },
    {
        "content": "<p>Yes!</p>",
        "id": 256650130,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633640902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>, what did you have in mind? Here's my abortive guess:</p>\n<ol>\n<li>define SimplicialComplex (just as a Type bundled with a set of finsets in that Type, satisfying some axioms)</li>\n<li>define maps of abstract simplicial complexes (and optionally define the category of abstract simplicial complexes)</li>\n<li>then for any affine space <code>E</code> there is a <code>SimplicialComplex</code> consisting of the <code>affine_independent</code> finite sets in <code>E</code></li>\n<li>a map from some <code>SimplicialComplex</code> to the simplicial complex from (3) is then the same as <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>'s definition, but without the <code>disjoint</code> axiom.</li>\n<li><em>but I don't see how to set up the <code>disjoint</code> axiom without explicitly saying it!</em></li>\n</ol>",
        "id": 256660273,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633646002
    },
    {
        "content": "<p>TBH my thoughts about this are not completely organized.</p>\n<p>I do think we shouuld have 1 and 2 (i.e. abstract simplicial complexes and morphisms and/or a category structure).</p>\n<p>We could then think about defining something like a geometric realization constructed out of simplices in affine space (or any context where one can speak about convex combinations). I don't immediately see how to do this... maybe as some formal colimit or something?</p>\n<p>And finally, we can consider embeddings of such geometric realizations into affine spaces, which should yield the above.</p>\n<p>But as I said, I would have to digest this for a little longer...</p>",
        "id": 256661348,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633646700
    },
    {
        "content": "<p>Ah, yes, this is good. Scrap my point 3, and just ask for the pair (an-abstract-simplicial-complex, an-embedding-of-its-realization-into-E).</p>",
        "id": 256661709,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633646921
    },
    {
        "content": "<p>But I think that we shouldn't ask <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> to take this detour. This can be an equivalence proved after the fact once someone does abstract simplicial complexes.</p>",
        "id": 256661787,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633646977
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>, what is the state of affine spaces in mathlib now? Can you make this definition in an affine space rather than a module yet?</p>",
        "id": 256661856,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633647004
    },
    {
        "content": "<p>For now, it should be easy enough to define abstract simplicial complexes and have the definition above extend it, right?</p>",
        "id": 256661876,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633647015
    },
    {
        "content": "<p>Yes, <em>except</em> that in an abstract simplicial complex you probably want to say that <em>all</em> singletons are faces, so you don't have an \"ambient\" type sitting around, being ignored by the morphisms.</p>",
        "id": 256661980,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633647094
    },
    {
        "content": "<p>(The wikipedia and nlab pages diverge on their treatment of this point.)</p>",
        "id": 256662010,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633647110
    },
    {
        "content": "<p>right, good point</p>",
        "id": 256662068,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633647124
    },
    {
        "content": "<p>I have currently no use for abstract simplicial complexes. So my plan was to just ignore them hoping they would insert nicely later.</p>",
        "id": 256692201,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633672368
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Simplicial.20complex/near/256661980\">said</a>:</p>\n<blockquote>\n<p>Yes, <em>except</em> that in an abstract simplicial complex you probably want to say that <em>all</em> singletons are faces, so you don't have an \"ambient\" type sitting around, being ignored by the morphisms.</p>\n</blockquote>\n<p>I agree on that precise point. It seems that we must separate the geometric embedding from the actual structure (which is just a downward-closed set of finsets). But then I don't know how to define a geometric embedding without... defining simplicial complexes.</p>",
        "id": 256692326,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633672483
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Simplicial.20complex/near/256661856\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span>, what is the state of affine spaces in mathlib now? Can you make this definition in an affine space rather than a module yet?</p>\n</blockquote>\n<p>No we can't.... I had to decide between generalizing to semimodules and generalizing to affine spaces, and I chose the forme (blame Yakov for wanting convexity over <code>ℝ≥0</code> <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span>). Now we're stuck away from affine spaces until we define convex spaces. And, as Yury pointed out, we'll have a nondefeq diamond when going from vector spaces to convex spaces (either through semimodules or through affine spaces).</p>",
        "id": 256692765,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633672825
    },
    {
        "content": "<p>Really, this is a whole second convexity refactor, that I foresee as being even more disruptive as the first one.</p>",
        "id": 256692821,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633672870
    },
    {
        "content": "<blockquote>\n<p>No we can't.... I had to decide between generalizing to semimodules and generalizing to affine spaces, and I chose the forme (blame Yakov for wanting convexity over <code>ℝ≥0</code> <span aria-label=\"stuck out tongue closed eyes\" class=\"emoji emoji-1f61d\" role=\"img\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span>). </p>\n</blockquote>\n<p>This is really insane. Mathematically it makes no sense at all.</p>",
        "id": 256698625,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633677457
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> is there an easy way to explain the motivation for having convexity over a semiring?</p>",
        "id": 256705666,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633681737
    },
    {
        "content": "<p>Do you mean to ask about convexity without an underlying negation, or lack of commutativity?</p>",
        "id": 256712065,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633685131
    },
    {
        "content": "<p>I meant without negation, but the only context here I have is <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> remark so it's possible I'm asking the wrong question.</p>",
        "id": 256712261,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633685243
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/hTquGXf7dRrtym1NCHok6hwU/Screenshot_20211008-052524_Drive.jpg\">Screenshot_20211008-052524_Drive.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/hTquGXf7dRrtym1NCHok6hwU/Screenshot_20211008-052524_Drive.jpg\" title=\"Screenshot_20211008-052524_Drive.jpg\"><img src=\"/user_uploads/3121/hTquGXf7dRrtym1NCHok6hwU/Screenshot_20211008-052524_Drive.jpg\"></a></div>",
        "id": 256712385,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633685312
    },
    {
        "content": "<p>IIUC, it sounds like you have a situation where convexity over <code>ℝ</code> was too restrictive and Yael has solved this for you. I'm wondering what that situation was because our affine space library requires negation so we have a blocker to stating convexity in that language.</p>",
        "id": 256712399,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633685323
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/LCoPuy9pgGGpFE4FOacYLrnU/Screenshot_20211008-052524_Drive.jpg\">Screenshot_20211008-052524_Drive.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/LCoPuy9pgGGpFE4FOacYLrnU/Screenshot_20211008-052524_Drive.jpg\" title=\"Screenshot_20211008-052524_Drive.jpg\"><img src=\"/user_uploads/3121/LCoPuy9pgGGpFE4FOacYLrnU/Screenshot_20211008-052524_Drive.jpg\"></a></div>",
        "id": 256712481,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633685384
    },
    {
        "content": "<p>I'm having issues sending the screenshot (on a plane <span aria-label=\"small airplane\" class=\"emoji emoji-1f6e9\" role=\"img\" title=\"small airplane\">:small_airplane:</span>️) so I don't know if it went through</p>",
        "id": 256712568,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633685412
    },
    {
        "content": "<p>I can't quite tell. What are the scalars in this <span aria-label=\"wait one second\" class=\"emoji emoji-261d\" role=\"img\" title=\"wait one second\">:wait_one_second:</span>️?</p>",
        "id": 256712574,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633685413
    },
    {
        "content": "<p>(arrived twice but I think if you're on a plane then this can wait <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span>)</p>",
        "id": 256712643,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633685454
    },
    {
        "content": "<p>T here is the tropical semiring, which in the paper is defined as over with_top real. But I don't think there is anything in the definition or theorem to preclude with_top nnreal from working (or nnrat or nat). This is for optimization theory, mixed integer programming, etc.</p>",
        "id": 256712735,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633685518
    },
    {
        "content": "<p>There is a definite cost to generalising to the case where we don't have negation. Is there a definite benefit?</p>",
        "id": 256712942,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633685632
    },
    {
        "content": "<p>Wait, nat scalars! I'm pretty sure <code>a + b = 1</code> over nat doesn't have many solutions!</p>",
        "id": 256713010,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633685654
    },
    {
        "content": "<p>(incidentally I love that Mathlib is getting some optimization theory, integer programming)</p>",
        "id": 256713078,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633685697
    },
    {
        "content": "<p>If you want to say, okay, convex is solely on rings, I understand and won't push back. Of course one can state concavity without concave_on</p>",
        "id": 256713156,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633685749
    },
    {
        "content": "<p>I mean, concavity as the theorem above uses it, and \"state\" as solely in the context of the file that proves that theorem</p>",
        "id": 256713281,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633685799
    },
    {
        "content": "<p>If the consensus is that getting rid of negation isn't the mathematical highway, we can make <code>affine_space</code> -&gt; <code>convex_space</code> the instance and <code>semimodule</code> -&gt; <code>convex_space</code> the def</p>",
        "id": 256713329,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633685837
    },
    {
        "content": "<p>but I don't think we should push back the convexity refactor. I did a lot of work to eliminate negation where I could.</p>",
        "id": 256713389,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633685873
    },
    {
        "content": "<p>I'm not pushing in any direction for now. I just want to understand the various costs, benefits, motivations etc. I only ever think about convexity over the reals so I don't have good perspective yet.</p>",
        "id": 256713548,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633685966
    },
    {
        "content": "<p>I apologize for my misguided desire for generality, misplaced over pragmatic usage and results</p>",
        "id": 256714124,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1633686278
    },
    {
        "content": "<p>In my perspective, the cost of generalizing convexity to semimodules as it is is low as it is a matter of typeclasses (except for <code>finset.center_mass</code> that really needs some relooking). The cost of generalizing to affine spaces would have been higher, as it requires redefining the objects. The cost of generalizing to affine spaces now is still quite high, but I'd argue that this time it's splitable. First part is to define convex spaces and give their instances/defs given affine spaces/semimodules. Second part is generalizing the lemmas, which arguably will be quite hard but not harder than what generalizing to affine spaces would have been in the first place.</p>",
        "id": 256714404,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633686437
    },
    {
        "content": "<p>(we should move to Convexity refactor)</p>",
        "id": 256714512,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633686486
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/116395-maths/topic/Simplicial.20complex/near/256714124\">said</a>:</p>\n<blockquote>\n<p>I apologize for my misguided desire for generality, misplaced over pragmatic usage and results</p>\n</blockquote>\n<p>Please don't apologize, and I certainly don't think it's fair to characterise any of your excellent work as misguided! I sincerely hope my inquiries here do not come across as critical, I'm really just trying to learn about motivations.</p>",
        "id": 256714563,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633686517
    },
    {
        "content": "<p>One big question, should I use <code>simplex</code>?</p>",
        "id": 256747054,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633702913
    },
    {
        "content": "<p>because currently I model simplices using finite independent sets, without ever mentioning <code>simplex</code>.</p>",
        "id": 256747326,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633703025
    },
    {
        "content": "<p>This notion is definitely important and useful separately from (or alongside) the notion of an abstract simplicial complex. To avoid ambiguity, it can also be called a geometric simplicial complex.<br>\n<span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Simplicial.20complex/near/256648881\">said</a>:</p>\n<blockquote>\n<p>I am about to start pouring <a href=\"https://github.com/leanprover-community/mathlib/tree/sperner-again\">branch#sperner-again</a> into mathlib and wanted your opinion on two things:</p>\n<ol>\n<li>Does this definition look right to you? It definitely does to me, but I've worked on it day and night for a month so my eye is far from fresh.</li>\n</ol>\n</blockquote>\n<p>There should be a condition that each <code>X ∈ faces</code> is nonempty, and <code>down_closed</code> needs a corresponding change also (<code>Y</code> should be assumed to be nonempty).</p>\n<p>Usually one wants to assume either that the simplicial complex is finite or that it is at least locally finite--I'm not sure whether \"locally finite\" is meaningful in this level of generality. I guess these conditions can be added on separately.</p>\n<blockquote>\n<ol start=\"2\">\n<li>Where should it live? Instinctively, I'd say <code>analysis.convex.</code> (yeah, I took permanent residence here), but <code>linear_algebra.affine_space.</code> is also a candidate.</li>\n</ol>\n</blockquote>\n<p>I don't see any analysis here. How about <code>geometry.convex</code>?</p>",
        "id": 256764166,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633709756
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Simplicial.20complex/near/256747054\">said</a>:</p>\n<blockquote>\n<p>One big question, should I use <code>simplex</code>?</p>\n</blockquote>\n<p>It looks like <code>simplex</code> is ordered, so it doesn't really fit well, I think.</p>",
        "id": 256764279,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633709795
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Simplicial.20complex/near/256764166\">said</a>:</p>\n<blockquote>\n<p>There should be a condition that each <code>X ∈ faces</code> is nonempty, and <code>down_closed</code> needs a corresponding change also (<code>Y</code> should be assumed to be nonempty).</p>\n</blockquote>\n<p>What's your incentive? We found it to be quite convenient to allow the empty face.</p>",
        "id": 256765731,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633710390
    },
    {
        "content": "<p>This does look like Bourbaki forbiding <code>univ</code> to be a filter.</p>",
        "id": 256766817,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633710783
    },
    {
        "content": "<p>Well a simplicial complex is a set of simplices, and the empty set is not a simplex (e.g. it's not contractible). If you allow then you should say you have something like an \"augmented simplicial complex\". What's your motivation for allowing it?</p>",
        "id": 256769127,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633711717
    },
    {
        "content": "<p>Another option would be to <em>require</em> the empty set to belong to <code>faces</code>--that's decidedly nonstandard but in a way that doesn't make any real difference, because we could always throw it out and get a simplicial complex in the usual sense.</p>",
        "id": 256770405,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633712286
    },
    {
        "content": "<p>I think arguably the \"correct\" thing to do is perhaps to work with simplicial complexes modulo whether or not they contain the empty set, but in practice everyone implements this by forbidding it (because it isn't a simplex).</p>",
        "id": 256772573,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633713091
    },
    {
        "content": "<p>If you don't have any condition relating to the empty set then you have two simplicial complexes that both \"look empty\", one which is genuinely empty and one which contains the empty set as a face. That's the whole difference we are talking about here</p>",
        "id": 256772806,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633713176
    },
    {
        "content": "<p>Allowing this corner case just seems to let all the proofs flow more easily. For example, I can define the \"closure\" of set of faces by doing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- A constructor for simplicial complexes by specifying a set of faces to close downward. -/</span>\n<span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span> <span class=\"n\">simplicial_complex.of_faces</span> <span class=\"o\">(</span><span class=\"n\">faces</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">indep</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">},</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">faces</span> <span class=\"bp\">→</span> <span class=\"n\">affine_independent</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">},</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">faces</span> <span class=\"bp\">→</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">faces</span> <span class=\"bp\">→</span>\n    <span class=\"n\">convex_hull</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">convex_hull</span> <span class=\"bp\">𝕜</span> <span class=\"bp\">↑</span><span class=\"n\">t</span> <span class=\"bp\">⊆</span> <span class=\"n\">convex_hull</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">simplicial_complex</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">faces</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">faces</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">},</span>\n  <span class=\"n\">indep</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">hst</span><span class=\"o\">⟩,</span> <span class=\"o\">(</span><span class=\"n\">indep</span> <span class=\"n\">ht</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"n\">hst</span><span class=\"o\">,</span>\n  <span class=\"n\">down_closed</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">hsu</span><span class=\"o\">⟩</span> <span class=\"n\">hts</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">hts.trans</span> <span class=\"n\">hsu</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">disjoint</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 256782930,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633717206
    },
    {
        "content": "<p>Well you just also require that <code>s</code> is nonempty, right? The proof gets a bit longer because the definition is a bit longer. Your argument would suggest that also in ordinary mathematics we should remove the nonempty condition, yet nobody actually does this.</p>",
        "id": 256785359,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633718153
    },
    {
        "content": "<p>I think we need a really good reason to diverge from the standard meanings of words, and while I'm open to the idea that there could be one here, I don't know of any</p>",
        "id": 256785669,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633718278
    },
    {
        "content": "<p>Is there any statement you can think of that requires the empty set not to be a face?</p>",
        "id": 256793031,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633721355
    },
    {
        "content": "<p>Also, why isn't the empty set a simplex? Surely <code>p : fin 0 → E</code> is an independent family of points.</p>",
        "id": 256793599,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633721616
    },
    {
        "content": "<p>Some more arguments to bring to the discussion: <a href=\"https://math.stackexchange.com/questions/855566/empty-set-in-a-simplicial-complex\">https://math.stackexchange.com/questions/855566/empty-set-in-a-simplicial-complex</a></p>",
        "id": 256793789,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633721695
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Simplicial.20complex/near/256793031\">said</a>:</p>\n<blockquote>\n<p>Is there any statement you can think of that requires the empty set not to be a face?</p>\n</blockquote>\n<p>I'm asking because we already wrote 4.2k lines (amounting to 35 files) on top of that definition, so it seems pretty correct to me.</p>",
        "id": 256794053,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633721827
    },
    {
        "content": "<p>I don't know what it means for a definition to be \"correct\"... but I do know that this is not what people mean by the phrase \"simplicial complex\".</p>",
        "id": 256794758,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633722141
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Simplicial.20complex/near/256793031\">said</a>:</p>\n<blockquote>\n<p>Is there any statement you can think of that requires the empty set not to be a face?</p>\n</blockquote>\n<p>For example if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is a finite simplicial complex then the Euler characteristic of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>K</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|K|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord\">∣</span></span></span></span> is the sum over the simplices of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(-1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> to the dimension of the simplex.</p>",
        "id": 256794918,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633722215
    },
    {
        "content": "<p>Oh right. I'll have to study this.</p>",
        "id": 256796179,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1633722742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Simplicial.20complex/near/256793599\">said</a>:</p>\n<blockquote>\n<p>Also, why isn't the empty set a simplex? Surely <code>p : fin 0 → E</code> is an independent family of points.</p>\n</blockquote>\n<p>It's not a simplex because that's how \"simplex\" is defined (compare <a href=\"https://leanprover-community.github.io/mathlib_docs/find/affine.simplex\">docs#affine.simplex</a>) but ultimately, the reason is that a simplex is contractible and the empty set is not.</p>",
        "id": 256796931,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633723072
    },
    {
        "content": "<p>It's worth noting that in the SE thread above, and on wikipedia, the empty set is mentioned to be a useful simplex for certain applications, so there are at least some people who consider \"simplex\" to include the empty set</p>",
        "id": 256815135,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1633732416
    },
    {
        "content": "<p>The empty set is not a simplex. It is sometimes useful to consider it alongside simplices though.</p>",
        "id": 256815966,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633732961
    },
    {
        "content": "<p>Then we talk about an augmented simplicial whatever</p>",
        "id": 256815973,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633732969
    },
    {
        "content": "<p>This conversation is reminding me of \"How many legs does a dog have if you call his tail a leg?\"</p>",
        "id": 256823574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633738616
    },
    {
        "content": "<p>By the way, what are you using this for? Is there a branch somewhere I could take a look at?</p>",
        "id": 257044565,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633948752
    }
]