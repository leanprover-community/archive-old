[
    {
        "content": "<p>I think we should create a stream \"Lean for teaching\". This message is a follow up to the conversation around <a href=\"https://github.com/ImperialCollegeLondon/M1P1-lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M1P1-lean\">https://github.com/ImperialCollegeLondon/M1P1-lean</a>. The question is: can we write the product rule for limits of sequence in the literate style that we want for writing a bilingual math/Lean elementary analysis textbook. I think Kevin's rule of sticking to the proofs taught at Imperial is a bit too rigid. I think we can still draw inspiration from the mathlib thousands-of-lemmas-style.</p>",
        "id": 157141992,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548798850
    },
    {
        "content": "<p>We clearly want to teach that:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">tendsto_iff_sub_tendsto_zero</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span> <span class=\"bp\">;</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>(sorry that one isn't commented)</p>",
        "id": 157142038,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548798888
    },
    {
        "content": "<p>Then a very important trick that can be utterly confusing for beginners, so let's state it openly</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- In the definition of a limit, the final ε can be replaced</span>\n<span class=\"c1\">-- by a constant multiple of ε. We could assume this constant is positive</span>\n<span class=\"c1\">-- but we don&#39;t want to deal with this when applying the lemma.</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_of_mul_eps</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- Let ε be any positive number</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- A is either non positive or positive</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_or_gt</span> <span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">Anonpos</span> <span class=\"n\">Apos</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- If A is non positive then our assumed bound quickly</span>\n    <span class=\"c1\">-- gives a contradiction.</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- Indeed we can apply our assumption to ε = 1 to get N such that</span>\n    <span class=\"c1\">-- ∀ (n : ℕ), n ≥ N → |a n - l| &lt; A * 1</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- in particular this holds when n = N</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">H</span> <span class=\"n\">N</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">),</span>\n    <span class=\"c1\">-- but |a N - l| ≥ 0 so we get a contradiction</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">abs_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- Now assume A is positive. Our assumption h gives N such that</span>\n    <span class=\"c1\">-- ∀ n ≥ N, |a n - l| &lt; A * (ε / A)</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">div_pos</span> <span class=\"n\">εpos</span> <span class=\"n\">Apos</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- we can simplify that A * (ε / A) and we are done.</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_div_cancel&#39;</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">Apos</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">tauto</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 157142095,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548798935
    },
    {
        "content": "<p>I talked about this product of limits lemmas with the undergrads today in an informal course I'm giving. We reduced product of limits = limit of products to linearity of limits and the assertion that the product of null sequences is null. I think this is a nicer proof than the one I typed up.</p>",
        "id": 157142203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548798997
    },
    {
        "content": "<p>Yeah, let's move towards the actual goal. Notice how the constant A from the preceding lemma is <em>not</em> instantiated before we get it. But Lean doesn't need to be told at the end!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">tendsto_bounded_mul_zero</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Apos</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">has_bound</span> <span class=\"n\">a</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hB</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">b</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- Let&#39;s apply our variant of the definition of limits where the final</span>\n  <span class=\"c1\">-- ε gets multiplied by some constant to be determined</span>\n  <span class=\"n\">apply</span> <span class=\"n\">tendsto_of_mul_eps</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Let ε be any positive number</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- by assumption hB, we get some N such that</span>\n  <span class=\"c1\">-- ∀ (n : ℕ), n ≥ N → |b n| &lt; ε</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hB</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span> <span class=\"k\">with</span> <span class=\"n\">N</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Let&#39;s use that N</span>\n  <span class=\"n\">use</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- And compute for any n ≥ N</span>\n  <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">nN</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>\n  <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"bp\">|</span>    <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"bp\">|</span> <span class=\"bp\">*</span> <span class=\"bp\">|</span><span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"bp\">|</span>  <span class=\"o\">:</span> <span class=\"n\">abs_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">A</span><span class=\"bp\">*|</span><span class=\"n\">b</span> <span class=\"n\">n</span><span class=\"bp\">|</span>        <span class=\"o\">:</span> <span class=\"n\">mul_le_mul_of_nonneg_right</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs_nonneg</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n              <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">A</span><span class=\"bp\">*</span><span class=\"n\">ε</span>            <span class=\"o\">:</span> <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">n</span> <span class=\"n\">nN</span><span class=\"o\">)</span> <span class=\"n\">Apos</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 157142262,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548799052
    },
    {
        "content": "<p>Oh crap, I just noticed I left the <code>Apos</code> assumption that I intended to remove. I don't need it to apply <code>tendsto_of_mul_eps</code> but I need it in the last inequality above</p>",
        "id": 157142448,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548799191
    },
    {
        "content": "<p>Anyway, I can still prove the multiplication lemma:</p>",
        "id": 157143677,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548800185
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- The limit of the product is the product of the limits.</span>\n<span class=\"c1\">-- If aₙ → l and bₙ → m then aₙ * bₙ → l * m.</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">tendsto_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">b</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- We apply the difference criterion so we need to prove a*b - l*m goes to zero</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">tendsto_iff_sub_tendsto_zero</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- The key idea is to introduce (a_n - l) and (b_n - m) in this difference</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">*</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">m</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)),</span>\n  <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">key</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- By addition of limit, it then suffices to prove a_n * (b_n - m) and m*(a_n - l)</span>\n  <span class=\"c1\">-- both go to zero</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">))</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">tendsto_add</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">},</span>\n  <span class=\"c1\">-- Let&#39;s tackle one after the other</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- Since a is convergent, it&#39;s bounded by some positive A</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">bounded_pos_of_convergent</span> <span class=\"n\">a</span> <span class=\"bp\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">A_pos</span><span class=\"o\">,</span> <span class=\"n\">hA</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- We can reformulate the b convergence assumption as b_n - m goes to zero.</span>\n    <span class=\"k\">have</span> <span class=\"n\">limb</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n     <span class=\"k\">from</span> <span class=\"n\">tendsto_iff_sub_tendsto_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- So we can conclude using our lemma about product of a bounded sequence and a</span>\n    <span class=\"c1\">-- sequence converging to zero</span>\n    <span class=\"n\">exact</span> <span class=\"n\">tendsto_bounded_mul_zero</span>  <span class=\"n\">A_pos</span> <span class=\"n\">hA</span> <span class=\"n\">limb</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- It remains to prove m * (a_n - l) goes to zero</span>\n    <span class=\"c1\">-- If m = 0 this is obvious.</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">Hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hm</span><span class=\"o\">,</span> <span class=\"n\">tendsto_const</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"c1\">-- Otherwise we follow the same strategy as above.</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- We reformulate our convergence assumption on a as a_n - l goes to zero</span>\n      <span class=\"k\">have</span> <span class=\"n\">lima</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n        <span class=\"k\">from</span> <span class=\"n\">tendsto_iff_sub_tendsto_zero</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- and conclude using the same lemma</span>\n      <span class=\"n\">exact</span> <span class=\"n\">tendsto_bounded_mul_zero</span> <span class=\"o\">(</span><span class=\"n\">abs_pos_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">Hm</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">has_bound_const</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">lima</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 157143697,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548800213
    },
    {
        "content": "<p>I am ultimately envisaging the text looking like LaTeX and you can click on it and open up the Lean.</p>",
        "id": 157143742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548800273
    },
    {
        "content": "<p>How do you like my proofs?</p>",
        "id": 157143796,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548800300
    },
    {
        "content": "<p>I can only understand them if I look at them in Lean and I'm in the middle of something else right now :-) Nat subtraction :-/</p>",
        "id": 157144479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548800924
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/M1P1-lean/pull/1\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M1P1-lean/pull/1\">https://github.com/ImperialCollegeLondon/M1P1-lean/pull/1</a></p>",
        "id": 157144802,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548801200
    },
    {
        "content": "<p>I'm a bit disappointed that you can look at them only in Lean. There are so many comments!</p>",
        "id": 157144814,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548801217
    },
    {
        "content": "<p>Maybe I mean \"I'm sort of focussed on something else\"</p>",
        "id": 157144882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548801263
    },
    {
        "content": "<p>But I'll certainly look later.</p>",
        "id": 157144904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548801288
    }
]