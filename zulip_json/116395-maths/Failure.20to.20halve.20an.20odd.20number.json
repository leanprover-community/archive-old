[
    {
        "content": "<p>In Leanprover, what's the best way to show that ¬∃(x:ℤ),(2*x=1) ?  For the sake of proving no number can be both odd and even.</p>",
        "id": 188975871,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582585495
    },
    {
        "content": "<p>There are lots of ways to do this.</p>",
        "id": 188976458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582585984
    },
    {
        "content": "<p>Probably the easiest way is to learn how to use mathlib's library which deals with division and remainder</p>",
        "id": 188976563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582586054
    },
    {
        "content": "<p>If they're equal then they'll have equal remainder when you divide by two</p>",
        "id": 188976582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582586079
    },
    {
        "content": "<p>But a lemma in the library tells you that 2x has remainder 0 and another one shows 1 has remainder 1</p>",
        "id": 188976616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582586110
    },
    {
        "content": "<p>You might want to browse through something like data.int.modeq but I need to sort out the fact that all the lights just went off in my house</p>",
        "id": 188976684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582586159
    },
    {
        "content": "<p>omg a black out? are you okay?</p>",
        "id": 188987476,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1582599591
    },
    {
        "content": "<p>They're back on now, just a random glitch</p>",
        "id": 188996294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582614651
    },
    {
        "content": "<p>OK so as I was saying, this is not so hard if you use results in the library. In fact probably <code>data.int.basic</code> has everything you need. Assume such an x exists; then <code>2 * x = 1</code> and we want to prove a contradiction. But we can now use <code>calc</code> to prove that <code>1 = 1 % 2 = (2 * x) % 2 = 0</code> and that's the contradiction we seek. The reason <code>1 % 2 = 1</code> is <code>mod_eq_of_lt</code>, and the reason <code>(2 * x) % 2 = 0</code> is <code>mul_mod_right</code>.</p>",
        "id": 189066340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582668405
    },
    {
        "content": "<p>I tried various things, like</p>\n<p>have h : (2*x) % 2 = 0 := mul_mod_right,<br>\nhave h : (2*x) % 2 = 0 := data.int.basic.mul_mod_right,</p>\n<p>and so on.  But none of them worked</p>",
        "id": 189086883,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582694123
    },
    {
        "content": "<p>You need to <code>import data.int.basic</code> and then type <code>#check mul_mod_right</code> without hitting enter and then press ctrl-space to search</p>",
        "id": 189090588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582700805
    },
    {
        "content": "<p>and then you find that there is <code>int.mul_mod_right</code> and <code>nat.mul_mod_right</code>. This is a really powerful way to search the library (especially when you get to the point where you can start guessing the names of lemmas).</p>",
        "id": 189090750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582701031
    },
    {
        "content": "<p>Now your <code>x</code> is an integer so you want <code>int.mul_mod_right</code> so change <code>#check mul_mod_right</code> to <code>#check int.mul_mod_right</code> and you can see that this function wants explicit integers <code>a</code> and <code>b</code> as input, and then returns a proof that <code>(a * b) % a = 0</code>.</p>",
        "id": 189090770,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582701111
    },
    {
        "content": "<p>and we conclude that <code>example (x : ℤ) : (2 * x) % 2 = 0 := int.mul_mod_right 2 x</code> should work</p>",
        "id": 189090824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582701148
    },
    {
        "content": "<p>and <code>example (x : ℤ) : (2 * x) % 2 = 0 := int.mul_mod_right _ _</code> works too (making the elaborator do the work of guessing the inputs to the function) as does <code>example (x : ℤ) : (2 * x) % 2 = 0 := by rw int.mul_mod_right</code> (making the <code>rw</code> tactic do the work)</p>",
        "id": 189090906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582701274
    },
    {
        "content": "<p>Thanks Kevin.  Now I am learning more about Lean :</p>",
        "id": 189118246,
        "sender_full_name": "Nicholas McConnell",
        "timestamp": 1582727178
    },
    {
        "content": "<p>Did you get the ctrl-space thing to work? It's a really useful trick. I use it all the time. After a while you can start guessing what things are called -- you know you want <code>(a * b) % a = 0</code> and immediately you guess the lemma is going to have <code>mul_mod</code> in its name, and already <code>#check mul_mod</code> and ctrl-space is giving you a list of things including the answer. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> knows another way of doing this involving Ctrl-P but I can never remember it.</p>",
        "id": 189128757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582733431
    },
    {
        "content": "<p>Ctrl-P and then <code># mul_mod</code> in the box at the top But this seems to produce far more output.</p>",
        "id": 189128838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582733487
    },
    {
        "content": "<p>how does one perform the search trick in emacs?</p>",
        "id": 189613965,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1583255917
    },
    {
        "content": "<p>Maybe C-c C-d?</p>",
        "id": 189614219,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583256063
    },
    {
        "content": "<p><code>M-.</code> I think</p>",
        "id": 189614346,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583256159
    },
    {
        "content": "<p>(assuming Kevin is talking about what I think, and assuming I haven't customized the keybinding somehow)</p>",
        "id": 189614376,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583256194
    },
    {
        "content": "<p><code>M-.</code> is <code>lean-find-definition</code> for me, which doesn't work just on <code>mul_mod_right</code> (it needs a fully qualified identifier). <code>C-c C-d</code> is undefined</p>",
        "id": 189614522,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1583256280
    },
    {
        "content": "<p>For <code>C-c C-d</code> I was going off of this file, which seems to send a <code>search</code> command to the Lean server (this is what <code>C-p #</code> does in VS Code): <a href=\"https://github.com/leanprover/lean-mode/blob/master/helm-lean.el#L40\" target=\"_blank\" title=\"https://github.com/leanprover/lean-mode/blob/master/helm-lean.el#L40\">https://github.com/leanprover/lean-mode/blob/master/helm-lean.el#L40</a> . But I don't actually use emacs, so I don't know.</p>",
        "id": 189614663,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583256375
    },
    {
        "content": "<p>Sorry, I should have said <code>M-n</code>--these are all in physical memory for me. I have this:</p>\n<div class=\"codehilite\"><pre><span></span>(global-set-key (kbd &quot;M-n&quot;) #&#39;company-complete)\n</pre></div>",
        "id": 189614731,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583256421
    },
    {
        "content": "<p>I also have something about <code>company-lean</code></p>",
        "id": 189614776,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583256455
    },
    {
        "content": "<p>I think you need to <code>M-x package-install</code> that</p>",
        "id": 189614903,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583256511
    },
    {
        "content": "<p>This is all written down somewhere obvious</p>",
        "id": 189614919,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583256520
    },
    {
        "content": "<p>thanks both</p>",
        "id": 189615322,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1583256802
    },
    {
        "content": "<p>helm-lean works nicely</p>",
        "id": 189615767,
        "sender_full_name": "Matt Earnshaw",
        "timestamp": 1583257114
    }
]