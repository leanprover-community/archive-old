[
    {
        "content": "<p>The eliminator of an inductive type</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n<span class=\"bp\">|</span> <span class=\"n\">cons</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">\\</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span>\n</code></pre></div>\n\n<p>is the function list.rec_on and it is used to construct functions on lists.<br>\nWhat is going on with this method of defining a function on a list?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">length</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">list.nil'</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">list.cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">l</span>\n</code></pre></div>\n\n<p>Is this syntactic sugar for an application of the recursor?</p>",
        "id": 213697492,
        "sender_full_name": "Golol",
        "timestamp": 1603012607
    },
    {
        "content": "<p>Yes, more or less</p>",
        "id": 213697566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603012771
    },
    {
        "content": "<p>you can see <code>#print list.length</code></p>",
        "id": 213697572,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1603012781
    },
    {
        "content": "<p>You can see the actual definition with <code>#print</code></p>",
        "id": 213697575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603012785
    },
    {
        "content": "<p>it's actually more complicated than that because lean compiles to a derived induction principle called <code>list.brec_on</code></p>",
        "id": 213697622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603012811
    },
    {
        "content": "<p>but you can look at the definition of this as well and it is all ultimately in terms of <code>list.rec</code></p>",
        "id": 213697629,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603012839
    },
    {
        "content": "<p>Thanks!<br>\nOne more thing: What does the ' symbol do to list.nil here? I've seen that notation a bunch but must've missed the definition.</p>",
        "id": 213697832,
        "sender_full_name": "Golol",
        "timestamp": 1603013144
    },
    {
        "content": "<p>it's just another identifier character</p>",
        "id": 213698205,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603013755
    },
    {
        "content": "<p>That code should not compile with the standard definition of <code>list</code>, because the nil case is spelled <code>list.nil</code> not <code>list.nil'</code></p>",
        "id": 213698248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603013789
    },
    {
        "content": "<p>(actually it's usually just <code>[]</code>)</p>",
        "id": 213698254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603013812
    },
    {
        "content": "<p>where did you get that code? We don't usually use inaccessible patterns <code>.(α)</code> anymore, because the elaborator has improved to make them almost always unnecessary</p>",
        "id": 213698274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603013867
    },
    {
        "content": "<p>I got it from <a href=\"https://leanprover.github.io/reference/declarations.html\">https://leanprover.github.io/reference/declarations.html</a> 4.4 Inductive types.</p>",
        "id": 213698403,
        "sender_full_name": "Golol",
        "timestamp": 1603014050
    },
    {
        "content": "<p>Ah, it was defined just above as a <code>@[pattern]</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[pattern]</span>\n<span class=\"kd\">def</span> <span class=\"n\">list.nil'</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">list.nil</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">length</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">list.nil'</span> <span class=\"bp\">.</span><span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">list.cons</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">length</span> <span class=\"n\">l</span>\n</code></pre></div>",
        "id": 213699177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603015272
    },
    {
        "content": "<p>I think the purpose of this example is just to show off some pattern matching features</p>",
        "id": 213699186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603015307
    },
    {
        "content": "<p>On the note of pattern matching features, is the <code>a@b</code> syntax documented anywhere?</p>",
        "id": 213704247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1603024025
    },
    {
        "content": "<p>probably in the PR that introduced it :P</p>",
        "id": 213704448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603024438
    },
    {
        "content": "<p>logically it should be in the reference but it doesn't appear to be</p>",
        "id": 213704505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603024510
    }
]