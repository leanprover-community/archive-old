[
    {
        "content": "<p>I'm trying to prove the following result:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">coker_of_quasi_isos_between_monic_arrows_is_quasi_iso</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">homological_complex</span> <span class=\"n\">V</span> <span class=\"n\">c</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hi</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hj</span> <span class=\"o\">:</span> <span class=\"n\">mono</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">quasi_iso</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">quasi_iso</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"bp\">≫</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">≫</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">quasi_iso</span> <span class=\"o\">((</span><span class=\"n\">coker_functor</span> <span class=\"o\">(</span><span class=\"n\">homological_complex</span> <span class=\"n\">V</span> <span class=\"n\">c</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">arrow.hom_mk</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">arrow.mk</span> <span class=\"n\">i</span> <span class=\"bp\">⟶</span> <span class=\"n\">arrow.mk</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It seems like the right way to do this is to use <code>homological_complex.six_term_exact_seq</code>, then use a lemma proving naturality of the connecting homomorphism, then use <code>short_exact_sequence.snd_is_iso</code> (the five lemma). Is there a result already in LTE that gives the missing step?</p>",
        "id": 290974956,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658883714
    },
    {
        "content": "<p>We certainly have the snake lemma and the naturality of the connecting morphism in LTE (along with 37 other variants...).</p>",
        "id": 290975987,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658884631
    },
    {
        "content": "<p>What exactly do you mean by \"the missing step\"?</p>",
        "id": 290975998,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658884651
    },
    {
        "content": "<p>Sorry, I mean that if you have morphism of short exact sequences of chain complexes then you get a commutative ladder diagram for the LES in homology (or more specifically between the truncation of the LES given by six_term_exact_sequence)</p>",
        "id": 290976714,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658885263
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/AzQwFvRbiPUQIj28Uh_qmRCX/6e40a9fa-bd80-4829-9554-5e6fed804dbe.png\">6e40a9fa-bd80-4829-9554-5e6fed804dbe.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/AzQwFvRbiPUQIj28Uh_qmRCX/6e40a9fa-bd80-4829-9554-5e6fed804dbe.png\" title=\"6e40a9fa-bd80-4829-9554-5e6fed804dbe.png\"><img src=\"/user_uploads/3121/AzQwFvRbiPUQIj28Uh_qmRCX/6e40a9fa-bd80-4829-9554-5e6fed804dbe.png\"></a></div>",
        "id": 290977826,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658886279
    },
    {
        "content": "<p>So given monic arrows i : A -&gt; X and j : B -&gt; Y and a morphism between them in the arrow category, I want this commutative diagram with exact rows</p>",
        "id": 290977864,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658886321
    },
    {
        "content": "<p>(where q is after p in the complex shape)</p>",
        "id": 290977889,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658886358
    },
    {
        "content": "<p>Is this not just the naturality of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\delta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> in the snake lemma? Everything else should just be natural \"for free\".</p>",
        "id": 290978164,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658886634
    },
    {
        "content": "<p>Yep, I'm just not sure what the actual lemma saying delta is natural is</p>",
        "id": 290979378,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658887948
    },
    {
        "content": "<p>oh, it's under snake_lemma_naturality isn't it. For some reason I thought there would be a difference between naturality of the connecting homomorphism for the general snake lemma and for the special case of the LES in homology</p>",
        "id": 290979430,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658888014
    },
    {
        "content": "<p>oh wait or is this what's done in snake_lemma_naturality2?</p>",
        "id": 290979483,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658888073
    },
    {
        "content": "<p>Like I said... we have 37 variants <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 290979647,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658888264
    },
    {
        "content": "<p>I think <a href=\"https://github.com/leanprover-community/lean-liquid/blob/17f13b74d4bc045e82465f86f5705a3f6e1994e3/src/for_mathlib/snake_lemma_naturality2.lean#L188\">https://github.com/leanprover-community/lean-liquid/blob/17f13b74d4bc045e82465f86f5705a3f6e1994e3/src/for_mathlib/snake_lemma_naturality2.lean#L188</a> is the closest we have in LTE to the statement you want.</p>",
        "id": 290979763,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658888376
    },
    {
        "content": "<p>I think this should give me exactly what I want! thanks so much</p>",
        "id": 290980004,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658888613
    },
    {
        "content": "<p>...except the arrow category in mathlib is defined as a comma category and not the functor category from the walking arrow</p>",
        "id": 290981447,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658890149
    },
    {
        "content": "<p>So I guess I should show equivalence of those</p>",
        "id": 290981452,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658890161
    },
    {
        "content": "<p>Related question: if I have an SES 0 -&gt; A -&gt; B -&gt; C -&gt; 0 of complexes and q is an index with <a href=\"http://c.next\">c.next</a>  q = none, how can I get that the sequence <code>H_q(A) -&gt; H_q(B) -&gt; H_q(C) -&gt; 0</code> is exact? this is true, right? Just add another element to the indexing after q and extend these complexes by 0?</p>",
        "id": 290991252,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658900963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> Are you depending on LTE? Or only mathlib?</p>",
        "id": 290991589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658901313
    },
    {
        "content": "<p>There is a lot of machinery in LTE that hopefully will move to mathlib in the next few months.</p>",
        "id": 290991599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658901331
    },
    {
        "content": "<p>In the <code>c.next q = none</code> case, I guess it is best to identify homology with a cokernel and then conclude that you get an epi on the right.</p>",
        "id": 290991677,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658901395
    },
    {
        "content": "<p>On LTE, and wow, that's obvious in hindsight</p>",
        "id": 290991819,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658901575
    },
    {
        "content": "<p>There's an enormous amount of stuff about <code>homology_iso_datum</code> and <code>has_homology</code> that might be helpful with those identifications.</p>",
        "id": 290992155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658901863
    },
    {
        "content": "<p>Also, identifying a derived functor in degree <code>0</code> with the functor that is being derived is already part of mathlib.</p>",
        "id": 290992168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658901891
    },
    {
        "content": "<p>Oh neat</p>",
        "id": 290992264,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658901974
    },
    {
        "content": "<p>Do mathlib or LTE have that a functor which sends short exact sequences to right exact sequences is right exact (sends right exact sequences to right exact sequences)? I couldn't find it but wanted to check before proving it myself</p>",
        "id": 290996362,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658905342
    },
    {
        "content": "<p>I guess not. Note that we've been spelling right exactness as <code>preserves_finite_colimits</code>.</p>",
        "id": 290996975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658905770
    },
    {
        "content": "<p>In LTE's <code>for_mathlib/exact_functor.lean</code>, there are statements about exact functors (in the sense that they preserves short exact sequences): they preserve finite colimits and finite limits. From the code in this file, it should not be too hard to split the exactness assumption into only right exactness (resp. only left exactness) and obtain more equivalent characterizations.</p>",
        "id": 291013732,
        "sender_full_name": "Joël Riou",
        "timestamp": 1658916867
    },
    {
        "content": "<p>I've shown that taking the cokernel (considered as a functor on the arrow category) is right exact and I want to deduce from this that homology at a terminal index (ie 0th homology for N graded chain complexes) is right exact, by identifying the homology of A at i with the cokernel of A.d_from i. Is this easily doable with stuff from homology_iso_datum and has_homology? I tried reading through but didn't totally understand what was going on</p>",
        "id": 291118018,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658960309
    },
    {
        "content": "<p>Note that the identification H_i(A) ≈ coker(A.d_from i) must be natural in A in order to deduce right exactness of H_i from right exactness of coker</p>",
        "id": 291118500,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658960657
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/4hTTJxFlYDnsk7J9P4Z4zZu2/7a1d76d8-d87a-406c-aec1-0629388d9b20.jpg\">7a1d76d8-d87a-406c-aec1-0629388d9b20.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4hTTJxFlYDnsk7J9P4Z4zZu2/7a1d76d8-d87a-406c-aec1-0629388d9b20.jpg\" title=\"7a1d76d8-d87a-406c-aec1-0629388d9b20.jpg\"><img src=\"/user_uploads/3121/4hTTJxFlYDnsk7J9P4Z4zZu2/7a1d76d8-d87a-406c-aec1-0629388d9b20.jpg\"></a></div>",
        "id": 291118754,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658960846
    },
    {
        "content": "<p>I was able to manually define a projection A -&gt; H_i(A) but I get a very spooky goal when I try to show naturality</p>",
        "id": 291118757,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658960850
    },
    {
        "content": "<p>I would use <code>homology.map_eq_lift...</code> and <code>homology.hom_to_ext</code> (or something like that) to make some progress.</p>",
        "id": 291121436,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658962697
    },
    {
        "content": "<p>Oh no, you used <code>homology.\\pi</code> instead of <code>homology.\\pi'</code> GOOD LUCK!</p>",
        "id": 291121484,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658962745
    },
    {
        "content": "<p>Also, what's going on with those <code>eq_to_hom</code>s? They might cause you some troubles</p>",
        "id": 291121513,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658962773
    },
    {
        "content": "<p>Here's some code that I hope will be helpful</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.homology.homology</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.homology</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.limits</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">abelian</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">homological_complex</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">complex_shape.down</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">homology_iso_cokernel</span> <span class=\"o\">:</span>\n  <span class=\"n\">X.homology</span> <span class=\"mi\">0</span> <span class=\"bp\">≅</span> <span class=\"n\">cokernel</span> <span class=\"o\">(</span><span class=\"n\">X.d_to</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">homology.desc'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">kernel.ι</span> <span class=\"n\">_</span> <span class=\"bp\">≫</span> <span class=\"n\">cokernel.π</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">cokernel.desc</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">homology.lift</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">cokernel.π</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">homology.hom_to_ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">hom_inv_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">homology.hom_from_ext</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">homology.hom_to_ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_hom_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">coequalizer.hom_ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">≫</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">homology.ι</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">homology.hom_from_ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ht</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">homology_iso_cokernel_natural</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">homological_complex</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">complex_shape.down</span> <span class=\"n\">ℕ</span><span class=\"o\">)}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">homology_iso_cokernel</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"bp\">≫</span> <span class=\"n\">cokernel.map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">f.prev</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f.f</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"o\">(</span><span class=\"n\">homology_functor</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">≫</span> <span class=\"o\">(</span><span class=\"n\">homology_iso_cokernel</span> <span class=\"n\">Y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">homology_iso_cokernel</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">homology.hom_from_ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291122807,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658963711
    },
    {
        "content": "<p>This looks much better haha</p>",
        "id": 291123465,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658964241
    },
    {
        "content": "<p>It's been difficult trying to understand how the whole homological algebra API works and how you're supposed to use it. I wish I had started asking questions here earlier</p>",
        "id": 291123601,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658964329
    },
    {
        "content": "<p>Keep in mind that we're gearing up for a big refactor in mathlib's homology based on what we learned from LTE, so the \"official\" api is likely to change in the next few weeks.</p>",
        "id": 291123747,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658964453
    },
    {
        "content": "<p>That's good to hear, it hasn't felt super user friendly</p>",
        "id": 291124194,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658964799
    },
    {
        "content": "<p>Last question (hopefully) before I finish out this homological algebra stuff: say I have a ladder diagram where the vertical maps are isomorphisms and an <code>exact_seq [f_1, ..., f_n]</code> where the <code>f_i</code> are the maps on the top row. how can I get the corresponding <code>exact_seq</code> for the bottom row?</p>",
        "id": 291129945,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658970667
    },
    {
        "content": "<p>I assume this was needed at some point in LTE...</p>",
        "id": 291129964,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658970704
    },
    {
        "content": "<p>I see that there's a lemma <code>category_theory.preadditive.exact_of_iso_of_exact'</code> in mathlib for the <code>n = 2</code> case, so it should be pretty easy to prove inductively if I have to</p>",
        "id": 291130038,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658970763
    },
    {
        "content": "<p>I don't remember whether we have a way to transport <code>exact_seq</code> along isomorphisms...</p>",
        "id": 291130445,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658971234
    },
    {
        "content": "<p>Something I'll try to pr in after I finish this project and start working on a bunch of prs</p>",
        "id": 291130469,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658971279
    },
    {
        "content": "<p>If we do then it would be somewhere in <code>for_mathlib/exact_seq*</code> (<code>*</code> = wildcard)</p>",
        "id": 291130477,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658971296
    },
    {
        "content": "<p>(assuming exact_seq is coming in the rewrite of the homological algebra api)</p>",
        "id": 291130478,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658971300
    },
    {
        "content": "<p>We still need to port <code>exact_seq</code> to mathlib :-/</p>",
        "id": 291130511,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658971322
    },
    {
        "content": "<p>It would be nice if we can come up with a version of <code>exact_seq</code> that has a category structure, so we could talk about such ladder diagrams simply as morphisms in some category. But that's not really possible with the current implementation of <code>exact_seq</code></p>",
        "id": 291130579,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658971437
    },
    {
        "content": "<p>well, one way to do what I was suggesting is to reinterpret the sequences as chain complexes and then use the fact that an isomorphism of chain complexes descends to an iso in homology. I'm not really sure what category this should happen in other than like <code>chain_complex V (fin n)</code></p>",
        "id": 291130731,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658971581
    },
    {
        "content": "<p>Or are you thinking of a category which has exact sequences of length n for all finite n?</p>",
        "id": 291130739,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658971603
    },
    {
        "content": "<p>Verified <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>. I should have excision done by tonight</p>",
        "id": 291133091,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658974644
    },
    {
        "content": "<p>Nice!</p>",
        "id": 291133336,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658974919
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> excision of what? Now I'm curious!!</p>",
        "id": 291136083,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658978098
    },
    {
        "content": "<p>Singular homology!</p>",
        "id": 291136094,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658978109
    },
    {
        "content": "<p>That's cool!</p>",
        "id": 291136105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658978122
    },
    {
        "content": "<p>The work so far is here: <a href=\"https://github.com/Shamrock-Frost/BrouwerFixedPoint\">https://github.com/Shamrock-Frost/BrouwerFixedPoint</a></p>",
        "id": 291136190,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658978191
    },
    {
        "content": "<p>(warning: it is very bad code. I had a 1 month deadline that's nearing the end and it got sloppy at the end)</p>",
        "id": 291136207,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658978234
    },
    {
        "content": "<p>You are basing your work on a project that got very very sloppy at the end as well <span aria-label=\"see no evil\" class=\"emoji emoji-1f648\" role=\"img\" title=\"see no evil\">:see_no_evil:</span></p>",
        "id": 291136350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1658978393
    },
    {
        "content": "<p>It's so tempting when it feels like you'll get it any day now...</p>",
        "id": 291136407,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658978463
    },
    {
        "content": "<p>Excision tonight may have been a bit ambitious, but definitely tomorrow! Literally the only part of the argument I have to do is shuffling around the chain complexes and applying the second isomorphism theorem, all the hard homological algebra and topology is complete :)</p>",
        "id": 291155141,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658997514
    },
    {
        "content": "<p>Definitely tomorrow was also too ambitious... But <em>soon</em>. I have the main proof of excision complete but it relies on three sorry'd out lemmas (the identity (M+N)/M = N/(M ∩ N) in an abelian category and criterions for checking certain squares of modules are pullbacks/pushouts)</p>",
        "id": 291313575,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1659096992
    },
    {
        "content": "<p>Proof of excision is complete!!! Calculating H_n(S^n) and deducing the Brouwer Fixed Point theorem should be easy from here :)</p>",
        "id": 291418497,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1659173403
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110401\">Brendan Seamas Murphy</span> <a href=\"#narrow/stream/116395-maths/topic/Using.20the.20LTE.20snake.20lemma/near/291418497\">said</a>:</p>\n<blockquote>\n<p>should be easy from here :)</p>\n</blockquote>\n<p>Famous last words <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 291418648,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1659173623
    },
    {
        "content": "<p>It feels like when I read \"Clearly,...\" in math papers.</p>",
        "id": 291418724,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1659173705
    },
    {
        "content": "<p>If that's a proof that the definition of singular homology that you currently have is usable, then can you PR the definition? It would be great for lean to finally have a homology/cohomology theory</p>",
        "id": 291425308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659182487
    },
    {
        "content": "<p>I could take on trying to implement singular cohomology</p>",
        "id": 291425772,
        "sender_full_name": "Guillermo Martin",
        "timestamp": 1659183228
    },
    {
        "content": "<p>My feeling is that if people feel confident that they know the correct Lean implementation of a mathematical definition should be then they should PR it even if they don't have time to develop an API for it. One of my longer term goals with Lean is to get mathlib into a position where it's thought of as \"normal\" that it can <em>state</em> a theorem from modern research mathematics, and definitions are the key stumbling block here.</p>",
        "id": 291428727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659187220
    },
    {
        "content": "<p>Singular homology in Lean is definitely an important milestone. Congratulations! Would be nice to compare with the <a href=\"https://www.mathematics.pitt.edu/hales60/pdf/Harrison-John.pdf\">HOL story</a>.</p>",
        "id": 291439861,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659200445
    },
    {
        "content": "<p>Definitely planning to PR, I just wanted to get to a certain point on my own before then. It's also going to be a little annoying because of some issues with the simplex category in mathlib which I'd like to fix in the PR (there's universe issues with the singular simplicial set functor and also I think the standard cosimplicial object in Top should be defined using std_simplex, which is how I do it in this project)</p>",
        "id": 291441802,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1659202755
    },
    {
        "content": "<p>Don't change too many things at once in the first PR.</p>",
        "id": 291442351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1659203307
    }
]