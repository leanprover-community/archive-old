[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/5286\">#5286</a> Bryan pointed out that mathlib has <code>canonically_linear_ordered_add_monoid</code> (and very natural types like the naturals, and <code>nnreal</code>, are instances of this), but it does not have the multiplicative version <code>canonically_linear_ordered_monoid</code>. He suggested I add it because it was very much in the spirit of the PR. </p>\n<p>I initially accepted because I thought that the ideals of a Dedekind domain would be a canonically linearly ordered monoid under multiplication. But now I realise they are not -- they satisfy <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo>≤</mo><mi>J</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi mathvariant=\"normal\">∃</mi><mi>K</mi><mo separator=\"true\">,</mo><mi>I</mi><mo>=</mo><mi>J</mi><mo>∗</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">I\\leq J\\iff \\exists K, I=J*K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.70733em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.09618em;\">J</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> -- multiplication makes things smaller rather than bigger (\"canonical\" in the additive setting means <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi mathvariant=\"normal\">∃</mi><mi>c</mi><mo separator=\"true\">,</mo><mi>b</mi><mo>=</mo><mi>a</mi><mo>+</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">a\\leq b\\iff \\exists c, b=a+c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.71844em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> which is true for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>). The non-existing class <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[1,\\infty)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">)</span></span></span></span> of reals at least 1 (or rationals at least 1) would be an instance of <code>canonically_linear_ordered_monoid</code>, but these classes are not in mathlib and I don't see any compelling reason to add them.</p>\n<p>However in valuation theory one would be interested in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,1]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> as a totally ordered monoid, and also examples such as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo><mo>∪</mo><mo stretchy=\"false\">{</mo><msup><mi>p</mi><mrow><mo>−</mo><mi>n</mi></mrow></msup><mtext> </mtext><mi mathvariant=\"normal\">∣</mi><mtext> </mtext><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi><mtext> </mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{0\\}\\cup\\{p^{-n}\\,|\\,n\\in\\mathbb{N}\\,\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mclose\">}</span></span></span></span>, because these are the target monoids for the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-adic valuation on the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-adic integers (and also on the usual integers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>). All of these (plus ideals of Dedekind domains) are also examples of totally ordered monoids which are \"anti-canonically ordered\": <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>≤</mo><mi>b</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi mathvariant=\"normal\">∃</mi><mi>c</mi><mo separator=\"true\">,</mo><mi>a</mi><mo>=</mo><mi>b</mi><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">a\\leq b\\iff \\exists c, a=bc</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.71844em;vertical-align:-0.024em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">∃</span><span class=\"mord mathnormal\">c</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">c</span></span></span></span>. In particular I know of no natural <code>canonically_linear_ordered_monoid</code>s but I can think of several totally ordered monoids for which their <code>order_dual</code> is <code>canonically_linear_ordered_monoid</code>.  I was surprised by this! Is this enough of an argument for adding <code>canonically_linear_ordered_monoid</code>? It seemed to me that this was a pretty weak argument and we would rather have <code>anticanonically_linear_ordered_monoid</code> if anything at all, but then of course we don't get all the <code>to_additive</code> goodies. Adding <code>canonically_linear_ordered_monoid</code> when there are no instances in mathlib seemed like a pretty random thing to do and my instinct now is not to do it. Does anyone have any thoughts on whether this should be done anyway? I'll happily do it if I can see that there's a good reason to add another class to the heirarchy...</p>",
        "id": 220239296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608209785
    },
    {
        "content": "<p>this \"contravariance\" indeed seems very funny. It's exactly what happens when you move between additive and multiplicative valuations</p>",
        "id": 220239625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608209993
    },
    {
        "content": "<p>What is the additive analogue of an <code>ordered_group_with_zero</code>? It should be some <code>ordered_add_group_with_top</code></p>",
        "id": 220239717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1608210024
    },
    {
        "content": "<p>Exactly. Indeed you can see this in <code>ordered_monoid.lean</code> -- there's a <code>with_zero</code> section (actually namespace) proving results about ordered_comm_monoids and then a <code>with_top</code> section proving results about <code>ordered_add_comm_monoid</code>s.</p>",
        "id": 220239963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608210162
    },
    {
        "content": "<p>This Lean separation of + and * has always been of interest to me because even though people say \"well formally everything is the same, in Agda there's only one group\" or whatever, in practice addition and multiplication are treated differently by mathematicians. The analysts have <code>exp</code> and <code>log</code> which are order-preserving and switch one to the other, but the p-adic exp and log have no order to preserve, and the valuation dictionary is order-reversing.</p>",
        "id": 220240202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608210295
    },
    {
        "content": "<p>Aah, the ordered_add_comm_monoid also has a <code>with_bot</code> section! I guess one uses this for stuff like degree of a polynomial (deg(fg)=deg(f)+deg(g) is true for all f,g in with_bot nat, although the ordering is weird because f | g implies deg(f)&lt;=deg(g) or deg(g)=bot -- this is so confusing! )</p>",
        "id": 220240464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608210473
    },
    {
        "content": "<p>Got one! <code>associates R</code> for <code>R</code> a DVR :D</p>",
        "id": 220272618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608225419
    },
    {
        "content": "<p>Kevin, isn't this a <code>canonically_linearly_ordered_monoid_with_zero</code>?</p>",
        "id": 220278456,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608227762
    },
    {
        "content": "<p>Indeed it is :-)</p>",
        "id": 220279929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608228446
    },
    {
        "content": "<p>except that I strongly suspect that these don't exist...</p>",
        "id": 220279946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608228459
    }
]