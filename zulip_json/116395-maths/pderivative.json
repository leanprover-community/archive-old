[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span>, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I just approved the PR about <code>mv_polynomial</code>. I do like the idea of adding the lemma you proposed,</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">pderivative_eq_zero_of_not_mem_vars</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"err\">∉</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pderivative</span> <span class=\"n\">v</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>but let's do it in a subsequent PR.</p>",
        "id": 192884601,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585966823
    },
    {
        "content": "<p>(You can just make a new branch off your <code>pderivative</code> branch for now, if you want to do this.)</p>",
        "id": 192884613,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585966846
    },
    {
        "content": "<p>I had a look, at it looks like what you've said you already did in the PR comment thread means we're pretty close.</p>",
        "id": 192884627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585966870
    },
    {
        "content": "<p>I would suggest adding:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">as_sum</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">support_sum_monomial_coeff</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">monomial</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">v</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single</span> <span class=\"n\">p</span>\n\n<span class=\"c1\">-- This probably isn&#39;t necessary, but it&#39;s nice for readability to be able</span>\n<span class=\"c1\">-- to write `rw p.as_sum`.</span>\n<span class=\"c1\">-- (See also `polynomial.as_sum`.)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">as_sum</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">monomial</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">coeff</span> <span class=\"n\">v</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">support_sum_monomial_coeff</span> <span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">as_sum</span>\n</pre></div>\n\n\n<p>to <code>mv_polynomial.lean</code> immediately after the <code>coeff</code> section.</p>",
        "id": 192884642,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585966902
    },
    {
        "content": "<p>then adding</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">pderivative</span><span class=\"bp\">.</span><span class=\"n\">add_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"bp\">→+</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">pderivative</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">pderivative</span><span class=\"bp\">.</span><span class=\"n\">add_monoid_hom_apply</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">pderivative</span><span class=\"bp\">.</span><span class=\"n\">add_monoid_hom</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">pderivative</span> <span class=\"n\">v</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>inside your <code>pderivative</code> section, probably immediately after you've proved those two <code>sorry</code>s.</p>",
        "id": 192884694,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585966939
    },
    {
        "content": "<p>After which the proof of the lemma should go smoothly:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">pderivative_eq_zero_of_not_mem_vars</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"err\">∉</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">vars</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pderivative</span> <span class=\"n\">v</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">pderivative</span><span class=\"bp\">.</span><span class=\"n\">add_monoid_hom</span> <span class=\"n\">R</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">as_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">map_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">conv_lhs</span> <span class=\"o\">{</span>\n    <span class=\"n\">apply_congr</span><span class=\"o\">,</span>\n    <span class=\"n\">skip</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- rest of the proof (a lemma about monomials) goes here!</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192884712,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585966989
    },
    {
        "content": "<p>Alright, thanks for your help. I'll take a look at that later.</p>",
        "id": 192890953,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1585978186
    },
    {
        "content": "<p>Alright, thanks for your help. I'll take a look at that later.</p>",
        "id": 192890957,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1585978197
    }
]