[
    {
        "content": "<p>Here's another \"canonical isomorphism\" question. Johannes has implemented multivariate polynomials with variables in some index type sigma.</p>",
        "id": 126058586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372470
    },
    {
        "content": "<p>But the univariate theory (polynomials in one variable) is special</p>",
        "id": 126058599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372494
    },
    {
        "content": "<p>there are more theorems, for example; over a field these things form a Euclidean domain and a principal ideal domain etc</p>",
        "id": 126058621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372523
    },
    {
        "content": "<p>so there is probably an argument for developing the theory of polynomials in one variable further.</p>",
        "id": 126058631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372541
    },
    {
        "content": "<p>But one doesn't want to reprove everything</p>",
        "id": 126058638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372549
    },
    {
        "content": "<p>and for polynomials in one variable, Johannes' definition becomes <code>(unit -&gt; nat) -&gt;_0 alpha</code></p>",
        "id": 126058689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372574
    },
    {
        "content": "<p>and <code>unit -&gt; nat</code> is just canonically isomorphic to nat</p>",
        "id": 126058693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372591
    },
    {
        "content": "<p>so now we have a sort-of insane way of setting up univariate polys</p>",
        "id": 126058734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372633
    },
    {
        "content": "<p>and a sensible way</p>",
        "id": 126058744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372653
    },
    {
        "content": "<p>and one would imagine that the sensible way, nat -&gt;_0 alpha, was the thing to use</p>",
        "id": 126058793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372701
    },
    {
        "content": "<p>but one wants to import all Johannes' work for free, like definitions and the proof that polynomials form a ring etc</p>",
        "id": 126058799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372715
    },
    {
        "content": "<p>so one first notes that there's an equiv between nat and (unit -&gt; nat)</p>",
        "id": 126058801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372732
    },
    {
        "content": "<p>and then one wants to pull all of Johannes' definitions and theorems through this equiv</p>",
        "id": 126058808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372745
    },
    {
        "content": "<p>but currently in Lean this seems hard. Is that right?</p>",
        "id": 126058877,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372812
    },
    {
        "content": "<p>I see. And this takes us back to exactly what we were thinking about a few days ago</p>",
        "id": 126058980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372967
    },
    {
        "content": "<p>whether ring is transportable</p>",
        "id": 126058981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372972
    },
    {
        "content": "<p>(and it should be)</p>",
        "id": 126058985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525372979
    },
    {
        "content": "<p>The short answer is yes, this is hard, but really it doesn't quite characterize the problem so well. We don't <em>want</em> to transfer the ring structure of <code>(unit -&gt; nat) -&gt;_0 alpha</code> to <code>nat -&gt;_0 alpha</code> in the \"naive way\" because this would make all the operations filter through the equivalence which would make them hard to use</p>",
        "id": 126059273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525373267
    },
    {
        "content": "<p>(not to mention inefficient, not sure if we are deciding to care about this here)</p>",
        "id": 126059350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525373304
    },
    {
        "content": "<p>So if we need univariate polys</p>",
        "id": 126059372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525373341
    },
    {
        "content": "<p>is the best idea currently just to re-implement them? :-/</p>",
        "id": 126059391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525373359
    },
    {
        "content": "<p>we would want instead to define the operations specially for univariate polys, but prove that the canonical equiv is a ring homomorphism and use that to prove that the other structure is a ring</p>",
        "id": 126059411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525373388
    },
    {
        "content": "<p>this is basically what <code>transfer</code> is intended to do</p>",
        "id": 126059474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525373415
    },
    {
        "content": "<p>You should check out <code>num</code> a bit to see how the process can work</p>",
        "id": 126059492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525373439
    },
    {
        "content": "<p>I define operations on <code>num</code> that act like corresponding operations on <code>nat</code>, prove that the map from <code>nat</code> to <code>num</code> preserves the operations, and use that to prove that <code>num</code> is a <code>decidable_linear_ordered_semiring</code> or whatever</p>",
        "id": 126059536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525373494
    },
    {
        "content": "<p>Can't we have some <code>meta</code> code that automatically generates all the theorems and proof, given the <code>equiv</code>, so that it does the reimplementation for us? Together with transport statements that link the new implementation to the old one...</p>",
        "id": 126059543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525373520
    },
    {
        "content": "<p>This approach is \"better\" than the one used to transfer proofs from multiplicative groups to additive groups, right?</p>",
        "id": 126059579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525373523
    },
    {
        "content": "<p>That's <code>transfer</code></p>",
        "id": 126059588,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525373528
    },
    {
        "content": "<p>Because there the two types are themselves equivalent in a strong sense</p>",
        "id": 126059591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525373537
    },
    {
        "content": "<p>so you can literally translate a proof that a group with multiplication as group law has some property, to the same proof that a group with addition as group law has some analogous property</p>",
        "id": 126059616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525373582
    },
    {
        "content": "<p>but here unit -&gt; nat is a different type to nat</p>",
        "id": 126059644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525373628
    },
    {
        "content": "<p>In some sense the equiv from <code>add_group</code> to <code>group</code> is \"cheap\"</p>",
        "id": 126059694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525373658
    },
    {
        "content": "<p>and the underlying carrier types are defeq, which helps a lot</p>",
        "id": 126059719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525373706
    },
    {
        "content": "<p>and so the argument somehow relies on the fact that Johannes didn't do anything funny with his unit -&gt; nat type which we can't also do with the nat type</p>",
        "id": 126059726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525373711
    },
    {
        "content": "<p>For more general equivalences, <code>equiv</code> does the job</p>",
        "id": 126059793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525373767
    },
    {
        "content": "<p>the argument doesn't rely on anything more</p>",
        "id": 126059797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525373778
    },
    {
        "content": "<p>(but you do have to prove that the equiv respects the operations)</p>",
        "id": 126059808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525373792
    },
    {
        "content": "<p>Stupid question</p>",
        "id": 126059835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525373829
    },
    {
        "content": "<p>what is an example of something you can do in type theory for unit -&gt; nat which you can't do for nat</p>",
        "id": 126059844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525373844
    },
    {
        "content": "<p>I can't make that rigorous</p>",
        "id": 126059852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525373852
    },
    {
        "content": "<p>they are equiv, so nothing?</p>",
        "id": 126059855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525373855
    },
    {
        "content": "<p>In PL theory they are a bit different, since one is like a delayed computation and the other is a value, but I assume you are ignoring this distinction</p>",
        "id": 126059918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525373895
    },
    {
        "content": "<p>yes</p>",
        "id": 126059927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525373904
    },
    {
        "content": "<p>If equiv commutes with everything in dependent type theory</p>",
        "id": 126059948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525373928
    },
    {
        "content": "<p>why isn't this transportable stuff just standard and built in?</p>",
        "id": 126059956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525373940
    },
    {
        "content": "<p>Is it in Coq?</p>",
        "id": 126059967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525373948
    },
    {
        "content": "<p>Of course it doesn't commute with everything, but you can always lift operations by pre/post composing with it</p>",
        "id": 126059977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525373968
    },
    {
        "content": "<p>right</p>",
        "id": 126059987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525373981
    },
    {
        "content": "<p>and if you go from X to Y and then back to X you will have the identity</p>",
        "id": 126059996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525373996
    },
    {
        "content": "<p>you will have propositionally the identity, it's (probably) not defeq</p>",
        "id": 126060061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374017
    },
    {
        "content": "<p>oh boy</p>",
        "id": 126060069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374027
    },
    {
        "content": "<p>that means that you may need to cast stuff across the equality</p>",
        "id": 126060073,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374036
    },
    {
        "content": "<p>but can a computer construct the proof if it's not defeq?</p>",
        "id": 126060084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374053
    },
    {
        "content": "<p>and those casts build up and get more complicated</p>",
        "id": 126060087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374053
    },
    {
        "content": "<p>the proof is given, it's an equiv so that's part of the structure</p>",
        "id": 126060115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374093
    },
    {
        "content": "<p>Ouch, so this is going to break us up if we are somewhere deep down in the guts of formalising the proof of the Weil conjectures</p>",
        "id": 126060181,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525374151
    },
    {
        "content": "<p>Because you exceed <code>max_transfers</code> which was set to <code>1000</code> or something...</p>",
        "id": 126060195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525374175
    },
    {
        "content": "<p>just try to have a better way to say stuff than transferring some other statement when casts get involved</p>",
        "id": 126060212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374197
    },
    {
        "content": "<p>(Maybe I am blatantly displaying my ignorance...)</p>",
        "id": 126060217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525374203
    },
    {
        "content": "<p>mostly avoid too many dependent types</p>",
        "id": 126060227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374212
    },
    {
        "content": "<p>we don't care that the proofs can get complicated because they are irrelevant</p>",
        "id": 126060234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374226
    },
    {
        "content": "<p>I'm talking about terms</p>",
        "id": 126060237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374233
    },
    {
        "content": "<p>right</p>",
        "id": 126060241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374237
    },
    {
        "content": "<p>if I want to define affine 1-space</p>",
        "id": 126060283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374243
    },
    {
        "content": "<p><code>Spec(R[x])</code></p>",
        "id": 126060288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374251
    },
    {
        "content": "<p>then in the definition of e.g. the local ring at some point</p>",
        "id": 126060295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374275
    },
    {
        "content": "<p>there will be casts everywhere</p>",
        "id": 126060296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374280
    },
    {
        "content": "<p>it will be unreadable</p>",
        "id": 126060299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374291
    },
    {
        "content": "<p>Mario, I am a bit afraid that this is not so easy to avoid... or the formalisation might become way more difficult then they \"maths\" proof</p>",
        "id": 126060301,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525374292
    },
    {
        "content": "<p>It's all about modularity</p>",
        "id": 126060311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374311
    },
    {
        "content": "<p>just break stuff up into bite sized chunks and it's all doable</p>",
        "id": 126060317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374327
    },
    {
        "content": "<p>Is this the reason that all the big type theory proofs of maths theorems are proofs about objects like finite groups rather than locally Noetherian schemes?</p>",
        "id": 126060318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374342
    },
    {
        "content": "<p>problems pile up</p>",
        "id": 126060325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374362
    },
    {
        "content": "<p>and it's difficult to make them go away</p>",
        "id": 126060364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374366
    },
    {
        "content": "<p>Ok, then I misunderstood you. I thought that if you started combining these \"modules\" then some evil synergy would multiply their \"badness of casts\"</p>",
        "id": 126060371,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525374390
    },
    {
        "content": "<p>Just have solid abstraction layers, as long as the informal math doesn't get notationally horrible the formal horribleness is bounded</p>",
        "id": 126060386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374427
    },
    {
        "content": "<p>Ok, I really hope so.</p>",
        "id": 126060396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525374447
    },
    {
        "content": "<p>The multiplying badness of casts happens when you try to do it in general over the whole theory</p>",
        "id": 126060405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374470
    },
    {
        "content": "<p>If Kevin is meeting all these problems in the definition of an affine scheme... then we want 1) all sorts of properties of morphisms of schemes, 2) topos theory, 3) derived categories, 4) etale cohomology, 5)... etc etc</p>",
        "id": 126060451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525374501
    },
    {
        "content": "<p>i.e. you write some tactic that just plows through the whole system to transfer any term across some equiv</p>",
        "id": 126060452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374502
    },
    {
        "content": "<p>before you can even sensibly formulate the Weil conjectures</p>",
        "id": 126060453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525374511
    },
    {
        "content": "<p>these kinds of tactics care nothing for abstraction</p>",
        "id": 126060467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374549
    },
    {
        "content": "<p>Hmmm, I'm still confused...</p>",
        "id": 126060472,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525374585
    },
    {
        "content": "<p>Do you think that in the end we can have automation help us with these transfers, and still have the modularity? Or does the automation mean that it will \"plow through the system\"?</p>",
        "id": 126060531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525374630
    },
    {
        "content": "<p>When I started reading proofs in mathlib</p>",
        "id": 126060538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374642
    },
    {
        "content": "<p>I was really confused why people would create a new structure and then instantly write functions giving access to the things used to construct the structure</p>",
        "id": 126060552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374667
    },
    {
        "content": "<p>but</p>",
        "id": 126060554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374673
    },
    {
        "content": "<p>it's all part</p>",
        "id": 126060558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374675
    },
    {
        "content": "<p>of a solid abstraction layer</p>",
        "id": 126060563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374687
    },
    {
        "content": "<p>Hmm, that's a good example. A \"mathematician\" wouldn't (want) to do that.</p>",
        "id": 126060576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525374714
    },
    {
        "content": "<p>Again, couldn't some automation do that for us?</p>",
        "id": 126060619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525374727
    },
    {
        "content": "<p>Getting the code to run fast is not our problem :-)</p>",
        "id": 126060623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374734
    },
    {
        "content": "<p>In theory, but it probably would need lots of tweaks</p>",
        "id": 126060635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374751
    },
    {
        "content": "<p>You just wait for either the CS people to write better tactics or for the engineers to write faster chips</p>",
        "id": 126060637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374752
    },
    {
        "content": "<p>If I write <code>structure</code> then Lean should immediately add those boilerplate things...</p>",
        "id": 126060639,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525374760
    },
    {
        "content": "<p>Sometimes the access to the constructor has a different name to the constructor</p>",
        "id": 126060651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374783
    },
    {
        "content": "<p>that happens with the proofs in equiv IIRC</p>",
        "id": 126060657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374790
    },
    {
        "content": "<p>If you look closely you will notice that the \"boilerplate\" often differs in minor details like use of notation, binding explicitness,...</p>",
        "id": 126060663,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374801
    },
    {
        "content": "<p>The <code>structure</code> command already tries its best to give you theorems the way you want</p>",
        "id": 126060679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374835
    },
    {
        "content": "<p>but it's using heuristics, and sometimes we want it different in a particular case</p>",
        "id": 126060733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374868
    },
    {
        "content": "<p>Yeah, I've seen that. So maybe we \"mathematicians\" should just learn to be more precise. (But we don't buy that mathematics isn't precise enough...)</p>",
        "id": 126060736,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525374869
    },
    {
        "content": "<p>It's like how there are (natural language) grammar rules, but also exceptions</p>",
        "id": 126060767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525374922
    },
    {
        "content": "<p><code>equiv.apply_inverse_apply</code></p>",
        "id": 126060771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374946
    },
    {
        "content": "<p>There's a solid abstraction layer in action</p>",
        "id": 126060816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525374972
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">apply_inverse_apply</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 126061032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525375318
    },
    {
        "content": "<p>How about writing a <code>regex</code> which will replace all <code>(sigma -&gt;_0 nat)</code> with <code>(nat)</code> and then make it all work again?</p>",
        "id": 126068166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525385315
    },
    {
        "content": "<p>that sounds like an interesting challenge</p>",
        "id": 126068171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525385339
    },
    {
        "content": "<p>That sounds like it should wait for lean 4, when the parser is exposed to lean code</p>",
        "id": 126075513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525399333
    },
    {
        "content": "<p>But we could just do an actual copy-paste-search-replace, right? The only thing that would remain is some theorems that say the result is isomorphic to what you started with.</p>",
        "id": 126083049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525415739
    },
    {
        "content": "<p><a href=\"https://github.com/johoelzl/mason-stother/blob/e6e1eb353d3dbea93571f761b408bc4900472179/poly_over_field.lean#L138\" target=\"_blank\" title=\"https://github.com/johoelzl/mason-stother/blob/e6e1eb353d3dbea93571f761b408bc4900472179/poly_over_field.lean#L138\">https://github.com/johoelzl/mason-stother/blob/e6e1eb353d3dbea93571f761b408bc4900472179/poly_over_field.lean#L138</a></p>",
        "id": 126116550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525472191
    },
    {
        "content": "<p>Johannes or his coauthor implemented polys in 1 variable already</p>",
        "id": 126116566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525472243
    },
    {
        "content": "<p>Wow, there's already quite a lot there!</p>",
        "id": 126149005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525545539
    },
    {
        "content": "<p>I'm not too up on univariate polynomials in Lean yet. Does anyone know if we have: <br>\n\"evaluation of <code>p : Z[x]</code> at <code>x : R</code> is a ring homomorphism from <code>Z[x]</code> to <code>R</code>\"?</p>",
        "id": 126195259,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1525656575
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> Voila, but multivariate: <a href=\"https://github.com/leanprover/mathlib/blob/master/linear_algebra/multivariate_polynomial.lean#L171-L173\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/linear_algebra/multivariate_polynomial.lean#L171-L173\">https://github.com/leanprover/mathlib/blob/master/linear_algebra/multivariate_polynomial.lean#L171-L173</a></p>",
        "id": 126202825,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525674754
    },
    {
        "content": "<p>Ok, and they haven't made it a ring homomorphism, but they show that it is additive and multiplicative...</p>",
        "id": 126202875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525674874
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> what is the status of <a href=\"https://github.com/johoelzl/mason-stother\" target=\"_blank\" title=\"https://github.com/johoelzl/mason-stother\">https://github.com/johoelzl/mason-stother</a>? I guess JWageM is your student or something like this? Will this be in mathlib at some point?</p>",
        "id": 126204324,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525678109
    },
    {
        "content": "<p>Yes, <span class=\"user-mention\" data-user-id=\"111160\">@Jens Wagemaker</span> is currently writing his Bachelor thesis on Mason-Stother. The theory itself is finished, and now he is writing the thesis itself. When this is finished we will port most parts of the developed theory to mathlib. Most parts, as we assume that polynomials over a field form a unique factorization domain, so everything from there on will need to wait until this is done. And there is quiet some divergence between the mathlib version Jens used and the current one, so there is some merging to be done.</p>",
        "id": 126204480,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1525678462
    },
    {
        "content": "<p>I think someone did Euclidean domains recently</p>",
        "id": 126204489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525678532
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/d5c73c0b372d1181ca386e3264497e2c56077d93/algebra/euclidean_domain.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/d5c73c0b372d1181ca386e3264497e2c56077d93/algebra/euclidean_domain.lean\">https://github.com/leanprover/mathlib/blob/d5c73c0b372d1181ca386e3264497e2c56077d93/algebra/euclidean_domain.lean</a></p>",
        "id": 126204491,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525678553
    },
    {
        "content": "<p>So it shouldn't be too hard to get UFD for polynomials with one variable over a field</p>",
        "id": 126204534,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1525678627
    },
    {
        "content": "<p>No, it shouldn't be hard. Just needs to be done.</p>",
        "id": 126204536,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1525678654
    },
    {
        "content": "<p>It seems to me that maybe <code>eval</code> should take its arguments in the opposite order. Then one can curry it, and get a (semi)-ring homomorphism.</p>",
        "id": 126250080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525758389
    },
    {
        "content": "<p>Does that make sense?</p>",
        "id": 126250085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525758408
    },
    {
        "content": "<p>Here is a commit that swaps the order of the arguments, and also proves that <code>eval f</code> is a ring homomorphism:<br>\n<a href=\"https://github.com/jcommelin/mathlib/commit/b0d0ca6d2892c902c5feffdfa58d3e3be2b013b2\" target=\"_blank\" title=\"https://github.com/jcommelin/mathlib/commit/b0d0ca6d2892c902c5feffdfa58d3e3be2b013b2\">https://github.com/jcommelin/mathlib/commit/b0d0ca6d2892c902c5feffdfa58d3e3be2b013b2</a></p>",
        "id": 126253365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525765294
    },
    {
        "content": "<p>Looks promising!</p>",
        "id": 126254364,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1525767338
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> chaning the argument order of <code>eval</code> is a good idea. But is there a reason why you changed the applications from <code>p.eval f</code> to <code>eval f p</code>? Even with the changed order the <code>p.eval f</code> syntax should work. Lean figures out that <code>p</code> is a polynomial and looks up <code>mv_polynomial.eval</code>, inserting <code>p</code> at the appropriate place.</p>",
        "id": 126254544,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1525767634
    },
    {
        "content": "<p>Ok cool!</p>",
        "id": 126254565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525767657
    },
    {
        "content": "<p>I didn't know that</p>",
        "id": 126254567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525767663
    },
    {
        "content": "<p>But then, maybe I actually prefer <code>f.eval (p+q)</code> etc...</p>",
        "id": 126254573,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525767679
    },
    {
        "content": "<p>What do you think of that?</p>",
        "id": 126254574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525767687
    },
    {
        "content": "<p>And then <code>f.eval</code> becomes a ring hom</p>",
        "id": 126254576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525767698
    },
    {
        "content": "<p>Aah, but that won't work, I guess... because then it doens't know where to find <code>eval</code></p>",
        "id": 126254633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525767756
    },
    {
        "content": "<p>Right?</p>",
        "id": 126254634,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525767758
    },
    {
        "content": "<p>There is some namespacing-magic going on, and that is why <code>p.eval</code> does work?</p>",
        "id": 126254638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525767778
    },
    {
        "content": "<p>/me is still learning new things every minute</p>",
        "id": 126254644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525767791
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> I think I prefer the <code>eval f p</code> notation. Even better would be some sort of <code>eval_f p</code>.</p>",
        "id": 126254816,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525768114
    },
    {
        "content": "<p>Also, as a mathematician I always write <code>f</code> for polynomials, and <code>p</code> or <code>x</code> for the map <code>\\sigma \\to \\alpha</code>. So that was pretty confusing (-;</p>",
        "id": 126254826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525768148
    },
    {
        "content": "<p>Well I would write <code>f</code> for the polynomial function (i.e. a function which can be represented as a polynomial) but I write <code>p</code>, <code>q</code> etc for the syntactic object.</p>",
        "id": 126254914,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1525768317
    },
    {
        "content": "<p>Yeah, I get that. (I only work with the syntactic objects... not the functions.)</p>",
        "id": 126254978,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525768437
    },
    {
        "content": "<p>Also, <code>f.eval p</code> doesn't work as <code>f</code> is in the function space, which AFAIK doesn't work with this syntax mechanism.</p>",
        "id": 126255021,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1525768465
    },
    {
        "content": "<p>I prefer <code>p.eval f</code> as <code>eval</code> is a very generic name, and we will surely have multiple instances in different namespaces. <code>p.eval</code> makes it clear that we are referring to the polynomial one.</p>",
        "id": 126255032,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1525768515
    },
    {
        "content": "<p>It is not necessary in <code>mv_polynomial</code>, but might be in other cases.</p>",
        "id": 126255034,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1525768532
    },
    {
        "content": "<p>Ok, whichever you prefer. Should I change it and PR it?</p>",
        "id": 126255170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525768768
    },
    {
        "content": "<p>Yeah, just change it back how it was before.</p>",
        "id": 126255387,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1525769115
    },
    {
        "content": "<p>Oh my, it looks like I overdid it: <a href=\"https://github.com/jcommelin/mathlib/commit/2f63d86718e9e00ea55f67cb22f0f306fe8fcde3\" target=\"_blank\" title=\"https://github.com/jcommelin/mathlib/commit/2f63d86718e9e00ea55f67cb22f0f306fe8fcde3\">https://github.com/jcommelin/mathlib/commit/2f63d86718e9e00ea55f67cb22f0f306fe8fcde3</a></p>",
        "id": 126255866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525769974
    },
    {
        "content": "<p>why do you remove <code>eval_zero</code>?</p>",
        "id": 126258142,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1525774372
    },
    {
        "content": "<p>Because it follows from <code>eval_C</code>...</p>",
        "id": 126259831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525777688
    },
    {
        "content": "<p>But the simplifier doesn't see that <code>0 = C 0</code>! This is the reason for <code>eval_zero</code>: it is a <code>@[simp]</code> rule.</p>",
        "id": 126260018,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1525778044
    },
    {
        "content": "<p>Hmmm, my bad...</p>",
        "id": 126260363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525778819
    },
    {
        "content": "<p>I'll fix it</p>",
        "id": 126260364,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525778821
    },
    {
        "content": "<p><a href=\"https://github.com/jcommelin/mathlib/commit/fa1710d88ff007cd947645136dd6c8986028430d\" target=\"_blank\" title=\"https://github.com/jcommelin/mathlib/commit/fa1710d88ff007cd947645136dd6c8986028430d\">https://github.com/jcommelin/mathlib/commit/fa1710d88ff007cd947645136dd6c8986028430d</a><br>\nVoila</p>",
        "id": 126260507,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525779068
    }
]