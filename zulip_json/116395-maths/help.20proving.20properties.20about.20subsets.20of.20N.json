[
    {
        "content": "<p>hey, I am trying to set up the following proof about primitive sets:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.factors</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_primitive</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">variable</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_primitive</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>\n<p>but I am getting <code>invalid binder declaration, delimiter/bracket expected (i.e., '(', '{', '[', '{{')</code> after <code>is_primitive P</code>... what am I doing wrong here?<span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 320115117,
        "sender_full_name": "Michael Nestor",
        "timestamp": 1673208936
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.nat.factors</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_primitive</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">%</span> <span class=\"n\">b</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"bp\">|</span> <span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_primitive_P</span> <span class=\"o\">:</span> <span class=\"n\">is_primitive</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 320115204,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673208980
    },
    {
        "content": "<p><code>variable</code> is to declare local variables, not to define \"global variables\" (which I guess is how you were thinking of it)</p>",
        "id": 320115265,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673209025
    },
    {
        "content": "<p>ahh ok I should have remembered propositions&lt;=&gt;types! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> but, I still get the aforementioned error after stating the lemma</p>",
        "id": 320115451,
        "sender_full_name": "Michael Nestor",
        "timestamp": 1673209156
    },
    {
        "content": "<p>Whoops, sorry, fixed</p>",
        "id": 320115541,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673209209
    },
    {
        "content": "<p>You had forgotten to name the lemma and to add a colon before the lemma statement</p>",
        "id": 320115588,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673209248
    },
    {
        "content": "<p>got it! thank you</p>",
        "id": 320115628,
        "sender_full_name": "Michael Nestor",
        "timestamp": 1673209277
    },
    {
        "content": "<p>Isn't the only set satisfying your <code>is_primitive</code> the empty set?</p>",
        "id": 320116920,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673210219
    },
    {
        "content": "<p>Consider <code>a = b</code></p>",
        "id": 320116927,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673210223
    },
    {
        "content": "<p>Indeed. Here's a better definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_primitive</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">s.pairwise</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">∣</span> <span class=\"n\">b</span>\n</code></pre></div>",
        "id": 320117079,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673210342
    }
]