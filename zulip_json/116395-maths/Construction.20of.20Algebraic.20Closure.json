[
    {
        "content": "<p>I saw many constructions of the algebraic closure of a field <strong>k</strong> using direct limit, but I have a different construction in mind:<br>\nThe set <strong>k-bar</strong> is { (f,n) in k[X] x N | f is irreducible and n &lt; deg f }. The n represents the n-th root of the polynomial.<br>\nAddition and multiplicatoin can be defined using resultant.<br>\nIs this construction valid? Would this be a better construction?</p>",
        "id": 127264707,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527617001
    },
    {
        "content": "<p>Hmm, maybe I'm being silly. But how do you order the roots?</p>",
        "id": 127264852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527617166
    },
    {
        "content": "<p>I don't</p>",
        "id": 127264858,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527617176
    },
    {
        "content": "<p>Ok, so how do you do addition and multiplication?</p>",
        "id": 127264862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527617191
    },
    {
        "content": "<p>For f and g, I use resultant to construct h that contains all the roots</p>",
        "id": 127264874,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527617214
    },
    {
        "content": "<p>then just, you know, do the thing</p>",
        "id": 127264876,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527617221
    },
    {
        "content": "<p>if f has deg m and g has deg n, then h has deg mn</p>",
        "id": 127264884,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527617231
    },
    {
        "content": "<p>no this doesn't work</p>",
        "id": 127264885,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527617238
    },
    {
        "content": "<p>I mean, your approach looks very constructive. But we know that you need choice for k-bar</p>",
        "id": 127264932,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527617283
    },
    {
        "content": "<p>So that makes me suspicious</p>",
        "id": 127264948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527617294
    },
    {
        "content": "<p>do you need choice for the direct limit construction?</p>",
        "id": 127264979,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527617375
    },
    {
        "content": "<p>Yes, you want to use Zorn to pick a maximal element</p>",
        "id": 127265144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527617561
    },
    {
        "content": "<p>Does this mean you are going to refuse the project that Kevin gave you?</p>",
        "id": 127265313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527617701
    },
    {
        "content": "<p>I think the problem is when I add 1+sqrt(2) and -sqrt(2)</p>",
        "id": 127265318,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527617704
    },
    {
        "content": "<p>no, that doesn't</p>",
        "id": 127265321,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527617707
    },
    {
        "content": "<p>and how do you know about the project</p>",
        "id": 127265337,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527617720
    },
    {
        "content": "<p>Kevin mentioned somewhere that you were working on some algebraic stuff</p>",
        "id": 127265356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527617745
    },
    {
        "content": "<p>for a project that he gave you</p>",
        "id": 127265363,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527617751
    },
    {
        "content": "<p>Anyway, I think it is very cool. I have been thinking about Galois theory. But I was daunted by defining the algebraic closure.</p>",
        "id": 127265431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527617797
    },
    {
        "content": "<p>I haven't worked with Choice yet in Lean</p>",
        "id": 127265438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527617807
    },
    {
        "content": "<p>nice</p>",
        "id": 127265446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527617821
    },
    {
        "content": "<p>But we really need Galois theory</p>",
        "id": 127265451,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527617825
    },
    {
        "content": "<p>stop before you are corrupted by choice</p>",
        "id": 127265454,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527617826
    },
    {
        "content": "<blockquote>\n<p>I mean, your approach looks very constructive. But we know that you need choice for k-bar</p>\n</blockquote>\n<p>we all know that you don't need choice for F_p-bar or Q-bar or R-bar</p>",
        "id": 127265476,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527617850
    },
    {
        "content": "<p>Yes, I also reject infinity (-;</p>",
        "id": 127265478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527617853
    },
    {
        "content": "<p>Yes you can't do add this way Kenny</p>",
        "id": 127265798,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527618232
    },
    {
        "content": "<p>The problem is that what you are doing in your head, is this:</p>",
        "id": 127265799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527618240
    },
    {
        "content": "<p>if you have have two polynomials f(X) and g(X), irreducible in k[X] say</p>",
        "id": 127265841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527618252
    },
    {
        "content": "<p>then you are doing mathematics in the ring k[X]/(f) tensor_k k[X]/(g)</p>",
        "id": 127265843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527618266
    },
    {
        "content": "<p>and unfortunately this is not in general a field</p>",
        "id": 127265847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527618277
    },
    {
        "content": "<p>Consider the polynomials f(X)=X^3-2 and g(X)=(X+1)^3-2. Both are irredudible over Q</p>",
        "id": 127265880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527618332
    },
    {
        "content": "<p>You order the roots of both of them</p>",
        "id": 127265886,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527618339
    },
    {
        "content": "<p>If you do this construction, I would like to have a computable algebraic numbers construction from it</p>",
        "id": 127265888,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527618345
    },
    {
        "content": "<p>but who is to say that if a,b,c was the first order then a-1,b-1,c-1 was the second one</p>",
        "id": 127265897,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527618355
    },
    {
        "content": "<p>but we all know that Q-bar is computable</p>",
        "id": 127265942,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527618367
    },
    {
        "content": "<p>so who can possibly tell when (root 1 of f) - (root 1 of g) is 1 or not?</p>",
        "id": 127265948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527618374
    },
    {
        "content": "<p>The problem is that whilst g is irreducible over Q</p>",
        "id": 127265965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527618416
    },
    {
        "content": "<p>it is not irreducible over the larger field Q[X]/(f)</p>",
        "id": 127265970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527618424
    },
    {
        "content": "<p>indeed, it factors into a linear and an irreducible quadric over this larger field</p>",
        "id": 127265983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527618443
    },
    {
        "content": "<p>so now all of a sudden the roots are not as indistinguishable as they used to be</p>",
        "id": 127265988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527618457
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <a href=\"https://github.com/math-comp/math-comp/blob/master/mathcomp/field/countalg.v\" target=\"_blank\" title=\"https://github.com/math-comp/math-comp/blob/master/mathcomp/field/countalg.v\">here</a> is a formalized construction of the algebraic closure of countable fields. It heavily relies on <a href=\"https://github.com/math-comp/math-comp/blob/master/mathcomp/field/algebraics_fundamentals.v\" target=\"_blank\" title=\"https://github.com/math-comp/math-comp/blob/master/mathcomp/field/algebraics_fundamentals.v\">this</a>, the existence of an algebraically closed field with an   automorphism of order 2. <a href=\"https://github.com/math-comp/math-comp/blob/master/mathcomp/field/algC.v\" target=\"_blank\" title=\"https://github.com/math-comp/math-comp/blob/master/mathcomp/field/algC.v\">Here</a>  is an abstract construction of algebraic numbers. I can help deciphering the statements and proofs if you're interested. But several of these files have long headers describing what's done in them.</p>",
        "id": 127274084,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1527627729
    },
    {
        "content": "<p>thanks</p>",
        "id": 127274120,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527627824
    },
    {
        "content": "<p>And all this is constructive. It only relies on the fact that there is choice operator on countable types with a decidable equality. This is provable in Coq without extra axioms, but using a subtle singleton elimination argument. I do not know if the same holds in Lean.</p>",
        "id": 127274182,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1527627867
    },
    {
        "content": "<p>we don't have the axiom of unique choice in Lean, if that's what you mean</p>",
        "id": 127274220,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527627920
    },
    {
        "content": "<p>I suppose we can look at the preimage under the bijection from N and find the minimum element</p>",
        "id": 127274231,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527627946
    },
    {
        "content": "<p>No this is not what I mean, unique choice does not hold in Coq either.</p>",
        "id": 127274233,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1527627952
    },
    {
        "content": "<p>then it should still be constructive in Lean</p>",
        "id": 127274235,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527627953
    },
    {
        "content": "<p>There is a choice operator on countable types in lean</p>",
        "id": 127274326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527628059
    },
    {
        "content": "<p><code>encodable.choose</code> in <code>data.encodable</code></p>",
        "id": 127274374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527628084
    },
    {
        "content": "<p>Noooo! Assia, please don't encourage Kenny in his constructive deviance</p>",
        "id": 127274391,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527628117
    },
    {
        "content": "<p>Ah thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>, I was trying to dig into Lean to see if I could find it.</p>",
        "id": 127274403,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1527628140
    },
    {
        "content": "<p>The axiomatically basic one is <code>nat.find</code></p>",
        "id": 127274413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527628159
    },
    {
        "content": "<p>Hi again <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>! Don't worry, I am just saying that for countable fields, classical proofs are constructive, in fact. I don't think that constructivism is the difficult issue here but I may well have forgotten how easy classical life is.</p>",
        "id": 127274688,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1527628528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Construction.20of.20Algebraic.20Closure/near/127274413\">said</a>:</p>\n<blockquote>\n<p>The axiomatically basic one is <code>nat.find</code></p>\n</blockquote>\n<p>What do you mean by axiomatically basic? <code>#print axioms nat.find</code> shows <code>classical.choice</code> <code>quot.sound</code> and <code>propext</code>, so essentially all the axioms.<br>\nIn ZF set theory it doesn't require any choice. I wonder if adding the axiom of unique choice makes Lean suitable for formalizing implications between different forms of choice in set theory, like dependent choice or ultrafilter lemma.<br>\nThe use of choice seems to make <code>nat.find</code> noncomputable, which is confusing as it's just the mu-operator (as in mu-recursive functions, even with a termination guarantee). Is Lean using a stronger notion of computability somewhere between primitive recursive and recursive? To be clear, <code>nat.find</code> itself isn't labeled <code>noncomputable</code>, but the following code</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">bld_extr</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span>\n  <span class=\"c1\">-- build a extraction (indices for increasing subsequence) satisfying condition p</span>\n  <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">bld_extr</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>yields the message</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">equation</span> <span class=\"n\">compiler</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"n\">bytecode</span> <span class=\"n\">for</span> <span class=\"err\">&#39;</span><span class=\"n\">bld_extr</span><span class=\"bp\">._</span><span class=\"n\">main&#39;</span>\n<span class=\"n\">nested</span> <span class=\"n\">exception</span> <span class=\"n\">message</span><span class=\"o\">:</span>\n<span class=\"n\">code</span> <span class=\"n\">generation</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">VM</span> <span class=\"n\">does</span> <span class=\"n\">not</span> <span class=\"k\">have</span> <span class=\"n\">code</span> <span class=\"n\">for</span> <span class=\"err\">&#39;</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice&#39;</span>\n</code></pre></div>\n\n\n<p>which disappears when I add the <code>noncomputable</code> prefix.</p>\n<p>However, the code <code>def f := nat.find (by use 0; trivial : ∃n:ℕ, n=n)</code> yields a different message <code>definition 'f' is noncomputable, it depends on 'classical.prop_decidable'</code>.</p>",
        "id": 207030881,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1597512244
    },
    {
        "content": "<p><code>h</code> is not decidable</p>",
        "id": 207030901,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597512310
    },
    {
        "content": "<p>The first message points to <code>choice</code> as a problem, while the second message is strange: <br>\n<code>def nat.​find {p : ℕ → Prop} [decidable_pred p] : (∃ (n : ℕ), p n) → ℕ</code> only requires <code>p</code> to be decidable. In this case, <code>p</code> is <code>n=n</code>, which Lean should know/be able to infer is decidable.</p>",
        "id": 207031248,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1597512850
    },
    {
        "content": "<p>no, <code>p</code> is <code>∃ n ≥ 0, p 0 n</code></p>",
        "id": 207031262,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597512903
    },
    {
        "content": "<p>The second example is <code>def f := nat.find (by use 0; trivial : ∃n:ℕ, n=n)</code></p>",
        "id": 207031313,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1597512978
    },
    {
        "content": "<p>you can replace it with <code>def f := nat.find (by use 0 : ∃n:ℕ, true)</code> and get the same message</p>",
        "id": 207031318,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1597513009
    },
    {
        "content": "<p>if you have <code>open_locale classical</code> then the <code>decidable</code> instance is by default the <code>classical</code> one</p>",
        "id": 207031330,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597513075
    },
    {
        "content": "<p>Good point! I was working in a file in the tutorial exercises and <code>tuto_lib</code> was imported. I switched to an empty file and <code>def f := nat.find (⟨0,true.intro⟩ : ∃n:ℕ, true)</code> and no error message appears.</p>",
        "id": 207031542,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1597513441
    },
    {
        "content": "<p><code>tuto_lib</code> contains <code>attribute [instance] classical.prop_decidable</code></p>",
        "id": 207031727,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1597513731
    },
    {
        "content": "<blockquote>\n<p>What do you mean by axiomatically basic? #print axioms nat.find shows classical.choice quot.sound and propext, so essentially all the axioms.</p>\n</blockquote>\n<p>What? That should not be, <code>nat.find</code> should require no axioms</p>",
        "id": 207031936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597514038
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/446\">lean#446</a></p>",
        "id": 207032243,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597514503
    },
    {
        "content": "<p>What the hell? I just noticed that the section <a href=\"https://github.com/leanprover-community/mathlib/blob/55d430ca22bad157799afdf5e3d9a26597ee37f9/src/algebra/order.lean#L125-L180\">https://github.com/leanprover-community/mathlib/blob/55d430ca22bad157799afdf5e3d9a26597ee37f9/src/algebra/order.lean#L125-L180</a> of choiceless proofs about decidable linear orders was completely destroyed by the decidable classical linter</p>",
        "id": 207032543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597514908
    },
    {
        "content": "<p>Looks like the discussion was in this thread: <a href=\"#narrow/stream/144837-PR-reviews/topic/.232332/near/193211152\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/.232332/near/193211152</a></p>",
        "id": 207032922,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1597515521
    },
    {
        "content": "<p>Yes, I didn't realize that they actually went forward with the theorem defacement. In any case I've restored the theorems in <a href=\"https://github.com/leanprover-community/mathlib/issues/3799\">#3799</a></p>",
        "id": 207033058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597515736
    },
    {
        "content": "<p>They have been marked <code>@[nolint classical_decidable]</code> this time, so hopefully this won't happen again</p>",
        "id": 207033070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597515776
    },
    {
        "content": "<p>If we decide these don't deserve to exist in mathlib, then they should be deleted, not trivialized</p>",
        "id": 207033082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597515830
    },
    {
        "content": "<p>It'd be good to add a library note or some other documentation about the <code>decidable</code> namespace too.</p>",
        "id": 207033141,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1597515892
    },
    {
        "content": "<p>I was actually thinking of moving these theorems to core so that they can support things like <a href=\"https://github.com/leanprover-community/lean/issues/446\">lean#446</a> (which was the original reason I wrote them)</p>",
        "id": 207033157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597515938
    },
    {
        "content": "<p>but this means they can't keep the <code>nolint</code></p>",
        "id": 207033165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597515958
    },
    {
        "content": "<p>We can always add <code>nolint</code> in mathlib. </p>\n<p>I thought we were planning to move order-stuff out of core rather than into it though?</p>",
        "id": 207033206,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1597516008
    },
    {
        "content": "<p>that too</p>",
        "id": 207033210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597516020
    },
    {
        "content": "<p>I would like the proof that int is a ring to not use the axiom of choice. If all the lemmas come out of core then these can come with</p>",
        "id": 207033261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597516088
    },
    {
        "content": "<p>Like does <code>init.data.nat.lemmas</code> need to exist?</p>",
        "id": 207033274,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597516129
    },
    {
        "content": "<p>I think the three axioms are not so bad as a single invocation of <code>classical.em</code> in the proof will make the theorem depend on all three, because of how <code>classical.em</code> is proved. Would be nice to have a command that tells whether a proof uses only excluded middle and not choice (as is the case for most of the incidence geometry problems). Maybe designate certain important theorems from where you don't trace further back.</p>",
        "id": 207033706,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1597516808
    },
    {
        "content": "<p>I think <code>core.init.data.nat.lemmas</code> contains many useful lemmas. It's the go-to place when I can't find what I need in <code>data.nat.basic</code>.</p>",
        "id": 207033715,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1597516833
    },
    {
        "content": "<p>Of course the contents of <code>init.data.nat.lemmas</code> are important, I'm not saying to delete them! I mean to move everything to mathlib</p>",
        "id": 207033791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597516964
    },
    {
        "content": "<p>the question is really what is the minimal substrate that lean needs to pass its test suite</p>",
        "id": 207033802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597516993
    },
    {
        "content": "<p>and what is needed to make VM builtins work</p>",
        "id": 207033818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1597517026
    },
    {
        "content": "<p>I studied the proof of <code>nat.find</code> to convince myself it works and to learn the terse proof style, and I just came up with a different, shorter proof. Unfortuantely it uses <code>nat.decreasing_induction</code> which is not in the core, but it doesn't use addition. Let me know if it is worth PRing or can be further simplified.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">parameter</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"kn\">private</span> <span class=\"n\">def</span> <span class=\"n\">lbp</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">n</span>\n<span class=\"kn\">protected</span> <span class=\"n\">def</span> <span class=\"n\">find_x</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">well_founded</span><span class=\"bp\">.</span><span class=\"n\">fix_F</span> <span class=\"bp\">_</span> <span class=\"n\">lbp</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"bp\">&lt;</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span><span class=\"n\">m</span><span class=\"bp\">&lt;</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">¬</span><span class=\"n\">p</span> <span class=\"n\">m</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">k</span> <span class=\"n\">h</span> <span class=\"n\">al</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">pk</span><span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">k</span> <span class=\"k\">then</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">pk</span><span class=\"o\">,</span><span class=\"n\">al</span><span class=\"bp\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">⟨</span><span class=\"n\">rfl</span><span class=\"o\">,</span><span class=\"n\">pk</span><span class=\"bp\">⟩</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">n</span> <span class=\"n\">pn</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">lt_or_eq_of_le</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_of_lt_succ</span> <span class=\"n\">pn</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">al</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">h</span><span class=\"o\">)))</span> <span class=\"mi\">0</span>\n  <span class=\"o\">(</span><span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">pn</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"k\">in</span> <span class=\"n\">suffices</span> <span class=\"bp\">∀</span><span class=\"n\">m</span><span class=\"bp\">≤</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">acc</span> <span class=\"n\">lbp</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">this</span> <span class=\"mi\">0</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">zero_le</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ_</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">decreasing_induction</span>\n      <span class=\"o\">(</span><span class=\"bp\">λ_</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">λ_</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">hy</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span><span class=\"o\">)</span> <span class=\"n\">hm</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">λ_</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">pn</span> <span class=\"n\">hy</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">not_lt_zero</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 207101260,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1597631286
    }
]