[
    {
        "content": "<p>Is there a way to use the <code>ring</code> tactic for types. </p>\n<p>I'm interested in showing the following without going insane:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"n\">yl</span> <span class=\"n\">zl</span> <span class=\"n\">xr</span> <span class=\"n\">yr</span> <span class=\"n\">zr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span>\n  <span class=\"bp\">≃</span> <span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 236348600,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619534388
    },
    {
        "content": "<p>Usually, having the equivalent of a <code>left_comm</code>, <code>comm</code>, and <code>assoc</code> lemma is enough, if you supply them to the simplifier</p>",
        "id": 236348723,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619534421
    },
    {
        "content": "<p>I am often using things like <code>simp [and.left_comm, and.comm, and.assoc]</code>, or <code>simp [or.left_comm, or.comm, or.assoc]</code></p>",
        "id": 236348865,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619534473
    },
    {
        "content": "<p>And the simplifier should bring the two sides into a some normal form. Hopefully the two are the same. In this case, it seems like you also need distributive lemmas</p>",
        "id": 236348970,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619534520
    },
    {
        "content": "<p>But since it is creating an <code>equiv</code>, which is data, this seems harder.</p>",
        "id": 236349102,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619534554
    },
    {
        "content": "<p>I think the difficulty here is not the types, but the fact you're working with <code>equiv</code> not <code>eq</code></p>",
        "id": 236349130,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619534565
    },
    {
        "content": "<p>Write the \"equivalent\" statement for Prop, get the proof that <code>tauto</code> gives, and convert that manually to the \"equivalent\" type combinators?</p>",
        "id": 236349409,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619534651
    },
    {
        "content": "<p>I tried this <code> simp[equiv.sum_comm, equiv.prod_assoc, equiv.prod_sum_distrib, equiv.sum_prod_distrib]</code> but it didn't work. <br>\nI'll try out the <code>tauto</code> trick.</p>",
        "id": 236350320,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619534996
    },
    {
        "content": "<p>the <code>tauto!</code> term is too complex =C</p>",
        "id": 236352281,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619535618
    },
    {
        "content": "<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fake</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"n\">yl</span> <span class=\"n\">zl</span> <span class=\"n\">xr</span> <span class=\"n\">yr</span> <span class=\"n\">zr</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"bp\">≃</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span>\n      <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"n\">yl</span> <span class=\"n\">zl</span> <span class=\"n\">xr</span> <span class=\"n\">yr</span> <span class=\"n\">zr</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span><span class=\"n\">mp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">),</span>\n           <span class=\"n\">ᾰ.dcases_on</span>\n             <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span><span class=\"o\">),</span>\n                <span class=\"n\">ᾰ.dcases_on</span>\n                  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right</span> <span class=\"o\">:</span> <span class=\"n\">zl</span><span class=\"o\">),</span>\n                     <span class=\"n\">ᾰ_left.dcases_on</span>\n                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span><span class=\"o\">),</span>\n                          <span class=\"n\">ᾰ_left.dcases_on</span>\n                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left_left</span> <span class=\"o\">:</span> <span class=\"n\">xl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left_right</span> <span class=\"o\">:</span> <span class=\"n\">yl</span><span class=\"o\">),</span>\n                               <span class=\"n\">or_iff_not_imp_left.mpr</span>\n                                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">))),</span>\n                                    <span class=\"o\">⟨(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">xl</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_left_left</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span>\n                                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)),</span>\n                                          <span class=\"o\">(</span><span class=\"n\">not_or_distrib.mp</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)),</span>\n                                               <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ_left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">yl</span><span class=\"o\">),</span>\n                                                    <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ_right_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">yr</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_left_right</span> <span class=\"n\">ᾰ_left</span><span class=\"o\">)</span>\n                                                      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">zr</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_left_right</span> <span class=\"n\">ᾰ_left</span><span class=\"o\">))</span>\n                                                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">zl</span><span class=\"o\">),</span>\n                                                    <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ_right_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">yr</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_right</span> <span class=\"n\">ᾰ_left</span><span class=\"o\">)</span>\n                                                      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">zr</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_right</span> <span class=\"n\">ᾰ_left</span><span class=\"o\">)))),</span>\n                                     <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">xl</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_left_left</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span>\n                                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)),</span>\n                                          <span class=\"n\">or_iff_not_imp_left.mpr</span>\n                                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)),</span>\n                                               <span class=\"o\">⟨(</span><span class=\"n\">not_or_distrib.mp</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)),</span>\n                                                     <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">yl</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_left_right</span> <span class=\"n\">ᾰ_1</span><span class=\"o\">)</span>\n                                                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">zr</span><span class=\"o\">),</span>\n                                                          <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ_left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">yl</span><span class=\"o\">),</span>\n                                                               <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ_right_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">yr</span><span class=\"o\">),</span>\n                                                                    <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_left_right</span> <span class=\"n\">ᾰ_left</span><span class=\"o\">)</span>\n                                                                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">zr</span><span class=\"o\">),</span>\n                                                                    <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_left_right</span> <span class=\"n\">ᾰ_left</span><span class=\"o\">))</span>\n                                                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">zl</span><span class=\"o\">),</span>\n                                                               <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ_right_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">yr</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_right</span> <span class=\"n\">ᾰ_left</span><span class=\"o\">)</span>\n                                                                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">zr</span><span class=\"o\">),</span>\n                                                                    <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_right</span> <span class=\"n\">ᾰ_left</span><span class=\"o\">)))),</span>\n                                                <span class=\"n\">rfl.mpr</span> <span class=\"n\">ᾰ_right</span><span class=\"o\">⟩))⟩)))</span>\n                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span><span class=\"o\">),</span>\n                          <span class=\"n\">ᾰ_left.dcases_on</span>\n                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left_left</span> <span class=\"o\">:</span> <span class=\"n\">xr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left_right</span> <span class=\"o\">:</span> <span class=\"n\">yr</span><span class=\"o\">),</span>\n                               <span class=\"n\">or_iff_not_imp_left.mpr</span>\n                                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">))),</span>\n                                    <span class=\"o\">⟨</span><span class=\"n\">rfl.mpr</span> <span class=\"n\">ᾰ_left_left</span><span class=\"o\">,</span>\n                                     <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">xl</span><span class=\"o\">),</span>\n                                          <span class=\"n\">or_iff_not_imp_left.mpr</span>\n                                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)),</span>\n                                               <span class=\"o\">⟨</span><span class=\"n\">rfl.mpr</span> <span class=\"n\">ᾰ_left_right</span><span class=\"o\">,</span> <span class=\"n\">rfl.mpr</span> <span class=\"n\">ᾰ_right</span><span class=\"o\">⟩))</span>\n                                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)),</span>\n                                          <span class=\"n\">or_iff_not_imp_left.mpr</span>\n                                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)),</span>\n                                               <span class=\"o\">⟨</span><span class=\"n\">rfl.mpr</span> <span class=\"n\">ᾰ_left_right</span><span class=\"o\">,</span> <span class=\"n\">rfl.mpr</span> <span class=\"n\">ᾰ_right</span><span class=\"o\">⟩))⟩)))))</span>\n             <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">),</span>\n                <span class=\"n\">ᾰ.dcases_on</span>\n                  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right</span> <span class=\"o\">:</span> <span class=\"n\">zr</span><span class=\"o\">),</span>\n                     <span class=\"n\">ᾰ_left.dcases_on</span>\n                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span><span class=\"o\">),</span>\n                          <span class=\"n\">ᾰ_left.dcases_on</span>\n                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left_left</span> <span class=\"o\">:</span> <span class=\"n\">xl</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left_right</span> <span class=\"o\">:</span> <span class=\"n\">yr</span><span class=\"o\">),</span>\n                               <span class=\"n\">or_iff_not_imp_left.mpr</span>\n                                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">))),</span>\n                                    <span class=\"o\">⟨(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">xl</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_left_left</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span>\n                                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)),</span>\n                                          <span class=\"o\">(</span><span class=\"n\">not_or_distrib.mp</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)),</span>\n                                               <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ_left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">yl</span><span class=\"o\">),</span>\n                                                    <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ_right_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">yr</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_left_right</span> <span class=\"n\">ᾰ_right_1</span><span class=\"o\">)</span>\n                                                      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">zr</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_right</span> <span class=\"n\">ᾰ_right_1</span><span class=\"o\">))</span>\n                                                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">zl</span><span class=\"o\">),</span>\n                                                    <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ_right_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">yr</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_left_right</span> <span class=\"n\">ᾰ_right_1</span><span class=\"o\">)</span>\n                                                      <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">zr</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_right</span> <span class=\"n\">ᾰ_right_1</span><span class=\"o\">)))),</span>\n                                     <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">xl</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_left_left</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span>\n                                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)),</span>\n                                          <span class=\"n\">or_iff_not_imp_left.mpr</span>\n                                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)),</span>\n                                               <span class=\"o\">⟨</span><span class=\"n\">rfl.mpr</span> <span class=\"n\">ᾰ_left_right</span><span class=\"o\">,</span>\n                                                <span class=\"o\">(</span><span class=\"n\">not_or_distrib.mp</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)),</span>\n                                                     <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">yl</span><span class=\"o\">),</span>\n                                                          <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ_left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">yl</span><span class=\"o\">),</span>\n                                                               <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ_right_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">yr</span><span class=\"o\">),</span>\n                                                                    <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_left_right</span> <span class=\"n\">ᾰ_right_1</span><span class=\"o\">)</span>\n                                                                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">zr</span><span class=\"o\">),</span>\n                                                                    <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_right</span> <span class=\"n\">ᾰ_right_1</span><span class=\"o\">))</span>\n                                                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">zl</span><span class=\"o\">),</span>\n                                                               <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ_right_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">yr</span><span class=\"o\">),</span>\n                                                                    <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_left_right</span> <span class=\"n\">ᾰ_right_1</span><span class=\"o\">)</span>\n                                                                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_right_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">zr</span><span class=\"o\">),</span>\n                                                                    <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_right</span> <span class=\"n\">ᾰ_right_1</span><span class=\"o\">)))</span>\n                                                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">zr</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_right</span> <span class=\"n\">ᾰ_1</span><span class=\"o\">))⟩))⟩)))</span>\n                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left</span> <span class=\"o\">:</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span><span class=\"o\">),</span>\n                          <span class=\"n\">ᾰ_left.dcases_on</span>\n                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left_left</span> <span class=\"o\">:</span> <span class=\"n\">xr</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_left_right</span> <span class=\"o\">:</span> <span class=\"n\">yl</span><span class=\"o\">),</span>\n                               <span class=\"n\">or_iff_not_imp_left.mpr</span>\n                                 <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">))),</span>\n                                    <span class=\"o\">⟨</span><span class=\"n\">rfl.mpr</span> <span class=\"n\">ᾰ_left_left</span><span class=\"o\">,</span>\n                                     <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                       <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">xl</span><span class=\"o\">),</span>\n                                          <span class=\"n\">or_iff_not_imp_left.mpr</span>\n                                            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)),</span>\n                                               <span class=\"o\">⟨(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">yl</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_left_right</span> <span class=\"n\">ᾰ_1</span><span class=\"o\">)</span>\n                                                  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">zr</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_right</span> <span class=\"n\">ᾰ_1</span><span class=\"o\">),</span>\n                                                <span class=\"o\">(</span><span class=\"n\">decidable.not_and_distrib'.mp</span> <span class=\"n\">ᾰ_1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">dcases_on</span>\n                                                  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">ᾰ_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">yl</span><span class=\"o\">),</span> <span class=\"n\">absurd</span> <span class=\"n\">ᾰ_left_right</span> <span class=\"n\">ᾰ_1</span><span class=\"o\">)</span>\n</code></pre></div>\n</div></div>",
        "id": 236352826,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619535705
    },
    {
        "content": "<p>Doing it manually with rintros isn't too bad:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"n\">yl</span> <span class=\"n\">zl</span> <span class=\"n\">xr</span> <span class=\"n\">yr</span> <span class=\"n\">zr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span>\n  <span class=\"bp\">≃</span> <span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">(⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩),</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 236353262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619535776
    },
    {
        "content": "<p>But the <code>tidy</code> is awfully slow</p>",
        "id": 236353320,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619535785
    },
    {
        "content": "<p>And obviously that doesn't answer your question</p>",
        "id": 236353581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619535822
    },
    {
        "content": "<p>One issue with such a tactic is that, much like how <code>tauto</code>, <code>ring</code>, and <code>simp</code> might not give the most \"direct\" route = shortest term, the <code>equiv</code> produced might not be the minimal one.</p>",
        "id": 236354105,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619535933
    },
    {
        "content": "<p>I suspect for the case in question it doesn't really matter</p>",
        "id": 236354508,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619536025
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/.60ring.60.20tactic.20for.20types/near/236353262\">said</a>:</p>\n<blockquote>\n<p>Doing it manually with rintros isn't too bad:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"n\">yl</span> <span class=\"n\">zl</span> <span class=\"n\">xr</span> <span class=\"n\">yr</span> <span class=\"n\">zr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span>\n  <span class=\"bp\">≃</span> <span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">(⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩),</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩),</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">sum.inl</span> <span class=\"o\">⟨</span><span class=\"n\">sum.inr</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">assumption</span> <span class=\"o\">},</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">tidy</span> <span class=\"o\">}</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>I should be able to unravel the <code>tidy</code> here, thanks!</p>",
        "id": 236354766,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619536084
    },
    {
        "content": "<p>But I wonder if there is some way to extend the <code>ring</code> or some such tactic to any type with an equivalence relation that behaves nicely with sums and products.</p>",
        "id": 236354984,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619536140
    },
    {
        "content": "<p>I need to unravel several long(er) equivalences like <code>(xl × yl ⊕ xr × yr) × zl ⊕ (xl × yr ⊕ xr × yl) × zl  ≃ xl × (yl × zl ⊕ yr × zr) ⊕ xr × (yl × zr ⊕ yr × zl)</code> and it'll be really painful to have to do it by hand every single time :(</p>",
        "id": 236355509,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619536264
    },
    {
        "content": "<p>One promising sign is that the <code>calc</code> mode works well with equivalences.</p>",
        "id": 236355905,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619536359
    },
    {
        "content": "<p>It should be a straightforward metaprogramming exercise (for someone familiar with metaprogramming!)to make a tactic that essentially does the rintros / refine / assumption above</p>",
        "id": 236355913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619536362
    },
    {
        "content": "<p>All you need is a greedy algorithm that tries every constructor until it succeeds</p>",
        "id": 236356073,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619536406
    },
    {
        "content": "<p>Chaining together the various equiv \"atoms\" as you originally posed the question strikes me as requiring more thought</p>",
        "id": 236356083,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619536409
    },
    {
        "content": "<p>To wit:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">stupid_tactic</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">assumption</span><span class=\"o\">]</span>\n    <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">sum.inr</span><span class=\"o\">],</span> <span class=\"n\">stupid_tactic</span> <span class=\"o\">)</span>\n    <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">sum.inl</span><span class=\"o\">],</span> <span class=\"n\">stupid_tactic</span> <span class=\"o\">)</span>\n    <span class=\"bp\">&lt;|&gt;</span> <span class=\"o\">(</span><span class=\"k\">do</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">prod.mk</span><span class=\"o\">],</span> <span class=\"n\">stupid_tactic</span><span class=\"o\">,</span> <span class=\"n\">stupid_tactic</span> <span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"n\">yl</span> <span class=\"n\">zl</span> <span class=\"n\">xr</span> <span class=\"n\">yr</span> <span class=\"n\">zr</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span>\n  <span class=\"bp\">≃</span> <span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span><span class=\"bp\">;</span> <span class=\"n\">stupid_tactic</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span>  <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span> <span class=\"n\">_</span><span class=\"o\">⟩)</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span>   <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩)</span><span class=\"bp\">;</span> <span class=\"n\">stupid_tactic</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rintro</span> <span class=\"o\">(⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩)</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 236357046,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619536726
    },
    {
        "content": "<p>If you make the tactic also try <code>refl</code>, then all proofs end the same...</p>",
        "id": 236357448,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1619536898
    },
    {
        "content": "<p>I'm not sure I'd consider making your proofs look like your data a feature</p>",
        "id": 236357489,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619536917
    },
    {
        "content": "<p>This is great! This saves me a lot of headache, thanks a lot!</p>",
        "id": 236358380,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1619537220
    },
    {
        "content": "<p><code>itauto</code> should handle this pretty well, except that it is specifically looking for the prop connectives</p>",
        "id": 236368209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619540793
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.itauto</span>\n\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">p</span> <span class=\"bp\">`×`</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">p</span> <span class=\"bp\">`⊕`</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"n\">q</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"n\">p</span> <span class=\"bp\">`≃`</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"bp\">↔</span> <span class=\"n\">q</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">fake</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"n\">yl</span> <span class=\"n\">zl</span> <span class=\"n\">xr</span> <span class=\"n\">yr</span> <span class=\"n\">zr</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"n\">yr</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"n\">yl</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span>\n  <span class=\"bp\">≃</span> <span class=\"n\">xl</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"n\">xr</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">×</span> <span class=\"n\">zr</span> <span class=\"bp\">⊕</span> <span class=\"n\">yr</span> <span class=\"bp\">×</span> <span class=\"n\">zl</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">itauto</span> <span class=\"c1\">--failed</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 236368329,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619540843
    },
    {
        "content": "<p>well, it won't do the <code>left_inv</code> proofs</p>",
        "id": 236368333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619540845
    },
    {
        "content": "<p>if you replace <code>~=</code> with <code>&lt;-&gt;</code> it should work</p>",
        "id": 236368379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619540868
    },
    {
        "content": "<p>oh you did</p>",
        "id": 236368457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619540887
    },
    {
        "content": "<p>That's what the <code>notation</code> line does. And even if I do <code>\\iff</code> explicitly, it still fails</p>",
        "id": 236368492,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619540900
    },
    {
        "content": "<p>Maybe the <code>notation</code> makes the wrong fixity make it unprovable</p>",
        "id": 236368556,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619540931
    },
    {
        "content": "<p>Or my notation should be swapped</p>",
        "id": 236368679,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1619540996
    },
    {
        "content": "<p>here it is with propositional connectives:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fake</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"n\">yl</span> <span class=\"n\">zl</span> <span class=\"n\">xr</span> <span class=\"n\">yr</span> <span class=\"n\">zr</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">∧</span> <span class=\"n\">yl</span> <span class=\"bp\">∨</span> <span class=\"n\">xr</span> <span class=\"bp\">∧</span> <span class=\"n\">yr</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">zl</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">∧</span> <span class=\"n\">yr</span> <span class=\"bp\">∨</span> <span class=\"n\">xr</span> <span class=\"bp\">∧</span> <span class=\"n\">yl</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">zr</span> <span class=\"bp\">↔</span>\n    <span class=\"n\">xl</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">∧</span> <span class=\"n\">zl</span> <span class=\"bp\">∨</span> <span class=\"n\">yr</span> <span class=\"bp\">∧</span> <span class=\"n\">zr</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">xr</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">∧</span> <span class=\"n\">zr</span> <span class=\"bp\">∨</span> <span class=\"n\">yr</span> <span class=\"bp\">∧</span> <span class=\"n\">zl</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">itauto</span>\n</code></pre></div>\n<p>is this correct?</p>",
        "id": 236368947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619541091
    },
    {
        "content": "<p><code>tauto!</code> gets it so it's probably not wrong</p>",
        "id": 236369220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619541187
    },
    {
        "content": "<p>no pun intended</p>",
        "id": 236369248,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619541196
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7387\">#7387</a></p>",
        "id": 236373510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619542927
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fake</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"n\">yl</span> <span class=\"n\">zl</span> <span class=\"n\">xr</span> <span class=\"n\">yr</span> <span class=\"n\">zr</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n  <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">∧</span> <span class=\"n\">yl</span> <span class=\"bp\">∨</span> <span class=\"n\">xr</span> <span class=\"bp\">∧</span> <span class=\"n\">yr</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">zl</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">∧</span> <span class=\"n\">yr</span> <span class=\"bp\">∨</span> <span class=\"n\">xr</span> <span class=\"bp\">∧</span> <span class=\"n\">yl</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">zr</span> <span class=\"bp\">↔</span>\n    <span class=\"n\">xl</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">∧</span> <span class=\"n\">zl</span> <span class=\"bp\">∨</span> <span class=\"n\">yr</span> <span class=\"bp\">∧</span> <span class=\"n\">zr</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">xr</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">∧</span> <span class=\"n\">zr</span> <span class=\"bp\">∨</span> <span class=\"n\">yr</span> <span class=\"bp\">∧</span> <span class=\"n\">zl</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"n\">yl</span> <span class=\"n\">zl</span> <span class=\"n\">xr</span> <span class=\"n\">yr</span> <span class=\"n\">zr</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span><span class=\"n\">mp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">∧</span> <span class=\"n\">yl</span> <span class=\"bp\">∨</span> <span class=\"n\">xr</span> <span class=\"bp\">∧</span> <span class=\"n\">yr</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">zl</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">∧</span> <span class=\"n\">yr</span> <span class=\"bp\">∨</span> <span class=\"n\">xr</span> <span class=\"bp\">∧</span> <span class=\"n\">yl</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">zr</span><span class=\"o\">),</span>\n           <span class=\"n\">h0.elim</span>\n             <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">∧</span> <span class=\"n\">yl</span> <span class=\"bp\">∨</span> <span class=\"n\">xr</span> <span class=\"bp\">∧</span> <span class=\"n\">yr</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">zl</span><span class=\"o\">),</span>\n                <span class=\"n\">h1.left.elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">xl</span> <span class=\"bp\">∧</span> <span class=\"n\">yl</span><span class=\"o\">),</span> <span class=\"n\">or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">h2.left</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">h2.right</span><span class=\"o\">,</span> <span class=\"n\">h1.right</span><span class=\"o\">⟩⟩)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">xr</span> <span class=\"bp\">∧</span> <span class=\"n\">yr</span><span class=\"o\">),</span> <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">h2.left</span><span class=\"o\">,</span> <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">h2.right</span><span class=\"o\">,</span> <span class=\"n\">h1.right</span><span class=\"o\">⟩⟩))</span>\n             <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">xl</span> <span class=\"bp\">∧</span> <span class=\"n\">yr</span> <span class=\"bp\">∨</span> <span class=\"n\">xr</span> <span class=\"bp\">∧</span> <span class=\"n\">yl</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">zr</span><span class=\"o\">),</span>\n                <span class=\"n\">h1.left.elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">xl</span> <span class=\"bp\">∧</span> <span class=\"n\">yr</span><span class=\"o\">),</span> <span class=\"n\">or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">h3.left</span><span class=\"o\">,</span> <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">h3.right</span><span class=\"o\">,</span> <span class=\"n\">h1.right</span><span class=\"o\">⟩⟩)</span>\n                  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">xr</span> <span class=\"bp\">∧</span> <span class=\"n\">yl</span><span class=\"o\">),</span> <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">h3.left</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">h3.right</span><span class=\"o\">,</span> <span class=\"n\">h1.right</span><span class=\"o\">⟩⟩)),</span>\n   <span class=\"n\">mpr</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"n\">xl</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">∧</span> <span class=\"n\">zl</span> <span class=\"bp\">∨</span> <span class=\"n\">yr</span> <span class=\"bp\">∧</span> <span class=\"n\">zr</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">xr</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">∧</span> <span class=\"n\">zr</span> <span class=\"bp\">∨</span> <span class=\"n\">yr</span> <span class=\"bp\">∧</span> <span class=\"n\">zl</span><span class=\"o\">)),</span>\n            <span class=\"n\">h4.elim</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">xl</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">∧</span> <span class=\"n\">zl</span> <span class=\"bp\">∨</span> <span class=\"n\">yr</span> <span class=\"bp\">∧</span> <span class=\"n\">zr</span><span class=\"o\">)),</span>\n                 <span class=\"n\">h5.right.elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">yl</span> <span class=\"bp\">∧</span> <span class=\"n\">zl</span><span class=\"o\">),</span> <span class=\"n\">or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">h5.left</span><span class=\"o\">,</span> <span class=\"n\">h6.left</span><span class=\"o\">⟩,</span> <span class=\"n\">h6.right</span><span class=\"o\">⟩)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h6</span> <span class=\"o\">:</span> <span class=\"n\">yr</span> <span class=\"bp\">∧</span> <span class=\"n\">zr</span><span class=\"o\">),</span> <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">h5.left</span><span class=\"o\">,</span> <span class=\"n\">h6.left</span><span class=\"o\">⟩,</span> <span class=\"n\">h6.right</span><span class=\"o\">⟩))</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h5</span> <span class=\"o\">:</span> <span class=\"n\">xr</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">yl</span> <span class=\"bp\">∧</span> <span class=\"n\">zr</span> <span class=\"bp\">∨</span> <span class=\"n\">yr</span> <span class=\"bp\">∧</span> <span class=\"n\">zl</span><span class=\"o\">)),</span>\n                 <span class=\"n\">h5.right.elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h7</span> <span class=\"o\">:</span> <span class=\"n\">yl</span> <span class=\"bp\">∧</span> <span class=\"n\">zr</span><span class=\"o\">),</span> <span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">h5.left</span><span class=\"o\">,</span> <span class=\"n\">h7.left</span><span class=\"o\">⟩,</span> <span class=\"n\">h7.right</span><span class=\"o\">⟩)</span>\n                   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">h7</span> <span class=\"o\">:</span> <span class=\"n\">yr</span> <span class=\"bp\">∧</span> <span class=\"n\">zl</span><span class=\"o\">),</span> <span class=\"n\">or.inl</span> <span class=\"o\">⟨</span><span class=\"n\">or.inr</span> <span class=\"o\">⟨</span><span class=\"n\">h5.left</span><span class=\"o\">,</span> <span class=\"n\">h7.left</span><span class=\"o\">⟩,</span> <span class=\"n\">h7.right</span><span class=\"o\">⟩))}</span>\n</code></pre></div>",
        "id": 236373586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619542962
    },
    {
        "content": "<p>That's presumably the same as what my <code>stupid_tactic</code> above produces, but using <code>prod.left</code> and <code>prod.right</code> instead of <code>prod.rec</code>?</p>",
        "id": 236373771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1619543039
    },
    {
        "content": "<p>yes, pretty much (it does the initial rintro too)</p>",
        "id": 236373927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619543088
    },
    {
        "content": "<p>Maybe I should make another frontend for itauto called <code>type_tetris</code> for this</p>",
        "id": 236374455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619543302
    },
    {
        "content": "<p>that's one of my favourite lean minigames</p>",
        "id": 236374533,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1619543328
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"308899\">Yakov Pechersky</span> <a href=\"#narrow/stream/116395-maths/topic/.60ring.60.20tactic.20for.20types/near/236354105\">said</a>:</p>\n<blockquote>\n<p>One issue with such a tactic is that, much like how <code>tauto</code>, <code>ring</code>, and <code>simp</code> might not give the most \"direct\" route = shortest term, the <code>equiv</code> produced might not be the minimal one.</p>\n</blockquote>\n<p>By the way, <code>itauto</code> was designed to give human-ish proof terms, unlike <code>ring</code>, although it is debatable whether it is more human-ish to use <code>and.rec</code> or <code>and.{left, right}</code></p>",
        "id": 236377051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1619544456
    }
]