[
    {
        "content": "<p>For our uniform space experts (yes, <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> , I'm thinking of you :-). I can't find in the library the fact that the union of two complete sets is complete. I'm not even sure this is correct in full generality (i.e., without any separation assumption), but I don't have an easy counterexample either, so I'd be interested in comments in one direction or the other.</p>",
        "id": 271048055,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1644270944
    },
    {
        "content": "<p>It's a great question!</p>",
        "id": 271048716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644271230
    },
    {
        "content": "<p>For metric spaces it is easy, isn't it? If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mi>n</mi></msub><msub><mo stretchy=\"false\">)</mo><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">(x_n)_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is a Cauchy sequence contained in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>‚à™</mo><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">S \\cup T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">‚à™</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>, then there is a subsequence contained in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> (or in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span>), that is convergent, and then the original sequence is convergent. Am I missing something obvious or is a more general notion of completeness?</p>",
        "id": 271051667,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644272552
    },
    {
        "content": "<p>It's a more general notion</p>",
        "id": 271051755,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644272596
    },
    {
        "content": "<p>I'm not sure whether the general statement is true.</p>",
        "id": 271051800,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644272615
    },
    {
        "content": "<p>It's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_complete\">docs#is_complete</a></p>",
        "id": 271052048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644272722
    },
    {
        "content": "<p>(root namespace -- wow!)</p>",
        "id": 271052079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644272738
    },
    {
        "content": "<p>It's a bit too late to think about exotic uniform spaces.</p>",
        "id": 271052175,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644272766
    },
    {
        "content": "<p>I am reading it, but I still have problems with uniform spaces...</p>",
        "id": 271052187,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1644272768
    },
    {
        "content": "<p>If s and t are complete, and f is a Cauchy filter with s union t in f, then we can't conclude s is in f or t is in f as far as I know (Cauchy doesn't imply this, does it?), so somehow this is where Riccardo's proof breaks down.</p>",
        "id": 271052377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644272862
    },
    {
        "content": "<p>If you could state completeness with ultrafilters, then you could make such a conclusion.</p>",
        "id": 271052473,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1644272889
    },
    {
        "content": "<p>Here is my current state.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_complete.union</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_complete</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">is_complete</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_complete</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">‚à™</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">f</span> <span class=\"n\">f_cauchy</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">fs</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">‚äì</span> <span class=\"bp\">ùìü</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ft</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">‚äì</span> <span class=\"bp\">ùìü</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">fs</span> <span class=\"bp\">‚äî</span> <span class=\"n\">ft</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">fs</span><span class=\"o\">,</span> <span class=\"n\">ft</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">inf_sup_left</span><span class=\"o\">,</span> <span class=\"n\">sup_principal</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">fs</span> <span class=\"bp\">‚ä•</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">bot_sup_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">fst</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">fst</span> <span class=\"n\">at</span> <span class=\"n\">f_cauchy</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xt</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">ft</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùìù</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">ht</span> <span class=\"n\">ft</span> <span class=\"n\">f_cauchy</span> <span class=\"n\">inf_le_right</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mem_union_right</span> <span class=\"n\">_</span> <span class=\"n\">xt</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">fst</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"o\">},</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">ft</span> <span class=\"bp\">‚ä•</span> <span class=\"k\">with</span> <span class=\"n\">h'</span><span class=\"bp\">|</span><span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">sup_bot_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">fst</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">fst</span> <span class=\"n\">at</span> <span class=\"n\">f_cauchy</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">fs</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùìù</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span> <span class=\"n\">fs</span> <span class=\"n\">f_cauchy</span> <span class=\"n\">inf_le_right</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mem_union_left</span> <span class=\"n\">_</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">fst</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">fs</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùìù</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"n\">hs</span> <span class=\"n\">fs</span> <span class=\"o\">(</span><span class=\"n\">f_cauchy.mono'</span> <span class=\"o\">‚ü®</span><span class=\"n\">h</span><span class=\"o\">‚ü©</span> <span class=\"n\">inf_le_left</span><span class=\"o\">)</span> <span class=\"n\">inf_le_right</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">yt</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">ft</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùìù</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n    <span class=\"n\">ht</span> <span class=\"n\">ft</span> <span class=\"o\">(</span><span class=\"n\">f_cauchy.mono'</span> <span class=\"o\">‚ü®</span><span class=\"n\">h'</span><span class=\"o\">‚ü©</span> <span class=\"n\">inf_le_left</span><span class=\"o\">)</span> <span class=\"n\">inf_le_right</span><span class=\"o\">,</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">ùìù</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">ùìù</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">H</span> <span class=\"n\">at</span> <span class=\"n\">hy</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mem_union_left</span> <span class=\"n\">_</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">fst</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">sup_le</span> <span class=\"n\">hx</span> <span class=\"n\">hy</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(Since I don't know anything about this stuff, having Lean double-check everything helps a lot). I start from a Cauchy filter on <code>s ‚à™ t</code>, and then I restrict it to <code>s</code> and to <code>t</code>. If one of the restrictions is trivial, then the original filter lives on the other set, and I'm done. Otherwise, each restricted filter is Cauchy, so it has a limit (called <code>x</code> and <code>y</code> above). If I can prove that the neighborhoods of <code>x</code> and of <code>y</code> are the same, then I can conclude the proof. (Of course, <code>x</code> and <code>y</code> don't need to be the same, as limits are typically not unique). And hopefully this should be true, as these two points are approximated by a Cauchy filter, so they should be infinitely close...</p>",
        "id": 271053230,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1644273236
    },
    {
        "content": "<p>Probably you can reformulate the definition using ultrafilters. Then the proof is trivial</p>",
        "id": 271055249,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644274356
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_complete.union</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_complete</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">is_complete</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_complete</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">‚à™</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">f</span> <span class=\"n\">f_cauchy</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">fs</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">‚äì</span> <span class=\"bp\">ùìü</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ft</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"bp\">‚äì</span> <span class=\"bp\">ùìü</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">fs</span> <span class=\"bp\">‚äî</span> <span class=\"n\">ft</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">fs</span><span class=\"o\">,</span> <span class=\"n\">ft</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">inf_sup_left</span><span class=\"o\">,</span> <span class=\"n\">sup_principal</span><span class=\"o\">]</span> <span class=\"n\">using</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">eq_or_ne</span> <span class=\"n\">fs</span> <span class=\"bp\">‚ä•</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"bp\">|</span><span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">bot_sup_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">fst</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">fst</span> <span class=\"n\">at</span> <span class=\"n\">f_cauchy</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xt</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">ft</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùìù</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">ht</span> <span class=\"n\">ft</span> <span class=\"n\">f_cauchy</span> <span class=\"n\">inf_le_right</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">mem_union_right</span> <span class=\"n\">_</span> <span class=\"n\">xt</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rwa</span> <span class=\"n\">fst</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"o\">},</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">xs</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">fs</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùìù</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n    <span class=\"n\">hs</span> <span class=\"n\">fs</span> <span class=\"o\">(</span><span class=\"n\">f_cauchy.mono'</span> <span class=\"o\">‚ü®</span><span class=\"n\">h</span><span class=\"o\">‚ü©</span> <span class=\"n\">inf_le_left</span><span class=\"o\">)</span> <span class=\"n\">inf_le_right</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"n\">xs</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_nhds_of_cauchy_adhp</span> <span class=\"n\">f_cauchy</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">fst</span><span class=\"o\">,</span> <span class=\"n\">cluster_pt</span><span class=\"o\">,</span> <span class=\"n\">inf_sup_left</span><span class=\"o\">,</span> <span class=\"n\">sup_ne_bot</span><span class=\"o\">],</span>\n  <span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">inf_of_le_right</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">h</span><span class=\"o\">‚ü©</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I can go to bed knowing my reputation is safe.</p>",
        "id": 271056164,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1644274891
    },
    {
        "content": "<p>Il try to write a proof with ultrafilters tonight</p>",
        "id": 271056927,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644275329
    },
    {
        "content": "<p>Probably I'm wrong.</p>",
        "id": 271058193,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644276063
    },
    {
        "content": "<p>No, I'm not.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">cauchy.to_ultrafilter</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">cauchy</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cauchy</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ultrafilter.of</span> <span class=\"n\">_</span> <span class=\"n\">l</span> <span class=\"n\">h.1</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">h.1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">ultrafilter.of_le</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">ultrafilter.ne_bot</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">filter.prod_mono</span> <span class=\"n\">this</span> <span class=\"n\">this</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">h.2</span><span class=\"o\">‚ü©</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_complete_iff_cluster_pt</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_complete</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">cauchy</span> <span class=\"n\">l</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">l</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùìü</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">cluster_pt</span> <span class=\"n\">x</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n<span class=\"n\">forall‚ÇÉ_congr</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">l</span> <span class=\"n\">hl</span> <span class=\"n\">hls</span><span class=\"o\">,</span> <span class=\"n\">exists‚ÇÇ_congr</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">le_nhds_iff_adhp_of_cauchy</span> <span class=\"n\">hl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_complete_iff_ultrafilter</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_complete</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">cauchy</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚Üë</span><span class=\"n\">l</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùìü</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">‚Üë</span><span class=\"n\">l</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùìù</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">h</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">is_complete_iff_cluster_pt.2</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">l</span> <span class=\"n\">hl</span> <span class=\"n\">hls</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:=</span> <span class=\"n\">hl.1</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">ultrafilter.of</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"n\">hl.to_ultrafilter</span> <span class=\"o\">((</span><span class=\"n\">ultrafilter.of_le</span> <span class=\"n\">l</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">hls</span><span class=\"o\">)</span>\n    <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hxs</span><span class=\"o\">,</span> <span class=\"n\">hxl</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hxs</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">cluster_pt.of_le_nhds</span> <span class=\"n\">hxl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mono</span> <span class=\"o\">(</span><span class=\"n\">ultrafilter.of_le</span> <span class=\"n\">l</span><span class=\"o\">)‚ü©</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_complete_iff_ultrafilter'</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_complete</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">cauchy</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">s</span> <span class=\"bp\">‚àà</span> <span class=\"n\">l</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">‚Üë</span><span class=\"n\">l</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">ùìù</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_complete_iff_ultrafilter.trans</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">le_principal_iff</span><span class=\"o\">,</span> <span class=\"n\">ultrafilter.mem_coe</span><span class=\"o\">]</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">lemma</span> <span class=\"n\">is_complete.union</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_complete</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">is_complete</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_complete</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">‚à™</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_complete_iff_ultrafilter'</span><span class=\"o\">,</span> <span class=\"n\">ultrafilter.union_mem_iff</span><span class=\"o\">,</span> <span class=\"n\">or_imp_distrib</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">Œª</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">hsl</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">l</span> <span class=\"n\">hl</span> <span class=\"n\">hsl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">or.inl</span> <span class=\"n\">hx.fst</span><span class=\"o\">,</span> <span class=\"n\">hx.snd</span><span class=\"o\">‚ü©,</span>\n    <span class=\"bp\">Œª</span> <span class=\"n\">htl</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"n\">l</span> <span class=\"n\">hl</span> <span class=\"n\">htl</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">or.inr</span> <span class=\"n\">hx.fst</span><span class=\"o\">,</span> <span class=\"n\">hx.snd</span><span class=\"o\">‚ü©‚ü©</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 271059210,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644276747
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11912\">#11912</a></p>",
        "id": 271073342,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644287705
    },
    {
        "content": "<p>I used my proof because IMHO we should have <code>is_complete_iff_ultrafilter</code>, and with this lemma my proof is much shorter.</p>",
        "id": 271073373,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1644287739
    },
    {
        "content": "<p>Thanks to both of you!</p>",
        "id": 271089490,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1644304824
    }
]