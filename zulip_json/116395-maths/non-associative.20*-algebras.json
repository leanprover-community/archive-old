[
    {
        "content": "<p>Hello,</p>\n<p>I'm trying to remove the assumption of associativity from the definition of <code>star_semigroup</code> since there are important examples of star-algebras which aren't associative (e.g. JB*-algebras).</p>\n<p>It's easy to do this, by changing the definition of <code>star_semigroup</code> to just require <code>has_mul</code>:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/compare/5a61ec7d63f37e399b94b0b576401940b028a331..42dc59e0473f0deedd95b03f97aa8881931ef934\">https://github.com/leanprover-community/mathlib/compare/5a61ec7d63f37e399b94b0b576401940b028a331..42dc59e0473f0deedd95b03f97aa8881931ef934</a></p>\n<p>Commit <code>42dc59e0473f0deedd95b03f97aa8881931ef934</code> builds and passes the linter tests:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/commit/42dc59e0473f0deedd95b03f97aa8881931ef934\">https://github.com/leanprover-community/mathlib/commit/42dc59e0473f0deedd95b03f97aa8881931ef934</a></p>\n<p>(The name of <code>star_semigroup</code> would also need to be changed to refelect the fact that it's no longer a semigroup, but that's just labelling.)</p>\n<p>The problem comes when I try to remove <code>semigroup</code> from the hypothesis of <code>instance star_ring.to_star_add_monoid</code>. My na√Øve assumption was that I should be able to replace:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">star_ring.to_star_add_monoid</span> <span class=\"o\">[</span><span class=\"n\">non_unital_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">star_add_monoid</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">star_ring.to_star_add_monoid</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">star_add_monoid</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>since every <code>non_unital_semiring</code> is a <code>non_unital_non_assoc_semiring</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"n\">non_unital_semiring.to_non_unital_non_assoc_semiring</span>\n</code></pre></div>\n<p>However, some proofs which previously worked then break e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">actions</span><span class=\"bp\">-</span><span class=\"n\">runner</span><span class=\"bp\">/</span><span class=\"n\">_work</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">linear_algebra</span><span class=\"bp\">/</span><span class=\"n\">matrix</span><span class=\"bp\">/</span><span class=\"n\">pos_def.lean</span><span class=\"o\">:</span><span class=\"mi\">162</span><span class=\"o\">:</span><span class=\"mi\">27</span><span class=\"o\">:</span>\n<span class=\"n\">invalid</span> <span class=\"n\">rewrite</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n  <span class=\"n\">star_module</span> <span class=\"bp\">ùïú</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïú</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">is_R_or_C</span> <span class=\"bp\">ùïú</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"bp\">ùïú</span><span class=\"o\">,</span>\n<span class=\"n\">hM</span> <span class=\"o\">:</span> <span class=\"n\">M.pos_def</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">ùïú</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">M.mul_vec</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">dot_product</span> <span class=\"o\">(</span><span class=\"n\">star</span> <span class=\"n\">r</span> <span class=\"bp\">‚Ä¢</span> <span class=\"n\">star</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M.mul_vec</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">Process</span> <span class=\"n\">completed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">1</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/mathlib/actions/runs/3651147341/jobs/6168008717\">https://github.com/leanprover-community/mathlib/actions/runs/3651147341/jobs/6168008717</a></p>\n<p>I tried retaining both <code>instance star_ring.to_star_add_monoid' [non_unital_semiring R] [star_ring R] : star_add_monoid R </code> with priority <code>100</code> and <code>instance star_ring.to_star_add_monoid [non_unital_non_assoc_semiring R] [star_ring R] : star_add_monoid R</code> with priority 90. Mathlib then builds successfully, but the linter fails:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/actions/runs/3666021161/jobs/6197956565\">https://github.com/leanprover-community/mathlib/actions/runs/3666021161/jobs/6197956565</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> Checking 141792 declarations (plus 135044 automatically generated ones) in mathlib with 28 linters -/</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> The `simp_nf` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> SOME SIMP LEMMAS ARE NOT IN SIMP-NORMAL FORM.</span>\n<span class=\"cm\">see note [simp-normal form] for tips how to debug this.</span>\n<span class=\"cm\">https://leanprover-community.github.io/mathlib_docs/notes.html#simp-normal%20form -/</span>\n<span class=\"c1\">-- algebra/star/self_adjoint.lean</span>\n<span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">self_adjoint.coe_pow</span> <span class=\"c\">/-</span><span class=\"cm\"> LINTER FAILED:</span>\n<span class=\"cm\">try_for tactic failed, timeout -/</span>\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">self_adjoint.coe_pow</span> <span class=\"bp\">-</span> <span class=\"n\">LINTER</span> <span class=\"n\">FAILED</span><span class=\"o\">:</span>\n<span class=\"n\">try_for</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">timeout</span>\n\n<span class=\"n\">Error</span><span class=\"o\">:</span> <span class=\"n\">Process</span> <span class=\"n\">completed</span> <span class=\"k\">with</span> <span class=\"n\">exit</span> <span class=\"n\">code</span> <span class=\"mi\">1</span><span class=\"bp\">.</span>\n</code></pre></div>\n<p>I'm somewhat out of my depth at this stage.</p>\n<p>Why does weakening the hypothesis of <code>instance star_ring.to_star_add_monoid</code> cause some things that used to work to fail? How should I fix this? Or am I approaching this in completely the wrong way?</p>\n<p>Ultimately I'm trying to get to the point where I can do:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_ring</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>Thanks,</p>\n<p>Christopher</p>",
        "id": 315182676,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1670752514
    },
    {
        "content": "<p>This is a pretty standard problem in Lean 3 for pi types, and is the reason we have both <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.module\">docs#pi.module</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.module\">docs#function.module</a>. Perhaps we need something similar for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.star_module\">docs#pi.star_module</a>?</p>",
        "id": 315183448,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1670752952
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/non-associative.20*-algebras/near/315183448\">said</a>:</p>\n<blockquote>\n<p>This is a pretty standard problem in Lean 3 for pi types, and is the reason we have both <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.module\">docs#pi.module</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.module\">docs#function.module</a>. Perhaps we need something similar for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.star_module\">docs#pi.star_module</a>?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Thanks. I've added:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">_root_.function.star_module</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_star</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">has_star</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_smul</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">star_module</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">star_module</span> <span class=\"n\">Œ±</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">pi.star_module</span>\n</code></pre></div>\n<p>to <code>algebra.star.pi</code> and have removed <code>instance star_ring.to_star_add_monoid' [non_unital_semiring R] [star_ring R] : star_add_monoid R :=</code> leaving the <code>non_unital_non_assoc_semiring</code> version. The problem I now get is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mans0954</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib_non</span><span class=\"bp\">-</span><span class=\"n\">assoc</span><span class=\"bp\">-</span><span class=\"n\">star</span><span class=\"bp\">-</span><span class=\"n\">mul</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">star</span><span class=\"bp\">/</span><span class=\"n\">self_adjoint.lean</span><span class=\"o\">:</span><span class=\"mi\">273</span><span class=\"o\">:</span><span class=\"mi\">58</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"o\">(</span><span class=\"n\">rat_cast_mem</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">rat_cast_mem</span> <span class=\"n\">a</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">is_self_adjoint</span> <span class=\"bp\">‚Üë</span><span class=\"n\">a</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">is_self_adjoint</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mans0954</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib_non</span><span class=\"bp\">-</span><span class=\"n\">assoc</span><span class=\"bp\">-</span><span class=\"n\">star</span><span class=\"bp\">-</span><span class=\"n\">mul</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">algebra</span><span class=\"bp\">/</span><span class=\"n\">star</span><span class=\"bp\">/</span><span class=\"n\">self_adjoint.lean</span><span class=\"o\">:</span><span class=\"mi\">273</span><span class=\"o\">:</span><span class=\"mi\">58</span><span class=\"o\">:</span> <span class=\"n\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n    <span class=\"o\">(</span><span class=\"n\">rat_cast_mem</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mul</span>\n  <span class=\"n\">term</span>\n    <span class=\"n\">rat_cast_mem</span> <span class=\"n\">a</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"n\">is_self_adjoint</span> <span class=\"bp\">‚Üë</span><span class=\"n\">a</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"n\">is_self_adjoint</span> <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">star_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñö</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">self_adjoint</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"bp\">‚Üë</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"bp\">‚Üë</span><span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">self_adjoint</span> <span class=\"n\">R</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mans0954</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib_non</span><span class=\"bp\">-</span><span class=\"n\">assoc</span><span class=\"bp\">-</span><span class=\"n\">star</span><span class=\"bp\">-</span><span class=\"n\">mul</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">data</span><span class=\"bp\">/</span><span class=\"n\">dfinsupp</span><span class=\"bp\">/</span><span class=\"n\">basic.lean</span><span class=\"o\">:</span> <span class=\"n\">dfinsupp.sum_add_hom_single</span><span class=\"bp\">^</span><span class=\"n\">C</span>\n<span class=\"n\">Aborted</span><span class=\"bp\">!</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>\n</code></pre></div>",
        "id": 315247884,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1670786643
    },
    {
        "content": "<p>Does <code>by apply_instance</code> find that <code>has_qsmul</code> instance for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/self_adjoint\">docs#self_adjoint</a>?</p>",
        "id": 315796077,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671017645
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/self_adjoint.has_qsmul\">docs#self_adjoint.has_qsmul</a> already exists?</p>",
        "id": 315796242,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671017703
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> No,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">has_qsmul</span> <span class=\"o\">:</span> <span class=\"n\">has_smul</span> <span class=\"n\">‚Ñö</span> <span class=\"o\">(</span><span class=\"n\">self_adjoint</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>Gives me:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic.mk_instance</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n  <span class=\"n\">has_smul</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">self_adjoint</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">star_ring</span> <span class=\"n\">R</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">has_smul</span> <span class=\"n\">‚Ñö</span> <span class=\"bp\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">self_adjoint</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>If that's what you meant?</p>",
        "id": 315900450,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1671046409
    },
    {
        "content": "<p>Sorry I misunderstood, you weren't saying you had to add the instance, but that you had to change the proof within it</p>",
        "id": 315906977,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671048826
    },
    {
        "content": "<p>I think you would probably get more help if you turned this into a draft / WIP PR so that it's easier to comment / view errors</p>",
        "id": 315907267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1671048946
    },
    {
        "content": "<p>Yes, that would be easier. Here is the PR:</p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/pull/17949\">https://github.com/leanprover-community/mathlib/pull/17949</a></p>",
        "id": 315909524,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1671049920
    }
]