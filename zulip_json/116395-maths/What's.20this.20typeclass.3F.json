[
    {
        "content": "<p>Let's say I have a type, probably a monoid, and it has a cast/coercion to the reals which is order-preserving, respects addition, and which maps only zero to zero.<br>\nWhat's a short way of describing this?<br>\nFor example, the relation that the natural embedding of the naturals or the rationals into the reals has this property</p>",
        "id": 299577189,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663598422
    },
    {
        "content": "<p>My guess is <code>variables {F α : Type*} [ordered_add_comm_monoid α] [order_add_monoid_hom_class F α ℝ] (f : F) (hf : function.injective f)</code></p>",
        "id": 299577761,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663598609
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 299577838,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663598637
    },
    {
        "content": "<p>Oh wait, nevermind.</p>",
        "id": 299577903,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663598650
    },
    {
        "content": "<p>If you want to set up the API for one specific coercion (say it is \"canonical\" in some sense), then the trick is to use the right <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#norm_cast%20attributes\">norm_cast attributes</a></p>",
        "id": 299578061,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663598708
    },
    {
        "content": "<p>I'm defining something and I happened to be defining it on nat, but I'm not really using many actual properties of nat.</p>",
        "id": 299579052,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663599037
    },
    {
        "content": "<p>To be honest it might be the case that nat and int and rat and real are the only ones I really care about.</p>",
        "id": 299579381,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663599139
    },
    {
        "content": "<p>(But it would still be nice to have a typeclass that more or less boils down to nat_or_int_or_rat_or_real...)</p>",
        "id": 299581303,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663599763
    },
    {
        "content": "<p>That would be a weird type class. What do you want it for?</p>",
        "id": 299581749,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663599928
    },
    {
        "content": "<p>I was defining \"nat metrics\", natural-valued metrics, and I was trying to work out if I could generalise what I was doing</p>",
        "id": 299581951,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663599991
    },
    {
        "content": "<p>okay, but why would you need that type class you described?</p>",
        "id": 299582057,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663600026
    },
    {
        "content": "<p>inb4 hamming codes</p>",
        "id": 299582105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663600045
    },
    {
        "content": "<p>actually for hamming codes nat is sufficient</p>",
        "id": 299582165,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600067
    },
    {
        "content": "<p>basically I was trying to work out what other types could be said to be \"reasonable\" codomains for a metric</p>",
        "id": 299582328,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600104
    },
    {
        "content": "<p>slash dist-variant</p>",
        "id": 299582363,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600120
    },
    {
        "content": "<p>Any subset of the nonnegative reals?</p>",
        "id": 299582390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663600135
    },
    {
        "content": "<p>in that case, it doesn't seem to be much of an advantage to not just say it's nonneg reals</p>",
        "id": 299582494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663600172
    },
    {
        "content": "<p>presumably you want it to be closed under addition so you can state the triangle inequality.</p>",
        "id": 299582497,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663600173
    },
    {
        "content": "<p>Yes.</p>",
        "id": 299582525,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600183
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> there are specific useful properties that you get from being careful about the nat-valued-ness</p>",
        "id": 299582650,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600216
    },
    {
        "content": "<p>especially if you are saying that this set naturally injects into the reals</p>",
        "id": 299582673,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663600224
    },
    {
        "content": "<p>some of which you can see in <a href=\"https://leanprover-community.github.io/mathlib_docs/information_theory/hamming.html\">https://leanprover-community.github.io/mathlib_docs/information_theory/hamming.html</a></p>",
        "id": 299582718,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600243
    },
    {
        "content": "<p>there are other reasonable notions of metric that go beyond the reals but if it's a subset then I don't see the point</p>",
        "id": 299582747,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663600251
    },
    {
        "content": "<p>I think you can capture this another way. Why don't you just have a structure that extends metric that says the values are all coercions of nats? Then you can prove all the properties you want \"from being careful about the nat-valued ones\"</p>",
        "id": 299582894,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663600299
    },
    {
        "content": "<p>sure, <code>hamming_dist</code> is a nat, but that's already everything you need to know</p>",
        "id": 299582911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663600303
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> that's exactly what I've done</p>",
        "id": 299582991,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600322
    },
    {
        "content": "<p>the <code>dist</code> you get out of the structure is a real but that's fine since you still have <code>hamming_dist</code> in the restricted case</p>",
        "id": 299583043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663600330
    },
    {
        "content": "<p>Aye, I have all this.</p>",
        "id": 299583064,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600340
    },
    {
        "content": "<p>if you want to be generic about it then you don't know it's a nat anymore but rather some subset of the reals and the benefits are lost</p>",
        "id": 299583107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663600358
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/116395-maths/topic/What's.20this.20typeclass.3F/near/299582497\">said</a>:</p>\n<blockquote>\n<p>presumably you want it to be closed under addition so you can state the triangle inequality.</p>\n</blockquote>\n<p>You don't <em>need</em> it to be closed under addition because you can do the addition in the reals I guess.</p>",
        "id": 299583144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663600378
    },
    {
        "content": "<p>Yeah, at the time I thought we were talking about <em>actually</em> ℕ (or whatever) valued dist functions, as opposed to <code>ℝ</code>-valued ones where the range is included in the range of the coercion.</p>",
        "id": 299583475,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1663600487
    },
    {
        "content": "<p>Aye, but in a sense you want all the lemmas that only come from the metric axioms \"for free\". Currently <code>hamming_dist</code> has a bunch of lemmas that duplicate a lot of <code>dist</code> lemmas - that's fine enough, but if someone defined some other natural-valued or rational-valued metric for some other information-theoretic application... you wouldn't want to prove them all again, it would be a waste.</p>",
        "id": 299583554,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600511
    },
    {
        "content": "<p>you do get them \"for free\" though, as a result of instantiating the real-valued <code>metric_space</code> using <code>\\u (my_dist x y)</code> as the metric</p>",
        "id": 299583741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663600570
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> oh to be fair I have implemented it as ℕ-valued dist functions, but I suppose one could do it in other ways.</p>",
        "id": 299583748,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600573
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/What's.20this.20typeclass.3F/near/299583741\">said</a>:</p>\n<blockquote>\n<p>you do get them \"for free\" though, as a result of instantiating the real-valued <code>metric_space</code> using <code>\\u (my_dist x y)</code> as the metric</p>\n</blockquote>\n<p>Mmm, but that means reasoning about them can be a pain because you end up doing a lot of coercing around.</p>",
        "id": 299583917,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600630
    },
    {
        "content": "<p>I think that's why Eric advised me to write the hamming file in the way that I did.</p>",
        "id": 299583959,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600646
    },
    {
        "content": "<p>is this one of those examples where we are generalizing from one example?</p>",
        "id": 299584002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663600663
    },
    {
        "content": "<p>Yes.</p>",
        "id": 299584030,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600669
    },
    {
        "content": "<p>I'm perfectly happy to just stay in my one-example box.</p>",
        "id": 299584053,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600678
    },
    {
        "content": "<p>please don't</p>",
        "id": 299584056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663600678
    },
    {
        "content": "<p>But sometimes when I do that people then say \"this isn't general enough\".</p>",
        "id": 299584116,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600689
    },
    {
        "content": "<p>I suggest leaving that to the refactor junkies once there are at least 3 examples</p>",
        "id": 299584264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663600734
    },
    {
        "content": "<p>Yeah it is just annoying when it blocks me from doing stuff.</p>",
        "id": 299584327,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600753
    },
    {
        "content": "<p>As in, when it jams up PRs.</p>",
        "id": 299584386,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600777
    },
    {
        "content": "<p>I've found if I don't hit the right level of generality I spend a lot longer on stuff.</p>",
        "id": 299584444,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663600801
    },
    {
        "content": "<p>I think you should try not to write code that is \"trivially generalizable\", but if generalization makes the code significantly structurally different then it's fine to put it off until the next example shows up to motivate it better</p>",
        "id": 299584682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663600874
    },
    {
        "content": "<p>a typeclass that generalizes over nat,int,rat coes is what I would call a significant structural refactor of the hamming_dist code</p>",
        "id": 299584870,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663600929
    },
    {
        "content": "<p>Alright.</p>",
        "id": 299591358,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1663602280
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/What's.20this.20typeclass.3F/near/299584264\">said</a>:</p>\n<blockquote>\n<p>I suggest leaving that to the refactor junkies once there are at least 3 examples</p>\n</blockquote>\n<p>Is that me? <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 299594436,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663602944
    }
]