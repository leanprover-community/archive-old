[
    {
        "content": "<p>Today an undergraduate computer scientist and I are starting on group cohomology.</p>\n<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span></span></span></span> is a group then a <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span></span></span></span>-module <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is an abelian group equipped with an action of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span></span></span></span> satisfying some axioms. There is some way of building a \"group ring\" <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><mo>[</mo><mi>G</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[G]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord mathit\">G</span><span class=\"mclose\">]</span></span></span></span> such that to give a <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">G</span></span></span></span>-module is equivalent to giving a module over the ring <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><mo>[</mo><mi>G</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[G]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord mathit\">G</span><span class=\"mclose\">]</span></span></span></span>. Note that this ring is not commutative, so there is probably not much support for it in mathlib.</p>\n<p>We need to make some design decisions about bundling and what have you. Does anyone have any recommendations? Following modules over a commutative ring we would be led to <code>(M : Type*) [add_comm_group M] [G_module G M]</code>. We will want to consider submodules and quotient modules, morphisms between these modules, kernels and cokernels of these morphisms, and exact sequences. </p>\n<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> you guys have thought about modelling algebraic objects analogous to these in Lean before. Do any of you have any comments before we launch in?</p>",
        "id": 160273440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552035272
    },
    {
        "content": "<p>Hmm... the group ring is already defined. That was one of the things we discovered during Lean Together.</p>",
        "id": 160274433,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552036441
    },
    {
        "content": "<p>I think that it might be easier to just use modules over the group ring</p>",
        "id": 160274485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552036462
    },
    {
        "content": "<p>You say there is not much support. But there will definitely be a whole lot more support then <code>\\varnothing</code>, which is the support you currently have for a <code>G_module</code> definition that start from scratch</p>",
        "id": 160274534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552036528
    },
    {
        "content": "<p>What concerns me about this approach is that the student has no idea what a module over a ring is, and will want to write everything in the language of cocycles.</p>",
        "id": 160283673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552046739
    }
]