[
    {
        "content": "<p>Dear all,<br>\ntogether with <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>, <span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span>  and <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span>  we are interested proving the Fermat Last Theorem for regular primes. Of course everyone is very welcome to join the project, it would be nice to run it similarly to a (very) small LTE. I think Alex already has some code, but we didn't do anything serious until now, so if you are already working on this please let us know.</p>",
        "id": 258936542,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635155020
    },
    {
        "content": "<p>Great idea!</p>",
        "id": 258939399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635156885
    },
    {
        "content": "<p>Do you already have a repo?</p>",
        "id": 258952403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635165539
    },
    {
        "content": "<p>I am trying to understand what is the best option to do it</p>",
        "id": 258952643,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635165673
    },
    {
        "content": "<p>All suggestions are very welcome</p>",
        "id": 258952664,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635165682
    },
    {
        "content": "<p><code>leanproject new flt-regular</code></p>",
        "id": 258952813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635165742
    },
    {
        "content": "<p>And then you need to create an empty repo on github and push it there.</p>",
        "id": 258952836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635165763
    },
    {
        "content": "<p>If you want to host it on the leanprover-community organization, I can create a repo for you.</p>",
        "id": 258952859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635165779
    },
    {
        "content": "<p>That would be awesome!</p>",
        "id": 258953040,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635165877
    },
    {
        "content": "<p>Do you like <code>flt-regular</code> as name? Or do you want something else? <code>regular-fermat</code>?</p>",
        "id": 258953081,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635165909
    },
    {
        "content": "<p>That would be great. I'm trying to sort out a rough tex file to make a blueprint out of.</p>",
        "id": 258953114,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635165925
    },
    {
        "content": "<p>If you give me a name, I'll give you a repo (-;</p>",
        "id": 258953209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635165963
    },
    {
        "content": "<p><code>flt-regular</code> is perfect</p>",
        "id": 258953356,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635166040
    },
    {
        "content": "<p>I like <code>flt-regular</code>.</p>",
        "id": 258953362,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635166043
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/flt-regular\">https://github.com/leanprover-community/flt-regular</a></p>",
        "id": 258953556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635166146
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/flt-regular/invitations\">https://github.com/leanprover-community/flt-regular/invitations</a></p>",
        "id": 258953724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635166226
    },
    {
        "content": "<p>So now, after you do <code>leanproject new flt-regular</code> and <code>cd</code> into the new directory, you should do</p>\n<div class=\"codehilite\" data-code-language=\"Bash\"><pre><span></span><code>git remote add origin git@github.com:leanprover-community/flt-regular.git\ngit add whatever_leanproject.created\ngit commit -am <span class=\"s1\">'initial commit'</span>\ngit push -u origin master\n</code></pre></div>",
        "id": 258953842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635166315
    },
    {
        "content": "<p>You can also consider creating a new stream. But you can of course also use <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a> for the time being.</p>",
        "id": 258955008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635166854
    },
    {
        "content": "<p>First question: which definition of regular prime do you plan to use?</p>",
        "id": 258955033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635166867
    },
    {
        "content": "<p>My idea was to use the class number. We need <a href=\"https://github.com/leanprover-community/mathlib/issues/9071\">#9071</a>, but that's going to be in mathlib quite soon I guess. The real first problem is the ring of integers of cyclotmic fields</p>",
        "id": 258956124,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635167326
    },
    {
        "content": "<p>We still have to discuss a good strategy <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 258956157,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635167345
    },
    {
        "content": "<p>I love how I can just throw ideas around and someone makes a project out of it <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 258956435,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635167485
    },
    {
        "content": "<p>It's probably the better definition to work with. But will we be able to show that <img alt=\":37:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18469.png\" title=\"37\"> is irregular?</p>",
        "id": 258957380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635167940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Fermat.20Last.20Theorem.20for.20regular.20primes/near/258956435\">said</a>:</p>\n<blockquote>\n<p>I love how I can just throw ideas around and someone makes a project out of it <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>\n</blockquote>\n<p>It was Riccardo's idea, right? <a href=\"#narrow/stream/116395-maths/topic/Cyclotomic.20fields/near/258814613\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Cyclotomic.20fields/near/258814613</a></p>",
        "id": 258957828,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635168140
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/113488-general/topic/branches.20cleanup/near/258332215\">said</a>:</p>\n<blockquote>\n<p>So maybe it's time for regular primes? This seems an ambitious but not out of reach project.</p>\n</blockquote>\n<p>It was, but I seem to have provoked it <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 258958034,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635168245
    },
    {
        "content": "<p>I am <em>really</em> sad that 37 is irregular</p>",
        "id": 258958208,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635168342
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9071\">#9071</a> depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/9606\">#9606</a> which seems to be blocked pretty badly.</p>",
        "id": 258958307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635168372
    },
    {
        "content": "<p>There are some very nasty timeouts going on there.</p>",
        "id": 258958336,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635168384
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/Fermat.20Last.20Theorem.20for.20regular.20primes/near/258958208\">said</a>:</p>\n<blockquote>\n<p>I am <em>really</em> sad that 37 is irregular</p>\n</blockquote>\n<p>Why? I think irregularity is indirectly a raison d'être for the <img alt=\":37:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18469.png\" title=\"37\"> emoji.</p>",
        "id": 258958435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635168432
    },
    {
        "content": "<p>BTW, we can define regularity for all numbers, right?</p>",
        "id": 258959106,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635168757
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Fermat.20Last.20Theorem.20for.20regular.20primes/near/258958435\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/Fermat.20Last.20Theorem.20for.20regular.20primes/near/258958208\">said</a>:</p>\n<blockquote>\n<p>I am <em>really</em> sad that 37 is irregular</p>\n</blockquote>\n<p>Why? I think irregularity is indirectly a raison d'être for the <img alt=\":37:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18469.png\" title=\"37\"> emoji.</p>\n</blockquote>\n<p>Just because it means we are not proving FLT for 37!</p>",
        "id": 258960178,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635169237
    },
    {
        "content": "<p>OH NOOO!! There is a <code>for_mathlib/</code> directory already <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 258962610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635170274
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Can you please make creation of this directory part of <code>leanproject new</code>? [/joking]</p>",
        "id": 258962699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635170304
    },
    {
        "content": "<p>Ahahah it's the first directory I created! <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 258962771,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635170345
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Fermat.20Last.20Theorem.20for.20regular.20primes/near/258958307\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9071\">#9071</a> depends on <a href=\"https://github.com/leanprover-community/mathlib/issues/9606\">#9606</a> which seems to be blocked pretty badly.</p>\n</blockquote>\n<p>We should probably reverse the dependency, since <a href=\"https://github.com/leanprover-community/mathlib/issues/9606\">#9606</a> indeed is not doing well</p>",
        "id": 258963927,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1635170851
    },
    {
        "content": "<p>Is that possible? I thought that <a href=\"https://github.com/leanprover-community/mathlib/issues/9071\">#9071</a> couldn't do without it...</p>",
        "id": 258964176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635170955
    },
    {
        "content": "<p>Sounds like a fun project! If I recall correctly <code>cyclotomic 0</code> is <code>1</code>, and <code>adjoin_root f</code> is defined to be <code>K[X]/(f)</code>, so </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>is false for <code>n = 0</code>.</p>",
        "id": 258965601,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635171621
    },
    {
        "content": "<p>This just seems like something which is about positive integers and there is no coherent way to include n=0.</p>",
        "id": 258966003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635171809
    },
    {
        "content": "<p>Sure, I was just commenting about one of the <code>sorry</code>'s from the brand new <code>for_mathlib</code> folder :)</p>",
        "id": 258966142,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635171868
    },
    {
        "content": "<p>Maybe <code>cyclotomic_field 0</code> should be defined to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span>?</p>",
        "id": 258966223,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635171909
    },
    {
        "content": "<p>Or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathbb{Q}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.05556em;vertical-align:-0.16667em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8888900000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span><span style=\"top:-3.80889em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16667em;\"><span></span></span></span></span></span></span></span></span> since every algebraic number is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>-th root of unity? <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 258966296,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635171954
    },
    {
        "content": "<p>For the cyclotomic stuff, please look at my recent PRs because they were made for the purpose of cyclotomic fields anyways</p>",
        "id": 258966763,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635172149
    },
    {
        "content": "<p>I think the best option is, as Johan mentioned on one of them, to have an API for the generator of cyclic groups</p>",
        "id": 258966792,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635172171
    },
    {
        "content": "<p>Are these the PRs that Johan mentioned above?</p>",
        "id": 258966845,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635172201
    },
    {
        "content": "<p>Nope, that's the PR about class numbers</p>",
        "id": 258967030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635172276
    },
    {
        "content": "<p>Oof, why does <a href=\"https://github.com/leanprover-community/mathlib/issues/9606\">#9606</a> break something about <code>cech_nerve</code>s?</p>",
        "id": 258967155,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635172327
    },
    {
        "content": "<p>I don't think there's a non-crazy definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ϕ</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\phi(0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">ϕ</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> (\"naturals less than n coprime to n\" gives 0, \"order of units in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mi>n</mi><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z/n\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mord\">/</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathbb\">Z</span></span></span></span>\" gives 2) and I don't think there's a non-crazy definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Φ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\Phi_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">Φ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> either, you are somehow dividing by 0 to get there.</p>",
        "id": 258967896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635172645
    },
    {
        "content": "<p>Sure, but I do think there's a non-crazy definition of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>μ</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\mu_0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>. Namely: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathbb{Q}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.05556em;vertical-align:-0.16667em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8888900000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span><span style=\"top:-3.80889em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16667em;\"><span></span></span></span></span></span></span></span></span></p>",
        "id": 258968786,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635173025
    },
    {
        "content": "<p>Anyway, this is silly. No one should ever use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mu_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 258968912,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635173069
    },
    {
        "content": "<p>Surely the max abelian extension, not the max algebraic extension?</p>",
        "id": 258968955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635173086
    },
    {
        "content": "<p>Surely <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>μ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mu_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is affine 1-space ;-) It represents <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>r</mi><mo>∈</mo><mi>R</mi><mtext> </mtext><mi mathvariant=\"normal\">∣</mi><mtext> </mtext><msup><mi>r</mi><mn>0</mn></msup><mo>=</mo><mn>1</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{r\\in R\\,|\\,r^0=1\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">}</span></span></span></span>.</p>",
        "id": 258969224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635173181
    },
    {
        "content": "<p>Exactly, that's why <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>μ</mi><mn>0</mn></msub><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"true\">‾</mo></mover><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mover accent=\"true\"><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\mu_0(\\overline{\\mathbb{Q}})) = \\overline{\\mathbb{Q}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.13889em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8888900000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span><span style=\"top:-3.80889em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16667em;\"><span></span></span></span></span></span><span class=\"mclose\">))</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.05556em;vertical-align:-0.16667em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8888900000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span><span style=\"top:-3.80889em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16667em;\"><span></span></span></span></span></span></span></span></span>.</p>",
        "id": 258969313,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635173222
    },
    {
        "content": "<p>Unfortunately <code>roots_of_unity 0</code> is empty in mathlib...</p>",
        "id": 258969509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635173286
    },
    {
        "content": "<p>Oh no! All the junk values are inconsistent.</p>",
        "id": 258969931,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635173475
    },
    {
        "content": "<p>I was about to say, I bet you could fix that easily by setting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>μ</mi><mn>0</mn></msub><mo>=</mo><msub><mi>μ</mi><mn>37</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mu_0 = \\mu_{37}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">37</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> etc.</p>",
        "id": 258970165,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635173559
    },
    {
        "content": "<p>So there are two questions here -- the funny one, which we've all been indulging in, giving random semi-plausible definitions for all these things at the junk input 0, but there's also the serious one, which is what we should actually do with the definitions. I feel like the definitions are all going to be of the form \"if n = 0 then return the following junk value else return the sensible value\"</p>",
        "id": 258970188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635173569
    },
    {
        "content": "<p>actually that's a really good idea. Why not just let the value for 0 be the value for 1 in all cases?</p>",
        "id": 258970254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635173594
    },
    {
        "content": "<p>Then all the theorems are guaranteed to remain true</p>",
        "id": 258970310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635173620
    },
    {
        "content": "<p>I guess that shifts the question to what you mean by \"all cases\".</p>",
        "id": 258970353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635173640
    },
    {
        "content": "<p>Also <code>pnat</code> is a thing but I guess that's heresy to suggest</p>",
        "id": 258970372,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635173643
    },
    {
        "content": "<p>Does this include <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">φ(0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 258970443,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635173658
    },
    {
        "content": "<p>Because that's defined outside of \"number theory\". No idea what mathlib does there right now.</p>",
        "id": 258970492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635173681
    },
    {
        "content": "<p>I guess it would do. My guess is that setting 0=1 is easier than working with pnat but I might be wrong.</p>",
        "id": 258970546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635173705
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Fermat.20Last.20Theorem.20for.20regular.20primes/near/258970546\">said</a>:</p>\n<blockquote>\n<p>setting 0=1 is easier</p>\n</blockquote>\n<p>Yes this makes a lot of things easier actually</p>",
        "id": 258970599,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635173730
    },
    {
        "content": "<p>I wish there was more love for <code>pnat</code>.</p>",
        "id": 258970760,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635173807
    },
    {
        "content": "<p>Maybe this is a good time to try it?</p>",
        "id": 258970809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635173827
    },
    {
        "content": "<p>The reason for defining junk values usually is to spare us from having to say \"oh and also assume <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n\\not=0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>\" in 100 places, but if <code>n : pnat</code> then we don't have to say this</p>",
        "id": 258970940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635173876
    },
    {
        "content": "<p>E.g. we should probably write down a multiplicative recursor for <code>pnat</code> based on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.induction\">docs#multiset.induction</a> or something.</p>",
        "id": 258970973,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635173883
    },
    {
        "content": "<p>I tried to use <code>pnat</code> when defining cyclotomic polynomials, but it ended up being quite annoying since the API is not as complete as for <code>nat</code>.</p>",
        "id": 258971025,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635173893
    },
    {
        "content": "<p>Right, but if it's just missing lemmas then they can be added. However if it's that we want to use <code>ring</code> then this is more problematic</p>",
        "id": 258971133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635173934
    },
    {
        "content": "<p>maybe <code>ring</code> should work for arbitrary commutative distribs?</p>",
        "id": 258971423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635174015
    },
    {
        "content": "<p>This is the sort of thing which it's easy for me to say, but then someone like Rob or Mario maybe pops up and says \"actually that would be a ton of work for very little benefit\"</p>",
        "id": 258971560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635174068
    },
    {
        "content": "<p>One of the primitive roots things is in pnat, so it's definitely at least worth considering. Some PRs of interest: <a href=\"https://github.com/leanprover-community/mathlib/issues/9778\">#9778</a>, <a href=\"https://github.com/leanprover-community/mathlib/issues/9779\">#9779</a></p>",
        "id": 258971847,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635174156
    },
    {
        "content": "<p>(these are the ones I meant earlier)</p>",
        "id": 258971862,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635174163
    },
    {
        "content": "<p>How maths-hard is the proof that cyclotomic regular is equivalent to Bernoulli regular?</p>",
        "id": 258974718,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635175240
    },
    {
        "content": "<p>BTW we have a sorry free def of regular prime (or regular number if you prefer). The class number of an extension of <code>Z</code> is essentially already in mathlib.</p>",
        "id": 258975078,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635175394
    },
    {
        "content": "<p>I would be very interested in joining this project. Is there anything I should do, or should I just start working on <code>flt-regular</code>?</p>",
        "id": 258975272,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635175453
    },
    {
        "content": "<p>But provig that 37 is irregular is probably easier with the Bernoulli defn</p>",
        "id": 258975343,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635175480
    },
    {
        "content": "<p>IIRC cyclo regular = Bernoulli regular is proved using the analytic class number formula, so we're blocked by complex analysis</p>",
        "id": 258975406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635175506
    },
    {
        "content": "<p>I guess reading Chris's blueprint is a good start?</p>",
        "id": 258975424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635175512
    },
    {
        "content": "<p>Washington's Introduction to cyclotomic fields is THE reference for this sort of stuff</p>",
        "id": 258975589,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635175573
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> can you add a flt_regular stream? So we can speak without spamming everyone</p>",
        "id": 258975631,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635175596
    },
    {
        "content": "<p>I think anyone can</p>",
        "id": 258975699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635175624
    },
    {
        "content": "<p>The more refined statement, that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> divides <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>B</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">B_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> iff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> divides the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> th part of the class group was not known until Ribet's work which used congruences of modular forms.</p>",
        "id": 258975715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635175631
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Fermat.20Last.20Theorem.20for.20regular.20primes/near/258975715\">said</a>:</p>\n<blockquote>\n<p>The more refined statement, that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> divides <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>B</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">B_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05017em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> iff <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> divides the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> th part of the class group was not known until Ribet's work which used congruences of modular forms.</p>\n</blockquote>\n<p>Herbrand's direction isn't as hard though, right?</p>",
        "id": 258975764,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635175656
    },
    {
        "content": "<p>and modular forms are also blocked by complex analysis ;-)</p>",
        "id": 258975796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635175670
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> let me know if Zulip does not permit you to create a stream</p>",
        "id": 258975812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635175678
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Fermat.20Last.20Theorem.20for.20regular.20primes/near/258975424\">said</a>:</p>\n<blockquote>\n<p>I guess reading Chris's blueprint is a good start?</p>\n</blockquote>\n<p>Im still trying to get this working, so there isnt much to read at the moment :P</p>",
        "id": 258975898,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635175697
    },
    {
        "content": "<p>I've created streams, even private streams, so I guess anyone can do it</p>",
        "id": 258975916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635175701
    },
    {
        "content": "<p>I think someone gave you the permission for the Xena stream, I don't see the \"create stream\" button mentioned <a href=\"https://zulip.com/help/create-a-stream\">here</a></p>",
        "id": 258976406,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635175868
    },
    {
        "content": "<p>I made a stream a while ago, but can't seem to figure out how to do it anymore. Maybe permissions have changed.</p>",
        "id": 258976634,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1635175938
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Fermat.20Last.20Theorem.20for.20regular.20primes/near/258975796\">said</a>:</p>\n<blockquote>\n<p>and modular forms are also blocked by complex analysis ;-)</p>\n</blockquote>\n<p>Well, technically \"only\" non-zero modular forms are blocked! <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 258978502,
        "sender_full_name": "Chris Birkbeck",
        "timestamp": 1635176776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> <span class=\"user-mention\" data-user-id=\"389019\">@Chris Birkbeck</span> <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span>  <a class=\"stream\" data-stream-id=\"304774\" href=\"/#narrow/stream/304774-FLT-regular\">#FLT regular</a></p>",
        "id": 258983082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635178632
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 258983105,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635178649
    },
    {
        "content": "<p>(Sorry, I was away for dinner. Otherwise I would have created it an 45 min ago.)</p>",
        "id": 258983153,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635178672
    },
    {
        "content": "<p>We've just finished the proof of the so called caseI of Fermat's last theorem for regular prime.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">caseI</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hpri</span> <span class=\"o\">:</span> <span class=\"n\">p.prime</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hreg</span> <span class=\"o\">:</span> <span class=\"n\">is_regular_number</span> <span class=\"n\">p</span> <span class=\"n\">hpri.pos</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hodd</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">caseI</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"bp\">↑</span><span class=\"n\">p</span> <span class=\"bp\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"n\">c</span> <span class=\"bp\">^</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n\n<span class=\"k\">#print</span> <span class=\"kd\">axioms</span> <span class=\"n\">caseI</span> <span class=\"c1\">--propext quot.sound classical.choice</span>\n</code></pre></div>\n<p>Thanks to everybody involved!</p>\n<p>CaseII will be significantly harder though...</p>",
        "id": 303804238,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665659607
    },
    {
        "content": "<p>We really need <code>#print actual_axioms</code> so that the output is easier to read.</p>",
        "id": 303804506,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665659729
    },
    {
        "content": "<p>I also have trouble reading <code>caseI</code> without thinking <code>case</code> and then unfreeze the instance cache, but I guess this is a more specialized perversion.</p>",
        "id": 303804669,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665659796
    },
    {
        "content": "<p>Well, we will PR all of this to mathlib at some point, and we will think about better names...</p>",
        "id": 303804881,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665659885
    },
    {
        "content": "<p>Yeah that's what we said about the perfectoid project</p>",
        "id": 303826793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665665784
    },
    {
        "content": "<p>How many lines is the project now?</p>",
        "id": 303826961,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665665844
    },
    {
        "content": "<p>I am not sure how it counts, but <a href=\"https://codetabs.com/count-loc/count-loc-online.html\">this</a> site says 6746. But note that a lot of stuff (notably the ring of integers of cyclotomic fields, that have been defined thanks to the project) is already in mathlib.</p>",
        "id": 303828295,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665666265
    },
    {
        "content": "<p>Oh that's not so much! The perfectoid project was about 15k, right? I still have faith that you could get it all in mathlib then.</p>",
        "id": 303828520,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665666345
    },
    {
        "content": "<p>Yes, we tried to PR as much as possible from the beginning. I think that fr projects of this size is the best strategy, if one is not too in a hurry.</p>",
        "id": 303828804,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1665666440
    },
    {
        "content": "<p>Not all the perfectoid project should be in mathlib, but the <code>for_mathlib</code> directory should be. To Patrick's credit, all the stuff he put in it is now in mathlib. I didn't get around to doing my part yet though :-(</p>",
        "id": 303860472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665674239
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Fermat.20Last.20Theorem.20for.20regular.20primes/near/303860472\">said</a>:</p>\n<blockquote>\n<p>Not all the perfectoid project should be in mathlib</p>\n</blockquote>\n<p>Perhaps a silly question from someone who doesn't know what a perfectoid is: why not?</p>",
        "id": 303876951,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1665678722
    },
    {
        "content": "<p>Well I guess I mean \"perfectoid spaces are a bit niche and I am not sure that I could coherently argue that they should be in a maths library\", but I guess that since 2019 we got plenty of other niche things. Maybe one day they'll be there, but a lot of that code is not really for human consumption.</p>",
        "id": 303892513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665683581
    },
    {
        "content": "<p>Write once, read never.</p>",
        "id": 303932441,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1665699071
    },
    {
        "content": "<p>It was just a publicity stunt, it wasn't supposed to be read :-)</p>",
        "id": 303946684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665708891
    }
]