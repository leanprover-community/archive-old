[
    {
        "content": "<p>Today I proved that <code>weak_univalence {α β : Sort*} : α ≃ β → α = β</code> and <code>quot.sound</code> imply choice as stated in Lean. You can get a weaker version of choice without <code>quot.sound</code>; this requires decidable equality on the type you're choosing from.<br>\n<a href=\"https://gist.github.com/ChrisHughes24/c7b8bcb3e50b2531be94f11ba2c23e3c\" target=\"_blank\" title=\"https://gist.github.com/ChrisHughes24/c7b8bcb3e50b2531be94f11ba2c23e3c\">https://gist.github.com/ChrisHughes24/c7b8bcb3e50b2531be94f11ba2c23e3c</a> </p>\n<p>Curiously, Lean didn't ask me to mark the definition as noncomputable since I only used propositional axioms.</p>\n<p>I copied the version of <code>em</code> from the HoTT book for part of this. It's much easier to understand than the Lean proof.</p>",
        "id": 170796501,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563035633
    },
    {
        "content": "<p>That is surprising, since <code>choice</code> as stated in Lean is inconsistent with full univalence.</p>",
        "id": 170806753,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1563055010
    },
    {
        "content": "<p>How much do you rely on definitional proof irrelevance?</p>",
        "id": 170806759,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1563055025
    },
    {
        "content": "<p>The main non-HoTT-valid thing I do is unique choice on <code>{β : Type u // option β = plift α}</code></p>",
        "id": 170807448,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563056323
    },
    {
        "content": "<p>Interesting. In HoTT that type is indeed not a proposition (subsingleton), while here it is. There is a weird interplay between proof irrelevance and \"weak univalence\". </p>\n<p>Some remarks (probably not new to Chris):</p>\n<ul>\n<li>Unique Choice is provable in HoTT, but the proof Chris gave is looks a little weird from a HoTT perspective, since it relies on the fact that <code>=</code> is a proposition.</li>\n<li>The proof that <code>option</code> is injective also works in HoTT. <code>unit + A ≃ unit + B → A ≃ B</code> is proven <a href=\"https://github.com/leanprover/lean2/blob/master/hott/types/sum.hlean#L276\" target=\"_blank\" title=\"https://github.com/leanprover/lean2/blob/master/hott/types/sum.hlean#L276\">here</a> in Lean 2 HoTT. It is not an \"embedding\" though (which would be necessary to do the rest of the argument in HoTT).</li>\n<li>The proof structure is interesting (weird): you first prove decidable choice, then you prove LEM from that, and then you use that to show that the decidability condition in choice is superfluous.</li>\n</ul>",
        "id": 170809026,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1563059844
    },
    {
        "content": "<p>Although your proof heavily relies on proof irrelevance, I don't think you ever need it to be definitional.</p>",
        "id": 170809164,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1563060031
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"kn\">definition</span> <span class=\"n\">unit_sum_equiv_cancel_map</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">mem_cases</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rotate</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">u</span> <span class=\"k\">with</span> <span class=\"n\">u</span> <span class=\"n\">Hu</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">mem_cases</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"err\">⋆</span><span class=\"o\">))</span> <span class=\"k\">with</span> <span class=\"n\">u&#39;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">rotate</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">u&#39;</span> <span class=\"k\">with</span> <span class=\"n\">u&#39;</span> <span class=\"n\">Hu&#39;</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">empty_of_inl_eq_inr</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span> <span class=\"n\">inl</span> <span class=\"err\">⋆</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"bp\">⁻¹</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"err\">⋆</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">to_left_inv</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"err\">⋆</span><span class=\"o\">))</span><span class=\"bp\">⁻¹</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"bp\">⁻¹</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">u&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">Hu&#39;</span><span class=\"o\">}</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"bp\">⁻¹</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_prop</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">H</span><span class=\"bp\">⁻¹</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">Hu</span><span class=\"bp\">⁻¹</span><span class=\"o\">}</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">inr</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">to_left_inv</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">inr</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 170818961,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563080641
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean2/blob/master/hott/types/sum.hlean#L218\" target=\"_blank\" title=\"https://github.com/leanprover/lean2/blob/master/hott/types/sum.hlean#L218\">https://github.com/leanprover/lean2/blob/master/hott/types/sum.hlean#L218</a></p>",
        "id": 170818995,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563080645
    },
    {
        "content": "<p>I cannot understand this at all</p>",
        "id": 170819002,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563080649
    },
    {
        "content": "<p>The proof is not readable at all, and also not intended as such. The idea is, given <code>f : unit + A ≃ unit + B</code> we define a function <code>g : A → B</code> such that</p>\n<ul>\n<li>if <code>f(inr a) = inr b</code> then <code>g(a) = b</code></li>\n<li>if <code>f(inr a) = inl star</code> then <code>f (inl star) = inr b'</code> for some <code>b'</code> and we define <code>g(a) = b'</code></li>\n<li>Everything after the <code>exfalso</code> is a (longer than necessary) proof that <code>f(inr a) = inl star</code> and <code>f (inl star) = inl star</code> is impossible.</li>\n</ul>",
        "id": 170828029,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1563098920
    },
    {
        "content": "<p>oh I understand it now, I thought it was some HoTT-specific thing that didn't hold in real maths</p>",
        "id": 170828975,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563100944
    },
    {
        "content": "<p>thanks</p>",
        "id": 170828976,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1563100949
    }
]