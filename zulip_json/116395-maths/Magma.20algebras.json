[
    {
        "content": "<p>Rather ironically, having previously wondered if Mathlib's generalisation of a group algebra to a monoid algebra was necessary, I now find myself wanting to generalise it further to a raw magma algebra.</p>",
        "id": 229131569,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615067017
    },
    {
        "content": "<p>Of course very little is true at this level of generality, basically just the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.monoid_algebra</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">magma_algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finsupp</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">magma_algebra</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">→₀</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">magma_algebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp.add_comm_monoid</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">magma_algebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp.semimodule</span> <span class=\"n\">X</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">magma_algebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a.sum</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">m₁</span> <span class=\"n\">t₁</span><span class=\"o\">,</span> <span class=\"n\">b.sum</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">m₂</span> <span class=\"n\">t₂</span><span class=\"o\">,</span> <span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">m₁</span> <span class=\"bp\">*</span> <span class=\"n\">m₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t₁</span> <span class=\"bp\">*</span> <span class=\"n\">t₂</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul_bilinear</span> <span class=\"o\">:</span> <span class=\"n\">magma_algebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">magma_algebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">magma_algebra</span> <span class=\"n\">R</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span>    <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span>  <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">magma_algebra</span>\n</code></pre></div>",
        "id": 229131652,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615067076
    },
    {
        "content": "<p>In other words we get a (in general) non-unital, (in general) non-associative algebra. Note that we don't have a bundled typeclass for these.</p>",
        "id": 229131736,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615067163
    },
    {
        "content": "<p>So I think what I'd like to do is a slight refactor of our monoid algebras to factor them through something along the lines of the above. Any objections / comments?</p>",
        "id": 229131986,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615067401
    },
    {
        "content": "<p>Out of curiosity, what are you planning to use these for?</p>",
        "id": 229132402,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1615067799
    },
    {
        "content": "<p>I was wondering if someone would ask!</p>",
        "id": 229132685,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615068069
    },
    {
        "content": "<p>I want to construct free Lie algebras and the standard construction is to build them as a quotient of the magma algebra of the free magma of a type.</p>",
        "id": 229132770,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615068166
    },
    {
        "content": "<p>I was delighted to see that we actually have free magmas so it looks like I can get this to work.</p>",
        "id": 229132817,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615068207
    },
    {
        "content": "<p>(Given a type <code>X</code> and a commutative ring <code>R</code>, there is a much easier construction that constructs the free Lie algebra <code>FL(R, X)</code> as the Lie subalgebra generated by <code>X</code> inside the free associative algebra <code>F(X, R)</code> but it only works with some assumptions on <code>R</code>, so I don't want to use it.)</p>",
        "id": 229133023,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615068383
    },
    {
        "content": "<p>I believe I could also just construct <code>FL(R, X)</code> directly as a quotient of a custom inductive type like we have for <code>F(X)</code> but I figured I'd try the standard construction first.</p>",
        "id": 229133131,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615068462
    },
    {
        "content": "<p>I would suggest the following route: define the free monoid on a magma, then the magma algebra as the monojd algebra associated to that!</p>",
        "id": 229140575,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615075838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Magma.20algebras/near/229140575\">said</a>:</p>\n<blockquote>\n<p>I would suggest the following route: define the free monoid on a magma, then the magma algebra as the monojd algebra associated to that!</p>\n</blockquote>\n<p>I can't quite seem to make sense of this. Could you spell it out a bit more?</p>",
        "id": 229178480,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615114904
    },
    {
        "content": "<p>I've sketched out how this might look if I push ahead here: <a href=\"https://github.com/leanprover-community/mathlib/pull/6571\">https://github.com/leanprover-community/mathlib/pull/6571</a></p>",
        "id": 229185469,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615121648
    },
    {
        "content": "<p>Is the api the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra/src\">src#monoid_algebra</a>? If so, can you just relax the typeclass assumptions on the latter?</p>",
        "id": 229187409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615123551
    },
    {
        "content": "<p>In fact, the assumptions aren't even there!</p>",
        "id": 229187468,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615123582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> What I had in mind is the following: Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">S</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">m</mi><mi mathvariant=\"bold\">i</mi><mi mathvariant=\"bold\">r</mi><mi mathvariant=\"bold\">i</mi><mi mathvariant=\"bold\">n</mi><mi mathvariant=\"bold\">g</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Semiring}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">S</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">m</span><span class=\"mord mathbf\">i</span><span class=\"mord mathbf\">r</span><span class=\"mord mathbf\">i</span><span class=\"mord mathbf\">n</span><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">g</span></span></span></span></span> resp. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">M</mi><mi mathvariant=\"bold\">o</mi><mi mathvariant=\"bold\">n</mi><mi mathvariant=\"bold\">o</mi><mi mathvariant=\"bold\">i</mi><mi mathvariant=\"bold\">d</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Monoid}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">M</span><span class=\"mord mathbf\">o</span><span class=\"mord mathbf\">n</span><span class=\"mord mathbf\">o</span><span class=\"mord mathbf\">i</span><span class=\"mord mathbf\">d</span></span></span></span></span> resp. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">M</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">g</mi><mi mathvariant=\"bold\">m</mi><mi mathvariant=\"bold\">a</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Magma}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8805499999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">M</span><span class=\"mord mathbf\">a</span><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">g</span><span class=\"mord mathbf\">m</span><span class=\"mord mathbf\">a</span></span></span></span></span> denote the categories of semirings resp. monoids resp. magmas.<br>\nThere are forgetful functors</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mrow><mi mathvariant=\"bold\">S</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">m</mi><mi mathvariant=\"bold\">i</mi><mi mathvariant=\"bold\">r</mi><mi mathvariant=\"bold\">i</mi><mi mathvariant=\"bold\">n</mi><mi mathvariant=\"bold\">g</mi></mrow><mo>→</mo><mrow><mi mathvariant=\"bold\">M</mi><mi mathvariant=\"bold\">o</mi><mi mathvariant=\"bold\">n</mi><mi mathvariant=\"bold\">o</mi><mi mathvariant=\"bold\">i</mi><mi mathvariant=\"bold\">d</mi></mrow><mo>→</mo><mrow><mi mathvariant=\"bold\">M</mi><mi mathvariant=\"bold\">a</mi><mi mathvariant=\"bold\">g</mi><mi mathvariant=\"bold\">m</mi><mi mathvariant=\"bold\">a</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Semiring} \\to \\mathbf{Monoid} \\to \\mathbf{Magma}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">S</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">m</span><span class=\"mord mathbf\">i</span><span class=\"mord mathbf\">r</span><span class=\"mord mathbf\">i</span><span class=\"mord mathbf\">n</span><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">M</span><span class=\"mord mathbf\">o</span><span class=\"mord mathbf\">n</span><span class=\"mord mathbf\">o</span><span class=\"mord mathbf\">i</span><span class=\"mord mathbf\">d</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8805499999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">M</span><span class=\"mord mathbf\">a</span><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">g</span><span class=\"mord mathbf\">m</span><span class=\"mord mathbf\">a</span></span></span></span></span></span></p>\n<p>all of which have left adjoints (by general universal algebra nonsense). The left adjoint <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mi mathvariant=\"bold\">M</mi><mi mathvariant=\"bold\">o</mi><mi mathvariant=\"bold\">n</mi><mi mathvariant=\"bold\">o</mi><mi mathvariant=\"bold\">i</mi><mi mathvariant=\"bold\">d</mi></mrow><mo>→</mo><mrow><mi mathvariant=\"bold\">S</mi><mi mathvariant=\"bold\">e</mi><mi mathvariant=\"bold\">m</mi><mi mathvariant=\"bold\">i</mi><mi mathvariant=\"bold\">r</mi><mi mathvariant=\"bold\">i</mi><mi mathvariant=\"bold\">n</mi><mi mathvariant=\"bold\">g</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Monoid} \\to \\mathbf{Semiring}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">M</span><span class=\"mord mathbf\">o</span><span class=\"mord mathbf\">n</span><span class=\"mord mathbf\">o</span><span class=\"mord mathbf\">i</span><span class=\"mord mathbf\">d</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">S</span><span class=\"mord mathbf\">e</span><span class=\"mord mathbf\">m</span><span class=\"mord mathbf\">i</span><span class=\"mord mathbf\">r</span><span class=\"mord mathbf\">i</span><span class=\"mord mathbf\">n</span><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">g</span></span></span></span></span> is the monoid algebra (over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>, but this can be generalized if you consider algebras as well), and the left adjoint from magmas to monoids is what I mean by \"the free monoid on a magma\". The composition of these two left adjoints is the left adjoint of the composition, which is the so-called \"magma algebra\" (again over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span></span></span></span>, but it can be generalized)</p>",
        "id": 229187496,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615123616
    },
    {
        "content": "<p>However if you need an explicit description of the magma algebra as a <code>finsupp</code> like in your code, then that's a different story and it's probably better to make an explicit construction as you did.</p>",
        "id": 229187559,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615123666
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra.has_mul\">docs#monoid_algebra.has_mul</a> has an unnecessary monoid assumption that can be relaxed to has_mul</p>",
        "id": 229187642,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615123728
    },
    {
        "content": "<p>No need for a new definition for magma_algebra</p>",
        "id": 229187677,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615123788
    },
    {
        "content": "<p>Not true... The 1 in the monoid must become the 1 in the algebra</p>",
        "id": 229187735,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615123810
    },
    {
        "content": "<p>So you first need to add a 1 in some free way, then make the algebra, and in this case, yes I agree with you <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 229187800,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615123898
    },
    {
        "content": "<p>Here's a silly way to \"attach a one\" to a type with <code>has_mul</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">with_one</span> <span class=\"o\">:=</span> <span class=\"n\">option</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">none</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">with_one</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">do</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"bp\">←</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">Y</span> <span class=\"bp\">←</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">return</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">*</span> <span class=\"n\">Y</span><span class=\"o\">)}⟩</span>\n</code></pre></div>",
        "id": 229188573,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615124587
    },
    {
        "content": "<p>Do we have something like this in mathlib?</p>",
        "id": 229188587,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615124592
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/with_one.monoid\">docs#with_one.monoid</a></p>",
        "id": 229188597,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1615124622
    },
    {
        "content": "<p>Oh wait... I now realize that the magma algebra need not be associative. Ignore everything I said!</p>",
        "id": 229189878,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615125805
    },
    {
        "content": "<p>Do we even have nonassociative algebras in mathlib?</p>",
        "id": 229189945,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615125845
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra\">docs#algebra</a> requires <code>semiring</code> which is associative</p>",
        "id": 229192527,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615128011
    },
    {
        "content": "<p>Aren't Lie algebras (barely) non-associative?</p>",
        "id": 229192565,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1615128048
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Magma.20algebras/near/229189945\">said</a>:</p>\n<blockquote>\n<p>Do we even have nonassociative algebras in mathlib?</p>\n</blockquote>\n<p>We do not. We do have Lie algebras as Damiano mentioned but these are not set up as a special type of non-associative algebra (obviously, since we don't have such a notion).  In particular, <code>algebra</code> and <code>lie_algebra</code> most recent common ancestor is <code>has_scalar</code>!</p>\n<p>Note also that Lie algebra multiplication is encoded using the <code>has_bracket</code> typeclass rather than <code>has_mul</code>, though we should be able to meta-program-away any awkwardness associated with this.</p>",
        "id": 229200292,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615135059
    },
    {
        "content": "<p>As I've worked on Lie algebras, I have occasionally considered whether we might need to unify with associative algebras, presumably via a general not-necessarily-associative, not-necessarily-unital algebra. So far the only compelling case has been for derivations and this is part of the reason I have avoided defining them for Lie algebras for now.</p>",
        "id": 229200536,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615135247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Magma.20algebras/near/229187642\">said</a>:</p>\n<blockquote>\n<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra.has_mul\">docs#monoid_algebra.has_mul</a> has an unnecessary monoid assumption that can be relaxed to has_mul</p>\n</blockquote>\n<p>Agreed, in the sense that it is unnecessary in order to define the convolution multiplication; that is essentially my point in seeking to define these magma algebras.</p>",
        "id": 229200630,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615135343
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Magma.20algebras/near/229187677\">said</a>:</p>\n<blockquote>\n<p>No need for a new definition for magma_algebra</p>\n</blockquote>\n<p>Basically I agree and indeed in my <a href=\"https://github.com/leanprover-community/mathlib/pull/6571\">candidate PR</a> I reuse the definition for the convolution multiplication so I don't actually make a new definition. On the other hand, I am creating a new name <code>magma_algebra</code> because I want to avoid having to call the <code>magma_algebra</code> a <code>monoid_algebra</code>.</p>",
        "id": 229201208,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615135877
    },
    {
        "content": "<p>I hope to have a little more time later today. Perhaps the best thing to do if for me to turn that PR into a genuine proposal and seek feedback there?</p>",
        "id": 229201218,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615135912
    },
    {
        "content": "<p>I just created <a href=\"https://github.com/leanprover-community/mathlib/issues/6572\">#6572</a> with the refactor I was suggesting. I'm sure it doesn't go all the way to what you're after, but it seems like a sensible cleanup anyway</p>",
        "id": 229201429,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615136124
    },
    {
        "content": "<p>Thanks, I'll take a quick look now.</p>",
        "id": 229203259,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615137754
    },
    {
        "content": "<p>My PR is merged, so you should now be good to go on splitting out <code>magma_algebra</code>.</p>\n<p>It seems to me what you're actually missing is some kind of <code>algebra_without_one</code> typeclass which has <code>smul_mul_assoc</code> and <code>mul_smul_comm</code> fields?</p>",
        "id": 229336343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1615223121
    },
    {
        "content": "<p>Thanks, I saw the merge. Nice!</p>",
        "id": 229337973,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615223685
    },
    {
        "content": "<p>I do plan to continue now. In the meantime I bit the bullet and put together a proposal for non-associative algebras <a href=\"https://github.com/leanprover-community/mathlib/pull/6591\">https://github.com/leanprover-community/mathlib/pull/6591</a> which I think is approximately what you're describing. I guess I'll wait and see how that is received. It's just one possible way to set things up.</p>",
        "id": 229338040,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1615223718
    }
]