[
    {
        "content": "<p>Do we already have statements that say to topological group/add_group topologies are the same iff they have the same nhds of 1 (resp. 0)?</p>",
        "id": 160473318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552306531
    },
    {
        "content": "<p>This kind if question should be easier to answer now (that was one of the goal of the reorganization PRs). You have exactly one file that could contain this lemma: <code>topology/algebra/group</code>. So the answer is no</p>",
        "id": 160479727,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552312054
    },
    {
        "content": "<p>However it follows very easily from stuff that is there, after you add a lemma which should be obviously in <code>topology/basic</code>.</p>",
        "id": 160479813,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552312100
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_nhds</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">t&#39;</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">nhds</span> <span class=\"n\">α</span> <span class=\"n\">t</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">nhds</span> <span class=\"n\">α</span> <span class=\"n\">t&#39;</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">topological_space_eq</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"bp\">@</span><span class=\"n\">is_open</span> <span class=\"bp\">_</span> <span class=\"n\">t</span> <span class=\"n\">s</span> <span class=\"bp\">↔</span> <span class=\"bp\">@</span><span class=\"n\">is_open</span> <span class=\"bp\">_</span> <span class=\"n\">t&#39;</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_open_iff_mem_nhds</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">topological_group</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">t&#39;</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">tg</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span> <span class=\"n\">t</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">tg&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">topological_group</span> <span class=\"n\">G</span> <span class=\"n\">t&#39;</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">nhds</span> <span class=\"n\">G</span> <span class=\"n\">t</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">nhds</span> <span class=\"n\">G</span> <span class=\"n\">t&#39;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">t&#39;</span> <span class=\"o\">:=</span>\n<span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">eq_iff_nhds</span> <span class=\"n\">t</span> <span class=\"n\">t&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"bp\">@</span><span class=\"n\">nhds_translation_mul_inv</span> <span class=\"n\">G</span> <span class=\"n\">t</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"bp\">@</span><span class=\"n\">nhds_translation_mul_inv</span> <span class=\"n\">G</span> <span class=\"n\">t&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">x</span> <span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">h</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 160479824,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552312109
    },
    {
        "content": "<p>Of course it's a bit annoying to see all those <code>@</code> but the type class system is not convenient when you want to discuss different topologies on a given type</p>",
        "id": 160479867,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552312164
    },
    {
        "content": "<p>The first lemma is part of a bigger hole in the API. I think we don't have the lemma telling you that, under suitable conditions, a map from <code>α</code> to <code>filter α</code> is <code>nhds</code> for a (unique) topology on <code>α</code></p>",
        "id": 160480034,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552312266
    },
    {
        "content": "<p>Thanks for these lemma's Patrick. They are now in <code>for_mathlib/topology</code> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 160481606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1552313480
    },
    {
        "content": "<p><code>topological_space.eq_iff_nhds </code> is called <code>eq_of_nhds_eq_nhds</code></p>",
        "id": 160483862,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552315022
    },
    {
        "content": "<p>oops, it accidentally went to <code>topology/order</code> where I wasn't looking for it...</p>",
        "id": 160484224,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552315265
    },
    {
        "content": "<p>ooh, it's because you indeed proved it using the order on topologies</p>",
        "id": 160484367,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552315372
    },
    {
        "content": "<p>Johannes, do you know if the construction of a topology from a suitable function from X to filter X is there?</p>",
        "id": 160484522,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552315481
    },
    {
        "content": "<p><code>mk_of_nhds</code></p>",
        "id": 160488029,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552317820
    },
    {
        "content": "<p>Then what you want is: <code>nhds_mk_of_nhds</code> which tells you that the neighbourhoods of <code>mk_of_nhds</code> are the right ones</p>",
        "id": 160488099,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552317848
    },
    {
        "content": "<p>I don't know why I can't find anything in mathlib today, but thanks!</p>",
        "id": 160489371,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552318794
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/629\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/629\">https://github.com/leanprover-community/mathlib/issues/629</a></p>",
        "id": 160489481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552318846
    },
    {
        "content": "<p>Johannes -- what will we do without you!</p>",
        "id": 160489513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552318866
    },
    {
        "content": "<p>My memory is even worse than I feared. I just thought: why isn't this used in <code>topology/algebra/group</code> when constructing a group topology from a filter around zero? Answer: it <em>is</em> used there.</p>",
        "id": 160489723,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552318995
    },
    {
        "content": "<p>oops, I mistakenly pushed directly to mathlib master while I wanted to create a PR. This was a six lines addition, I hope it's fine</p>",
        "id": 160492267,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552320677
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> please don't hesitate to complain, I can still push corrections <span aria-label=\"blushing\" class=\"emoji emoji-1f633\" role=\"img\" title=\"blushing\">:blushing:</span></p>",
        "id": 160492399,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552320758
    },
    {
        "content": "<p>No problem, looks good to me.</p>",
        "id": 160494186,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552321980
    }
]