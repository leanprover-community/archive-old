[
    {
        "content": "<p>I've been trying to port some of the results in <code>giry_monad.lean</code> over to probability measures, and i'm struggling with the first one. <br>\nCan someone help?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">giry_monad</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span> <span class=\"n\">set</span> <span class=\"n\">lattice</span>\n\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">probability_measure</span> <span class=\"kn\">extends</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">measure_univ</span> <span class=\"o\">:</span> <span class=\"n\">to_measure</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">probability_measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">measure</span><span class=\"bp\">.</span><span class=\"n\">measurable_space</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">probability_measure</span><span class=\"bp\">.</span><span class=\"n\">to_measure</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">measurable_to_measure</span> <span class=\"o\">:</span>\n  <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">probability_measure</span><span class=\"bp\">.</span><span class=\"n\">to_measure</span> <span class=\"n\">α</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">measurable_space</span><span class=\"bp\">.</span><span class=\"n\">le_map_comap</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">prob_measure_coe</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">probability_measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">probability_measure</span><span class=\"bp\">.</span><span class=\"n\">to_measure</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">probability_measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ_</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">nnreal</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ennreal</span><span class=\"bp\">.</span><span class=\"n\">to_nnreal</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">to_measure</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">measurable_coe</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">measurable_space</span><span class=\"bp\">.</span><span class=\"n\">comap_le_iff_le_map</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"n\">le_supr_of_le</span> <span class=\"n\">s</span> <span class=\"err\">$</span> <span class=\"n\">le_supr_of_le</span> <span class=\"n\">hs</span> <span class=\"err\">$</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">measurable_coe&#39;</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">probability_measure</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">μ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">measurable_space</span><span class=\"bp\">.</span><span class=\"n\">comap_le_iff_le_map</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">probability_measure</span><span class=\"bp\">.</span><span class=\"n\">measurable_space</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">measurable_space</span><span class=\"bp\">.</span><span class=\"n\">comap_le_iff_le_map</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 169902150,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562617800
    },
    {
        "content": "<p>I guess the first thing you want to show is that <code>coe</code> is a measurable function</p>",
        "id": 169904737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562619836
    },
    {
        "content": "<p>which should follow from the definition of the measurable space as the comap of <code>coe</code></p>",
        "id": 169904808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562619869
    },
    {
        "content": "<p>do you mean <code>ennreal.measurable_coe</code>?</p>",
        "id": 169904988,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562619997
    },
    {
        "content": "<p>I mean the coe from <code>probability_measure</code> to <code>measure</code> that you just defined</p>",
        "id": 169905022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562620025
    },
    {
        "content": "<p>I think what you called <code>measurable_coe</code> is a different statement</p>",
        "id": 169905066,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562620071
    },
    {
        "content": "<p>yes thats the lemma <code>measurable_to_measure</code> in the snippet</p>",
        "id": 169905125,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562620090
    },
    {
        "content": "<p>aha, so it is</p>",
        "id": 169905143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562620106
    },
    {
        "content": "<p>If you compose <code>measurable_to_measure</code> with <code>measurable_coe</code> you should get <code>measurable_coe'</code></p>",
        "id": 169905164,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562620128
    },
    {
        "content": "<p><code>apply measurable.comp</code> is picking up a different composition..</p>",
        "id": 169905645,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562620531
    },
    {
        "content": "<p>dude, stop using apply, it's bad for your health</p>",
        "id": 169906149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562620960
    },
    {
        "content": "<p>Someone told me to stop using <code>rw</code> because that was bad for my health</p>",
        "id": 169906566,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562621364
    },
    {
        "content": "<p>Do you recommend <code>refine</code>?</p>",
        "id": 169906586,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562621387
    },
    {
        "content": "<p>I'm pretty sure he does</p>",
        "id": 169906597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562621400
    },
    {
        "content": "<p>but <code>rw</code> is a great tactic, keep using that</p>",
        "id": 169906663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562621420
    },
    {
        "content": "<p>why is <code>apply</code> bad?</p>",
        "id": 169906836,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562621618
    },
    {
        "content": "<p>because it is imprecise and buggy</p>",
        "id": 169906847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562621632
    },
    {
        "content": "<p>because the elaborator needs to figure out how many spaces you are leaving</p>",
        "id": 169906851,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562621640
    },
    {
        "content": "<p>or the kernel or whatever</p>",
        "id": 169906895,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562621647
    },
    {
        "content": "<p>especially <code>measurable.comp</code> is a bad thing to apply because matching the composition is wildly ambiguous</p>",
        "id": 169906915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562621684
    },
    {
        "content": "<p>We seem to have used <code>apply</code> well over 200 times in the perfectoid project.</p>",
        "id": 169906946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562621721
    },
    {
        "content": "<p>you will have much better luck if you actually specify at least one of the two functions in the composition</p>",
        "id": 169906948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562621722
    },
    {
        "content": "<p><code>apply</code> is fine when it works, but you should be pleasantly surprised when it does work</p>",
        "id": 169907018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562621774
    },
    {
        "content": "<p>but one thing I've learnt about <code>apply</code> is that in general you shouldn't get too cocky with it, or you'll end up with 10 goals some of which are metavariables and some of which are instances which are already in your context and some of which will randomly disappear later on for no obvious reason</p>",
        "id": 169907024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562621786
    },
    {
        "content": "<p>how is <code>refine</code> different from <code>apply</code>?</p>",
        "id": 169907037,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562621805
    },
    {
        "content": "<p>I think writing an entire proof using apply, apply, apply is bad style</p>",
        "id": 169907042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562621811
    },
    {
        "content": "<p>You get control over what you want to specify now and what to leave to the next step</p>",
        "id": 169907058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562621836
    },
    {
        "content": "<p>for example instead of <code>apply foo, apply bar</code> you can write <code>refine foo bar _</code> or <code>refine foo _ bar</code></p>",
        "id": 169907070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562621858
    },
    {
        "content": "<p>With <code>apply</code> you should usually fill in as many of the gaps as you can.</p>",
        "id": 169907072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562621861
    },
    {
        "content": "<p>My thought process is usually: \"aah, random_lemma has conclusion equal to my goal, let's try applying that with <code>apply random_lemma</code>, oh crap I now have a gazillion goals not all of which are solvable, maybe I should have used <code>refine random_lemma _ _</code>, oh wait, what am I even doing, I may as well just fill in those <code>_</code>s, oh look, now it's working great again\"</p>",
        "id": 169907190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1562621972
    }
]