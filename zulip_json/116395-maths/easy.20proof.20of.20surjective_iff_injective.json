[
    {
        "content": "<p>Is there an easy proof of </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span>  <span class=\"n\">injective_iff_surjective</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"err\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span>  <span class=\"n\">surjective</span> <span class=\"n\">f</span>\n</pre></div>\n\n\n<p>It took me 40 lines, but with stuff like this, there's often some one or two line proof.</p>",
        "id": 124726537,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523032713
    },
    {
        "content": "<p>I have no idea whether this maths idea is easily leanified, but using e you can build a map alpha -&gt; alpha (f then e to get you back to alpha), and if the collection of all such maps alpha -&gt; alpha is known to be a fintype then you know there must exist nats <code>a&lt;b</code> with f^a = f^b (f^n = f composed with itself n times).</p>",
        "id": 124726662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523032930
    },
    {
        "content": "<p>Now under either the injectivity or the surjectivity assumption you can deduce f^{b-a} = id</p>",
        "id": 124726668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523032948
    },
    {
        "content": "<p>and then f^{b-a-1} is the inverse</p>",
        "id": 124726669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523032956
    },
    {
        "content": "<p>Sounds very doable. I'm not sure there's a power function on functions yet though.</p>",
        "id": 124727085,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523033532
    },
    {
        "content": "<p>Longer, but cooler</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"k\">fun</span><span class=\"bp\">.</span><span class=\"n\">monoid</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"err\">∘</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eq_of_left_inv_of_right_inv</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n    <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"n\">c</span>  <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n<span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₃</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pow_mul_pow_eq_one</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span> <span class=\"bp\">_</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_succ&#39;</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span> <span class=\"n\">pow_mul_pow_eq_one</span> <span class=\"n\">n</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_eq_one_of_mul_eq_one</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">hmn</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">not_injective_nat_fintype</span>\n<span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">injective</span> <span class=\"o\">(</span><span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">pow</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"k\">from</span>\n<span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">by_contradiction</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">),</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hmn₁</span><span class=\"o\">,</span> <span class=\"n\">hmn₂</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hmn</span> <span class=\"k\">in</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">clear</span> <span class=\"bp\">_</span><span class=\"n\">let_match</span><span class=\"o\">,</span>\n  <span class=\"n\">wlog</span> <span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"kn\">using</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_pos_of_lt</span> <span class=\"o\">(</span><span class=\"n\">lt_of_le_of_ne</span> <span class=\"n\">hn</span> <span class=\"n\">hmn₁</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n    <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">pow_add</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_add_cancel</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">hmn₂</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">pow_mul_pow_eq_one</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">succ_pred_eq_of_pos</span>\n      <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">pow_succ&#39;</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_of_left_inv_of_right_inv</span> <span class=\"n\">h</span> <span class=\"n\">h₁</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">surjective_iff_injective</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">surjective</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">cases_on</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">hinj</span><span class=\"o\">,</span> <span class=\"n\">surjective_of_has_right_inverse</span> <span class=\"err\">$</span>\n    <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">injective</span><span class=\"bp\">.</span><span class=\"n\">has_left_inverse</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">⟩</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hinj</span> <span class=\"k\">in</span>\n    <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_eq_one_of_mul_eq_one</span>\n        <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">id_of_left_inverse</span> <span class=\"n\">hg</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">hsurj</span><span class=\"o\">,</span> <span class=\"n\">injective_of_has_left_inverse</span> <span class=\"err\">$</span>\n    <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">surjective</span><span class=\"bp\">.</span><span class=\"n\">has_right_inverse</span> <span class=\"n\">hsurj</span> <span class=\"k\">in</span>\n    <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_eq_one_of_mul_eq_one</span>\n        <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">id_of_right_inverse</span> <span class=\"n\">hg</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"bp\">⟩⟩</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">⟩</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 124733354,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523041679
    },
    {
        "content": "<p>Some of the monoid stuff is there already actually.</p>",
        "id": 124733504,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523041920
    },
    {
        "content": "<p>I agree it's cooler, in the sense that you seem here to be proving what look like fundamental facts about monoids. Dumb question:  is there some infinite monoid for which an element can have a left inverse which is not a right inverse?</p>",
        "id": 124734102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523042756
    },
    {
        "content": "<p>That's the sort of question asked by someone who does not have a good enough collection of monoids in their brain</p>",
        "id": 124734144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523042770
    },
    {
        "content": "<p>Yes. <code>pred</code> and <code>succ</code> are a perfect example of this: <code>pred (succ n) = n</code> but <code>succ (pred n) != n</code></p>",
        "id": 124734460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523043216
    },
    {
        "content": "<p>Aah, endomorphisms of an arbitrary set are a monoid.</p>",
        "id": 124736849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523046699
    },
    {
        "content": "<p>I see. In fact a category with one object is the same thing as a monoid, and an example of a category with one object is take your favourite algebraic structure and consider structure-preserving endomorphisms of an object with that structure.</p>",
        "id": 124736923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523046789
    },
    {
        "content": "<p>Here we have the simple case of a set, i.e. no algebraic structure at all.</p>",
        "id": 124736932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523046804
    },
    {
        "content": "<p>well, maybe \"the empty algebraic structure\" is a better way of saying it</p>",
        "id": 124736947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523046836
    },
    {
        "content": "<p>so this (succ and pred) is a proof that the naturals are not a fintype.</p>",
        "id": 124737052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523046960
    },
    {
        "content": "<p>actually, that's circular, because Chris (and me!) uses the fact that they're infinite in the proof.</p>",
        "id": 124737895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523048114
    },
    {
        "content": "<p>Oh, +1 for use of wlog ;-)</p>",
        "id": 124737952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523048169
    },
    {
        "content": "<p>Was <code>wlog</code> hard to use?</p>",
        "id": 124737978,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523048236
    },
    {
        "content": "<p>No, it's just such a natural maths thing to use and it wasn't there a few weeks ago :-)</p>",
        "id": 124738032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523048288
    },
    {
        "content": "<p>So just the opposite really.</p>",
        "id": 124738034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523048294
    },
    {
        "content": "<p>Glad to hear it :)</p>",
        "id": 124738150,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523048509
    }
]