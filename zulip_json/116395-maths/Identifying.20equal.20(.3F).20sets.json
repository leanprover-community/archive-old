[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">clopen_basis'</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">clopen_sets</span> <span class=\"o\">((</span><span class=\"n\">zmod</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">clopen_sets</span> <span class=\"o\">((</span><span class=\"n\">zmod</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"n\">ℤ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">))),</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">⟨({</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">zmod</span> <span class=\"n\">d</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">(</span><span class=\"n\">set.preimage</span> <span class=\"o\">(</span><span class=\"n\">padic_int.to_zmod_pow</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">{(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">))}),</span>\n    <span class=\"n\">is_clopen_prod</span> <span class=\"o\">(</span><span class=\"n\">is_clopen_discrete</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">d</span><span class=\"o\">))</span>\n      <span class=\"o\">(</span><span class=\"n\">proj_lim_preimage_clopen</span> <span class=\"n\">p</span> <span class=\"n\">d</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>The definition above describes a clopen basis, of type <code>set (clopen_sets ((zmod d) × ℤ_[p])) </code>. I am trying to prove a lemma which gives me as input <code>U : clopen_sets clopen_sets ((zmod d) × ℤ_[p])</code> and <code>hU : U ∈ clopen_basis' p d</code>. I want to use this information to construct <code>V : clopen_basis' p d</code>, such that, (mathematically) V = U. When I try <code>set V := ⟨U, hU⟩ with hV,</code>, I get the following error : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">constructor</span> <span class=\"o\">⟨</span><span class=\"bp\">...</span><span class=\"o\">⟩,</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">an</span> <span class=\"kd\">inductive</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>\n<p>However, if I do <code>have V : clopen_basis' p d := ⟨U, hU⟩</code>, this works. This is not useful though, since Lean does not remember the proof of the statement.</p>\n<p>Another option that works is <code>set V := subtype.mk U hU with hV</code>, however, it does not recognize <code>V</code> to have the desired type, instead, V has type <code>{x // x ∈ clopen_basis' p d}</code>. This makes complete sense, but there must be a way to identify this to be the same as <code>clopen_basis' p d</code>.</p>\n<p>Any help is appreciated, thank you!</p>",
        "id": 247611493,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1627578252
    },
    {
        "content": "<p>Does <code>set V : clopen_basis' p d := ⟨U, hU⟩ with hV</code> work? It's hard to tell what's going on without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 247611924,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627578443
    },
    {
        "content": "<p>Apologies, it is a little difficult to provide an MWE for this, let me try.</p>",
        "id": 247612150,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1627578537
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Identifying.20equal.20.28.3F.29.20sets/near/247611924\">said</a>:</p>\n<blockquote>\n<p>Does <code>set V : clopen_basis' p d := ⟨U, hU⟩ with hV</code> work? It's hard to tell what's going on without a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>\n</blockquote>\n<p>I get the following error :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">definev</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">value</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">clopen_basis'</span> <span class=\"n\">p</span> <span class=\"n\">d</span><span class=\"o\">}</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">clopen_basis'</span> <span class=\"n\">p</span> <span class=\"n\">d</span>\n</code></pre></div>",
        "id": 247612191,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1627578555
    },
    {
        "content": "<p>Ah. Try <code>set V : ↥(clopen_basis' p d) := ⟨U, hU⟩ with hV</code></p>",
        "id": 247612468,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627578677
    },
    {
        "content": "<p>Ah, thank you!<br>\nAlternatively, I just realized I could convert <code>clopen_basis' p d</code> into a subtype, and that might just end up working out.</p>",
        "id": 247612640,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1627578757
    },
    {
        "content": "<p>I don't really know what you're trying to prove here, but you might want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_topological_basis_clopen\">docs#is_topological_basis_clopen</a></p>",
        "id": 247612886,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627578865
    },
    {
        "content": "<p>and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_topological_basis_infi\">docs#is_topological_basis_infi</a></p>",
        "id": 247612944,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627578893
    },
    {
        "content": "<p>I will keep those in mind, thank you! :)</p>",
        "id": 247613331,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1627579075
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.is_topological_basis.prod\">docs#topological_space.is_topological_basis.prod</a> might also be useful</p>",
        "id": 247613423,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1627579118
    }
]