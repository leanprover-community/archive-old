[
    {
        "content": "<p><code>monoid_algebra k G</code> is defined by mathlib as <code>finsupp G k</code>. When working with <code>finsupp a b</code>, we can call <code>a</code> the domain and <code>b</code> the codomain (and do so in lemma names, eg <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.map_domain\">docs#finsupp.map_domain</a>).</p>\n<p>Since <code>monoid_algebra</code> doesn't define <code>has_coe_to_fun</code> (and <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> argues it should not), the terminology of domain and codomain doesn't really make sense when stating lemmas about it.</p>\n<p>What terminology should I use instead?</p>",
        "id": 212971038,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602432585
    },
    {
        "content": "<p>It just so happens that this algebra has a basis indexed by <code>G</code>. That's why (from a mathematical perspective) one should not name anything the domain and/or codomain.</p>",
        "id": 212973923,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602437478
    },
    {
        "content": "<p>What object do you want terminology for precisely?</p>",
        "id": 212973935,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602437499
    },
    {
        "content": "<p>I want a name for the mappings from <code>monoid_algebra G1 k1</code> to <code>monoid_algebra G2 k1</code> and <code>monoid_algebra G1 k2</code>. <code>map_G fG</code> and <code>map_k fk</code> are lousy names, and I know to avoid names with domain or codomain in them</p>",
        "id": 212974191,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602437845
    },
    {
        "content": "<p><code>map_index</code> and <code>map_basis</code>?</p>",
        "id": 212974239,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602437920
    },
    {
        "content": "<p>Well the second map is a base change, and the first one is a special case of the universal property.</p>",
        "id": 212974258,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602437976
    },
    {
        "content": "<p>So I think they should already have names, no?</p>",
        "id": 212974311,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602438009
    },
    {
        "content": "<p>If you're asking if the lemmas already exist, they do not. If you're asking if we have names for similar concepts elsewhere we can reuse, then I haven't looked at enough of elsewhere to know.</p>",
        "id": 212974474,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602438263
    },
    {
        "content": "<p>Can you give an example of a lemma you would like to name?</p>",
        "id": 212974565,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602438419
    },
    {
        "content": "<p>Sure, the <code>map_domain_mul</code> from <a href=\"https://github.com/leanprover-community/mathlib/issues/4402\">#4402</a>. Ideally that lemma wouldn't even be stated in terms of <code>finsupp.map_domain</code>, and that file would provide the same operation under a better name <code>monoid_algebra.map_...</code> (which would eliminate the messy type ascriptions from that lemma statement)</p>",
        "id": 212975027,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602439130
    },
    {
        "content": "<p>I'm a bit confused. Is it proven somewhere that <code>monoid_algebra G k</code> is functorial in <code>G</code>?</p>",
        "id": 212975398,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602439690
    },
    {
        "content": "<p>Or is that what you're working on proving?</p>",
        "id": 212975409,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602439712
    },
    {
        "content": "<p>I'm afraid I don't know the meaning of \"functorial in G\" there, so can't really answer your question</p>",
        "id": 212977348,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602442931
    },
    {
        "content": "<p>If you have a monoid hom from G to H, does Lean already know that this induces a semiring hom from k[G] to k[H]?</p>",
        "id": 212980305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602447989
    },
    {
        "content": "<p>i.e. is the construction G maps to k[G] the construction on objects underlying a functor from the category of monoids to the category of semirings?</p>",
        "id": 212980324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602448042
    },
    {
        "content": "<p>Thanks Kevin for expanding - that first statement is indeed exactly what lean does not know and I want to teach it in with the <code>map_domain_mul</code> lemma in the linked PR</p>",
        "id": 212980682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602448658
    },
    {
        "content": "<p>While that second statement nicely captures all the ideas I am not yet familiar with.</p>",
        "id": 212980745,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602448713
    },
    {
        "content": "<p>Sorry, I've been away for a little while. </p>\n<p>One thing to note is that mathlib has this:  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra.lift\">docs#monoid_algebra.lift</a><br>\nThis together with the canonical map <code>G \\to monoid_algebra G k</code> (which should be a morphism of monoids) can be combined to obtain functoriality.</p>",
        "id": 212981761,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602450541
    },
    {
        "content": "<p>That's where this all started - to my eye that lift is insufficiently general, and I needed to generalize further to implement <a href=\"https://github.com/leanprover-community/mathlib/issues/4321\">#4321</a></p>",
        "id": 212983826,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602453997
    },
    {
        "content": "<p>You can see the generalization in the <code>lift_aux</code> lemma</p>",
        "id": 212983891,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602454093
    },
    {
        "content": "<p>So you need that the map from H to k[H] is a monoid hom as well, and then you get a monoid hom from G to k[H] which lifts to a k-algebra hom from k[G] to k[H].</p>",
        "id": 212984029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602454350
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Naming.20for.20.60monoid_algebra.20k.20G.60/near/212984029\">said</a>:</p>\n<blockquote>\n<p>So you need that the map from H to k[H] is a monoid hom as well, and then you get a monoid hom from G to k[H] which lifts to a k-algebra hom from k[G] to k[H].</p>\n</blockquote>\n<p>Mathlib doesn't have the fact that the map from <code>G</code> to <code>k[G]</code> is a monoid hom?! <span aria-label=\"surprise\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"surprise\">:surprise:</span></p>",
        "id": 212984384,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602454843
    },
    {
        "content": "<p>I didn't look, I was just sketching how to use lift to get what we wanted</p>",
        "id": 213001785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602484039
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Naming.20for.20.60monoid_algebra.20k.20G.60/near/212984384\">said</a>:</p>\n<blockquote>\n<p>Mathlib doesn't have the fact that the map from <code>G</code> to <code>k[G]</code> is a monoid hom?! <span aria-label=\"surprise\" class=\"emoji emoji-1f62e\" role=\"img\" title=\"surprise\">:surprise:</span></p>\n</blockquote>\n<p>No, that exists: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra.of\">docs#monoid_algebra.of</a></p>",
        "id": 213010687,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602491483
    },
    {
        "content": "<p>What should the name be for the canonical map <code>k → monoid_algebra k G</code>? It's defeq to <code>finsupp.single 1</code>, but <code>single</code> doesn't seem like a good name to keep using in <code>monoid_algebra</code>-land</p>",
        "id": 213022649,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602499471
    },
    {
        "content": "<p>That's the algebra map</p>",
        "id": 213030690,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602505378
    },
    {
        "content": "<p>Not when k is not a commutative ring</p>",
        "id": 213030910,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602505491
    },
    {
        "content": "<p>what other k did you have in mind?</p>",
        "id": 213030981,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602505544
    },
    {
        "content": "<p>The free algebra</p>",
        "id": 213031090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602505606
    },
    {
        "content": "<p>Oh and G is N? I.e. you're working on the grading of the free algebra?</p>",
        "id": 213031174,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602505670
    },
    {
        "content": "<p>so non-commutative rings? Do group rings work over non-commutative rings?</p>",
        "id": 213031199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602505682
    },
    {
        "content": "<p>Oh you make the group commutative instead?</p>",
        "id": 213031260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602505697
    },
    {
        "content": "<p>To elaborate on @Adam's point: I'm defining the grading of the free algebra as <code>(free_algebra R X) →ₐ[R] add_monoid_algebra (free_algebra R X) ℕ</code></p>",
        "id": 213031343,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602505771
    },
    {
        "content": "<p>Where <code>add_monoid_algebra (free_algebra R X) ℕ</code> is isomorphic to <code>monoid_algebra (free_algebra R X) (multiplicative ℕ)</code> if that helps (although mathlib doesn't know that yet)</p>",
        "id": 213031452,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602505819
    },
    {
        "content": "<p>I don't know whether monoid rings work over non commutative rings, but in this case it's the polynomial ring, so it's fine.</p>",
        "id": 213031757,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602506028
    },
    {
        "content": "<p>Note that the algebra map would not give the grading in this case</p>",
        "id": 213031931,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602506128
    },
    {
        "content": "<p>You need the map sending elements of X to degree 1</p>",
        "id": 213031955,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602506147
    },
    {
        "content": "<p>Not 0</p>",
        "id": 213031969,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602506156
    },
    {
        "content": "<p>Yes, I have that already</p>",
        "id": 213032156,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602506261
    },
    {
        "content": "<p>Although now you mention it it sounds like I may have messed up a refactor</p>",
        "id": 213032308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602506339
    },
    {
        "content": "<p>My point is that this map does not agree with \"the\" map from k to <code>monoid_algebra G k</code> where k is the free algebra and G is N. By \"the\" map I mean the map you get from the theory of monoid rings.</p>",
        "id": 213033348,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602506982
    },
    {
        "content": "<p>Indeed - it turns out the question I'm asking is not useful for grading the free algebra</p>",
        "id": 213034255,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602507500
    },
    {
        "content": "<p>But,for the question I asked, it's still not <code>algebra.algebra_map</code> either, since that maps <code>R</code> into <code>algebra R (monoid_algebra G k)</code> and I want to map <code>k</code></p>",
        "id": 213034428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602507608
    },
    {
        "content": "<p>You're right. I would call it <code>const</code> or <code>scalar</code> for \"constants\" or \"scalars\".</p>",
        "id": 213034917,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602507887
    },
    {
        "content": "<p>I'm surprised mathlib doesn't have this ring hom already...</p>",
        "id": 213039254,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602509985
    },
    {
        "content": "<p>I've added it in <a href=\"https://github.com/leanprover-community/mathlib/issues/4582\">#4582</a>, but before we had this conversation</p>",
        "id": 213039540,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602510118
    },
    {
        "content": "<p>So the name(s) are currently a mouthful</p>",
        "id": 213039610,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602510136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> <a href=\"https://github.com/leanprover-community/mathlib/blob/0bfc68fcabfca3ea05d144479145d3ac8ba4fa91/src/algebra/monoid_algebra.lean#L252\">https://github.com/leanprover-community/mathlib/blob/0bfc68fcabfca3ea05d144479145d3ac8ba4fa91/src/algebra/monoid_algebra.lean#L252</a></p>",
        "id": 213040672,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602510701
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_algebra.algebra_map'\">docs#monoid_algebra.algebra_map'</a></p>",
        "id": 213040887,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602510783
    },
    {
        "content": "<p>I know, I removed those lines in my PR</p>",
        "id": 213040983,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602510836
    },
    {
        "content": "<p><code>algebra_map' ring_hom.id</code> is the thing we're talking about, but with the proposed name <code>const</code> (<code>= single_one_ring_hom </code> in that PR), <code>algebra_map' = const.comp</code>, suggesting that <code>const</code> is the more primitive (and therfore useful) definition. The fact that the proof is shorter is also a good indication that <code>const</code> is a better thing to have.</p>",
        "id": 213041163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602510922
    }
]