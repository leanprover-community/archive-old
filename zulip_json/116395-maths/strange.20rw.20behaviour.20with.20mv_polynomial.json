[
    {
        "content": "<p>Shing Tak Lam managed to get <code>rw zero_add</code> to fail on a goal of the form <code>0 + p = p</code> where <code>p : mv_polynomial R S</code>.</p>\n<p>Working with multivariate polynomials rings, and not doing anything particularly fishy as far as I can see (but maybe I'm wrong), he created a zero which was a <code>finsupp.has_zero</code>. The first example below refuses to rewrite, which surprises me because the equality is an equality of <code>mv_polynomial</code>s. The second example rewrites fine, which also surprises me because this time the equality is an equality of finsupps. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> how do I debug this one?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- problematic proof of p = 0 + p with a funny zero which can show up</span>\n<span class=\"c1\">-- if you&#39;re working with mv_polynomials</span>\n\n<span class=\"c1\">-- set_option pp.all true</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span>\n  <span class=\"c1\">-- zero</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))))</span>\n  <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- ⊢ p = 0 + p</span>\n  <span class=\"c1\">-- rw zero_add, -- fails</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ 0 + p = p (GOAL A)</span>\n  <span class=\"c1\">-- rw zero_add, -- still fails</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zero_add</span> <span class=\"n\">p</span> <span class=\"c1\">-- closes goal</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- but with 0 + p = p the rewrite works</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))))))</span>\n  <span class=\"bp\">+</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- ⊢ 0 + p = p (GOAL B)</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zero_add</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- but this fails! So how did rw find the add_monoid instance?</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">S</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span><span class=\"o\">)</span> <span class=\"n\">R</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class</span><span class=\"bp\">.</span><span class=\"n\">to_has_zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring</span><span class=\"bp\">.</span><span class=\"n\">to_mul_zero_class</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                   <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span>\n                      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_semiring</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 192269030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585580791
    },
    {
        "content": "<p>GOAL A is <code>@eq.{1} (@mv_polynomial.{0 0} S R (@comm_ring.to_comm_semiring.{0} R _inst_1))</code> and GOAL B is <code>@eq.{1} (@finsupp.{0 0} (@finsupp.{0 0} S nat nat.has_zero) R ...</code></p>",
        "id": 192269327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585580901
    },
    {
        "content": "<p>Is it the same addition?</p>",
        "id": 192269367,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585580922
    },
    {
        "content": "<p>No</p>",
        "id": 192269419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585580945
    },
    {
        "content": "<p>The one where the rewrite fails is mv_polynomial addition, the one that succeeds is finsupp addition.</p>",
        "id": 192269476,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585580975
    },
    {
        "content": "<p>Try <code>rw zero_add</code> after setting</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq</span> <span class=\"n\">true</span>\n<span class=\"kn\">set_option</span> <span class=\"n\">trace</span><span class=\"bp\">.</span><span class=\"n\">type_context</span><span class=\"bp\">.</span><span class=\"n\">is_def_eq_detail</span> <span class=\"n\">true</span>\n</pre></div>",
        "id": 192270015,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585581217
    },
    {
        "content": "<p>You should be able to make sense of the output, it's not very long.</p>",
        "id": 192270172,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585581260
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 192270203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585581271
    },
    {
        "content": "<p>The problem seems to be this:</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq_detail] [3]: mv_polynomial S R =?= (S →₀ ℕ) →₀ R\n[type_context.is_def_eq_detail] [4]: mv_polynomial =?= finsupp\n[type_context.is_def_eq_detail] on failure: mv_polynomial =?= finsupp\n</pre></div>\n\n\n<p>Lean correctly asks whether the mv_polynomial is the finsupp, and this is true because this is literally the definition of mv_polynomial S R, but Lean fails to spot this.</p>",
        "id": 192270506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585581381
    },
    {
        "content": "<p>Oh no wait, I am out of date</p>",
        "id": 192270557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585581408
    },
    {
        "content": "<p>Now go to the definition of <code>rewrite_cfg</code> and check what the default value of <code>md</code> is.</p>",
        "id": 192270582,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585581420
    },
    {
        "content": "<p>As of ten days ago, <code>mv_polynomial</code> is defined to be <code>add_monoid_algebra</code>.</p>",
        "id": 192270626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585581436
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/116395-maths/topic/strange.20rw.20behaviour.20with.20mv_polynomial/near/192270582\" title=\"#narrow/stream/116395-maths/topic/strange.20rw.20behaviour.20with.20mv_polynomial/near/192270582\">said</a>:</p>\n<blockquote>\n<p>Now go to the definition of <code>rewrite_cfg</code> and check what the default value of <code>md</code> is.</p>\n</blockquote>\n<p>I don't know what this means.</p>",
        "id": 192270692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585581467
    },
    {
        "content": "<p>ctrl+p #tactic.rewrite_cfg</p>",
        "id": 192270799,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585581504
    },
    {
        "content": "<p>It's the default transparency setting for the <code>rw</code> tactic, which explains why Lean doesn't recognize these two types as definitionally equal.</p>",
        "id": 192270852,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585581532
    },
    {
        "content": "<p>You mean just look at the definition in core Lean? It's <code>md := reducible</code></p>",
        "id": 192271254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585581694
    },
    {
        "content": "<p>I have no idea what <code>md</code> means</p>",
        "id": 192271298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585581715
    },
    {
        "content": "<p>-- TODO(Leo): improve documentation</p>",
        "id": 192271356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585581731
    },
    {
        "content": "<p>Oh I see you just told me what it meant</p>",
        "id": 192271392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585581750
    },
    {
        "content": "<p><code>md</code> is the default reducibility setting.  It tells Lean what definitions to unfold when unifying terms.</p>",
        "id": 192271417,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585581763
    },
    {
        "content": "<p><code>reducible</code> means it will only unfold definitions marked as <code>reducible</code>.</p>",
        "id": 192271438,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585581774
    },
    {
        "content": "<p>All this <code>X =?= Y</code> trace output is Lean doing unification?</p>",
        "id": 192271504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585581801
    },
    {
        "content": "<p><span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>",
        "id": 192271545,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585581820
    },
    {
        "content": "<p>Yes, <code>=?=</code> (or its fancy unicode version) is the symbol describing a unification problem.</p>",
        "id": 192271630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1585581844
    },
    {
        "content": "<p><code>example : mv_polynomial S R = ((S →₀ ℕ) →₀ R) := rfl</code> but this isn't good enough</p>",
        "id": 192271704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585581871
    },
    {
        "content": "<p>I've posted this another thread today, if you want a \"reducible-only\" rfl, you can use the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">S</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">reflexivity</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"kn\">reducible</span>\n</pre></div>",
        "id": 192271965,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585581963
    },
    {
        "content": "<p>and here we expect this to fail, and indeed it does fail.</p>",
        "id": 192272171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585582048
    },
    {
        "content": "<p>So perhaps an interesting question is why we ended up with a finsupp zero.</p>",
        "id": 192272427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585582133
    },
    {
        "content": "<p>because unless you are telling me to edit core Lean and change this <code>md</code> value, it seems that this is somehow the root of the problem.</p>",
        "id": 192273397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585582503
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">finsupp</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"n\">all</span> <span class=\"n\">true</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">monomial</span> <span class=\"n\">u</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">monomial</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">single_zero</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ 0 = 0</span>\n  <span class=\"c1\">-- Lean does not close the goal</span>\n  <span class=\"n\">refl</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192273430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585582515
    },
    {
        "content": "<p>You can set the reducibility as an argument to the <code>rw</code> tactic:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rw</span> <span class=\"n\">zero_add</span> <span class=\"n\">at</span> <span class=\"err\">⊢</span> <span class=\"o\">{</span><span class=\"n\">md</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"n\">semireducible</span><span class=\"o\">},</span>\n</pre></div>\n\n\n<p>But you should probably avoid unfolding <code>mv_polynomial</code> in the first place.</p>",
        "id": 192273627,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585582596
    },
    {
        "content": "<p>Right. Shing wants to prove results about monomials which are defined as <code>finsupp.single</code>s.</p>",
        "id": 192273784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585582664
    },
    {
        "content": "<p>In the proof above I'm showing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn><msup><mi>X</mi><mi>u</mi></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0X^u=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">u</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> by unfolding the definition of <code>monomial</code> and reducing the question to showing that <code>finsupp.single u 0 = 0</code>, but the equality is still an equality of <code>mv_polynomial</code>s.</p>",
        "id": 192273985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585582749
    },
    {
        "content": "<p>I think you're supposed to write <code>coeff 0 (monomial u)</code> instead of <code>monomial u 0</code>.</p>",
        "id": 192274004,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585582761
    },
    {
        "content": "<p>I think that's something else</p>",
        "id": 192274047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585582781
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">p</span> <span class=\"n\">m</span>\n</pre></div>\n\n\n<p>It seems like what we want?</p>",
        "id": 192274145,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585582816
    },
    {
        "content": "<p><code>monomial u r</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><msup><mi>X</mi><mi>u</mi></msup></mrow><annotation encoding=\"application/x-tex\">rX^u</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">u</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 192274163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585582826
    },
    {
        "content": "<p><code>monomial u</code> has type <code>R -&gt; mv_polynomial S R</code></p>",
        "id": 192274240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585582864
    },
    {
        "content": "<p>Oh yes.</p>",
        "id": 192274247,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585582866
    },
    {
        "content": "<p>I was surprised about this. There are two definitions of the word monomial on Wikipedia</p>",
        "id": 192274294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585582891
    },
    {
        "content": "<p>Lean went with the second one, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><msup><mi>X</mi><mi>u</mi></msup></mrow><annotation encoding=\"application/x-tex\">rX^u</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">u</span></span></span></span></span></span></span></span></span></span></span> is a monomial. The other definition only allows <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>u</mi></msup></mrow><annotation encoding=\"application/x-tex\">X^u</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">u</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 192274341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585582917
    },
    {
        "content": "<p>I have been thinking a lot about monomials over the past few days and I realised that Johannes made a really good decision to go with the second one.</p>",
        "id": 192274475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585582964
    },
    {
        "content": "<p>The monomials span <code>mv_polynomial R S</code> as an additive abelian group, which is really helpful for induction principles because multiplication of mv_polynomials is a complete horrorshow, you don't want to prove anything about it directly.</p>",
        "id": 192274557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583011
    },
    {
        "content": "<p>Really?  It seems like the second version needs lots of extra duplicate lemmas, which we don't even have (such as the example you've posted).</p>",
        "id": 192274595,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585583028
    },
    {
        "content": "<p>The crazy thing is that the monomials of the first kind, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>u</mi></msup></mrow><annotation encoding=\"application/x-tex\">X^u</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">u</span></span></span></span></span></span></span></span></span></span></span>, simply don't seem to play a role.</p>",
        "id": 192274710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583063
    },
    {
        "content": "<p>Sure you could prove that <code>C r * monomial_of_first_kind u = monomial u r</code></p>",
        "id": 192274775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583091
    },
    {
        "content": "<p>but you may as well prove <code>C r * monomial u s = monomial u (r * s)</code></p>",
        "id": 192274830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583110
    },
    {
        "content": "<p>But going back to the original question, it seems that because <code>mv_polynomial</code> is not marked as <code>reducible</code> (are there any plans to mark it reducible? <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> ?) one should reprove a few <code>finsupp</code> lemmas about <code>single</code> such as <code>single_zero</code> in the <code>mv_polynomial</code> namespace and call them things like<code>monomial_zero</code>. <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> does this sound sane?</p>",
        "id": 192275195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> if you are planning an <code>mv_polynomial</code> PR then you might want to drop these in, unless someone pops up saying I've misunderstood what's going on.</p>",
        "id": 192275395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> is there any way I can look through a 200 line file with pp.all on and find all occurrences of <code>finsupp</code> in the pp.all output?</p>",
        "id": 192275492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583370
    },
    {
        "content": "<p>Run <code>lean my_file.lean | grep finsupp</code> on the command-line?</p>",
        "id": 192275551,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1585583398
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/strange.20rw.20behaviour.20with.20mv_polynomial/near/192274557\" title=\"#narrow/stream/116395-maths/topic/strange.20rw.20behaviour.20with.20mv_polynomial/near/192274557\">said</a>:</p>\n<blockquote>\n<p>The monomials span <code>mv_polynomial R S</code> as an additive abelian group, which is really helpful for induction principles because multiplication of mv_polynomials is a complete horrorshow, you don't want to prove anything about it directly.</p>\n</blockquote>\n<p>I don't think this is true unless <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">R = \\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>. They are a basis as an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> module though.</p>",
        "id": 192275557,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585583399
    },
    {
        "content": "<p>Chris, my point is exactly that this is true as an add_comm_group</p>",
        "id": 192275649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583424
    },
    {
        "content": "<p>because a monomial in Lean is defined to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><msup><mi>X</mi><mi>u</mi></msup></mrow><annotation encoding=\"application/x-tex\">rX^u</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">u</span></span></span></span></span></span></span></span></span></span></span> not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>u</mi></msup></mrow><annotation encoding=\"application/x-tex\">X^u</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">u</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 192275690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583445
    },
    {
        "content": "<p>Sorry, I misread</p>",
        "id": 192275721,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585583459
    },
    {
        "content": "<p>This was really important for Shing when proving that partial derivatives satisfied the Leibniz rule.</p>",
        "id": 192275765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583479
    },
    {
        "content": "<p>Isn't it just a question of whether you want to deal with Z-linear combinations or R-linear combinations?</p>",
        "id": 192275780,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585583488
    },
    {
        "content": "<p>Neither really involves the multiplication in <code>mv_polynomial</code></p>",
        "id": 192275804,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585583502
    },
    {
        "content": "<p>With the other one, they span as an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span> module though, which seems to be okay as well.</p>",
        "id": 192275807,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585583502
    },
    {
        "content": "<p>The R-linear structure is defined by <code>C r * ...</code></p>",
        "id": 192275843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583519
    },
    {
        "content": "<p>and this is mv_polynomial multiplication which is hugely inconvenient to deal with.</p>",
        "id": 192275913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583535
    },
    {
        "content": "<p>I think there are a bunch of induction principles on polynomials, and you probably want all of them.</p>",
        "id": 192275917,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585583537
    },
    {
        "content": "<p>For <code>mv_polynomial</code> we only found one!</p>",
        "id": 192275936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583549
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">recursor</span> <span class=\"mi\">5</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">induction_on</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h_C</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h_X</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">p</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">M</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>is the one in mathlib</p>",
        "id": 192275987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583574
    },
    {
        "content": "<p>You can't use this to prove Leibniz very easily because one of the inputs is how things behave under multiplication by a variable</p>",
        "id": 192276057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583601
    },
    {
        "content": "<p>So I told Shing to use this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">induction_on&#39;</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">u</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">r</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>but even this wasn't good enough because we are still multiplying by <code>C r</code> and even proving Leibniz for the case of <code>C r</code> is awful because mv_polynomial multiplication is hellish.</p>",
        "id": 192276248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583662
    },
    {
        "content": "<p>Here's the definition:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">pderivative</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">monomial</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"n\">var</span> <span class=\"n\">A</span> <span class=\"bp\">+</span> <span class=\"n\">single</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">var</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">var</span><span class=\"o\">)))</span>\n</pre></div>\n\n\n<p>Proving it's R-linear directly turned out to be much harder than I thought</p>",
        "id": 192276348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583706
    },
    {
        "content": "<p>The insight was to use this induction principle:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">induction_on&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">u</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">→</span>\n    <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">M</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">q</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"n\">p</span>\n</pre></div>",
        "id": 192276416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583733
    },
    {
        "content": "<p>There is an induction principle on polynomial based on the derivative. If you prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><msup><mi>f</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>P</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(f') \\implies P(f)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>, then you've proved it for all polynomials.</p>",
        "id": 192276473,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585583753
    },
    {
        "content": "<p>We don't have that for mv_polynomial yet because there is no derivative of any kind (until the PR hits some time tomorrow)</p>",
        "id": 192276606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583790
    },
    {
        "content": "<p>It's not there on polynomials yet, but I conjecture it might be useful to prove things about limits of polynomials.</p>",
        "id": 192276691,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585583836
    },
    {
        "content": "<p><code>pderivative</code> is easily checked to be additive. The third induction principle then reduces Leibniz to checking it for monomials <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><msup><mi>X</mi><mi>u</mi></msup></mrow><annotation encoding=\"application/x-tex\">rX^u</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">u</span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><msup><mi>X</mi><mi>v</mi></msup></mrow><annotation encoding=\"application/x-tex\">sX^v</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 192276701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583843
    },
    {
        "content": "<p>and you can check this by hand, apart from the fact that <code>rw add_zero</code> sometimes randomly doesn't work ;-)</p>",
        "id": 192276762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583870
    },
    {
        "content": "<p>This gives you Leibniz and you can then <em>deduce</em> that <code>pderivative</code> is R-linear from it!</p>",
        "id": 192276865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585583909
    },
    {
        "content": "<p>Oh look -- unification of finsupp and mv_polynomial sometimes works:</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq_detail] [1]: (S →₀ ℕ) →₀ R =?= mv_polynomial S R\n[type_context.is_def_eq_detail] unfold right: mv_polynomial\n[type_context.is_def_eq_detail] [2]: (S →₀ ℕ) →₀ R =?= add_monoid_algebra R (S →₀ ℕ)\n[type_context.is_def_eq_detail] unfold right: add_monoid_algebra\n[type_context.is_def_eq] (S →₀ ℕ) →₀ R =?= mv_polynomial S R ... success  (approximate mode)\n</pre></div>",
        "id": 192279365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585585024
    },
    {
        "content": "<p>But also in the very same trace output</p>\n<div class=\"codehilite\"><pre><span></span>[type_context.is_def_eq_detail] [3]: (S →₀ ℕ) →₀ R =?= mv_polynomial S R\n[type_context.is_def_eq_detail] [4]: finsupp =?= mv_polynomial\n[type_context.is_def_eq_detail] on failure: finsupp =?= mv_polynomial\n</pre></div>",
        "id": 192279579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585585118
    },
    {
        "content": "<p>How come Lean sometimes goes for <code>unfold right</code>?</p>",
        "id": 192279665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585585159
    }
]