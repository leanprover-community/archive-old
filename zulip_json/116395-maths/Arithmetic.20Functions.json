[
    {
        "content": "<p>I've shelved my PR on perfect numbers for now, but I'm going to try to PR at least some easy parts of it soon.</p>",
        "id": 209950828,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600033394
    },
    {
        "content": "<p>It seems like it should be simple enough to define and prove some basic facts about some arithmetic functions, like the number-of-divisors or sum-of-divisors functions, but I'm fretting once again over what type to define them in.</p>",
        "id": 209950875,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600033474
    },
    {
        "content": "<p>Standardly arithmetic functions are defined with domain <code>pnat</code>, but the only important nontrivial one we have in <code>mathlib</code> is <code>nat.totient</code>, which is defined on <code>nat</code>s.</p>",
        "id": 209950898,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600033540
    },
    {
        "content": "<p>I'd also like to define the Dirichlet ring structure, and that's probably going to have to require a type synonym somewhere.</p>",
        "id": 209950959,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600033634
    },
    {
        "content": "<p>Is the sensible thing to just define <code>arithmetic_function := N+ -&gt; ?</code>, and then put a ring structure on that where multiplication is Dirichlet convolution, and make an API for coercion of functions with domain N or N+?</p>",
        "id": 209951025,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600033736
    },
    {
        "content": "<p>What's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>φ</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\varphi(0)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">φ</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>?</p>",
        "id": 209951361,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600034319
    },
    {
        "content": "<p>0</p>",
        "id": 209951372,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600034343
    },
    {
        "content": "<p>But <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mn>0</mn><mo stretchy=\"false\">)</mo><msup><mo stretchy=\"false\">)</mo><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">(\\mathbb{Z}/(0))^\\times</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mclose\">)</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span> has two elements ;)</p>",
        "id": 209951378,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600034364
    },
    {
        "content": "<p>Yeah, but it's defined as counting a subset of <code>finset.range n</code></p>",
        "id": 209951388,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600034387
    },
    {
        "content": "<p>All jokes aside, having <code>aruthmetic_function</code> (with the ring structure) would be great!</p>",
        "id": 209951414,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600034403
    },
    {
        "content": "<p>Isn't there also a ring structure on multiplicative functions where convolution becomes addition?</p>",
        "id": 209951517,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600034561
    },
    {
        "content": "<p>What's multiplication in that case, pointwise multiplication? does that work?</p>",
        "id": 209951693,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600034816
    },
    {
        "content": "<p>Maybe?</p>",
        "id": 209951825,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600035021
    },
    {
        "content": "<p>I was thinking of the Big Witt vectors, but that's not quite the multiplicative functions in the sense of elementary NT</p>",
        "id": 209951838,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600035052
    },
    {
        "content": "<p>Anyway, I should probably clarify that the stumbling block here will be the fact that defining these functions at 0 doesn't really make any sense, and then the map to Dirichlet series isn't injective, etc., but if I don't define them at 0, then the entire API for gcd and factorization breaks, because the standard versions have \"except 0\" baked into everything</p>",
        "id": 209951861,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600035118
    },
    {
        "content": "<p>I found this paper: <a href=\"https://www.sciencedirect.com/science/article/pii/S0022314X07001886\">https://www.sciencedirect.com/science/article/pii/S0022314X07001886</a></p>",
        "id": 209951943,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600035222
    },
    {
        "content": "<p>My vote is to use pnat, fwiw</p>",
        "id": 209951952,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600035241
    },
    {
        "content": "<p>I think the pnat api could use some attention anyway</p>",
        "id": 209952001,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600035273
    },
    {
        "content": "<p>Yeah, I think after my next PR on unique factorization (with 0, sigh) I'll have to go back to <code>normalization_monoid</code> and de-0-ify that</p>",
        "id": 209952018,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600035350
    },
    {
        "content": "<p>and then <code>gcd</code></p>",
        "id": 209952060,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600035365
    },
    {
        "content": "<p>But it probably won’t have a good solution</p>",
        "id": 209952071,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600035418
    },
    {
        "content": "<p>At some point I tried starting to formalize the big Witt vector ring, and I quit early on because I got frustrated with the missing pnat api</p>",
        "id": 209952170,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600035579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> might have a different opinion.</p>",
        "id": 209952363,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600035905
    },
    {
        "content": "<p>In pari, phi(0)=2, for exactly the reason Adam suggests. But who cares what phi(0) is in Lean. I would define it on nat and just not worry too much about the junk values. If you start using pnat then you might have trouble later on because e.g. <code>ring</code> probably won't work</p>",
        "id": 209952965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600036871
    },
    {
        "content": "<p>I guess one advantage of using a type synonym <code>arithmetic_function</code> is that we can change the exact implementation later on</p>",
        "id": 209953089,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600037069
    },
    {
        "content": "<p>This is just like the argument about whether 1/0 should be defined. Just define it but never use it. Or alternatively try using pnat and let's find out how painful it really it. When I started using lean there was no square root function on the reals and I defined it on the nonnegative reals and it drove me nuts. Does <code>3 : pnat</code> work?</p>",
        "id": 209953091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600037072
    },
    {
        "content": "<p>The problem with big Witt vectors is that gcd is used when you define the ring operations, and it gets really annoying if you have to insert a million proofs that something is nonzero</p>",
        "id": 209953157,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600037204
    },
    {
        "content": "<p>In the theory of modular forms, the L-function of the normalised eigenform sum_{n&gt;=0} a_n q^n is sum_{n&gt;=1} a_n n^s. Here the constant term a_0 can be nonzero, however it is determined uniquely by the a_n for n&gt;=1 in positive weight.</p>",
        "id": 209953220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600037325
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Arithmetic.20Functions/near/209953091\">said</a>:</p>\n<blockquote>\n<p>This is just like the argument about whether 1/0 should be defined. Just define it but never use it. Or alternatively try using pnat and let's find out how painful it really it. When I started using lean there was no square root function on the reals and I defined it on the nonnegative reals and it drove me nuts. Does <code>3 : pnat</code> work?</p>\n</blockquote>\n<p>Yeah, <code>3 : pnat</code> is fine. It's just that putting a <code>gcd_monoid</code> or <code>unique_factorization_monoid</code> instance on pnats is a pain, and IIRC there's not even a class for commutative monoids with cancellation (and no zero)</p>",
        "id": 209953221,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600037330
    },
    {
        "content": "<p>Just prove that pnat is a free monoid on the primes, everything follows from that, right?</p>",
        "id": 209953281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600037420
    },
    {
        "content": "<p>Why is it a pain to put a UFM structure on pnat? If you're going to use pnat despite essentially no API then you're going to have to make the API and indeed doing a project like this will actually be a good way of finding out what API we need.</p>",
        "id": 209953308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600037521
    },
    {
        "content": "<p>Just the fact that if you come up with a definition of UFM that doesn't mention 0, then it stops working for monoids that do have 0.</p>",
        "id": 209953357,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600037567
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Arithmetic.20Functions/near/209953281\">said</a>:</p>\n<blockquote>\n<p>Just prove that pnat is a free monoid on the primes, everything follows from that, right?</p>\n</blockquote>\n<p>I know what you mean mathematically, but what do you mean in Lean? Prove that pnat is isomorphic to a <code>free_comm_monoid</code>? If so, we don't have that definition.</p>",
        "id": 209953473,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600037774
    },
    {
        "content": "<p>Could you do something like define all the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo><mi mathvariant=\"normal\">ord</mi><mo>⁡</mo></mo><mi>p</mi></msub><mo>:</mo><mrow><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><mo>→</mo><mrow><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\operatorname{ord}_p : \\mathrm{pnat} \\to \\mathrm{nat}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mop\"><span class=\"mop\"><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">r</span><span class=\"mord mathrm\">d</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80952em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">p</span><span class=\"mord mathrm\">n</span><span class=\"mord mathrm\">a</span><span class=\"mord mathrm\">t</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">n</span><span class=\"mord mathrm\">a</span><span class=\"mord mathrm\">t</span></span></span></span></span> functions, show they're homomorphisms, then use these to define a homomorphism to the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-indexed coproduct of copies of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">n</mi><mi mathvariant=\"normal\">a</mi><mi mathvariant=\"normal\">t</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{nat}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">n</span><span class=\"mord mathrm\">a</span><span class=\"mord mathrm\">t</span></span></span></span></span>? (and if this latter doesn't exist, define it?) Then, finally, show this is an isomorphism?</p>",
        "id": 209953563,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600037994
    },
    {
        "content": "<p>There's already a function that sends a <code>pnat</code> to a multiset of prime factors, which is basically what you're talking about. It's just that everything that gets proven about this notion of factorization is totally parallel from other notions of factorization</p>",
        "id": 209953893,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600038522
    },
    {
        "content": "<p>My experience was that this was annoying for proving API lemmas</p>",
        "id": 209953897,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600038536
    },
    {
        "content": "<p>I guess that's basically the same thing, and multisets form a free commutative monoid under unions.  I haven't spent any time with any of this, so I don't know about practice, but in principle it seems nice pulling this structure back.</p>",
        "id": 209954021,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600038782
    },
    {
        "content": "<p>I'm mostly thinking about how things seemed sleek in Ireland and Rosen's \"A classical introduction to modern number theory\" by implicitly using the free monoid structure that the ords give you.  (These do go backwards from the correct universal property, though, and it relies on the fact that only finitely many of the ords are non-zero.)</p>",
        "id": 209954128,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1600038992
    },
    {
        "content": "<p>Is there something like finitely supported functions for <code>has_one</code>?</p>",
        "id": 209954247,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600039305
    },
    {
        "content": "<p>Not as far as I know</p>",
        "id": 209955081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600041096
    },
    {
        "content": "<p>I have run into this issue before</p>",
        "id": 209955083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600041114
    },
    {
        "content": "<p>But the free abelian monoid on S is just finitely supported functions to nat, right?</p>",
        "id": 209955125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1600041162
    },
    {
        "content": "<p>Yeah but you would need to make it multiplicative at some point</p>",
        "id": 209955133,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600041195
    },
    {
        "content": "<p>I guess after taking finsupp will work too</p>",
        "id": 209955136,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600041207
    },
    {
        "content": "<p>Can to_additive be used to redefine finsupp with <code>has_zero</code> from finsupp with <code>has_one</code>?</p>",
        "id": 209955328,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600041590
    },
    {
        "content": "<p>Or is there a <code>to_multiplicative</code>?</p>",
        "id": 209955380,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1600041660
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Arithmetic.20Functions/near/209955380\">said</a>:</p>\n<blockquote>\n<p>Or is there a <code>to_multiplicative</code>?</p>\n</blockquote>\n<p>Nope <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 209968081,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600063963
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Arithmetic.20Functions/near/209955328\">said</a>:</p>\n<blockquote>\n<p>Can to_additive be used to redefine finsupp with <code>has_zero</code> from finsupp with <code>has_one</code>?</p>\n</blockquote>\n<p>Maybe, but it would be a <em>massive</em> refactor of the library.</p>",
        "id": 209968082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600063972
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Arithmetic.20Functions/near/209953157\">said</a>:</p>\n<blockquote>\n<p>The problem with big Witt vectors is that gcd is used when you define the ring operations, and it gets really annoying if you have to insert a million proofs that something is nonzero</p>\n</blockquote>\n<p>I guess there is also the approach via symmetric functions... but we don't have anything on symmetric polynomials atm.</p>",
        "id": 209968109,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600064029
    },
    {
        "content": "<p>I'm working on it at <a href=\"https://github.com/leanprover-community/mathlib/tree/arithmetic_functions\">branch#arithmetic_functions</a></p>",
        "id": 210489635,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600416544
    },
    {
        "content": "<p>(in short, arithmetic functions are a structure consisting of a function from N, where 0 is fixed to go to 0.)</p>",
        "id": 210553107,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600451258
    },
    {
        "content": "<p>I've now gotten up to using Dirichlet convolution to show that the sum of (kth powers of) divisors function is multiplicative</p>",
        "id": 210651808,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600582428
    },
    {
        "content": "<p>So probably time to spend a day or two cleaning it up before starting to PR some things</p>",
        "id": 210651850,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600582449
    },
    {
        "content": "<p>So I'm open to any suggestions people have</p>",
        "id": 210651853,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1600582469
    }
]