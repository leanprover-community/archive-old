[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  here's my old version of free group <a href=\"https://github.com/kckennylau/Lean/blob/c6eac863b23d58d40deaab62489f6069f860407e/free_group.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/c6eac863b23d58d40deaab62489f6069f860407e/free_group.lean\">https://github.com/kckennylau/Lean/blob/c6eac863b23d58d40deaab62489f6069f860407e/free_group.lean</a></p>",
        "id": 124494694,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522601983
    },
    {
        "content": "<p>is this what you wanted?</p>",
        "id": 124494732,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602006
    },
    {
        "content": "<p>you see, ambient has two universe parameters</p>",
        "id": 124494739,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602019
    },
    {
        "content": "<p>and this fucks up everything</p>",
        "id": 124494792,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602177
    },
    {
        "content": "<p>Yes!</p>",
        "id": 124494806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602218
    },
    {
        "content": "<p>I thought Lean would somehow fix this, but the stupid issue is still there.</p>",
        "id": 124494807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602230
    },
    {
        "content": "<p>Maybe you can get  a contradiction with a diagonal argument if you can get it to work all in the same universe :-)</p>",
        "id": 124494846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602267
    },
    {
        "content": "<p>I didn't read all of what Mario had to say about this.</p>",
        "id": 124494847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602299
    },
    {
        "content": "<p>It's a bit annoying though</p>",
        "id": 124494854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602315
    },
    {
        "content": "<p>it's maximally impredicative</p>",
        "id": 124494860,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602340
    },
    {
        "content": "<p>it's philosophically unsound</p>",
        "id": 124494861,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602345
    },
    {
        "content": "<p>You could be even less constructive by replacing generate with span</p>",
        "id": 124494862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602354
    },
    {
        "content": "<p>I never know which is which</p>",
        "id": 124494903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602386
    },
    {
        "content": "<p>they are synonymous in my head</p>",
        "id": 124494905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602395
    },
    {
        "content": "<p>you can't just quantify through every gorup and pretend that you have the UMP wrt every group</p>",
        "id": 124494906,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602398
    },
    {
        "content": "<p>but the one where you say \"if I am a subgroup of the big product containing S, then I contain span S\"</p>",
        "id": 124494911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602437
    },
    {
        "content": "<p>the point is</p>",
        "id": 124494912,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602459
    },
    {
        "content": "<p>you need to build the ambient group from S</p>",
        "id": 124494913,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602464
    },
    {
        "content": "<p>if you want things to work</p>",
        "id": 124494914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602468
    },
    {
        "content": "<p>I don't really understand why you can't just quantify through every group and pretend you have the UMP. Maybe I should read Mario's posts more carefully, wherever they've gone</p>",
        "id": 124494954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602491
    },
    {
        "content": "<p>because it's cheating</p>",
        "id": 124494956,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602503
    },
    {
        "content": "<p>I don't want to make the set of all sets</p>",
        "id": 124494958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602512
    },
    {
        "content": "<p>not because it's cheating</p>",
        "id": 124494960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602515
    },
    {
        "content": "<p>but because it leads to hell</p>",
        "id": 124494961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602522
    },
    {
        "content": "<p>whereas free groups won't take you to hell</p>",
        "id": 124494962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602533
    },
    {
        "content": "<p>because they really do exist</p>",
        "id": 124494963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602538
    },
    {
        "content": "<p>right</p>",
        "id": 124494967,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602544
    },
    {
        "content": "<p>but that isn't the way to justify it</p>",
        "id": 124494970,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602548
    },
    {
        "content": "<p>To build the free group in the ZFC approach, do you first build the abstract group (the subset of the product) and then say \"aah it's generated by S so there's something isomorphic to it in V_kappa\"?</p>",
        "id": 124495021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602623
    },
    {
        "content": "<p>correct</p>",
        "id": 124495025,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602644
    },
    {
        "content": "<p>Can one prove such a theorem in Lean?</p>",
        "id": 124495026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602646
    },
    {
        "content": "<p>\"If I am an object in some universe then sometimes you can build some object in some smaller universe which is isomorphic to me\"</p>",
        "id": 124495031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522602672
    },
    {
        "content": "<p>actually</p>",
        "id": 124495075,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602770
    },
    {
        "content": "<p>what cardinality do you need?</p>",
        "id": 124495077,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602773
    },
    {
        "content": "<p>if you have n letters, to make a word of length k, you have at most k! n^k ways right</p>",
        "id": 124495083,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602815
    },
    {
        "content": "<p>no, just n^k</p>",
        "id": 124495084,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602821
    },
    {
        "content": "<p>so it's just n^omega</p>",
        "id": 124495086,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602837
    },
    {
        "content": "<p>hmm</p>",
        "id": 124495126,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602851
    },
    {
        "content": "<p>I mean</p>",
        "id": 124495127,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602854
    },
    {
        "content": "<p>now that I built it in the proper way, I don't see why we're beating a dead horse</p>",
        "id": 124495128,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602869
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ves algum problema em o meu pull?</p>",
        "id": 124495179,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522602967
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> \"but that impredicative construction is not like constructing the set of all sets because it really exists\" it is actually only correct iff you can justify its existence predicatively. that's the wrong justification for the right thing, and it doesn't tell you that it actually exists</p>",
        "id": 124495277,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522603241
    },
    {
        "content": "<p><code>n^omega</code> is not at all the sum of <code>n^k</code> as I'm sure you know. Finitely-generated groups are all countable.</p>",
        "id": 124496544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522606076
    },
    {
        "content": "<p>The point is that if <code>S</code> has cardinality <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">κ</span></span></span></span> and if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>κ</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\kappa'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">κ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> is the max of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>κ</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">κ</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"normal\">ℵ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\aleph_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">ℵ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> then any group generated by <code>S</code> has cardinality at most <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>κ</mi><mo mathvariant=\"normal\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\kappa'</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.751892em;\"></span><span class=\"strut bottom\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">κ</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 124496589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522606185
    },
    {
        "content": "<p>eew what kind of a <code>\\kappa</code> is that</p>",
        "id": 124496590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522606199
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> by n^omega I mean union n^k</p>",
        "id": 124496824,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522606764
    },
    {
        "content": "<p>ordinal exponent</p>",
        "id": 124496825,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522606772
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> You can do such \"arguments by cardinality\" for universe resizing in lean as well. An example of this is:</p>\n<div class=\"codehilite\"><pre><span></span>theorem  lift_down {a : cardinal.{u}} {b : cardinal.{max u v}} : b ≤ lift a → ∃ a&#39;, lift a&#39; = b\n</pre></div>\n\n\n<p>which says that a cardinal that is smaller than a cardinal lifted from a small universe is also lifted from the small universe</p>",
        "id": 124497132,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522607439
    },
    {
        "content": "<p>that epsilon-abstraction though <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 124497193,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522607530
    },
    {
        "content": "<p>say what?</p>",
        "id": 124497199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522607572
    },
    {
        "content": "<p>so you can't find that cardinal explicitly</p>",
        "id": 124497208,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522607598
    },
    {
        "content": "<p>which cardinal are you referring to? the exists in that theorem is unique</p>",
        "id": 124497215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522607639
    },
    {
        "content": "<p>axiom of unique choice?</p>",
        "id": 124497255,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522607648
    },
    {
        "content": "<p>cardinal theory uses choice everywhere, so meh</p>",
        "id": 124497259,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522607665
    },
    {
        "content": "<p>i see</p>",
        "id": 124497261,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522607669
    },
    {
        "content": "<p>fair enough</p>",
        "id": 124497262,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522607673
    },
    {
        "content": "<p>but it is explicitly constructed</p>",
        "id": 124497263,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522607675
    },
    {
        "content": "<p>so do you see any problem with my pr</p>",
        "id": 124497264,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522607687
    },
    {
        "content": "<p>I don't think so. The only other thing I might want is a constructive reduced word function</p>",
        "id": 124497279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522607762
    },
    {
        "content": "<p>hmm</p>",
        "id": 124497320,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522607794
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> linked list though</p>",
        "id": 124497529,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522608285
    },
    {
        "content": "<p>you need decidable equality</p>",
        "id": 124497631,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522608525
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/Lean/blob/master/free_group.lean#L266\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/free_group.lean#L266\">https://github.com/kckennylau/Lean/blob/master/free_group.lean#L266</a></p>",
        "id": 124499790,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522613444
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> done!</p>",
        "id": 124499791,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522613448
    },
    {
        "content": "<p><a href=\"https://github.com/kckennylau/category-theory/blob/master/src/free_group.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/category-theory/blob/master/src/free_group.lean\">https://github.com/kckennylau/category-theory/blob/master/src/free_group.lean</a></p>",
        "id": 124512164,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522642549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> could you help me prove <code>reduce.exact</code>?</p>",
        "id": 124512166,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522642558
    },
    {
        "content": "<p>do you know that the reduced word is minimal in length in the equivalence class?</p>",
        "id": 124512261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522642696
    },
    {
        "content": "<p>yes</p>",
        "id": 124512264,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522642701
    },
    {
        "content": "<p>that's <code>reduce.min</code></p>",
        "id": 124512267,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522642711
    },
    {
        "content": "<p>that just says that the reduced word is smaller than the input</p>",
        "id": 124512272,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522642736
    },
    {
        "content": "<p>I mean if v ~~ w then length (reduce w) &lt;= length v</p>",
        "id": 124512280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522642757
    },
    {
        "content": "<p>oh, I don't know that then</p>",
        "id": 124512283,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522642759
    },
    {
        "content": "<p>You may find <a href=\"http://us.metamath.org/mpeuni/mmtheorems154.html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/mmtheorems154.html\">http://us.metamath.org/mpeuni/mmtheorems154.html</a> helpful; that's my construction of free groups in metamath by a similar method (it's more cumbersome in ZFC since it has to describe the whole reduction sequence, not just the result)</p>",
        "id": 124512336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522642884
    },
    {
        "content": "<p>...</p>",
        "id": 124512381,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522642977
    },
    {
        "content": "<p>I think I see the proof strategy. It goes by induction on the length of an extension sequence, proving that if two extension sequences (where one has length &lt;= n) end at the same point, then they start at the same point</p>",
        "id": 124512522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522643303
    },
    {
        "content": "<p>I thought you wrote it</p>",
        "id": 124512523,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522643313
    },
    {
        "content": "<p>I'm rereading the proof now</p>",
        "id": 124512524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522643324
    },
    {
        "content": "<p>An extension sequence is a sequence that starts at a reduced word and inserts cancelling pairs one at a time</p>",
        "id": 124512530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522643346
    },
    {
        "content": "<p>and the first step in the proof shows that every word has an extension sequence that terminates with it</p>",
        "id": 124512533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522643382
    },
    {
        "content": "<p>Since the length of an extension sequence is also (half) the difference in length between the initial word and the reduced word, you could try induction on that</p>",
        "id": 124512626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522643546
    },
    {
        "content": "<p>Okay, here's a suggestion in your language: can you prove the following?</p>\n<div class=\"codehilite\"><pre><span></span>inductive red (IT : Type u) [inv_type IT] :\n  inv_type.to_inv_mon IT → inv_type.to_inv_mon IT → Prop\n| cons : ∀ a x y, red x y → red (a :: x) (a :: y)\n| cancel : ∀ a x, red (a :: a⁻¹ :: x) x\n\ntheorem eqv_gen_red (IT : Type u) [inv_type IT]\n  {x y : inv_type.to_inv_mon IT} : x ≈ y ↔ eqv_gen (red IT) x y :=\nsorry\n</pre></div>",
        "id": 124513001,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522644516
    },
    {
        "content": "<p>this will considerably simplify your induction for the <code>reduce.exact</code> theorem</p>",
        "id": 124513020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522644561
    },
    {
        "content": "<p>but I don't need to simply <code>reduced.sound</code>, I need to prove <code>reduced.exact</code></p>",
        "id": 124513023,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522644581
    },
    {
        "content": "<p>yeah that</p>",
        "id": 124513068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522644619
    },
    {
        "content": "<p>You could also fold in the eqv_gen constructors into the constructors of <code>red</code> if you prefer</p>",
        "id": 124513074,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522644664
    },
    {
        "content": "<p>although splitting it this way gives you the ability to talk about one step reduction</p>",
        "id": 124513077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522644702
    },
    {
        "content": "<p>proving multiplication amounts to the same amount of work</p>",
        "id": 124513180,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522644910
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>case inv_mon.to_group.rel.mul\nIT : Type u,\n_inst_1 : inv_type IT,\nx y c d p q : inv_type.to_inv_mon IT,\nh1 : inv_mon.to_group.rel (inv_type.to_inv_mon IT) c p,\nh2 : inv_mon.to_group.rel (inv_type.to_inv_mon IT) d q,\nih1 : eqv_gen (red IT) c p,\nih2 : eqv_gen (red IT) d q\n⊢ eqv_gen (red IT) (c * d) (p * q)\n</pre></div>",
        "id": 124513182,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522644924
    },
    {
        "content": "<p>i.e. I can't prove it</p>",
        "id": 124513183,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1522644927
    },
    {
        "content": "<p>Try proving <code>eqv_gen (red IT) x y -&gt;  eqv_gen (red IT) (a * x * b) (a * y * b)</code></p>",
        "id": 124513231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522645067
    },
    {
        "content": "<p>which reduces to <code>red IT x y -&gt; red IT (a * x * b) (a * y * b)</code></p>",
        "id": 124513281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522645169
    },
    {
        "content": "<p>(You could also do the left and right multiplications as separate lemmas)</p>",
        "id": 124513325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522645213
    }
]