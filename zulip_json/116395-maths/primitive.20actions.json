[
    {
        "content": "<p>In the ongoing <a href=\"https://github.com/leanprover-community/mathlib/tree/acl-Wielandt\">branch#acl-Wielandt</a>, I formalize results about primitive actions of groups on sets. This is fundamental material for the moment, it might go up to a theorem of Jordan that a primitive subgroup of the symmetric/alternating group that contains a transposition/a 3-cycle is the full symmetric group/the full alternating group.<br>\nAdding to this the Iwasawa criterion for simplicity, we will get a nice and complicated proof of simplicity for the alternating group.</p>\n<p>In this field, with<code>(G X : Type*) [group G] [mul_action G X]</code>, a <code>B : set X</code>is called a <em>block</em> if <code>∀ (g : G), g • B = B ∨ disjoint (g • B) B</code>, and the action is <em>primitive</em> if it is transitive and if all blocks are the trivial ones, which means :  <code>B = ∅ ∨ (∃ (x : X), B = {x}) ∨ B = ⊤)</code></p>\n<p>I wonder about the interest of formulating the first two parts of the disjunction using either <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.subsingleton\">docs#set.subsingleton</a>`, or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nontrivial\">docs#nontrivial</a> (which means having at least 2 elements). What would you recommend ?</p>",
        "id": 275155533,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647179602
    },
    {
        "content": "<p>Just noticing that you can replace <code>∀ (g : G), g • B = B ∨ disjoint (g • B) B</code> by <code>(range $ λ g : G, g • B).pairwise_disjoint id</code></p>",
        "id": 275155767,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647179927
    },
    {
        "content": "<p>You don't want to use <code>nontrivial</code> because that's about types not terms</p>",
        "id": 275155790,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647179976
    },
    {
        "content": "<p>We have empty and singleton and subsingleton for sets, perhaps subsingleton is the shortest way to do it</p>",
        "id": 275155941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1647180086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , at first, I was frightened by your reformulation, but it has a nice geometric content which is fundamental : the <code>g • B</code> form a partition of G, see line 91, definition of <code>is_block' , and line 374, lemma </code>is_block_system.of_block` in  <a href=\"https://github.com/leanprover-community/mathlib/tree/acl-Wielandt\">branch#acl-Wielandt</a>.</p>",
        "id": 275156297,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647180602
    },
    {
        "content": "<p>So maybe it is better to have a strong hypothesis, and in any case, we have <code>is_block_mk</code> to create  instances of <code>is_block</code>.</p>",
        "id": 275156358,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647180646
    },
    {
        "content": "<p>Yes, exactly. My biggest concern is API-writing and I feel like an homogeneous definition like the one I proposed is much easier to write an API for.</p>",
        "id": 275156810,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647181254
    },
    {
        "content": "<p>This reminds me of the condition you need to make a quotient of a manifold under an action.</p>",
        "id": 275156910,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647181339
    },
    {
        "content": "<p>I forgot the name but with your stuff it would be written <code>∀ s, is_open s → is_block action s</code>.</p>",
        "id": 275156941,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647181399
    },
    {
        "content": "<p>Can you explain in a few words why writing an API would be much easier this way? (The same tension exists in unformalized math, you can switch the strength of a hypothesis from a definition and the theorem. In one case, it is hard to prove that the property holds, but it directly has many implications ; in the other case, it is easy to prove that the property holds, but you need to apply a theorem to get implications. I am tempted to prefer the first solution.)</p>",
        "id": 275179583,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1647212194
    }
]