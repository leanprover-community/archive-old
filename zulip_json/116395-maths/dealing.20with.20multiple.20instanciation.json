[
    {
        "content": "<p>I'm considering a vector space V on a field K, with a given endomorphism f : V-&gt;V, and I want to use the structure of K[X] module on V defined by P.v=P(f).v for a polynomial P and v in V. The problem is that V is already an instance of a module (it is a K-module) , so I can't just define </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n<span class=\"n\">smul</span><span class=\"o\">:=</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">polynomial.aeval</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"bp\">...</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>What is the standard way to deal with this situation ? Should I define some other <code>add_comm_group</code> W with a group equivalence with V and define the K[X] module structure on W ? Is there a less tedious way to do that ?</p>",
        "id": 217873663,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606304371
    },
    {
        "content": "<blockquote>\n<p>V is already an instance of a module</p>\n</blockquote>\n<p>What do you mean by this? Are you saying there is a <code>module (polynomial K) V</code> instance already, or just some other <code>module _ V</code> instance? If so, what is <code>_</code>?</p>",
        "id": 217873838,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606304484
    },
    {
        "content": "<p>I mean that V is a K-module</p>",
        "id": 217873992,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606304579
    },
    {
        "content": "<p>That should be fine, unless mathlib is automatically building a <code>module (polynomial K) V</code> instance behind the scenes because it found <code>module K V</code>...</p>",
        "id": 217874039,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606304633
    },
    {
        "content": "<p>I got a error message : <br>\ninvalid definition, a declaration named 'module' has already been declared</p>",
        "id": 217874122,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606304695
    },
    {
        "content": "<p>That's a different problem. You need to give your instance a name, or put it in a namespace</p>",
        "id": 217874164,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606304716
    },
    {
        "content": "<p><code>instance my_module : module (polynomial K) V := ...</code><br>\nor</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">namespace</span> <span class=\"n\">my_stuff</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">my_stuff</span>\n</code></pre></div>\n<p>Otherwise you're trying to replace the type <code>module</code> with your instance</p>",
        "id": 217874238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606304772
    },
    {
        "content": "<p>Typically you'd work within a namespace anyway</p>",
        "id": 217874254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606304785
    },
    {
        "content": "<p>It's always good to include the error message so that people can un- <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> your problem</p>",
        "id": 217874289,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606304818
    },
    {
        "content": "<p>Ok thanks ! I thought this was a more general problem, but I should've included the error message anyway. The namespace works, but it seems to cause later problem in defining <code>linear_equiv</code>. I have another K[X]-module <code>kxdivp p0</code> and I want to assume that it is linearly equivalent to V : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">linear_equiv</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kxdivp</span> <span class=\"n\">p0</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I get the following error message : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n<span class=\"n\">p0</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">semimodule</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">V</span>\n</code></pre></div>\n<p>Maybe this is coming from some semimodule/module problem, but I got no error message from </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">linear_equiv</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kxdivp</span> <span class=\"n\">p0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kxdivp</span> <span class=\"n\">p0</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 217875035,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606305375
    },
    {
        "content": "<p>Does switching your instance to <code>semimodule</code> help?</p>",
        "id": 217875379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606305702
    },
    {
        "content": "<p>Posting complete working code will make it much easier to debug what is going on.</p>",
        "id": 217875451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606305756
    },
    {
        "content": "<p>I still have the same error message. Here is the complete code : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span> <span class=\"n\">algebra.field</span> <span class=\"n\">data.polynomial</span>  <span class=\"n\">algebra.polynomial.group_ring_action</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">V</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">linear_map</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"c1\">-- The set of endomorphisms on V can be seen as a K-algebra</span>\n\n<span class=\"c1\">--#check module.endomorphism_algebra K V</span>\n\n<span class=\"c1\">--we use the aeval map P f → P(f) to construct the scalar multiplication (smul) P•v=P(f) v.</span>\n<span class=\"c1\">-- #check λ (p:polynomial K) (v:V), (polynomial.aeval f p) v</span>\n<span class=\"c1\">--The construction of the K[X]-module structure on V follows.</span>\n<span class=\"c1\">--note that f is not a hidden variable and must be repeated hereafter.</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">vector_space_as_kx_module</span>\n\n<span class=\"kn\">open</span>  <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n<span class=\"n\">smul</span><span class=\"o\">:=</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">polynomial.aeval</span> <span class=\"n\">f</span> <span class=\"n\">p</span><span class=\"o\">,</span>\n<span class=\"n\">one_smul</span><span class=\"o\">:=</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"n\">mul_smul</span><span class=\"o\">:=</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">v</span><span class=\"o\">,</span><span class=\"kd\">begin</span>  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"n\">smul_add</span><span class=\"o\">:=</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"n\">smul_zero</span><span class=\"o\">:=</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"n\">add_smul</span><span class=\"o\">:=</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"n\">zero_smul</span><span class=\"o\">:=</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"c1\">--GOAL now show that if V≃ K[X]/ (X-λ)^k (as K[X]-modules) then there is a K-basis of V in which the matrix of f is a Jordan block.</span>\n<span class=\"c1\">--look for K[X]/(P), module isomorphism, basis and matrix.</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">#check  linear_equiv (polynomial K)</span>\n<span class=\"cm\">#check ideal.quotient</span>\n<span class=\"cm\">#check {p:polynomial K | p=X}</span>\n<span class=\"cm\">#check ideal.span {p:polynomial K|p=X}</span>\n<span class=\"cm\">#check (ideal.span {p:polynomial K|p=X}).quotient</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"c1\">--first we define kxdivp_as_kx_module, the module K[X]/(P) on K[X].</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p0</span> <span class=\"o\">:</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">idealp</span><span class=\"o\">:=</span><span class=\"n\">ideal.span</span> <span class=\"o\">{</span><span class=\"n\">q</span><span class=\"o\">:</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"bp\">|</span><span class=\"n\">q</span><span class=\"bp\">=</span><span class=\"n\">p0</span> <span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">kxdivp</span><span class=\"o\">:=(</span><span class=\"n\">idealp</span> <span class=\"n\">p0</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">quotient</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"bp\">$</span> <span class=\"n\">kxdivp</span> <span class=\"n\">p0</span> <span class=\"o\">:=</span><span class=\"n\">ideal.quotient.comm_ring</span> <span class=\"o\">(</span><span class=\"n\">idealp</span> <span class=\"n\">p0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kxdivp</span> <span class=\"n\">p0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">smul</span><span class=\"o\">:=</span><span class=\"bp\">λ</span> <span class=\"n\">q</span><span class=\"o\">,</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ideal.quotient.mk</span> <span class=\"o\">(</span><span class=\"n\">idealp</span> <span class=\"n\">p0</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">v</span> <span class=\"o\">,</span>\n    <span class=\"n\">one_smul</span><span class=\"o\">:=</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_smul</span><span class=\"o\">:=</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">v</span><span class=\"o\">,</span><span class=\"kd\">begin</span>  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_add</span><span class=\"o\">:=</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">smul_zero</span><span class=\"o\">:=</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">add_smul</span><span class=\"o\">:=</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>  <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">zero_smul</span><span class=\"o\">:=</span><span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"kd\">begin</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n\n<span class=\"c1\">--then we fix l:K and we assume that K[X]/(X-l)^n ≃ V</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">nat</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">linear_equiv</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kxdivp</span> <span class=\"n\">p0</span><span class=\"o\">)</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"k\">#check</span> <span class=\"n\">V</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">vector_space_as_kx_module</span>\n</code></pre></div>",
        "id": 217875601,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606305850
    },
    {
        "content": "<p>Maybe the issue is with the variable f ? How can I specify that f is the linear map I want to use to construct the K[X]-module structure ?</p>",
        "id": 217875847,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606306080
    },
    {
        "content": "<p>Yes, your problem is indeed <code>f</code></p>",
        "id": 217876958,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606306756
    },
    {
        "content": "<p>If <code>instance</code>s have arguments, then they can't be found by type-class resolution</p>",
        "id": 217876990,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606306781
    },
    {
        "content": "<p>Yeah. There's supposed to be one instance per class, and here you want a family of instances parametrised by f which is unfortunately not what the type class system was designed to do :-(</p>",
        "id": 217881904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606309831
    },
    {
        "content": "<p>Thank you for your help ! I should've thought of it earlier, it's not the first time I'm confused by an implicit argument.  I struggled a bit to see how to specify <code>f</code> , I came up with the following: I give the name <code>Vmodule</code> to the instance of <code>module (polynomial K) V</code> and then I can declare the variable <code>\\phi</code> with </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">linear_equiv</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">kxdivp</span> <span class=\"n\">p0</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">vector_space_as_kx_module.Vmodule</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"o\">)</span>\n</code></pre></div>\n<p>strangely I have to specify the namespace \"vector_space_as_kx_module\" here although I am already in the namespace, I suppose this prevent some issues with unnamed instances.</p>",
        "id": 217882700,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606310281
    },
    {
        "content": "<p>:-(</p>",
        "id": 217882795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606310333
    },
    {
        "content": "<p>Yeah, I think you always have to use the full name for instances.</p>",
        "id": 217882808,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606310338
    },
    {
        "content": "<p>Also, I predict this will get awkward very quickly.</p>",
        "id": 217882818,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606310346
    },
    {
        "content": "<p>I mean, more awkward <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 217882838,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606310359
    },
    {
        "content": "<p>Okay I will try using \"def\" instead of instance in this case, hopefully this doesn't get even more awkward. <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> why the sad face ?</p>",
        "id": 217883504,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606310758
    },
    {
        "content": "<p>Because what you're doing is mathematically completely reasonable but it's going to be a pain to do here because of design decisions which are usually correct but are in this case incorrect</p>",
        "id": 217885564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606311886
    },
    {
        "content": "<p>You could create a new type that wraps V and attaches f</p>",
        "id": 217885823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606312013
    },
    {
        "content": "<p>A more common approach in Lean is to define something like <code>def kx_module (V) (f : linear_map K V V) : Type := V</code> and put the <code>K[X]</code>-module instance on that instead, but it's also not perfect</p>",
        "id": 217885858,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606312033
    },
    {
        "content": "<p><code>def fV (f : ...) := V</code></p>",
        "id": 217885862,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606312035
    },
    {
        "content": "<p>You can make a cute little function (indeed you already have) which takes f as an input and spits out the module instance you want, but now you're going to have to feed it into the system every time you want to use it. You could I guess use a type alias instead. In maths we might write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>V</mi><mi>f</mi></msub></mrow><annotation encoding=\"application/x-tex\">V_f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span> with the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">K[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span>-action coming from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>.</p>",
        "id": 217885978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606312088
    },
    {
        "content": "<p>I suppose you could also attach <code>f</code> to the polynomial type instead</p>",
        "id": 217886037,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606312120
    },
    {
        "content": "<p>Having typed that message on my phone i now see that several other people said it too :-)</p>",
        "id": 217886074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606312140
    },
    {
        "content": "<p>Ok thank you everyone ! As you may have guessed my long-term goal is the Jordan normal form, though this part was mostly a warm-up before I get started with torsion PID modules. I'll try the <code>def fV f :=V</code> solution and see how it goes to prove that if there is a \\phi linear equivalence  with K[X]/((x-l)^n) then f is a Jordan block in the relevant basis.</p>",
        "id": 217886772,
        "sender_full_name": "Simon Andreys",
        "timestamp": 1606312495
    }
]