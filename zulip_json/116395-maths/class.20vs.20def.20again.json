[
    {
        "content": "<p>Variation on a well-known theme: should uniform continuity of a map <code>f</code> between uniform spaces <code>a</code> and <code>b</code> be a <code>def</code> or a <code>class</code>? Or should we bundle <code>f</code> and its uniform continuity?  Currently we have a <code>def</code> and no bundling. As usual, this is all convenient to prove properties of individual maps, or compositions of two such maps. Now let's get functorial. I want to promote each such <code>f</code> to a map between the respective Hausdorff completions of <code>a</code> and <code>b</code>.  Of course in math this would be called <code>completion_lift f</code>. This currently doesn't make sense in mathlib, we need a term <code>h : uniform_continuous f</code>. So we could write <code>completion_lift f h</code>. But <code>f</code> can be inferred from <code>h</code>, so common sense dictates it should be an implicit argument, and we end up with <code>completion_lift h</code>. And it looks <em>weird</em>. And it gets worse when stating and proving properties of <code>completion_lift</code>, especially functoriality that should read <code>completion_lift f' ∘ f = (completion_lift f') ∘ completion_lift f </code> but actually reads <code>completion_lift (uniform_continuous.comp h h') = (completion_lift h') ∘ completion_lift h</code>.</p>",
        "id": 129776099,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531775453
    },
    {
        "content": "<p>What should we do?</p>",
        "id": 129776108,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531775468
    },
    {
        "content": "<p>See <a href=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/1e1fb6f6e6b03eb2e5d436851aaaa8e8fc3f1582/src/for_mathlib/completion.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/1e1fb6f6e6b03eb2e5d436851aaaa8e8fc3f1582/src/for_mathlib/completion.lean\">https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/1e1fb6f6e6b03eb2e5d436851aaaa8e8fc3f1582/src/for_mathlib/completion.lean</a> for the concrete situation</p>",
        "id": 129776783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531776386
    },
    {
        "content": "<p>I had a lot of fun doing all this after proving the universal mapping property for completions. It was fun because it was really very close to a paper and pencil proof. But I wouldn't find it fun to do this ten times. I can't wait until we get nice abstract non-sense in mathlib. How far are we from merging <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> PR? Has anyone heard from Scott recently?</p>",
        "id": 129776974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531776643
    },
    {
        "content": "<p>The last few times I've been asked this I advocated the bundled function approach and it's worked well thus far</p>",
        "id": 129778526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531778873
    },
    {
        "content": "<p>Question is then how to handle the existing code base? How to avoid duplicating too much stuff. I guess we still want to keep the current Prop</p>",
        "id": 129778652,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531779035
    },
    {
        "content": "<p>Hm, good point. Is it possible to define <code>completion_lift f</code> without the continuity assumption?</p>",
        "id": 129778896,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531779378
    },
    {
        "content": "<p>i.e. take a default value</p>",
        "id": 129778901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531779395
    },
    {
        "content": "<p>It depends on <code>dense_embedding.extend</code> we were discussing earlier today</p>",
        "id": 129778911,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531779417
    },
    {
        "content": "<p>see <a href=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/1e1fb6f6e6b03eb2e5d436851aaaa8e8fc3f1582/src/for_mathlib/completion.lean#L95-L96\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/1e1fb6f6e6b03eb2e5d436851aaaa8e8fc3f1582/src/for_mathlib/completion.lean#L95-L96\">https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/1e1fb6f6e6b03eb2e5d436851aaaa8e8fc3f1582/src/for_mathlib/completion.lean#L95-L96</a></p>",
        "id": 129778935,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531779479
    },
    {
        "content": "<p><code>dense_embedding.extend</code> doesn't require continuity</p>",
        "id": 129778936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531779480
    },
    {
        "content": "<p>oh, weird, a unique exists</p>",
        "id": 129778979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531779510
    },
    {
        "content": "<p>well, it doesn't require it until <code>ext_e_eq</code></p>",
        "id": 129778993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531779550
    },
    {
        "content": "<p>unique exitsts are everywhere in this abstract nonsense business</p>",
        "id": 129778999,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531779569
    },
    {
        "content": "<p>That's an important part of the universal property</p>",
        "id": 129779005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531779594
    },
    {
        "content": "<p>oh sure, but mathlib basically never uses it</p>",
        "id": 129779008,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531779599
    },
    {
        "content": "<p>it always defines the unique thing with a concrete term</p>",
        "id": 129779056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531779615
    },
    {
        "content": "<p>that's because it lacks basic category theory support</p>",
        "id": 129779058,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531779626
    },
    {
        "content": "<p>I don't want a definition with a concrete term, I want the abstract interface, as in my file</p>",
        "id": 129779066,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531779659
    },
    {
        "content": "<p>no, there are plenty of places where math dictates a unique existence, it's just easier to work with terms</p>",
        "id": 129779069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531779662
    },
    {
        "content": "<p>If you look at scott's development I think he's done the same</p>",
        "id": 129779079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531779693
    },
    {
        "content": "<p>even the explicit construction of <code>completion</code> and <code>to_completion</code> will need to be complemented by a uniqueness up to unique iso result. This is my plan for tomorrow, as well as deducing that completion of a product is isomorphic to product of completions</p>",
        "id": 129779121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531779727
    },
    {
        "content": "<p>I'm sure Kevin can discuss his experiences with <code>sqrt_exists</code></p>",
        "id": 129779122,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531779728
    },
    {
        "content": "<p>Probably the best is to have an explicit term <em>and</em> a uniqueness lemma</p>",
        "id": 129779137,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531779783
    },
    {
        "content": "<p>right</p>",
        "id": 129779148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531779821
    },
    {
        "content": "<p>the uniqueness lemma says something like <code>x = my_thing &lt;-&gt; property</code></p>",
        "id": 129779152,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531779841
    },
    {
        "content": "<p>I still don't know how to do that in this case. Because that <code>de.ext</code> is only half the construction. Then it must still descend to a quotient (lift to a quotient in Lean-speak)</p>",
        "id": 129779198,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531779879
    },
    {
        "content": "<p><a href=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/1e1fb6f6e6b03eb2e5d436851aaaa8e8fc3f1582/src/for_mathlib/completion.lean#L99\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/1e1fb6f6e6b03eb2e5d436851aaaa8e8fc3f1582/src/for_mathlib/completion.lean#L99\">https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/1e1fb6f6e6b03eb2e5d436851aaaa8e8fc3f1582/src/for_mathlib/completion.lean#L99</a></p>",
        "id": 129779201,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531779899
    },
    {
        "content": "<p>Still, you've constructed the term</p>",
        "id": 129779202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531779900
    },
    {
        "content": "<p><code>g</code> in the proof</p>",
        "id": 129779208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531779907
    },
    {
        "content": "<p>this uses uniform continuity</p>",
        "id": 129779210,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531779910
    },
    {
        "content": "<p>no, <code>g</code> needs <code>compat</code></p>",
        "id": 129779214,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531779927
    },
    {
        "content": "<p>right, it's defined by lift on the quotient</p>",
        "id": 129779220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531779945
    },
    {
        "content": "<p>I'm not asking you to prove the theorem without the assumption, or even do the construction without uniform continuity</p>",
        "id": 129779283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531780018
    },
    {
        "content": "<p>I want to see if you can do a similar thing to what I did for <code>extend</code></p>",
        "id": 129779292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531780041
    },
    {
        "content": "<p>Then I don't understand what you suggest</p>",
        "id": 129779295,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531780049
    },
    {
        "content": "<p>If <code>A</code> is empty, is <code>completion A</code> also empty?</p>",
        "id": 129779297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531780058
    },
    {
        "content": "<p>yes</p>",
        "id": 129779300,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531780066
    },
    {
        "content": "<p>(I hope)</p>",
        "id": 129779303,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531780072
    },
    {
        "content": "<p>In my mind it is certainly empty</p>",
        "id": 129779342,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531780085
    },
    {
        "content": "<p>but I'm not an expert in zerology</p>",
        "id": 129779346,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531780095
    },
    {
        "content": "<p>Then you can follow a similar proof to what I did. Define <code>completion.extend f</code> by cases on <code>uniform_continuous f</code>. If it is, do the regular thing. Otherwise, we can pick an arbitrary element of <code>B</code> by <code>choice</code>. We know it is nonempty because we are given an element of <code>completion A</code> so we can prove <code>A</code> is nonempty, so <code>a : A</code> means <code>f a : B</code></p>",
        "id": 129779426,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531780260
    },
    {
        "content": "<p>Oh. This is twisted</p>",
        "id": 129779662,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531780586
    },
    {
        "content": "<p>I'll try that tomorrow, before moving on to products. It seems we don't have an instance for completion of a product of complete spaces, so there will be preparation work.</p>",
        "id": 129779781,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531780716
    },
    {
        "content": "<p>If I'm lucky I'll even get a <code>dense_embedding.extend</code> without inhabitants in mathlib when I'll wake up <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 129779858,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531780838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> don't hesitate to have a look at the current state of <a href=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean\">https://github.com/PatrickMassot/lean-perfectoid-spaces/blob/completions/src/for_mathlib/completion.lean</a> and comment. It's all for the perfectoid project.</p>",
        "id": 129779882,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531780900
    },
    {
        "content": "<p>Patrick I'm really grateful for all of this. The perfectoid project shouldn't be too hard to do. The hard part with schemes was proving that the structure presheaf on Spec(R) was a sheaf because this had all sorts of unexpected pitfalls. The analogous statement for adic spaces isn't true -- an affinoid adic space is <em>defined</em> to be an affinoid pre-adic space Spa(R) for which the structure presheaf happens to be a sheaf, so that is a huge hurdle that we don't have to deal with. Completions are, I think, the main technical issue left, and you are dealing with them. I will try and focus on continuous valuations.</p>",
        "id": 129798324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1531811452
    },
    {
        "content": "<blockquote>\n<p>Has anyone heard from Scott recently?</p>\n</blockquote>\n<p>I haven't seen Scott here for a while. Maybe it's time for (winter?) holidays down under?</p>",
        "id": 129917105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1531985921
    },
    {
        "content": "<p>Maybe. He also doesn't answer emails.</p>",
        "id": 129921084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531991545
    },
    {
        "content": "<p>His webpage revealed <a href=\"https://tqft.net/calendar/\" target=\"_blank\" title=\"https://tqft.net/calendar/\">https://tqft.net/calendar/</a> which pretty clearly indicates winter vacations.</p>",
        "id": 129931031,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532005547
    },
    {
        "content": "<p>It also means he should be back next week (-;</p>",
        "id": 129935705,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532011249
    }
]