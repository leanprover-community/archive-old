[
    {
        "content": "<p>People ask me about other games like natural number game, and I've suggested several in the past, but the one which seems to get the most attention is the real number game. Gavin Thomson, a student of David Corfield in Kent, was coming up to London to work with me on it for four months, arriving in May. Of course this is all now very much up in the air. But <span class=\"user-mention\" data-user-id=\"259186\">@Daniel Keys</span> has also expressed an interest. I will try and get David onto Zulip and we'll see if we can coordinate something here. There is already <a href=\"https://github.com/ImperialCollegeLondon/real-number-game/tree/master\" title=\"https://github.com/ImperialCollegeLondon/real-number-game/tree/master\">a public repo</a> but we are nowhere near a release.</p>\n<p>My experience in writing these games is that for each concept you either import it from Lean (if you just want to use it) or write it from scratch. If you write it from scratch you want one file with all the definitions and the coercions and the notation and a basic API for mathematicians all in term mode, and tell the mathematician not to open it. And then you need a file full of theorems, some of which are sorried and where you can supply tactic mode proofs with steps which feel like about the same pace as a book might go if they were explaining the argument carefully. Sometimes this is a challenge to do in Lean, with \"basic\" maths steps which seem to be tough for beginners to formalise. Is more API needed in this case?</p>\n<p>One thing I wanted to have in the natural number game was more than one sorry to fill in on a page, possibly with the later sorry depending on the first one. I sometimes felt this was a hindrance in NNG.</p>\n<p>Does anyone have any comments on issues they had with the natural number game which we could perhaps avoid in the real number game? I am really hoping to be able to cut down on the number of words used in the tactic descriptions, or at least get them out of the way somehow so you can see the key definition at the top of my waffle, and the key lemma in the middle of it, whilst still being able to code in a small box at the bottom.</p>",
        "id": 191871577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585222870
    },
    {
        "content": "<p><code>NNG</code> meaning?</p>",
        "id": 191872169,
        "sender_full_name": "Jiekai",
        "timestamp": 1585223281
    },
    {
        "content": "<p>natural number game</p>",
        "id": 191872285,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585223344
    },
    {
        "content": "<p>Doing things from scratch like in the NNG has the advantage of possibly being able to show the players more details. But working with Cauchy sequences or Dedekind cuts does seem quite a bit more far-fetched than Peano's axioms.<br>\nUsing <code>mathlib</code>'s capabilities in <code>data.real.basic</code> etc. might hide some foundational stuff but is naturally amenable to teaching the tools built by the community, which is also desirable.<br>\nCould a middle way be better in this case? For example, importing at each level (or as needed) in the game a file that imports, in turn, only the needed tools. Say <code>import</code> from <code>bounds.lean</code> just <code>is_lub</code> and a few other related items when working on results related to the supremum, then list them in the theorems on the left.</p>",
        "id": 191919069,
        "sender_full_name": "Daniel Keys",
        "timestamp": 1585243184
    },
    {
        "content": "<p>Following! thanks for the invite Kevin :) <br>\nSo I still want to help but I won't be up to speed for a few weeks at least. :( So I may be a bit clueless until then. I also should admit that I don't have any experience of working with real numbers in lean yet.</p>\n<p>I think the question of how much is built from scratch and how much is imported maybe depends on who the RNG is aimed at?</p>\n<p>I can only speak for my own experience of undergrad analysis, but I think we saw axioms for the reals first and then proceeded along the lines mentioned on the RNG page -- sups and infs, sequences and limits, series.</p>\n<p>I thought the NNG was good for <em>anyone</em> who wanted a first taste of interactive theorem proving, undergrad or professional. But I guess seeing how to build an explicit construction from scratch would be more useful for professionals than students?<br>\nI see Kevin was looking at similar questions ages ago: <a href=\"https://leanprover-community.github.io/archive/116395maths/43084bounds.html\" title=\"https://leanprover-community.github.io/archive/116395maths/43084bounds.html\">https://leanprover-community.github.io/archive/116395maths/43084bounds.html</a></p>\n<p>I agree that a second game could use less text -- my feeling was that the NNG had to give some motivation for tactics that might seem weird without any knowledge of the nuts and bolts of type theory, term rewriting etc. But I think anyone playing RNG should have played NNG.</p>",
        "id": 191942603,
        "sender_full_name": "Gavin Thomson",
        "timestamp": 1585253680
    },
    {
        "content": "<p>How much will I have to hack lean 3 or mathlib to get things like <code>(1,3] : set real</code> to work? Lean's conventions for intervals are nowhere near what a mathematician is used to.</p>",
        "id": 193322618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586353970
    },
    {
        "content": "<p>I use <code>[a, b] : set real</code> in my lectures, without hacking anything.</p>",
        "id": 193322689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586354008
    },
    {
        "content": "<p>Oh nice</p>",
        "id": 193322717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354020
    },
    {
        "content": "<p>I didn't try with <code>(1, 3]</code> (which is a stupid notation anyway).</p>",
        "id": 193322738,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586354030
    },
    {
        "content": "<p>I'd be happy with <code>]1, 3]</code></p>",
        "id": 193322763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354041
    },
    {
        "content": "<p>Can you give me a link to some code or something?</p>",
        "id": 193322919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354088
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">b</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">Ioc</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">]</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 193323000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586354122
    },
    {
        "content": "<p>And this is ok in practice?</p>",
        "id": 193323041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354139
    },
    {
        "content": "<p>noooo</p>",
        "id": 193323060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586354146
    },
    {
        "content": "<p>I promise I'll never use lists</p>",
        "id": 193323078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354156
    },
    {
        "content": "<p>Same here.</p>",
        "id": 193323136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586354164
    },
    {
        "content": "<p>Or tuples</p>",
        "id": 193323153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354172
    },
    {
        "content": "<p>or commas</p>",
        "id": 193323183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586354182
    },
    {
        "content": "<p>And I had no trouble at all using <code>[a, b]</code> to mean <code>[a, b]</code>.</p>",
        "id": 193323193,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586354186
    },
    {
        "content": "<p>Yeah we don't use commas either</p>",
        "id": 193323227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354200
    },
    {
        "content": "<p>What's wrong with you software people?</p>",
        "id": 193323241,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586354208
    },
    {
        "content": "<p>I will remind you that one place lists come up is in tactics</p>",
        "id": 193323245,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586354210
    },
    {
        "content": "<p>Hmm</p>",
        "id": 193323297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354230
    },
    {
        "content": "<p>I wish you'd just made up your own notation</p>",
        "id": 193323350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354259
    },
    {
        "content": "<p>That will be the ultimate parser test for <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span>: can we use this notation in Lean 4 without destroying Lean?</p>",
        "id": 193323383,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586354271
    },
    {
        "content": "<p>how dare us use ascii</p>",
        "id": 193323392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586354273
    },
    {
        "content": "<p>I'm pretty sure that this notation is ambiguous</p>",
        "id": 193323487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586354299
    },
    {
        "content": "<p>Not if you have a sane unifier</p>",
        "id": 193323522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354316
    },
    {
        "content": "<p>Remember lists don't exist in maths departments</p>",
        "id": 193323551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354327
    },
    {
        "content": "<p>The notation for a list is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator=\"true\">,</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">x_1, x_2, \\ldots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span></span></span></span></p>",
        "id": 193323643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354366
    },
    {
        "content": "<p>Who needs brackets</p>",
        "id": 193323654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354371
    },
    {
        "content": "<p>well, you don't have to nest that expression in anything except for english text</p>",
        "id": 193323798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586354421
    },
    {
        "content": "<p>it's not so easy in a theorem prover</p>",
        "id": 193323817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586354433
    },
    {
        "content": "<p>We already use various forms of absolute value/norm which seem to work all right</p>",
        "id": 193323924,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586354479
    },
    {
        "content": "<p>If you want all of <code>[a, b]</code>, <code>[a, b[</code>, <code>]a, b[</code>, <code>]a, b]</code> to work that adds another twist though</p>",
        "id": 193324118,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586354555
    },
    {
        "content": "<p>Yeah, that's a no. When you declare a notation/parser starting with <code>]</code>, Lean 4 will not accept <code>[a, b]</code> anymore.</p>",
        "id": 193324204,
        "sender_full_name": "Sebastian Ullrich",
        "timestamp": 1586354604
    },
    {
        "content": "<p>And the English versions too</p>",
        "id": 193324205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354604
    },
    {
        "content": "<p>When is Lean 5?</p>",
        "id": 193324241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586354625
    },
    {
        "content": "<p>Mario how long have you been waiting to use <span aria-label=\"maple leaf\" class=\"emoji emoji-1f341\" role=\"img\" title=\"maple leaf\">:maple_leaf:</span></p>",
        "id": 193335258,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586359256
    }
]