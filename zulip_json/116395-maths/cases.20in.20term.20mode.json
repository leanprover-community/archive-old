[
    {
        "content": "<p>I am trying to tell Lean what a path in a quiver is. How do I finish <code>is_a_path</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">quiver</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">quiver</span><span class=\"o\">}</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">is_a_path</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 125937140,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525167654
    },
    {
        "content": "<p>hint: use <code>list.chain</code></p>",
        "id": 125937192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525167756
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">constructors</span><span class=\"o\">:</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain</span><span class=\"bp\">.</span><span class=\"n\">nil</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">nil</span>\n<span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain</span><span class=\"bp\">.</span><span class=\"n\">cons</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">},</span>\n  <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain</span> <span class=\"n\">R</span> <span class=\"n\">b</span> <span class=\"n\">l</span> <span class=\"bp\">→</span> <span class=\"n\">list</span><span class=\"bp\">.</span><span class=\"n\">chain</span> <span class=\"n\">R</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125937200,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525167784
    },
    {
        "content": "<p>interesting</p>",
        "id": 125937201,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525167785
    },
    {
        "content": "<p>By the way, do you think it is a good idea to use lists to capture paths?</p>",
        "id": 125937248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525167848
    },
    {
        "content": "<p>You may want more complicated inductive structures in some circumstances, but here a list of edges is sufficient</p>",
        "id": 125937304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525167980
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">quiver</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">quiver</span><span class=\"o\">}</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">is_a_path</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">[]</span>             <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>            <span class=\"o\">:=</span> <span class=\"n\">true</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">hd1</span><span class=\"bp\">::</span><span class=\"n\">hd2</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">t</span> <span class=\"n\">hd1</span> <span class=\"bp\">=</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">s</span> <span class=\"n\">hd2</span> <span class=\"bp\">∧</span> <span class=\"n\">is_a_path</span> <span class=\"o\">(</span><span class=\"n\">hd2</span><span class=\"bp\">::</span><span class=\"n\">tl</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125937307,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525167993
    },
    {
        "content": "<p>Aaah, so I should use <code>|</code>. Thanks! But now you are not using <code>list.chain</code></p>",
        "id": 125937323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525168043
    },
    {
        "content": "<p>you could use <code>list.chain</code> for the latter two cases</p>",
        "id": 125937326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525168057
    },
    {
        "content": "<p>the definition using <code>list.chain</code> is left to the reader as an exercise :P</p>",
        "id": 125937328,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168067
    },
    {
        "content": "<p>alternatively, you could define it as an inductive type, which may be more natural</p>",
        "id": 125937371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525168106
    },
    {
        "content": "<p>oh... I just realized I wanted induction-recursion</p>",
        "id": 125937375,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168118
    },
    {
        "content": "<p>not for this...</p>",
        "id": 125937379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525168133
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">mutual</span> <span class=\"kn\">inductive</span> <span class=\"n\">path</span><span class=\"o\">,</span> <span class=\"n\">head</span>\n<span class=\"k\">with</span> <span class=\"n\">path</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">path</span>\n<span class=\"k\">with</span> <span class=\"n\">head</span> <span class=\"o\">:</span> <span class=\"n\">path</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">V</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">path</span><span class=\"bp\">.</span><span class=\"n\">A</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>failed idea</p>",
        "id": 125937383,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168140
    },
    {
        "content": "<p>you want the head to be a parameter, like in <code>chain</code></p>",
        "id": 125937390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525168162
    },
    {
        "content": "<p>oh what</p>",
        "id": 125937446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168224
    },
    {
        "content": "<p>Kenny, I don't understand your last definition. What does <code>mutual</code> do?</p>",
        "id": 125937459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525168298
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/theorem_proving_in_lean/theorem_proving_in_lean.pdf\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/theorem_proving_in_lean.pdf\">https://leanprover.github.io/theorem_proving_in_lean/theorem_proving_in_lean.pdf</a><br>\nP.120, Section 7.9</p>",
        "id": 125937460,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168317
    },
    {
        "content": "<p>note that I was trying induction-recursion which is not a thing</p>",
        "id": 125937499,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168330
    },
    {
        "content": "<p>not to confuse you</p>",
        "id": 125937501,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168337
    },
    {
        "content": "<p>But your current definition is not equivalent to mine, right?</p>",
        "id": 125937524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525168417
    },
    {
        "content": "<p>yours? I haven't seen your definition</p>",
        "id": 125937532,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168439
    },
    {
        "content": "<p>Hmm, agreed. My bad.</p>",
        "id": 125937572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525168452
    },
    {
        "content": "<p>Let me try again: your second definition is not equivalent to your first, right?</p>",
        "id": 125937574,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525168468
    },
    {
        "content": "<p>but I haven't finished my second definition</p>",
        "id": 125937576,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168487
    },
    {
        "content": "<p>Aaah, ok</p>",
        "id": 125937591,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1525168529
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> (maybe on its own thread?) if Lean had induction-recursion, would you be able to prove false? would there be a shorter proof than following godel?</p>",
        "id": 125937592,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168531
    },
    {
        "content": "<p>No. Induction recursion would strengthen the system, it wouldn't be able to prove its own consistency because it now has induction-recursion and the simulated lean language would not</p>",
        "id": 125937643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525168612
    },
    {
        "content": "<p>why can't you simulate induction-recursion with induction-recursion?</p>",
        "id": 125937649,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168645
    },
    {
        "content": "<p>you probably need induction-recursion-recursion or something</p>",
        "id": 125937654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1525168662
    },
    {
        "content": "<p>hmm</p>",
        "id": 125937655,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1525168674
    }
]