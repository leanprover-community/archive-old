[
    {
        "content": "<p>Hi, I think it would be nice to have the following features in <code>to_additive</code>:<br>\n1. Automatically add constructors, <code>rec_on</code> etc. to the dictionary.<br>\n2. Automatically add <code>attribute [to_additive name._proof_{{n}}] name._proof_{{n}}</code> <em>before</em> trying to transport <code>name</code>.<br>\nIs it hard?</p>",
        "id": 171361649,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563695547
    },
    {
        "content": "<p>Those sound like good ideas. I don't think they should be too hard. There are a few tactics that crawl the environment looking for declarations. The only example I know well (because I wrote it) is <code>library_search</code>.</p>",
        "id": 171362488,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563697008
    },
    {
        "content": "<p>If I have a <code>structure</code>, I see how I can ask Lean for its constructor and members, so it shouldn't be too hard to do (1). What should I do for (2)? Go over the proof and look for names starting with <code>name._proof_</code>?</p>",
        "id": 171364260,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563700357
    },
    {
        "content": "<p>I think that <code>to_additive</code> should just be some sort of other thing, which takes a valid Lean file <code>mul_stuff.lean</code> and changes all the muls to adds etc and bungs the resulting new API on the bottom of the mul file.</p>",
        "id": 171370143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563711160
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> What should it do with names? <code>s/mul/add/</code>, <code>s/sum/prod/</code>, <code>s/inv/neg/</code>?</p>",
        "id": 171371436,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563713445
    },
    {
        "content": "<p>I'm hoping there's an algorithm</p>",
        "id": 171372045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563714536
    },
    {
        "content": "<p>Of that nature yes</p>",
        "id": 171372051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563714544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> do you know about Lean's canonical structures? Could they be used here? I guess Assia and Cyril both gave talks about this at Lean together 2019</p>",
        "id": 171373229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563716700
    },
    {
        "content": "<p>I started using Lean about two months ago.</p>",
        "id": 171375308,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563720445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> So no, I know nothing about Lean's canonical structures.</p>",
        "id": 171375310,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563720473
    },
    {
        "content": "<p>Actually, I wonder is it more useful to have <code>is_group α (*)</code>, <code>is_group α (+)</code>, <code>is_monoid (α → α) (∘)</code>, then use <code>rw [assoc (*)]</code> instead of <code>rw [mul_assoc]</code>.</p>",
        "id": 171375489,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563720725
    }
]