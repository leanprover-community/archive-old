[
    {
        "content": "<p>What is the correct proof of this? It can be done in  short way using definitional unfolding, but this isn't very stable.</p>\n<div class=\"codehilite\"><pre><span></span>example {α : Type*} [add_comm_monoid α] (f : fin 4 → α) :\n  univ.sum f = f 0 + f 1 + f 2 + f 3\n</pre></div>",
        "id": 177997883,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1570900459
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"mi\">3</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">huniv</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">4</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">::</span><span class=\"mi\">1</span><span class=\"bp\">::</span><span class=\"mi\">2</span><span class=\"bp\">::</span><span class=\"mi\">3</span><span class=\"bp\">::</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">huniv</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sum_zero</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n<span class=\"n\">rw</span> <span class=\"n\">add_zero</span><span class=\"bp\">;</span> <span class=\"n\">iterate</span> <span class=\"mi\">2</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">add_assoc</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 178000051,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1570903692
    },
    {
        "content": "<p>I mean, the <code>f 0 + f 1 + f 2 + f 3</code> part isn't very clearly generalizable. (clearly it isn't <code>list.sum (list.range 4) f</code>)</p>",
        "id": 178000128,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1570903805
    }
]