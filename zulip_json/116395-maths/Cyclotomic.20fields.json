[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> If you want refactor the definition of cyclotomic polynomials pleas go ahead. <br>\nBut the current API should suffice to prove that the splitting field of <code>cyclotomic n Z</code> is the same as the splitting field of <code>X^n-1</code>. We know that the roots if <code>cyclotomic n Z</code> (in <code>C</code>) are the primitive roots of unity.</p>",
        "id": 258814070,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634982115
    },
    {
        "content": "<p>Are you planning to do some Galois theory after that?</p>",
        "id": 258814211,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634982274
    },
    {
        "content": "<p>Yes, that's the plan. I was hoping to get some more general results (I think they're equal if X^n-1 is separable in R) but I'm not averse to the specialised results if that's what's easiest, too</p>",
        "id": 258814268,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1634982393
    },
    {
        "content": "<p>Oh yes, I mean in characteristic <code>0</code>.</p>",
        "id": 258814332,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634982494
    },
    {
        "content": "<p>In any case we know that <code>cyclotomic n Z</code> is irreducible and we know its roots, so mathematically there is not a lot to do, but of course in Lean the story is different. But I think that if there is something missing is rather about splitting fields in general than about cyclotomic polynomials. (Of course there a lot of missing results about cyclotomic polynomial, but for Galois theory what we have should suffice).</p>",
        "id": 258814429,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634982661
    },
    {
        "content": "<p>I am asking because I think that a very very interesting middle sized project is Fermat Last Theorem for regular primes. I don't know if someone else is working on it, but if this is not the case I would like to think about it.</p>",
        "id": 258814613,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634982936
    },
    {
        "content": "<p>Could one define the cyclotomic polynomials as the unique sequence $(\\Phi_n)$ of monic polynomials with integer coefficients characterized by  the formula $T^n-1=\\prod_{d\\mid n} \\Phi_d$ holds?</p>",
        "id": 258829237,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1635003260
    },
    {
        "content": "<p>you'd have to simultaneously make the definition and the proof that polynomials exist which satisfy the property, but this can be done</p>",
        "id": 258829253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635003310
    },
    {
        "content": "<p>Alternatively you could define them to be \"Phi(n) is T^n-1/prod_{d|n, d&lt;n}Phi(d) if this is a polynomial, and 37 otherwise\" and then prove later on that none of them are 37</p>",
        "id": 258829309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635003385
    },
    {
        "content": "<p>This is essentially what Johan was proposing. But let me stress that we already have a definition, and a pretty good API (up to irreducibility).  I maybe chose the wrong definition at the beginning, going through the complex numbers, but before thinking about alternative definitions we should ask ourselves if it is worth the effort of reproving all the results.</p>",
        "id": 258829333,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635003452
    },
    {
        "content": "<p>actually I think Phi(0) might be 37</p>",
        "id": 258829335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635003455
    },
    {
        "content": "<p>We already add this discussion one year ago :).  Currently <code>cyclotomic 0 R = 1</code>.</p>",
        "id": 258829394,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635003497
    },
    {
        "content": "<p>but it doesn't have degree phi(0)=2 ;-)</p>",
        "id": 258829401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635003525
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.degree_cyclotomic\">docs#polynomial.degree_cyclotomic</a> says it's true for all <code>n</code>, so I think <code>0.totient = 0</code>.</p>",
        "id": 258829464,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635003622
    },
    {
        "content": "<p>That makes sense from my point of view, as no element strictly smaller than <code>0</code> is coprime with <code>0</code>.</p>",
        "id": 258829480,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635003681
    },
    {
        "content": "<p>BTW, what I was proposing to get rid of the use of complex numbers in much simpler than redoing everything: it suffices to have a char 0 field with all the primitive roots of unity (like Q bar). I should check, but maybe we can even use a different field for every <code>n</code>, and then the splitting field of <code>X^n-1</code> would be enough.</p>",
        "id": 258829483,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635003707
    },
    {
        "content": "<p>Of course this not for any mathematical reasons, it is just to avoid having <code>import analysis.complex.roots_of_unity</code> at the beginning of a morally \"algebraic\" file.</p>",
        "id": 258829610,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635003878
    },
    {
        "content": "<p>So we're saying there are three approaches. There's a totally \"hands-on\" approach where you define Phi_n recursively in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\Z[X]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span>, there's an approach via Galois theory where you work in the splitting field of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">X^n-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (so it imports a whole bunch of algebra files) and there's an approach via using the complex numbers (where you import some analysis files). The \"hands-on\" approach will need very few imports but you might have to work hard and I guess it's not clear whether there's any point in doing so just to shorten the import tree -- you would be making mathlib more incomprehensible. The approach via splitting fields -- you won't have to import the complex numbers and a proof that they're algebraically closed (actually no, you only need a basic theory of roots of unity which is much easier), but you will have to import quite a bit of field theory.</p>",
        "id": 258832034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635007339
    },
    {
        "content": "<p>For those that are not following the <code>flt-regular</code> stream: we are discussing about the definition of cyclotomic extensions/fields. We want a super general definition, even if of course we are going to work in a much more specific case. Does anyone have in mind something called \"cyclotomic extension\" that is not captured by the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.splitting_field</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.pnat.basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">splits</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.splits</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">polynomial.X</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">adjoint_roots</span> <span class=\"o\">:</span> <span class=\"n\">algebra.adjoin</span> <span class=\"n\">K</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"c1\">-- or some other equivalent condition</span>\n</code></pre></div>",
        "id": 259068371,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635238462
    },
    {
        "content": "<p>Do you really want to restrict to <code>field K</code> and <code>field L</code>? It might be useful to say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><msub><mi>ζ</mi><mi>n</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[\\zeta_n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07378em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> is a cyclotomic extension.</p>",
        "id": 259069380,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635239153
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.splits\">docs#polynomial.splits</a> is for fields. But don't worry, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/integral_closure.is_integral_closure\">docs#integral_closure.is_integral_closure</a> for that.</p>",
        "id": 259071977,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635240891
    },
    {
        "content": "<p>So the idea is to have cyclotomic extensions of fields and their ring of integers (of course with the lemma that says it's enough add a primitive root of unity).</p>",
        "id": 259072056,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635240946
    },
    {
        "content": "<p>Yes, I know the <code>integral_closure</code> business; but I am wondering if it is reasonable to impose that a \"cyclotomic algebra tower\" be only defined for fields.</p>",
        "id": 259072222,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635241044
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 259072389,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635241146
    },
    {
        "content": "<p>Well, to be honest I am not even sure what that notation means. In real math, when we write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>α</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[\\alpha]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">]</span></span></span></span> we often mean the ring of integers of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\alpha)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 259072521,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635241217
    },
    {
        "content": "<p>We rarely speak about the subalgebra generated by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>, unless it is already integrally closed</p>",
        "id": 259072577,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635241254
    },
    {
        "content": "<p>No, I am not so sure; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><msqrt><mn>5</mn></msqrt><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[\\sqrt{5}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">5</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> is a very honest order in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><msqrt><mn>5</mn></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\sqrt{5})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1572200000000001em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.90722em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">5</span></span></span><span style=\"top:-2.86722em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.13278em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 259072612,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635241275
    },
    {
        "content": "<p>OK, probably <em>I</em> rarely use that <span aria-label=\"innocent\" class=\"emoji emoji-1f607\" role=\"img\" title=\"innocent\">:innocent:</span></p>",
        "id": 259072733,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635241342
    },
    {
        "content": "<p>But what definition do you propose? We cannot say that a polynomial is split over a ring</p>",
        "id": 259072789,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635241378
    },
    {
        "content": "<p>I think it would be a problem to only have full rings of integers; for instance, if one day we develop global CFT, it would be important to develop general orders.</p>",
        "id": 259072810,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635241395
    },
    {
        "content": "<p>Wait, maybe the condition <code>splits</code> is useless</p>",
        "id": 259072850,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635241426
    },
    {
        "content": "<p>We can say it splits over a domain, where there are at most as many roots as the degree?</p>",
        "id": 259072865,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635241440
    },
    {
        "content": "<p>I mean that I don't want to do the refactor</p>",
        "id": 259072926,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635241457
    },
    {
        "content": "<p>I understand, and it makes sense.</p>",
        "id": 259072942,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635241470
    },
    {
        "content": "<p>But indeed, do you need the splitting condition? For instance, we define ring of integers for every field (including positive char!, or the reals) as the integral closure of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>. It might be disgusting, but you do not need any finiteness condition on it.</p>",
        "id": 259073038,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635241546
    },
    {
        "content": "<p>Can't you define a <code>Prop</code> called <code>contains_nth_root_of_one</code> by saying that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Φ</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Phi_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">Φ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> has at least one root, and then define that an algebra tower <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mi mathvariant=\"normal\">/</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A/B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is cyclotomic if the <code>Prop</code> is satisfied?</p>",
        "id": 259073327,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635241704
    },
    {
        "content": "<p>Is it OK in characteristic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Φ</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Phi_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord\">Φ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 259074087,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635242199
    },
    {
        "content": "<p>Yes, it seems it is</p>",
        "id": 259074121,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635242224
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ex_root</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">polynomial.aeval</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">polynomial.cyclotomic</span> <span class=\"n\">a</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">adjoint_roots</span> <span class=\"o\">:</span> <span class=\"n\">algebra.adjoin</span> <span class=\"n\">K</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">pnat</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 259074490,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635242444
    },
    {
        "content": "<p>Do we say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> is the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-th cyclotomic extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>?</p>",
        "id": 259074630,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635242526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/Cyclotomic.20fields/near/259074630\">said</a>:</p>\n<blockquote>\n<p>Do we say that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> is the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-th cyclotomic extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>?</p>\n</blockquote>\n<p>Yes, I think this is what was suggested earlier</p>",
        "id": 259075252,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1635242942
    },
    {
        "content": "<p>Why not? I think it is better to add a lemma saying that \"nothing happens\"  rather than adding a constraint.</p>",
        "id": 259075276,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635242958
    },
    {
        "content": "<p>Ah, I am stupid, this is <em>always</em> the extension generated by the primitive <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-th roots of unity (there are no primitive <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-th roots of unity in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>, so that's OK)</p>",
        "id": 259075448,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635243083
    },
    {
        "content": "<p>Well, I wanted to add a <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span>  but certainly don't want to agree on your \"I am stupid\"... <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 259093332,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635253827
    },
    {
        "content": "<p>What I like of the above definition is that it also allows for infinite cyclotomic extensions, because you do not require that <code>S</code> is a <code>finset</code>. Indeed, when we will do Iwasawa theory, it will be important to have the cyclotomic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span>-extension at our disposal.</p>",
        "id": 259093589,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635253956
    },
    {
        "content": "<p>By the way,  I have been thinking about the <code>(S : set pnat)</code> business. I am wondering if it would not be more appropriate to let <code>S</code> be a sub-lattice of <code>pnat</code> (or of <code>nat</code>) when the (positive) naturals are ordered by division. This would allow to use Galois connections to state the theorem that the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-th cyclotomic field is contained in the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>-th whenever <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>∣</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n\\mid m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>. Otherwise, the result becomes a bit painful to state (divisibility is always defined in <code>nat</code> but \"often\" means nothing) and more painful to prove: whereas Galois connections are really natural and cute (<span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  and <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> , dont' you agree ? <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span>  )</p>",
        "id": 259214530,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635328101
    },
    {
        "content": "<p>They really are cute! But how do you state that <code>S</code> is a sublattice?</p>",
        "id": 259216076,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635329009
    },
    {
        "content": "<p>Unless I misunderstood, does that mean we should define a type synonym for any type where division makes sense?</p>",
        "id": 259216388,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635329169
    },
    {
        "content": "<p>Then <code>S : set (div_order nat)</code> or <code>S : set (div_order pnat)</code> would be more appropriate.</p>",
        "id": 259216518,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635329230
    },
    {
        "content": "<p>However we'll need to quotient by the units to even get a partial order...</p>",
        "id": 259218033,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635330186
    },
    {
        "content": "<p>You are right. What I had in mind is that it is useful to be sure that <code>S</code> is itself a (div)-lattice. So, for instance, rather than considering the singleton <code>a : set nat</code> one should consider the lattice of all divisors of <code>a</code>. They give rise to the same cyclotomic extension, but with the Galois connection bonus.</p>",
        "id": 259218231,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635330301
    },
    {
        "content": "<p>And as long as <code>nat</code> is concerned, there are not so many units...</p>",
        "id": 259218273,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635330331
    },
    {
        "content": "<p>At any rate, it is vital to wait for <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> 's opinion on all this, since he is the one defining cyclotomic extensions.</p>",
        "id": 259218577,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635330506
    },
    {
        "content": "<p>I don't immediately see how to use Galois connections because we don't have a type of all cyclotomic fields</p>",
        "id": 259218931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635330728
    },
    {
        "content": "<p>Not yet, but this was Riccardo's project, to define them. And my point was whether it is better to attach a cyclotomic field to a subset of <code>nat</code> or to some sort of division-lattice in it, so that we can later <em>state</em> the existence of a Galois connection.</p>",
        "id": 259219150,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635330867
    },
    {
        "content": "<p>If we defined a choice of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{\\mathbb{Q}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.05556em;vertical-align:-0.16667em;\"></span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8888900000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span><span style=\"top:-3.80889em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16667em;\"><span></span></span></span></span></span></span></span></span> (e.g. the subfield of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>) then we could define cyclotomic fields as subfields of this, and also define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">(</mo><mover accent=\"true\"><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"true\">‾</mo></mover><mi mathvariant=\"normal\">/</mi><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Gal(\\overline{\\mathbb{Q}}/\\mathbb{Q})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.13889em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">(</span><span class=\"mord overline\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8888900000000001em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span><span style=\"top:-3.80889em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16667em;\"><span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mord mathbb\">Q</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 259220482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635331672
    },
    {
        "content": "<p>After all, we defined <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> and that has automorphisms</p>",
        "id": 259220569,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635331717
    },
    {
        "content": "<p>My experience with Dededind domains would rather suggest to keep everything moving, so defining a predicate <code>is_cyclotomic_extension L K</code> to say that <code>L</code> is obtained by adjoining the root of a cyclotomic polynomial to <code>K</code> whatever <code>K</code> is.</p>",
        "id": 259220619,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635331758
    },
    {
        "content": "<p>I agree that it's not clear that Galois connections can be used here. Basically, we would need to define</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">lattice_of_cyclotomic_fields</span> <span class=\"o\">:=</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>But I don't think it will be very nice to work with terms of that type.</p>",
        "id": 259221109,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635332087
    },
    {
        "content": "<p>Hmm...I see what you mean, but coming from the Iwasawa-theoretic perspective, this would seem quite reasonable to me. The way Iwasawa theory attaches gadgets (class groups, ell. curves or cohomology thereof) to \"layers\" in cyclotomic extensions seems to be described pretty well as a Galois connection</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lattice_of_cyclotomic_fields</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">bleah</span>\n</code></pre></div>\n<p>I might not see some hidden problem, though.</p>",
        "id": 259221511,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635332363
    },
    {
        "content": "<p>In Iwasawa theory, is this an honest lattice, or is it a category (with Galois groups as automorphism groups for the object = cyclotomic fields).</p>",
        "id": 259221708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635332447
    },
    {
        "content": "<p>Because maybe we should use (adjoint) functors instead of Galois connections.</p>",
        "id": 259221735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635332467
    },
    {
        "content": "<p>I would really think that it is a honest lattice; but may be I should better understand when is it better to speak in terms of lattices and when in terms of categories. In <a href=\"https://leanprover-community.github.io/mathlib_docs\">#docs</a>.galois_connection I read \"A Galois connection is a pair of functions <code>l</code> and <code>u</code> satisfying <code>l a ≤ b ↔ a ≤ u b</code>. They are special cases of adjoint functors in category theory, but do not depend on the category theory library in mathlib.\" and I have the feeling that the whole machinery of category theory would not be very useful in practice for Iwasawa theory.</p>",
        "id": 259222072,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635332702
    },
    {
        "content": "<p>So all fields are embedded in a fixed algebraic closure? And you don't consider different embeddings?</p>",
        "id": 259222322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1635332880
    },
    {
        "content": "<p>Indeed, it never happened to me to consider different embeddings while doing Iwasawa theory...</p>",
        "id": 259222423,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635332929
    },
    {
        "content": "<p>Cyclotomic extensions are abelian extensions, so the subtle problem of whether a number field should be regarded as coming with a fixed embedding into the complexes is reduced to the simpler problem of understanding their Galois groups</p>",
        "id": 259222750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635333138
    },
    {
        "content": "<p>Filippo might never have changed his embedding into the complexes but will have considered the Galois group of a cyclotomic field over Q</p>",
        "id": 259222819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635333194
    },
    {
        "content": "<p>Sure I did! At any rate, I would be happy in general to get a clearer picture on when are Galois connections/insertions the best choice as opposed to categorical adjunctions.</p>",
        "id": 259231200,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635338033
    },
    {
        "content": "<p>In the other stream I originally had in mind to use <code>truncation_set</code>s for <code>S</code> (which might additionally be closed under lcm). What do you think about that idea?</p>",
        "id": 259233602,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635339297
    },
    {
        "content": "<p>Another issue in positive characteristic is that you can add as many powers of p as you like without changing the property</p>",
        "id": 259233672,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635339332
    },
    {
        "content": "<p>Do you mean truncated sets?</p>",
        "id": 259233888,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635339443
    },
    {
        "content": "<p>Concerning positive char, I agree that nothing happens, but what is the problem in the definition?</p>",
        "id": 259233938,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635339466
    },
    {
        "content": "<p>Oh I mean truncation sets in the sense of, e.g., <a href=\"http://math.uchicago.edu/~drinfeld/Seminar-2019/Witt_vectors/Hesselholt%20on%20Witt%20vectors.pdf\">http://math.uchicago.edu/~drinfeld/Seminar-2019/Witt_vectors/Hesselholt%20on%20Witt%20vectors.pdf</a></p>",
        "id": 259234040,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635339515
    },
    {
        "content": "<p>Oh, great. I was not aware of this notion. Sure, it makes sense and really goes in the direction I had in mind.</p>",
        "id": 259234231,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635339611
    },
    {
        "content": "<p>I confess I still somewhat feel that setting up Galois would make Iwasawa-theory life easy: for instance, you could say that the assignment <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>↦</mo><msub><mi mathvariant=\"script\">C</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">n \\mapsto  \\mathcal{C}_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.522em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05834em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is a Galois connection where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">C</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{C}_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.05834em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05834em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is a group (e.g. the class group) attached to the field of degree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>p</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">p^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.858832em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> in a cyclotomic tower.</p>",
        "id": 259234546,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635339757
    },
    {
        "content": "<p>A part from this, I think it would be important to allow for <em>infinite</em> truncation sets.</p>",
        "id": 259234607,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635339778
    },
    {
        "content": "<p>For sure. I don't want any finiteness restriction on S</p>",
        "id": 259234681,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635339819
    },
    {
        "content": "<p>There should be something like a Galois connection btw. Maybe just an adjunction between the lattice of truncation sets and the category of cyclotomic extensions (which is not a lattice since there are automorphisms).</p>",
        "id": 259235171,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635340060
    },
    {
        "content": "<p>Ah, I see the business with lattices and categories, now: thanks!</p>",
        "id": 259235383,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635340144
    },
    {
        "content": "<p>You probably can use the category of all algebras over the base field. The functor in one direction takes a set S and gives the cyclotomic extension associated to it, and in the other direction you take an algebra and send it to the set S of all n such that X^n-1 splits in the algebra.</p>",
        "id": 259235470,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635340191
    },
    {
        "content": "<p>Truncation sets might indeed be the right context!</p>",
        "id": 259235562,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635340214
    },
    {
        "content": "<p>Yes, it seems to make sense.</p>",
        "id": 259235608,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635340235
    },
    {
        "content": "<p>The only problem is that \"the cyclotomic extensions associated to it\" does not quite exist, right? One needs to pick up an alg closed field - or something like that.</p>",
        "id": 259235686,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635340285
    },
    {
        "content": "<p>I would rather consider the category of all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>-subalgebras in a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>-algebra <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>, and let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> vary.</p>",
        "id": 259235852,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635340360
    },
    {
        "content": "<p>I am not ignoring your messages, and your help is really appreciated. I will read everything after having fixed a problem with the current def</p>",
        "id": 259235990,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635340422
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> you are right, to define the functor from S to algebras, it might be easier to choose an algebraic closure and work inside there.</p>",
        "id": 259236381,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635340576
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/116395-maths/topic/Cyclotomic.20fields/near/259235383\">said</a>:</p>\n<blockquote>\n<p>Ah, I see the business with lattices and categories, now: thanks!</p>\n</blockquote>\n<p>Categories in Lean have two universes associated with them -- the universe where the objects live and the universe where the morphisms live. If you imagine a category where morphisms live in <code>Prop</code> then you get exactly a preorder :-)</p>",
        "id": 259239727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635341943
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Cyclotomic.20fields/near/259239727\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/116395-maths/topic/Cyclotomic.20fields/near/259235383\">said</a>:</p>\n<blockquote>\n<p>Ah, I see the business with lattices and categories, now: thanks!</p>\n</blockquote>\n<p>Categories in Lean have two universes associated with them -- the universe where the objects live and the universe where the morphisms live. If you imagine a category where morphisms live in <code>Prop</code> then you get exactly a preorder :-)</p>\n</blockquote>\n<p>Oh, this is very nice a description indeed! Thanks.</p>",
        "id": 259245414,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635344159
    },
    {
        "content": "<p>and then all the adjoint functor stuff just precisely translates into Galois connections in this special case.</p>",
        "id": 259246022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635344394
    },
    {
        "content": "<p>Unfortunately my memory was that Scott once tried to let categories have Props as morphisms but things didn't work out for some reason, so he changed them all back to types.</p>",
        "id": 259246139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635344426
    },
    {
        "content": "<p>Ah, I see. But as long as preorders exist, we can call these special categories that way...</p>",
        "id": 259246273,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635344483
    },
    {
        "content": "<p>For some reason, <code>quiver</code> is allowed to have Hom sets in Prop, but not <code>category_struct</code> (see the \"v+1\" in that definition)</p>",
        "id": 259246472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635344542
    },
    {
        "content": "<p>However it's still a cool mental model to have :-)</p>",
        "id": 259246639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635344614
    },
    {
        "content": "<p>Late to the party, but currently we have a characteristic predicate</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">ex_root</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">aeval</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">a</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span> <span class=\"n\">adjoint_roots</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">A</span> <span class=\"o\">{</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 259249829,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635345756
    },
    {
        "content": "<p>And a \"model\"</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive [field, algebra K]</span><span class=\"o\">]</span>\n<span class=\"kd\">def</span> <span class=\"n\">cyclotomic_field</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">splitting_field</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">:</span> <span class=\"n\">is_cyclotomic_extension</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">cyclotomic_field</span> <span class=\"n\">n</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>defined over a field <code>K</code> for <code>S</code> a singleton.</p>",
        "id": 259249998,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635345819
    },
    {
        "content": "<p>Just playing around with this idea <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span>:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.adjoin</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.Algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.category.preorder</span>\n<span class=\"kn\">import</span> <span class=\"n\">field_theory.splitting_field</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">FieldExtension</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">[</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">alg</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">FieldExtension</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">FieldExtension</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">FieldExtension</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">K.K</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">K.str</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">K.alg</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">FieldExtension</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">,</span> <span class=\"n\">K</span> <span class=\"bp\">→ₐ</span><span class=\"o\">[</span><span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"n\">L</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">alg_hom.id</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g.comp</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">of</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">FieldExtension</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">E</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">FieldExtension</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→+*</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">FieldExtension</span>\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_set</span> <span class=\"o\">:</span> <span class=\"n\">FieldExtension</span> <span class=\"n\">F</span> <span class=\"bp\">⥤</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">splits</span> <span class=\"n\">A.ι</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hom_of_le</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">B.ι</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.comp</span> <span class=\"n\">f.to_ring_hom</span> <span class=\"n\">A.ι</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">f.commutes</span> <span class=\"n\">t</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">splits_comp_of_splits</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">to_algebra</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">pnat</span><span class=\"o\">)</span> <span class=\"bp\">⥤</span> <span class=\"n\">FieldExtension</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">Fbar</span> <span class=\"o\">:=</span> <span class=\"n\">algebraic_closure</span> <span class=\"n\">F</span> <span class=\"k\">in</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">FieldExtension.of</span> <span class=\"bp\">$</span>\n    <span class=\"n\">intermediate_field.adjoin</span> <span class=\"n\">F</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Fbar</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">},</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subalgebra.inclusion</span> <span class=\"bp\">$</span> <span class=\"n\">intermediate_field.adjoin.mono</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span><span class=\"n\">hn</span><span class=\"o\">,</span><span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">le_of_hom</span> <span class=\"n\">f</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_id'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp'</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n</div></div>\n<p>I wanted to prove the adjunction as well, but I have to go teach <span aria-label=\"expressionless\" class=\"emoji emoji-1f611\" role=\"img\" title=\"expressionless\">:expressionless:</span></p>",
        "id": 259252384,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635346697
    },
    {
        "content": "<p>Very nice!</p>",
        "id": 259252512,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1635346746
    },
    {
        "content": "<p>I guess we can have some interplay with a more down to Earth interpretation, right? Like <code>group</code> and <code>Group</code> and so on.</p>",
        "id": 259255400,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635347729
    },
    {
        "content": "<p>I agree that such an abstract approach can be useful sometimes, but what will happen when we have to prove that <code>(1-z)^p =...</code> or a similar very very concrete result? Of course it will be provable, at end the objects are the same, but I am afraid it will be annoying.</p>",
        "id": 259255680,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635347824
    },
    {
        "content": "<p>It seems that it's enough to prove something like <code>is_cyclotomic_extension S K (to_algebra S)</code> to make the link between the categorical def and the \"concrete\" one.</p>",
        "id": 259356609,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635410394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/Cyclotomic.20fields/near/259072521\">said</a>:</p>\n<blockquote>\n<p>Well, to be honest I am not even sure what that notation means. In real math, when we write <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>α</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[\\alpha]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">]</span></span></span></span> we often mean the ring of integers of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><mi>α</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(\\alpha)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">)</span></span></span></span>.</p>\n</blockquote>\n<p>To be honest, I've never seen any use of this convention, and I would not recommend it.</p>",
        "id": 259362507,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1635413712
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/Cyclotomic.20fields/near/259072789\">said</a>:</p>\n<blockquote>\n<p>But what definition do you propose? We cannot say that a polynomial is split over a ring</p>\n</blockquote>\n<p>If the polynomial is monic, it may sense to say that it factors as a product of monic terms of degree 1 .</p>\n<p>Moreover, the book <em>Modern Computer Algebra</em> by von zur Gathen and Gerhard, ISBN: 0-521-82646-2, defines the splitting algebra $S$ of a monic degree $n$ polynomial $P\\in R[T]$ as the algebra generated by $n$ indeterminates $a_1,\\dots,a_n$ quotiented by the relations that say that $P=(T-a_1)\\dots (T-a_n)$. This algebra is free of rank $n!$  over $R$, it has an action of the symmetric group $\\mathfrak S_n$. If $R$ is a field,  then this algebra is artinian, the symmetric group acts transitively on the set of maximal ideals, the residue fields are splitting extensions of $P$., and the fixator of any maximal ideal in $\\mathfrak S_n$ is “the” Galois group of $P$.</p>",
        "id": 259363129,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1635414070
    },
    {
        "content": "<p>It surely makes sense mathematically. I meant it's not in mathlib, and I prefer not spending two months in writing 100 stupid lemmas about a new notion if it's possible</p>",
        "id": 259364234,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635414785
    },
    {
        "content": "<p>Well, isn't that the point of those big projects? <span aria-label=\"stuck out tongue\" class=\"emoji emoji-1f61b\" role=\"img\" title=\"stuck out tongue\">:stuck_out_tongue:</span></p>",
        "id": 259364395,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1635414881
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/Cyclotomic.20fields/near/259364234\">said</a>:</p>\n<blockquote>\n<p>It surely makes sense mathematically. I meant it's not in mathlib, and I prefer not spending two months in writing 100 stupid lemmas about a new notion if it's possible</p>\n</blockquote>\n<p>I don't know whether it is useful to include it in mathlib, and I don't claim somebody should.<br>\nI just claim this is a meaningful mathematical notion, and having it in mind may be useful to think about the topic.</p>",
        "id": 259366963,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1635416426
    },
    {
        "content": "<p>Sure, I completely agree!</p>",
        "id": 259368661,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1635417478
    },
    {
        "content": "<p>Am I correct in reading the above as a proposed more general definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.splitting_field\">docs#polynomial.splitting_field</a>? Or is it a separate concept?</p>",
        "id": 259467477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635465167
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Antoine's suggestion won't quite generalize the splitting field, but it's related. If you apply that construction in the case where the base is a field, and mod out by some maximal ideal, you would indeed get \"the\" splitting field (rather, \"a\" splitting field).</p>",
        "id": 259473738,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635471496
    },
    {
        "content": "<p>One point where I think this construction could be very useful is in generalizing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.splits\">docs#polynomial.splits</a></p>",
        "id": 259474400,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635472227
    },
    {
        "content": "<p>I.e. we could say that a polynomial <code>f : R[X]</code> splits w.r.t <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ι</mi><mo>:</mo><mi>R</mi><mo>→</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">\\iota : R \\to S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ι</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ι</mi></mrow><annotation encoding=\"application/x-tex\">\\iota</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">ι</span></span></span></span> factors through the algebra in question.</p>",
        "id": 259474489,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1635472324
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Cyclotomic.20fields/near/259467477\">said</a>:</p>\n<blockquote>\n<p>Am I correct in reading the above as a proposed more general definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.splitting_field\">docs#polynomial.splitting_field</a>? Or is it a separate concept?</p>\n</blockquote>\n<p>It is a separate, but related, concept. If you apply the “splitting algebra” to a separable polynomial over a field, you get a separable algebra which is a product of fields, all isomorphic to the splitting field extension. If the polynomial is not separable, the algebra you get may not be a field, it may have nilpotent elements. (Already for $P=T^2$, what you get is $k[a,b]/(a+b,ab)=k[a]/(a^2)$.)</p>",
        "id": 259501826,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1635500207
    },
    {
        "content": "<p>After some weeks working on the flt-regular project, we realized that the definition of <code>is_cyclotomic_extension</code> we are using is maybe <em>too</em> general. The definition is basically \"generated by the roots of the <code>n</code>-th cyclotomic polynomial\". You can have a look at <a href=\"https://github.com/leanprover-community/mathlib/pull/10849\">#10849</a> or at the <a href=\"https://github.com/leanprover-community/flt-regular\">full project</a> if you are curious.</p>\n<p>The problem is that, for example, the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span> cyclotomic extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mn>5</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is trivial, and in practice it is not true that we have <code>n</code>-th primitive roots of unity in a <code>n</code>-th cyclotomic extension. The math is clear (I even have a Lean proof the following): if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">L/K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">L</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-th cyclotomic extension and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">n \\neq 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mrel\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> then everything is OK, but if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is of characteristic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo>&gt;</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">p &gt; 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><msup><mi>p</mi><mi>s</mi></msup><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">n = p^s m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8588em;vertical-align:-0.1944em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">s</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">m</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> coprime, then we only have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>-th primitive roots of unity in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span>.</p>\n<p>My question is what can we do in Lean? Having <code>hn : (↑n : _) ≠ 0</code> is getting annoying, and in practice, for flt-regular, we are only interested in the <code>char_zero</code> case. Of course <code>char_p</code> cyclotomic extensions are interesting, but maybe not the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>-th cyclotomic extension of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>. I am thinking about adding to the definition of <code>is_cyclotomic_extension</code> the condition that <code>(↑n : _) ≠ 0</code>. What do you think?</p>",
        "id": 265957185,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640297013
    },
    {
        "content": "<p>I don't see a way of using efficiently TC resolution here, but it's maybe my fault.</p>",
        "id": 265957447,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640297218
    },
    {
        "content": "<p>(related discussion <a href=\"#narrow/stream/304774-FLT-regular/topic/hn.20.3A.20.28.E2.86.91n.20.3A.20_.29.20.E2.89.A0.200\">here</a>)</p>",
        "id": 265958117,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640297608
    },
    {
        "content": "<p>To give a more explicit example, consider the following: let <code>B</code> be an <code>A</code>-algbra with <code>[is_cyclotomic_extension n A B]</code> for a given <code>n</code>. Let <code>foo</code> be the theorem that says that, if <code>[is_domain B]</code> and <code>(↑n : B) ≠ 0</code> then there is a primitive <code>n</code>-th root of unity in <code>B</code>. We want also a <code>bar</code> theorem that, if <code>[is_domain B] [char_zero B]</code> gives the same result as <code>foo</code>, without having to prove <code>(↑n : B) ≠ 0</code> manually.</p>",
        "id": 265959276,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640298577
    },
    {
        "content": "<p>Of course we can just prove both <code>foo</code> and <code>bar</code>, but we would like to avoid to duplicate all the theorems with <code>(↑n : B) ≠ 0</code>.</p>",
        "id": 265959355,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640298630
    },
    {
        "content": "<p>Maybe the definition of \"primitive root of unity\" should be changed?</p>",
        "id": 265959363,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640298643
    },
    {
        "content": "<p>What definition is currently being used?</p>",
        "id": 265959397,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640298711
    },
    {
        "content": "<p>The definition looks perfectly fine to me, it's just that there are no <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span>-th primitive roots of unity if a field of  chracteristic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span>.</p>",
        "id": 265959407,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640298717
    },
    {
        "content": "<p>The multiplicative order of a primitive <code>n</code>-th root of unity is <code>n</code>.</p>",
        "id": 265959455,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640298738
    },
    {
        "content": "<p>I mean, this is essentially the definition.</p>",
        "id": 265959467,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640298750
    },
    {
        "content": "<p>Well, I would argue that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span> is a primitive 5th root of unity in a field of characteristic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">5</span></span></span></span> :)</p>",
        "id": 265959468,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640298754
    },
    {
        "content": "<p>But that doesn't satisfy <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_primitive_root\">docs#is_primitive_root</a>.</p>",
        "id": 265959516,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640298838
    },
    {
        "content": "<p><code>1 ^ 1 = 1</code> but <code>5 ∣ 1</code> is false.</p>",
        "id": 265959589,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640298881
    },
    {
        "content": "<p>yeah, of course, so one could change the second condition in that def</p>",
        "id": 265959612,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640298903
    },
    {
        "content": "<p>are you then saying a primitive root should by definition be a root of the <code>n</code>th cyclotomic poly?</p>",
        "id": 265959632,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640298925
    },
    {
        "content": "<p>I guess so, yeah.</p>",
        "id": 265959645,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640298943
    },
    {
        "content": "<p>But cyclotomic polynomials are defined using primitive roots...</p>",
        "id": 265959706,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640298982
    },
    {
        "content": "<p>I know they can be defined directly, but I don't think we want to do such a refactor</p>",
        "id": 265959719,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640299005
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span>  what do you think about having results with<code>(↑n : _) ≠ 0</code> as an explicit assumption (so no <code>fact</code>) and duplicate them in the <code>char_zero</code> case? Maybe at the end of the day the duplicated code is not that much...</p>",
        "id": 265959955,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640299276
    },
    {
        "content": "<p>For flt-regular we will very quickly specialize to <code>Q</code>, so it doesn't really matter</p>",
        "id": 265959980,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640299312
    },
    {
        "content": "<p>I still think it may be helpful to have the ne-zero classes that I outlined in the linked thread; TC can then deal with everything (hopefully) - there should only be this new class, and <code>no_smul_zero_divisors</code> involved. That also seems like a decent solution, though; who deals with charp and char zero at the same time without getting headaches ;b</p>",
        "id": 265960205,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640299541
    },
    {
        "content": "<p>Sounds easy enough that abbreviating the appropriate <code>fact</code> and maybe writing some quick API (to avoid always going down to <code>fact.out</code>) should do the job.</p>",
        "id": 265960288,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640299620
    },
    {
        "content": "<p>we can't have (global) <code>fact</code> instances, Yael</p>",
        "id": 265960369,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640299736
    },
    {
        "content": "<p>at least, we shouldn't because it slows down TC; but a couple of cases seem to have done it regardless</p>",
        "id": 265960413,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640299801
    },
    {
        "content": "<p>Then don't make it an abbreviation but instead a proper class.</p>",
        "id": 265960476,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640299832
    },
    {
        "content": "<p>Do you mean something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>?</p>",
        "id": 265960623,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640300040
    },
    {
        "content": "<p>I had N+ in mind, but I think this is better because we can just provide an easy-to-use instance for N+</p>",
        "id": 265960885,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640300340
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">test</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">nat.cast_ne_zero.2</span> <span class=\"n\">n.pos.ne'</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>seems to work</p>",
        "id": 265960921,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640300399
    },
    {
        "content": "<p>If there are no TC resolution problems I propose this way</p>",
        "id": 265961087,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640300492
    },
    {
        "content": "<p>any idea where in mathlib this could be placed?</p>",
        "id": 265961317,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640300687
    },
    {
        "content": "<p>Close to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/char_zero\">docs#char_zero</a>?</p>",
        "id": 265961347,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640300710
    },
    {
        "content": "<p>Actually, this is a very sense-making typeclass that can probably be used in many places where we had previously used <code>char_zero</code>.</p>",
        "id": 265961383,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640300759
    },
    {
        "content": "<p>Typically for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.asc_factorial\">docs#nat.asc_factorial</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pochhammer\">docs#pochhammer</a>...</p>",
        "id": 265961434,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640300792
    },
    {
        "content": "<p><code>char_not_dvd_class</code>?</p>",
        "id": 265961439,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640300807
    },
    {
        "content": "<p>I have never heard of the phrase \"cyclotomic extension\" being used to describe anything other than extensions of number fields and p-adic fields BTW</p>",
        "id": 265961691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640301085
    },
    {
        "content": "<p>To be honest, I have been looking for that typeclass quite a few times already and wondered why we weren't needing it. I guess we actually do!</p>",
        "id": 265962012,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640301474
    },
    {
        "content": "<p>This \"n!=0 in the ground field\" thing comes up a lot in representation theory of finite groups too (you often average some construction in the field over the elements of the group)</p>",
        "id": 265962450,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640301937
    },
    {
        "content": "<p>Time to sleep for me, but it seems we all agree about this new typeclass :)<br>\n<span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I agree about \"cyclotomic extension\" being used only in characteristic zero, but the mathlib mafia forced us to write the most general definition...</p>",
        "id": 265963278,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640302867
    },
    {
        "content": "<p>I'm slightly conflicted about this all now, on the one hand its always nice to get results for free, and it would occasionally be helpful perhaps to reduce cyclotomic rings modulo primes and still have some results.<br>\nBuut I really feel like all these weird facts floating around causes unnecessary difficultly / complication for flt-regular at this point.<br>\nThat said it certainly seems a characteristic not <code>n</code> typeclass is useful, certainly the <code>char_not 2</code> version will be!</p>",
        "id": 265963855,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1640303511
    },
    {
        "content": "<p>I think the correct class should be defined around <code>is_unit n</code>. That's a condition that pops up a lot in practice.. much more than the condition that n is nonzero</p>",
        "id": 265964103,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640303840
    },
    {
        "content": "<p>Isn't that just <code>invertible</code>? This wouldn't work for our use case, as we lifted a couple results through the fraction field, and so we require n ≠ 0 for things in an arbitrary integral domain</p>",
        "id": 265965052,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640304780
    },
    {
        "content": "<p>For rep theory of finite groups <code>invertible</code> is exactly what you need -- it's not just that the order is nonzero but that you can divide by it.</p>",
        "id": 265965371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640305276
    },
    {
        "content": "<p>I began work on the <code>foo</code> typeclass in <a href=\"https://github.com/leanprover-community/mathlib/tree/foo_typeclass\">branch#foo_typeclass</a>... name suggestions, lemma suggestions, and commits not only welcome, but much encouraged ;D</p>",
        "id": 265976783,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640321135
    },
    {
        "content": "<p>the file is currently <code>src/algebra/foo.lean</code></p>",
        "id": 265976831,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640321171
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/116395-maths/topic/Cyclotomic.20fields/near/265976783\">said</a>:</p>\n<blockquote>\n<p>I began work on the <code>foo</code> typeclass in <a href=\"https://github.com/leanprover-community/mathlib/tree/foo_typeclass\">branch#foo_typeclass</a>... name suggestions, lemma suggestions, and commits not only welcome, but much encouraged ;D</p>\n</blockquote>\n<p>Can you open a WIP PR so we can comment there?</p>",
        "id": 265987558,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640335459
    },
    {
        "content": "<p>Concerning <code>n ≠ 0 </code> or invertible, if someone really need <code>invertible</code>they can create another class <code>bar</code>, and we can provide an insance of <code>bar</code> having <code>foo</code> and <code>field</code>. I can be wrong, but I have the impression that, when <code>invertible</code> is needed people are working over a field, so this would be enough.</p>",
        "id": 265988942,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640337361
    },
    {
        "content": "<p>I agree that most of the times, the ground ring is a field.  However, I have sometimes used rings such as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[\\frac{1}{2}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">]</span></span></span></span> to explicitly assume that 2 was invertible, but still work over a Dedekind domain.</p>",
        "id": 265989352,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1640337764
    },
    {
        "content": "<p>The solution of using two typeclasses, one where it is enough to assume that <code>n</code> is non-zero and one where you explicitly invert it, seems good to me, though.</p>",
        "id": 265989396,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1640337814
    },
    {
        "content": "<p>In the specific context of modular curves of given level <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>, it is quite common to work over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mfrac><mn>1</mn><mi>N</mi></mfrac><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[\\frac{1}{N}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">N</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">]</span></span></span></span>.  I find that this is a situation where the two points of view mentioned above (cyclotomic-like stuff and modular/non-modular representation theory) come together.</p>",
        "id": 265989783,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1640338186
    },
    {
        "content": "<p>Having said that, it is probably reasonable to not develop the whole theory in this generality right now!</p>",
        "id": 265989784,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1640338188
    },
    {
        "content": "<p>Indeed we morally already have the class with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> invertible: it is the same as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mi>N</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}[1/N]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord\">1/</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mclose\">]</span></span></span></span>-algebras.</p>",
        "id": 265990374,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640338832
    },
    {
        "content": "<p>But I don't know if this can help</p>",
        "id": 265990379,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640338847
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> It wasn't clear to me from your message above whether you know this, but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/invertible\">docs#invertible</a> already exists. So we don't need \"another class <code>bar</code>\".</p>",
        "id": 265991783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640340479
    },
    {
        "content": "<p>But maybe you meant something else with that <code>bar</code>?</p>",
        "id": 265991831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640340492
    },
    {
        "content": "<p>We need <code>(n : R) ≠ 0)</code>, that is not the same since we also want to work integrally, but this probably gives a good API to generalize, thanks!!</p>",
        "id": 265991877,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640340582
    },
    {
        "content": "<p>Right, but that's already your <code>foo</code> class, right? So I didn't understand what you wanted from the <code>bar</code> class.</p>",
        "id": 265992512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640341286
    },
    {
        "content": "<p>Yes yes, I was talking about <code>bar</code> without knowing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/invertible\">docs#invertible</a> exists</p>",
        "id": 265992576,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640341333
    },
    {
        "content": "<p>Ok, gotcha.</p>",
        "id": 265992697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640341499
    },
    {
        "content": "<p>Having</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">ne.fact_coe</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">hK</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"o\">(((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"o\">(</span><span class=\"n\">function.injective.ne</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">hK.out</span><span class=\"o\">)⟩</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ne.fact_char_zero</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"bp\">+</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fact</span> <span class=\"o\">(((</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">nat.cast_ne_zero.mpr</span> <span class=\"n\">n.pos.ne'</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p><a href=\"https://github.com/leanprover-community/flt-regular/blob/master/src/number_theory/cyclotomic/cyclotomic_units.lean\">here</a> makes the linter unhappy</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> The `fails_quickly` linter reports: -/</span>\n<span class=\"c\">/-</span><span class=\"cm\"> TYPE CLASS SEARCHES TIMED OUT.</span>\n<span class=\"cm\">The following instances are part of a loop, or an excessively long search.</span>\n<span class=\"cm\">It is common that the loop occurs in a different class than the one flagged below,</span>\n<span class=\"cm\">but usually an instance that is part of the loop is also flagged.</span>\n</code></pre></div>\n<p>I tried to debug the error but I don't see where I am creating a loop. Any idea?</p>",
        "id": 266002950,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640353440
    },
    {
        "content": "<p>Might be <code>fails_quickly</code> having too low of a time-out</p>",
        "id": 266003002,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640353466
    },
    {
        "content": "<p>The linter suggest what to do, <a href=\"https://github.com/leanprover-community/flt-regular/runs/4627134460?check_suite_focus=true\">here</a>, but for all the flagged instance I just get a timeout, no errors.</p>",
        "id": 266003101,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640353591
    },
    {
        "content": "<p>I just realized I have no idea how to run the linter locally...is it a scropt somewhere?</p>",
        "id": 266003399,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640353953
    },
    {
        "content": "<p>I know about <code>#lint</code> at the ed of a file, I am talking about the global linter</p>",
        "id": 266003414,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640353972
    },
    {
        "content": "<p>Ah, it's probably <code>lean --run scripts/lint_project.lean</code> or something similar</p>",
        "id": 266003488,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640354074
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/11033\">#11033</a> is the PR; my first run failed pretty badly, I'm going to try take more of a look today</p>",
        "id": 266003549,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640354161
    },
    {
        "content": "<p>Also, what does it mean by \"R is a metavariable\"? I thought I was being clever with my char-zero typeclass</p>",
        "id": 266003603,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640354215
    },
    {
        "content": "<p>It means it can't be inferred from context usually. Try using <code>out_param</code> and summoning <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span></p>",
        "id": 266004034,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640354549
    },
    {
        "content": "<p>Looking at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/invertible\">docs#invertible</a>, it seems that they decided to not have any global instance. Everything is a <code>def</code>, and instances can be activated when needed.</p>",
        "id": 266004237,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640354787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Cyclotomic.20fields/near/266004034\">said</a>:</p>\n<blockquote>\n<p>It means it can't be inferred from context usually. Try using <code>out_param</code> and summoning <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span></p>\n</blockquote>\n<p>Indeed. The rule is that any parameter to the instance must be an <code>[instance parameter]</code> itself, be inferrable from the goal (i.e. appear after the <code>:</code>), or an <code>out_param</code>.</p>",
        "id": 266004376,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640354957
    },
    {
        "content": "<p>However, in this case you can't make <code>S</code> an <code>out_param</code> to <code>foo</code> because it is not uniquely determined by the other parameters to <code>foo</code>.</p>",
        "id": 266004567,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640355158
    },
    {
        "content": "<blockquote>\n<p>Does the argument order matter? I would prefer <code>foo n R</code>, but not sure what TC prefers.</p>\n</blockquote>\n<p>Since <code>n</code> depends on <code>R</code>, the parameters have to stay in that order according to type theory. Although I guess you could use <code>notation `foo` n R := foo_class R n</code>.</p>\n<p>My suggestion would be to define <code>class foo {R : Type*} [has_zero R] (n : R) := (out : n ≠ 0)</code> instead, because then you can write <code>foo (n : R)</code>.</p>",
        "id": 266004800,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640355399
    },
    {
        "content": "<p>I tested in flt-regular the strategy of having lemmas instead of instances, and using <code>local attribute [instance] </code> when needed. It seems to work well.</p>",
        "id": 266006690,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640357273
    },
    {
        "content": "<p>If that's what <code>invertible</code> does, as well, then that seems very reasonable.</p>",
        "id": 266006757,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640357333
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/Cyclotomic.20fields/near/265957185\">said</a>:</p>\n<blockquote>\n<p>After some weeks working on the flt-regular project, we realized that the definition of <code>is_cyclotomic_extension</code> we are using is maybe <em>too</em> general. The definition is basically \"generated by the roots of the <code>n</code>-th cyclotomic polynomial\". You can have a look at <a href=\"https://github.com/leanprover-community/mathlib/pull/10849\">#10849</a> or at the <a href=\"https://github.com/leanprover-community/flt-regular\">full project</a> if you are curious.</p>\n</blockquote>\n<p>Sorry to come after the battle, but why such a definition?</p>\n<p>Compare with the definition of a solvable-by-radicals extension: you ask  that it is generated (inductively) by elements $a$ some positive power of which belong to the base field.  Here, I'd say a cyclotomic extension is generated by elements some (strictly positive) power of which is 1. Cyclotomic of cyclotomic is cyclotomic (so I did not define the stuff inductively). </p>\n<p>It's easy to refine the definition to ask that the exponents belong to a given subset  of $\\mathbf N$.</p>\n<p>If the base is a field and the extension is finitely generated, you can prove that it is generated by a single root of unity (which is primitive of some order).</p>\n<p>If the base is an integrally closed domain, you can prove that its integral closure in a cyclotomic extension of the fraction field is a cyclotomic extension. This amounts to the property that the ring of integers of $\\mathbf Q(\\zeta_n)$ is $\\mathbf Z[\\zeta_n]$ (and some limit arguments in the general case).</p>",
        "id": 266013661,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640365395
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> <a href=\"#narrow/stream/116395-maths/topic/Cyclotomic.20fields/near/266013661\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/Cyclotomic.20fields/near/265957185\">said</a>:</p>\n<blockquote>\n<p>After some weeks working on the flt-regular project, we realized that the definition of <code>is_cyclotomic_extension</code> we are using is maybe <em>too</em> general. The definition is basically \"generated by the roots of the <code>n</code>-th cyclotomic polynomial\". You can have a look at <a href=\"https://github.com/leanprover-community/mathlib/pull/10849\">#10849</a> or at the <a href=\"https://github.com/leanprover-community/flt-regular\">full project</a> if you are curious.</p>\n</blockquote>\n<p>Sorry to come after the battle, but why such a definition?</p>\n<p>Compare with the definition of a solvable-by-radicals extension: you ask  that it is generated (inductively) by elements <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span> some positive power of which belong to the base field.  Here, I'd say a cyclotomic extension is generated by elements some (strictly positive) power of which is 1. Cyclotomic of cyclotomic is cyclotomic (so I did not define the stuff inductively). </p>\n<p>It's easy to refine the definition to ask that the exponents belong to a given subset  of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6861em;\"></span><span class=\"mord mathbf\">N</span></span></span></span>.</p>\n<p>If the base is a field and the extension is finitely generated, you can prove that it is generated by a single root of unity (which is primitive of some order).</p>\n<p>If the base is an integrally closed domain, you can prove that its integral closure in a cyclotomic extension of the fraction field is a cyclotomic extension. This amounts to the property that the ring of integers of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Q</mi><mo stretchy=\"false\">(</mo><msub><mi>ζ</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf Q(\\zeta_n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbf\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Z</mi><mo stretchy=\"false\">[</mo><msub><mi>ζ</mi><mi>n</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf Z[\\zeta_n]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbf\">Z</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07378em;\">ζ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.0738em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> (and some limit arguments in the general case).</p>\n</blockquote>\n<p>sorry just copying this to make it easier to read. Zulip needs double $s for LaTeX, for some reason</p>",
        "id": 266019428,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640373215
    },
    {
        "content": "<p>I'm confused how you'd want to state this that's fundamentally different to our definition; our definition is a) we have all nth roots for n in <code>S : set pnat</code>, and b) <code>algebra.adjoin K {these nth roots} = \\top</code>.</p>",
        "id": 266019842,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640373781
    },
    {
        "content": "<p>I think Antoine wants to avoid mentioning <code>n</code> in the type. <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> do I understand that correctly?<br>\nYou want something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_cyclotomic</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">subalgebra.span</span> <span class=\"n\">A</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"bp\">∧</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">^</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 266022543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640377639
    },
    {
        "content": "<p>This definition would be different in that it would allow for cyclotomic extensions of infinite degree.</p>",
        "id": 266025278,
        "sender_full_name": "Will Sawin",
        "timestamp": 1640381754
    },
    {
        "content": "<p>The definition proposed in <a href=\"https://github.com/leanprover-community/mathlib/pull/10849\">#10849</a> allows for infinite extensions as well.</p>",
        "id": 266025565,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640382180
    },
    {
        "content": "<p>But to build on Johan's def above, you can just say that the algebra is generated by the set of roots of unity contained in the algebra. No set needed.</p>",
        "id": 266026036,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640382930
    },
    {
        "content": "<p>Exactly. And probably something like <code>is_elementarily_cyclotomic</code> where the set <code>s</code> is replaced by a single element <code>b: B</code>.</p>",
        "id": 266026312,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640383257
    },
    {
        "content": "<p>One argument to have a set as a parameter is to obtain some sort of adjunction between the lattice of subsets of Nat and the lattice of cyclotomic extensions. But it seems this just complicates things for the FLT project.</p>",
        "id": 266026475,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640383494
    },
    {
        "content": "<p>You have to be careful here because cyclotomic extensions are only unique up to non-unique isomorphism, so it's not clear to me that they even form a partial order -- there is some automorphism group complicating the picture in my head, at least</p>",
        "id": 266026542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640383589
    },
    {
        "content": "<p>My second lattice should have been <code>category</code>, sorry <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 266026557,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640383617
    },
    {
        "content": "<p>There's no real complication for the FLT - if we wanted just to prove FLT, we could specialise every result to Q and all of our issues vanish. But we are trying to prove every result at a reasonable level of generality</p>",
        "id": 266026577,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1640383652
    },
    {
        "content": "<p>If we're going for <code>is_cyclotomic_extension</code>, meaning <code>\\exists S : set nat, is_S_cyclotomic</code> as a predicate on K-fields or whatever then yeah this looks to me like a category</p>",
        "id": 266026628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640383685
    },
    {
        "content": "<p>You don't even need to restrict the category of algebras. Given a set <code>S</code>, associate the distinguished cyclotomic extension associated to S, constructed in some way. Given an algebra B, construct the set of all n such that the nth cyclotomic poly splits on B. These should be adjoint functors, I think.</p>",
        "id": 266026745,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640383875
    },
    {
        "content": "<p>Is it so clear that there is such a “distinguished” cyclotomic extension associated to a set <code>S</code> ? I am not sure. Even if <code>S = {n}</code>, the only canonical stuff would be $R[T]/(T^n-1)$, but you could also consider $R[T]/(\\Phi_n)$,  or $R[T]/(P)$, for some factor of $T^n-1$, even not necessarily irreducible. If you fix a universal algebra in which everything is supposed to live (an algebraic closure), then OK.</p>",
        "id": 266027684,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640385353
    },
    {
        "content": "<p>You're right, \"distinguished\" was not the right word. One just has to come up with some construction (e.g. work inside a chosen algebraically closed extension)</p>",
        "id": 266028157,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640386037
    },
    {
        "content": "<p>This is all exactly the same as localisation. There's no distinguished <code>localization R S</code> but there is <code>is_localization R S A</code> if <code>A</code> is an <code>R</code>-algebra.</p>",
        "id": 266028202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640386084
    },
    {
        "content": "<p>similarly for <code>algebraic_closure</code> and <code>is_algebraic_closure</code></p>",
        "id": 266028230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640386119
    },
    {
        "content": "<p>(the latter apparently doesn't exist)</p>",
        "id": 266028249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640386145
    },
    {
        "content": "<p>I think it does? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_algebraic_closure\">docs#is_algebraic_closure</a></p>",
        "id": 266028285,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1640386196
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_alg_closure\">docs#is_alg_closure</a></p>",
        "id": 266028343,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640386218
    },
    {
        "content": "<p>If you fixed an algebraic closure and let all your fields be subfields of that, it would be analogous to the trick they use in the odd order Coq proof where all their groups are subgroups of a big group, i.e. all terms not types</p>",
        "id": 266028356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640386246
    },
    {
        "content": "<p>So there is a relative theory one can define (<code>cyclotomic S : subalgebra K L</code>) and an absolute theory defined with models (<code>cyclotomic' S K : Type</code>) and also an absolute theory defined by the universal property (<code>is_cyclotomic S K E</code> with <code>[algebra K E]</code>)</p>",
        "id": 266028459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640386397
    },
    {
        "content": "<p>Thanks for all the comments.<br>\nTo be honest I don't think it is worth to fundamentally change the current definition unless it's clear that things will really improve. Our current definition seems to work pretty well, for example we have a sorry free computation of the discriminant in of <em>a</em> <code>p</code>-th cyclotomic extension of the rationals. The only problem so far is that we have this annoying assumption <code>((n : ℕ) : _) ≠ 0</code> lying around. It is just an annoyance, the proofs work. I proposed to change the definition just to include this condition, but the new idea using a class seems very promising.</p>",
        "id": 266032145,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640390944
    },
    {
        "content": "<p>Just a couple of comments: </p>\n<ul>\n<li><code>is_cyclotomic_extension</code> is definitely needed, <code>cyclotomic_extension</code> is not enough (we have both, and all the theorems use <code>is_cyclotomic_extension</code>).</li>\n<li>I have the impression that forgetting the <code>n</code> (or <code>S</code>)  complicates things a little, if we want to say that the discriminant of what we currently call <code>is_cyclotomic_extension p Q L</code> is <code>p^...</code> we have to say something about, for example, the degree of a cyclotomic extension of <code>Q</code> and it seems unnatural.</li>\n</ul>",
        "id": 266032296,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640391187
    },
    {
        "content": "<p>At the end of the day what we want is that our definition (assuming it is the obvious one for <code>Q</code> and for finite fields in the separable case) is flexible enough to allow us to do some serious math, and the only way to find out is to test it.  The computation of the discriminant is currently very similar to the pen and paper proof (except for some combinatoric nightmares unrelated to cyclotomic extensions) and I take this as a very good sign.</p>",
        "id": 266032682,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640391802
    },
    {
        "content": "<p>Having said this, merry Christmas to everybody !</p>",
        "id": 266032691,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1640391834
    },
    {
        "content": "<p>I think that one of the benefits of the <code>∃ s, ...</code> predicate is that the type becomes simpler. So Lean cannot get confused about different <code>n</code> or <code>s</code> working for the same field extension, because all this data is now hidden in a Prop.<br>\nBut like Riccardo says, this comes at a cost: you now have to work harder to get access to that data.</p>",
        "id": 266043206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640410540
    }
]