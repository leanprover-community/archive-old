[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.linear_ordered_comm_group_with_zero</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_pos''''</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_monoid_with_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">admit</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Is this true?</p>",
        "id": 226788241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613642859
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">∏</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 226788904,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613643188
    },
    {
        "content": "<p><del>Yes it's true</del> update: erm...</p>",
        "id": 226788923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613643201
    },
    {
        "content": "<p>I know I can prove the second example by passing to <code>int</code> or <code>pnat</code>, but that feels like a hack around a hole in the library.</p>",
        "id": 226788948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613643218
    },
    {
        "content": "<p>I don't understant the contortion <code>linear_ordered_comm_monoid_with_zero</code> well enough to know whether my set of examples covers its behaviour...</p>",
        "id": 226789113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613643283
    },
    {
        "content": "<p>I've got it down to a,b!=0 implies ab!=0 and this is surely true for any linearly ordered structure</p>",
        "id": 226789183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613643314
    },
    {
        "content": "<p>Right, I got that far as well...</p>",
        "id": 226789315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613643375
    },
    {
        "content": "<p>I am not sure that there is a proof in Lean that a linear order has no non-trivial zero divisors...  seems like a job for the new notion of <code>regular</code>!  <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 226789377,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613643415
    },
    {
        "content": "<p>I see no reference to a linear order in the instances of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/no_zero_divisors\">docs#no_zero_divisors</a></p>",
        "id": 226789391,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1613643422
    },
    {
        "content": "<p>So how about {0,eps,1} with eps^2=0 and all other multiplications the obvious ones?</p>",
        "id": 226790054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613643772
    },
    {
        "content": "<p>:-/</p>",
        "id": 226790068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613643782
    },
    {
        "content": "<p>Should this go in the <code>counterexamples</code> folder?  <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 226790161,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613643840
    },
    {
        "content": "<p>Is it definitely a counterexample?</p>",
        "id": 226790271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613643894
    },
    {
        "content": "<p>I need to prepare my class :-(</p>",
        "id": 226790284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613643901
    },
    {
        "content": "<p>I am not sure: of course, the weird thing is eps^2 not being positive, but I do not know if this is precluded by the axioms of linear...</p>",
        "id": 226790490,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613643998
    },
    {
        "content": "<p>It sounds right though. I've even seen this example before. The valuation on Z_p takes values in [0,1], and now if you want to quotient and get some kind of valuation on Z/p^nZ then you need to quotient the target too, and get {0} union (1/p^n,1], and this comes up in tilting and is precisely the reason I wanted to switch from linear_ordered_comm_group_with_zero as the target of a valuation to linear_ordered_comm_monoid_with_zero.</p>",
        "id": 226790520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613644014
    },
    {
        "content": "<p>Update on this: I think I did all the groundwork for making that change (e.g. I made the class!) but I never did the switch for the target of a valuation IIRC.</p>",
        "id": 226790627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613644066
    },
    {
        "content": "<p>going through the fields of <code>linear_ordered_comm_monoid_with_zero</code> one by one, it looks like it fits. I did not code anything to verify though.</p>",
        "id": 226790653,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1613644079
    },
    {
        "content": "<p>If it doesn't fit then I need to completely re-evaluate the \"change group to monoid\" idea for valuations, because my understanding of what is going on is wrong. I was completely wrong when I claimed 0&lt;a -&gt; 0&lt;b -&gt; 0&lt;ab was true, I even knew this counterexample.</p>",
        "id": 226790844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613644153
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ordered_monoid</span>\n\n<span class=\"kd\">@[derive [decidable_eq]</span><span class=\"o\">]</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span>\n<span class=\"bp\">|</span> <span class=\"n\">eps</span>\n<span class=\"bp\">|</span> <span class=\"n\">one</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">zero</span><span class=\"o\">⟩</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">one</span><span class=\"o\">⟩</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ε</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">eps</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">aux1</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"mi\">2</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">boom</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rintro</span> <span class=\"o\">⟨⟩}</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">aux1_inj</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">aux1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">boom</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">linear_order</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"n\">linear_order.lift</span> <span class=\"n\">aux1</span> <span class=\"bp\">$</span> <span class=\"n\">aux1_inj</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"n\">ε</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">ε</span>\n<span class=\"bp\">|</span> <span class=\"n\">ε</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">boom</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">boom</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">boom</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">boom</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">linear_ordered_comm_monoid_with_zero</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_mul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">boom</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_zero</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">boom</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_le_mul_left</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">⟨⟩</span> <span class=\"n\">h</span> <span class=\"o\">⟨⟩</span><span class=\"bp\">;</span> <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n  <span class=\"n\">lt_of_mul_lt_mul_left</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">⟨⟩</span> <span class=\"o\">⟨⟩</span><span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span> <span class=\"o\">},</span>\n  <span class=\"n\">zero_le_one</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">foo.linear_order</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span> <span class=\"n\">foo.comm_monoid</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n</code></pre></div>",
        "id": 226794342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613646143
    },
    {
        "content": "<p>Thanks for the counterexample Kevin!</p>",
        "id": 226794442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613646214
    },
    {
        "content": "<p>Good to know that my global understanding was correct and my local error was just that!</p>",
        "id": 226794537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613646258
    },
    {
        "content": "<p>PR it to the counterexamples directory!</p>",
        "id": 226794644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613646322
    },
    {
        "content": "<p>That directory doesn't exist yet, right?</p>",
        "id": 226795124,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613646616
    },
    {
        "content": "<p>it does in the branch <code>counterexamples</code></p>",
        "id": 226795176,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613646656
    },
    {
        "content": "<p>but i never created a PR...</p>",
        "id": 226795186,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613646664
    },
    {
        "content": "<p>because I am not sure that what I wrote there would actually be acceptable for mathlib, even in the counterexamples directory!</p>",
        "id": 226795229,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613646692
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/counterexamples\">https://github.com/leanprover-community/mathlib/tree/counterexamples</a></p>",
        "id": 226795300,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613646729
    },
    {
        "content": "<p>I dream of a linter which, for any ordered pair of distinct prop-valued classes, checks that either there's an instance showing that one implies the other, or a counterexample showing that it doesn't :-)</p>",
        "id": 226795368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613646790
    },
    {
        "content": "<p>You can golf your multiplication as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">mul1</span> <span class=\"o\">:</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span> <span class=\"bp\">→</span> <span class=\"n\">foo</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">muleq</span> <span class=\"o\">:</span> <span class=\"n\">mul</span> <span class=\"bp\">=</span> <span class=\"n\">mul1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext1</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ext1</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span><span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"bp\">;</span>\n  <span class=\"n\">boom</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(This is simply me trying to learn how to use the equation compiler.)</p>",
        "id": 226795621,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613646947
    },
    {
        "content": "<p>aah, good catch (-;</p>",
        "id": 226795866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613647094
    },
    {
        "content": "<p>Kevin, your linter seems great!  I hope that it will exist one day!</p>\n<p>The <code>counterexamples</code> folder is a home-remedy for it...</p>",
        "id": 226797278,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613648028
    },
    {
        "content": "<p>Johan, given that you wrote down a fully formalized proof of the example, it will be very little work to add it to <code>counterexamples</code>: there is a non-existent review process for that branch!</p>\n<p>If you want, I can push it, but feel free to do so yourself, if you prefer!</p>",
        "id": 226822264,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613660334
    },
    {
        "content": "<p>Ooh, feel free to add it</p>",
        "id": 226822428,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613660394
    },
    {
        "content": "<p>We should have a journal \"Counterexamples of Mathematics\" with a nonexistent review process. Sounds like an awesome place to publish <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 226822613,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1613660445
    },
    {
        "content": "<p>Ahaha</p>\n<p>In the meanwhile, the CI is working on it: I guess this counts as one of the most thorough refereeing processes, after actually getting into mathlib!</p>",
        "id": 226824695,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613661184
    },
    {
        "content": "<p>Johan, the referee report is back: your proof is correct!</p>",
        "id": 226862211,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613674957
    }
]