[
    {
        "content": "<p>My step function:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">step_fun</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ξ</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</pre></div>\n\n\n<p>Relevant lemmas: <code>continuous_iff_continuous_at</code> and <code>tendsto_nhds_nhds</code>. Using these I can change from the neighbourhoods/filters language into more typical epsilon/delta langauge.  The lemmas are if-and-only-if results, so useful for deriving the negative (discontinuity) result that I'm aiming for.</p>\n<p>Now, clearly you can choose points as close to <code>ξ</code> (<em>from the right</em>) as you wish, and their values will always be distance <code>1</code> away from <code>f ξ</code>, which is <code>1</code>.</p>\n<p>For example, setting <code>ε</code> to <code>1/2</code>, <em>there is no such</em> <code>δ&gt;0</code> with the property that <code>∀ {x : ℝ}, dist x ξ &lt; δ → dist (step_fun x) (step_fun ξ) &lt; ε)</code>. But how to get this fact across to Lean?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">exponential</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">exponential</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">constants</span> <span class=\"o\">(</span><span class=\"n\">ξ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">step_fun</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">ξ</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">discont_at_step</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">continuous_at</span> <span class=\"n\">step_fun</span> <span class=\"n\">ξ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">continuous_at</span><span class=\"o\">,</span>\n<span class=\"c1\">-- our goal:</span>\n<span class=\"c1\">-- ⊢ ¬filter.tendsto step_fun (nhds ξ) (nhds (step_fun ξ))</span>\n<span class=\"n\">rw</span> <span class=\"n\">metric</span><span class=\"bp\">.</span><span class=\"n\">tendsto_nhds_nhds</span><span class=\"o\">,</span>\n<span class=\"c1\">-- our goal:</span>\n<span class=\"c1\">-- ⊢ ¬∀ (ε : ℝ),</span>\n<span class=\"c1\">--      ε &gt; 0 → (∃ (δ : ℝ) (H : δ &gt; 0),</span>\n<span class=\"c1\">--                ∀ {x : ℝ}, dist x ξ &lt; δ → dist (step_fun x)</span>\n<span class=\"c1\">--                                               (step_fun ξ) &lt; ε)</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163221549,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555098987
    },
    {
        "content": "<p>You might need more recent mathlib for this, but Patrick's <code>push_neg</code> tactic will help. Try <code>import tactic.push_neg</code></p>",
        "id": 163221868,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555099220
    },
    {
        "content": "<p>Note the use of <code>push_neg</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">discont_at_step</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">continuous_at</span> <span class=\"n\">step_fun</span> <span class=\"n\">ξ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">continuous_at</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- our goal:</span>\n  <span class=\"c1\">-- ⊢ ¬filter.tendsto step_fun (nhds ξ) (nhds (step_fun ξ))</span>\n  <span class=\"n\">rw</span> <span class=\"n\">metric</span><span class=\"bp\">.</span><span class=\"n\">tendsto_nhds_nhds</span><span class=\"o\">,</span>\n  <span class=\"n\">push_neg</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goal</span>\n  <span class=\"c1\">-- ∃ (ε : ℝ), ε &gt; 0 ∧ ∀ (δ : ℝ), δ &gt; 0 → (∃ {x : ℝ},</span>\n  <span class=\"c1\">-- dist x ξ &lt; δ ∧ ε ≤ dist (step_fun x) (step_fun ξ))</span>\n  <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">assume</span> <span class=\"n\">δ</span> <span class=\"n\">δ0</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">ξ</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">dist_eq</span><span class=\"o\">,</span> <span class=\"n\">abs_of_nonneg</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">δ0</span><span class=\"o\">)),</span> <span class=\"n\">half_lt_self</span> <span class=\"n\">δ0</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">ξ</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">ξ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">not_le_of_gt</span> <span class=\"o\">((</span><span class=\"n\">lt_add_iff_pos_right</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">half_pos</span> <span class=\"n\">δ0</span><span class=\"o\">)),</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">dist_eq</span><span class=\"o\">,</span> <span class=\"n\">step_fun</span><span class=\"o\">,</span> <span class=\"n\">le_refl</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">],</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163222444,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1555099643
    },
    {
        "content": "<p>Thanks Chris! I saw <code>push_neg</code> mentioned in the commits.  I'll have to spend some time grokking the rest of the proof but it looks quite comprehensible. Cheers.</p>",
        "id": 163224283,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1555101181
    },
    {
        "content": "<p>Chris is showing you the noble art of knowing all elementary inequality lemmas of mathlib, but there dark side is much quicker, you can replace the end of the proof by:</p>\n<div class=\"codehilite\"><pre><span></span>  { rw [real.dist_eq, abs_of_nonneg] ; linarith },\n  { have I1 : ¬ ξ + δ / 2 ≤ ξ, by linarith,\n    have I2 : ξ ≤ ξ, by linarith,\n    have I3 : (2: ℝ)⁻¹ ≤ 1, by norm_num,\n    simp [real.dist_eq, step_fun, I1, I2, I3] }\n</pre></div>\n\n\n<p>The second half is a bit disappointing, I guess one could have find a better tactic here. Scott?</p>",
        "id": 163226522,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555102852
    },
    {
        "content": "<p>Also, Joe, what is the point of having xi declared as a constant?</p>",
        "id": 163226646,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1555102956
    }
]