[
    {
        "content": "<p>Could someone tell me about the plans for <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/bounded_continuous_function.html\" title=\"https://leanprover-community.github.io/mathlib_docs/topology/bounded_continuous_function.html\">bounded_continuous_function</a> ?  The current file, written by <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>,  proves the Arzela-Ascoli theorem (!) and puts a normed group structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>Œ±</mi><mo separator=\"true\">,</mo><mi>Œ≤</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(\\alpha, \\beta)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">Œ±</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">Œ≤</span><span class=\"mclose\">)</span></span></span></span>, the set of bounded continuous functions from a space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Œ±</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">Œ±</span></span></span></span> into a normed group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Œ≤</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05278em;\">Œ≤</span></span></span></span>.  But it stops short of constructing the Banach space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>Œ±</mi><mo separator=\"true\">,</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(\\alpha, E)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">Œ±</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span>, i.e. putting a normed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">k</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{k}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">k</span></span></span></span></span>-space structure on the set of bounded continuous functions into a normed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">k</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{k}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">k</span></span></span></span></span>-space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span></span></span></span>.<br>\nIs this just an oversight?  Or is it because there are subtle architecture issues that have not yet been sorted out?  (i.e., it would be more efficient to do several more similar things at the same time -- put a normed algebra structure on the set of bounded continuous functions into a normed algebra; put a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>Œ±</mi><mo separator=\"true\">,</mo><mi mathvariant=\"double-struck\">k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(\\alpha, \\mathbb{k})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">Œ±</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">k</span></span><span class=\"mclose\">)</span></span></span></span>-module structure on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo stretchy=\"false\">(</mo><mi>Œ±</mi><mo separator=\"true\">,</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">C(\\alpha, E)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">Œ±</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span>, ....)<br>\nI actually implemented</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"err\">ùïú</span> <span class=\"o\">(</span><span class=\"n\">bounded_continuous_function</span> <span class=\"n\">Œ±</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>as an exercise this afternoon, so I know it is not too hard :)</p>",
        "id": 197028587,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589079340
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I have no idea... why don't you PR your \"exercise\" <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 197030909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589082757
    },
    {
        "content": "<p>My guess: <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> formalized what he needed for some other reason.</p>",
        "id": 197031291,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589083478
    },
    {
        "content": "<p>Yury is right. I formalized this because I needed Arzela-Ascoli for a proof in the definition of the Gromov-Hausdorff distance. At that time (a long time ago), maybe there wasn't even the notion of a normed <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">k</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{k}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">k</span></span></span></span></span>-space structure in mathlib!</p>",
        "id": 197039592,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589096030
    },
    {
        "content": "<p>Normed spaces were there long before you S√©bastien.</p>",
        "id": 197041071,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589098477
    },
    {
        "content": "<p>You're right. Operator norm was not there yet, I think.</p>",
        "id": 197042513,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589100134
    },
    {
        "content": "<p>It doesn't change anything to this conversation anyway. We try to be systematic, but we also need to go forward, so there tons of loose threads everywhere in mathlib.</p>",
        "id": 197042530,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589100190
    },
    {
        "content": "<p>In short <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> it would be a welcome PR if you wanted to add it. Ask if you need any help. Do you have an account at github?</p>",
        "id": 197056685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589118759
    },
    {
        "content": "<p>OK great, I'll do it!  I'll make a github account today.</p>",
        "id": 197060488,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589123554
    },
    {
        "content": "<p>It would be very convenient if you could also use your real name there.</p>",
        "id": 197060556,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589123649
    },
    {
        "content": "<p>It's very inconvenient to struggle to map Zulip names to GitHub names</p>",
        "id": 197060563,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1589123674
    },
    {
        "content": "<p>The workflow is to clone mathlib from the leanprover-community GitHub with eg leanproject, create a new branch off master, make your changes and then push directly to the leanprover-community GitHub</p>",
        "id": 197060652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589123774
    },
    {
        "content": "<p><a href=\"https://help.github.com/en/github/getting-started-with-github/fork-a-repo\" title=\"https://help.github.com/en/github/getting-started-with-github/fork-a-repo\">https://help.github.com/en/github/getting-started-with-github/fork-a-repo</a> is quite helpful</p>",
        "id": 197060835,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1589123946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Bounded.20continuous.20functions/near/197060652\" title=\"#narrow/stream/116395-maths/topic/Bounded.20continuous.20functions/near/197060652\">said</a>:</p>\n<blockquote>\n<p>The workflow is to clone mathlib from the leanprover-community GitHub with eg leanproject, create a new branch off master, make your changes and then push directly to the leanprover-community GitHub</p>\n</blockquote>\n<p>This only works when one of the maintainers has given you the permission to push to the leanprover-community repo.<br>\nBut to do that, they need to know a github username.</p>",
        "id": 197060982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589124102
    },
    {
        "content": "<p>Here is the new branch:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/tree/bounded-continuous-functions\">https://github.com/leanprover-community/mathlib/tree/bounded-continuous-functions</a><br>\nComments on the code would be welcome, I know it is a real mess.</p>",
        "id": 197170666,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589214476
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> At first glance this is already looking very good! Some minor stylistic issues, but nothing big, I think.</p>",
        "id": 197174403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589216197
    },
    {
        "content": "<p>I suggest that you open a PR, and then we can give line by line comments.</p>",
        "id": 197174513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589216265
    },
    {
        "content": "<p>Here is a small start:</p>\n<ul>\n<li>I think in mathlib we don't put spaces in the norm operator. So <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">‚à•</mi><mi>x</mi><mi mathvariant=\"normal\">‚à•</mi></mrow><annotation encoding=\"application/x-tex\">\\|x\\|</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">‚à•</span><span class=\"mord mathdefault\">x</span><span class=\"mord\">‚à•</span></span></span></span> and not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">‚à•</mi><mtext>¬†</mtext><mi>x</mi><mtext>¬†</mtext><mi mathvariant=\"normal\">‚à•</mi></mrow><annotation encoding=\"application/x-tex\">\\|\\ x\\ \\|</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">‚à•</span><span class=\"mspace\">¬†</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\">¬†</span><span class=\"mord\">‚à•</span></span></span></span>.</li>\n</ul>",
        "id": 197174673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589216336
    },
    {
        "content": "<ul>\n<li>Idem dito for: <code>‚ü® ... ‚ü©</code></li>\n</ul>",
        "id": 197174759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589216381
    },
    {
        "content": "<p>And then, when you build an instance, and it's not a one-liner, the preferred style is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"n\">some_class</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">field_name</span> <span class=\"o\">:=</span> <span class=\"n\">value</span><span class=\"o\">,</span>\n  <span class=\"n\">other_field</span> <span class=\"o\">:=</span> <span class=\"n\">quux</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>instead of the anonymous <code>‚ü® ... ‚ü©</code></p>",
        "id": 197174929,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589216460
    },
    {
        "content": "<p>Lint complains about <code>‚â•</code> in <code>norm_eq</code>. We try to use <code>‚â§</code> everywhere because it makes the life of <code>rw</code> and <code>simp</code> easier.</p>",
        "id": 197180255,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589219000
    },
    {
        "content": "<p>Interesting, thank you!  I will make these changes.  Let me know if you think of others.</p>",
        "id": 197180512,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589219114
    },
    {
        "content": "<p>It will be easier to comment once you'll make PR.</p>",
        "id": 197180661,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589219170
    },
    {
        "content": "<p>FWIW, the <code>‚â•</code> comes as an adaptation of Sebastien's</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- The uniform distance between two bounded continuous functions -/</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_dist</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span><span class=\"err\">·µá</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚ü®Œª</span><span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">Inf</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"bp\">|</span> <span class=\"n\">C</span> <span class=\"bp\">‚â•</span> <span class=\"mi\">0</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">C</span><span class=\"o\">}</span><span class=\"bp\">‚ü©</span>\n</code></pre></div>\n\n\n<p>Is this also non-standard style, or is there a difference between the two usages?</p>",
        "id": 197180933,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589219298
    },
    {
        "content": "<p>I think that we should change this too. <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> ?</p>",
        "id": 197181019,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589219357
    },
    {
        "content": "<p>The main exception for this rule is <code>‚àÄ Œµ &gt; 0</code> because <code>‚àÄ Œµ, 0 &lt; Œµ ‚Üí</code> looks worse.</p>",
        "id": 197181071,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589219393
    },
    {
        "content": "<p>Yes, that's clearly a newcomer's mistake, that should be fixed :)</p>",
        "id": 197181577,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589219642
    },
    {
        "content": "<p>PR title conventions:  should this be \"feat(topology/bounded_continuous_functions): * * * * *\" ?</p>",
        "id": 197185177,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589221458
    },
    {
        "content": "<p>and then VS Code will complain that you've gone over your 50 characters before you've even begun to summarise what you did in about 5 words :-/</p>",
        "id": 197185316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589221543
    },
    {
        "content": "<p>OK, done.<br>\n<a href=\"https://github.com/leanprover-community/mathlib/pull/2660\">https://github.com/leanprover-community/mathlib/pull/2660</a></p>",
        "id": 197185910,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589221893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Bounded.20continuous.20functions/near/197174929\">said</a>:</p>\n<blockquote>\n<p>And then, when you build an instance, and it's not a one-liner, the preferred style is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"n\">some_class</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">field_name</span> <span class=\"o\">:=</span> <span class=\"n\">value</span><span class=\"o\">,</span>\n  <span class=\"n\">other_field</span> <span class=\"o\">:=</span> <span class=\"n\">quux</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>instead of the anonymous <code>‚ü® ... ‚ü©</code></p>\n</blockquote>\n<p>I ran into difficulties fixing this at line 457 and following, where I have a multi-line <code>‚ü® ... ‚ü©</code> constructor for a bounded continuous function:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">‚ü®Œª</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"err\">‚Ä¢</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">continuous</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"n\">continuous_const</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"k\">with</span> <span class=\"n\">C</span> <span class=\"n\">hbound</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"err\">‚à•</span><span class=\"n\">c</span><span class=\"err\">‚à•</span> <span class=\"bp\">*</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hnneg</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">‚â§</span> <span class=\"err\">‚à•</span><span class=\"n\">c</span><span class=\"err\">‚à•</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">norm_nonneg</span> <span class=\"n\">c</span> <span class=\"o\">},</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>I could not discover what the field names were for bounded continuous functions -- here is their definition:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- The type of bounded continuous functions from a topological space to a metric space -/</span>\n<span class=\"n\">def</span> <span class=\"n\">bounded_continuous_function</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">//</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àÉ</span><span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">C</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 197186772,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1589222354
    },
    {
        "content": "<p>Yes, I did everything wrong at the time. This should be a structure instead of a subtype.</p>",
        "id": 197186991,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1589222461
    },
    {
        "content": "<p>But probably this refactor could wait till another PR.</p>",
        "id": 197187592,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589222762
    }
]