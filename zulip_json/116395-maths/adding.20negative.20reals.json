[
    {
        "content": "<p>After the successes with <a href=\"#narrow/stream/116395-maths/topic/adding.20positive.20reals\" title=\"#narrow/stream/116395-maths/topic/adding.20positive.20reals\">adding positive reals</a> I thought I would try negative reals.  But I'm now running into trouble.  It was all looking nice up until the end.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">negreal</span>\n<span class=\"n\">def</span> <span class=\"n\">negreal</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">//</span> <span class=\"n\">r</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">ℝ</span><span class=\"err\">₋</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">negreal</span>\n<span class=\"kn\">constants</span> <span class=\"n\">negc</span> <span class=\"n\">negd</span> <span class=\"o\">:</span> <span class=\"n\">negreal</span>\n\n<span class=\"c1\">-- comparison with posreal: just supply `add_neg` instead of `add_pos`</span>\n<span class=\"kn\">instance</span> <span class=\"n\">negreal</span><span class=\"bp\">.</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">negreal</span> <span class=\"o\">:=</span>\n <span class=\"bp\">⟨λ</span> <span class=\"n\">q</span> <span class=\"n\">r</span><span class=\"o\">,</span><span class=\"bp\">⟨</span><span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">+</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span> <span class=\"n\">add_neg</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">property</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">property</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"c1\">-- We will use this fact in the lemma below</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">zero_lt_one</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">neg_one_lt_zero</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">neg_lt_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>   <span class=\"c1\">-- -a &lt; 0 ↔ 0 &lt; a</span>\n<span class=\"n\">exact</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">negreal</span><span class=\"bp\">.</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">negreal</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">neg_one_lt_zero</span><span class=\"bp\">⟩⟩</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">negreal</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"err\">₋</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I get:</p>\n<blockquote>\n<p>failed to synthesize type class instance for<br>\n⊢ has_neg ℝ₋</p>\n</blockquote>\n<p>But <code>has_neg : Type u_1 → Type u_1</code> and the usual <code>-</code> would in fact kick me from <code>negreal</code> to <code>posreal</code>.</p>",
        "id": 157039274,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548694376
    },
    {
        "content": "<p>I am not sure that <code>has_one</code> was designed to represent numbers which we would usually call <code>-1</code>.</p>",
        "id": 157039319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548694433
    },
    {
        "content": "<p>You have used <code>has_one</code>, so now Lean knows what you mean by <code>1:R-</code></p>",
        "id": 157039392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548694500
    },
    {
        "content": "<p>(you mean -1)</p>",
        "id": 157039406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548694507
    },
    {
        "content": "<p>but it doesn't know what you mean by <code>-x</code> if <code>x</code> is a <code>negreal</code></p>",
        "id": 157039418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548694531
    },
    {
        "content": "<p>hence the error</p>",
        "id": 157039422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548694535
    },
    {
        "content": "<p>yeah.</p>\n<p>What's interesting (resp., annoying) is that negreal is somehow just a copy of posreal with a different paint job.</p>",
        "id": 157039518,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548694588
    },
    {
        "content": "<p>negreal is exactly what you've defined it to be.</p>",
        "id": 157039535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548694607
    },
    {
        "content": "<p>It's not _equal_ to posreal.</p>",
        "id": 157039554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548694624
    },
    {
        "content": "<p>It does biject with posreal, but then again the naturals biject with the integers.</p>",
        "id": 157039566,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548694637
    },
    {
        "content": "<p>As an exercise, you should import <code>data.equiv.basic</code> and try and construct a term of type <code>equiv posreal negreal</code>. There's your paint job.</p>",
        "id": 157039651,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548694688
    },
    {
        "content": "<p>cool!  Will look. <span aria-label=\"painting\" class=\"emoji emoji-1f3a8\" role=\"img\" title=\"painting\">:painting:</span></p>",
        "id": 157039664,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1548694713
    }
]