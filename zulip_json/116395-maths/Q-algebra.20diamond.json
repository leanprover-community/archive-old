[
    {
        "content": "<p>Currently we have two non-defeq instances for <code>algbera ℚ ℚ</code>: one is based on the fact <code>ℚ = ℚ</code>, and the other is based on the fact <code>[division_ring ℚ] [char_zero ℚ]</code>.</p>",
        "id": 255948809,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633264738
    },
    {
        "content": "<p>I suggest the following solution (motivated by <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> 's refactor of <code>nsmul</code>/<code>gsmul</code>):</p>\n<ol>\n<li>Move the definition of <code>rat</code> to a separate file that does not depend on <code>division_ring</code>.</li>\n<li>Add the following fields to the definition of <code>division_ring k</code>:</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">of_rat</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">gsmul</span> <span class=\"n\">r.num</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">nsmul</span> <span class=\"n\">r.denom</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">of_rat_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">of_rat</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">gsmul</span> <span class=\"n\">r.num</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">nsmul</span> <span class=\"n\">r.denom</span> <span class=\"mi\">1</span> <span class=\"bp\">.</span> <span class=\"n\">try_refl_tac</span><span class=\"o\">)</span>\n</code></pre></div>\n<ol start=\"3\">\n<li>Make sure that <code>ℚ</code> has <code>of_rat = id</code>.</li>\n<li>Use <code>of_rat</code> in the definitions of <code>rat.cast</code> and <code>rat.algebra_rat</code>.</li>\n</ol>",
        "id": 255949018,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633264961
    },
    {
        "content": "<p>P.S.: To make things worse (unless we fix the diamond), I'm going to add an instance for <code>[algebra ℝ A] → [algebra ℚ A]</code>.</p>",
        "id": 255949112,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633265054
    },
    {
        "content": "<p>What about division rings that aren't char_zero?</p>",
        "id": 255953397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633269555
    },
    {
        "content": "<p>We should fix this for int and nat algebras too</p>",
        "id": 255953482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633269609
    },
    {
        "content": "<p>Those won't be algebras over Q right, what are you asking more specifically Eric? There was a thread a long time about whether there should be a coe from Q to non-char zero division rings where i think i argued that yes there should still be as it's nice to be able to write 1/2 as a number in finite fields for instance.</p>",
        "id": 255953668,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1633269788
    },
    {
        "content": "<p>Algebras over int and nat can use gsmul and nsmul.</p>",
        "id": 255954376,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633270465
    },
    {
        "content": "<p>That forms a diamond with the algebra map that's just id though</p>",
        "id": 255955424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633271548
    },
    {
        "content": "<p>We need a <code>semiring.of_nat</code> field to fix that</p>",
        "id": 255955439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633271571
    },
    {
        "content": "<p>Indeed, you're right. Alternative proposal: we remove <code>algebra_map</code> from the definition of <code>algebra</code>, reformulate axioms in terms of properties of <code>smul</code>, and add <code>rsmul</code> instead of <code>of_rat</code> to the definition of <code>division_ring</code>.</p>",
        "id": 255961156,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633277214
    },
    {
        "content": "<p>This is a larger refactor but it removes one more source of diamonds.</p>",
        "id": 255961534,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633277606
    },
    {
        "content": "<p>And we can split it in two halves (“redefine <code>algebra</code>” and “add <code>rsmul</code>”).</p>",
        "id": 255961595,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633277648
    },
    {
        "content": "<p>I think that we only need <code>r • (x * y) = (r • x) * y</code> and <code>r • (x * y) = x * (r • y)</code>.</p>",
        "id": 255963333,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633279404
    },
    {
        "content": "<p>I don't know if we can replace some of <code>x</code>/<code>y</code> with <code>1</code>.</p>",
        "id": 255963349,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633279429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 255963748,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633279815
    },
    {
        "content": "<p>I suggest that we extend <code>module R A</code> and add axioms from <code>is_scalar_tower</code> and <code>smul_comm_class</code>.</p>",
        "id": 255963894,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633280001
    },
    {
        "content": "<p>I mean something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[nolint has_inhabited_instance]</span>\n<span class=\"kd\">class</span> <span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">smul_comm_class</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">A</span>\n</code></pre></div>",
        "id": 255966989,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633282936
    },
    {
        "content": "<p>I've always felt yucky that we have to do these sorts of hacks instead of just writing what we want to write as mathematicians :/ I wish there was a better solution, e.g. being able to specifically feed to the typeclass system \"these two instances are equal, here's my proof, please stop fussing about it\"</p>",
        "id": 255976753,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1633292218
    },
    {
        "content": "<p>This (and similar) issues will also only keep getting worse the more maths we do</p>",
        "id": 255976844,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1633292293
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Q-algebra.20diamond/near/255961156\">said</a>:</p>\n<blockquote>\n<p>Indeed, you're right. Alternative proposal: we remove <code>algebra_map</code> from the definition of <code>algebra</code>, ...</p>\n</blockquote>\n<p>I think the argument goes that it is useful to have definitional control of the algebra map. Of course, the cost of definitional control anywhere is that we have to control it through diamonds too</p>",
        "id": 255979482,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633294883
    },
    {
        "content": "<p>Why do you want to have defeq for algebra map?</p>",
        "id": 255979562,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633294946
    },
    {
        "content": "<p>This is the price you pay for dependent types, and if it enables us to do maths we wouldn't be able to do otherwise then I'm prepared to pay the price. It's not the case that it's spiralling out of control. Everyone knows that abelian groups are the same as ℤ-modules and it's really convenient to make this as definitional as possible because we seem to use it all the time. Similarly char 0 division rings are ℚ-algebras and maybe it's best we make this as definitional as possible. This isn't going to go on forever, this is clear.</p>",
        "id": 255984760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633300301
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Who did you answer?</p>",
        "id": 255986089,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633301803
    },
    {
        "content": "<blockquote>\n<p>This (and similar) issues will also only keep getting worse the more maths we do</p>\n</blockquote>",
        "id": 255987133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633302909
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> OTOH, we'll have defeq <code>algebra_map r x = (r • 1) * x</code>.</p>",
        "id": 255993084,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633309417
    },
    {
        "content": "<p>Why <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_group.int_module.unique\">docs#add_comm_group.int_module.unique</a> is not an instance?</p>",
        "id": 255995638,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633312170
    },
    {
        "content": "<p>A similar statement about algebras (with <code>subsingleton</code> instead of <code>unique</code>) is an instance.</p>",
        "id": 255995698,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633312208
    },
    {
        "content": "<p>Found <a href=\"https://github.com/leanprover-community/mathlib/issues/6025\">#6025</a></p>",
        "id": 255997341,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633313775
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/redefine-algebra\">branch#redefine-algebra</a> (fixed <code>algebra.algebra.basic</code>, DID NOT update docstrings)</p>",
        "id": 255997699,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633314155
    },
    {
        "content": "<p>cherry-picked changes to other files in <a href=\"https://github.com/leanprover-community/mathlib/tree/extra-instances\">branch#extra-instances</a></p>",
        "id": 255997808,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633314260
    },
    {
        "content": "<p>I guess that loosing defeq-control over <code>algebra_map</code> will be mildly annoying, but it probably will not create diamonds. So that might be the right balance.</p>",
        "id": 256009295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633326281
    },
    {
        "content": "<p>I'm really grateful when I see issues like this identified and fixed. Thank you! We'd never have the problem if we didn't put data in typeclasses though, right?</p>",
        "id": 256030729,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633340216
    },
    {
        "content": "<p>Not doing so would come at the cost of having to write things like \"let <code>G, 1, *</code> be a group\" instead of \"let <code>G</code> be a group\" and this would get a painful with more complicated objects (\"let <code>K, 0, 1, +, *, ∥ ∥, &lt;</code> be a normed ordered field\") but I think I can imagine a setup where we tried to get the best of both worlds by splitting every typeclass in two: a base with only Prop-valued fields and another which consumes the base and fills in defaults for the data-valued fields.</p>",
        "id": 256030755,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633340231
    },
    {
        "content": "<p>I think this might have the advantage that we could have multiple variants of the data-bearing typeclasses and this might give us the extra wiggle room to resolve issues like this.</p>",
        "id": 256030804,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1633340267
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/9525\">#9525</a> contains an outline of the <code>of_nat</code> / <code>of_rat</code> approach</p>",
        "id": 256036044,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633343128
    },
    {
        "content": "<p>Idealy we'd push<code>nat.cast</code>earlier in the imports (before we have rings defined) so that we can use that earlier</p>",
        "id": 256036163,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633343176
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Q-algebra.20diamond/near/255993084\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> OTOH, we'll have defeq <code>algebra_map r x = (r • 1) * x</code>.</p>\n</blockquote>\n<p>I assume you meant <code>algebra_map R A r = r • 1</code>. The downside of not having <code>algebra_map</code> is we lose the fact that <code>algebra_map R R r = r</code> is defeq.</p>",
        "id": 256036321,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633343271
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Q-algebra.20diamond/near/255997699\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/tree/redefine-algebra\">branch#redefine-algebra</a> (fixed <code>algebra.algebra.basic</code>, DID NOT update docstrings)</p>\n</blockquote>\n<p>There's a lot of good stuff in this branch even if we don't decide to change the definition of algebra; would you  mind PRing all the new lemmas about smul_comm_class etc separately?</p>",
        "id": 256040359,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633345514
    },
    {
        "content": "<p>IMHO definitional equalities that are not important for TC diamonds can go away.</p>",
        "id": 256049632,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633350404
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/tree/extra-instances\">branch#extra-instances</a> for lemmas/instances from <a href=\"https://github.com/leanprover-community/mathlib/tree/redefine-algebra\">branch#redefine-algebra</a></p>",
        "id": 256049682,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633350434
    },
    {
        "content": "<p>That new branch looks pr-ready to me</p>",
        "id": 256055155,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1633352769
    },
    {
        "content": "<p>I'm waiting for CI.</p>",
        "id": 256055210,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633352793
    },
    {
        "content": "<p>Though let me create a PR already.</p>",
        "id": 256055241,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633352808
    }
]