[
    {
        "content": "<p>So in Lean there is the standard definition of natural numbers as an inductive type with 0 and such as the constructors. We can also define binary natural numbers with 0, \"append 0\" and \"append 1\" as constructors and so on for any number of digits. To all of these types we can add negative numbers and make them into rings.</p>\n<p>Can we formalize the idea that for any given number of digits all of these rings are isomorphic?</p>",
        "id": 225475084,
        "sender_full_name": "Roman Bars",
        "timestamp": 1612720099
    },
    {
        "content": "<p>Yes, and I would imagine that all these things are done. There is <code>pos_num</code> and <code>num</code> in something like <code>data.num.basic</code>.</p>",
        "id": 225475696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1612721085
    },
    {
        "content": "<p>For the case of binary natural numbers this is formalized as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/num.to_nat_inj\">docs#num.to_nat_inj</a> and similar theorems</p>",
        "id": 225475697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612721088
    },
    {
        "content": "<p>although it appears that the statement that num and nat are isomorphic as semirings is not explicitly stated, since it's a fairly low level file</p>",
        "id": 225475709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612721125
    },
    {
        "content": "<p>In general, however, rather than constructing a bunch of isomorphic types, I would prefer to see alternate constructors and recursors on <code>nat</code> that allow it to be viewed as binary natural numbers or ternary or phinary or what have you</p>",
        "id": 225475810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612721311
    },
    {
        "content": "<p>in the case of binary, this is the <code>bit0</code> and <code>bit1</code> functions (on <code>nat</code>), plus <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.binary_rec\">docs#nat.binary_rec</a></p>",
        "id": 225475825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1612721357
    },
    {
        "content": "<p>Along the lines of alternate constructors, there's also <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.of_digits\">docs#nat.of_digits</a> going from lists of natural numbers back to natural numbers.</p>",
        "id": 225476334,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1612722112
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387766\">@Roman Bars</span> There is one technical downside to making all these new definitions. Even if you prove that <code>nat</code> is isomorphic to <code>nat_in_base 5</code>, if you prove a lemma about one of them, it isn't transparently automatically true for the other.</p>",
        "id": 225506319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612764124
    },
    {
        "content": "<p>So the usual approach in formalisation is to build functions (like <code>nat.of_digits</code> that Bryan linked to above) that allow you to treat <code>nat</code> as if it were <code>nat_in_base 5</code>.</p>",
        "id": 225506335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612764172
    },
    {
        "content": "<p>And there should be lemmas that show that <code>nat.of_digits</code> behaves exactly the way it should with respect to addition, multiplication, etc...</p>",
        "id": 225506362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1612764207
    }
]