[
    {
        "content": "<p>Has anyone built formal power series yet?</p>",
        "id": 156894024,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548458763
    },
    {
        "content": "<p>just take <span class=\"tex-error\">$$\\varprojlim_{n \\in \\Bbb N} A[X]/(X^n)$$</span> :P</p>",
        "id": 156894121,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1548458874
    },
    {
        "content": "<p>This is an interesting question. I believe Patrick has done ring completions so that would be one approach. Alternatively one could just take the stuff on polynomial rings and just delete all the finite support hypotheses! In retrospect power series would have been easier to write than polynomials I guess?</p>",
        "id": 156915982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548491896
    },
    {
        "content": "<p>These seem like two genuinely different approaches. Which would be best?</p>",
        "id": 156916113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548492195
    },
    {
        "content": "<p>yes, power series are easier than polynomials, although you still need some finiteness for the monomials so that multiplication is well defined</p>",
        "id": 156916161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548492245
    },
    {
        "content": "<p>That said, it's not clear to me which power series ring is the most useful - there are many ways to generalize bits of the polynomial construction, like Laurent series</p>",
        "id": 156916229,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548492369
    },
    {
        "content": "<p>From an algebraic geometry point of view, the power series ring <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mo>[</mo><mi>X</mi><mo>]</mo><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[[X]]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mopen\">[</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span></span></span></span> is the most important missing thing, i.e. a ring structure on <code>nat -&gt; R</code>.</p>",
        "id": 156917121,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548494171
    },
    {
        "content": "<p>If you import <code>algebra.pi_instances</code> I think you get a multiplication on these functions, which is pointwise multiplication on the target, but that's the wrong one.</p>",
        "id": 156917139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548494249
    },
    {
        "content": "<p>This is clearly a case for type wrapping. Define <code>power_series R = nat -&gt; R</code> and define the correct instance</p>",
        "id": 156917943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548495721
    },
    {
        "content": "<p>Unfold and apply_instance for addition</p>",
        "id": 156917993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548495781
    },
    {
        "content": "<p>If I unfold <code>power_series R</code> will this then actually change what <code>apply_instance</code> finds for multiplication? i.e. can I get some code which changes behaviour if I insert an \"unfold\"?</p>",
        "id": 156918007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548495830
    },
    {
        "content": "<p>yes, well, the typeclass instance inferred can change</p>",
        "id": 156918349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548496406
    },
    {
        "content": "<p>if you just unfold you will still have the original instance, it will just be a nonstandard typeclass term at that point</p>",
        "id": 156918390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548496442
    },
    {
        "content": "<p>So there are also some new phenomena which arise for power series, for example:</p>\n<ul>\n<li>If F(X) and G(X) are power series then we can make sense of F(G(X)) if the constant term of G is zero. I guess the proper generalization is that if F(X) in R[[X]], a in I and R is I-adically complete then we can evaluate F(a). Do we already have these latter notions (maybe in the perfectoid spaces project)?</li>\n<li>If F(X) = u X + ... with u a unit in R then we can find an inverse power series G(X) = u^-1 X + ... Is this related to Hensel's lemma?</li>\n</ul>",
        "id": 156922769,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548504028
    },
    {
        "content": "<p>The notion of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span></span></span></span>-adically complete will be in the perfectoid space project, although I am not sure we have a good API for it. The \"correct\" way to do this would be to go through some book like Atiyah--Macdonald I guess, whereas we just needed the definition. This stuff will come as I start actually having to use the notion of completeness in lemmas (this is imminent but has not yet happened; I've spent the last two weeks writing references and dealing with other work admin, but my urgent work job list is now very small). Inverse power series -- this is not Hensel. It's the statement that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mo>[</mo><mi>X</mi><mo>]</mo><mo>]</mo><mo>=</mo><mi>R</mi><mo>[</mo><mo>[</mo><mi>F</mi><mo>]</mo><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[[X]]=R[[F]]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mopen\">[</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mopen\">[</span><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span></span></span></span> which is something else. Hensel (in its full generality -- we only have it for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"double-struck\">Z</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}_p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68889em;\"></span><span class=\"strut bottom\" style=\"height:0.974998em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span>) provides roots in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mo>[</mo><mi>X</mi><mo>]</mo><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[[X]]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mopen\">[</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span></span></span></span> of polynomials with coefficients in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mo>[</mo><mi>X</mi><mo>]</mo><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[[X]]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mopen\">[</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span><span class=\"mclose\">]</span></span></span></span> in favourable circumstances.</p>",
        "id": 156924334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548506969
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/perfectoid-spaces/tree/master/src/for_mathlib\" target=\"_blank\" title=\"https://github.com/leanprover-community/perfectoid-spaces/tree/master/src/for_mathlib\">https://github.com/leanprover-community/perfectoid-spaces/tree/master/src/for_mathlib</a> is the topology on a ring generated by an ideal of the ring</p>",
        "id": 156927185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548512316
    },
    {
        "content": "<p>We do have everything to define I-adically complete in the perfectoid project: the adic-topology and completeness for topological rings</p>",
        "id": 156935544,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548526577
    },
    {
        "content": "<p>Lean now knows that multivariate power series over a local ring form a local ring:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/power-series/src/data/power_series.lean#L749-L750\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/power-series/src/data/power_series.lean#L749-L750\">https://github.com/leanprover-community/mathlib/blob/power-series/src/data/power_series.lean#L749-L750</a></p>",
        "id": 170726724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562942219
    },
    {
        "content": "<p>take a shot every time <code>local</code> appears in the proof</p>",
        "id": 170727028,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562942453
    },
    {
        "content": "<p>It's good I saw this before trying to implement power series myself. Do you plan to redefine <code>exp</code>/<code>sin</code>/... in any complete normed algebra?</p>",
        "id": 170799090,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563040159
    },
    {
        "content": "<p>Hmm... I've only done formal power series. Next on my list is formal Laurent series.</p>",
        "id": 170799214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563040397
    },
    {
        "content": "<p>I've not made any connections to topology/analysis.</p>",
        "id": 170799217,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563040412
    },
    {
        "content": "<p>Could you please poke me once formal power series will be merged into <code>master</code> branch? I'll start working on connections to topology/analysis.</p>",
        "id": 170799713,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563041321
    },
    {
        "content": "<p>Sure, I might PR the basics within the next few days</p>",
        "id": 170799776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563041449
    },
    {
        "content": "<p>I was planning on adding <code>has_inv</code> for formal power series over a field, and then I think there is a nice basis that should be ready for PR.</p>",
        "id": 170799800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563041506
    },
    {
        "content": "<p>General question: should I call this data structure <code>mv_power_series</code> or <code>mv_formal_power_series</code>?</p>",
        "id": 170799843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563041527
    },
    {
        "content": "<blockquote>\n<p>Hmm... I've only done formal power series. Next on my list is formal Laurent series.</p>\n</blockquote>\n<p>How do you do that? I skim read a paper about that and there are multiple ways over several variables.</p>",
        "id": 170799928,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563041703
    },
    {
        "content": "<p>I will PR formal power series first. Not sure if I'll do formal Laurent series with multiple variables... In practice I very rarely see the multivariate case. Of course I will be angry with myself if I only do the single variable case...<br>\nBut like you said, there are several approaches, and it's not clear to me which one I should/want to take.</p>",
        "id": 170800048,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563041912
    },
    {
        "content": "<p>I think, <code>mv_power_series</code> is OK, because we can add topological properties to the same type.</p>",
        "id": 170800689,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563043254
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <a href=\"https://github.com/leanprover-community/mathlib/issues/1244\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1244\">#1244</a></p>",
        "id": 171312575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563600385
    },
    {
        "content": "<p>Well done Johan!</p>",
        "id": 171320917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563616589
    },
    {
        "content": "<p>I've now made the name <code>mv_formal_power_series</code>. Is this too long?</p>",
        "id": 171395285,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563757133
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> What do you think of the name? Should it be <code>power_series α</code> or <code>formal_power_series α</code>? If we decide on the latter, I should also change the file name.</p>",
        "id": 171406836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563776998
    },
    {
        "content": "<p>The disadvantage is that the name is quite long.</p>",
        "id": 171406886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563777021
    },
    {
        "content": "<p>What's an informal power series? I would stick to just power_series.</p>",
        "id": 171407010,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563777205
    },
    {
        "content": "<p>I guess it is an infinite sum in a topological ring?</p>",
        "id": 171407774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563778114
    },
    {
        "content": "<p>I don't know. I don't do analysis.</p>",
        "id": 171407780,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563778124
    },
    {
        "content": "<p>Wikipedia says that <code>Laurent_series</code> has unbounded below coefficients, whereas <code>formal_Laurent_series</code> has bounded below coefficients.</p>",
        "id": 171407802,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563778157
    },
    {
        "content": "<p>I thought that maybe for power series there is also a distinction that matters.</p>",
        "id": 171407817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563778170
    },
    {
        "content": "<p>Another related question (<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>): Should this go into <code>data/power_series.lean</code> or <code>ring_theory/power_series.lean</code>?</p>",
        "id": 171412437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563783904
    },
    {
        "content": "<p>if you can remove the dependency on <code>ring_theory</code> then it can go in <code>data</code></p>",
        "id": 171412530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563784004
    },
    {
        "content": "<p>I think I would rather not remove that dep. I'll just move the file to <code>ring_theory</code>. After all, this isn't a generic data structure that will be used all over the place.</p>",
        "id": 171412638,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563784135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Do you have an opinion on the name <code>mv_formal_power_series</code> vs <code>mv_power_series</code>?</p>",
        "id": 171412676,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563784194
    },
    {
        "content": "<p>no</p>",
        "id": 171412690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563784201
    },
    {
        "content": "<p>I think chris has a point that it's not like we have some other definition we need to distinguish</p>",
        "id": 171412744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563784250
    },
    {
        "content": "<p>Ok, I undid the name change.</p>",
        "id": 171412862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563784417
    },
    {
        "content": "<p>I prefer <code>power_series</code> instead of <code>formal_power_series</code>.  For converging power series, we will mainly use <code>analytic</code> or something like that, and if necessary we can also use <code>converging_power_series</code>.</p>",
        "id": 171413506,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1563785238
    },
    {
        "content": "<p>Sorry if this is obvious: Does this implementation allow one to define a power series indexed by any monoid? Laurent series would be indexed by an additive group (lattice), \"supported\" in a cone. Not sure if that's good for proving anything, but one may regard Weyl's character formula as a formula in such a ring.</p>",
        "id": 171640936,
        "sender_full_name": "Yao Liu",
        "timestamp": 1564000489
    },
    {
        "content": "<p>no , i don't think so---the \"indexing\" you're referring to is in the degrees, and I think the current implementation hard-codes those as being in the natural numbers</p>\n<p>however, the only structure enforced on sigma (the variables) in the definition is decidable_eq, so you can additionally put whatever structure you like on that</p>",
        "id": 171645274,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564004189
    },
    {
        "content": "<p>that's what I meant, the terms (monomials) are indexed by points on a lattice. Thanks for the clarification</p>",
        "id": 171645481,
        "sender_full_name": "Yao Liu",
        "timestamp": 1564004378
    },
    {
        "content": "<p>I guess in general you will need some sort of filter on your abelian group with some finiteness hypothesis involving how it interacts with the group law in order to define the object and to prove that multiplication of power series makes sense.</p>",
        "id": 171645766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564004590
    },
    {
        "content": "<p>@Yao Liu you make a good point though---if we work with e.g. valued fields later, we'll need formal laurent series indexed by an arbitrary ordered abelian group, so why not generalize the definition and remove the hardcoded <code>nat</code> from <code>power_series.lean</code>?</p>\n<p>it might make a good exercise</p>",
        "id": 171645804,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564004639
    },
    {
        "content": "<p>You'll have to think about exactly what is allowed. You can't make formal power series <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">Z</mi></mrow></msub><msub><mi>a</mi><mi>n</mi></msub><msup><mi>z</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\sum_{n\\in\\mathbb{Z}}a_nz^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.07708em;vertical-align:-0.32708000000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.18251299999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">∈</span><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">Z</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32708000000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.04398em;\">z</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span> because there are convergence issue when multiplying. You need to make sure that the series are zero on some set in some filter with some finiteness property wrt addition</p>",
        "id": 171646136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564004851
    },
    {
        "content": "<p>For all I know, polynomials, Laurent series, formal power series, multivariate polynomials, multivariate power series etc are all special cases of some general notion about functions with support in or disjoint from some element of a filter</p>",
        "id": 171646245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564004958
    },
    {
        "content": "<p>it might make a good exercise</p>",
        "id": 171646260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564004986
    },
    {
        "content": "<p>but my point is that \"indexed by an arbitrary ordered abelian group\" needs some thought</p>",
        "id": 171646328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564005026
    },
    {
        "content": "<p>ah yeah, i guess we want the inner terms of the cauchy product to be finite sums, so for Laurent series you need something like all intervals being finite</p>",
        "id": 171647600,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1564006316
    },
    {
        "content": "<p>Right, there are all sorts of generalisations, but I didn't know the \"one generalisation that rules them all\".<br>\nAlso, in real world math, you just wave your hands and say \"the sum is finite\". In Lean that's quite a subtle thing to do, and so even plain old formal Laurent series are non-trivial to write down. (That is, if you want to write them as a series. Of course I can just define them as the field of fractions of power series, but that is \"cheating\".)</p>",
        "id": 171657189,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564019438
    },
    {
        "content": "<p>Is there a nice way of adding together infinitely many power series, such that the corresponding sum for each coefficient is finite? Is there some topology that makes this work?</p>",
        "id": 172038279,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564493969
    },
    {
        "content": "<p>yes, the p-adic topology!</p>",
        "id": 172038349,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564494005
    },
    {
        "content": "<p>R[[X]] is the X-adic completion of R[X]</p>",
        "id": 172038366,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564494026
    },
    {
        "content": "<p>I see. Explain further. So you need a topology on R[X] to start with? And then how do you extend this topology? Is this a uniform space completion?</p>",
        "id": 172038525,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564494175
    },
    {
        "content": "<p>you define a norm on R[X] that assigns 2^-deg(p) to p</p>",
        "id": 172038804,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564494415
    },
    {
        "content": "<p>and then take the Cauchy sequences blah blah blah</p>",
        "id": 172038842,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564494453
    },
    {
        "content": "<p>just like how you construct the p-adic integers</p>",
        "id": 172038855,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564494465
    },
    {
        "content": "<p>this is an ultrametric</p>",
        "id": 172038875,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564494479
    },
    {
        "content": "<p>so an is summable iff an -&gt; 0</p>",
        "id": 172038931,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564494493
    },
    {
        "content": "<p>Why do you want a norm? You can simply use the adic topology</p>",
        "id": 172039033,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564494588
    },
    {
        "content": "<p>oh right, the local basis is <code>I^n</code> right</p>",
        "id": 172039348,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564494832
    },
    {
        "content": "<p>at 0</p>",
        "id": 172039352,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564494839
    },
    {
        "content": "<p><code>I</code> being the ideal <code>(X)</code></p>",
        "id": 172039421,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564494867
    },
    {
        "content": "<p>Unfortunately we don't have adic topology in mathlib yet.</p>",
        "id": 172041196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564495984
    },
    {
        "content": "<p>It's on the todo list to move it from the perfectoid project to mathlib</p>",
        "id": 172041212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564495997
    },
    {
        "content": "<blockquote>\n<p>you define a norm on R[X] that assigns 2^-deg(p) to p</p>\n</blockquote>\n<p>This isn't right. The idea is that X should be \"small\", so for example that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>1</mn><mo>+</mo><mi>X</mi><mo>+</mo><msup><mi>X</mi><mn>2</mn></msup><mo>+</mo><msup><mi>X</mi><mn>3</mn></msup><mo>+</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">1+X+X^2+X^3+\\cdots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span> converges. So the norm on R[X] assigns 2^-v(p) to p, where v(p) is the largest power of X dividing p.</p>",
        "id": 172041763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564496292
    },
    {
        "content": "<p>oh right</p>",
        "id": 172041830,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564496328
    },
    {
        "content": "<p>Basically the norm of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>c</mi><msup><mi>X</mi><mi>n</mi></msup><mo>+</mo><mi>d</mi><msup><mi>X</mi><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>+</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">cX^n+dX^{n+1}+\\cdots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mrow><mo>−</mo><mi>n</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">2^{-n}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>c</mi><mo>≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">c\\not=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. Now define the distance from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span> to be the norm of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>−</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">f-g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span> and there's your metric space.</p>",
        "id": 172041893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564496363
    },
    {
        "content": "<p>For an infinite sequence of power series, the property that the corresponding sum for each coefficient is finite is equivalent to the property that the max power of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span></span></span></span> dividing the power series tends to infinity, so is equivalent to the property that the norms of the terms are tending to zero. And in this nonarchimedean (warning: this word is used in several different ways in maths) setting, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mo>∑</mo><mrow><mi>n</mi><mo>≥</mo><mn>0</mn></mrow></msub><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum_{n\\geq0}a_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.144889em;vertical-align:-0.39488900000000005em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139799999999992em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.39488900000000005em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> converges iff <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo>→</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a_n\\to 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, because <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>max</mi><mo>⁡</mo><mo stretchy=\"false\">{</mo><mi>d</mi><mo stretchy=\"false\">(</mo><mi>a</mi><mo separator=\"true\">,</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>d</mi><mo stretchy=\"false\">(</mo><mi>b</mi><mo separator=\"true\">,</mo><mi>c</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">d(a,c)\\leq\\max\\{d(a,b),d(b,c)\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">max</span><span class=\"mopen\">{</span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">b</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mclose\">)</span><span class=\"mclose\">}</span></span></span></span> which makes the partial sums Cauchy if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo>→</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">a_n\\to 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, and power series are complete so Cauchy sequences converge.</p>",
        "id": 172042196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564496526
    },
    {
        "content": "<p>Btw, I'm defining <code>v(p)</code> right now.</p>",
        "id": 172043224,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564497090
    },
    {
        "content": "<p>Or actually, I've been working on it over the last few days.</p>",
        "id": 172043232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564497100
    },
    {
        "content": "<p>but you already have it...?</p>",
        "id": 172043247,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564497109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> What do you mean?</p>",
        "id": 172043418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564497214
    },
    {
        "content": "<p>we have p-adics in mathlib</p>",
        "id": 172043441,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564497232
    },
    {
        "content": "<p>But this is polynomials</p>",
        "id": 172043602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564497335
    },
    {
        "content": "<p>aren't the constructions isomorphic</p>",
        "id": 172043640,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564497360
    },
    {
        "content": "<p>Not in the sense that there's an isomorphism R[X] = Z_p</p>",
        "id": 172043707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564497385
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> You're thinking too much about Witt vectors.</p>",
        "id": 172043966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564497546
    },
    {
        "content": "<p>Unfortunately Witt vectors will not make it too mathlib in Lean 3.4.2</p>",
        "id": 172043988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564497565
    },
    {
        "content": "<p>I've done the entire construction, but I'm hitting Lean bugs, and as a result the file is extremely slow.</p>",
        "id": 172044016,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564497593
    },
    {
        "content": "<p>Take a look at the history of the <code>witt-vectors</code> branch, if you're interested.</p>",
        "id": 172044085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564497607
    },
    {
        "content": "<p>maybe you have <a href=\"#narrow/stream/113488-general/topic/unused.20arguments\" title=\"#narrow/stream/113488-general/topic/unused.20arguments\">unused arguments</a></p>",
        "id": 172044097,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1564497614
    },
    {
        "content": "<p>Haha. Who knows.</p>",
        "id": 172044246,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564497719
    },
    {
        "content": "<p>At the moment the file doesn't compile. But I can't bring up the courage to make it cleaner if it will always be slow anyway.</p>",
        "id": 172044338,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564497750
    },
    {
        "content": "<p>A compiling version exists in the history.</p>",
        "id": 172044362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564497765
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I'm not completely done yet, but what I have is pushed to <a href=\"https://github.com/leanprover-community/mathlib/blob/power-series-order/src/ring_theory/power_series.lean#L1084\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/power-series-order/src/ring_theory/power_series.lean#L1084\">https://github.com/leanprover-community/mathlib/blob/power-series-order/src/ring_theory/power_series.lean#L1084</a></p>",
        "id": 172134886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564585105
    },
    {
        "content": "<p>It is all in one variable. I guess there are solutions in the multivariate case (maybe if you have finitely many variables, and you order them...)</p>",
        "id": 172134936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564585149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Do you know if the multivariate case has some use?</p>",
        "id": 172134973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564585179
    },
    {
        "content": "<p>We will want to compose/eval multivariate power series when doing formal group laws.</p>",
        "id": 172135054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564585206
    },
    {
        "content": "<p>But for that I guess we don't need a notion of order.</p>",
        "id": 172135096,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564585235
    },
    {
        "content": "<p>A unified treatment of compose/eval is not so easy. I guess the best way is to use topology, and show that in certain cases formal arguments suffice for the convergence hypothesis.</p>",
        "id": 172135152,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564585285
    },
    {
        "content": "<p>I guess in the multivariate case the valuations are the old-style way of doing algebraic geometry, there are all sorts of funny valuations on a multivariate power series ring I think, I don't know if these specific ones are any better than any others.</p>",
        "id": 172136339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564586054
    },
    {
        "content": "<p>I guess one observation is that over k[[T]] the T-adic valuation is actually intrinsic, but over k[[X,Y]] there are a gazillion changes of variables which make your X-adic and Y-adic valuations less special. However I bet there will be some use for them somewhere...</p>",
        "id": 172136394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564586107
    },
    {
        "content": "<p>Right... we'll develop it when we need it.</p>",
        "id": 172136424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564586148
    },
    {
        "content": "<p>Hmm, I just realised that I've been very very stupid. I should have used Chris's multiplicity library. My apologies!</p>",
        "id": 172147869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564594920
    },
    {
        "content": "<p>Formal power series in multiple variables are heavily used in symplectic topology ... as generating function, even in countably many variables, sometimes even completed in that direction ;)</p>",
        "id": 172196110,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1564642002
    },
    {
        "content": "<p>We have those. The question is, do you compose them?</p>",
        "id": 172196130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564642034
    },
    {
        "content": "<p>No, we only multiply and add them. Sometimes we act on them</p>",
        "id": 172196217,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1564642127
    },
    {
        "content": "<p>Ok, mathlib can do that already.</p>",
        "id": 172196221,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564642140
    }
]