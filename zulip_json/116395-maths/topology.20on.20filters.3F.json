[
    {
        "content": "<p>Is there any reasonable topology on <code>filter X</code> such that, e.g., in case of a topological space, the <code>nhds</code> map is continuous (or even inducing)?</p>",
        "id": 282067011,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652339781
    },
    {
        "content": "<p>Nice question!</p>",
        "id": 282067438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652340090
    },
    {
        "content": "<p>Naive idea: a basis of open sets is indexed by the opens U in X, with the set B(U) being the filters that contain U as an element. Only works for topological spaces though so not exactly what you want</p>",
        "id": 282068134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652340553
    },
    {
        "content": "<p>The topology on ultrafilters given by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ultrafilter_basis\">docs#ultrafilter_basis</a> actually defines a natural topology on <code>filter X</code>. This is the same as Kevin's suggestion except it uses all <code>U</code> instead of only the opens. Either way, <code>nhds</code> should be inducing since the preimage of <code>B(U)</code> is the interior of <code>U</code> (I think?), which is an arbitrary open subset of <code>X</code></p>",
        "id": 282069076,
        "sender_full_name": "David W√§rn",
        "timestamp": 1652341251
    },
    {
        "content": "<p>/me is going to reread this in the morning</p>",
        "id": 282070468,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652342256
    },
    {
        "content": "<p>Indeed,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.maps</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">generate_from</span> <span class=\"bp\">$</span> <span class=\"n\">range</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">‚àà</span> <span class=\"n\">l</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nhds_eq</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ùìù</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"bp\">‚®Ö</span> <span class=\"n\">s</span> <span class=\"bp\">‚àà</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">ùìü</span> <span class=\"o\">{</span><span class=\"n\">l'</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">‚àà</span> <span class=\"n\">l'</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">nhds_generate_from.trans</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">and_comm</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">‚àà</span> <span class=\"n\">_</span><span class=\"o\">),</span> <span class=\"n\">infi_and</span><span class=\"o\">,</span> <span class=\"n\">infi_range</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inducing_nhds</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">inducing</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">filter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">eq_of_nhds_eq_nhds</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nhds_induced</span><span class=\"o\">,</span> <span class=\"n\">nhds_eq</span><span class=\"o\">,</span> <span class=\"n\">comap_infi</span><span class=\"o\">,</span> <span class=\"n\">comap_principal</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">le_infi‚ÇÇ</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">le_principal_iff.2</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">interior_mem_nhds.mpr</span> <span class=\"n\">hs</span><span class=\"o\">]</span> <span class=\"k\">with</span> <span class=\"n\">y</span> <span class=\"n\">using</span> <span class=\"n\">mem_interior_iff_mem_nhds.mp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">mem_infi_of_mem</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">mem_infi_of_mem</span> <span class=\"n\">hs</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">mem_of_mem_nhds</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">filter</span>\n</code></pre></div>",
        "id": 282158645,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652383576
    },
    {
        "content": "<p>Is that somehow related to the topology on <code>set Œ±</code> that I wanted? For reference, I need to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">ab</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"bp\">‚®Ü</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">Icc</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>for Sharkovskii's theorem, and I feel like it would naturally decompose into</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"n\">uncurry</span> <span class=\"n\">Icc</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">√ó</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">‚®Ü</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>had we <code>topological_space (set ‚Ñù)</code>.</p>",
        "id": 282178462,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1652393645
    },
    {
        "content": "<p>Which topology on <code>set X</code> are you talking about? Some specific topology? I can imagine different topologies.</p>",
        "id": 282190343,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652403053
    },
    {
        "content": "<p>E.g., you can introduce a topology based on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/emetric.Hausdorff_edist\">docs#emetric.Hausdorff_edist</a></p>",
        "id": 282190536,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652403159
    },
    {
        "content": "<p>Yes, but this should be for nonempty compact sets (like <code>Icc a b</code>)</p>",
        "id": 282192078,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652404701
    },
    {
        "content": "<p>Another equivalent approach to topology on <code>filter Œ±</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.lift</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.maps</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œπ</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Iic_topology</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">Œ≤</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf_inf</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">‚äì</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">‚äì</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">‚â§</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Œ≤</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">‚ãÉ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">Iic</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_univ</span> <span class=\"o\">:=</span> <span class=\"o\">‚ü®</span><span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"n\">Union‚ÇÇ_eq_univ_iff.2</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">imp</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">mem_univ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">‚ü©)‚ü©,</span>\n  <span class=\"n\">is_open_inter</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">‚ü®</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©</span> <span class=\"o\">‚ü®</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©,</span>\n      <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"n\">image2</span> <span class=\"o\">(</span><span class=\"bp\">‚äì</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">image2_eq_Union</span><span class=\"o\">,</span> <span class=\"n\">bUnion_Union</span><span class=\"o\">,</span> <span class=\"n\">bUnion_singleton</span><span class=\"o\">,</span> <span class=\"n\">inter_Union</span><span class=\"o\">,</span> <span class=\"n\">Union_inter</span><span class=\"o\">,</span>\n        <span class=\"n\">Iic_inter_Iic</span><span class=\"o\">,</span> <span class=\"n\">hf_inf</span><span class=\"o\">]</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">is_open_sUnion</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">choose</span><span class=\"bp\">!</span> <span class=\"n\">T</span> <span class=\"n\">hT</span> <span class=\"n\">using</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"bp\">‚ãÉ</span> <span class=\"n\">t</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">bUnion_Union</span><span class=\"o\">,</span> <span class=\"n\">hT</span><span class=\"o\">,</span> <span class=\"n\">sUnion_eq_bUnion</span><span class=\"o\">]</span> <span class=\"o\">{</span> <span class=\"n\">contextual</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span> <span class=\"o\">},</span>\n    <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">generate_from</span> <span class=\"bp\">$</span> <span class=\"n\">range</span> <span class=\"bp\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">‚àà</span> <span class=\"n\">l</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">topology_eq</span> <span class=\"o\">:</span>\n  <span class=\"n\">filter.topological_space</span> <span class=\"bp\">=</span> <span class=\"n\">Iic_topology</span> <span class=\"o\">(</span><span class=\"bp\">ùìü</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inf_principal.symm</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"n\">le_principal_iff.2</span> <span class=\"n\">univ_mem</span><span class=\"o\">‚ü©)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">Iic</span> <span class=\"o\">(</span><span class=\"bp\">ùìü</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"bp\">|</span> <span class=\"n\">s</span> <span class=\"bp\">‚àà</span> <span class=\"n\">l</span><span class=\"o\">},</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Iic</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_generate_from_iff_subset_is_open.2</span> <span class=\"bp\">$</span> <span class=\"n\">range_subset_iff.2</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">hs</span> <span class=\"k\">with</span> <span class=\"o\">‚ü®</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_open_bUnion</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">generate_open.basic</span> <span class=\"n\">_</span> <span class=\"o\">‚ü®</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">this</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">‚ü©)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">‚ü®{</span><span class=\"n\">s</span><span class=\"o\">},</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bUnion_singleton</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_open_iff</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)}</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">‚ãÉ</span> <span class=\"n\">t</span> <span class=\"bp\">‚àà</span> <span class=\"n\">T</span><span class=\"o\">,</span> <span class=\"n\">Iic</span> <span class=\"o\">(</span><span class=\"bp\">ùìü</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">topology_eq</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 282359796,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652544525
    }
]