[
    {
        "content": "<p>From <a href=\"https://leanprover-community.github.io/mathlib_docs/find/structure_groupoid\">docs#structure_groupoid</a>, it seems that a structure groupoid need not be closed under restriction, i.e. if <code>e : local_homeomorph H H</code> is in the groupoid then a restriction of <code>e</code> to a smaller set is not necessarily in the groupoid.  For example, the trivial groupoid <a href=\"https://leanprover-community.github.io/mathlib_docs/find/id_groupoid\">docs#id_groupoid</a> contains the identity map from <code>H</code> to itself, but not <code>local_homeomorph.of_set s</code> (the restriction of the identity to an open set <code>s</code>).</p>\n<p>Is there a reason for this?  I believe the obvious structure groupoids (continuous, smooth, analytic, ...) all have the restriction property.  Also, AFAICT, this property (for a groupoid <code>G</code>) is what is needed for the <code>charted_space</code> structure on a space <code>α</code> induced by an open embedding <code>f : α  → H</code> to be <code>has_groupoid ... G</code>.</p>",
        "id": 203352687,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594273713
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">charted_space</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">α</span> <span class=\"n\">H</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">singleton_charted_space</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">source</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">charted_space</span> <span class=\"n\">H</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">atlas</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e&#39;</span><span class=\"o\">,</span> <span class=\"n\">e&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">chart_at</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"o\">,</span>\n  <span class=\"n\">mem_chart_source</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"n\">chart_mem_atlas</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">tauto</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">singleton_charted_space_one_chart</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">source</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">e&#39;</span> <span class=\"o\">:</span> <span class=\"n\">local_homeomorph</span> <span class=\"n\">α</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">e&#39;</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">singleton_charted_space</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">atlas</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">e&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">e</span> <span class=\"o\">:=</span> <span class=\"n\">h&#39;</span>\n\n<span class=\"n\">def</span> <span class=\"n\">singleton_has_groupoid</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">source</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">structure_groupoid</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_groupoid</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">singleton_charted_space</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">compatible</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">e&#39;</span> <span class=\"n\">e&#39;&#39;</span> <span class=\"n\">he&#39;</span> <span class=\"n\">he&#39;&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">singleton_charted_space_one_chart</span> <span class=\"n\">h</span> <span class=\"n\">e&#39;</span> <span class=\"n\">he&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">singleton_charted_space_one_chart</span> <span class=\"n\">h</span> <span class=\"n\">e&#39;&#39;</span> <span class=\"n\">he&#39;&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">eq_on_source</span> <span class=\"bp\">_</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">trans_symm_self</span><span class=\"o\">,</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> goal state :</span>\n<span class=\"cm\">       ⊢ local_homeomorph.of_set e.to_local_equiv.target _ ∈ G -/</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 203352917,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594274149
    },
    {
        "content": "<p>Yes, there is a reason for this (which hopefully should be explained in the docs just around the definition of <code>structure_groupoid</code>, but maybe I forgot to add it there). The reason is vector bundles: a vector bundle corresponds to a charted space structure where the structure group is the group made of maps of the form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>↦</mo><mo stretchy=\"false\">(</mo><mi>f</mi><mi>x</mi><mo separator=\"true\">,</mo><msub><mi>A</mi><mi>x</mi></msub><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x, y)\\mapsto (f x, A_x (y))</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathdefault\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>A</mi><mi>x</mi></msub></mrow><annotation encoding=\"application/x-tex\">A_x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">x</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is linear, and where the chart domains should be of the form <code>s \\times univ</code>. If you remove this last requirement and the field is not connected, then such a charted space structure would not be enough to guarantee that you have a vector bundle.</p>\n<p>Note that all this is pure fantasy: vector bundles as charted spaces have not yet been developed in mathlib. But still, I think this potential application is important enough to motivate the definition.</p>",
        "id": 203355608,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594277932
    },
    {
        "content": "<p>Thank you!  I see, there is a <a href=\"https://github.com/leanprover-community/mathlib/blob/e4ecf146efe15a9840a8b8e5dcb1ef8525640eb1/src/geometry/manifold/charted_space.lean#L137\">long comment</a> explaining this, but it is <code>/-</code> rather than <code>/--</code> so I did not notice it in the docs.</p>",
        "id": 203380533,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594298754
    },
    {
        "content": "<p>Ah, yes. Do you think we should make it <code>/--</code>? I am afraid it would be a little too long for a docstring that shows up in the tooltip, but still it would be good to have it in the docs and not just in the code. Maybe with a <code>/-!</code> block it would be better.</p>",
        "id": 203380827,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594298923
    },
    {
        "content": "<p>Sounds good to me.</p>",
        "id": 203381026,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594299056
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> , do you think it would be useful to add a <code>closed_under_restriction</code> typeclass for groupoids?  I think there are several arguments that use this property (such as the <a href=\"#narrow/stream/116395-maths/topic/Restriction.20in.20structure.20groupoid/near/203352917\">example</a> I gave above).</p>",
        "id": 203384237,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594300969
    },
    {
        "content": "<p>Yes, I think it is a good idea.</p>",
        "id": 203387957,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594302986
    },
    {
        "content": "<p>Great, I will try it.</p>",
        "id": 203388016,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594303012
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3347\">#3347</a></p>",
        "id": 203437121,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1594327062
    }
]