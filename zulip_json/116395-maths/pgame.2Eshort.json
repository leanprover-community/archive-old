[
    {
        "content": "<p>I don't think it's controversial that docss#pgame.short shouldn't be a class. As we've <a href=\"#narrow/stream/113488-general/topic/ZFC.20definable.20class/near/289075960\">discussed before</a>, typeclasses should only be used when most instances can be built compositionally. But since pre-games are very commonly built by induction (and hence by <code>well_founded.fix</code>), most instances have to be provided directly.</p>\n<p>I do get why it was made a class though: we get some degree of computability on short games via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.le_decidable\">docs#pgame.le_decidable</a> and friends. That's why I propose the alternate approach of making a separate type for short games.</p>\n<p>In order to avoid having to copy a lot of API, we could simply define short pre-games as a subtype of pre-games, satifsying the current definition of <code>pgame.short</code>. We can then provide these same decidability instances on the subtype.</p>",
        "id": 289657027,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657836901
    },
    {
        "content": "<p>Now on this note, we had <a href=\"#narrow/stream/116395-maths/topic/Well-founded.20recursion.20for.20pgames/near/282396443\">previously noticed</a> that the current definition of <code>short</code> doesn't line up with the mathematical one. Proposition 4.9 of <a href=\"https://arxiv.org/pdf/math/0410026v2.pdf\">Schleicher-Stoll</a> shows that a pre-game is short iff it has a finite birthday, but this isn't true with the current definition: the pre-game with infinitely many copies of <code>0</code> as left moves is not short by our definition, but has birthday 1. So if we're going to refactor this bit of the code, maybe we should go all the way.</p>",
        "id": 289657791,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1657837349
    }
]