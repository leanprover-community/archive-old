[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">little_wedderburn</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hD</span> <span class=\"o\">:</span> <span class=\"n\">division_ring</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">field</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">suffices</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">subring.center</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">this</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">little_wedderburn.center_eq_top</span><span class=\"o\">,</span> <span class=\"n\">trivial</span> <span class=\"o\">},</span>\n  <span class=\"bp\">..</span> <span class=\"n\">hD</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 258550741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634825041
    },
    {
        "content": "<p>I needed a break and relax a bit. So I binged on this result. It was a lot of fun.<br>\nBut lots of stuff needs to be cleaned up. So the PR is wip. Feel free to hack on it.</p>",
        "id": 258550874,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634825082
    },
    {
        "content": "<p>I really like this result. I don't know of an elementary proof. The proof in the PR goes through cyclotomic polynomials, and how they factor over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>. Which I still find quite surprising, given that the final result is a statement about finite rings.</p>",
        "id": 258552311,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634825579
    },
    {
        "content": "<p>Very nice!! If I remember correctly the proof I know uses the class equation in group theory and something about a diophantine equation, but it is maybe the same proof ad the end.</p>",
        "id": 258553789,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634826107
    },
    {
        "content": "<p>Right, I also use the class equation. You get something like</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msup><mi>q</mi><mi>n</mi></msup><mo>−</mo><mn>1</mn><mo>=</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo>+</mo><mo>∑</mo><mfrac><mrow><msup><mi>q</mi><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><mrow><msup><mi>q</mi><mi>d</mi></msup><mo>−</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">q^n - 1 = q - 1 + \\sum \\frac{q^n - 1}{q^d - 1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9088319999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7143919999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.221832em;vertical-align:-0.8804400000000001em;\"></span><span class=\"mop op-symbol large-op\" style=\"position:relative;top:-0.000004999999999977245em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.341392em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7751079999999999em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">d</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></p>\n<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> is the cardinality of the center. Now <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Φ</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi>q</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\Phi_n(q)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord\">Φ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mclose\">)</span></span></span></span> divides LHS, and every summand in the sum on the RHS. So it must divide <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">q - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. This is only possible if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, by looking at the complex roots of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"normal\">Φ</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\Phi_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">Φ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 258554354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634826279
    },
    {
        "content": "<p>I found the proof I was thinking of, at the end is uses <a href=\"http://theorem\">this</a> to avoid cyclotomic polynomials. But now I don't how to prove the theorem (and I wouldn't be surprised if the cyclotomic polynomials are used there).</p>",
        "id": 258557080,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634827080
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span>  - the link is broken for me.</p>",
        "id": 258738871,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1634921231
    },
    {
        "content": "<p>Oups ! <a href=\"https://en.m.wikipedia.org/wiki/Zsigmondy%27s_theorem\">https://en.m.wikipedia.org/wiki/Zsigmondy%27s_theorem</a></p>",
        "id": 258780054,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634939656
    },
    {
        "content": "<p>This was the theorem</p>",
        "id": 258780068,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634939664
    },
    {
        "content": "<p>I just found <a href=\"https://angyansheng.github.io/blog/an-elementary-proof-of-zsigmondys-theorem\">https://angyansheng.github.io/blog/an-elementary-proof-of-zsigmondys-theorem</a> which does indeed use cyclotomic polynomials. I proved a few things about them recently, and the facts there don't seem so different, do you think we should have  a go at adding this?</p>",
        "id": 258782056,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1634940744
    },
    {
        "content": "<p>Looks like it's well within reach.</p>",
        "id": 258807644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634971928
    },
    {
        "content": "<p>I agree it would be interesting to have it in mathlib. We have a fairly advanced abstract theory about number theory (like the class number) but a only a few  results about explicit equations.</p>",
        "id": 258812351,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634979281
    },
    {
        "content": "<p>Speaking of cyclotomic polynomial, the definition now depends on the complex numbers and the exponential (so it depends on <em>a lot</em> of other stuff). Should we try to give a purely algebraic definition?</p>",
        "id": 258812366,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634979355
    },
    {
        "content": "<p><span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> <a href=\"#narrow/stream/116395-maths/topic/Cyclotomic.20polynomials/near/210414450\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Cyclotomic.20polynomials/near/210414450</a></p>",
        "id": 258812473,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634979514
    },
    {
        "content": "<p>That's a possibility of course, but then all the API has to be rewritten. I was thinking of a different approach. Currently the definition is as follows: <code>cyclotomic' n R</code> the the product of <code>X - μ</code>, for <code>μ</code> in the set of <code>n</code>-th roots of unity in <code>R</code>, that is an arbitrary ring (maybe an integral domain, I don't remember). If there is an <code>n</code>-th primitive root of unity in <code>R</code>, then <code>cyclotomic' n R</code> comes from a polynomial with coefficients in <code>ℤ</code>. Then <code>cyclotomic n ℤ</code> is defined using <code>cyclotomic' n ℂ</code>. I am almost sure the only result we use about <code>ℂ</code> is the existence of a primitive <code>n</code>-th root of unity and that it is of characteristic <code>0</code> (so <code>cyclotomic n ℤ</code> is unique). We can use any other field (of characteristic <code>0</code>) with a <code>n</code>-th primitive root of unity, for all <code>n</code>. We do have algebraic closure, right ? The algebraic closure of <code>ℚ</code> should do the job.</p>",
        "id": 258813283,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634980831
    },
    {
        "content": "<p>Yeah, that also works. Although algebraic closures are in some sense also pretty heavy-handed machinery (-;</p>",
        "id": 258813385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634981030
    },
    {
        "content": "<p>But certainly, I don't suggest that you rewrite all the API.</p>",
        "id": 258813424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1634981045
    },
    {
        "content": "<p>To be honest I was rather looking for interested volunteers <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> <br>\nBut the question is mathematically interesting: finding an \"easy\" field of characteristic <code>0</code> with all the primitive roots of unity. Maybe we can even work one <code>n</code> at a time, using the splitting field of <code>X^n - 1</code>.</p>",
        "id": 258813590,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634981289
    },
    {
        "content": "<p>I've been working on that splitting field, and I was originally also trying to find an alg_equiv between it and the cyclotomic splf. If we change to that definition, it may make it easier</p>",
        "id": 258813902,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1634981807
    },
    {
        "content": "<p>Let's open a new topic.</p>",
        "id": 258814002,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1634981981
    },
    {
        "content": "<p>just to note, trying to adopt this PR currently ^^</p>",
        "id": 273682728,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1646157348
    },
    {
        "content": "<p>can someone who knows about how to deal with <code>fintype</code> properly have a look at the last couple commits on this? I tried to remove <code>fincarrier</code> and replace it with <code>set.to_fintype</code> with an instance, but it's just been leading to issues for me, related to diamonds I guess. I think things compile, but I'm really not sure what the right way to go about this is</p>",
        "id": 275997753,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1647825786
    },
    {
        "content": "<p>Having a look!</p>",
        "id": 276018512,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647851533
    },
    {
        "content": "<p>I'm not quite sure I understand what's going on.</p>",
        "id": 276301112,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648024360
    },
    {
        "content": "<p>as in, what the issue is, or what's causing the issue?</p>",
        "id": 276304857,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648026684
    },
    {
        "content": "<p>What the issue is</p>",
        "id": 276304880,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648026705
    },
    {
        "content": "<p>essentially, originally Johann had created a type <code>fincarrier</code> which was <a href=\"https://leanprover-community.github.io/mathlib_docs/find/conj_classes.carrier\">docs#conj_classes.carrier</a> as a finset. The way he went about it was filtering <code>univ</code> and having a whole separate type; I thought this was a bit overkill and tried to replace it with <code>.to_finset</code>, but when I added the required fintype instances I got weird issues with timeouts and such like</p>",
        "id": 276305152,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648026891
    },
    {
        "content": "<p>Hmm... Did you add any fintype instance or was everything fully parametrized?</p>",
        "id": 276305366,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648027041
    },
    {
        "content": "<p>I added this instance:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_rel</span> <span class=\"o\">(</span><span class=\"n\">is_conj</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">conj_classes</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">carrier</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient.rec_on_subsingleton</span> <span class=\"n\">x</span> <span class=\"bp\">$</span> <span class=\"bp\">@</span><span class=\"n\">conjugates_of.fintype</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 276305607,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648027200
    },
    {
        "content": "<p>Then maybe try removing it and adding <code>[fintype (carrier x)]</code> explicitly to all lemmas using it.</p>",
        "id": 276305691,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648027245
    },
    {
        "content": "<p>That is, prove your lemmas about any way to hold the carrier in a finset, rather than the specific one you created.</p>",
        "id": 276305741,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648027277
    },
    {
        "content": "<p>I mean, this is what I did in the end, but surely it must be accessible to use at the point of use</p>",
        "id": 276306114,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648027507
    },
    {
        "content": "<p>plus I barely proved any lemmas, just let <code>simp</code> do its job</p>",
        "id": 276306120,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648027514
    },
    {
        "content": "<p>It sounds like you did the right thing.</p>",
        "id": 276306249,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1648027585
    },
    {
        "content": "<p>oh, cool, awesome!</p>",
        "id": 276307665,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648028560
    },
    {
        "content": "<p><code>fintype</code> is constructive data so the moment you add an instance you're claiming \"this is the only way that you are allowed to \"prove\" that this type is finite\". If we had a Prop-valued fintype, which is all that someone like me would ever need (until someone pops up and tells me I'm being naive) then you could use this instead and not get diamonds. In fact we do have such a class I guess -- <code>nonempty (fintype X)</code>. I think Yury was at one point considering making some API for this. Part of me thinks it's a great idea and part of me worries that it will just add to the confusion. If will certainly painlessly avoid the diamonds but as Bhavik and Yael and Eric etc have taught me, there are often ways to avoid the diamonds constructively (see eg Yael's suggestion above); basically we have got better at doing this sort of thing over the last couple of years.</p>",
        "id": 276311423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648030571
    },
    {
        "content": "<p>I do certainly think that making a Prop-valued fintype for mathematicians may be nice. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.card\">docs#nat.card</a> hasn't seemed to catch on much, even with the nice benefits of it with how we code things in Lean (the exponent of a cyclic group is _always_ its nat.card!)</p>",
        "id": 276313673,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648031904
    },
    {
        "content": "<p>I do still wish that <code>subsingleton</code> instances could play more of a part in instance search, but sadly I guess that's not technically feasible</p>",
        "id": 276315284,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648032705
    }
]