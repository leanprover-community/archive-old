[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"bp\">-</span><span class=\"mi\">4</span> <span class=\"c1\">-- works fine</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">7</span>  <span class=\"c1\">-- definition &#39;_example&#39; is noncomputable, it depends on &#39;real.division_ring&#39;</span>\n</code></pre></div>\n\n\n<p>I'm a mathematician and I can't tell the difference between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">-4</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">4</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3.7</mn></mrow><annotation encoding=\"application/x-tex\">3.7</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">7</span></span></span></span> -- they're both \"obviously real numbers\". What is going on here?</p>",
        "id": 198176299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589968781
    },
    {
        "content": "<p><code>3.7</code> is sugar for <code>37/10</code></p>",
        "id": 198176516,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589968891
    },
    {
        "content": "<p>division of reals is noncomputable</p>",
        "id": 198176525,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589968896
    },
    {
        "content": "<p><code>-4</code> is sugar for <code>-((1+1)+(1+1))</code></p>",
        "id": 198176546,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589968905
    },
    {
        "content": "<p>the ring structure is computable</p>",
        "id": 198176547,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589968905
    },
    {
        "content": "<p>But 3.7 is just sugar for 37/10</p>",
        "id": 198185175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589974475
    },
    {
        "content": "<p>oh this is silly. Why can't this be fixed? What needs to be done?</p>",
        "id": 198185206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589974498
    },
    {
        "content": "<p>beyond \"make division by certain reals (eg 10) computable\"</p>",
        "id": 198185256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589974529
    },
    {
        "content": "<p><code>(3.7 : \\Q)</code></p>",
        "id": 198185267,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589974542
    },
    {
        "content": "<p>or <a href=\"https://github.com/leanprover-community/mathlib/issues/1038\">#1038</a></p>",
        "id": 198185347,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589974575
    },
    {
        "content": "<p>So I want a computable function div: R -&gt; Q -&gt; R and a proof that it commutes with real.div via the coercion?</p>",
        "id": 198185386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589974618
    },
    {
        "content": "<p>Then can I just tag it with <code>norm_cast</code> and it will all work magically?</p>",
        "id": 198185408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589974639
    },
    {
        "content": "<p>I'm only asking that normal decimals work. I'm not suggesting recurring decimals (yet)</p>",
        "id": 198185431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589974659
    },
    {
        "content": "<p>Presumably <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span></span></span></span> is also not computable? Can this be fixed? Just some crap theoretical definition? Is the problem here that we are missing a mathematical theorem? If we knew <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi><mi mathvariant=\"normal\">/</mi><mn>4</mn><mo>=</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>1</mn><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>3</mn><mo>+</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>5</mn><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>7</mn><mo>+</mo><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">\\pi/4=1/1-1/3+1/5-1/7+\\dots</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span><span class=\"mord\">/</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">/</span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.12em;vertical-align:0em;\"></span><span class=\"minner\">…</span></span></span></span> are we done?</p>",
        "id": 198185552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589974730
    },
    {
        "content": "<p>Is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">e</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">e</span></span></span></span> computable?</p>",
        "id": 198185603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589974759
    },
    {
        "content": "<p>I'm not actually going to compute with it! I just want a proof that it's computable, not code that will ever run.</p>",
        "id": 198185685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589974803
    },
    {
        "content": "<p>Wasn't it once said that no physicist could ever need <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span></span></span></span> to more than 30 decimal places? Well, I am wondering whether no proper mathematician ever needs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span></span></span></span> to more than about 4 decimal places, and we have this  in Lean already. People like my prestigious colleague Toby Gee who is an expert in the Langlands program probably never assumed anything about its value beyond possibly the fact that it was positive and finite.</p>",
        "id": 198185855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589974922
    },
    {
        "content": "<p>Being computable in Lean's sense (for the specific definition of ℝ that mathlib has) doesn't imply that you can calculate its digits in any sense.</p>",
        "id": 198186624,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589975435
    },
    {
        "content": "<p>Why do you want it to be computable?</p>",
        "id": 198186658,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589975467
    },
    {
        "content": "<p>I think Kevin doesn't want to write <code>noncomputable example</code>.</p>",
        "id": 198188104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589976393
    },
    {
        "content": "<p>For <code>example : ℝ := 3.7</code> I think that's impossible given the way <code>3.7</code> is elaborated and the type of <code>/</code>, even if you redefined <code>ℝ</code>.</p>",
        "id": 198188619,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589976735
    },
    {
        "content": "<p>Haskell uses a different desugaring of fractional literals, basically Kenny's <code>(3.7 : \\Q)</code>, and that one would work.</p>",
        "id": 198188810,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589976854
    },
    {
        "content": "<p>Constructively <code>/</code> can't be totalized and instead you need to provide a third argument <code>y # 0</code>, which is data</p>",
        "id": 198189217,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589977078
    },
    {
        "content": "<p>I thought Kevin just writes <code>noncomputable theory</code> in every file</p>",
        "id": 198193368,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589979252
    },
    {
        "content": "<p>I forgot and then I wondered what was going on</p>",
        "id": 198202502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589983347
    },
    {
        "content": "<p>My main question was basically that every real number a mathematician uses is computable so why do we even have to switch it on</p>",
        "id": 198202610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589983395
    },
    {
        "content": "<p>Every explicit real number i mean</p>",
        "id": 198202653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589983409
    },
    {
        "content": "<p>One option is to define cauchy sequences as an equivalence class (i.e a subtype of <code>set (ℕ → ℚ)</code>) instead of a quotient.  Or we could do Dedeking reals.</p>",
        "id": 198203811,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589983825
    },
    {
        "content": "<p>I don't know why everyone gets so hung up about the <code>noncomputable</code> tag. The tag is only an approximation to what noncomputable actually means. It's just some tag to make programming in Lean a bit easier that's irrelevant for types that you're not actually going to compute with. The idea of defining something to be a set just because someone made some decision that sets don't have to be marked noncomputable even though they're not really computable just seems silly to me. Sets are outside of the domain of the noncomputable predicate really, and calling them computable is just some junk value it returns outside the domain.</p>",
        "id": 198207956,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589985572
    },
    {
        "content": "<p>Why is Kevin even interested in <code>3.7</code>? You shouldn't divide junk by 10!</p>",
        "id": 198208376,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589985756
    },
    {
        "content": "<p>Here's a nice \"computable\" ring.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"n\">def</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"bp\">⟨ℤ⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>",
        "id": 198209913,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589986441
    },
    {
        "content": "<p>Along these lines, what if we just map <code>real</code> into <code>set real</code> by singleton sets, then transfer everything there. Now it's \"computable\" (because there is no computational content whatsoever).</p>",
        "id": 198210622,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589986698
    },
    {
        "content": "<p>I guess Gabriel's suggestion of Dedekind cuts has the same result, but that requires more work.</p>",
        "id": 198210690,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589986727
    },
    {
        "content": "<p>Oh, also now I understand what he meant by equivalence classes too.</p>",
        "id": 198210839,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589986795
    },
    {
        "content": "<p>There is an interface for this btw, <code>erased real</code> is exactly what you describe</p>",
        "id": 198215441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589988585
    },
    {
        "content": "<p>So you're saying we should define <code>real</code> as <code>erased Cauchy</code>?</p>",
        "id": 198215830,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1589988727
    },
    {
        "content": "<p>Would this have any effect on unfolding? Could we somehow exploit this new definition to avoid having to use <code>irreducible</code> directly?</p>",
        "id": 198216020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589988819
    },
    {
        "content": "<p>For example, <code>real.add</code> could be an inductive proposition!</p>",
        "id": 198216032,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589988826
    }
]