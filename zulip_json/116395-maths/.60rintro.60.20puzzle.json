[
    {
        "content": "<p>I don't understand the behaviour of <code>rintro</code> here, and apparently <code>rintro?</code> doesn't either:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟨⟩</span><span class=\"o\">,</span><span class=\"bp\">⟨⟩</span><span class=\"o\">,</span> <span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">H3</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟩⟩</span><span class=\"o\">,</span> <span class=\"c1\">-- ?? I can put as many as I like</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  1 goal</span>\n<span class=\"cm\">  z : ℝ,</span>\n<span class=\"cm\">  a : ↑z = ↑z -- where did a come from??</span>\n<span class=\"cm\">  ⊢ z = z</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">refl</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintro</span><span class=\"err\">?</span><span class=\"o\">,</span> <span class=\"c1\">-- Try this: rintro rfl</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"c1\">-- subst tactic failed</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198974314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590629476
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">w</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span> <span class=\"c1\">-- a again</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 198974432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590629609
    },
    {
        "content": "<p>rcases will ignore any arguments to an inductive type past the number the constructor is expecting</p>",
        "id": 198975552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590630850
    },
    {
        "content": "<p>In this case the inductive type is <code>eq</code> and so anything beyond <code>⟨⟩</code> is ignored</p>",
        "id": 198975592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590630898
    },
    {
        "content": "<p>i.e. <code>⟨a⟩</code> or <code>⟨a,a⟩</code> or <code>⟨a|⟨a|_⟩,b⟩</code> are all the same</p>",
        "id": 198975617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590630931
    },
    {
        "content": "<p>As for the <code>a</code>, that's the default name of the variable in the implication (see: <code>a</code> bug) so <code>rintro</code> first does <code>intro a</code> and then <code>cases a</code>. However <code>cases</code> doesn't always clean up after itself and the equality <code>a</code>, now trivial, still hangs around. You can mostly ignore it since it had the intended effect - the goal is now <code>z = z</code></p>",
        "id": 198975775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590631094
    },
    {
        "content": "<p><code>subst</code> fails here because the equality is not of the form variable = term or term = variable</p>",
        "id": 198975826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590631183
    },
    {
        "content": "<p>The issue with <code>subst</code> is that it's what <code>rintro?</code> is telling me to do. I wouldn't expect these suggestions to fall when using eg <code>squeeze_simp</code> or <code>library_search</code></p>",
        "id": 198989311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590649733
    },
    {
        "content": "<p>I agree that <code>rintro?</code> should preferably suggest a <code>Try this: xyzzy</code> that doesn't give an error when you actually try it.</p>",
        "id": 198989441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590649891
    },
    {
        "content": "<p>I ran into something similar (where <code>rcases?</code> gave suggestions that didn't work) in <a href=\"https://github.com/leanprover-community/mathlib/issues/2794\">#2794</a>.</p>",
        "id": 198990481,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1590650868
    },
    {
        "content": "<p>It might not always be possible. Would failing instead of providing an incorrect <code>Try this:</code> be acceptable in this situation?</p>",
        "id": 198991795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590651998
    },
    {
        "content": "<p>Could it be made more conservative? So that it backtracks and suggests a less deeply deconstructing pattern?</p>",
        "id": 198991925,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590652109
    },
    {
        "content": "<p>that should work, although it won't work in <code>rcases</code> since it always does at least one case split</p>",
        "id": 198991992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590652167
    },
    {
        "content": "<p>there are also some case splits that are not representable by an rcases pattern</p>",
        "id": 198992014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1590652192
    }
]