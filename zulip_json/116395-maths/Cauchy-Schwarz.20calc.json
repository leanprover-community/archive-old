[
    {
        "content": "<p>Sometimes when someone new comes here to ask maths questions, I wonder if we have a new mathematician interested in Lean. So I googled <span class=\"user-mention\" data-user-id=\"117987\">@Patrick Stevens</span>  and found <a href=\"https://www.patrickstevens.co.uk/cauchy-schwarz-proof/\" target=\"_blank\" title=\"https://www.patrickstevens.co.uk/cauchy-schwarz-proof/\">https://www.patrickstevens.co.uk/cauchy-schwarz-proof/</a></p>",
        "id": 127276213,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527630682
    },
    {
        "content": "<p>So I thought: good opportunity to try again to compute with Lean</p>",
        "id": 127276218,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527630696
    },
    {
        "content": "<p>And of course I'm disappointed</p>",
        "id": 127276275,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527630728
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">key</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span>  <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x_pos</span> <span class=\"n\">y_pos</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">add_pos_of_pos_of_nonneg</span> <span class=\"n\">x_pos</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"n\">y_pos</span><span class=\"o\">),</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"n\">y</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">div_le_of_le_mul</span> <span class=\"bp\">;</span> <span class=\"n\">assumption</span>  <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_of_sub_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_of_mul_le_mul_right</span> <span class=\"bp\">_</span> <span class=\"n\">x_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_of_mul_le_mul_right</span> <span class=\"bp\">_</span> <span class=\"n\">y_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_sub_right_distrib</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_sub_right_distrib</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">],</span>\n  <span class=\"n\">conv</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_rhs</span><span class=\"o\">,</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">skip</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">congr</span><span class=\"o\">,</span>\n    <span class=\"n\">skip</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">right_distrib</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">div_mul_cancel</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">x_pos</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">]),</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">div_mul_cancel</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">y_pos</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">ring</span><span class=\"o\">,</span><span class=\"n\">ring</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">-</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n    <span class=\"n\">finish</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_self_nonneg</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127276280,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527630741
    },
    {
        "content": "<p>It's not only about the banana phone issue</p>",
        "id": 127276289,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527630761
    },
    {
        "content": "<p>Everything has been painful</p>",
        "id": 127276311,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527630787
    },
    {
        "content": "<p>How should I write such proofs?</p>",
        "id": 127276316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527630796
    },
    {
        "content": "<p>That's quite a collection - it's a direct conversion of the one I linked, isn't it, which is very slick for human consumption</p>",
        "id": 127276375,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1527630845
    },
    {
        "content": "<p>Presumably there are easier proofs to transcribe for Lean</p>",
        "id": 127276383,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1527630862
    },
    {
        "content": "<p>someday, <a href=\"https://en.wikipedia.org/wiki/Cylindrical_algebraic_decomposition\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Cylindrical_algebraic_decomposition\">https://en.wikipedia.org/wiki/Cylindrical_algebraic_decomposition</a> might show up in Lean</p>",
        "id": 127276389,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527630878
    },
    {
        "content": "<p>only the key lemma \"Naturally, this lemma is trivial — once it is conceived.\"</p>",
        "id": 127276393,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527630887
    },
    {
        "content": "<p>My interest was not in proving Cauchy-Schwarz. It was this sentence \"Naturally, this lemma is trivial — once it is conceived.\"</p>",
        "id": 127276408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527630918
    },
    {
        "content": "<p>use better theorems</p>",
        "id": 127276413,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527630930
    },
    {
        "content": "<p>e.g. you can use <code>add_pos</code> instead of that business</p>",
        "id": 127276424,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527630942
    },
    {
        "content": "<p>I did the exercise on paper in 30 seconds and thought I would try in Lean</p>",
        "id": 127276425,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527630943
    },
    {
        "content": "<p><code>add_pos_of_pos_of_nonneg x_pos (le_of_lt y_pos)</code></p>",
        "id": 127276433,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527630953
    },
    {
        "content": "<p>and e.g. there is a theorem linking <code>(x+y)^-1</code> to <code>x^-1</code> and <code>y^-1</code></p>",
        "id": 127276482,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527630968
    },
    {
        "content": "<p>I couldn't find add_pos because I was looking for add_pos_of_pos_of_pos</p>",
        "id": 127276498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527631005
    },
    {
        "content": "<p>The question is: I stare at my paper proof, how can I get a Lean proof?</p>",
        "id": 127276519,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527631047
    },
    {
        "content": "<p>a lot of training and familiarity with existing theorems</p>",
        "id": 127276524,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527631066
    },
    {
        "content": "<p>I did that as training indeed</p>",
        "id": 127276578,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527631105
    },
    {
        "content": "<p>But probably Andrew is right</p>",
        "id": 127276580,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527631110
    },
    {
        "content": "<p>We need more automation</p>",
        "id": 127276581,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527631114
    },
    {
        "content": "<p>nothing else is viable</p>",
        "id": 127276583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527631119
    },
    {
        "content": "<p>Note that the situation would be much worse without <code>ring</code></p>",
        "id": 127276598,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527631147
    },
    {
        "content": "<p>there are limits to algorithms such as the above though. they will take forever to run if you have a particularly giant set of real inequalities since the time it takes to run increases exponentially vs the number of terms</p>",
        "id": 127276621,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527631187
    },
    {
        "content": "<p>I disagree</p>",
        "id": 127276622,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527631187
    },
    {
        "content": "<p>but I don't have time to disprove your claim</p>",
        "id": 127276626,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527631195
    },
    {
        "content": "<p>I should be sleeping anyway (of course I thought this calculation would be shorter...)</p>",
        "id": 127276696,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527631231
    },
    {
        "content": "<p>Of course, \"expand and clear denominators\" should be mechanically easy, right? Is there some reason why an \"expand\" tactic couldn't exist? and \"clear denominators\" likewise, though that requires a bit of casewise am-i-negative reasoning in general</p>",
        "id": 127276810,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1527631418
    },
    {
        "content": "<p>if you stuck the same equation into Sage math, what would its simplifier spit out?</p>",
        "id": 127276908,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527631552
    },
    {
        "content": "<p>Mathematica:</p>\n<div class=\"codehilite\"><pre><span></span>In[43]:= (a + b)^2/(x + y) &lt;= a^2/x + b^2/y //\n FullSimplify[#, x &gt; 0 &amp;&amp; y &gt; 0] &amp;\n\nOut[43]= (b x - a y)^2 &gt;= 0\n</pre></div>",
        "id": 127276986,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1527631660
    },
    {
        "content": "<p>simplifies to True under the additional assumption that a,b are real</p>",
        "id": 127277039,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1527631696
    },
    {
        "content": "<p>don't know about sage, i'm afraid</p>",
        "id": 127277050,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1527631716
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">key</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"n\">y</span><span class=\"o\">),</span>\n<span class=\"k\">from</span> <span class=\"k\">calc</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel_left</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"k\">from</span> <span class=\"n\">ne_of_gt</span> <span class=\"o\">(</span><span class=\"n\">add_pos</span> <span class=\"n\">Hx</span> <span class=\"n\">Hy</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le_add_of_nonneg_right</span> <span class=\"err\">$</span> <span class=\"n\">mul_self_nonneg</span> <span class=\"bp\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel&#39;</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">Hy</span><span class=\"o\">),</span> <span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel_left</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">Hx</span><span class=\"o\">)],</span>\n<span class=\"n\">le_of_mul_le_mul_left</span> <span class=\"n\">H</span> <span class=\"err\">$</span> <span class=\"n\">mul_pos</span> <span class=\"o\">(</span><span class=\"n\">mul_pos</span> <span class=\"o\">(</span><span class=\"n\">add_pos</span> <span class=\"n\">Hx</span> <span class=\"n\">Hy</span><span class=\"o\">)</span> <span class=\"n\">Hx</span><span class=\"o\">)</span> <span class=\"n\">Hy</span>\n</pre></div>",
        "id": 127277668,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527632659
    },
    {
        "content": "<p>ok I did use <code>ring</code></p>",
        "id": 127277669,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527632662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 127277672,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527632667
    },
    {
        "content": "<p>and I just burnt a lot of my time</p>",
        "id": 127277675,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527632677
    },
    {
        "content": "<p>I'm busy</p>",
        "id": 127277676,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527632679
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import tactic.ring data.real.basic\n\ntheorem pow_two_nonneg {α} [linear_ordered_ring α] (a : α) : 0 ≤ a ^ 2 :=\nby rw pow_two; exact mul_self_nonneg _\n\nlemma key (a b x y : ℝ) (x0 : 0 &lt; x) (y0 : 0 &lt; y) : (a+b)^2/(x+y) ≤ a^2/x + b^2/y :=\nbegin\n  apply (div_le_iff (add_pos x0 y0)).2,\n  apply (mul_le_mul_left (mul_pos x0 y0)).1,\n  apply sub_nonneg.1,\n  refine calc x * y * ((a ^ 2 / x + b ^ 2 / y) * (x + y)) - x * y * (a + b) ^ 2\n       = ((x / x * a ^ 2 * y + y / y * b ^ 2 * x) * (x + y)) - x * y * (a + b) ^ 2 : by ring\n   ... = ((a ^ 2 * y + b ^ 2 * x) * (x + y)) - x * y * (a + b) ^ 2 : by simp [ne_of_gt x0, ne_of_gt y0]\n   ... = (b * x - a * y) ^ 2 : by ring; ring\n   ... ≥ 0 : pow_two_nonneg _\nend\n</pre></div>",
        "id": 127278096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527633341
    },
    {
        "content": "<p>Since <code>ring</code> can handle everything except the divisions, I insert a step in the middle for <code>simp</code> to cancel the <code>x/x</code> terms, but otherwise this is all <code>ring</code></p>",
        "id": 127278173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527633461
    },
    {
        "content": "<p>or with a bit more up front cross multiplication:</p>\n<div class=\"codehilite\"><pre><span></span>lemma key (a b x y : ℝ) (x0 : 0 &lt; x) (y0 : 0 &lt; y) : (a+b)^2/(x+y) ≤ a^2/x + b^2/y :=\nbegin\n  rw [div_add_div _ _ (ne_of_gt x0) (ne_of_gt y0),\n    div_le_iff (add_pos x0 y0), div_mul_eq_mul_div, le_div_iff (mul_pos x0 y0),\n    ← sub_nonneg],\n  refine calc 0 ≤ (b * x - a * y) ^ 2 : pow_two_nonneg _\n   ... = (a ^ 2 * y + x * b ^ 2) * (x + y) - (a + b) ^ 2 * (x * y) : by ring; ring\nend\n</pre></div>",
        "id": 127278788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527634326
    },
    {
        "content": "<p>^. I feel like whenever I have a complicated thing like this, <code>calc</code> is the way to go. And I solve the whole thing by hand on scratch paper, like I time-traveled back to high-school algebra class...</p>",
        "id": 127279233,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527635099
    },
    {
        "content": "<p>throwbacks</p>",
        "id": 127279240,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527635110
    },
    {
        "content": "<p>but if this stuff is super obvious, and you dislike proving it, why not use <code>sorry</code>?</p>",
        "id": 127279293,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527635181
    },
    {
        "content": "<p>Thank you very much Kenny and Mario. Kenny's proof is exactly what I don't want to do (and nobody should have to do if proof assistants want to become tools for mathematicians). Mario's proof is what I wanted to do (clear denominators and use ring). I think the most important thing I missed was:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span>  <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n</pre></div>\n\n\n<p>I thought that, in such a case, <code>ring</code> would see <code>(a^2 / x)</code> as atomic and fail. It makes it even harder for me to understand why <code>ring</code> couldn't be extended to do the whole computation, searching for <code>x &gt; 0</code> or <code>x ≠ 0</code> in context</p>",
        "id": 127294574,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527665125
    },
    {
        "content": "<p><code>ring</code> doesn't know anything about orders, right? So it doesn't know what to do with <code>x &gt; 0</code>.</p>",
        "id": 127294647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527665239
    },
    {
        "content": "<p>it could try to apply <code>ne_of_gt</code> and <code>ne_of_lt</code> on all hypotheses</p>",
        "id": 127294690,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527665288
    },
    {
        "content": "<p>One more question for Mario: why did you use <code>refine</code> instead of <code>exact</code>, which also works and is more explicit?</p>",
        "id": 127294714,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527665390
    },
    {
        "content": "<p>Buth it isn't meant to be a generic tactic. It only uses ring axioms.</p>",
        "id": 127294715,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527665390
    },
    {
        "content": "<p>Then give another name to the more general tactic</p>",
        "id": 127294762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527665421
    },
    {
        "content": "<p>But you would want to do something like <code>by schoolkid using ring</code> or something like that</p>",
        "id": 127294765,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527665436
    },
    {
        "content": "<p>We want a <code>schoolkid</code> tactic that does the completely easy stuff, and it should have a feature that you can give it a specialised tactic like <code>ring</code> as a hint, so that all of a sudden the schoolkid is lord of the rings.</p>",
        "id": 127294825,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527665546
    },
    {
        "content": "<p>What about building a <code>clear_denominator</code> tactic? It would search for all divisions in the goal, generate sub-goals saying denominators are non-zero, try to discharge these goals using assumptions (and <code>ne_of_gt</code> and <code>ne_of_lt</code> of assumptions), check whether the goal is equality or inequality and apply <code>mul_le_mul_left</code> and its friend, followed by <code>ring</code> to simplify, and <code>simp [all stuff ≠ 0 gathered so far]</code></p>",
        "id": 127294906,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527665679
    },
    {
        "content": "<p>We really need to get back Simon</p>",
        "id": 127294965,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527665773
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> where are you?</p>",
        "id": 127294967,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527665779
    },
    {
        "content": "<p>Right. A clear denominator tactic makes sense as well.</p>",
        "id": 127295049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527666001
    },
    {
        "content": "<p>So, here is a proposal for <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's next \"Live Zulip\": walk through a tactic file, and teach mathematicians how to write tactics (-;</p>",
        "id": 127295106,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527666068
    },
    {
        "content": "<p>Hey <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>! I haven't completely disappeared. Is it just me or has there been a whole lot more activity in here? It's getting hard to follow part time!</p>",
        "id": 127303161,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527679897
    },
    {
        "content": "<p>I'm not sure I get what <code>clear_denominator</code> would do exactly. How does <code>mul_le_mul_left</code> help with division?</p>",
        "id": 127303262,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527680056
    },
    {
        "content": "<blockquote>\n<p>Is it just me or has there been a whole lot more activity in here?</p>\n</blockquote>\n<p>It's not just you. Even being away from Zulip for a weekend leaves one with thousands of messages to either wade through or mark as read. <span class=\"emoji emoji-1f61d\" title=\"stuck out tongue closed eyes\">:stuck_out_tongue_closed_eyes:</span></p>",
        "id": 127303516,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527680586
    },
    {
        "content": "<p>I thought the Zulip threads would help keeping track of stuff. I'm not sure what would make it easier</p>",
        "id": 127303597,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527680754
    },
    {
        "content": "<p>The plus side is, it's awesome that Lean is getting used like this</p>",
        "id": 127303640,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527680787
    },
    {
        "content": "<p>We have trouble with thread discipline</p>",
        "id": 127303852,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527681223
    },
    {
        "content": "<p>But we try</p>",
        "id": 127303855,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527681226
    },
    {
        "content": "<p>Yeah? What kind of trouble? It seems like specific threads are getting created for the right subjects. The problem might just be in the number of threads. I don't know if we need to categorize them better or something else</p>",
        "id": 127305130,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527683495
    },
    {
        "content": "<p>Many thread actually mix different topics</p>",
        "id": 127305822,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527684383
    },
    {
        "content": "<p>I think Kevin should speak in complete sentences</p>",
        "id": 127306593,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527685499
    },
    {
        "content": "<p>instead of fragments</p>",
        "id": 127306602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527685505
    },
    {
        "content": "<p>of sentences</p>",
        "id": 127306607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527685509
    },
    {
        "content": "<p>that create tons of messages and fill</p>",
        "id": 127306617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527685521
    },
    {
        "content": "<p>my screen</p>",
        "id": 127306622,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527685524
    },
    {
        "content": "<p>Yeah I noticed that too. Also, write one message with one self contained question and wait for an answer. Right now, when I see his messages I don't know when he's going to be done writing and I eventually just stop reading. One message would help me (and I suspect others) decide whether the question is something I can help with</p>",
        "id": 127306911,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527685927
    },
    {
        "content": "<p>Why did you provoked him?!</p>",
        "id": 127312365,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527693063
    },
    {
        "content": "<p>Provoke how?</p>",
        "id": 127315830,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527697177
    },
    {
        "content": "<p>Did you see how many times he hit return in the middle of a sentence since you posted that message?</p>",
        "id": 127315894,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527697219
    },
    {
        "content": "<p>That's all your fault <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue winking eye\">:stuck_out_tongue_winking_eye:</span></p>",
        "id": 127315903,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527697237
    },
    {
        "content": "<p>Haha! I'm secretly a terrorist!</p>",
        "id": 127315921,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527697287
    },
    {
        "content": "<p>Sorry typo: theorist</p>",
        "id": 127315925,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527697295
    },
    {
        "content": "<p>I don't follow that thread so I didn't suffer the consequences of that carnage</p>",
        "id": 127315967,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527697330
    },
    {
        "content": "<blockquote>\n<p>So, here is a proposal for <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's next \"Live Zulip\": walk through a tactic file, and teach mathematicians how to write tactics (-;</p>\n</blockquote>\n<p>So I was just catching up in this thread, and you and Patrick were talking about tactics and \"maybe Simon can write us a tactic\" -- and who is the only mathematician who knows how to write tactics? I reckon it's <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> . Scott -- how did you learn to write tactics? I don't want to keep pestering Simon. I see dumb stuff like the proof that pnat is a comm_monoid, and the proof of every axiom is \"it's true for nat so done\"</p>",
        "id": 127317785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700080
    },
    {
        "content": "<p>and that happened to me several times myself when doing comm_ring stuff with schemse</p>",
        "id": 127317833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700099
    },
    {
        "content": "<p>\"I've got to prove this direct limit satisfies all the ring axioms\"</p>",
        "id": 127317842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700117
    },
    {
        "content": "<p>\"let's see what this entails\"</p>",
        "id": 127317843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700121
    },
    {
        "content": "<p>\"it entails invoking that same axiom for that other ring\"</p>",
        "id": 127317850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700135
    },
    {
        "content": "<p>It's about time I learnt to automate that. It comes up a lot.</p>",
        "id": 127317866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700155
    },
    {
        "content": "<p>When we start on perfectoid spaces we'll be proving limits of topological rings are topological rings</p>",
        "id": 127317878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700176
    },
    {
        "content": "<p>there's going to be a lot of \"this proof is obvious but not rfl\" stuff</p>",
        "id": 127317892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700193
    },
    {
        "content": "<p>and this can surely be done with tactics</p>",
        "id": 127317937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527700206
    },
    {
        "content": "<p>I actually enjoy getting your automation challenges. I admit (sorry!) that I'm not as quick to address them as I'd like. And lately, I've only gotten slower as I took a part time job and stepped up my writing efforts</p>",
        "id": 127320901,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527703611
    },
    {
        "content": "<p>Just for fun, I checked it in Isabelle to see where next-level automation can get you. It did not work directly, but almost:</p>\n<div class=\"codehilite\"><pre><span></span>lemma\n  fixes a b x y::real\n  assumes &quot;x &gt; 0&quot; &quot;y &gt; 0&quot;\n  shows &quot;(a+b)^2/(x+y) ≤ a^2/x + b^2/y&quot;\nproof -\n  have &quot;(a * y - b * x)^2 ≥ 0&quot; by simp\n  then show ?thesis\n    using assms by (simp add: algebra_simps divide_simps power2_eq_square)\nqed\n</pre></div>\n\n\n<p>I first tried to show the goal just by applying <code>simp</code> with <code>divide_simps</code> and  <code>algebra_simps</code> (simplification rules which clear out divisors, and apply associativity, commutativity), but square expansion is not automatic so I had to add it simp. It reduced everything to something which clearly was equivalent to the positivity of <code>(ay-bx)^2</code>, so I added it as an intermediate step, and done. No piece of paper, no computation on my side (and no fancy tactic such as <code>ring</code> or <code>omega</code>, everything was done by the simplifier). I really hope Lean can do the same in the near future!</p>",
        "id": 127322540,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1527705519
    },
    {
        "content": "<p>The main problem with using <code>simp</code> for ring equalities is that simp isn't good with cancelling negatives</p>",
        "id": 127322647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527705650
    },
    {
        "content": "<p>To be honest, <code>simp</code> in Isabelle is in fact <code>simp</code> on steroids: it has built-in \"simprocs\" that will cancel out negatives, group together common factors, and things like that. I guess it makes <code>by (simp add: algebra_simps)</code> as powerful as the <code>ring</code>tactic in Lean. If I understand correctly, Johannes is working on simprocs for Lean, right?</p>",
        "id": 127323145,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1527706317
    },
    {
        "content": "<p>Yes, I'm working on a simplifier tactic with simp proc support.</p>",
        "id": 127323497,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527706799
    },
    {
        "content": "<p>Is there a one-line explanation of what \"simpprocs\" are?</p>",
        "id": 127323678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527706984
    },
    {
        "content": "<p>instead of simp rules, it is a tactic which gets invoced by the simplifier. E.g. canellation would be a simproc which is called on a pattern of the form <code>_ = _</code> where the type of _  has a cancellative monoid, then it tries to find common elements on both sides of the equation and remove them.</p>",
        "id": 127324193,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527707660
    }
]