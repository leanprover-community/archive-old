[
    {
        "content": "<p>Here is a nice little challenge that I don't really know how to formalise.<br>\nWe need graphs. What is a graph? In this case it will be a bunch of nodes and edges. No multiple edges, no self-loops, no directed edges.<br>\nIf <code>g</code> is a node, then <code>N(g)</code> is the set of its neighbouring nodes, so <code>{g' : G | (g,g') ∈ E(G)}</code>.</p>\n<p>Let <code>G</code> be a finite connected graph. And let <code>w : G → pnat</code> be a function that labels the nodes of <code>G</code> with positive natural numbers. We say that <code>(G, w)</code> is <em>good</em> if it satisfies the following condition: for all <code>g : G</code> we have <code>2 * w(g) = sum_{g' ∈ N(g)} w(g')</code>.</p>\n<p>Challenge: enumerate all good finite connected labeled graphs <code>(G, w)</code>.</p>",
        "id": 157604832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549371942
    },
    {
        "content": "<p>Define \"enumerate\"</p>",
        "id": 157606026,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549373218
    },
    {
        "content": "<p>ah, this is a step in the CFSG I think</p>",
        "id": 157606386,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549373612
    },
    {
        "content": "<p>these are dynkin diagrams?</p>",
        "id": 157606392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549373623
    },
    {
        "content": "<p>Bingo! Now how do we put that in Lean?</p>",
        "id": 157608176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549375373
    },
    {
        "content": "<p>(Note, you don't get all Dynkin diagrams. Only the ones without multi-edges. And you'll also miss <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">A_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>.)</p>",
        "id": 157608200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549375411
    },
    {
        "content": "<p>The list is pretty short, right? I thought it was a simple counting argument, but I doubt some general enumeration mechanism will help</p>",
        "id": 157608351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549375529
    },
    {
        "content": "<p>Should Dynkin diagrams be some sort of inductive type?</p>",
        "id": 157608413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549375576
    },
    {
        "content": "<p>I have no idea how to do graph theory in Lean.</p>",
        "id": 157608422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549375592
    },
    {
        "content": "<p>Actually I'm thinking more about the math part here</p>",
        "id": 157608431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549375608
    },
    {
        "content": "<p>the representation depends on how you intend to argue it</p>",
        "id": 157608450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549375623
    },
    {
        "content": "<p>I guess I agree with \"a simple counting argument\".</p>",
        "id": 157608541,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549375691
    },
    {
        "content": "<p>Do you know why the list is finite or how you argue for this?</p>",
        "id": 157608666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549375810
    },
    {
        "content": "<p>But what does that mean for formalising this?</p>",
        "id": 157608667,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549375810
    },
    {
        "content": "<p>The list isn't exactly finite.</p>",
        "id": 157608671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549375822
    },
    {
        "content": "<p>do you know why it's tightly constrained</p>",
        "id": 157608690,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549375842
    },
    {
        "content": "<p>Yes</p>",
        "id": 157608693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549375848
    },
    {
        "content": "<p>First you have to bound <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">#</mi><mi>N</mi><mo>(</mo><mi>g</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\# N(g)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathrm\">#</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">N</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 157608783,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549375935
    },
    {
        "content": "<p>After that you need a little argument with arithmetic progressions (of very short length).</p>",
        "id": 157608807,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549375972
    },
    {
        "content": "<p>So I guess you have an arbitrary graph, on an arbitrary type, and you produce a bijection to some known graph by cases</p>",
        "id": 157609065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549376227
    },
    {
        "content": "<p>the graph itself can be represented by a symmetric irreflexive edge relation like you said</p>",
        "id": 157609086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549376256
    },
    {
        "content": "<p>To prove graph isomorphism formally seems a little tedious. One general method: If you have an injective function on vertices, you know all the degrees of the vertices, and you have a list of edges that are mapped to the other graph, which matches the degrees, then you can prove that the map is a graph isomorphism</p>",
        "id": 157609400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549376598
    },
    {
        "content": "<p>(I hate doing graphs formally, there's no great method)</p>",
        "id": 157609467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549376648
    },
    {
        "content": "<blockquote>\n<p>(I hate doing graphs formally, there's no great method)</p>\n</blockquote>\n<p>That's discouraging.</p>",
        "id": 157609552,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549376746
    },
    {
        "content": "<p>well, general graphs are fine, but small finite graphs are a pain</p>",
        "id": 157609604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549376764
    },
    {
        "content": "<p>just like small finite anything</p>",
        "id": 157609630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549376780
    },
    {
        "content": "<p>the less concretely you have to talk about the stuff, the better</p>",
        "id": 157609659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549376823
    },
    {
        "content": "<p>so in this case you might be able to avoid doing graph isomorphism entirely, and instead say something like \"there is a vertex of degree 3 attached to vertices of degree 2, there is a path to such and such with this pattern, etc\"</p>",
        "id": 157609765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549376904
    },
    {
        "content": "<p>and maybe that's good enough for whatever purpose you need this classification</p>",
        "id": 157609796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549376937
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">E</span>     <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">symm</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"bp\">↔</span> <span class=\"n\">E</span> <span class=\"n\">g₂</span> <span class=\"n\">g₁</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">irref</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">E</span> <span class=\"n\">g</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">irref</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">glue</span> <span class=\"o\">{</span><span class=\"n\">G₁</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">gr₁</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">G₁</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">G₂</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">gr₂</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">G₁</span> <span class=\"bp\">→</span> <span class=\"n\">G₂</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">G₁</span> <span class=\"err\">⊕</span> <span class=\"n\">G₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">g&#39;</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span><span class=\"bp\">;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g&#39;</span> <span class=\"k\">with</span> <span class=\"n\">g₁&#39;</span> <span class=\"n\">g₂&#39;</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">gr₁</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">g₁</span> <span class=\"n\">g₁&#39;</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">E</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂&#39;</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">E</span> <span class=\"n\">g₁&#39;</span> <span class=\"n\">g₂</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">gr₂</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"n\">g₂</span> <span class=\"n\">g₂&#39;</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">g&#39;</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span><span class=\"bp\">;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g&#39;</span> <span class=\"k\">with</span> <span class=\"n\">g₁&#39;</span> <span class=\"n\">g₂&#39;</span><span class=\"bp\">;</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">irref</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span><span class=\"bp\">;</span>\n    <span class=\"n\">exact</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">irref</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Dynkin</span>\n\n<span class=\"n\">def</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">irref</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n    <span class=\"o\">{</span> <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">{</span> <span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_zero</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">},</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_left_cancel</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">D_type</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"err\">⊕</span> <span class=\"n\">unit</span>\n\n<span class=\"n\">def</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">graph</span> <span class=\"o\">(</span><span class=\"n\">D_type</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">glue</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">Dynkin</span>\n</pre></div>",
        "id": 157614420,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549380560
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Does it make sense to do something like this. Or is this asking for trouble somewhere down the road?</p>",
        "id": 157614468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549380596
    },
    {
        "content": "<p>One can also do E6, E7, and E8 by gluing. But I guess these are better done as inductive types, to allow easy case bashing.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">E6_type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"err\">⊕</span> <span class=\"n\">fin</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">def</span> <span class=\"n\">E7_type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"err\">⊕</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">def</span> <span class=\"n\">E8_type</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span> <span class=\"err\">⊕</span> <span class=\"n\">fin</span> <span class=\"mi\">4</span>\n\n<span class=\"n\">def</span> <span class=\"n\">E6</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">E6_type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">glue</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">E7</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">E7_type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">glue</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">E8</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"n\">E8_type</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">glue</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 157614998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549380954
    },
    {
        "content": "<p>I think there is a good case for bundling here, it would allow you to skip the <code>D</code> and <code>D_type</code> thing</p>",
        "id": 157615667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549381493
    },
    {
        "content": "<p>at least based on these few examples</p>",
        "id": 157615683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549381507
    },
    {
        "content": "<p>Probably <code>graph.symm</code> should be unidirectional</p>",
        "id": 157615790,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549381577
    },
    {
        "content": "<p>Can you explain why? I'd like to get a better understanding for that kind of issues.</p>",
        "id": 157615809,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549381609
    },
    {
        "content": "<p>well, all of the constructions you have done so far have to come in two parts</p>",
        "id": 157615847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549381652
    },
    {
        "content": "<p>Because it's equivalent and easier to prove.</p>",
        "id": 157615858,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1549381669
    },
    {
        "content": "<p>and the type doesn't have much more semantic information than \"the vertex type of the graph\"</p>",
        "id": 157615865,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549381681
    },
    {
        "content": "<p>There are other ways to use a data structure like this for which unbundled might make sense, but for building and manipulating small graphs I think it's more natural to bundle here</p>",
        "id": 157615974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549381789
    },
    {
        "content": "<p>Aah, sorry for the confusion. I was asking about the unidirectional thing.</p>",
        "id": 157616053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549381827
    },
    {
        "content": "<p>well, it's equivalent, but easier to prove</p>",
        "id": 157616069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549381847
    },
    {
        "content": "<p>Ok</p>",
        "id": 157616094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549381875
    },
    {
        "content": "<p>you want the thing in the structure to be the weakest constraint since that's what you have to show in constructions</p>",
        "id": 157616111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549381877
    },
    {
        "content": "<p>Aah, of course</p>",
        "id": 157616119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549381887
    },
    {
        "content": "<p>you can prove the bidirectional version as a theorem</p>",
        "id": 157616140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549381903
    },
    {
        "content": "<p>now you still have to define a weight on G, and show that these guys have good weights</p>",
        "id": 157616318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549382058
    },
    {
        "content": "<p>will bundling make it awkward to prove theorems valid only for finite graphs?</p>",
        "id": 157616337,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549382082
    },
    {
        "content": "<p>there will be a typeclass for finite graph</p>",
        "id": 157616346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549382100
    },
    {
        "content": "<p>which should include some kind of computational content to work with the graph, like an adjacency list</p>",
        "id": 157616403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549382147
    },
    {
        "content": "<p>unless you just want to say finite in the abstract, but you can still use <code>fintype G.V</code> or whatever</p>",
        "id": 157616529,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549382243
    },
    {
        "content": "<p>This is what I have now (after bundling):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fin</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">graph</span>\n<span class=\"o\">(</span><span class=\"n\">V</span>     <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">E</span>     <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">symm</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"o\">,</span> <span class=\"n\">E</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"n\">v₂</span> <span class=\"n\">v₁</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">irref</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"bp\">¬</span> <span class=\"n\">E</span> <span class=\"n\">v</span> <span class=\"n\">v</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"n\">graph</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">V</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">unit</span><span class=\"o\">,</span>\n  <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">false</span><span class=\"o\">,</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">irref</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">glue</span> <span class=\"o\">(</span><span class=\"n\">G₁</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">G₂</span> <span class=\"o\">:</span> <span class=\"n\">graph</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"n\">G₁</span> <span class=\"bp\">→</span> <span class=\"n\">G₂</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">G₁</span> <span class=\"err\">⊕</span> <span class=\"n\">G₂</span><span class=\"o\">,</span>\n  <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">v&#39;</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">v</span> <span class=\"k\">with</span> <span class=\"n\">v</span> <span class=\"n\">v</span><span class=\"bp\">;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">v&#39;</span> <span class=\"k\">with</span> <span class=\"n\">v&#39;</span> <span class=\"n\">v&#39;</span><span class=\"bp\">;</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">E</span> <span class=\"bp\">_</span> <span class=\"n\">v</span> <span class=\"n\">v&#39;</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">E</span> <span class=\"err\">‹</span><span class=\"n\">G₁</span><span class=\"err\">›</span> <span class=\"err\">‹</span><span class=\"n\">G₂</span><span class=\"err\">›</span> <span class=\"o\">},</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span> <span class=\"n\">v&#39;</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">v</span> <span class=\"k\">with</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"bp\">;</span>\n    <span class=\"n\">cases</span> <span class=\"n\">v&#39;</span> <span class=\"k\">with</span> <span class=\"n\">v₁&#39;</span> <span class=\"n\">v₂&#39;</span><span class=\"bp\">;</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">}</span><span class=\"bp\">;</span>\n    <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">id</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">irref</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">v</span> <span class=\"k\">with</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span><span class=\"bp\">;</span>\n    <span class=\"n\">exact</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">irref</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Dynkin</span>\n\n<span class=\"n\">def</span> <span class=\"n\">A</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">∨</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">symm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">irref</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n    <span class=\"o\">{</span> <span class=\"n\">conv</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">{</span> <span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_zero</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">},</span>\n      <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_left_cancel</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">graph</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"o\">:=</span> <span class=\"n\">A</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">glue</span> <span class=\"n\">graph</span><span class=\"bp\">.</span><span class=\"n\">unit</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">E6</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">glue</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">E7</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">glue</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">E8</span> <span class=\"o\">:</span> <span class=\"n\">graph</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">glue</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">Dynkin</span>\n</pre></div>",
        "id": 157616619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549382311
    },
    {
        "content": "<p>is the coq graph library no good? (sorry, didn't read all of the thread yet: <a href=\"https://github.com/coq-contribs/graph-basics\" target=\"_blank\" title=\"https://github.com/coq-contribs/graph-basics\">https://github.com/coq-contribs/graph-basics</a>)</p>",
        "id": 157618530,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1549383756
    },
    {
        "content": "<p>Probably it is. But it needs to be ported <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 157618844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549384076
    },
    {
        "content": "<p>That Coq library is LGPL licensed, which could complicate the incorporation of any port of it into mathlib. (not a lawyer and all that of course...)</p>",
        "id": 157622568,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1549387314
    },
    {
        "content": "<p>which is why I am a very big fan of <a href=\"https://unlicense.org/\" target=\"_blank\" title=\"https://unlicense.org/\">https://unlicense.org/</a></p>",
        "id": 157623720,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549388198
    },
    {
        "content": "<p>Floris has started on <a href=\"https://github.com/formalabstracts/formalabstracts/commit/d6585457c6ca68c3ee359c3b45dac26c5a81d212\" target=\"_blank\" title=\"https://github.com/formalabstracts/formalabstracts/commit/d6585457c6ca68c3ee359c3b45dac26c5a81d212\">Dynkin diagrams</a> for the formal abstract of the classification of finite simple groups. Many of the sporadics can be defined as a quotient of a generalized Coxeter-type presentation, for which we have <a href=\"https://github.com/formalabstracts/formalabstracts/blob/b8f31dfe7c1ecc3b87347241b7c7c81ba84cc2d2/src/group_theory/presentation.lean#L103\" target=\"_blank\" title=\"https://github.com/formalabstracts/formalabstracts/blob/b8f31dfe7c1ecc3b87347241b7c7c81ba84cc2d2/src/group_theory/presentation.lean#L103\">Coxeter Y-diagrams</a>.</p>",
        "id": 157633904,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1549395415
    },
    {
        "content": "<p>Aah, that's good to know. Thanks for the heads up!</p>",
        "id": 157635199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549396430
    },
    {
        "content": "<p>Thanks, Jesse, for pointing to my file. It is very much WIP. My (current) definition of Dynkin diagram (with directed multiple edges and undirected single edges) is</p>\n<div class=\"codehilite\"><pre><span></span>structure dynkin_diagram :=\n  (vertex : Type v)\n  (edge : vertex → vertex → Prop)\n  (annotation : Π{{x y}}, edge x y → ℕ+)\n  (directed : Π{{x y}} (e : edge x y), annotation e = 1 ↔ edge y x)\n</pre></div>\n\n\n<p>If you want to talk about undirected graphs, I think you should index them by unordered pairs of distinct elements:</p>\n<div class=\"codehilite\"><pre><span></span>/-- unordered pairs of distinct elements -/\ndef upair (α : Type u) : Type u := {s : finset α // s.card = 2}\n</pre></div>\n\n\n<p>This would require some scaffolding to set up a library for these creatures, but after that I think it would be more convenient to work with these \"undirected graphs\" as opposed to \"symmetric directed graphs\". I was also considering this approach for Dynkin diagrams, but since <em>some</em> edges in Dynkin diagrams are directed, I decided to use a (mostly symmetric) directed graph.</p>",
        "id": 157637155,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1549397886
    },
    {
        "content": "<p>When thinking a bit about this <code>upair</code> object, I was wondering the following. <code>upair</code> is a subtype (of a subtype) of a quotient. Is it formalized in Lean that a subtype of a quotient is equivalent to a quotient of a subtype? That would probably be useful when reasoning about <code>upair</code>: they would correspond to (lists of length 2 with no duplicates) quotiented by permutation.</p>",
        "id": 157637571,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1549398244
    }
]