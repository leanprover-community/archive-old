[
    {
        "content": "<p>I think the \"determinantal\" proof of Cayley Hamilton, as presented in this pdf (<a href=\"https://people.reed.edu/~jerry/332/28ch.pdf\">https://people.reed.edu/~jerry/332/28ch.pdf</a>) would be pretty amenable to Lean, except for the fact that polynomials cannot be evaluated (with the standard tools at least) into non-commutative values. I understand why this could make life easier for multivariate polynomials, but adjoining just one element to a commutative ring, say, gives another commutative ring. Can anyone recommend any fixes?</p>",
        "id": 200180705,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1591675834
    },
    {
        "content": "<p>It doesn't seem that <code>polynomial.eval₂</code> assumes the target ring is commutative.</p>",
        "id": 200180853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591676133
    },
    {
        "content": "<p>Thanks! Unfortunately <code> polynomial.eval₂_ring_hom </code> does assume the target ring is commutative, which might still set me back a little.</p>",
        "id": 200180931,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1591676264
    },
    {
        "content": "<p>You do need to know that your map <code>f : R \\to S</code> lands in the centre of <code>S</code>.</p>",
        "id": 200180989,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591676314
    },
    {
        "content": "<p>i.e. you could eval into any <code>R</code>-algebra, more generally than along a ring_hom to a commutative ring.</p>",
        "id": 200181003,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591676344
    },
    {
        "content": "<p>This should be fixed!</p>",
        "id": 200181005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591676349
    },
    {
        "content": "<p>It would be a pretty major overhaul of <code>polynomial.lean</code>, however.</p>",
        "id": 200181149,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591676532
    },
    {
        "content": "<p>I know <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> has been planning various refactors there, but I'm not sure where he's up to.</p>",
        "id": 200181154,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591676556
    },
    {
        "content": "<p>Well, now that I'm deconfused about <code>polynomial.eval₂</code>,  I should be able to prove that the image of my polynomial evaluation is a commutative subring of matrices, which should be enough to use determinants.</p>",
        "id": 200181324,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1591676818
    },
    {
        "content": "<p>Sorry, I'll return to the <code>polynomial</code>s refactor tomorrow.</p>",
        "id": 200183693,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591680891
    },
    {
        "content": "<p>After my refactor <code>aeval</code> will work for matrices.</p>",
        "id": 200185001,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591683026
    },
    {
        "content": "<p>(or any other algebra)</p>",
        "id": 200185009,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591683040
    },
    {
        "content": "<p>Currently it assumes that the target ring is commutative.</p>",
        "id": 200185013,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591683057
    },
    {
        "content": "<p>[1/n]: <a href=\"https://github.com/leanprover-community/mathlib/issues/3003\">#3003</a></p>",
        "id": 200190248,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591688414
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Thank you so much for doing this!</p>",
        "id": 200191219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591689141
    },
    {
        "content": "<p>I have written what I'm pretty sure is most of a proof of Cayley-Hamilton.</p>",
        "id": 200635948,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1591939428
    },
    {
        "content": "<p>It's in this repository, with another project. <a href=\"https://github.com/jalex-stark/friendship-theorem/tree/master/src\">https://github.com/jalex-stark/friendship-theorem/tree/master/src</a></p>",
        "id": 200635949,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1591939434
    },
    {
        "content": "<p>The only <code>sorry</code>s left have to do with <code>polynomial.eval2</code>, and should be fixed by either hard work, better understanding of how to infer instances, or waiting for the refactor to make polynomials evaluation less commutativity-dependent.</p>",
        "id": 200636007,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1591939535
    },
    {
        "content": "<p>I'm sorry for slowing you down. I have a several refactors on the queue. I'll try to switch back to <code>polynomial</code>s in about an hour. UPD: unless I'll go to bed earlier.</p>",
        "id": 200636427,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591940271
    },
    {
        "content": "<p>What is going on with</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">choose_index</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">arbitrary</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">vec_to_one_row</span> <span class=\"o\">(</span><span class=\"n\">vec</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">):</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">choose_index</span><span class=\"o\">)</span> <span class=\"n\">vec</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>This stuff seems weird.</p>",
        "id": 200636731,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591940800
    },
    {
        "content": "<p>I wanted to apply a matrix of matrices to a vector of vectors, but <code>matrix.mul_vec</code> and such seem to require that the entries of the matrix and vector belong to the same ring</p>",
        "id": 200636851,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1591941037
    },
    {
        "content": "<p>So I came up with a way to replace the vector of vectors with a matrix of matrices</p>",
        "id": 200636858,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1591941099
    },
    {
        "content": "<p>Kind of weird, I agree, but easier in the short-term than developing the “right” generalization of matrix multiplication to ring actions or something</p>",
        "id": 200636907,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1591941215
    },
    {
        "content": "<p>I think it's going to require a bit of restructuring before others could use this proof.</p>",
        "id": 200638200,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591943310
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, I just experimented a bit with generalising parts of <code>polynomial.lean</code> to <code>semiring</code>, rather than <code>comm_semiring</code>.</p>",
        "id": 200638553,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591943794
    },
    {
        "content": "<p>How much would it get in the way of your refactoring plans if I PR'd that?</p>",
        "id": 200638555,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591943805
    },
    {
        "content": "<p>I can try again later if it's going to be annoying.</p>",
        "id": 200638561,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591943814
    },
    {
        "content": "<p>What parts?</p>",
        "id": 200638567,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591943837
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/3043\">https://github.com/leanprover-community/mathlib/pull/3043</a></p>",
        "id": 200638626,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591943916
    },
    {
        "content": "<p>So everything before <code>eval2</code> first appears, except that everything about <code>C</code> still assumes a <code>comm_semiring</code>.</p>",
        "id": 200638633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591943939
    },
    {
        "content": "<p>Hm, that's an interesting point <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> . Matrices are supposed to be the finite based version of linear maps between vector spaces, so there should be a way to turn a matrix into a linear map</p>",
        "id": 200638638,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591943949
    },
    {
        "content": "<p>My next refactor will deal with <code>eval₂</code>, <code>eval</code>, and <code>aeval</code>.</p>",
        "id": 200638696,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591944008
    },
    {
        "content": "<p>So what I was just doing is perhaps orthogonal?</p>",
        "id": 200638703,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591944035
    },
    {
        "content": "<p>Yes.</p>",
        "id": 200638705,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591944041
    },
    {
        "content": "<p>(It wasn't intended as a real PR; just the quickest way to show you now.)</p>",
        "id": 200638714,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591944054
    },
    {
        "content": "<p>Ok. I will not do anything that touches <code>eval*</code>!</p>",
        "id": 200638721,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591944075
    },
    {
        "content": "<p>Given a basis on V and a vector in V, you can produce a list of coefficients in R, which you can use <code>mul_vec</code> on to get another list of coefficients in R. Given a basis on W you can evaluate the list to get a vector in W</p>",
        "id": 200638725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591944081
    },
    {
        "content": "<p>So it seems like nothing new is needed in matrices, <code>mul_vec</code> is sufficient. It just needs to be coupled with constructions for converting from R^n to and from a vector space</p>",
        "id": 200638785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591944134
    },
    {
        "content": "<p>I’ll try to clean it up soon. Ultimately these vectors of vectors and matrices of matrices really come from tensor products, so maybe the best way to express this proof is by fleshing out the theory of tensors-as-matrices a bit</p>",
        "id": 200639471,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1591945139
    },
    {
        "content": "<p>Another fun thing to prove might be</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">≃</span><span class=\"bp\">+*</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>(this requires <a href=\"https://github.com/leanprover-community/mathlib/issues/3043\">#3043</a> before it even makes sense)</p>",
        "id": 200643514,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591949094
    },
    {
        "content": "<p>if you have that, there is what looks like a lovely proof of Cayley-Hamilton at <a href=\"http://drorbn.net/AcademicPensieve/2015-12/CayleyHamilton.pdf\">http://drorbn.net/AcademicPensieve/2015-12/CayleyHamilton.pdf</a></p>",
        "id": 200643535,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591949123
    },
    {
        "content": "<p>there must be a way to generalize this statement</p>",
        "id": 200644561,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591949981
    },
    {
        "content": "<p>Its an <code>R</code>-alghom</p>",
        "id": 200644766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591950183
    },
    {
        "content": "<p>this is saying that two functors commute</p>",
        "id": 200644902,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591950307
    },
    {
        "content": "<p>looks like a homomorphism condition to me</p>",
        "id": 200644930,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591950337
    },
    {
        "content": "<p>They only commute up to natural isomorphism</p>",
        "id": 200645480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591950833
    },
    {
        "content": "<p>what is the universal property for <code>matrix n n</code>? Can we prove this (natural) isomorphism by comparing the universal properties of the LHS and RHS?</p>",
        "id": 200650021,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591954007
    },
    {
        "content": "<p>universal property in the category of R-algebras? I want to say something like \"it admits an embedding of every n-dimensional R-algebra\" but that's not quite it</p>",
        "id": 200650212,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591954152
    },
    {
        "content": "<p>like <code>polynomial R</code> is the initial object in the category of \"rings S equipped with a map from R and a chosen element\"</p>",
        "id": 200650615,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591954457
    },
    {
        "content": "<p>what is <code>matrix n n R</code>?</p>",
        "id": 200650618,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591954463
    },
    {
        "content": "<p>End_R(R^n)</p>",
        "id": 200650630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591954476
    },
    {
        "content": "<p>up to natural isomorphism</p>",
        "id": 200650636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591954485
    },
    {
        "content": "<p>but just saying that doesn't give you <code>matrix n n (polynomial R) ≃+* polynomial (matrix n n R)</code> for free</p>",
        "id": 200650685,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591954531
    },
    {
        "content": "<p><a href=\"https://mathoverflow.net/a/142445\">https://mathoverflow.net/a/142445</a></p>",
        "id": 200651004,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591954779
    },
    {
        "content": "<p>doesn't actually seem very useful</p>",
        "id": 200651130,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591954876
    },
    {
        "content": "<p>Yeah... it's a universal coproperty <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 200651270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591954966
    },
    {
        "content": "<p>does anyone have a math proof of this isomorphism? it's not clear to me<br>\nedit: ah, the isomorphism concretely is \"collect like powers of the indeterminate\"</p>",
        "id": 200651447,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591955110
    },
    {
        "content": "<p>It's a bit sad to struggle with Cayley-Hamilton for matrices when this theorem has not much to do with matrices, and we'll need to do multilinear algebra properly at some point. But I guess it still progress to work towards having it anyway (and I certainly don't have time for multilinear algebra).</p>",
        "id": 200651481,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591955140
    },
    {
        "content": "<p>The proof, at least as a <code>≃+</code> is just a bunch of currying, swapping, uncurrying, and using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finsupp.equiv_fun_on_fintype/src\">src#finsupp.equiv_fun_on_fintype</a></p>",
        "id": 200652404,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591955908
    },
    {
        "content": "<p><code>polynomial</code> and <code>matrix n n</code> are both 'semigroup algebras', over the monoid of natural numbers and the semigroup <code>fin n x fin n</code>, viewed as indexing the standard basis of <code>matrix n n</code>, respectively</p>",
        "id": 200654316,
        "sender_full_name": "David Wärn",
        "timestamp": 1591957394
    },
    {
        "content": "<p>I guess the latter is not quite a semigroup actually...</p>",
        "id": 200654759,
        "sender_full_name": "David Wärn",
        "timestamp": 1591957755
    },
    {
        "content": "<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">(</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msub><mi>a</mi><mn>0</mn></msub><mo>+</mo><msub><mi>a</mi><mn>1</mn></msub><mi>X</mi><mo>+</mo><msub><mi>a</mi><mn>2</mn></msub><msup><mi>X</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msub><mi>b</mi><mn>0</mn></msub><mo>+</mo><msub><mi>b</mi><mn>1</mn></msub><mi>X</mi><mo>+</mo><msub><mi>b</mi><mn>2</mn></msub><msup><mi>X</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msub><mi>c</mi><mn>0</mn></msub><mo>+</mo><msub><mi>c</mi><mn>1</mn></msub><mi>X</mi><mo>+</mo><msub><mi>c</mi><mn>2</mn></msub><msup><mi>X</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><msub><mi>d</mi><mn>0</mn></msub><mo>+</mo><msub><mi>d</mi><mn>1</mn></msub><mi>X</mi><mo>+</mo><msub><mi>d</mi><mn>2</mn></msub><msup><mi>X</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\begin{pmatrix}\na_0+a_1X+a_2X^2+\\cdots&amp;b_0+b_1X+b_2X^2+\\cdots\\\\\nc_0+c_1X+c_2X^2+\\cdots&amp;d_0+d_1X+d_2X^2+\\cdots\n\\end{pmatrix}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"minner\">⋯</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"minner\">⋯</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"minner\">⋯</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"minner\">⋯</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span></span></span></span></span></p>\n<p>\"equals\"</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow><mo fence=\"true\">(</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>a</mi><mn>0</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>b</mi><mn>0</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>c</mi><mn>0</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>d</mi><mn>0</mn></msub></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow><mo>+</mo><mrow><mo fence=\"true\">(</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>a</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>b</mi><mn>1</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>c</mi><mn>1</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>d</mi><mn>1</mn></msub></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow><mi>X</mi><mo>+</mo><mrow><mo fence=\"true\">(</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>a</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>b</mi><mn>2</mn></msub></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>c</mi><mn>2</mn></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><msub><mi>d</mi><mn>2</mn></msub></mstyle></mtd></mtr></mtable><mo fence=\"true\">)</mo></mrow><msup><mi>X</mi><mn>2</mn></msup><mo>+</mo><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">\\begin{pmatrix}a_0&amp;b_0\\\\c_0&amp;d_0\\end{pmatrix}+\\begin{pmatrix}a_1&amp;b_1\\\\c_1&amp;d_1\\end{pmatrix}X+\\begin{pmatrix}a_2&amp;b_2\\\\c_2&amp;d_2\\end{pmatrix}X^2+\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.40003em;vertical-align:-0.95003em;\"></span><span class=\"minner\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">(</span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.45em;\"><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathdefault\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size3\">)</span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span></span></p>",
        "id": 200654789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591957796
    },
    {
        "content": "<p>A mathematican can say they're equal because they're equal in some fluid over-set</p>",
        "id": 200655043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591957991
    },
    {
        "content": "<p>Might well work for multivariate polynomials too. Might have to be careful with infinite matrices</p>",
        "id": 200655168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591958072
    },
    {
        "content": "<p>Maybe the correct thing to say is that <code>polynomial A</code> for an R-algebra A is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊗</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">[</mo><mi>X</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">A \\otimes \\mathbb Z[X]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Z</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">]</span></span></span></span>, and <code>matrix n n A</code> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊗</mo><msub><mi>M</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">Z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">A \\otimes M_n(\\mathbb Z)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">Z</span><span class=\"mclose\">)</span></span></span></span>? Then it's associativity and commutativity of tensor product?</p>",
        "id": 200655379,
        "sender_full_name": "David Wärn",
        "timestamp": 1591958221
    },
    {
        "content": "<p>R=<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span></p>",
        "id": 200655434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591958276
    },
    {
        "content": "<p>and this proof generalises to mv_polynomial</p>",
        "id": 200655487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591958306
    },
    {
        "content": "<p>Are you saying we may assume R is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> or that this only makes sense for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>?</p>",
        "id": 200655562,
        "sender_full_name": "David Wärn",
        "timestamp": 1591958392
    },
    {
        "content": "<p>I was just remarking that you said R-algebra but R is mentioned precisely once in your comment; you either tensor with R[X] or change R to Z and you're fine</p>",
        "id": 200655627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591958421
    },
    {
        "content": "<p>Right, I think I meant \"is\" as in \"isomorphic as R-algebras\", but that also works</p>",
        "id": 200656045,
        "sender_full_name": "David Wärn",
        "timestamp": 1591958779
    },
    {
        "content": "<p>I was just remarking that you said R-algebra but R is mentioned precisely once in your comment; you either tensor with R[X] or change R to Z and you're fine</p>",
        "id": 200656085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591958819
    },
    {
        "content": "<p>We don't have tensor products of R-algebras yet?</p>",
        "id": 200657957,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591960509
    },
    {
        "content": "<p>nope, we don't afaik</p>",
        "id": 200658461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591961021
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3050\">#3050</a></p>",
        "id": 200679561,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591973368
    },
    {
        "content": "<p>I have a very <code>sorry</code>ful proof of Cayley-Hamilton, following the argument at  <a href=\"http://drorbn.net/AcademicPensieve/2015-12/CayleyHamilton.pdf\">http://drorbn.net/AcademicPensieve/2015-12/CayleyHamilton.pdf</a>.</p>",
        "id": 202172880,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593243019
    },
    {
        "content": "<p>It is still a mess and needs some refactoring.</p>",
        "id": 202172881,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593243028
    },
    {
        "content": "<p>It also needs some <code>sorry</code>s filled in. I am confident all the remaining ones are \"easy\" (no design or API changes need, just bashing around with polynomials and/or matrices).</p>",
        "id": 202172888,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593243066
    },
    {
        "content": "<p>If anyone wants to jump in and hack on it, go for it: <code>git checkout origin/cayley_hamilton</code></p>",
        "id": 202172903,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593243095
    },
    {
        "content": "<p>I will start cleaning up the structure later</p>",
        "id": 202172911,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593243114
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Cayley-Hamilton/near/202172903\">said</a>:</p>\n<blockquote>\n<p>If anyone wants to jump in and hack on it, go for it: <code>git checkout origin/cayley_hamilton</code></p>\n</blockquote>\n<p>Scott means <code>leanproject get mathlib:cayley_hamilton</code>so that you get oleans too.</p>",
        "id": 202173166,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593243503
    },
    {
        "content": "<p>Unfortunately Azure isn't done yet</p>",
        "id": 202173516,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593244123
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I'm seeing <code>def baz</code>, shouldn't that be <code>def bar</code> or <code>def dror</code>? <span aria-label=\"stuck out tongue wink\" class=\"emoji emoji-1f61c\" role=\"img\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span>  [/jk]</p>",
        "id": 202174109,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593245037
    },
    {
        "content": "<p>Also, I would prefere <code>M</code> or <code>A</code> for matrices, over <code>m</code>.</p>",
        "id": 202174165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593245105
    },
    {
        "content": "<p>All the names are up for grabs. :-)</p>",
        "id": 202174308,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593245357
    },
    {
        "content": "<p>Mostly the proof is/will be only the usual de Bruijn factor relative to the informal proof, but the statement \"polynomials of matrices are matrices of polynomials\" takes a ridiculously long time to set up properly (because we need both a good characterisation of the function, and that's it's an algebra equivalence). Having finished with the route I took (discussed earlier in this thread), I'm not sure it was the easiest one. :-)</p>",
        "id": 202174403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593245549
    },
    {
        "content": "<p>But the resulting proof is quite nice. And the statement <code>baz</code> is very useful anyways. So we will profit in the future, I'm quite sure.</p>",
        "id": 202174706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593246130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Cayley-Hamilton/near/202173516\">said</a>:</p>\n<blockquote>\n<p>Unfortunately Azure isn't done yet</p>\n</blockquote>\n<p>It's done now (unless someone pushed a new commit in the mean time).</p>",
        "id": 202174723,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593246185
    },
    {
        "content": "<p>I just did (-;</p>",
        "id": 202174980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593246612
    },
    {
        "content": "<p>I pushed a proof of <code>q</code></p>",
        "id": 202174982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593246618
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> how did I let you get away with defining <code>scalar</code> in mathlib, but not <code>scalar_apply</code>?</p>",
        "id": 202175049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593246771
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> I pushed another bit (just a heads up)</p>",
        "id": 202175596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593247612
    },
    {
        "content": "<p>thanks; i merged and pushed another bit</p>",
        "id": 202175744,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593247829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> Did you know about <code>git pull --rebase</code>?<br>\nNot very important, but it avoids the merges (unless there are conflicts) by replaying your work on top of whatever you pull.</p>",
        "id": 202175762,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593247879
    },
    {
        "content": "<p>(in this case there were conflicts; two lemmas that we both proved, yours seemed better so I accepted them)</p>",
        "id": 202175813,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593247940
    },
    {
        "content": "<p>i'm not sure i understand what you mean by avoiding merging. if there aren't conflicts, <code>git pull</code> will handle the merge by itself?</p>",
        "id": 202175818,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593247974
    },
    {
        "content": "<p>This is orthogonal.</p>",
        "id": 202175824,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593247993
    },
    {
        "content": "<p><code>git pull --rebase</code> will also handle conflicts, with your help if needed.</p>",
        "id": 202175828,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593248012
    },
    {
        "content": "<p>Yes, I didn't phrase it correctly</p>",
        "id": 202175838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593248033
    },
    {
        "content": "<p>It will replay <em>automatically</em> (unless there are conflicts) is what I should have written.</p>",
        "id": 202175883,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593248053
    },
    {
        "content": "<p><code>git pull</code> will merge, but you can \"rewrite history\" by taking your local changes, storing them in the file cabinat (so to speak), doing a <code>git pull</code> and then taking your local changes and replaying them on top of whatever was pulled.</p>",
        "id": 202175911,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593248118
    },
    {
        "content": "<p>As I said, it's not very important.</p>",
        "id": 202175916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593248132
    },
    {
        "content": "<p>Because once it is merged into mathlib the entire git history is squashed into 1 commit anyways</p>",
        "id": 202175921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593248152
    },
    {
        "content": "<p>ah i see, git pull rebase will pretend that I pulled before making my changes</p>",
        "id": 202175922,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593248153
    },
    {
        "content": "<p>it kind of performs a reidemeister move on the commit tree</p>",
        "id": 202175973,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593248202
    },
    {
        "content": "<p>Once your git history is a non-trivial knot... didn't you do something wrong?? <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 202176297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593248860
    },
    {
        "content": "<p>working with double sums feels too hard</p>",
        "id": 202176451,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593249154
    },
    {
        "content": "<p>I pushed a proof of <code>sum_over_range'</code></p>",
        "id": 202176459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593249199
    },
    {
        "content": "<p>thanks for all the work while I was eating dinner :-)</p>",
        "id": 202176697,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593249711
    },
    {
        "content": "<p>I pushed some more stuff</p>",
        "id": 202177651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593251233
    },
    {
        "content": "<p>Turns out <code>coeff_mul_zero</code> has a rather shorter proof. :-)</p>",
        "id": 202178072,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593251979
    },
    {
        "content": "<p><code>simp [coeff_mul]</code>?</p>",
        "id": 202178377,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593252417
    },
    {
        "content": "<p>After a digression involving simp and lunch, I'm back (-;</p>",
        "id": 202179205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593253855
    },
    {
        "content": "<p>do we already have an induction principle like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_add_induction</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">p_zero</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p_s</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"err\">$</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">p</span> <span class=\"err\">$</span> <span class=\"err\">∑</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"kn\">using</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">simpa</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_insert</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">p_add</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">p_s</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">p_s</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">ha</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202179207,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593253858
    },
    {
        "content": "<p>I don't recognise it</p>",
        "id": 202179329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593254066
    },
    {
        "content": "<p>Should we have a definition for matrices like<br>\n<code>(λ i' j', if i' = i ∧ j' = j then x else 0)</code>?</p>",
        "id": 202179594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593254522
    },
    {
        "content": "<p>in maths this is sometimes called an \"elementary matrix\"?</p>",
        "id": 202179713,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593254735
    },
    {
        "content": "<p>i think we could use some simp lemmas for these in the current work</p>",
        "id": 202179770,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593254770
    },
    {
        "content": "<p>Yes.</p>",
        "id": 202179805,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593254853
    },
    {
        "content": "<p>Wiki says that elementary matrices are those that differ from the identity matrix by a single row/col operation</p>",
        "id": 202180085,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593255330
    },
    {
        "content": "<p>in quantum computing we just call them <code>\\ketbra i j</code></p>",
        "id": 202180212,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593255528
    },
    {
        "content": "<p>is that notion from wikipedia a useful one?</p>",
        "id": 202180229,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593255566
    },
    {
        "content": "<p>Maybe we should just have <code>\\delta</code></p>",
        "id": 202180276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593255609
    },
    {
        "content": "<p>I think it's fine to just claim the name <code>elementary_matrix</code> for this concept. we can cook up a new name for the wiki thing, if we need it.</p>",
        "id": 202180307,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593255693
    },
    {
        "content": "<p>should this go in data.matrix.basic?</p>",
        "id": 202180444,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593255875
    },
    {
        "content": "<p>I think so</p>",
        "id": 202180446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593255888
    },
    {
        "content": "<p>Of course it needs 25 compatibility lemmas with <code>1</code> and <code>0</code>, and <code>diagonal</code> and <code>scalar</code>, etc...</p>",
        "id": 202180457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593255912
    },
    {
        "content": "<p>Working with coefficients and degrees of polynomials is so painful!</p>",
        "id": 202180468,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593255934
    },
    {
        "content": "<p>And <code>trace elementary</code> and <code>det (elementary i j)</code> etc</p>",
        "id": 202180472,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593255937
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> On which sorrys are you currently working?</p>",
        "id": 202180624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593256140
    },
    {
        "content": "<p>I pushed a few, but I think I'm going to stop for a while</p>",
        "id": 202180631,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593256159
    },
    {
        "content": "<p>So they're all yours :-)</p>",
        "id": 202180633,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593256165
    },
    {
        "content": "<p>we're pretty close</p>",
        "id": 202180642,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593256180
    },
    {
        "content": "<p>I have this so far, I think I should put it in a separate PR?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">n</span><span class=\"o\">]</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">elementary_matrix</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i&#39;</span> <span class=\"n\">j&#39;</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">i&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">j&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">j</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">matrix_eq_sum_elementary</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">elementary_matrix</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_subset</span><span class=\"o\">,</span> <span class=\"n\">swap</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_const_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">if_neg</span><span class=\"o\">,</span> <span class=\"n\">tauto</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202180801,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593256393
    },
    {
        "content": "<p>I'd advise against using <code>@[reducible]</code> unless you have a good reason.</p>",
        "id": 202181029,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593256702
    },
    {
        "content": "<p>appropriate <code>@[simp]</code> lemmas are nearly always better</p>",
        "id": 202181038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593256720
    },
    {
        "content": "<p>My suggestion would be to put it into the <code>cayley_hamilton</code> branch, and check that it is usable there</p>",
        "id": 202181053,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593256753
    },
    {
        "content": "<p>That branch is going to turn into many PRs, not just one.</p>",
        "id": 202181063,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593256772
    },
    {
        "content": "<p>so we can slice this off again once we see it's working</p>",
        "id": 202181069,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593256781
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I think that algebras like <code>algebra R (polynomial A)</code> are currently not really \"supported\" by mathlib...</p>",
        "id": 202183748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593260872
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 202183797,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593260896
    },
    {
        "content": "<p>Well, it's part of a diagram...</p>",
        "id": 202183806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593260913
    },
    {
        "content": "<p><code>R → A → polynomial A</code>, and this thing is (provably) the composition. (Maybe even definitionally.)</p>",
        "id": 202183830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593260950
    },
    {
        "content": "<p>But we'll need a bunch of lemmas for that.</p>",
        "id": 202183832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593260958
    },
    {
        "content": "<p>but those lemmas are the lemmas about tensor products, no?</p>",
        "id": 202183842,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593260984
    },
    {
        "content": "<p>Of course we can add the lemmas in the special cases. But I'm still trying to figure out if we can get a general machine to make this as easy as it should be.</p>",
        "id": 202183845,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593260998
    },
    {
        "content": "<p>I guess I'm not sure still what you're concerned about</p>",
        "id": 202183912,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593261071
    },
    {
        "content": "<p>I mean, it's just some R-algebra, that we happen to have built out of a different R-algebra.</p>",
        "id": 202183928,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593261103
    },
    {
        "content": "<p>Ooh, wait.. this is for noncommutative <code>A</code>, so we don't even have <code>algebra A (polynomial A)</code>.<br>\nLet me shut up.</p>",
        "id": 202183996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593261164
    },
    {
        "content": "<p>In fact, this works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">turkle_map_apply</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 202184021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593261199
    },
    {
        "content": "<p>(I really should rename all my metasyntactic variables before making branches public...)</p>",
        "id": 202184089,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593261246
    },
    {
        "content": "<p>I've no idea where I picked up <code>turkle</code> from. It seems to be entirely unattested amongst lists of metasyntactic variables I can find. Nevertheless my chickens are called <code>foobar</code>, <code>quux</code>, and <code>turkle</code>.</p>",
        "id": 202184376,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593261700
    },
    {
        "content": "<p>(On even-numbered days they are all called <code>bruce</code>.)</p>",
        "id": 202184423,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593261730
    },
    {
        "content": "<p>I have fixed another sorry</p>",
        "id": 202184713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593262284
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Cayley-Hamilton/near/202184089\">said</a>:</p>\n<blockquote>\n<p>(I really should rename all my metasyntactic variables before making branches public...)</p>\n</blockquote>\n<p>What we really need is a linter that automatically flags if a name is wrong, and suggests to replace it with a proper one...<br>\nI fear that we need AGI before that happens.</p>",
        "id": 202184863,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593262551
    },
    {
        "content": "<blockquote>\n<p>What we really need is a linter that automatically flags if a name is wrong, and suggests to replace it with a proper one...</p>\n</blockquote>\n<p><a href=\"https://arxiv.org/abs/2004.07761\">https://arxiv.org/abs/2004.07761</a></p>",
        "id": 202184921,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1593262653
    },
    {
        "content": "<p>I wonder if we should change the definition of <code>to_fun</code> in <code>polynomial_algebra.lean</code>, to use <code>eval2</code>.</p>",
        "id": 202185064,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593262847
    },
    {
        "content": "<p>At the time I first wrote it, <code>eval2</code> didn't work in this generality. I think it should now, and perhaps there's better API support?</p>",
        "id": 202185077,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593262875
    },
    {
        "content": "<p>Not sure.</p>",
        "id": 202185079,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593262876
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Not sure if it matters...</p>",
        "id": 202185204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593263071
    },
    {
        "content": "<p>We probably need equation lemmas either way</p>",
        "id": 202185209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593263081
    },
    {
        "content": "<p>I've pushed another couple sorry-fixes</p>",
        "id": 202185212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593263091
    },
    {
        "content": "<p>Hey it's really important that the constructor for the elementary matrix takes the value of the nonzero matrix entry as an input. That way you can reduce a lot of problems about R-linearity to questions about the underlying abelian group. This was an important trick I learnt when working with <span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> on derivations</p>",
        "id": 202213296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593307005
    },
    {
        "content": "<p>(This is the same argument that we should talk much more about <code>monomial n a</code> in <code>polynomial.lean</code>, and less about <code>C a * X^n</code>.)</p>",
        "id": 202219754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593319665
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>, I'll leave it to you to make this change?</p>",
        "id": 202219756,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593319682
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>, one of your commits has the line <code>rw ← sum_product',</code>, but there's no declaration with that name that I can find.</p>",
        "id": 202220642,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593321606
    },
    {
        "content": "<p>Did you forget to add a file?</p>",
        "id": 202220643,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593321611
    },
    {
        "content": "<p>oops sorry, I just got online and have a few things to address but should get to it soon. That's supposed to be a new decl in big_operators. (which i probably need to rewrite because i did a lot of stashing and switching between branches in one local copy of mathlib yesterday)</p>",
        "id": 202220685,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593321722
    },
    {
        "content": "<p>oh, it is in fact there in the current branch. the decl is made by <code>to_additive</code> on <code>prod_product'</code> in big_operators (okay, I changed <code>sum_product'</code> to <code>finset.sum_product'</code> and it works now)</p>",
        "id": 202224702,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593329896
    },
    {
        "content": "<p>i'm working on changing elementary_matrix now</p>",
        "id": 202224708,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593329945
    },
    {
        "content": "<p>I think things are going to be a lot easier if I refactor <code>eval2</code> so it takes a bundled <code>ring_hom</code> rather than needing a <code>is_semiring_hom</code> typeclass</p>",
        "id": 202224895,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593330331
    },
    {
        "content": "<p>however I'm not super confident that will go well... not sure how many other places will need changes</p>",
        "id": 202224902,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593330348
    },
    {
        "content": "<p>I may experiment with it on a different branch for a bit</p>",
        "id": 202224936,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593330363
    },
    {
        "content": "<p>I think at some point I wrote an instance <code>is_semiring_hom f</code> for <code>f</code> being the <code>to_fun</code> of a bundled <code>algebra_hom</code>, and this felt dirty</p>",
        "id": 202225201,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593330894
    },
    {
        "content": "<p>yes, it's past time we killed <code>is_semiring_hom</code>.</p>",
        "id": 202226499,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593333079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>, your work on elementary_matrix has broken the proof of <code>matrix_polynomial_equiv_polynomial_matrix_coeff_apply</code>.</p>",
        "id": 202229634,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593338854
    },
    {
        "content": "<p>Do you know what's going on, or should I start on that?</p>",
        "id": 202229636,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593338861
    },
    {
        "content": "<p>(Otherwise, we're down to a single sorry on <code>cayley_hamilton</code>, which looks like easy algebra.)</p>",
        "id": 202229639,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593338876
    },
    {
        "content": "<p>yeah, I don't know why i pushed before i reached an error-free state, I am still working locally to propagate <code>elementary_matrix</code> throughout</p>",
        "id": 202229713,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593338979
    },
    {
        "content": "<p>it does seem to be simplifying stuff</p>",
        "id": 202229717,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593338997
    },
    {
        "content": "<p>okay! I will leave that bit of the file then, and try and do my algebra homework</p>",
        "id": 202229838,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593339125
    },
    {
        "content": "<p>I have something like </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">M</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">*</span> <span class=\"err\">⇑</span><span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">elementary_matrix</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"mi\">1</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>but want something like</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">M</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">elementary_matrix</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">i</span> <span class=\"n\">j</span>\n</code></pre></div>\n\n\n<p>I think I am missing something simple</p>",
        "id": 202229890,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593339234
    },
    {
        "content": "<p><code>algebra.smul_def</code>?</p>",
        "id": 202229958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593339329
    },
    {
        "content": "<p>thanks!</p>",
        "id": 202230024,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593339415
    },
    {
        "content": "<p>Ok, <code>cayley_hamilton</code> now builds except for this thing with <code>elementary_matrix</code>!</p>",
        "id": 202230176,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593339611
    },
    {
        "content": "<p>there is a _lot_ of cleanup still to do</p>",
        "id": 202230187,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593339633
    },
    {
        "content": "<p>for the elementary_matrix stuff i just have two more proofs to fix in polynomial_algebra</p>",
        "id": 202230284,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593339823
    },
    {
        "content": "<p>awesome! and I found a quick work-around so</p>",
        "id": 202230365,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593339953
    },
    {
        "content": "<p>We have <code>cayley_hamilton</code>! (No sorries.)</p>",
        "id": 202230409,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593339966
    },
    {
        "content": "<p>maybe your work-around is best for what's remaining, the \"right\" way would be to show that <code>elementary_matrix i j</code> is an add_monoid_hom</p>",
        "id": 202230436,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593340069
    },
    {
        "content": "<p>oh ...</p>",
        "id": 202230692,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593340459
    },
    {
        "content": "<p>except, <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>, I didn't notice you adding the <code>[inhabited n]</code> instances, which I don't think we want</p>",
        "id": 202230700,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593340482
    },
    {
        "content": "<p>hm.</p>",
        "id": 202230706,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593340502
    },
    {
        "content": "<p>and which changes the statement of Cayley-Hamilton subtly...</p>",
        "id": 202230708,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593340503
    },
    {
        "content": "<p>we have to prove it for empty matrices, too :-)</p>",
        "id": 202230712,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593340515
    },
    {
        "content": "<p>actually... err... is it even true?</p>",
        "id": 202230716,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593340550
    },
    {
        "content": "<p><code>matrix unit unit</code> is <code>unit</code>. So is the empty matrix <code>0</code> or <code>1</code>?</p>",
        "id": 202230717,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593340559
    },
    {
        "content": "<p>what is the characteristic polynomial of the empty matrix? surely 1?</p>",
        "id": 202230756,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593340578
    },
    {
        "content": "<p>if you want it to be the product of the eigenvalues, it is 1</p>",
        "id": 202230824,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593340762
    },
    {
        "content": "<p>the characteristic matrix is the empty matrix</p>",
        "id": 202230828,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593340769
    },
    {
        "content": "<p>but the \"usual formula\" gives zero</p>",
        "id": 202230829,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593340769
    },
    {
        "content": "<p>huh :-)</p>",
        "id": 202230830,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593340772
    },
    {
        "content": "<p>right, and this is fine because the empty matrix brings the zero ring into the picture</p>",
        "id": 202230833,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593340798
    },
    {
        "content": "<p>so we're complaining that we can't factor the identity map on our ring through the zero ring</p>",
        "id": 202230878,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593340818
    },
    {
        "content": "<p>phew:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">punit</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>says <code>0</code> :-)</p>",
        "id": 202230944,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593340940
    },
    {
        "content": "<p>Lean has spoken.</p>",
        "id": 202230947,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593340943
    },
    {
        "content": "<p>So indeed, we need to get rid of that <code>inhabited</code> hypothesis.</p>",
        "id": 202230952,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593340959
    },
    {
        "content": "<p>sadly <code>matrix.induction_on</code> needs a <code>h_zero</code> argument, just to cover this case</p>",
        "id": 202230971,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593341035
    },
    {
        "content": "<p>maybe I'll split it into two versions, one with an <code>inhabited</code> argument using your trick</p>",
        "id": 202231010,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593341051
    },
    {
        "content": "<p>but we won't use that one here</p>",
        "id": 202231011,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593341059
    },
    {
        "content": "<p>Okay, <code>cayley_hamilton</code> works again, this time including the trivial case</p>",
        "id": 202231162,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593341312
    },
    {
        "content": "<p>maybe I'm just too tired to be doing this right now, but I want to rewrite</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⇑</span><span class=\"n\">matrix_polynomial_equiv_polynomial_matrix</span> <span class=\"o\">(</span><span class=\"n\">elementary_matrix</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">elementary_matrix</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n<span class=\"bp\">=</span> <span class=\"err\">⇑</span><span class=\"n\">matrix_polynomial_equiv_polynomial_matrix</span> <span class=\"o\">(</span><span class=\"n\">elementary_matrix</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"err\">⇑</span><span class=\"n\">matrix_polynomial_equiv_polynomial_matrix</span> <span class=\"o\">(</span><span class=\"n\">elementary_matrix</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I tried <code>rw ring_hom.map_add</code> and that didn't work (and then lean crashed and I'm waiting to rebuild mathlib, since i don't have oleans yet)</p>",
        "id": 202231593,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593342016
    },
    {
        "content": "<p>try <code>alg_hom.map_add</code></p>",
        "id": 202231611,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593342077
    },
    {
        "content": "<p><span aria-label=\"thumbs up\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"thumbs up\">:thumbs_up:</span> I will try that in a few minutes</p>",
        "id": 202231663,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593342150
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/116395-maths/topic/Cayley-Hamilton/near/202230717\">said</a>:</p>\n<blockquote>\n<p><code>matrix unit unit</code> is <code>unit</code>. So is the empty matrix <code>0</code> or <code>1</code>?</p>\n</blockquote>\n<p>Isn't it both?</p>",
        "id": 202231683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593342228
    },
    {
        "content": "<p>yes, the question was what should happen to it when we bring it into polynomial land</p>",
        "id": 202231811,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593342368
    },
    {
        "content": "<p>so by \"is\" i didn't mean <code>=</code> I meant equal after applying some map out of <code>matrix unit unit</code></p>",
        "id": 202231827,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593342426
    },
    {
        "content": "<p>if the map wanted to be a ring hom then it would have to land at <code>0</code>, but thankfully that's not the case and scott figured out that it wants to land at <code>1</code><br>\n(edit: I guess I misunderstood something along the way)</p>",
        "id": 202231844,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593342481
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> the question was really what the determinant of the empty matrix is</p>",
        "id": 202231893,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593342536
    },
    {
        "content": "<p>and it is indeed meant to be zero, which is good for Cayley-Hamilton, and bad for \"determinant is the product of the eigenvalues\"</p>",
        "id": 202231910,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593342563
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Cayley-Hamilton/near/202231611\">said</a>:</p>\n<blockquote>\n<p>try <code>alg_hom.map_add</code></p>\n</blockquote>\n<p>didn't work. I'll try <code>have</code>ing the statement i want intstead of <code>rw</code>ing to it</p>",
        "id": 202231919,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593342582
    },
    {
        "content": "<p>ah i'm spewing nonsense</p>",
        "id": 202232185,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593343014
    },
    {
        "content": "<p>I think the determinant of the empty matrix should not be defined</p>",
        "id": 202232596,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593343588
    },
    {
        "content": "<p>which means that it should be <code>0</code> in lean</p>",
        "id": 202232598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593343604
    },
    {
        "content": "<p>the determinant of the empty matrix is 1</p>",
        "id": 202232722,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593343823
    },
    {
        "content": "<p>S_0 has exactly one element, and the empty product is 1</p>",
        "id": 202232741,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593343872
    },
    {
        "content": "<p>Ah, I messed up the math on one of the definitions. <a href=\"https://math.stackexchange.com/questions/2130175/does-the-unique-map-on-the-zero-space-have-determinant-1\">https://math.stackexchange.com/questions/2130175/does-the-unique-map-on-the-zero-space-have-determinant-1</a> gives a number of independent reasons for the determinant to be defined and equal to 1</p>",
        "id": 202232744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593343877
    },
    {
        "content": "<p>Oh I misread Scott's <code>#eval</code> too, he measured the determinant of the 1x1 zero matrix</p>",
        "id": 202232799,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593343939
    },
    {
        "content": "<p>oops!</p>",
        "id": 202233226,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593344831
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3214\">#3214</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/3215\">#3215</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/3216\">#3216</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/3217\">#3217</a> are all mini-PRs coming out of <code>cayley_hamilton</code>.</p>",
        "id": 202234609,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593347233
    },
    {
        "content": "<p>The rest may have to wait until <a href=\"https://github.com/leanprover-community/mathlib/issues/3193\">#3193</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/3213\">#3213</a> have merged.</p>",
        "id": 202234662,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593347342
    },
    {
        "content": "<p>Although <span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>, do you want to make the elementary_matrix stuff a separate PR? It could get started now.</p>",
        "id": 202234672,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593347364
    },
    {
        "content": "<p>I think you want <code>@[simp]</code> on <code>scalar_apply_eq</code> and <code>scalar_apply_ne</code>, and corresponding <code>@[simp]</code> lemmas for <code>elementary_matrix</code>.</p>",
        "id": 202234675,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593347394
    },
    {
        "content": "<p>I haven't read this carefully, but I just want to say (a) the determinant of the empy matrix is 1, (b) elementary matrix doesn't mean a matrix with a single nonzero entry.</p>",
        "id": 202235665,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593348985
    },
    {
        "content": "<p>Yes! (a) was eventually agreed, after I caused some confusion.</p>",
        "id": 202237029,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593351478
    },
    {
        "content": "<p>I also agree with (b), and I think we haven't renamed yet for lack of the right name.</p>",
        "id": 202237084,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593351542
    },
    {
        "content": "<p>What should these matrices be called?</p>",
        "id": 202237090,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593351552
    },
    {
        "content": "<p>maybe just <code>basis_matrix</code>?</p>",
        "id": 202237096,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593351560
    },
    {
        "content": "<p>I was going to suggest something like <code>std_basis_matrix</code>, yeah</p>",
        "id": 202237356,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593351953
    },
    {
        "content": "<p>partly in reference to the confusingly named <code>std_basis</code> (does it still exist)?</p>",
        "id": 202237400,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593351964
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">eval</span> <span class=\"n\">matrix</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">punit</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>Wait, that's the det of the 1x1 matrix (0). I think CH is false for the 0 by 0 matrix</p>",
        "id": 202243726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593361705
    },
    {
        "content": "<p>Sorry, late to the party. So we are agreed that CH fails for 0x0 matrices?</p>",
        "id": 202243754,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593361782
    },
    {
        "content": "<p>any polynomial of the empty matrix is the empty matrix is zero, so CH is true for 0x0 matrices</p>",
        "id": 202249410,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593370441
    },
    {
        "content": "<p>i like <code>std_basis_matrix</code></p>",
        "id": 202249545,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593370578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I'm happy with the polynomial refactor. I left one tiny comment. If you agree, I'll hit it with the merge hammer.</p>",
        "id": 202276925,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593413535
    },
    {
        "content": "<p>I generalised that lemma, and put the PR on the queue.</p>",
        "id": 202278011,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593414731
    },
    {
        "content": "<p>Great!</p>",
        "id": 202278298,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593415005
    },
    {
        "content": "<p>It occurs to me that we are still missing <code>map_smul</code> there. I tried proving that, but it will be easier post <a href=\"https://github.com/leanprover-community/mathlib/issues/3213\">#3213</a>.</p>",
        "id": 202278553,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593415251
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span>, I'm just slicing things up into PRs now. Do you want to do the honours on <a href=\"https://github.com/leanprover-community/mathlib/pull/new/std_basis_matrix\">https://github.com/leanprover-community/mathlib/pull/new/std_basis_matrix</a></p>",
        "id": 202416679,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593512063
    },
    {
        "content": "<p>Go ahead without me, sorry. Working on mathlib PRs is quite addictive and I need to leave space in my head for my day job right now</p>",
        "id": 202416860,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593512216
    }
]