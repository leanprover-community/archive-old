[
    {
        "content": "<p>Hi, I'm new to mathlib and I'm somewhat unclear on its scope. Would a proof of Zeckendorf's theorem be a welcome addition?</p>",
        "id": 273782654,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646215727
    },
    {
        "content": "<p>Do you have any hint for us about what this theorem is about?</p>",
        "id": 273782700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646215757
    },
    {
        "content": "<p>It's about writing natural numbers in Fibonacci numbers base.</p>",
        "id": 273783008,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646215916
    },
    {
        "content": "<p>It would definitely be in scope.</p>",
        "id": 273783058,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646215925
    },
    {
        "content": "<p>yeah, let's get phinary numbers</p>",
        "id": 273783258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646216053
    },
    {
        "content": "<p>Some people were working on it like three months ago. Don't know where they're at.</p>",
        "id": 273783320,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646216112
    },
    {
        "content": "<p>Found a proof of the existence part pasted in a previous thread. I'm surprised how long-winded it is, I think I'll try to write a simpler proof myself.</p>",
        "id": 273790634,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646219733
    },
    {
        "content": "<p>Let me just casually drop in the following link<br>\n<a href=\"https://www.math.leidenuniv.nl/~hwl/papers/fibo.pdf\">https://www.math.leidenuniv.nl/~hwl/papers/fibo.pdf</a><br>\nin case folks want some more ideas for fun formalization projects around Fibonacci numbers.</p>",
        "id": 273821903,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1646234283
    },
    {
        "content": "<p>So, at what point do I ask for side-branch GitHub access?</p>",
        "id": 273858609,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646247380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"482773\">@Jakub Kądziołka</span> what's your github ID?</p>",
        "id": 273861710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646248553
    },
    {
        "content": "<p><code>NieDzejkob</code></p>",
        "id": 273862045,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646248721
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"482773\">@Jakub Kądziołka</span> <a href=\"https://github.com/leanprover-community/mathlib/invitations\">https://github.com/leanprover-community/mathlib/invitations</a></p>",
        "id": 273863039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646249130
    },
    {
        "content": "<p>thanks!</p>",
        "id": 273864331,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646249685
    },
    {
        "content": "<p>BTW, is this something that should go in data/nat/fib.lean, or a separate file?</p>",
        "id": 273866579,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646250689
    },
    {
        "content": "<p>if you are adding &gt; 200 lines, I would start a new file. If you need heavy imports, also start a new file please. Otherwise, appending it to the existing file is fine.</p>",
        "id": 273867344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1646250974
    },
    {
        "content": "<p>also if the new material is costly in compile time start a new file</p>",
        "id": 273869177,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646251694
    },
    {
        "content": "<p>I would rename <code>data.nat.fib</code> to <code>data.nat.fib.basic</code> and add your stuff to <code>data.nat.fib.zeckendorf</code></p>",
        "id": 273882908,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646257937
    },
    {
        "content": "<p>What would be the best way of defining something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">fib_floor</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">|</span> <span class=\"n\">fib</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">max</span>\n</code></pre></div>",
        "id": 273887394,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646260089
    },
    {
        "content": "<p>Induction probably!</p>",
        "id": 273887592,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646260202
    },
    {
        "content": "<p>What would you induct on here? O_o</p>",
        "id": 273889083,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646260894
    },
    {
        "content": "<p>I was thinking I could maybe make use of <code>fib_add_two_strict_mono</code></p>",
        "id": 273889135,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646260921
    },
    {
        "content": "<p>oh, perhaps induct on n, case splitting on whether n is in the image</p>",
        "id": 273890306,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646261502
    },
    {
        "content": "<p>is there no lemma about a strictly monotone function splitting its codomain into intervals?</p>",
        "id": 273890429,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646261556
    },
    {
        "content": "<p>Maybe you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.find\">docs#nat.find</a>?</p>",
        "id": 273890521,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646261602
    },
    {
        "content": "<p>and I'm done. Interestingly I managed to replace a lot of the hairy details of the proof on Wikipedia with a straightforward induction. PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/12443\">https://github.com/leanprover-community/mathlib/pull/12443</a></p>",
        "id": 274063737,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646355201
    },
    {
        "content": "<p>You can type <a href=\"https://github.com/leanprover-community/mathlib/pull/12443\">#12443</a> rather than copying the link <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 274065433,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646356443
    },
    {
        "content": "<p>Is there a lemma somewhere that a strict monotone function <code>f : ℕ -&gt; ℕ</code> has the property that for all <code>n</code> greater than or equal to <code>f 0</code> that <code>n</code> lies in a closed-open interval between consecutive images? That could be used to prove this lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">fib_between</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">fib</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">fib</span> <span class=\"n\">k.succ</span>\n</code></pre></div>",
        "id": 274097273,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1646383604
    },
    {
        "content": "<p>I'm pretty sure we don't have such a lemma, but <a href=\"https://github.com/leanprover-community/mathlib/pull/12443#discussion_r819194433\">I agree we should</a>.</p>",
        "id": 274099034,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1646384561
    },
    {
        "content": "<p>This is sort of a variant of the adjoint functor theorem. If <code>f : nat -&gt; nat</code> is monotone, unbounded, and<code>f 0 = 0</code>,  then <code>f</code> should be the lower adjoint in a Galois connection. I think this <code>fib_between</code> follows from this (use the upper adjoint to find <code>k</code>)</p>",
        "id": 274101517,
        "sender_full_name": "David Wärn",
        "timestamp": 1646385885
    },
    {
        "content": "<p>sounds interesting, do you have any suggestions for a short-ish description of how this works, compatible with a first-year undergrad?</p>",
        "id": 274102918,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646386455
    },
    {
        "content": "<p>Jakub, David is using a fancy language but his claim is completely elementary. Do you know about Galois connections?</p>",
        "id": 274103301,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646386646
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/galois_connection\">docs#galois_connection</a></p>",
        "id": 274103339,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646386673
    },
    {
        "content": "<p>oh, so where's the theorem he's referencing?</p>",
        "id": 274103878,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646386950
    },
    {
        "content": "<p>I don't think this is in mathlib yet</p>",
        "id": 274104529,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646387301
    },
    {
        "content": "<p>I think I'll prove it just about monotone functions, then. Where would I put it? <code>data.nat.lattice</code>?</p>",
        "id": 274110683,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646390521
    },
    {
        "content": "<p>Modulo easy stuff that may be already here, David means:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.galois_connection</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.monotone</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.at_top_bot</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">fmono</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat.finite_of_bdd_above</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">bdd_above</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">yo</span> <span class=\"o\">(</span><span class=\"n\">fmono</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">finite</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat.finite_of_bdd_above</span><span class=\"o\">,</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">fmono</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">yo</span> <span class=\"n\">fmono</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span>\n\n<span class=\"kd\">@[simp]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_foo</span> <span class=\"o\">(</span><span class=\"n\">fmono</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">f</span><span class=\"o\">)</span>  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"n\">foo</span> <span class=\"n\">fmono</span> <span class=\"n\">k</span> <span class=\"bp\">↔</span> <span class=\"n\">f</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">strict_mono.bar</span> <span class=\"o\">(</span><span class=\"n\">fmono</span> <span class=\"o\">:</span> <span class=\"n\">strict_mono</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f0</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">fmono</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_foo</span><span class=\"o\">,</span> <span class=\"n\">f0</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">zero_le</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n\n<span class=\"sd\">/-- Given a strict mono `f : ℕ → ℕ` with `f 0 = 0`, `g k = max {n | f n ≤ k}`.</span>\n<span class=\"sd\">This is the upper adjoint of a Galois connection having `f` as a lower adjoint, see</span>\n<span class=\"sd\">`gc` below. -/</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">finset.max'</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">fmono.bar</span> <span class=\"n\">f0</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">g_mem</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">fmono</span> <span class=\"n\">f0</span> <span class=\"n\">k</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">fmono</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">finset.max'_mem</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">fmono</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fmono.bar</span> <span class=\"n\">f0</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gc</span> <span class=\"o\">:</span> <span class=\"n\">galois_connection</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">fmono</span> <span class=\"n\">f0</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">finset.le_max'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"n\">mem_foo</span> <span class=\"n\">fmono</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n        <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">fmono.monotone</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">$</span> <span class=\"o\">(</span><span class=\"n\">mem_foo</span> <span class=\"n\">fmono</span> <span class=\"n\">k</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"bp\">$</span> <span class=\"n\">g_mem</span> <span class=\"n\">fmono</span> <span class=\"n\">f0</span> <span class=\"n\">k</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 274126157,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646399697
    },
    {
        "content": "<p>Of course you would also need proper names. <span class=\"user-mention\" data-user-id=\"482773\">@Jakub Kądziołka</span></p>",
        "id": 274126426,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1646399844
    }
]