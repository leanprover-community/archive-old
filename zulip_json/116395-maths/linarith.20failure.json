[
    {
        "content": "<p>I've started doing basic analysis in Lean with the undergraduates and I'm really using <code>linarith</code> a lot, it's really handy for this sort of thing. I was trying to prove that 1/n tended to zero using it, and I ran into this: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- fails</span>\n</pre></div>\n\n\n<p>Is that a bug, or am I asking too much?</p>",
        "id": 155363230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547754420
    },
    {
        "content": "<p>that looks like a bug</p>",
        "id": 155363405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547754539
    },
    {
        "content": "<p>does <code>generalize : 1/a = x; linarith</code> work?</p>",
        "id": 155363437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547754567
    },
    {
        "content": "<p>Yeah, that should be within scope. I'm guessing it's still too aggressive about ignoring nonlinear things, instead of trying to work with the linear parts. I fixed something related a while back iirc, but maybe not enough.</p>",
        "id": 155363577,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1547754654
    },
    {
        "content": "<p><code>linarith h1 h2</code> should work if it's a filtering problem</p>",
        "id": 155363825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547754853
    },
    {
        "content": "<p>Yes, generalizing works.</p>",
        "id": 155363832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547754858
    },
    {
        "content": "<p><code>linarith</code> takes arguments??</p>",
        "id": 155363853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547754874
    },
    {
        "content": "<p>apparently (reading the src now)</p>",
        "id": 155363871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547754892
    },
    {
        "content": "<p>It might reject it at the parsing step though.</p>",
        "id": 155363877,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1547754897
    },
    {
        "content": "<p>I'll look into it soon.</p>",
        "id": 155363904,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1547754912
    },
    {
        "content": "<p>linarith takes arguments, in case you have lots of hypotheses and know which ones are contradictory.</p>",
        "id": 155363935,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1547754949
    },
    {
        "content": "<p>PS this was great:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">abs</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">abs</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">abs</span><span class=\"o\">,</span> <span class=\"n\">unfold</span> <span class=\"n\">max</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- goal with three ite&#39;s in</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- 8 goals</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">linarith</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 155365130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547755920
    },
    {
        "content": "<p>You can replace that <code>, repeat</code> with a <code>;</code></p>",
        "id": 155365202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547755964
    },
    {
        "content": "<p>But that's less readable</p>",
        "id": 155365214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547755979
    },
    {
        "content": "<p>It requires knowing what <code>;</code> does, but then it's readable</p>",
        "id": 155365246,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547756015
    },
    {
        "content": "<p>This is buried a little deeper than I expected. It's a mistake in the part of <code>linarith</code> that normalizes non-integer coefficients (in <code>norm_hyp_aux</code> I think). I'll fix it, but not tonight.</p>",
        "id": 155366709,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1547757249
    },
    {
        "content": "<p>Thanks for chasing this up! I really want to let undergraduates see that doing basic analysis in Lean is really easy, the triangle inequality proof went down really well!</p>",
        "id": 155366787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547757344
    },
    {
        "content": "<p>I'm also very interested in this. Do you have files to share?</p>",
        "id": 155366901,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547757422
    },
    {
        "content": "<p>I've only given one lecture so far and I've done barely anything.</p>",
        "id": 155366917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547757442
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/M1P1-lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M1P1-lean\">https://github.com/ImperialCollegeLondon/M1P1-lean</a></p>",
        "id": 155367083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547757585
    },
    {
        "content": "<p>I proved a sequence has at most one limit; I used ring to prove things like e + e = 2 * e and Kenny was in the front row exploding.</p>",
        "id": 155367161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547757624
    },
    {
        "content": "<p>But I can't teach all the students the 100 lemmas each of which can be proved by ring</p>",
        "id": 155367175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547757642
    },
    {
        "content": "<p>I want to just teach them ring instead</p>",
        "id": 155367186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547757650
    },
    {
        "content": "<p>My plan is to track their lectures and prove the interesting theorems as they're proved in class.</p>",
        "id": 155367420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547757827
    },
    {
        "content": "<p>wow, you really jumped right in</p>",
        "id": 155367472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547757847
    },
    {
        "content": "<p>in the ITP class Jeremy and I are teaching we've barely got to what a <code>def</code> is, how <code>variable</code> and <code>section</code> work and so on</p>",
        "id": 155367509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547757882
    },
    {
        "content": "<p>I asked the lecturer. He said that he was going to assume that the reals were a complete archimedean field and develop everything from that.</p>",
        "id": 155367534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547757904
    },
    {
        "content": "<p>This is why we need mathematicians to teach proof assistants</p>",
        "id": 155367547,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547757913
    },
    {
        "content": "<p>so my plan was to spend the term trying to prove the things he proved, but in Lean. I would imagine that many of them are in mathlib already, but I didn't even look at the definition of a sequence tending to a limit in case it used cofinite filters. Of course I used the epsilon / N definition, because that's what they're told.</p>",
        "id": 155367632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1547757964
    },
    {
        "content": "<p>Never mind, I fixed it tonight. There could be some similar cases that this fix misses though.</p>",
        "id": 156324714,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1547763883
    },
    {
        "content": "<p>I have another linarith failure. The hypotheses involving <code>N</code> and <code>n</code> are irrelevant to the goal, and if you comment out the line with them in then linarith succeeds, but if you leave them in then it fails.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span>\n<span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hirrelevant</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"c1\">-- comment out this line to fix</span>\n<span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h_1</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">A</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h_2</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"bp\">-</span><span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h_3</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">A</span> <span class=\"bp\">&lt;</span> <span class=\"n\">l</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">done tactic failed, there are unsolved goals</span>\n<span class=\"cm\">...</span>\n<span class=\"cm\">⊢ ↑(2 * -1) + 2 = 0</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 156771005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548335675
    },
    {
        "content": "<p>Yeah, I know what's going on here. <code>linarith</code> is actually \"succeeding,\" but <code>Hirrelevant</code> convinced it it was working over <code>int</code> instead of <code>real</code>, so it builds the wrong proof of contradiction. I'm on it.</p>",
        "id": 156777566,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548341547
    },
    {
        "content": "<p>In the meantime, you can help it out by calling <code>linarith {restrict_type := ℝ}</code> instead.</p>",
        "id": 156777590,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548341572
    },
    {
        "content": "<p>Is this expected behaviour? </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">linarith failed to find a contradiction</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">a b : ℤ,</span>\n<span class=\"cm\">h : a &lt; b,</span>\n<span class=\"cm\">c : ℤ := b,</span>\n<span class=\"cm\">a_1 : a ≥ c</span>\n<span class=\"cm\">⊢ false</span>\n<span class=\"cm\">-/</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>In practice I have some positive real <code>eps := (b - a) / 2</code> which is mentioned in several hypotheses  and the conclusion. I can close my goal with lots of <code>change</code> or <code>show</code> commands removing all the <code>eps</code>'s and then running <code>linarith</code> after, but my understanding of the internals of <code>linarith</code> is sufficiently poor that I don't know whether I should expect the tactic to handle these variables defined in terms of other variables or whether they're my problem.</p>",
        "id": 157057941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548709980
    },
    {
        "content": "<p>Aah, I can do <code>have Heps : eps = (b - a) / 2 := rfl, rw Heps at *</code> as a workaround :-) I don't know any other way of doing multiple substitutions at once.</p>",
        "id": 157058260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548710194
    },
    {
        "content": "<p>Do you need the <code>rw</code>? After all <code>eps = (b - a) / 2</code> is also a linear constraint</p>",
        "id": 157058397,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548710314
    },
    {
        "content": "<p>Well spotted :-) Yes, it works fine in my (quite complicated) use case. Excellent trick!</p>",
        "id": 157058484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548710397
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- linarith, -- fails</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 157058742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548710585
    },
    {
        "content": "<p>It's funny that <code>c := b</code> shows up in my local context, but the hypothesis that c = b is apparently not in it. If the let were syntactic sugar, I wouldn't need the have, right? I'm not entirely sure what's going on here. Hmm, oh OK, maybe c is defined to be b, and Lean knows this but the fact isn't in the local context. I guess I'm showing my ignorance of how things really work here. I was hoping <code>unfold eps</code> would work in my case but it didn't.</p>",
        "id": 157058940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548710736
    },
    {
        "content": "<p>It seems like tactics like <code>rw</code> and <code>simp</code> sometimes \"see through\" let-bound variables, and I never understood exactly when or why</p>",
        "id": 157060217,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548711720
    },
    {
        "content": "<blockquote>\n<p>maybe c is defined to be b</p>\n</blockquote>\n<p>This is roughly right, a <code>let</code> is like a local <code>def</code>. It's not syntactic sugar.</p>\n<blockquote>\n<p>but the fact isn't in the local context</p>\n</blockquote>\n<p>The information is in the type context, which is why you see <code>c : Z := b</code>. There's no term of type <code>c = b</code> until you add it manually. I don't think <code>linarith</code> should unfold <code>let</code> bindings, since they can be used to hide arbitrarily large terms. It's analogous to unfolding definitions (which <code>linarith</code> doesn't do and shouldn't do).</p>",
        "id": 157060491,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548711951
    },
    {
        "content": "<p>Thanks for the clarification Rob. I didn't like my original solution (lots of 'change') but I'm happy to add the hypothesis that <code>c</code> equals its definition to the context and then let <code>linarith</code> take over. I have over 20 occurrences of <code>linarith</code> in <a href=\"https://github.com/ImperialCollegeLondon/M1P1-lean/blob/master/src/limits.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M1P1-lean/blob/master/src/limits.lean\">https://github.com/ImperialCollegeLondon/M1P1-lean/blob/master/src/limits.lean</a> so far; it's an essential tactic for this sort of thing.</p>",
        "id": 157061190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548712575
    },
    {
        "content": "<p>Did you tried also using <code>mono</code>?</p>",
        "id": 157061326,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548712734
    },
    {
        "content": "<p>I don't know what that does.</p>",
        "id": 157061337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548712744
    },
    {
        "content": "<p>Isn't it some disease in the US?</p>",
        "id": 157061346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548712752
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/docs/tactics.md#mono\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/tactics.md#mono\">https://github.com/leanprover/mathlib/blob/master/docs/tactics.md#mono</a></p>",
        "id": 157061489,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548712875
    },
    {
        "content": "<p>There is also <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/tactics.md#apply_rules\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/tactics.md#apply_rules\">https://github.com/leanprover/mathlib/blob/master/docs/tactics.md#apply_rules</a></p>",
        "id": 157061576,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548712950
    },
    {
        "content": "<p>but apply_rules seems very slow</p>",
        "id": 157061835,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548713174
    },
    {
        "content": "<p>You can try to stick the following into  your limits file:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- Next lemma could be either hidden of given a user-friendly proof</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_of_abs_lt_all</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_zero_of_abs_eq_zero</span> <span class=\"err\">$</span> <span class=\"n\">eq_of_le_of_forall_le_of_dense</span> <span class=\"o\">(</span><span class=\"n\">abs_nonneg</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- The next few things should be hidden</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">user_attribute</span><span class=\"o\">]</span>\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">ineq_rules</span> <span class=\"o\">:</span> <span class=\"n\">user_attribute</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"n\">ineq_rules</span><span class=\"o\">,</span>\n  <span class=\"n\">descr</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;lemmas usable to prove inequalities&quot;</span> <span class=\"o\">}</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ineq_rules</span><span class=\"o\">]</span> <span class=\"n\">add_lt_add</span> <span class=\"n\">le_max_left</span> <span class=\"n\">le_max_right</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">obvious_ineq</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">linarith</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply_rules</span> <span class=\"n\">ineq_rules</span><span class=\"o\">]</span>\n<span class=\"n\">run_cmd</span> <span class=\"n\">add_interactive</span> <span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">obvious_ineq</span><span class=\"o\">]</span>\n<span class=\"c1\">-- end of scary things</span>\n\n<span class=\"c1\">-- We&#39;re ready to prove the theorem.</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">limits_are_unique</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- Let prove |l - m| is smaller than any positive number, since that will easily imply l = m</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">eq_of_sub_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">zero_of_abs_lt_all</span> <span class=\"bp\">_</span> <span class=\"n\">this</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- Let ε be any positive number, and let&#39;s prove |l - m| &lt; ε</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Because aₙ → l, there exists Nₗ such that n ≥ Nₗ → |aₙ - l| &lt; ε/2</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hl</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">obvious_ineq</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">Nₗ</span> <span class=\"n\">Hₗ</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Because aₙ → m, there exists Nₘ such that n ≥ Nₘ → |aₙ - m| &lt; ε/2</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">obvious_ineq</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">Nₘ</span> <span class=\"n\">Hₘ</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- The trick is to let N be the max of Nₗ and Nₘ</span>\n  <span class=\"k\">let</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"n\">max</span> <span class=\"n\">Nₗ</span> <span class=\"n\">Nₘ</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- Now clearly N ≥ Nₗ...</span>\n  <span class=\"k\">have</span> <span class=\"n\">H₁</span> <span class=\"o\">:</span> <span class=\"n\">Nₗ</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">obvious_ineq</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ... so |a_N - l| &lt; ε/2</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Hₗ</span> <span class=\"n\">N</span> <span class=\"n\">H₁</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- similarly N ≥ Nₘ...</span>\n  <span class=\"k\">have</span> <span class=\"n\">H₂</span> <span class=\"o\">:</span> <span class=\"n\">Nₘ</span> <span class=\"bp\">≤</span> <span class=\"n\">N</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">obvious_ineq</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ... so |a_N - m| &lt; ε/2 too</span>\n  <span class=\"k\">have</span> <span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">Hₘ</span> <span class=\"n\">N</span> <span class=\"n\">H₂</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- We now combine</span>\n  <span class=\"n\">exact</span> <span class=\"k\">calc</span> <span class=\"bp\">|</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"bp\">|</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">l</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"n\">triangle&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">obvious_ineq</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 157061960,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548713336
    },
    {
        "content": "<p>Note that you can put <code>triangle'</code> into the list of obvious inequalities and get all inequalities proved for free, but this would probably be cheating</p>",
        "id": 157062049,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548713415
    },
    {
        "content": "<p>Can this do the product of limits is limit of product?</p>",
        "id": 157063086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548714435
    },
    {
        "content": "<p>That was horrible</p>",
        "id": 157063094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548714442
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/M1P1-lean/blob/87f2b5b4dc741c5d44751678e37229c1964799e3/src/limits.lean#L299\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/M1P1-lean/blob/87f2b5b4dc741c5d44751678e37229c1964799e3/src/limits.lean#L299\">https://github.com/ImperialCollegeLondon/M1P1-lean/blob/87f2b5b4dc741c5d44751678e37229c1964799e3/src/limits.lean#L299</a> That was where it started going wrong</p>",
        "id": 157063115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548714471
    },
    {
        "content": "<p><code>linarith</code> seems to know <code>add_lt_add</code> for the reals.</p>",
        "id": 157065227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548716453
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/nonlinarith/near/157067630\" title=\"#narrow/stream/116395-maths/topic/nonlinarith/near/157067630\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/nonlinarith/near/157067630</a> Got it, thanks to you and Reid.</p>",
        "id": 157067936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548719101
    },
    {
        "content": "<p>Actually I also don't like your <code>triangle'</code>. Remembering 10 versions of the triangle inequality is not how we teach this. You can do:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">calc</span>\n    <span class=\"bp\">|</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"bp\">|</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span><span class=\"bp\">|</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">≤</span> <span class=\"bp\">|</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">a</span> <span class=\"n\">N</span><span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"bp\">|</span>   <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">obvious_ineq</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">l</span> <span class=\"bp\">|</span> <span class=\"bp\">+</span> <span class=\"bp\">|</span><span class=\"n\">a</span> <span class=\"n\">N</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"bp\">|</span>  <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">abs_sub</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"bp\">/</span><span class=\"mi\">2</span>               <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">obvious_ineq</span>\n        <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span>                       <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>where the only painful part is this <code>rw abs_sub</code>. I added <code>abs_add</code>, which is the regular triangle inequality for abs, to the <code>obvious_ineq</code> rules, but it's probably better to explicitly use it since it's a key part of the argument</p>",
        "id": 157088858,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548750437
    },
    {
        "content": "<p>simply replace that <code>by obvious_ineq</code> with <code>abs_add _ _</code></p>",
        "id": 157088863,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548750466
    },
    {
        "content": "<p>I'll do limits of products tonight if I have time, and if I'm not too depressed about trying to use Lean for teaching (my first lecture using Lean will be at the end of this afternoon)</p>",
        "id": 157088922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548750534
    },
    {
        "content": "<p>Good luck Patrick!</p>",
        "id": 157090831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548752467
    },
    {
        "content": "<p>And I really like your little tactics!</p>",
        "id": 157090851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548752494
    },
    {
        "content": "<p>A thought: it might be useful to have a tactic <code>set</code> that does what Kevin wants, i.e. a version of <code>let</code> that puts an equality in the context. For example, <code>set h : a = t</code> would create a new variable <code>a</code>, and put <code>h : a = t</code> into the context. Under the hood, <code>set</code> changes the goal <code>G</code> to <code>forall a, a = t -&gt; G</code>, and then introduces the hypotheses. It's a combination of noting <code>t = t</code>, reverting, generalizing, and introducing. (But maybe there is already a nice way to do this?)</p>",
        "id": 157104340,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1548768403
    },
    {
        "content": "<p>It seems more natural to use a <code>let</code> to do that. Why not preserve the definitional equality?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">tactic</span> <span class=\"n\">lean</span><span class=\"bp\">.</span><span class=\"n\">parser</span> <span class=\"n\">interactive</span> <span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">name</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">expr</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">do</span> <span class=\"n\">tp</span> <span class=\"err\">←</span> <span class=\"n\">infer_type</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n   <span class=\"n\">nv</span> <span class=\"err\">←</span> <span class=\"n\">definev</span> <span class=\"n\">a</span> <span class=\"n\">tp</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n   <span class=\"n\">to_expr</span> <span class=\"bp\">``</span><span class=\"o\">(</span><span class=\"err\">%%</span><span class=\"n\">nv</span> <span class=\"bp\">=</span> <span class=\"err\">%%</span><span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">assert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n   <span class=\"n\">reflexivity</span>\n\n<span class=\"n\">meta</span> <span class=\"n\">def</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;:&quot;</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">ident</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"o\">(</span><span class=\"n\">tk</span> <span class=\"s2\">&quot;:=&quot;</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">parse</span> <span class=\"n\">texpr</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">i_to_expr</span> <span class=\"n\">v</span> <span class=\"bp\">&gt;&gt;=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">set</span> <span class=\"n\">a</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"mi\">5</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">set</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 157106342,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548770377
    },
    {
        "content": "<p>Looks good to me!</p>",
        "id": 157108335,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1548772069
    },
    {
        "content": "<p>The syntax looks a bit funny, it looks like h has type n :-/</p>",
        "id": 157109507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548772942
    },
    {
        "content": "<p>It is unfortunately not analogous to <code>let h : n := x + y</code>. Better suggestion?</p>",
        "id": 157109611,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548773033
    },
    {
        "content": "<p>I remember always being muddled by <code>generalize</code>...</p>",
        "id": 157109680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548773065
    },
    {
        "content": "<p><code>set n := x + y using h</code>?</p>",
        "id": 157109722,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548773107
    },
    {
        "content": "<p>maybe that's better!</p>",
        "id": 157109742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548773136
    },
    {
        "content": "<p>cool little parser exercise to do now :-)</p>",
        "id": 157109750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548773149
    },
    {
        "content": "<p><code>set n := x + y with h</code> in analogy with <code>cases ... with</code> etc.<br>\nI think <code>using</code> will \"use\" one of your current hypotheses, or some expression (like in <code>simpa</code>),<br>\nwhereas <code>with</code> gives names for new hypotheses.</p>",
        "id": 157110988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548774184
    },
    {
        "content": "<p>Is it possible to even get <code>let n := x + y with h</code>?</p>",
        "id": 157120730,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1548782306
    },
    {
        "content": "<p>In addition to syntax discussions, the question is whether this tactic should replace <code>x+y</code> by <code>n</code> everywhere, or only in the goal, or nowhere.</p>",
        "id": 157131673,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1548790897
    },
    {
        "content": "<p>In the example that Rob posted, associativity would prevent a naive replacement to yield <code>n+n+n = 5</code>, right? So then the replacement algorithm needs to know about associativity, and it becomes complicated.</p>",
        "id": 157131920,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548791046
    },
    {
        "content": "<p>Yeah, the example doesn't illustrate this very well. Maybe a variant <code>set! n := x + y with h</code> could try <code>simp only [h.symm] at *</code> at the end. But I think it's better not to do this by default, to match the behavior of <code>let</code>.</p>",
        "id": 157134524,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548793068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <code>tactic.interactive.let</code> is defined in core, so I'm afraid not.</p>",
        "id": 157134602,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1548793124
    },
    {
        "content": "<p>I've added this. The basic syntax is <code>set n := x + y with h</code>. Alternatives: <code>set! n := x + y with h</code> will rewrite <code>x + y</code> to <code>n</code> everywhere it can. <code>set n := x + y with h⁻¹</code> will make the equality proof face the other direction.</p>",
        "id": 157346025,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549019904
    },
    {
        "content": "<p>I ended up needing this tactic for something I was doing yesterday, heh. It also led me to another bug in <code>linarith</code>.</p>",
        "id": 157346068,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549019974
    },
    {
        "content": "<p>how is this different from <code>let</code>?</p>",
        "id": 157346771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549020936
    },
    {
        "content": "<p>It adds a hypothesis that states the new definition propositionally.</p>",
        "id": 157346836,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549020996
    },
    {
        "content": "<p>is it also a let?</p>",
        "id": 157346840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549021006
    },
    {
        "content": "<p>Yes.</p>",
        "id": 157346844,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549021010
    },
    {
        "content": "<p>I think the <code>set n := x + y</code> variant may also be useful - no equality assumption, but <code>x + y</code> gets replaced by <code>n</code></p>",
        "id": 157346868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549021055
    },
    {
        "content": "<p>I think that <code>set!</code> should be the default behavior, I'm not sure where the <code>set</code> behavior is better</p>",
        "id": 157346928,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549021119
    },
    {
        "content": "<p>also I suggest <code>&lt;- h</code> instead of <code>h⁻¹</code> for the reversed proof - we haven't used the inverse symbol for symmetry since lean 2</p>",
        "id": 157346961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549021197
    },
    {
        "content": "<p>Next time could we discuss the details before making changes to the mathlib in order to minimize changes to <code>tactic/interactive.lean</code>?</p>",
        "id": 157347045,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1549021303
    },
    {
        "content": "<p>I chose this as the default because <code>set!</code> sometimes reorders hypotheses, which is a little annoying if you don't care. It's not a big deal though, I can change it. Sure, the behavior without an equality hypothesis sounds good, as well as the notation.</p>",
        "id": 157347099,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549021344
    },
    {
        "content": "<p>I hope that the changes can be obtained by <code>change</code> rather than <code>rw</code></p>",
        "id": 157347114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549021380
    },
    {
        "content": "<p><code>change at *</code> seems to have a bug, it fails completely.</p>",
        "id": 157347134,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549021409
    },
    {
        "content": "<p>Or rather, it succeeds without doing anything.</p>",
        "id": 157347140,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549021422
    },
    {
        "content": "<p>you have to do it somewhat manually with the noninteractive change</p>",
        "id": 157347202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549021456
    },
    {
        "content": "<p>you revert the relevant hypotheses then use <code>tactic.change</code></p>",
        "id": 157347215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549021477
    },
    {
        "content": "<p>I'll give it another shot. I tried this first, but it was behaving strangely.</p>",
        "id": 157347314,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549021588
    },
    {
        "content": "<p>Gotta run, lunchtime.</p>",
        "id": 157347319,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549021596
    },
    {
        "content": "<p><code>set</code>-related question, although indirectly. I have an element of <code>fin n</code> given by a complicated formula, to which I would like to give a name for clarity. <code>let x := complicated_expression</code> works fine, but it would even be more useful for me to give a name to the fields of <code>x</code> directly, i.e., to write <code>let ⟨i, hi⟩ := complicated_expression</code>. This does not work. I can define <code>x</code>, and then <code>let i := x.1, let hi := x.2</code>, but then the fact that <code>⟨i, hi⟩ = complicated_expression</code> is not refl, it requires a proof based for instance on <code>fin.ext_iff</code>. All this looks like useless plumbing to me. Is there a nice syntax to do this that I am unaware of?</p>",
        "id": 157363142,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549036862
    },
    {
        "content": "<p>Sebastien's question above deserves some expert comment but perhaps it's not in the right thread. </p>\n<p>Independent of all this, here's an interesting session:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">linarith</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- fails, I think because α is not commutative</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">-</span><span class=\"n\">s</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"c1\">-- fails because of unsolved goal -s + (r - (r - s)) = 0</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">r</span> <span class=\"bp\">-</span> <span class=\"n\">s</span> <span class=\"bp\">≤</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">linarith</span> <span class=\"o\">{</span><span class=\"n\">discharger</span> <span class=\"o\">:=</span> <span class=\"n\">simp</span><span class=\"o\">}</span> <span class=\"c1\">-- &quot;unknown identifier &#39;simp&#39;&quot;</span>\n</pre></div>\n\n\n<p>I have been building the theory of decimal expansions so that I can formalise last year's M1F final exam in Lean, and I was surprised to find that <code>linear_ordered_ring</code>s were not commutative! Does anyone know an example of a linearly ordered ring which is not commutative? It is not even entirely impossible that they are all commutative, although I've not thought about this; it's probably more likely that there are pathological examples. Is every linearly ordered floor ring commutative though?? Hmm, I seem to have wandered off topic myself.</p>\n<p>Anyway, of course I could just take the lame way out and restrict to <code>linear_ordered_comm_rings</code>, which ultimately I will surely end up doing, but I tried to work my way around this using <code>simp</code> and realised that I could not get the <code>discharger</code> argument to <code>linarith</code> working. Unfortunately my knowledge of meta lean is still sufficiently poor that I basically grind to a halt here when trying to debug why <code>{discharger := simp}</code> fails. Did I do something wrong or is there a bug?</p>",
        "id": 157514110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549277118
    },
    {
        "content": "<p>To sebastian's question: it is impossible to achieve exactly the defeqs that he would want. In general it is not possible to get <code>⟨i, hi⟩ = complicated_expression</code> to be defeq, unless <code>complicated_expression</code> has a particular form that allows reduction to a constructor</p>",
        "id": 157514312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549277345
    },
    {
        "content": "<p>However <code>rcases complicated_expression with ⟨i, hi⟩</code> will often achieve the desired result, provided you don't need to refer back to any more properties of <code>complicated_expression</code> after this point. (If you do, you can make sure to state them before the cases)</p>",
        "id": 157514413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549277434
    },
    {
        "content": "<p>Would <code>cases complicated_expression with i hi</code> be any different?</p>",
        "id": 157514439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549277485
    },
    {
        "content": "<p>no</p>",
        "id": 157514442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549277489
    },
    {
        "content": "<p>rcases just looks a bit closer to the other syntax</p>",
        "id": 157514452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549277506
    },
    {
        "content": "<p>does <code>abel</code> work on those goals?</p>",
        "id": 157514522,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549277598
    },
    {
        "content": "<p>I'm going to move the <code>floor_ring</code> discussion elsewhere.</p>",
        "id": 157514577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549277644
    },
    {
        "content": "<p><code>abel</code> -&gt; <code>r + gsmul (-1) s ≤ r</code></p>",
        "id": 157514609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549277687
    },
    {
        "content": "<p>My bet is that there are noncomm linear ordered rings</p>",
        "id": 157514643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549277735
    },
    {
        "content": "<p>For the discharger question, use <code> `[simp] </code>instead.</p>",
        "id": 157514722,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1549277818
    },
    {
        "content": "<blockquote>\n<p>However <code>rcases complicated_expression with ⟨i, hi⟩</code> will often achieve the desired result, provided you don't need to refer back to any more properties of <code>complicated_expression</code> after this point. (If you do, you can make sure to state them before the cases)</p>\n</blockquote>\n<p>This is not an option in my case, I need to keep all information on <code>complicated_expression</code>. Fine, I'll go with my basic ugly (but working) solution, <code>let</code>ting the components separately and proving the equality.</p>",
        "id": 157514948,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549278060
    },
    {
        "content": "<p>you should be able to get the equality on the components if you use <code>set</code></p>",
        "id": 157514966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549278096
    },
    {
        "content": "<p>To try this, I have to rebase on a recent mathlib version :)</p>",
        "id": 157515031,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1549278160
    },
    {
        "content": "<blockquote>\n<p>I need to keep all information on complicated_expression.</p>\n</blockquote>\n<p>This is almost certainly not true, it's just a question of <em>how much</em> information about the expression you need to retain. Of course the limiting case is where you keep the fact that the expression is equal to <code>complicated_expression</code>, in which case you get that equality <code>⟨i, hi⟩ = complicated_expression</code> you said originally</p>",
        "id": 157515051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1549278196
    }
]