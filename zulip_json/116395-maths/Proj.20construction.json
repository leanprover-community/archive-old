[
    {
        "content": "<p>I am working on Proj construction at <a href=\"https://github.com/leanprover-community/mathlib/pull/9964\">https://github.com/leanprover-community/mathlib/pull/9964</a>. When try to prove</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">stalk_iso</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">projective_spectrum.Top</span> <span class=\"bp\">𝒜</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">structure_sheaf</span> <span class=\"bp\">𝒜</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">stalk</span> <span class=\"n\">x</span> <span class=\"bp\">≃+*</span> <span class=\"n\">CommRing.of</span> <span class=\"o\">(</span><span class=\"n\">hartshorne_localisation</span> <span class=\"bp\">𝒜</span> <span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n\n<span class=\"c1\">-- 𝒜 is grading</span>\n</code></pre></div>\n<p>by following hartshorne, the definition I ended up with is full of <code>classical.some</code> so not very useful. Does any body know a cleaner way to do this?</p>\n<p>Because <code>hartshorne_localisation 𝒜 x</code> is a subring of a localisation ring, so I couldn't directly use <code>localization.lift</code>.</p>\n<p>I also wasn't able to follow the method in <code>prime_spectrum</code> because there is a lot of degree of homogeneous elements involved.</p>",
        "id": 266856045,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1641326703
    },
    {
        "content": "<p>I don't have Hartshorne hear next to me. Did you also look at the Stacks Project? Do they do the same thing?</p>",
        "id": 266856413,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1641326922
    },
    {
        "content": "<p>Stack project defined structure sheaf on basic open sets and lift it up.</p>",
        "id": 266856491,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1641326977
    },
    {
        "content": "<p>Can you say something about the mathematics behind the question you're asking? I just looked at the diff for the branch and it's really long and terrifying</p>",
        "id": 266856570,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641327013
    },
    {
        "content": "<p>Hartshorne's definition of the structure sheaf is completely different to stacks.</p>",
        "id": 266856816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641327138
    },
    {
        "content": "<p>So the problem is the following:</p>\n<p>From my understanding In Hartshorne <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>U</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(U)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span> is defined to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>:</mo><mi>U</mi><mo>→</mo><mo>∐</mo><msub><mi>S</mi><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"fraktur\">p</mi><mo stretchy=\"false\">)</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">s: U \\to \\coprod S_{(\\mathfrak p)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3552em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:0em;\">∐</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathfrak mtight\">p</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"fraktur\">p</mi><mo stretchy=\"false\">)</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">S_{(\\mathfrak p)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0385em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathfrak mtight\">p</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span></span></span></span> is subring of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mi mathvariant=\"fraktur\">p</mi></msub></mrow><annotation encoding=\"application/x-tex\">S_{\\mathfrak p}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9657em;vertical-align:-0.2823em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2168em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathfrak mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2823em;\"><span></span></span></span></span></span></span></span></span></span> such that numerator and denominator are homogeneous with same degree.</p>",
        "id": 266857113,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1641327308
    },
    {
        "content": "<p>So I defined <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mrow><mo stretchy=\"false\">(</mo><mi mathvariant=\"fraktur\">p</mi><mo stretchy=\"false\">)</mo></mrow></msub></mrow><annotation encoding=\"application/x-tex\">S_{(\\mathfrak p)}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0385em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathfrak mtight\">p</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span></span></span></span> to be a long existentially quantified thing</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">localization.at_prime</span> <span class=\"n\">x.as_homogeneous_ideal.1</span><span class=\"o\">)</span> <span class=\"bp\">|</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a_hom</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒜</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b_hom</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝒜</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b_nin</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">∉</span> <span class=\"n\">x.as_homogeneous_ideal</span><span class=\"o\">),</span>\n    <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">localization.mk</span> <span class=\"n\">a</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b_nin</span><span class=\"o\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">localization.at_prime</span> <span class=\"n\">x.as_homogeneous_ideal.1</span><span class=\"o\">))}</span>\n</code></pre></div>",
        "id": 266857296,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1641327384
    },
    {
        "content": "<p>So S is some nat-graded ring and you're localising at a homogeneous prime ideal I guess.</p>",
        "id": 266857314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641327395
    },
    {
        "content": "<p>My guess is that the localisation is Z-graded and S_(p) is just the degree 0 piece. Possibly.</p>",
        "id": 266857414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641327444
    },
    {
        "content": "<p>Then when I define functions from this ring, because I need to use <code>choose ... using ...</code>. Then to prove things about the definition, there is always <code>classical.some</code></p>",
        "id": 266857450,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1641327465
    },
    {
        "content": "<p>If your functions don't actually depend on the choice of a and b then you could avoid classical.some . But if you don't want to avoid it then the trick I usually use is to define the basic functions you need, i.e. <code>numerator</code> and <code>denominator</code> using classical.some (giving you <code>a</code> and <code>b</code> from <code>y</code>), and then immediately make an API for these things (i.e. prove <code>a \\in A i</code> and <code>b \\in A i</code> and <code>y = mk a b</code>) using <code>classical.some_spec</code> and then never use <code>classical.some</code> any more but only use these wrappers for which you have all the API you need right there.</p>",
        "id": 266857902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641327678
    },
    {
        "content": "<p>I was trying to be as general as possible: so <code>A</code> is an <code>R</code>-algebra graded by <code>𝒜 : \\iota \\to submodule R A</code></p>",
        "id": 266857978,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1641327718
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Proj.20construction/near/266857902\">said</a>:</p>\n<blockquote>\n<p>If your functions don't actually depend on the choice of a and b then you could avoid classical.some . But if you don't want to avoid it then the trick I usually use is to define the basic functions you need, i.e. <code>numerator</code> and <code>denominator</code> using classical.some (giving you <code>a</code> and <code>b</code> from <code>y</code>), and then immediately make an API for these things (i.e. prove <code>a \\in A i</code> and <code>b \\in A i</code> and <code>y = mk a b</code>) using <code>classical.some_spec</code> and then never use <code>classical.some</code> any more but only use these wrappers for which you have all the API you need right there.</p>\n</blockquote>\n<p>Let me try this.</p>",
        "id": 266858048,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1641327742
    },
    {
        "content": "<p>The idea is that <code>a = numerator y</code> and <code>b = denominator y</code> and you immediately prove all the things you need relating <code>a</code> and <code>b</code> to <code>y</code> using <code>classical.some_spec</code> and then just stick to <code>numerator</code> and <code>denominator</code> from then on.</p>",
        "id": 266858166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641327810
    },
    {
        "content": "<p>I think we need to think carefully about the proj construction, and my first inclination is that this approach is not necessarily the right way to go herre...</p>",
        "id": 266858607,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641328014
    },
    {
        "content": "<p>I would guess that we would be in better shape if we glued affine schemes..</p>",
        "id": 266858655,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641328037
    },
    {
        "content": "<p>You mean to define projective n-space or to define Proj of a graded ring?</p>",
        "id": 266858719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641328073
    },
    {
        "content": "<p>proj of a graded ring.</p>",
        "id": 266858766,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641328087
    },
    {
        "content": "<p>So you mean look at the proof in Hartshorne that projective schemes are schemes, and then implement this as the definition</p>",
        "id": 266858813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641328123
    },
    {
        "content": "<p>yeah essentially.</p>",
        "id": 266858838,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641328136
    },
    {
        "content": "<p>Do we have a gluing construction for sheaves <span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> ? I mean, if we have a topological space <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, and an open cover <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with sheaves <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"script\">F</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathcal{F}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.09931em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.0993em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> which are compatible on the intersections, can we glue to get a sheaf on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>?</p>",
        "id": 266859054,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641328233
    },
    {
        "content": "<p>I.e. <a href=\"https://stacks.math.columbia.edu/tag/00AL\">stacks#00AL</a></p>",
        "id": 266859224,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641328319
    },
    {
        "content": "<p>You want it for sheaves of types?</p>",
        "id": 266859327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641328353
    },
    {
        "content": "<p>Well, in this case for sheaves of rings, but the same argument works.</p>",
        "id": 266859375,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641328394
    },
    {
        "content": "<p>Does it work for sheaves of topological spaces?</p>",
        "id": 266859415,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641328413
    },
    {
        "content": "<p>no ;)</p>",
        "id": 266859432,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641328419
    },
    {
        "content": "<p>I thought so ;-)</p>",
        "id": 266859446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641328426
    },
    {
        "content": "<p>I'm looking at how stacks describes the proj construction now, and I think that would be a much better way to go:<br>\n<a href=\"https://stacks.math.columbia.edu/tag/00JM\">https://stacks.math.columbia.edu/tag/00JM</a></p>",
        "id": 266860223,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641328827
    },
    {
        "content": "<p>The underlying topological space of Proj is already defined.</p>\n<p><a href=\"https://stacks.math.columbia.edu/tag/01M3\">https://stacks.math.columbia.edu/tag/01M3</a> defines structure sheaf on a basis of this topology. I think following stack project, the hard work would be proving sheaf condition. Following Hartshorne, the work would be proving that isomorphic to affine scheme on basic open set</p>",
        "id": 266861076,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1641329294
    },
    {
        "content": "<p>The point is that the hard work should be done in the gluing construction for sheaves. You would then use assertion (6) from <a href=\"https://stacks.math.columbia.edu/tag/00JP\">https://stacks.math.columbia.edu/tag/00JP</a> to transfer the structure sheaf of the affine scheme along a homeomorphism, and the gluing construction should give you the structure sheaf on proj.</p>",
        "id": 266861261,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641329392
    },
    {
        "content": "<p>As for the issue about degrees of numerators and denominators, we should probably develop some API for the degree zero subring of a graded ring, and the grading on a localization by a homogeneous element.</p>",
        "id": 266862895,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641330138
    },
    {
        "content": "<p>The current way of gluing sheaves might be gluing sheafed spaces altogether, then transfer the sheaf onto the original space via some homeomorphism.</p>",
        "id": 266897093,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641357014
    },
    {
        "content": "<p>Hmmm... we should do something for descent data.</p>",
        "id": 266897156,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641357070
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"439483\">@Andrew Yang</span> Can you point me out to the gluing sheaf api please, I couldn't find the localtion of the api in mathlib, I would like to try to do proj construction by gluing affine scheme on basic open sets.</p>",
        "id": 267054336,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1641471482
    },
    {
        "content": "<p>It is stuck in <a href=\"https://github.com/leanprover-community/mathlib/tree/open_subfunctor\">branch#open_subfunctor</a>.<br>\nHopefully this is going to make it into mathib in this month or the next.<br>\nThe main stuff is in <code>src/algebraic_geometry/presheafed_space/gluing.lean</code>.<br>\nIt's not yet well-documented, but examples can be found in <code>src/algebraic_geometry/open_subfunctor.lean</code>.<br>\nIf you plan on using it, I'll try to make it compile later today or tomorrow.<br>\nI think the definitions are relatively stable now, and the proof of the lemmas might be tidied up in the future but that should not matter as much.</p>",
        "id": 267054835,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641471854
    },
    {
        "content": "<p>Thank you! Let me try to understand the construction!</p>",
        "id": 267055166,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1641472107
    },
    {
        "content": "<p>The stuff in the branch should be good to use except some errors in <code>src/topology/gluing.lean</code>. But that should be fixed once <a href=\"https://github.com/leanprover-community/mathlib/pull/9864\">#9864</a> is merged today or tomorrow.<br>\nIn the mean time, it should be fine to browse the branch using the current mathlib cache (<code>c391512ee</code>).</p>",
        "id": 267058231,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641474325
    },
    {
        "content": "<p><del>I downloaded c391512ee cache, but didn't get any error in <code>topology/gluing.lean</code>. I guess this is good news.</del></p>\n<p>Turns out it is vs code being frozen.</p>",
        "id": 267060301,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1641475623
    },
    {
        "content": "<p>I couldn't get this working, it seems there is <code>category_theory/concrete_category/elementwise</code>. I am getting this error.<br>\n<code>file 'category_theory/concrete_category/elementwise' not found in the search path</code></p>",
        "id": 267063382,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1641477475
    },
    {
        "content": "<p>Really cool to see progress on this IMO!</p>",
        "id": 267063657,
        "sender_full_name": "Will Sawin",
        "timestamp": 1641477615
    },
    {
        "content": "<p>I think it's fine to ignore that error. Lean should still work in <code>src/algebraic_geometry/presheafed_space/gluing.lean</code>.<br>\nIf you really want to solve this error, you can merge the branch <code>glue_spaces</code>, but that branch touched some very basic files, so the cache might be un-usable.</p>",
        "id": 267064030,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641477832
    },
    {
        "content": "<p>The branch should now compile without errors again.</p>",
        "id": 267234046,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1641584846
    },
    {
        "content": "<p>The Proj construction is now sorry free</p>",
        "id": 269240683,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1643108539
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/KuvL3bfPSrJq5q-3yOSnCUaW/EF1A7EB2-EDD2-4640-970E-1340A19206C3.png\">EF1A7EB2-EDD2-4640-970E-1340A19206C3.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/KuvL3bfPSrJq5q-3yOSnCUaW/EF1A7EB2-EDD2-4640-970E-1340A19206C3.png\" title=\"EF1A7EB2-EDD2-4640-970E-1340A19206C3.png\"><img src=\"/user_uploads/3121/KuvL3bfPSrJq5q-3yOSnCUaW/EF1A7EB2-EDD2-4640-970E-1340A19206C3.png\"></a></div>",
        "id": 269240693,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1643108544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> Congratulations! That's a milestone.</p>",
        "id": 269246921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643112492
    },
    {
        "content": "<p>Out of curiousity: Can you give an estimate of the size of the diff between mathlib-master and your development?</p>",
        "id": 269246944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643112519
    },
    {
        "content": "<p>I merged a branch from Andrew Yang (but ended up not using it), the scheme.lean file is 5k lines and zariski topology and structure sheaf combined is about 1k. So everything together is about 6k lines.</p>",
        "id": 269247237,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1643112720
    },
    {
        "content": "<p>There are currently some heavy refls going on, so GitHub cannot compile it. I am working on fixing on heavy refls and try to get GitHub compile this branch.</p>",
        "id": 269247379,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1643112781
    },
    {
        "content": "<p>Ok, thanks!</p>",
        "id": 269247995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643113097
    },
    {
        "content": "<p>That's quite a size. Impressive work!</p>",
        "id": 269248041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643113126
    },
    {
        "content": "<p>Thank you for the kind word!</p>",
        "id": 269248084,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1643113148
    },
    {
        "content": "<p>Would you mind pasting the full signature of <code>Proj.to_Scheme</code>? Because there's a bunch of variables in your screenshot, I guess that have been introduced by <code>variables</code> lines that aren't in the picture.</p>",
        "id": 269248142,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643113187
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/JpdPN0FyIdNcfhTGYsdGEnDn/A62B364B-362F-4F71-A734-A3F98DFB1E6C.png\">A62B364B-362F-4F71-A734-A3F98DFB1E6C.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/JpdPN0FyIdNcfhTGYsdGEnDn/A62B364B-362F-4F71-A734-A3F98DFB1E6C.png\" title=\"A62B364B-362F-4F71-A734-A3F98DFB1E6C.png\"><img src=\"/user_uploads/3121/JpdPN0FyIdNcfhTGYsdGEnDn/A62B364B-362F-4F71-A734-A3F98DFB1E6C.png\"></a></div>",
        "id": 269248678,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1643113485
    },
    {
        "content": "<p>Sorry about this, but I am current out having lunch. So I have to take a screenshot of variables line</p>",
        "id": 269248732,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1643113519
    },
    {
        "content": "<p>No worries, thanks a lot!</p>",
        "id": 269250679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643114546
    }
]