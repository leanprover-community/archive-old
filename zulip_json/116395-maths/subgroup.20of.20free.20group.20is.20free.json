[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"n\">nielsen_schreier</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">free_group</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"n\">is_subgroup</span> <span class=\"n\">H</span><span class=\"o\">],</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">),</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"err\">≃</span><span class=\"bp\">*</span> <span class=\"n\">free_group</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">H</span> <span class=\"bp\">×</span> <span class=\"n\">α</span> <span class=\"err\">⊕</span> <span class=\"n\">unit</span> <span class=\"err\">≃</span> <span class=\"n\">quotient</span> <span class=\"n\">H</span> <span class=\"err\">⊕</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>A while ago I decided to try to prove the Nielsen-Schreier theorem on free groups to get more familiar with Lean. Now, after countless days of self-isolation, I have <a href=\"https://github.com/dwarn/nielsen-schreier-lean\" target=\"_blank\" title=\"https://github.com/dwarn/nielsen-schreier-lean\">a working proof</a>. Comments welcome!</p>",
        "id": 191342167,
        "sender_full_name": "David Wärn",
        "timestamp": 1584791548
    },
    {
        "content": "<p>Is there any advantage in using parameters over variables?</p>",
        "id": 191345093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584796431
    },
    {
        "content": "<p>non-terminal <code>simp</code>s are discouraged in general, because they can cause trouble with maintenance. There are workarounds (e.g. run <code>simp</code> and then see what the goal has become, and try something like <code>suffices : &lt;new goal&gt;, from simpa using this</code>)</p>",
        "id": 191345229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584796621
    },
    {
        "content": "<p>We are in the process of moving to bundled subgroups rather than <code>is_subgroup</code></p>",
        "id": 191345389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584796828
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> Nice work! At a first glance, a lot of the stuff there looks quite well done.</p>",
        "id": 191345691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584797332
    },
    {
        "content": "<p>It would be really nice to have this in mathlib</p>",
        "id": 191345692,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584797342
    },
    {
        "content": "<p>But like you say, you might want to factor out some parts</p>",
        "id": 191345697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584797352
    },
    {
        "content": "<p>Unfortunately we don't have any graph theory yet...</p>",
        "id": 191345699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1584797362
    },
    {
        "content": "<p>I think it would be nice to have a predicate that asserts that a group is freely generated by a subset of its type, so that we can quantify over subsets of H here instead of arbitrary types</p>",
        "id": 191345826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1584797553
    },
    {
        "content": "<p>Great job!</p>",
        "id": 191348912,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1584801899
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/subgroup.20of.20free.20group.20is.20free/near/191345093\" title=\"#narrow/stream/116395-maths/topic/subgroup.20of.20free.20group.20is.20free/near/191345093\">said</a>:</p>\n<blockquote>\n<p>Is there any advantage in using parameters over variables?</p>\n</blockquote>\n<p>I think I chose parameters to try to convey the meaning of keeping things fixed, but variables might be better (at least it would let me use some lemmas for the two different free groups that occur in the argument)</p>",
        "id": 191352028,
        "sender_full_name": "David Wärn",
        "timestamp": 1584805968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/subgroup.20of.20free.20group.20is.20free/near/191345826\" title=\"#narrow/stream/116395-maths/topic/subgroup.20of.20free.20group.20is.20free/near/191345826\">said</a>:</p>\n<blockquote>\n<p>I think it would be nice to have a predicate that asserts that a group is freely generated by a subset of its type, so that we can quantify over subsets of H here instead of arbitrary types</p>\n</blockquote>\n<p>That would be nice. You'd just need to prove that an isomorphism with a free group gives a freely generating subset</p>",
        "id": 191352205,
        "sender_full_name": "David Wärn",
        "timestamp": 1584806241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/subgroup.20of.20free.20group.20is.20free/near/191345692\" title=\"#narrow/stream/116395-maths/topic/subgroup.20of.20free.20group.20is.20free/near/191345692\">said</a>:</p>\n<blockquote>\n<p>It would be really nice to have this in mathlib</p>\n</blockquote>\n<p>I'll think about making this mathlib-friendly. Would it be worth it to create a small graph theory section with the proof of existence of spanning trees? The characterisation of spanning trees I used is somewhat non-standard: Basically I think of it as a rooted tree where I can do recursion along the edges.</p>",
        "id": 191353635,
        "sender_full_name": "David Wärn",
        "timestamp": 1584807851
    },
    {
        "content": "<p>I think we should stop complaining that there are many possible ways to formalize graphs and trees. We should go ahead, put them in mathlib, and we'll refactor (or add parallel implementations) if needed.</p>",
        "id": 191354062,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1584808416
    },
    {
        "content": "<p>There are many possible ways to formalise algebra stuff -- there are groups, rings, fields etc and we just formalised all of them and proved the links between them. \"Graphs\" feel the same to me -- it is a catch-all word which can mean many things, and they should all be in.</p>",
        "id": 191354141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584808519
    },
    {
        "content": "<p>it's only when they're in that we start realising how we should have done it.</p>",
        "id": 191354156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584808545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130377\">@David Wärn</span> why don't you start by just making a basic graph API and PR'ing it? This is how I started. I wrote a basic complex numbers API and PR'ed it, and I think that by the end of the process none of the lines of code I had originally written were left.</p>",
        "id": 191354247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584808624
    },
    {
        "content": "<p>Just make the stuff you need for your proof.</p>",
        "id": 191354255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584808648
    },
    {
        "content": "<p>Ok, I have had a bit of a think about this, and arrived at this <a href=\"https://github.com/dwarn/nielsen-schreier-2\">new and improved proof</a>. This version is very modular, uses universal properties rather than explicit constructions, and is still reasonably short. I think it would be relatively straightforward to move this into mathlib (presumably starting with a PR containing the definition of quivers).</p>",
        "id": 230191151,
        "sender_full_name": "David Wärn",
        "timestamp": 1615672267
    },
    {
        "content": "<p>Yes please!</p>",
        "id": 230194109,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1615674265
    }
]