[
    {
        "content": "<p>This feels like a silly question, but how could I prove the goal:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">true</span>\n</code></pre></div>\n<p>?</p>\n<p>I know that it can be done with <code>simp only [le_refl],</code>, but it feels like it ought to be possible to prove this without having to resort to simp?</p>",
        "id": 319092686,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1672692167
    },
    {
        "content": "<p>( As background, I'm trying to replace the <code>simp</code> in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/order/lattice_group.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/algebra/order/lattice_group.lean</a> as suggested here: <a href=\"https://github.com/leanprover-community/mathlib4/pull/934#issuecomment-1361463881\">https://github.com/leanprover-community/mathlib4/pull/934#issuecomment-1361463881</a>)</p>",
        "id": 319092950,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1672692325
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">propext</span> <span class=\"n\">dec_trivial</span>\n</code></pre></div>",
        "id": 319093077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672692403
    },
    {
        "content": "<p>assuming those are natural 1's; you didn't give a mwe (and this won't work for real 1s)</p>",
        "id": 319093105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672692419
    },
    {
        "content": "<p>Maybe</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">true</span> <span class=\"o\">:=</span> <span class=\"n\">eq_true_intro</span> <span class=\"n\">le_rfl</span>\n</code></pre></div>",
        "id": 319093264,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1672692508
    },
    {
        "content": "<p>How did you end up with this goal in the first place?</p>",
        "id": 319093276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672692515
    },
    {
        "content": "<p>There are 21 <code>simp</code>s in the file you link to.</p>",
        "id": 319093502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672692632
    },
    {
        "content": "<p>I was looking at this simp <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/algebra/order/lattice_group.lean#L175\">https://github.com/leanprover-community/mathlib/blob/master/src/algebra/order/lattice_group.lean#L175</a></p>\n<p>I got to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span> <span class=\"c1\">-- pos_nonpos_iff</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pos_le_one_iff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁺</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">m_pos_part_def</span><span class=\"o\">,</span> <span class=\"n\">sup_le_iff</span><span class=\"o\">],</span> <span class=\"c1\">-- ⊢ a ≤ 1 ∧ 1 ≤ 1 ↔ a ≤ 1</span>\n<span class=\"n\">convert</span> <span class=\"n\">and_true</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"c1\">-- ⊢ 1 ≤ 1 = true</span>\n<span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 319093977,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1672692941
    },
    {
        "content": "<p>That <code>convert</code> is a bad step; I think there's something like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/and_iff_left\">docs#and_iff_left</a></p>",
        "id": 319094373,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1672693229
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span> <span class=\"c1\">-- pos_nonpos_iff</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">pos_le_one_iff</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">⁺</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">m_pos_part_def</span><span class=\"o\">,</span> <span class=\"n\">sup_le_iff</span><span class=\"o\">,</span> <span class=\"n\">and_iff_left</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">le_refl</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 319094376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672693234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> thanks - that works :)</p>",
        "id": 319094480,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1672693323
    }
]