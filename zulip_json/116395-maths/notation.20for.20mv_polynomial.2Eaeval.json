[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> has complained about the notation for <code>aeval</code>, evaluating a <code>mv_polynomial</code> in an algebra. <code>aeval v f</code> is morally just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(v)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">)</span></span></span></span>. What do people think about introducing localized notation for this? And are there analogous notations in mathlib that I'm not aware of? One proposal, <code>f áµƒ v:= aeval v f</code></p>",
        "id": 204553041,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595341174
    },
    {
        "content": "<p>I suppose a coercion to an algebra hom is out of the question? I guess we don't know the target...</p>",
        "id": 204555228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595342313
    },
    {
        "content": "<p>What's wrong with <code>f(v)</code>? Is that overloaded? Can we do that in Lean 4?</p>",
        "id": 204555320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595342351
    },
    {
        "content": "<p>Naively adding a <code>coe_to_fn</code> instance seems to loop. I'm a little skeptical about getting that to work.</p>",
        "id": 204557001,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595343086
    },
    {
        "content": "<p><code>f(v)</code> is overloaded with normal function application, it would need to be handled by a coercion.</p>",
        "id": 204557051,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595343111
    },
    {
        "content": "<p>Can you coerce to a dependent function?</p>",
        "id": 204557249,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1595343179
    },
    {
        "content": "<p>In principle yes, in this case I'm not sure how to do it without instance loops.</p>",
        "id": 204558983,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595343859
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/notation.20for.20mv_polynomial.2Eaeval/near/204555228\">said</a>:</p>\n<blockquote>\n<p>I suppose a coercion to an algebra hom is out of the question? I guess we don't know the target...</p>\n</blockquote>\n<p><code>aeval v</code> is an algebra hom (right now, in mathlib).</p>",
        "id": 204560135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595344347
    },
    {
        "content": "<p>But <code>aeval</code> is an ugly combo of ascii characters, and in <code>aeval v f</code> the order of <code>f</code> and <code>v</code> is backwards from <code>f(v)</code>.</p>",
        "id": 204560190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595344386
    },
    {
        "content": "<p><code>coe_to_fn</code> sounds problematic since we already have a <code>coe_to_fn</code> on <code>finsupp</code> that applies (which would give the coefficients), and <code>polynomial</code> is not irreducible</p>",
        "id": 204560858,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595344696
    },
    {
        "content": "<p>Even worse there's elaboration order fun, since it can't figure out from the polynomial what ring it's supposed to be an algebra over. I think this makes the <code>coe_to_fn</code> instance impossible and a <code>has_coe</code> instance still loops, it doesn't pick up the ring from the target type.</p>",
        "id": 204561187,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595344848
    },
    {
        "content": "<p>Oh yeah, that makes it even worse.</p>",
        "id": 204561776,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595345033
    },
    {
        "content": "<p>Do we need an <code>eval</code> apart from <code>aeval</code> anyway? There will always be an instance for <code>[algebra R R]</code>, and any <code>algebra_map</code> arising from it will be <code>simp</code>ed away hopefully.</p>",
        "id": 204561918,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595345085
    },
    {
        "content": "<p>So we could delete <code>eval</code> (but not the lemmas?) and rename <code>aeval</code> to <code>eval</code>. If we don't add notation, that should clean up the situation.</p>",
        "id": 204562133,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595345167
    },
    {
        "content": "<p>A quick hack indicates yes: we can just get rid of <code>eval</code> and rename <code>aeval</code> to <code>eval</code>. But there is some painful refactoring to do in that case...</p>",
        "id": 204564640,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595346252
    },
    {
        "content": "<p>Hah, I was just typing. It sounds plausible but it's a huge refactor.</p>",
        "id": 204564819,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1595346350
    },
    {
        "content": "<p>Ah, a first snag: we explicitly want <code>R</code> to be noncommutative <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/data/polynomial/algebra_map.lean#L237\">here</a>, but an <code>R</code>-algebra requires <code>R</code> to be commutative.</p>",
        "id": 204565304,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595346584
    },
    {
        "content": "<p>Yup... )-;</p>",
        "id": 204566699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1595347269
    },
    {
        "content": "<p>I put my experiment <a href=\"https://github.com/Vierkantor/mathlib/tree/aeval_to_eval\">online here</a> for anyone who wants to continue.</p>",
        "id": 204566961,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595347399
    }
]