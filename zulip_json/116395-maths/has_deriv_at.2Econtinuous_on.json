[
    {
        "content": "<p>I would like to add the following two lemmas (with <code>Œ±</code>,  <code>Œ≤</code>, <code>ùïú</code>, and <code>F</code> under appropriate conditions) :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">continuous_at.continuous_on</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ≤</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hcont</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">continuous_at</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hcont</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_within_at</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_deriv_at.continuous_on</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ùïú</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hderiv</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">has_deriv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hderiv</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_at.continuous_within_at</span>\n</code></pre></div>\n<p>I know these lemmas are slightly atypical, but I keep on needing them, so I think adding them is worthwhile. Would they make welcome addition?</p>",
        "id": 235034547,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618710735
    },
    {
        "content": "<p>A couple of points about the naming:</p>\n<ul>\n<li>These lemmas don't actually work with dot notation</li>\n<li><code>has_deriv_at.continuous_on</code> creates a conflict: One is not able to use <code>continuous_on</code> if the <code>has_deriv_at</code> namespace is open</li>\n</ul>\n<p>If I had to rename them, I would use <code>continuous_on_of_continuous_at_forall</code> and <code>continuous_on_of_has_deriv_at_forall</code>, respectively, but those names are far too lengthy for my liking.</p>",
        "id": 235034561,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618710752
    },
    {
        "content": "<p>Do these lemmas actually save keystrokes? They clearly can't work with dot notation since the main assumption hasn't the right shape, whereas their proof allow using dot notation.</p>",
        "id": 235061720,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618741383
    },
    {
        "content": "<p>To solve the second issue you should use <code>protected</code> on your lemma</p>",
        "id": 235062653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1618742393
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/has_deriv_at.2Econtinuous_on/near/235061720\">said</a>:</p>\n<blockquote>\n<p>Do these lemmas actually save keystrokes? They clearly can't work with dot notation since the main assumption hasn't the right shape, whereas their proof allow using dot notation.</p>\n</blockquote>\n<p>Right, this is exactly why I was asking. With their current names they do save keystrokes (especially the second one), but if I had to give them them longer names then they wouldn't  be so helpful.</p>",
        "id": 235087701,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618767521
    },
    {
        "content": "<p>For example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has_deriv_at.continuous_on</span> <span class=\"n\">hderiv</span><span class=\"o\">,</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hderiv</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">continuous_at.continuous_within_at</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 235087827,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618767663
    },
    {
        "content": "<p>You can add that lemma. The real solution should really to have a powerful and fast continuity tactic, but I guess this will wait for Lean4.</p>",
        "id": 235097324,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1618777202
    },
    {
        "content": "<p>I presume it's not possible to label <code>continuous_on</code> lemmas with <code>continuity</code>?</p>",
        "id": 235104106,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618782030
    },
    {
        "content": "<p>I've also been meaning to ask another question that pertains to this; I'll try to post it tonight.</p>",
        "id": 235104149,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618782092
    },
    {
        "content": "<p>I've opened <a href=\"https://github.com/leanprover-community/mathlib/issues/7260\">#7260</a></p>",
        "id": 235127092,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618807577
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"314430\">Benjamin Davidson</span> <a href=\"#narrow/stream/116395-maths/topic/has_deriv_at.2Econtinuous_on/near/235104149\">said</a>:</p>\n<blockquote>\n<p>I've also been meaning to ask another question that pertains to this; I'll try to post it tonight.</p>\n</blockquote>\n<p>Here's my question:<br>\nA lot of the integration lemmas I am writing require assumptions about functions being <code>continuous_on</code>. I am wondering: Is it also worth writing versions of these lemmas that assume that the functions are <code>continuous</code> instead? Although <code>continuous</code>is, obviously, a stricter assumption, it is often easier to prove because one can use the <code>continuity</code> tactic directly (no <code>apply continuous.continuous_on</code> or anything similar necessary), and most of the functions with which these lemmas would be used are <code>continuous</code>, anyway.</p>",
        "id": 235133080,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618813547
    },
    {
        "content": "<p>I think it would be easier to patch <code>continuity</code> to check whether the target is <code>continuous_on</code>, and then just apply <code>continuous.continuous_on</code> before trying what it usually does.</p>",
        "id": 235133199,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618813674
    },
    {
        "content": "<p>(Of course it would be even better if <code>continuity</code> could prove actual <code>continuous_on</code> goals (for functions that aren't necessarily globally ctu)</p>",
        "id": 235133266,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618813707
    },
    {
        "content": "<p>IIRC <code>continuity</code> currently makes <code>continuous_on</code> goals very complicated (looking)</p>",
        "id": 235133329,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618813789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/has_deriv_at.2Econtinuous_on/near/235133199\">said</a>:</p>\n<blockquote>\n<p>I think it would be easier to patch <code>continuity</code> to check whether the target is <code>continuous_on</code>, and then just apply <code>continuous.continuous_on</code> before trying what it usually does.</p>\n</blockquote>\n<p>How doable is this?</p>",
        "id": 235133426,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618813834
    },
    {
        "content": "<p>I think very doable. But I'm far from an expert on tactic writing.</p>",
        "id": 235133452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618813865
    },
    {
        "content": "<p>The hard part is actually specifying exactly what behaviour you want. For this sort of stuff, both the basic tools (collecting lemmas by attributes, trying them against a goal in various combinations) and the programming language support (just Lean <code>do</code> blocks, and easy <code>expr</code> inspection and synthesis) are quite good.</p>",
        "id": 235134044,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618814298
    },
    {
        "content": "<p><code>continuity</code> is in some sense just a variant of the very generic <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#solve_by_elim\">tactic#solve_by_elim</a>, with some additional support for deciding when to use <code>continuous.comp</code>.</p>",
        "id": 235134065,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618814334
    },
    {
        "content": "<p>Reading the code for <code>continuity</code> (and asking about it here as necessary) would probably be very helpful for deciding exactly what you want from a tactic that handles <code>continuous_on</code>.</p>",
        "id": 235134113,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618814385
    },
    {
        "content": "<p>A slightly orthogonal question is whether to just write separate tactics (e.g. for <code>measurable</code> as well), or to build a more generic framework. Either is possible.</p>",
        "id": 235134222,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1618814474
    },
    {
        "content": "<p>Sorry for the slow reply, I don't have any experience writing tactics so I've been trying to educate myself by reading the webpage and the code for <code>continuity</code> before replying. <br>\nMy thought would be to have a tactic that applies <code>continuous.continuous_on</code>, succeeding if it succeeds and failing if it fails. <code>continuity</code> can then use that tactic before running its usual course. <br>\nI started <a href=\"https://github.com/leanprover-community/mathlib/tree/continuity\">branch#continuity</a> with my first attempt. It's probably pretty rubbish, and even if it works I'm pretty sure it tries applying <code>continuous.continuous_on</code> in each iteration which should not be necessary.</p>",
        "id": 235294991,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618900966
    },
    {
        "content": "<p>Update: It doesn't work</p>",
        "id": 235449655,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618976409
    },
    {
        "content": "<p>I'm afraid I am very lost and will need some help figuring this out.</p>",
        "id": 235453397,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618978815
    },
    {
        "content": "<p>Hmm, my idea was to move all the current <code>continuity</code> stuff to <code>continuity'</code>, and then the new <code>continuity</code> does</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">continuous.continuous_on</span> <span class=\"o\">},</span>\n<span class=\"n\">continuity'</span>\n</code></pre></div>",
        "id": 235459478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1618984638
    },
    {
        "content": "<p>Okay, I can give that a shot.</p>",
        "id": 235472397,
        "sender_full_name": "Benjamin Davidson",
        "timestamp": 1618993334
    }
]