[
    {
        "content": "<p>I thought our topology library was written with enough care to take care of diamonds, but apparently this is not the case:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">diamond</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">pi</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">finite_univ</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">univ</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">is_open_univ</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">is_open_set_pi</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>leaves me with the goal <code>uniform_space.to_topological_space (fin n → ℝ) = Pi.topological_space</code>. I know how to fix this, but it is always suprising to find these...</p>",
        "id": 178106319,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1571062300
    },
    {
        "content": "<p>Isn't this <code>rfl</code>?</p>",
        "id": 178106412,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571062355
    },
    {
        "content": "<p>I don't see how that could be anything other than <code>rfl</code></p>",
        "id": 178106541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571062461
    },
    {
        "content": "<p>it all depends on the implicits though</p>",
        "id": 178106586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571062478
    },
    {
        "content": "<p>No, it's not <code>refl</code>, because some definition has not set up carefully enough the uniform space structure and the topological space structure on the product. Maybe it comes from</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">normed_group</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">normed_group</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">π</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">norm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">nnnorm</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n  <span class=\"n\">dist_eq</span> <span class=\"o\">:=</span> <span class=\"k\">assume</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">nnreal</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">nndist</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">nnnorm</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">y</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">nndist_eq_nnnorm</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I'll fix this.</p>",
        "id": 178108101,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1571063518
    },
    {
        "content": "<p>Also, that names seems bad. Shouldn't that be <code>pi.normed_group</code>?</p>",
        "id": 178108287,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571063642
    },
    {
        "content": "<p>PRed in <a href=\"https://github.com/leanprover-community/mathlib/issues/1551\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1551\">#1551</a></p>",
        "id": 178140935,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1571088587
    }
]