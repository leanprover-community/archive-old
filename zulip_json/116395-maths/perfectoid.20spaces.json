[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>PS C:\\lean-perfectoid-spaces&gt; git pull\nAlready up to date.\nPS C:\\lean-perfectoid-spaces&gt; leanproject get-mathlib-cache\nLooking for local mathlib oleans\nFound local mathlib oleans\nPS C:\\lean-perfectoid-spaces&gt; leanproject build\nBuilding project lean-perfectoid-spaces\nconfiguring lean-perfectoid-spaces 0.1\nmathlib: trying to update _target/deps/mathlib to revision 4e2c7e36308b6349c5a794237ebfef91e309ac2f\n&gt; git checkout --detach 4e2c7e36308b6349c5a794237ebfef91e309ac2f    # in directory _target/deps/mathlib\nerror: Your local changes to the following files would be overwritten by checkout:\n        src/algebra/archimedean.lean\n        src/algebra/associated.lean\n        src/algebra/big_operators.lean\n        src/algebra/char_p.lean\n        src/algebra/char_zero.lean\n        src/algebra/direct_sum.lean\n        src/algebra/euclidean_domain.lean\n        src/algebra/field.lean\n        src/algebra/field_power.lean\n        src/algebra/gcd_domain.lean\n        src/algebra/group.lean\n        src/algebra/group_power.lean\n        [...]\nerror: The following untracked working tree files would be overwritten by checkout:\n        src/algebra/category/CommRing/adjunctions.lean\n        src/algebra/category/CommRing/basic.lean\n        src/algebra/category/CommRing/colimits.lean\n        src/algebra/category/CommRing/default.lean\n        src/algebra/category/CommRing/limits.lean\n        src/algebra/category/Group.lean\n        src/algebra/category/Module/basic.lean\n        src/algebra/category/Mon/basic.lean\n        src/algebra/category/Mon/colimits.lean\n        src/algebra/category/Mon/default.lean\n        [...]\nAborting\nexternal command exited with status 1\nCommand &#39;[&#39;leanpkg&#39;, &#39;build&#39;]&#39; returned non-zero exit status 1.\n</code></pre></div>",
        "id": 200072459,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591606905
    },
    {
        "content": "<p>am I using <code>leanproject</code> wrong?</p>",
        "id": 200072476,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591606915
    },
    {
        "content": "<p>The perfectoid spaces project is thoroughly broken...</p>",
        "id": 200072915,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591607171
    },
    {
        "content": "<p>In particular, I don't think that <code>leanproject</code> will help</p>",
        "id": 200072957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591607204
    },
    {
        "content": "<p>but I see a <span aria-label=\"check mark\" class=\"emoji emoji-2714\" role=\"img\" title=\"check mark\">:check_mark:</span> in the repo</p>",
        "id": 200072963,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591607209
    },
    {
        "content": "<p>Which means that current master compiles against ancient mathlib</p>",
        "id": 200072986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591607230
    },
    {
        "content": "<p>So it's broken in the sense that making it compile against todays mathlib will require a lot of work</p>",
        "id": 200073049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591607274
    },
    {
        "content": "<p>which isn't reflected by <code>leanproject build</code>?</p>",
        "id": 200073054,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591607278
    },
    {
        "content": "<p>yeah I just want to use the old mathlib</p>",
        "id": 200073102,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591607288
    },
    {
        "content": "<p>Ok, I'm not sure if there are compiled binaries of all mathlib master commits...</p>",
        "id": 200073155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591607331
    },
    {
        "content": "<p>But maybe that wasn't even the issue?</p>",
        "id": 200073176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591607343
    },
    {
        "content": "<p>What happens if you try</p>\n<div class=\"codehilite\"><pre><span></span><code>leanproject get-mathlib-cache\nleanpkg build <span class=\"c1\"># not leanproject</span>\n</code></pre></div>",
        "id": 200073214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591607378
    },
    {
        "content": "<p>same error</p>",
        "id": 200073333,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591607439
    },
    {
        "content": "<p>and if I use <code>lean --make src</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code>PS C:\\lean-perfectoid-spaces&gt; lean --make src\nC:\\lean-perfectoid-spaces\\_target\\deps\\mathlib\\src\\algebra\\group_power.lean:1:0: error: ambiguous import, it can be &#39;C:\\lean-perfectoid-spaces\\_target\\deps\\mathlib\\src\\algebra\\group\\default.lean&#39; or &#39;C:\\lean-perfectoid-spaces\\_target\\deps\\mathlib\\src\\algebra\\group.lean&#39;\n</code></pre></div>",
        "id": 200073442,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591607521
    },
    {
        "content": "<p>The message says Kenny messed up with his mathlib</p>",
        "id": 200073495,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591607535
    },
    {
        "content": "<p>but doesn't <code>leanproject get-mathlib-cache</code> resolve everything?</p>",
        "id": 200073528,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591607552
    },
    {
        "content": "<p>Probably not</p>",
        "id": 200073786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591607736
    },
    {
        "content": "<p>aha</p>",
        "id": 200073847,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591607763
    },
    {
        "content": "<p>I need to get inside mathlib and <code>git reset --hard [commit id]</code> followed by <code>git clean -fd</code></p>",
        "id": 200073864,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591607774
    },
    {
        "content": "<p>feature request</p>",
        "id": 200073870,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591607781
    },
    {
        "content": "<p>No, you shouldn't need to do that</p>",
        "id": 200074230,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591608057
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib-tools/issues/54\">https://github.com/leanprover-community/mathlib-tools/issues/54</a></p>",
        "id": 200074301,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591608106
    },
    {
        "content": "<p>what do you mean?</p>",
        "id": 200074304,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591608109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Nevertheless, if people mess up, it might be nice to have <code>leanproject help-me-i-messed-up</code> that will clean up all the dependencies...</p>",
        "id": 200074515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591608244
    },
    {
        "content": "<p>what happened is that the mathlib head is on a newer version, if that helps</p>",
        "id": 200074568,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591608296
    },
    {
        "content": "<p>then <code>leanproject get-mathlib-cache</code> causes a bunch of uncommitted changes</p>",
        "id": 200074591,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591608313
    },
    {
        "content": "<p>because it altered the files without reseting the head</p>",
        "id": 200074615,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591608328
    },
    {
        "content": "<p>at least that's what I suspect happened</p>",
        "id": 200074622,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591608333
    },
    {
        "content": "<p>ok it's in the process of compiling, and I guess I could start to PR other bits into mathlib</p>",
        "id": 200074877,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591608516
    },
    {
        "content": "<p>should I PR <code>src/for_mathlib/nonarchimedean</code>?</p>",
        "id": 200075568,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591608996
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 200075597,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591609017
    },
    {
        "content": "<p>The issue is the a lot of topology will require adjustments to current mathlib.</p>",
        "id": 200075644,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591609069
    },
    {
        "content": "<p>what can I do now?</p>",
        "id": 200075751,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591609134
    },
    {
        "content": "<p>I think we need a discussion on how we want to get valuations in mathlib</p>",
        "id": 200075780,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591609158
    },
    {
        "content": "<p>Yes, valuation is the most pressing target</p>",
        "id": 200075798,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591609173
    },
    {
        "content": "<p>I didn't follow what happened to groups with zero recently.</p>",
        "id": 200075809,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591609189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> seemed to suggest that we should just ignore all the <code>ordered_comm_monoid</code> stuff and jump directly to <code>linear_ordered_comm_group_with_zero</code>...</p>",
        "id": 200075812,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591609193
    },
    {
        "content": "<p>I'm a bit surprised by this...</p>",
        "id": 200075826,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591609202
    },
    {
        "content": "<p>But if that's the way it should be done, I think that would be the first step.</p>",
        "id": 200075880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591609224
    },
    {
        "content": "<p>I have no opinion here because I haven't seen all this used for anything else than valuations</p>",
        "id": 200075890,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591609239
    },
    {
        "content": "<p>Orthogonal to that, <code>nonarchimedean</code> could be PR'd. I have no idea what the status of filter bases is in mathlib right now</p>",
        "id": 200075918,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591609268
    },
    {
        "content": "<p>but well you're doing the algebra hierarchy so I wouldn't want to have overlaps</p>",
        "id": 200075927,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591609279
    },
    {
        "content": "<p>It is possible to insert algebraic classes \"later\", but if this is discussing additions to mathlib then I guess we would get <code>linear_ordered_comm_group_with_zero</code></p>",
        "id": 200076020,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591609330
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> but maybe I shouldn't have done the algebraic hierarchy... because we don't need all the typeclasses between <code>monoid</code> and <code>linear_ordered_comm_group_with_zero</code>.</p>",
        "id": 200076060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591609375
    },
    {
        "content": "<p>At least, that's the conjecture.</p>",
        "id": 200076117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591609427
    },
    {
        "content": "<p>so you're suggesting that I take over the algebra hierarchy PR and start the nonarchimedean PR</p>",
        "id": 200076120,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591609430
    },
    {
        "content": "<p>I think we should drop the algebraic hierarchy PR</p>",
        "id": 200076194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591609462
    },
    {
        "content": "<p>And create a new one that jumps directly to <code>linear_ordered_comm_group_with_zero</code>.</p>",
        "id": 200076211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591609479
    },
    {
        "content": "<p>If I understand Mario correctly</p>",
        "id": 200076223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591609490
    },
    {
        "content": "<p>and who will do that?</p>",
        "id": 200076224,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591609491
    },
    {
        "content": "<p>Feel free to do it. I need to create exams and things like that <span aria-label=\"head bandage\" class=\"emoji emoji-1f915\" role=\"img\" title=\"head bandage\">:head_bandage:</span></p>",
        "id": 200076247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591609517
    },
    {
        "content": "<p>alright</p>",
        "id": 200076251,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591609522
    },
    {
        "content": "<p>I would probably have time again 1 week from now...</p>",
        "id": 200076256,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591609529
    },
    {
        "content": "<p>All the stuff in the perfectoid project that is proven for <code>actual_ordered_comm_monoid</code> etc, should now be proven for <code>linear_ordered_comm_group_with_zero</code> instead</p>",
        "id": 200076379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591609597
    },
    {
        "content": "<p>My filter basis PR (on top of Yury's work in this topic) was meant to be a preliminary step before modifying topology stuff in the perfectoid project and, completely independently, bring Bolzano-Weirstrass to mathlib. Both these goals are still on my TODO list.</p>",
        "id": 200076578,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591609755
    },
    {
        "content": "<p>Finding time is hard. I just spend half an hour fighting video conference bugs with someone I will interview for a job on Thursday.</p>",
        "id": 200076613,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591609788
    },
    {
        "content": "<p>could you explain the problems faced (by me or by the repo) if I just PR the non-archimedean stuff into mathlib now? I haven't been following the discussions much</p>",
        "id": 200076682,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591609819
    },
    {
        "content": "<p>First look at <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/nonarchimedean/basic.lean#L7-L9\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/nonarchimedean/basic.lean#L7-L9</a></p>",
        "id": 200076909,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591609996
    },
    {
        "content": "<p>You see there are dependencies to PR first</p>",
        "id": 200076921,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591610004
    },
    {
        "content": "<p>oh I missed that</p>",
        "id": 200076959,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591610038
    },
    {
        "content": "<p>Then the next file is <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/nonarchimedean/is_subgroups_basis.lean\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/nonarchimedean/is_subgroups_basis.lean</a> which needs to be completely rewritten to use mathlib filter bases instead of the ones we have in the perfectoid project.</p>",
        "id": 200077015,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591610055
    },
    {
        "content": "<p>ok, d'accord</p>",
        "id": 200077178,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591610172
    }
]