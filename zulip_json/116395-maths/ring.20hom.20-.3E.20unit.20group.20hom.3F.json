[
    {
        "content": "<p>If <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">f:A\\to B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mrel\">:</span><span class=\"mord mathit\">A</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span> is a homomorphism of commutative rings, do we have the induced map <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>A</mi><mo>×</mo></msup><mo>→</mo><msup><mi>B</mi><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">A^\\times\\to B^\\times</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span> plus the proof that it's a group homomorphism? It feels like it should sit in <code>algebra.ring</code> but I can't spot it in there.</p>",
        "id": 159795147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551532222
    },
    {
        "content": "<p>gaargh is it a theorem about monoids?</p>",
        "id": 159795181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551532315
    },
    {
        "content": "<p>It's called <code>units.map</code></p>",
        "id": 159795235,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551532371
    },
    {
        "content": "<p>Probably <code>algebra.group</code></p>",
        "id": 159795238,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551532382
    },
    {
        "content": "<p>Yes I just found it after you replied. I was looking in the wrong place. Bloody monoids.</p>",
        "id": 159795266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551532428
    },
    {
        "content": "<p>Thanks by the way.</p>",
        "id": 159795267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551532434
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">35</span>\n\n<span class=\"n\">def</span> <span class=\"n\">valfield_units_of_valfield_units_of_eq_supp</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">supp</span> <span class=\"n\">v₁</span> <span class=\"bp\">=</span> <span class=\"n\">supp</span> <span class=\"n\">v₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">valuation_field</span> <span class=\"n\">v₁</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">units</span> <span class=\"o\">(</span><span class=\"n\">valuation_field</span> <span class=\"n\">v₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"n\">valfield_of_valfield_of_eq_supp</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>I have a field hom K -&gt; L and I want a map on the units; I've just had to <code>set_option class.instance_max_depth 35</code> to make it happen. I don't like it when this starts. Is there some way to persuade type class resolution that life isn't so difficult?</p>",
        "id": 159795522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551532801
    },
    {
        "content": "<p>I guess maybe just introduce a bunch of instances for <code>valuation_field</code> is a semiring etc.</p>",
        "id": 159795613,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551532905
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">supp</span> <span class=\"n\">v₁</span> <span class=\"bp\">=</span> <span class=\"n\">supp</span> <span class=\"n\">v₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_field_hom</span> <span class=\"o\">(</span><span class=\"n\">valfield_of_valfield_of_eq_supp</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">delta</span> <span class=\"n\">valfield_of_valfield_of_eq_supp</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"c1\">--set_option class.instance_max_depth 35</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">supp</span> <span class=\"n\">v₁</span> <span class=\"bp\">=</span> <span class=\"n\">supp</span> <span class=\"n\">v₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">valfield_of_valfield_of_eq_supp</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>This fails without the set_option.</p>",
        "id": 159795657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551532926
    },
    {
        "content": "<p>Getting from a field hom to a monoid hom is too hard for Lean</p>",
        "id": 159795700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551532944
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">supp</span> <span class=\"n\">v₁</span> <span class=\"bp\">=</span> <span class=\"n\">supp</span> <span class=\"n\">v₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_field_hom</span> <span class=\"o\">(</span><span class=\"n\">valfield_of_valfield_of_eq_supp</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">delta</span> <span class=\"n\">valfield_of_valfield_of_eq_supp</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">meh</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">supp</span> <span class=\"n\">v₁</span> <span class=\"bp\">=</span> <span class=\"n\">supp</span> <span class=\"n\">v₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">valfield_of_valfield_of_eq_supp</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">44</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">supp</span> <span class=\"n\">v₁</span> <span class=\"bp\">=</span> <span class=\"n\">supp</span> <span class=\"n\">v₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">valfield_of_valfield_of_eq_supp</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">delta</span> <span class=\"n\">valfield_of_valfield_of_eq_supp</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>Things are getting worse not better :-/ [the numbers are minimal in each case]</p>",
        "id": 159796062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551533114
    },
    {
        "content": "<p>I can get back down to 35 if I don't do the delta first before apply_instance</p>",
        "id": 159796102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551533152
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">supp</span> <span class=\"n\">v₁</span> <span class=\"bp\">=</span> <span class=\"n\">supp</span> <span class=\"n\">v₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_field_hom</span> <span class=\"o\">(</span><span class=\"n\">valfield_of_valfield_of_eq_supp</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">delta</span> <span class=\"n\">valfield_of_valfield_of_eq_supp</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">supp</span> <span class=\"n\">v₁</span> <span class=\"bp\">=</span> <span class=\"n\">supp</span> <span class=\"n\">v₂</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">valfield_of_valfield_of_eq_supp</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_semiring_hom</span><span class=\"bp\">.</span><span class=\"n\">is_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">valfield_of_valfield_of_eq_supp</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>OK so there's my fix; just supply the term directly. Now I don't need to change the max depth. Is this good practice or should I be using another solution?</p>",
        "id": 159797082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551533409
    }
]