[
    {
        "content": "<p>Patrick's <a href=\"https://github.com/leanprover-community/format_lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/format_lean\">formatter</a> has made me start thinking about not teaching Lean to students, but teaching maths to students using the formatter. In fact I am even considering a situation where Lean code is hidden completely and the students can only see the tactic state, which is far less intimidating.</p>\n<p>This made me realise the importance of notation. A student can understand <code>Hn : n &lt;= N</code> but something like <code>ha : is_limit a l</code> is far harder for a mathematician to read. Is there unicode notation for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>lim</mi><mrow><mi>n</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\lim_{n\\to\\infty}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span><span class=\"mrel mtight\">→</span><span class=\"mord mathrm mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> somehow?</p>",
        "id": 158447796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550070617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> could we even have something which processes the tactic state and turns <code>is_limit a l</code> into a LaTeX <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>lim</mi><mrow><mi>n</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow></msub><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><mi mathvariant=\"normal\">ℓ</mi></mrow><annotation encoding=\"application/x-tex\">\\lim_{n\\to\\infty}a_n=\\ell</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mop\"><span class=\"mop\">lim</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">n</span><span class=\"mrel mtight\">→</span><span class=\"mord mathrm mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">ℓ</span></span></span></span>?</p>",
        "id": 158447852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550070682
    },
    {
        "content": "<p>You may be able to approximate this somewhat with <code>notation</code>, possibly?</p>",
        "id": 158448101,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550070859
    },
    {
        "content": "<p>You can definitely do something like </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">constants</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">Foo</span><span class=\"o\">)</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">lim</span><span class=\"bp\">``</span> <span class=\"n\">n</span><span class=\"bp\">-&gt;</span><span class=\"err\">∞</span> <span class=\"bp\">`</span><span class=\"n\">a</span><span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span><span class=\"n\">l</span> <span class=\"o\">:=</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">is_limit</span> <span class=\"n\">a</span> <span class=\"n\">l</span> <span class=\"c1\">-- lim n-&gt;∞ a = l : Foo</span>\n</pre></div>\n\n\n<p>alhough I don't know how well the equality notation will play with notation for <code>eq</code>. Maybe Lean 4's extensible parsers could make this better.</p>",
        "id": 158448459,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1550071131
    },
    {
        "content": "<p>I am motivated to make it look as sexy as possible. Can I make the n -&gt; infty as a subscript using unicode?</p>",
        "id": 158448524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550071190
    },
    {
        "content": "<p>Hmm, but this assumes the free variable is named <code>n</code></p>",
        "id": 158448600,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550071216
    },
    {
        "content": "<p>but I guess the original <code>is_limit a l</code> didn't even have an explicit free variable anywhere, so I don't know what to do about that</p>",
        "id": 158448625,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550071241
    },
    {
        "content": "<p>AFAIK Unicode only provides a <a href=\"https://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts\">predefined set of subscript characters</a> and neither an arrow nor the infty sign seem to be among them.</p>",
        "id": 158448859,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1550071425
    },
    {
        "content": "<p>Yes, unicode won't be good enough. But mathjax is good enough. However it will have to be a regex-based hack (until we get a Lean 4 structured tactic state).</p>",
        "id": 158455670,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550076082
    },
    {
        "content": "<p>My tool could filter the tactic state before displaying it and search and replace there</p>",
        "id": 158455773,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550076163
    },
    {
        "content": "<p><a href=\"https://xenaproject.wordpress.com/2019/02/18/224/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2019/02/18/224/\">https://xenaproject.wordpress.com/2019/02/18/224/</a> -- me trying to tell kids aged 14-15 about inductive types ;-) It went OK! I think that next time I might try 15-16 though...</p>",
        "id": 158833446,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550528892
    },
    {
        "content": "<p>Why shouldn't your daughter be forced to learn about cosines?</p>",
        "id": 158838094,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1550534577
    },
    {
        "content": "<p>Because she doesn't like maths</p>",
        "id": 158855655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550562314
    }
]