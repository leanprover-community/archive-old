[
    {
        "content": "<p>My former PhD student Bodan Arsovski just wandered into the room I'm in; he recently proved a p-adic version of the Kakeya conjecture. I know nothing about this stuff. I attempted to formalise a statement of the usual conjecture (over the reals), which seemed to work OK, but when I tried with the p-adics I ran into problems because the p-adics don't have a canonical measure on them. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">number_theory.padics.hensel</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.degree.lemmas</span>\n<span class=\"kn\">import</span> <span class=\"n\">measure_theory.measure.hausdorff</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.ereal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">v</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">μH</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">measurable_space</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">borel_space</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">])</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fact</span> <span class=\"o\">(</span><span class=\"n\">nat.prime</span> <span class=\"n\">p</span><span class=\"o\">)]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">]))</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">],</span>\n  <span class=\"bp\">∥</span><span class=\"n\">v</span><span class=\"bp\">∥</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℚ_</span><span class=\"o\">[</span><span class=\"n\">p</span><span class=\"o\">],</span> <span class=\"bp\">∥</span><span class=\"n\">m</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">m</span> <span class=\"bp\">•</span> <span class=\"n\">v</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">μH</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>How am I supposed to be filling in those instances? The measure we want is Haar measure. Unrelated question: I was surprised <code>m * v</code> worked for reals but I had to use <code>m • v</code> for the p-adics.</p>",
        "id": 292926577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660223260
    },
    {
        "content": "<p>Can you just assume you have a random measure and then add <code>[haar_measure ℚ_[p]]</code> to make sure it is a well-behaved measure?</p>",
        "id": 292926879,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660223367
    },
    {
        "content": "<p>Or maybe <code>[haar_measure (fin n → ℚ_[p])]</code> even.</p>",
        "id": 292926922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660223384
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.haar_measure\">docs#measure_theory.measure.haar_measure</a> (three <code>measure</code> in the name <span aria-label=\"frowning\" class=\"emoji emoji-1f626\" role=\"img\" title=\"frowning\">:frowning:</span>) is a specific measure, not a typeclass saying that a measure is the Haar measure.</p>",
        "id": 292927207,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660223482
    },
    {
        "content": "<p>What you want is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.is_haar_measure\">docs#measure_theory.measure.is_haar_measure</a>.</p>",
        "id": 292927259,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660223505
    },
    {
        "content": "<p>But, given that the type is concrete, we should construct the measure.</p>",
        "id": 292927385,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660223541
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 292927514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1660223598
    },
    {
        "content": "<p>To answer your question, Kevin, the <code>sorry</code> should be something like <code>add_haar_measure K</code> where <code>K : set (fin n → ℚ_[p])</code> is a compact set of nonempty interior.</p>",
        "id": 292927684,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660223657
    },
    {
        "content": "<p>But using <code>is_add_haar_measure</code> is more flexible right?</p>",
        "id": 292928001,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660223777
    },
    {
        "content": "<p>Are you ever going to endow the same type with two different Haar measures?</p>",
        "id": 292928413,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660223931
    },
    {
        "content": "<p>It kind of feels like assuming <code>order_bot ℕ</code> because \"that's more general\".</p>",
        "id": 292928541,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660223987
    },
    {
        "content": "<p>I think you are quite likely to use more than one measure on a type like <code>fin n → ℚ_[p]</code>:<br>\n(1) <code>add_haar_measure</code> <br>\n(2) <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.pi\">docs#measure_theory.measure.pi</a> of add Haar measures</p>",
        "id": 292930292,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1660224630
    },
    {
        "content": "<p>Aren't those the same (at least up to scaling)?</p>",
        "id": 292930429,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660224687
    },
    {
        "content": "<p>Do you think TC is impressed by that fact?</p>",
        "id": 292930483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660224710
    },
    {
        "content": "<p>Well, that means we must provide the Haar measure on <code>ℚ_[p]</code>, then we'll automatically get the Haar measure on <code>fin n → ℚ_[p]</code>.</p>",
        "id": 292930636,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660224761
    },
    {
        "content": "<p>But it worked for the reals, and Floris' objections apply there too!</p>",
        "id": 292930704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660224786
    },
    {
        "content": "<p>Like, what's special about this situation?</p>",
        "id": 292930708,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1660224787
    },
    {
        "content": "<p>I'm not sure. It might be that choosing a Haar measure on <code>ℚ_[p]</code> and then working with that will be fine. But I wouldn't be surprised that at some point you'd have to change the measure, and have to do a bit of work using the uniqueness of Haar measures to derive what you want for the other measure.<br>\nI don't think the story is different for the reals. And a lemma like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.map_linear_map_add_haar_pi_eq_smul_add_haar\">docs#measure_theory.measure.map_linear_map_add_haar_pi_eq_smul_add_haar</a> shows that sometimes you have to translate from a specific Haar measure to an arbitrary Haar measure. If you only have to do this a handful of times that might be fine though.</p>",
        "id": 292931672,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1660225130
    },
    {
        "content": "<p>Haar mesure is unique up to scaling, but the scaling is not canonical in a general space. For instance, in a product space, the product measure and the Hausdorff measure may be different.</p>",
        "id": 292931916,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1660225240
    },
    {
        "content": "<p>Before reviewing <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span>'s work, I had never heard of Besicovitch before. Now I'm looking at <a href=\"https://en.wikipedia.org/wiki/Kakeya_set\">https://en.wikipedia.org/wiki/Kakeya_set</a> and <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span>  the name pops up again.</p>",
        "id": 292933906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1660225957
    },
    {
        "content": "<p>Swinnerton-Dyer used to talk fondly about Besicovitch after he'd had a couple of pints of cider.</p>",
        "id": 292965232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1660235853
    }
]