[
    {
        "content": "<p>Yesterday, I finally understood what all the fuss around scalar actions was about (thanks Eric for your talk!) and I'm now having thinking about them.<br>\nRight now I'm wondering whether we can think of <code>is_scalar_tower</code> as saying \"here is a scalar action of <code>α</code> on <code>β</code> and another one of <code>β</code> on <code>γ</code>, please make the scalar action of <code>α</code> on <code>γ</code> that associates\" and how far that leads.<br>\nFor example, <code>[is_scalar_tower α β γ] [smul_with_zero α β] [smul_with_zero β γ]</code>and \"every <code>c : γ</code> can be written as <code>b • c'</code>\" gives <code>smul_with_zero α γ</code> because <code>(0 : α) • c = 0 • b • c' = (0 • b) • c' = 0 • c = 0</code> and <code>a • (0 : γ) = a • (0 • 0) = (a • 0) • 0 = 0 • 0 = 0</code>.<br>\nWhat instances can we get like that, and what's the canonical way to express \"every <code>c : γ</code> can be written as <code>b • c'</code>\"?</p>",
        "id": 252589683,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631176264
    },
    {
        "content": "<p>I think you're confusing the typeclass <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_scalar_tower\">docs#is_scalar_tower</a> with the type synonym <a href=\"https://leanprover-community.github.io/mathlib_docs/find/restrict_scalars\">docs#restrict_scalars</a>. The latter has a new scalar action, which is more like your description, while the former takes three scalar actions and asserts they commute.</p>",
        "id": 252590326,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631176619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Transporting.20along.20is_scalar_tower/near/252589683\">said</a>:</p>\n<blockquote>\n<p>For example, <code>[is_scalar_tower α β γ] [smul_with_zero α β] [smul_with_zero β γ]</code></p>\n</blockquote>\n<p>This doesn't type check, right? You first need 3 <code>has_scalar</code> instances, before you can talk about a <code>is_scalar_tower X Y Z</code></p>",
        "id": 252590570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631176745
    },
    {
        "content": "<p>Nono, I did mean <code>is_scalar_tower</code> (although maybe <code>restrict_scalars</code> is what I'm after. I can't tell). I meant to have scalar action instances on <code>α β</code> and <code>β γ</code>, <code>has_scalar α γ</code> and then use <code>is_scalar_tower α β γ</code> to populate the naked <code>has_scalar α γ</code>.</p>",
        "id": 252590785,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631176833
    },
    {
        "content": "<p>No, that doesn't work.</p>",
        "id": 252590922,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631176912
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">is_scalar_tower</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_9</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_10</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_11</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 252591015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631176940
    },
    {
        "content": "<p>How would the typeclass system figure out which <code>β</code> to fill into <code>is_scalar_tower α β γ</code>?</p>",
        "id": 252591032,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631176948
    },
    {
        "content": "<p><code>is_scalar_tower</code> is a <code>Prop</code> that asserts that 3 scalar actions are compatible.</p>",
        "id": 252591060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631176970
    },
    {
        "content": "<p>So for example, you're asking: \"if I have <code>algebra α β</code>, <code>algebra β γ</code> and a bare <code>has_scalar α γ</code> such that <code>is_scalar_tower α β γ</code>, can I automatically derive <code>algebra α γ</code>?\", right?</p>",
        "id": 252591244,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631177072
    },
    {
        "content": "<p>Yeah exactly</p>",
        "id": 252591265,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631177087
    },
    {
        "content": "<p>The point of <code>is_scalar_tower α β γ</code> is not to <em>populate</em> <code>has_scalar α γ</code>, it's to indicate that an existing instance is propositionally equal to the obvious population</p>",
        "id": 252591308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631177116
    },
    {
        "content": "<p>It would be a nice trick, but the answer is not really. Because there is no automatic way for the typeclass system to choose the <code>β</code> for which it works. I guess the closest you could come is have a tactic figure it out based on what is in the context.</p>",
        "id": 252591415,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631177170
    },
    {
        "content": "<p>or even just an instance as a def?</p>",
        "id": 252591459,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631177199
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/restrict_scalars.is_scalar_tower\">docs#restrict_scalars.is_scalar_tower</a> says \"The  populated <code>algebra R (restrict_scalars R S A)</code> you're asking for is compatible with <code>algebra R S</code> and <code>algebra S A</code>\"</p>",
        "id": 252591466,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631177202
    },
    {
        "content": "<p>Ah so yeah, that's kind of what I was thinking about.</p>",
        "id": 252591519,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631177235
    },
    {
        "content": "<p>There are a few defs, like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_integral_of_is_scalar_tower\">docs#is_integral_of_is_scalar_tower</a>, that do something similar.</p>",
        "id": 252591549,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631177255
    },
    {
        "content": "<p>But they all have to work manually</p>",
        "id": 252591583,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631177275
    },
    {
        "content": "<p>It's usually a bad idea to actually put the instance on <code>γ</code> as in your example, because frequently there will already be an instance on <code>γ</code> elsewhere and your new instance will form a diamond</p>",
        "id": 252591593,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631177279
    },
    {
        "content": "<p>Which is why we use the type synonym <code>restrict_scalars</code></p>",
        "id": 252591651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631177289
    },
    {
        "content": "<p>So when I have a lemma that requires the 3 instances, and the first two allow to derive the last and <strong>the last doesn't appear in the statement</strong>, should I still ask for the 3?</p>",
        "id": 252591817,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631177379
    },
    {
        "content": "<p>I understand that if it did appear then yes, definitely, for defeqness issues.</p>",
        "id": 252591893,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631177404
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> We used to have <code>algebra.comp R A B</code> which was a type alias that made <code>B</code> into an <code>R</code> algebra. It created all sorts of defeq problems, and very ugly code.</p>",
        "id": 252591959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631177442
    },
    {
        "content": "<p>So, given the current state of lean and mathlib, I'm very much in favour of: add all the (redundant) data by hand, and on top of that, ask for compatibilities using classes like <code>is_scalar_tower</code></p>",
        "id": 252592031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631177496
    },
    {
        "content": "<p>And then the burden of proving them is left on the end user who is working with concrete structures?</p>",
        "id": 252592117,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631177526
    },
    {
        "content": "<p>In principle you could try deriving it in the body, but why not make a separate global instance? Then it would be less risk of accidentally ending up in the lemma statement, and available to further developments.</p>",
        "id": 252592118,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631177527
    },
    {
        "content": "<p>E.g. <a href=\"https://github.com/leanprover-community/mathlib/issues/8761\">#8761</a> was originally an inline <code>letI : algebra _ _ := _</code> which I later put into its own instance.</p>",
        "id": 252592256,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1631177610
    },
    {
        "content": "<p>I see I see. Thanks for the explanations!</p>",
        "id": 252592485,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1631177737
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Transporting.20along.20is_scalar_tower/near/252591817\">said</a>:</p>\n<blockquote>\n<p>So when I have a lemma that requires the 3 instances, and the first two allow to derive the last and <strong>the last doesn't appear in the statement</strong>, should I still ask for the 3?</p>\n</blockquote>\n<p>If the lemma statement only requires 2 of them and the third is only needed by the proof, then arguably constructing it with <code>restrict_scalars</code> inside the lemma proof is sometimes the right thing to do</p>",
        "id": 252592705,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631177851
    },
    {
        "content": "<p>Indeed, this is quite common for downgrading complex-modules to real-modules I think</p>",
        "id": 252592729,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631177865
    },
    {
        "content": "<p>But usually, you'll end up also wanting a lemma that _does_ need all three instances in the statement, and for that one you should _not_ use restrict_scalars and will need the appropriate global instance like in <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>'s linked PR.</p>",
        "id": 252593805,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631178418
    }
]