[
    {
        "content": "<p>I know there is a standard polynomial library, but for self-instructive purposes I am trying to define them like so:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">polynomial</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"c1\">-- f is constant, or ...</span>\n  <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>with error <code>unknown identifier 'polynomial'</code></p>",
        "id": 320551759,
        "sender_full_name": "Michael Nestor",
        "timestamp": 1673387437
    },
    {
        "content": "<p>Did you mean to write <code>:=</code> instead of <code> :</code>?</p>",
        "id": 320557660,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673389822
    },
    {
        "content": "<p>That says \"let <code>polynomial</code> be a proof of the fact that ...\"</p>",
        "id": 320557707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673389845
    },
    {
        "content": "<p>But I expect you meant <code>def polynomial (f: ℝ → ℝ) : Prop :=</code>, \"let <code>polynomial</code> be a proposition, defined as ...\"</p>",
        "id": 320557766,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673389872
    },
    {
        "content": "<p>yes, whoops. but the error persists</p>",
        "id": 320558174,
        "sender_full_name": "Michael Nestor",
        "timestamp": 1673390054
    },
    {
        "content": "<p>You want <code>inductive</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">is_polynomial</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_polynomial</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">X_mul_add_C</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_polynomial</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">is_polynomial</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 320560939,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1673391330
    },
    {
        "content": "<p>Recursive types are different from inductive types, and you mean the latter this time.</p>",
        "id": 320674539,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1673436546
    },
    {
        "content": "<p>And there is a third thing called \"types defined by recursion\", which is also called recursive types sometimes, which is what your initial definition uses. However, your definition uses arbitrary recursion, which leads to inconsistency. You would have to do recursion on some decreasing argument.</p>",
        "id": 320674959,
        "sender_full_name": "Trebor Huang",
        "timestamp": 1673436662
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"519306\">@Michael Nestor</span> There is also a mathematical issue with this definition: you've defined \"polynomial function\". But a <em>polynomial</em> is not a function. Over finite rings, you only have finitely many polynomial functions, but infinitely many polynomials.</p>",
        "id": 320675080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673436703
    }
]