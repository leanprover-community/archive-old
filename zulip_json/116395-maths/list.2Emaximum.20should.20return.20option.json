[
    {
        "content": "<p>Would it be better for <code>list.maximum</code> to return an optional value, instead of asking for an inhabited instance. I'm working with <code>list (fin m)</code>, where I don't know if my list is empty or not (I want to case split on this) and <code>fin m</code> is obviously not necessarily inhabited, and it would be a lot nicer to have  an <code>option</code> in this situation.</p>",
        "id": 173000330,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1565589964
    },
    {
        "content": "<p>I always thought requiring <code>inhabited</code> here was strange, but I know some people have found it convenient.</p>",
        "id": 173001939,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565592614
    },
    {
        "content": "<p>Would <code>list.maximum.iget</code> be significantly too painful for people who want the old behaviour?</p>",
        "id": 173001943,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1565592650
    },
    {
        "content": "<p>Haskell's <code>data.list.safe</code> package requires the type to be nonempty, finite, and have an ordering as a precondition, it might have come from there.</p>",
        "id": 173006707,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1565599114
    },
    {
        "content": "<p>of course both signatures are provided, the option kind is <code>maximumMay :: (Foldable t, Ord a) =&gt; t a -&gt; Maybe a</code>...</p>",
        "id": 173006883,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1565599312
    },
    {
        "content": "<p>so it would be useful to have both versions</p>",
        "id": 173006935,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1565599333
    }
]