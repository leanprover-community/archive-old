[
    {
        "content": "<p>If my goal is <code>linear_independent K s</code>,<br>\nhow do I turn this into the statement that the coefficient <code>a_i</code> is zero if <code>sum a_i s_i = 0</code>?<br>\nThis part of the API seems to do lots of abstract stuff, but I'm missing this down to earth condition.</p>",
        "id": 159603444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551350210
    },
    {
        "content": "<p>Maybe it is hidden in 5 layers of defeqs, but that doesn't seem user friendly to me.</p>",
        "id": 159603459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551350226
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Any hints?</p>",
        "id": 159604575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551351401
    },
    {
        "content": "<p>oh no</p>",
        "id": 159604804,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551351638
    },
    {
        "content": "<p>iirc the lemma isn’t there</p>",
        "id": 159604835,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551351683
    },
    {
        "content": "<p>There is <code>linear_independent_iff</code>and <code>lc.total</code> is the sum operator</p>",
        "id": 159606747,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1551353722
    },
    {
        "content": "<p>by the way, I'm working on adding the linear structure on the function (pi) space &amp; for finsupp if you need this</p>",
        "id": 159606764,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1551353760
    },
    {
        "content": "<p>I'm feeling really miserable today. People have said that it is a sobering thought that Lean does not know complex analysis. Well, as far as I know Lean also doesn't know anything about finite-dimensional vector spaces. And that's quite depressing.<br>\nI've tried to prove that V and its dual have the same dimension, and I get stuck in a maze of complicated definitions that don't fit in my brain-RAM. It probably means that I haven't understood the API for linear maps and modules... I'm not sure if that says something about me, or about the API.</p>",
        "id": 159620546,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551365776
    },
    {
        "content": "<p>Do we have the dual vector space?</p>",
        "id": 159623030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551367462
    },
    {
        "content": "<p>If we have linear maps and the instance saying that a field is a vector space over itself then we have duals, right?</p>",
        "id": 159623171,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551367566
    },
    {
        "content": "<p>right. I'm trying to reconstruct the proof Johan is talking about</p>",
        "id": 159623219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551367620
    },
    {
        "content": "<p>what's the basis for the dual space?</p>",
        "id": 159623313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551367687
    },
    {
        "content": "<p>I agree that the status of linear algebra in mathlib is much more depressing than the status of complex analysis. But we need to make choices, we can't work on everything at the same time</p>",
        "id": 159623329,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551367709
    },
    {
        "content": "<p>If you have a basis for the original space then you get the dual basis</p>",
        "id": 159623346,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551367723
    },
    {
        "content": "<p>do you have to invent an inner product to define the dual basis</p>",
        "id": 159623347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551367725
    },
    {
        "content": "<p>no</p>",
        "id": 159623352,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551367732
    },
    {
        "content": "<p>If the basis is (e_1, ..., e_n) then the dual basis is defined by l_i(e_j) = 1 if i =j, 0 otherwise</p>",
        "id": 159623408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551367775
    },
    {
        "content": "<p>You need to know that a linear map can be specified by specifying it on a basis</p>",
        "id": 159623427,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551367794
    },
    {
        "content": "<p>okay. We have that though</p>",
        "id": 159623489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551367809
    },
    {
        "content": "<p>I think it's called <code>constr</code></p>",
        "id": 159623503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551367818
    },
    {
        "content": "<p>But this isn't always a basis, right? in infinite dimensions it breaks down</p>",
        "id": 159623527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551367843
    },
    {
        "content": "<p>You don't talk about basis in infinite dimension, this would be a bad idea</p>",
        "id": 159623582,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551367883
    },
    {
        "content": "<p>So we have a <code>dual_basis</code> function that takes any basis and makes a lin ind set in the dual space</p>",
        "id": 159623595,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551367891
    },
    {
        "content": "<p>and if the original space is f.d then it's also a basis</p>",
        "id": 159623632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551367917
    },
    {
        "content": "<p>yes</p>",
        "id": 159623681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551367924
    },
    {
        "content": "<p>In infinite dimensions the dual tends to be bigger than the original space</p>",
        "id": 159623791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551368001
    },
    {
        "content": "<p>oh right, I just remembered that I had plans to redo <code>linear_independent</code> because it uses sets instead of families</p>",
        "id": 159623804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551368018
    },
    {
        "content": "<p>ooh</p>",
        "id": 159623823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551368035
    },
    {
        "content": "<p>That would be nice</p>",
        "id": 159623884,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551368050
    },
    {
        "content": "<p>it's a lot more natural for everything except zorn's lemma</p>",
        "id": 159623916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551368077
    },
    {
        "content": "<p>but that's just one proof</p>",
        "id": 159623931,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551368087
    },
    {
        "content": "<p>Let's do more elementary maths since Jeremy opened the way with calculus. But not too elementary, I just spend one hour teaching how to \"prove\" the equivalence of five definitions of \"convex polygon\", I will never ever try to Lean that \"proof\"</p>",
        "id": 159623996,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551368119
    },
    {
        "content": "<p>I makes me think we need a Johannes countdown topic. I think we are getting dangerously close, and we still don't have integrals</p>",
        "id": 159624107,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551368173
    },
    {
        "content": "<p>Sorry, I was away for a while, because someone entered my office. Now I need to catch a train, so I will just dump the contents of my depression in this chat:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">Copyright (c) 2019 Johan Commelin. All rights reserved.</span>\n<span class=\"cm\">Released under Apache 2.0 license as described in the file LICENSE.</span>\n<span class=\"cm\">Authors: Johan Commelin</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">dimension</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">tensor_product</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">ordinal</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">dual</span> <span class=\"o\">:=</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">module</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">delta</span> <span class=\"n\">dual</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">delta</span> <span class=\"n\">dual</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"n\">def</span> <span class=\"kn\">eval</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">dual</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"n\">flip</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span><span class=\"o\">}</span>\n<span class=\"n\">def</span> <span class=\"n\">pairing</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">dual</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span>\n\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">is_basis</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">K</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">h</span>\n<span class=\"kn\">open</span> <span class=\"n\">vector_space</span> <span class=\"n\">module</span> <span class=\"n\">submodule</span> <span class=\"n\">linear_map</span> <span class=\"n\">cardinal</span>\n\n<span class=\"n\">def</span> <span class=\"n\">dual</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">dual</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">v</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">w</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">w</span> <span class=\"bp\">≠</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">dual_elem</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">dual</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">constr</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">dual_elem_mem</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">dual_elem</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">dual</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">H</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">constr_basis</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mem_dual_iff</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">dual</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"err\">∈</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">dual</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">dual_elem</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"bp\">;</span> <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">hv</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">,</span><span class=\"n\">hv</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">w</span> <span class=\"n\">hw</span><span class=\"o\">,</span>\n    <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"n\">constr_basis</span> <span class=\"bp\">_</span> <span class=\"n\">hw</span><span class=\"o\">],</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hwv</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hwv</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">w</span> <span class=\"n\">hw</span> <span class=\"n\">hwv</span><span class=\"o\">,</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">dual_elem_mem</span> <span class=\"n\">v</span> <span class=\"n\">hv</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">dual_elem_eq_repr</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"err\">∈</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pairing</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">dual_elem</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">repr</span> <span class=\"n\">w</span> <span class=\"n\">v</span> <span class=\"o\">:=</span>\n<span class=\"bp\">_</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_dual</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">dual</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">constr</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">dual_elem</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">to_dual_ker</span> <span class=\"o\">:</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">to_dual</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">v</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_ker</span><span class=\"o\">,</span> <span class=\"n\">mem_bot</span><span class=\"o\">],</span>\n    <span class=\"n\">intro</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_bot</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- lemma lc_dual_elem (l : lc K (module.dual K V))</span>\n<span class=\"c1\">-- (hl : ∀ (f : module.dual K V), f ∉ h.dual → l f = 0)</span>\n<span class=\"c1\">-- (v : V) (hv : v ∈ B) :</span>\n<span class=\"c1\">--   l (h.dual_elem v hv) = (pairing K V).to_fun</span>\n<span class=\"c1\">--     ((lc.total K (module.dual K V)).to_fun l) v :=</span>\n<span class=\"c1\">-- begin</span>\n<span class=\"c1\">--   have := lc.total_apply l,</span>\n<span class=\"c1\">--   change ((lc.total K (module.dual K V)).to_fun l) = _ at this,</span>\n<span class=\"c1\">--   erw this, clear this,</span>\n<span class=\"c1\">--   erw finsupp.apply_sum,</span>\n<span class=\"c1\">--   revert hl,</span>\n<span class=\"c1\">--   apply finsupp.induction l,</span>\n<span class=\"c1\">--   { intro hl,</span>\n<span class=\"c1\">--     rw [finsupp.zero_apply, finsupp.sum_zero_index],</span>\n<span class=\"c1\">--     symmetry,</span>\n<span class=\"c1\">--     apply zero_apply v, },</span>\n<span class=\"c1\">--   { intros f k l&#39; _ _ IH hl&#39;,</span>\n<span class=\"c1\">--     rw [finsupp.add_apply, IH, finsupp.sum_add_index,</span>\n<span class=\"c1\">--         finsupp.sum_single_index],</span>\n<span class=\"c1\">--     { congr&#39; 1,</span>\n<span class=\"c1\">--       by_cases H : f ∈ h.dual,</span>\n<span class=\"c1\">--         { rw [finsupp.single_apply, smul_apply],</span>\n<span class=\"c1\">--           split_ifs with hf,</span>\n<span class=\"c1\">--           { rw [hf, dual_elem, constr_basis _ hv], simp, },</span>\n<span class=\"c1\">--           sorry },</span>\n<span class=\"c1\">--         {  }</span>\n<span class=\"c1\">--        } } }</span>\n<span class=\"c1\">-- end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">dual_is_basis</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">K</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfin</span> <span class=\"o\">:</span> <span class=\"n\">dim</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">&lt;</span> <span class=\"n\">omega</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_basis</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">dual</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"c1\">-- { rw [linear_independent_iff],</span>\n  <span class=\"c1\">--   intros l hl H,</span>\n  <span class=\"c1\">--   ext f,</span>\n  <span class=\"c1\">--   by_cases hf : f ∈ h.dual,</span>\n  <span class=\"c1\">--   { rw lc.total_apply at H,</span>\n  <span class=\"c1\">--     rw mem_dual_iff at hf,</span>\n  <span class=\"c1\">--     rcases hf with ⟨v, hv, hf⟩,</span>\n  <span class=\"c1\">--     rw hf,</span>\n  <span class=\"c1\">--     sorry },</span>\n  <span class=\"c1\">--   { rw [lc.mem_supported&#39;] at hl,</span>\n  <span class=\"c1\">--     apply hl f hf, } },</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n\n      <span class=\"n\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">is_basis</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">eval_ker</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"kn\">eval</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ker</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_ker</span><span class=\"o\">,</span> <span class=\"n\">mem_bot</span><span class=\"o\">],</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mem_bot</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159626245,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551369443
    },
    {
        "content": "<p>Indeed there are too many sets in this story</p>",
        "id": 159626775,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551369785
    },
    {
        "content": "<p>By the way, today's xkcd is also about depressing elementary topics: <a href=\"https://xkcd.com/2117/\" target=\"_blank\" title=\"https://xkcd.com/2117/\">https://xkcd.com/2117/</a><br>\nMaybe this can cheer us up a bit...</p>",
        "id": 159627966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551370567
    },
    {
        "content": "<p>the definition of <code>is_basis.dual</code> is definitely not going to be easy to work with</p>",
        "id": 159630167,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551372150
    },
    {
        "content": "<p>BTW I think that XKCD is a great example of why decidability matters in mathematics</p>",
        "id": 159630333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551372298
    },
    {
        "content": "<p>Differentiation is a science, integration is an art.</p>",
        "id": 159632123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551373622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I'm currently preparing a push for the vector space structure of the function space and for finsupp: <a href=\"https://github.com/johoelzl/mathlib/commits/master\" target=\"_blank\" title=\"https://github.com/johoelzl/mathlib/commits/master\">https://github.com/johoelzl/mathlib/commits/master</a> (specially <a href=\"https://github.com/johoelzl/mathlib/commit/c83c049126030c524cf63e70273635b5d9f26476\" target=\"_blank\" title=\"https://github.com/johoelzl/mathlib/commit/c83c049126030c524cf63e70273635b5d9f26476\">https://github.com/johoelzl/mathlib/commit/c83c049126030c524cf63e70273635b5d9f26476</a> and <a href=\"https://github.com/johoelzl/mathlib/commit/592e3c7a2dfbd5826919b4605559d35d4d75938f\" target=\"_blank\" title=\"https://github.com/johoelzl/mathlib/commit/592e3c7a2dfbd5826919b4605559d35d4d75938f\">https://github.com/johoelzl/mathlib/commit/592e3c7a2dfbd5826919b4605559d35d4d75938f</a>)</p>",
        "id": 159634187,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1551375213
    },
    {
        "content": "<p>I don't know if any of this material might help for your proof</p>",
        "id": 159634277,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1551375287
    },
    {
        "content": "<p>Instead of defining <code>is_basis.dual</code> directly, it might be easier to use the image of <code>dual_elem</code></p>",
        "id": 159634457,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1551375463
    },
    {
        "content": "<p>Hmm, I don't think that's where the problems are... the <code>iff</code> that I prove afterwards let's you move between the two.</p>",
        "id": 159634522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551375505
    },
    {
        "content": "<p>Ah, that's what <code>mem_dual</code> is for</p>",
        "id": 159634523,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1551375508
    },
    {
        "content": "<p>It's just that I'm running into many type class errors because it doesn't know how to coerce a linear map into a function. And then I manually add <code>.to_fun</code> and it typechecks, but then all sorts of <code>rw</code> and <code>simp</code> don't trigger. And it's just a pain.</p>",
        "id": 159634572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551375576
    },
    {
        "content": "<p>It also made me a bit worried about if bundling + coercions is a good idea...</p>",
        "id": 159634646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551375611
    },
    {
        "content": "<p>the coercion into functions worked quiet well for me</p>",
        "id": 159634670,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1551375645
    },
    {
        "content": "<p>I had more problems with the decidability instance required for finsupp</p>",
        "id": 159634704,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1551375681
    },
    {
        "content": "<p>I couldn't apply <code>lc.total _ _</code> to an <code>l : lc</code> in theorem statements.</p>",
        "id": 159636754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551377348
    },
    {
        "content": "<p>You can see the hackery in the code dump above.</p>",
        "id": 159636763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551377362
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- lemma lc_dual_elem (l : lc K (module.dual K V))</span>\n<span class=\"c1\">-- (hl : ∀ (f : module.dual K V), f ∉ h.dual → l f = 0)</span>\n<span class=\"c1\">-- (v : V) (hv : v ∈ B) :</span>\n<span class=\"c1\">--   l (h.dual_elem v hv) = (pairing K V).to_fun</span>\n<span class=\"c1\">--     ((lc.total K (module.dual K V)).to_fun l) v :=</span>\n<span class=\"c1\">-- begin</span>\n<span class=\"c1\">--   have := lc.total_apply l,</span>\n<span class=\"c1\">--   change ((lc.total K (module.dual K V)).to_fun l) = _ at this,</span>\n<span class=\"c1\">--   erw this, clear this,</span>\n</pre></div>",
        "id": 159636798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551377395
    },
    {
        "content": "<p>I have to write <code>((lc.total K (module.dual K V)).to_fun l</code></p>",
        "id": 159636869,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551377422
    },
    {
        "content": "<p>And then the first 3 lines of the proof are hackery to get <code>lc.total_apply</code> working.</p>",
        "id": 159636906,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1551377450
    }
]