[
    {
        "content": "<p>What do you think about changing the definition of <code>linear_order</code> to be what's now called <code>decidable_linear_order</code>?</p>",
        "id": 213721802,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603049895
    },
    {
        "content": "<p>We always define <code>decidable_linear_order</code> anyway.</p>",
        "id": 213721822,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603049941
    },
    {
        "content": "<p>(some instances are noncomputable)</p>",
        "id": 213721834,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603049959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 213722022,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603050222
    },
    {
        "content": "<p>I think this makes sense. Really, I think this will help to decrease a lot of choice usage if we just delete <code>linear_order</code> and replace it with <code>DLO</code> because there aren't any instances of <code>linear_order</code> that aren't DLO's, intuitionistically, because the disjunction is too hard to establish otherwise</p>",
        "id": 213722194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603050406
    },
    {
        "content": "<p>and of course in classical land they are the same thing</p>",
        "id": 213722219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603050450
    },
    {
        "content": "<p>At the moment, there are gaps in the algebraic hierarchy, because people haven't bothered exactly duplicating everything in decidable and non-decidable versions.  For example I believe there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable_linear_ordered_add_comm_group\">docs#decidable_linear_ordered_add_comm_group</a> but not <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_ordered_add_comm_group\">docs#linear_ordered_add_comm_group</a>.</p>",
        "id": 213722549,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603050867
    },
    {
        "content": "<p>This is also a mess because we have too many things bundling an order relation instead of taking it as a parameter and living in Prop</p>",
        "id": 213722572,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603050932
    },
    {
        "content": "<p>The example you gave is an instance of this.</p>",
        "id": 213722583,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603050960
    },
    {
        "content": "<p>Recently <br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/fee2dfaadadd9f77c8837ac6a068e4aa9002e28d/src/topology/algebra/ordered.lean#L1299\">https://github.com/leanprover-community/mathlib/blob/fee2dfaadadd9f77c8837ac6a068e4aa9002e28d/src/topology/algebra/ordered.lean#L1299</a><br>\nI wanted to prove something for the non-existent <code>linear_ordered_add_comm_group</code>, and had to instead choose between proving it for <code>linear_ordered_ring</code> with the unneccessary extra operation or for <code>decidable_linear_ordered_add_comm_group</code> with the unnecessary decidability.  (I chose the former, but in retrospect that was the wrong choice.)</p>",
        "id": 213722638,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603051002
    },
    {
        "content": "<p>There are many things wrong with  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable_linear_ordered_add_comm_group\">docs#decidable_linear_ordered_add_comm_group</a>!  Another is that it should be <code>to_additive</code> of  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/decidable_linear_ordered_comm_group\">docs#decidable_linear_ordered_comm_group</a>, but the latter doesn't exist.</p>",
        "id": 213722667,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1603051072
    },
    {
        "content": "<p>My secret hope is that our refactoring machine will get tired of this mess when he'll be done with convexity.</p>",
        "id": 213722813,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1603051219
    },
    {
        "content": "<p>There is a trick for non-existent <code>linear_ordered_add_comm_group</code>: you assume <code>ordered_add_comm_group</code> and <code>is_total G (≤)</code></p>",
        "id": 213724685,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603053557
    },
    {
        "content": "<p>I'm a big fan of the change!</p>",
        "id": 213731195,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603063036
    },
    {
        "content": "<p>I've been looking at the file <code>ordered_group</code> recently too. I want to redefine <a href=\"https://leanprover-community.github.io/mathlib_docs/find/canonically_ordered_add_monoid\">docs#canonically_ordered_add_monoid</a> so that it extends <code>has_sub</code>, because we currently have many instances of <code>canonically_ordered_add_monoid</code> with their own <code>has_sub</code> instance. However, to show all the lemmas about <code>has_sub</code> generally, I need to sometimes assume linearity of the order and sometimes cancellation for the addition (which means 3 new classes). Also, measures do not form a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ordered_comm_monoid\">docs#ordered_comm_monoid</a>, since the rule <code>a + b &lt; a + c → b &lt; c</code> does not hold. But they should still be a <code>canonically_ordered_add_monoid</code>, which means having 1+ more classes of canonically ordered monoids.</p>\n<p>I'm wondering if we should make <code>canonically_ordered_...</code> a mixin that depends on the order via <code>[partial_order \\a]</code> or <code>[linear_order \\a]</code> (and maybe also on the algebra part? But what extra axioms should be in the mixin usually depends on the algebraic part).</p>",
        "id": 213731382,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603063413
    },
    {
        "content": "<p>This makes all the pi instances for orders noncomputable, right?</p>",
        "id": 213752033,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603093372
    },
    {
        "content": "<p>IMHO, we should do the same as for fields, etc., and split <code>decidable_linear_order</code> into <code>linear_order</code> and <code>decidable_le</code>.</p>",
        "id": 213752148,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603093465
    },
    {
        "content": "<p>What <code>pi</code> instances have <code>linear_order</code>?</p>",
        "id": 213778470,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603111157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/116395-maths/topic/decidable.20linear.20order/near/213752148\">said</a>:</p>\n<blockquote>\n<p>IMHO, we should do the same as for fields, etc., and split <code>decidable_linear_order</code> into <code>linear_order</code> and <code>decidable_le</code>.</p>\n</blockquote>\n<p>I'm confused. Isn't this the exact opposite of the proposal? We already have <code>linear_order</code> and <code>decidable_le</code>, but I think we should do away with <code>linear_order</code> and replace it with DLO</p>",
        "id": 213778797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603111339
    },
    {
        "content": "<p>We have DLO.  I'm saying we should get rid of it.</p>",
        "id": 213778866,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603111389
    },
    {
        "content": "<p>we have all three now</p>",
        "id": 213778916,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603111411
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/decidable.20linear.20order/near/213778470\">said</a>:</p>\n<blockquote>\n<p>What <code>pi</code> instances have <code>linear_order</code>?</p>\n</blockquote>\n<p>Of course, <code>pi.linear_order</code> doesn't make sense.  I meant <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.partial_order\">docs#pi.partial_order</a>.</p>",
        "id": 213779000,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603111444
    },
    {
        "content": "<p>Why this should become noncomputable?</p>",
        "id": 213779029,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603111463
    },
    {
        "content": "<p>I propose to add <code>decidable_le</code> to <code>linear_order</code>, not to <code>partial_order</code>.</p>",
        "id": 213779063,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603111481
    },
    {
        "content": "<p>but I think there isn't any reason to not put decidable assumptions in linear_order because there are zero instances of a linear_order that is not decidable</p>",
        "id": 213779065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603111481
    },
    {
        "content": "<p>Ah, if it's only for linear orders (but not partial orders), then it should be fine.</p>",
        "id": 213779136,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1603111536
    },
    {
        "content": "<p>yeah, partial orders should stay as they are</p>",
        "id": 213779161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603111553
    },
    {
        "content": "<p>I do know an example of a linear order on pi, namely the ordinal exponential and similar constructions</p>",
        "id": 213779230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603111581
    },
    {
        "content": "<p>you can well order a pi if the base set is well ordered</p>",
        "id": 213779251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603111601
    },
    {
        "content": "<p>but that's a pretty choicy construction anyway so I don't think it matters too much what we do there</p>",
        "id": 213779301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603111628
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/issues/484\">lean#484</a></p>",
        "id": 213872854,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603165738
    }
]