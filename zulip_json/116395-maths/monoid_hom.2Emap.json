[
    {
        "content": "<p>This is either a technical point or me fussing about nothing. I was just developing group theory from scratch for my undergraduate course (so no monoids) and afterwards I realised I'd put <code>map (f : group_hom G H) : subgroup G -&gt; subgroup H</code> in the <code>group_hom</code> namespace rather than the <code>subgroup</code> namespace. Is there a category-theoretic reason that in mathlib it's in the <code>subgroup</code> namespace (i.e. something to do with <code>functor.map</code>), or is it just a convention / \"random choice\", or is it to do with the fact that group_hom = monoid_hom but subgroup != submonoid?</p>",
        "id": 268811859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642755401
    },
    {
        "content": "<p>Certainly the fact that group_hom = monoid_hom (and ring_hom = semiring_hom) is relevant, but we cope with that already with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.range\">docs#monoid_hom.range</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.mrange\">docs#monoid_hom.mrange</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.range\">docs#ring_hom.range</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.srange\">docs#ring_hom.srange</a></p>",
        "id": 268812270,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642755581
    },
    {
        "content": "<p>Also, <code>submonoid.map</code> agrees with <code>list.map</code>, <code>finset.map</code>, <code>filter.map</code></p>",
        "id": 268907344,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642801517
    },
    {
        "content": "<p>But none of those could be in the morphism namespace because they're all <a href=\"http://function.map\">function.map</a> . Here we have a different kind of map</p>",
        "id": 268915621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642806422
    },
    {
        "content": "<p><code>ring_hom</code> can map at least <code>subring</code>s, <code>subsemiring</code>s, and <code>polynomial</code>s</p>",
        "id": 268965972,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642869497
    },
    {
        "content": "<p>Note we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.map_matrix\">docs#ring_hom.map_matrix</a>, so we could have ring_hom.map_subring to match</p>",
        "id": 268967885,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642872152
    },
    {
        "content": "<p>Or we fix the functorial machinery so that we can actually use it for this type of thing</p>",
        "id": 268967904,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642872182
    },
    {
        "content": "<p><code>has_map (α β : Type*) (γ : out_param (Type*))</code>?</p>",
        "id": 268968885,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642873456
    },
    {
        "content": "<p>(I'm not sure whether we want <code>Type*</code>s or <code>Sort*</code>s)</p>",
        "id": 268968935,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642873561
    },
    {
        "content": "<p>I'm not suggesting fixes or changes -- I was just trying to teach myself the algorithm for learning in which namespace to look for things like functions mapping subgroups to subgroups along group homomorphisms.</p>",
        "id": 268971384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642876699
    },
    {
        "content": "<p>This discussion inspired a random idea: would it make sense to define <code>subsemiring.range (f : α → β) := closure (set.range f)</code>?</p>",
        "id": 269099232,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643028171
    },
    {
        "content": "<p>The image of a subsemiring under a ring hom is a subsemiring and the advantage of the \"concrete\" definition of <code>range</code> (the carrier is the set.range, and then you prove the axioms) is that it's sometimes handy to have <code>x \\in subsemiring.range f</code> (when f is a ring hom) to be defeq to <code>\\exists a, x = f a</code>. Or am I missing the point?</p>",
        "id": 269099442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643028292
    },
    {
        "content": "<p>Right, so I guess I'm asking: is it worth it to lose that defeq in exchange for not having to prove that <code>f</code> is a ring hom ahead of time?</p>",
        "id": 269099624,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643028394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/116395-maths/topic/monoid_hom.2Emap/near/269099624\">said</a>:</p>\n<blockquote>\n<p>Right, so I guess I'm asking: is it worth it to lose that defeq in exchange for not having to prove that <code>f</code> is a ring hom ahead of time?</p>\n</blockquote>\n<p>I think you could keep the desired defeq and still allow the user to defer the proof that their map is a ring hom, by defining range so that it consumes a function <code>f</code> together with a proof that <code>set.range f = closure (set.range f)</code>.</p>",
        "id": 269101429,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1643029313
    }
]