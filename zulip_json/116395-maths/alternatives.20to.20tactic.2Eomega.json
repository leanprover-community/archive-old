[
    {
        "content": "<p>I have the following goal, which is easily solved by <code>omega</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">omega</span>\n</code></pre></div>\n<p>However, as the CI has made me aware, this tactic is being phased out (btw, where can I read more about the rationale for this?). What is the best way of proving this goal without <code>omega</code>?</p>",
        "id": 275124415,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1647131572
    },
    {
        "content": "<p>You can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lt_of_le_of_ne\">docs#lt_of_le_of_ne</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.lt_add_one_iff\">docs#nat.lt_add_one_iff</a></p>",
        "id": 275124473,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1647131673
    },
    {
        "content": "<p>Actually, there's better</p>",
        "id": 275124545,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647131786
    },
    {
        "content": "<p>The hands on approach is to do cases on <code>h1</code></p>",
        "id": 275124563,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647131831
    },
    {
        "content": "<p>The higher powered approach is to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/succ_order.le_succ_iff_lt_or_eq\">docs#succ_order.le_succ_iff_lt_or_eq</a> (yes, it's misnamed). Unfortunately, we don't seem to have the specialization to <code>ℕ</code> but you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.lt_succ_iff\">docs#nat.lt_succ_iff</a> followed by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.lt_succ_iff_lt_or_eq\">docs#nat.lt_succ_iff_lt_or_eq</a></p>",
        "id": 275124632,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1647131971
    },
    {
        "content": "<p>The rationale for phasing out <code>omega</code> is that is was written by someone who has not subsequently contributed, and the existing code base for <code>omega</code> is considered unmaintainable. (We would love to have a replacement, but it should be written for Lean4, not Lean3, so the problem wouldn't go away immediately in any case.)</p>",
        "id": 275124686,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1647132029
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"482773\">Jakub Kądziołka</span> <a href=\"#narrow/stream/116395-maths/topic/alternatives.20to.20tactic.2Eomega/near/275124415\">said</a>:</p>\n<blockquote>\n<p>where can I read more about the rationale for this?</p>\n</blockquote>\n<p>Users figured out that <code>omega</code> was producing very large proofs which were ~30-100 times the size of other large declarations. For whatever revision of mathlib I was using to run the numbers pre-ban, the raw proof term for the largest item using omega took ~7.5 seconds to check, while average for other large declarations was ~120 milliseconds.</p>\n<p>There's some background and stats in this thread:<br>\n<a href=\"#narrow/stream/236449-Program-verification/topic/Arena.20allocation.20for.20ITPs/near/206635753\">https://leanprover.zulipchat.com/#narrow/stream/236449-Program-verification/topic/Arena.20allocation.20for.20ITPs/near/206635753</a></p>",
        "id": 275125529,
        "sender_full_name": "Chris B",
        "timestamp": 1647133379
    },
    {
        "content": "<p>You can see the dovetail into Scott's point at the end of the thread.</p>",
        "id": 275125751,
        "sender_full_name": "Chris B",
        "timestamp": 1647133774
    },
    {
        "content": "<p>Fwiw Coq is apparently ditching omega altogether : <a href=\"#narrow/stream/116395-maths/topic/Multiplication.20on.20int.20is.20well-defined/near/202302824\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Multiplication.20on.20int.20is.20well-defined/near/202302824</a></p>",
        "id": 275125875,
        "sender_full_name": "Chris B",
        "timestamp": 1647134035
    }
]