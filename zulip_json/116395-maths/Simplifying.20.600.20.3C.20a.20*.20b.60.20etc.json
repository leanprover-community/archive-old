[
    {
        "content": "<p>I'm going to add lemmas simplifying <code>0 &lt; a * b</code> to <code>0 &lt; a ∧0 &lt; b ∨ a &lt; 0 ∧ b &lt; 0</code>, and similarly for other inequalities. Please respond here if you have any objections.</p>",
        "id": 211955169,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601577635
    },
    {
        "content": "<p>(and similarly for <code>0 &lt; a / b</code>)</p>",
        "id": 211955217,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601577651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> will they be in the default simp set?</p>",
        "id": 211978365,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601587928
    },
    {
        "content": "<p>I'm not sure I like that idea... (but maybe I can get used to it)</p>",
        "id": 211978398,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601587948
    },
    {
        "content": "<p>Yes, I was going to add them to the default simp set. My argument is that the inequalities become simpler, and Lean can <code>simp</code> out bad cases.</p>",
        "id": 211985232,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601592125
    },
    {
        "content": "<p>Created <a href=\"https://github.com/leanprover-community/mathlib/issues/4359\">#4359</a>. Let's see if the proofs outside of <code>algebra/ordered*</code> become harder or easier.</p>",
        "id": 211995923,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601602614
    },
    {
        "content": "<p>Is it true that when <code>simp</code> would make further progress, it could also use a lemma like <code>... (h : 0 &lt; a) : 0 &lt; a * b &lt;-&gt; 0 &lt; b</code>?</p>",
        "id": 211995990,
        "sender_full_name": "Reid Barton",
        "timestamp": 1601602696
    },
    {
        "content": "<p>Currently I use <code>simp [h.not_lt]</code>.</p>",
        "id": 211996293,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601603108
    },
    {
        "content": "<p>I definitely want these lemmas but I don't insist on tagging them with <code>@[simp]</code>. We can always drop this part of the PR.</p>",
        "id": 211996639,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601603557
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4359\">#4359</a> is ready for review.</p>",
        "id": 212003279,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601612122
    },
    {
        "content": "<p>Would it be a good idea to have simp lemmas like <code>(h : a &lt; b) : b &lt; a &lt;-&gt; false</code>?</p>",
        "id": 212003639,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1601612648
    },
    {
        "content": "<p>How  deep will <code>simp</code> go while searching for <code>h : a &lt; b</code>? Will it create a loop?</p>",
        "id": 212006279,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601616475
    },
    {
        "content": "<p>I mean, it would be nice to have <code>simp</code> add <code>a ≤ b</code>, <code>¬(b &lt; a)</code>, <code>¬(b ≤ a)</code> whenever it has <code>a &lt; b</code> but I don't know how much will it slow down <code>simp</code>.</p>",
        "id": 212006351,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601616584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> The diff is much smaller than I expected <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span> <br>\n<span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> are these simp lemmas a good idea?</p>",
        "id": 212007839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601618474
    },
    {
        "content": "<p>I don't know, my thought is the same as Yury's</p>",
        "id": 212007868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601618510
    },
    {
        "content": "<p>you probably have to test to find out</p>",
        "id": 212007914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1601618525
    },
    {
        "content": "<p>I don't think these are good simp lemmas.  What happens if somebody calls simp on <code>0 &lt; a*b*c*d*e*f*h</code>?<br>\nIn general I'm skeptical of conditional simp lemmas (they cause invisible search and it's hard to figure out what extra lemmas you need to add to trigger them), but in this case Reid's proposal looks like the lesser evil.</p>",
        "id": 212043850,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601625780
    },
    {
        "content": "<p>Which proposal by Reid are you referring to? <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span></p>",
        "id": 212046313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601627396
    },
    {
        "content": "<p>The only message Reid posted in this thread:</p>\n<blockquote>\n<p>use a lemma like <code>... (h : 0 &lt; a) : 0 &lt; a * b &lt;-&gt; 0 &lt; b</code></p>\n</blockquote>",
        "id": 212046483,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601627511
    },
    {
        "content": "<p>Oops, I didn't scroll back enough... stupid tiny screens <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 212046596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601627574
    },
    {
        "content": "<p>But what if <code>a &lt; 0</code>, <code>b &lt; 0</code>?</p>",
        "id": 212065740,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601640851
    },
    {
        "content": "<p>You need 2*2 simp lemmas.</p>",
        "id": 212065854,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601640949
    },
    {
        "content": "<p>But in the case <code>0 &lt; a * b * c * d</code> this will create a huge search.</p>",
        "id": 212066136,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601641108
    },
    {
        "content": "<p>And what about <code>0 ≤ a * b</code>? My PR simplifies it to a formula with non-strict inequalities.</p>",
        "id": 212066213,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601641162
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Simplifying.20.600.20.3C.20a.20*.20b.60.20etc/near/212066136\">said</a>:</p>\n<blockquote>\n<p>But in the case <code>0 &lt; a * b * c * d</code> this will create a huge search.</p>\n</blockquote>\n<p>The simp lemmas in <a href=\"https://github.com/leanprover-community/mathlib/issues/4359\">#4359</a> will make this formula exponentially larger.<br>\nReid's proposal would only call the simplifier on <code>0 &lt; a</code>, <code>a &lt; 0</code>, <code>0 &lt; a*b</code>, <code>a*b &lt; 0</code>, <code>0 &lt; a*b*c</code>, <code>a*b*c &lt; 0</code>, <code>0 &lt; a*b*c*d</code>, and <code>a*b*c*d &lt; 0</code> (as well as the subterms <code>0</code>, <code>a</code>, <code>b</code>, <code>c</code>, <code>d</code>, <code>a*b</code>, <code>a*b*c</code>, and <code>a*b*c*d</code>).</p>",
        "id": 212066769,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601641526
    },
    {
        "content": "<p>Note that there is caching.</p>",
        "id": 212066806,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601641555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Simplifying.20.600.20.3C.20a.20*.20b.60.20etc/near/212066213\">said</a>:</p>\n<blockquote>\n<p>And what about <code>0 ≤ a * b</code>? My PR simplifies it to a formula with non-strict inequalities.</p>\n</blockquote>\n<p><code>mul_nonneg_iff</code> rewrites one non-strict <code>≤</code> to four non-strict <code>≤</code>, am I missing something?</p>",
        "id": 212066934,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601641653
    },
    {
        "content": "<p>Yes (with the hope that some of those 4 inequalities can be simplified to <code>true</code> or <code>false</code>.</p>",
        "id": 212067482,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601641985
    },
    {
        "content": "<p>OK, let me remove <code>@[simp]</code> from these lemmas.</p>",
        "id": 212067534,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601642031
    },
    {
        "content": "<p>I'll just add them to <code>simp</code> calls explicitly.</p>",
        "id": 212067599,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601642052
    },
    {
        "content": "<p>We can decide whether to add the conditional <code>iff</code>s to <code>@[simp]</code> later.</p>",
        "id": 212067691,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601642106
    },
    {
        "content": "<p>Done, fixed build failures. <a href=\"https://github.com/leanprover-community/mathlib/issues/4359\">#4359</a> is ready for review</p>",
        "id": 212139211,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601680225
    }
]