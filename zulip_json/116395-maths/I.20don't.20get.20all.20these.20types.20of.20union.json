[
    {
        "content": "<p>I noticed recently that I often make a real meal of arguments involving arbitrary unions. I am beginning to wonder whether I'm missing some tips and tricks.</p>\n<p>I have a goal</p>\n<div class=\"codehilite\"><pre><span></span>f : Y -&gt; X\nI : set (set X),\n⊢ f ⁻¹&#39; ⋃₀ I ∈ F.sets\n</pre></div>\n\n\n<p>and if I <code>rw preimage_sUnion</code> I get </p>\n<div class=\"codehilite\"><pre><span></span>⊢ (⋃ (t : set X) (H : t ∈ I), f ⁻¹&#39; t) ∈ F.sets\n</pre></div>\n\n\n<p>Later on the goal gets reduced to </p>\n<div class=\"codehilite\"><pre><span></span>⊢ f ⁻¹&#39; U ⊆ ⋃ (t : set X) (H : t ∈ I), f ⁻¹&#39; t\n</pre></div>\n\n\n<p>and I have a proof that <code>U \\in I</code> but now the sUnion appears to be a Union and <code>apply subset_Union</code> fails. Am I already in some kind of trouble when I have <code>⋃ (t : set X) (H : t ∈ I), ...</code>? I don't know where to learn about how to control all these unions sensibly.</p>",
        "id": 189325015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582907047
    },
    {
        "content": "<p>Is this now a bUnion or something? Aah bingo, <code>apply subset_bUnion_of_mem</code> works. I find all this very confusing.</p>",
        "id": 189325248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582907186
    },
    {
        "content": "<p>There are three kinds of arbitrary union. <code>sUnion</code> is <code>⋃₀ S</code>, which applies when S is a set of sets and takes the union of all of them. <code>Union</code> is <code>⋃ i:I, f i</code> which applies when <code>f : I -&gt; set A</code> and is in some sense the most type theoretically natural union of a family. <code>bUnion</code> is written <code>⋃ t ∈ S, f t</code> and works when <code>f : I -&gt; set A</code> and <code>S : set I</code>, that is, it is a union bounded by a set in the index. However, because of the way the lean parser works on relations in the binders, this is just a double <code>Union</code>, with the second one ranging over proofs that <code> t ∈ S</code>, that is, <code>⋃ (t : I), ⋃ (H : t ∈ S), f t</code>. So you can usually apply <code>Union</code> theorems to these expressions, and in that sense <code>bUnion</code> is just a shortcut for this special case.</p>",
        "id": 189361139,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582932074
    },
    {
        "content": "<p>Can we have unions over two or more predicates on a type? Are these also called bUnion? Should they be avoided?</p>",
        "id": 189381516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582963588
    },
    {
        "content": "<p>Like I said, <code>bUnion</code> is really just a special case of <code>Union</code>. You can iterate the <code>Union</code> construction as many times as you like</p>",
        "id": 189382552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582966041
    },
    {
        "content": "<p>The problem I run into is that I find myself taking a union over all proofs that s is in S, for example. That can't be right</p>",
        "id": 189383930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1582968970
    },
    {
        "content": "<p>that's correct</p>",
        "id": 189383977,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582969096
    },
    {
        "content": "<p>Notice that a union over proofs is equal to the body, if the proposition is true, and is empty otherwise</p>",
        "id": 189383979,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582969133
    }
]