[
    {
        "content": "<p>Does this really work?</p>",
        "id": 206137816,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596719242
    },
    {
        "content": "<p>Anyways, wouldn't it be more natural to write right actions on the right?</p>",
        "id": 206137829,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596719250
    },
    {
        "content": "<p>Yes, but since everything is already done for left modules, wouldn't it be more convenient to define a right action as a left action by M\\op?</p>",
        "id": 206137942,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596719305
    },
    {
        "content": "<p>Notation can be introduced for a right action, I guess.</p>",
        "id": 206138000,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596719343
    },
    {
        "content": "<p>I'm not sure what is more convenient, but maybe that's just lasting scars from <code>opposite</code></p>",
        "id": 206138159,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596719413
    },
    {
        "content": "<p>I'm thinking something along these lines: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"err\">•</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">has_scalar</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n</code></pre></div>",
        "id": 206138225,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596719467
    },
    {
        "content": "<p>Is that the same character as left multiplication?</p>",
        "id": 206139197,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596720002
    },
    {
        "content": "<p>Yeah, is that a problem?</p>",
        "id": 206139240,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596720021
    },
    {
        "content": "<p>Would this work for bimodules?</p>",
        "id": 206139354,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596720098
    },
    {
        "content": "<p>Not sure yet. I'll have to try.</p>",
        "id": 206139376,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596720112
    },
    {
        "content": "<p>I was imagining we would use some paired characters, like steal the stupid triangle notation perhaps</p>",
        "id": 206139385,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596720116
    },
    {
        "content": "<p>I'm not sure what you're referring to.</p>",
        "id": 206139455,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596720138
    },
    {
        "content": "<p>e.g. change <code>smul</code> to <code>▸</code> and use <code>◂</code> for right multiplication (<code>muls</code>?)</p>",
        "id": 206139609,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596720217
    },
    {
        "content": "<p>but of course there's doubtless a large number of other options</p>",
        "id": 206139701,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596720250
    },
    {
        "content": "<p>example <span aria-label=\"one\" class=\"emoji emoji-0031-20e3\" role=\"img\" title=\"one\">:one:</span> of a bimodule is R as an (R, R)-bimodule, so I'm having trouble imagining using the same notation for multiplication on both sides</p>",
        "id": 206139772,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596720292
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"n\">class</span> <span class=\"n\">comm_mul_action</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span>\n  <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">commutes</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">•</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"err\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">biaction</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">N</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_mul_action</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"err\">•</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">has_scalar</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n\n<span class=\"n\">class</span> <span class=\"n\">bimodule</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">B</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">biaction</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">B</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bimodule</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"err\">•</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">comm_mul_action</span><span class=\"bp\">.</span><span class=\"n\">commutes</span>\n</code></pre></div>",
        "id": 206139807,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596720309
    },
    {
        "content": "<p>(I'm going to move lots of this discussion to topic \"bimodules\")</p>",
        "id": 206140080,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596720427
    },
    {
        "content": "<p>oh wait I can't any more</p>",
        "id": 206140115,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596720444
    },
    {
        "content": "<p>I'll just make a new topic.</p>",
        "id": 206140822,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596720739
    },
    {
        "content": "<p>oh, I would have to do it on my own messages</p>",
        "id": 206140837,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596720747
    },
    {
        "content": "<p>I think you can do it on your messages, e.g., starting with <a href=\"#narrow/stream/116395-maths/topic/Pointed.20monoid/near/205964445\">this one</a></p>",
        "id": 206140874,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596720771
    },
    {
        "content": "<p>I don't have a move option.</p>",
        "id": 206140975,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596720827
    },
    {
        "content": "<p>edit message and then change the topic</p>",
        "id": 206141044,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596720846
    },
    {
        "content": "<p>That worked!</p>",
        "id": 206141139,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596720887
    },
    {
        "content": "<p>Here's what I have so far:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"n\">class</span> <span class=\"n\">comm_mul_action</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span>\n  <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">commutes</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">•</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"err\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">biaction</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">N</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_mul_action</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`</span> <span class=\"err\">•</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">has_scalar</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">a</span>\n\n<span class=\"n\">class</span> <span class=\"n\">bimodule</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">B</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">biaction</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">B</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bimodule</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"err\">•</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">•</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">comm_mul_action</span><span class=\"bp\">.</span><span class=\"n\">commutes</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">A</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">unop</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">],</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">bimodule</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"bp\">_</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 206141221,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596720944
    },
    {
        "content": "<p>Now if you try to use <code>•</code> on a ring <code>A</code> do you not get some overloaded notation error?</p>",
        "id": 206141420,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596721022
    },
    {
        "content": "<p>Yeah, there's the issue.</p>",
        "id": 206141475,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596721054
    },
    {
        "content": "<p>Ping <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span></p>",
        "id": 206141576,
        "sender_full_name": "Utensil Song",
        "timestamp": 1596721088
    },
    {
        "content": "<p>Okay, how do you write that right triangle thing?</p>",
        "id": 206141691,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596721155
    },
    {
        "content": "<p><code>\\tb</code> but in emacs</p>",
        "id": 206141836,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596721209
    },
    {
        "content": "<p>Works in vscode too.</p>",
        "id": 206141864,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596721221
    },
    {
        "content": "<p>Can we just use an r subscript for the right version?</p>",
        "id": 206142058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596721313
    },
    {
        "content": "<p>Maybe, but wouldn't it be terrible to write <code>\\bu\\_r</code> a million times?</p>",
        "id": 206142186,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596721369
    },
    {
        "content": "<p>Could always have \\bur as a shorhand</p>",
        "id": 206142223,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596721394
    },
    {
        "content": "<p>Or \\rbullet etc</p>",
        "id": 206142247,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596721402
    },
    {
        "content": "<p>The last line in this gives me errors:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"n\">class</span> <span class=\"n\">comm_mul_action</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span>\n  <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">commutes</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">•</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"err\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">biaction</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">N</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_mul_action</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">m</span> <span class=\"bp\">`</span> <span class=\"err\">•ᵣ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span>\n\n<span class=\"n\">class</span> <span class=\"n\">bimodule</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">B</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">biaction</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">B</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">bimodule</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"err\">•ᵣ</span> <span class=\"n\">b</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">•ᵣ</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"err\">•ᵣ</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"err\">•ᵣ</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>Can anyone reproduce and/or explain why?</p>",
        "id": 206143243,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596721856
    },
    {
        "content": "<p><code>example : (a • m •ᵣ b) = a • (m •ᵣ b) := sorry</code></p>",
        "id": 206143450,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596721958
    },
    {
        "content": "<p>Yeah, just figured that out too :)</p>",
        "id": 206143465,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596721967
    },
    {
        "content": "<p>That's annoying though.</p>",
        "id": 206143491,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596721976
    },
    {
        "content": "<p>I guess it's some precedence issue with equality?</p>",
        "id": 206143513,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596721988
    },
    {
        "content": "<p>or <code>notation m ` •ᵣ `:73 a:73 := (opposite.op a) • m</code> or 72 whichever is the right one, I can never remember how these work</p>",
        "id": 206143521,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596721990
    },
    {
        "content": "<p>73 is the right one apparently</p>",
        "id": 206143699,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596722061
    },
    {
        "content": "<p>I think we should make it 72: e.g. with 73 this is true:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"n\">y</span> <span class=\"err\">•ᵣ</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">•ᵣ</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 206143953,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596722183
    },
    {
        "content": "<p>what I mean is the levels for <code>•ᵣ</code> should be equal because then it will associate properly with itself</p>",
        "id": 206144013,
        "sender_full_name": "Reid Barton",
        "timestamp": 1596722219
    },
    {
        "content": "<p>Oh ok.</p>",
        "id": 206144028,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596722230
    },
    {
        "content": "<p>Seems okay so far:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"n\">class</span> <span class=\"n\">comm_mul_action</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span>\n  <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">N</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">commutes</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">•</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">m</span> <span class=\"err\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">biaction</span> <span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"n\">α</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">N</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_mul_action</span> <span class=\"n\">M</span> <span class=\"n\">N</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">α</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">m</span> <span class=\"bp\">`</span> <span class=\"err\">•ᵣ</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">opposite</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">m</span>\n\n<span class=\"n\">class</span> <span class=\"n\">bimodule</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">B</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">biaction</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">M</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">semiring</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">A</span><span class=\"err\">ᵒᵖ</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">unop</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">],</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">bimodule</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">commutes</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">change</span> <span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"bp\">*</span> <span class=\"bp\">_</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span> <span class=\"n\">semiring</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"n\">y</span> <span class=\"err\">•ᵣ</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">•ᵣ</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">by</span> <span class=\"n\">simp_rw</span> <span class=\"n\">comm_mul_action</span><span class=\"bp\">.</span><span class=\"n\">commutes</span>\n</code></pre></div>",
        "id": 206144262,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596722344
    },
    {
        "content": "<p><code>notation m ` •ᵣ `:72 a:72 := (opposite.op a) • m</code> - this doesn't strike me as correct - don't you need <code>(opposite.unop (opposite.op a) • (opposite.op m))</code>?</p>\n<p>i.e., flip both arguments and the order of multiplication, then flip the result back</p>",
        "id": 206146313,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596723213
    },
    {
        "content": "<p>I'm confused. Why? A right action is just a left action by the opposite ring.</p>",
        "id": 206147359,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596723695
    },
    {
        "content": "<p>My uninformed thinking was that maybe <code>α</code> needs to be made opposite too. Maybe the argument goes that <code>α</code> doesn't define any multiplicative operator so it doesn't matter</p>",
        "id": 206147916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596723927
    },
    {
        "content": "<p><code>α</code> has no multiplication so there is no need to <code>opposite</code> it.</p>",
        "id": 206166054,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596732241
    },
    {
        "content": "<p>Note that <code>comm_mul_action</code> can be used for something else than bimodules. E.g., a group representation is a <code>mul_action</code> on a vector space that commutes with the action of the field (though this doesn't help us study the set of all representations).</p>",
        "id": 206166339,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596732367
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Bimodules/near/206166054\">said</a>:</p>\n<blockquote>\n<p><code>α</code> has no multiplication so there is no need to <code>opposite</code> it.</p>\n</blockquote>\n<p>There's no <code>has_mul α</code> in that context, but what if there is in a consumer?</p>",
        "id": 206169414,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1596733791
    },
    {
        "content": "<p>I'm the case of an algebra, the multiplication from the base ring commutes with everything anyway, so it shouldn't matter.</p>",
        "id": 206170642,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596734397
    },
    {
        "content": "<p>Is this the example you have in mind?</p>",
        "id": 206170805,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1596734470
    },
    {
        "content": "<p>I think we should revisit this. I've been discussing bimodule implementation at <a href=\"#narrow/stream/144837-PR-reviews/topic/4770.20smul_comm_class\">https://leanprover.zulipchat.com/#narrow/stream/144837-PR-reviews/topic/4770.20smul_comm_class</a> with <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 220741049,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608676162
    },
    {
        "content": "<p>my work so far is at <a href=\"https://github.com/leanprover-community/mathlib/tree/bimodule\">branch#bimodule</a></p>",
        "id": 220741060,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608676171
    },
    {
        "content": "<p>Can you define <code>subbimodule R M := submodule (R × opposite R) M</code> and reuse most of the theory about submodules?</p>",
        "id": 220741267,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608676301
    },
    {
        "content": "<p>I'll try that. Should I also try defining <code>bimodule</code>s that way from the beginning, or just provide a <code>module (A × opposite B) M</code> instance given<code>bimodule A B M</code>?</p>",
        "id": 220742426,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608676772
    },
    {
        "content": "<p>I guess that last question is about equivalent to \"should bimodules be mixins?\"</p>",
        "id": 220742563,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608676814
    },
    {
        "content": "<p>We should have a <code>semimodule (R × S) M</code> instance given <code>semimodule R M</code>, <code>semimodule S M</code>, and <code>smul_comm_class R S M</code>.</p>",
        "id": 220742631,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608676873
    },
    {
        "content": "<p>I don't know if the last few comments use the Cartesian product just because of Unicode input problems with zulip, but it's important to note that a bimodule is a module over the tensor product not the Cartesian product (distributivity won't work correctly with Cartesian product).</p>",
        "id": 220743662,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1608677631
    },
    {
        "content": "<p>Hrmm, we are climbing up the import tree quickly</p>",
        "id": 220744060,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608677916
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> It's because I made a stupid mistake.</p>",
        "id": 220744107,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608677957
    },
    {
        "content": "<p>BTW, should we redefine <code>submodule</code>s based on a <code>distrib_mul_action</code> instead of a <code>semimodule</code>?</p>",
        "id": 220744227,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1608678042
    },
    {
        "content": "<p>Yeah, this is getting impractical for basic definitions, in part because our tensor products require commutativity, and a lot of the point of bimodules requires noncommutative scalars</p>",
        "id": 220744269,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608678083
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Bimodules/near/220744227\">said</a>:</p>\n<blockquote>\n<p>BTW, should we redefine <code>submodule</code>s based on a <code>distrib_mul_action</code> instead of a <code>semimodule</code>?</p>\n</blockquote>\n<p>I don't see why not. Nothing breaks immediately.</p>",
        "id": 220744385,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608678155
    },
    {
        "content": "<p>wait, the commutativity requirement might not be necessary, let me check</p>",
        "id": 220744471,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608678229
    },
    {
        "content": "<p>Yeah, I think commutativity isn't necessary, but subtraction totally is</p>",
        "id": 220744911,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608678593
    },
    {
        "content": "<p>I'm ok only defining <code>subbimodule</code>s for actual <code>bimodule</code>s and not <code>bisemimodule</code>s</p>",
        "id": 220744980,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608678626
    },
    {
        "content": "<p>I hope that whatever ends up happening is built on top of some kind of bi-<code>mul_action</code>s so we don't have to reinvent those later. That probably rules out approaches based on the tensor product (which likely weren't that viable anyways).</p>",
        "id": 220746999,
        "sender_full_name": "Reid Barton",
        "timestamp": 1608680265
    },
    {
        "content": "<p>I think the tensor product might be viable for defining <code>subbimodule</code>s - not really for <code>bimodule</code>s themselves.</p>",
        "id": 220747958,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608681005
    },
    {
        "content": "<p>As to bi-<code>mul_action</code>, I think the implementation would just be to assume two separate <code>mul_action</code>s and then a <code>smul_comm_class</code>, which we already have</p>",
        "id": 220748118,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608681159
    },
    {
        "content": "<p>Unless you mean implementing <code>sub_bi_mul_action</code></p>",
        "id": 220749309,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608682085
    },
    {
        "content": "<p>In which case I think there would be a diamond to deal with</p>",
        "id": 220749582,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1608682358
    }
]