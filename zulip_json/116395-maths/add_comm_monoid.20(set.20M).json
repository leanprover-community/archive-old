[
    {
        "content": "<p>The constructor for <code>add_comm_monoid</code> is non-canonical because it demands <code>zero_add</code>, which follows from the other axioms. I can fix this up by making my own custom constructor. But if I use my own constructor I lose the luxury of being able to write <code>{ add := (+), add_assoc := ...</code>, I have to feed the proofs in without saying what they're proofs of. What I write below is more readable (I want an addition on subsets of the reals), but I can't get it to compile, I want <code>zero_add</code> for free and I can't pull it off. Should I just give in and run the constructor on the proofs?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">z</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">Y</span><span class=\"o\">),</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">}</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">def</span> <span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">▸</span> <span class=\"n\">add_zero</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"bp\">⟨</span>\n    <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">ab</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">add_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">bc</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"bp\">⟨</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">add_assoc</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span>\n  <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">O</span><span class=\"o\">,</span> <span class=\"n\">hO</span><span class=\"o\">,</span> <span class=\"n\">hxa</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton_iff</span> <span class=\"n\">at</span> <span class=\"n\">hO</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">hxa</span><span class=\"o\">,</span> <span class=\"n\">hO</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">],</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"bp\">⟨</span>\n    <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">zero_add</span> <span class=\"c1\">-- I can&#39;t fill in the holes</span>\n  <span class=\"c1\">-- with the proofs I just did?</span>\n  <span class=\"o\">}</span>\n</pre></div>",
        "id": 180925797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573933948
    },
    {
        "content": "<p>PS is this there already?</p>",
        "id": 180925800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573933957
    },
    {
        "content": "<p>I guess you are looking for <code>algebra.pointwise</code>?</p>",
        "id": 180926384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573934953
    },
    {
        "content": "<p>Or where is that file?</p>",
        "id": 180926386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573934958
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/61ccaf65c4cfc9c6ff103463342e034347eb8b89/src/algebra/pointwise.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/61ccaf65c4cfc9c6ff103463342e034347eb8b89/src/algebra/pointwise.lean\">https://github.com/leanprover-community/mathlib/blob/61ccaf65c4cfc9c6ff103463342e034347eb8b89/src/algebra/pointwise.lean</a></p>",
        "id": 180926393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573934981
    },
    {
        "content": "<p>So the only mention of <code>comm_monoid</code> is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">pointwise_mul_comm_semiring</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_⟩</span> <span class=\"o\">},</span>\n  <span class=\"bp\">..</span><span class=\"n\">pointwise_mul_semiring</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>But this means that <code>set M</code> is a comm_monoid if <code>M</code> is a <code>comm_monoid</code>. I should be able to magically <code>to_additive</code> this now somehow?</p>",
        "id": 180927581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573936936
    },
    {
        "content": "<p>No, I don't think that will work, because the conclusion doesn't have an additive version</p>",
        "id": 180927919,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573937593
    },
    {
        "content": "<p>I should just have made a commutative version of <a href=\"https://github.com/leanprover-community/mathlib/blob/61ccaf65c4cfc9c6ff103463342e034347eb8b89/src/algebra/pointwise.lean#L65\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/61ccaf65c4cfc9c6ff103463342e034347eb8b89/src/algebra/pointwise.lean#L65\">https://github.com/leanprover-community/mathlib/blob/61ccaf65c4cfc9c6ff103463342e034347eb8b89/src/algebra/pointwise.lean#L65</a> but I seem to not have done that</p>",
        "id": 180927925,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573937632
    },
    {
        "content": "<p>gotcha</p>",
        "id": 180928694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573938898
    },
    {
        "content": "<p>Why isn't this trivial to make from what you have made? There will be some map from <code>comm_semiring X</code> to <code>comm_monoid X</code> right?</p>",
        "id": 180928752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573938981
    },
    {
        "content": "<p>In <code>algebra/pointwise.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">pointwise_mul_comm_semiring</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">by</span> <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span><span class=\"o\">,</span> <span class=\"n\">mul_comm</span> <span class=\"bp\">_</span> <span class=\"bp\">_⟩</span> <span class=\"o\">},</span>\n  <span class=\"bp\">..</span><span class=\"n\">pointwise_mul_semiring</span> <span class=\"o\">}</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">pointwise_mul_semiring</span>\n\n<span class=\"c1\">-- new part here</span>\n<span class=\"c1\">-- can&#39;t get to_additive to work</span>\n<span class=\"c1\">--@[to_additive]</span>\n<span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">pointwise_mul_comm_semiring</span>\n</pre></div>\n\n\n<p>How do I get <code>@[to_additive]</code> to buy that? The error is</p>\n<div class=\"codehilite\"><pre><span></span>to_additive: can&#39;t transport set.foo to itself\n</pre></div>",
        "id": 180930565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573942607
    },
    {
        "content": "<p>Don't you love it when Kevin tries to edit mathlib</p>",
        "id": 180930576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573942658
    },
    {
        "content": "<p>I think the problem is that the name it would produce is the same, because <code>foo</code> doesn't contain any of the magic words</p>",
        "id": 180930619,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573942699
    },
    {
        "content": "<p>Did you see you get a mention in the natural number game within the context of magic words? Oh actually that might still be in the beta</p>",
        "id": 180930625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573942731
    },
    {
        "content": "<p>no...</p>",
        "id": 180930632,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573942745
    },
    {
        "content": "<p>very good</p>",
        "id": 180930639,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573942800
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"n\">where</span> <span class=\"c1\">-- namespace set</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">comm_monoid</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">pointwise_mul_comm_semiring</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">to_additive: can&#39;t transport set.comm_monoid to itself</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 180930681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573942811
    },
    {
        "content": "<p>So what is the magic word?</p>",
        "id": 180930683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573942822
    },
    {
        "content": "<p>I think you can put the name you want it to transform to after <code>to_additive</code></p>",
        "id": 180930687,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573942849
    },
    {
        "content": "<p>I don't know the whole list... usually things like <code>mul</code> or <code>one</code></p>",
        "id": 180930696,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573942865
    },
    {
        "content": "<p>Progress: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">add_comm_monoid</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">comm_monoid</span> <span class=\"o\">[</span><span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">comm_semiring</span><span class=\"bp\">.</span><span class=\"n\">to_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">pointwise_mul_comm_semiring</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  @pointwise_mul_comm_semiring α _inst_1</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  _inst_1</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  add_comm_monoid α</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  comm_monoid α</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>Does <code>to_additive</code> not move me from <code>comm_monoid</code> to <code>add_comm_monoid</code>?</p>",
        "id": 180930752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573942928
    },
    {
        "content": "<p>This is the sort of error that you get when <code>to_additive</code> needs more hints</p>",
        "id": 180930761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573942950
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> what am I doing wrong?</p>",
        "id": 180931047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573943413
    },
    {
        "content": "<p>I'm guessing <code>comm_semiring.to_comm_monoid</code> doesn't have a <code>to_additive</code> attribute with <code>comm_semiring.to_add_comm_monoid</code></p>",
        "id": 180931054,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573943454
    },
    {
        "content": "<p>I guess <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> is right.</p>",
        "id": 180931075,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1573943489
    },
    {
        "content": "<p>Which makes sense, because they're distinguished by more than just notation</p>",
        "id": 180931076,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573943494
    },
    {
        "content": "<p>But the fact that this correctly doesn't exist doesn't help me, because I'm trying to do something sensible, right?</p>",
        "id": 180931118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573943533
    },
    {
        "content": "<p>I have a map <code>comm_monoid α -&gt; comm_monoid (set α)</code> and now I want my map <code>add_comm_monoid α -&gt; add_comm_monoid (set α)</code> for free. Isn't that how life works?</p>",
        "id": 180931134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573943594
    },
    {
        "content": "<p>Maybe if you mark pointwise_mul_comm_semiring as <code>to_additive</code></p>",
        "id": 180931138,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573943630
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  @pointwise_mul_semiring α (@add_comm_monoid.to_add_monoid α _inst_1)\nterm\n  @add_comm_monoid.to_add_monoid α _inst_1\nhas type\n  add_monoid α\nbut is expected to have type\n  monoid α\n</pre></div>",
        "id": 180931185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573943666
    },
    {
        "content": "<p>But then it's not obvious to me which <code>add_comm_monoid</code>, structure you want.</p>",
        "id": 180931189,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573943673
    },
    {
        "content": "<p>Because there are two that makes sense, the additive one from the semiring and the multiplicative one from the semiring.</p>",
        "id": 180931199,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573943716
    },
    {
        "content": "<p>Yeah I don't think that I want a to_additive version of <code>pointwise_mul_comm_semiring</code></p>",
        "id": 180931200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573943721
    },
    {
        "content": "<p>I know what the additive version of <code>comm_monoid</code> is but I don't know what the additive version of <code>comm_semiring</code> is. Can I just manufacture this easily manually with ease using <code>additive</code> and <code>multiplicative</code> somehow and then sort out the attributes afterwards?</p>",
        "id": 180931255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573943814
    },
    {
        "content": "<p>Yeah, I think <code>additive</code>/<code>multiplicative</code> might be the way to go</p>",
        "id": 180931262,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573943844
    },
    {
        "content": "<p><code>attribute [to_additive set.add_comm_monoid] set.comm_monoid</code> or something?</p>",
        "id": 180931264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573943855
    },
    {
        "content": "<p><code>pointwise_mul_semiring</code> uses <code>sup</code> for addition, not pointwise <code>(+)</code>.</p>",
        "id": 180931306,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1573943903
    },
    {
        "content": "<p>right. There is no +</p>",
        "id": 180931308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573943922
    },
    {
        "content": "<p>But I don't care about this semiring</p>",
        "id": 180931312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573943937
    },
    {
        "content": "<p>I can make <code>set.comm_monoid</code> and now I want <code>set.add_comm_monoid</code> for free but I'm going to have to make it I think.</p>",
        "id": 180931318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573943972
    },
    {
        "content": "<p>You can try to define <code>set.comm_monoid</code> using <code>{ .. pointwise_mul_semiring }</code></p>",
        "id": 180931363,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1573944023
    },
    {
        "content": "<p>Not sure if it'll work</p>",
        "id": 180931366,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1573944036
    },
    {
        "content": "<p>As you can see, I already made the function in the first post in this thread. But I don't understand if this is a mathlib-acceptable approach.</p>",
        "id": 180931369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573944056
    },
    {
        "content": "<p>Another way is to split the definition of <code>pointwise_mul_semiring</code> into two steps: first define the multiplicative monoid, then the semiring.</p>",
        "id": 180931376,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1573944076
    },
    {
        "content": "<p>Is there a function <code>comm_monoid X -&gt; add_comm_monoid X</code> in mathlib</p>",
        "id": 180931383,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573944100
    },
    {
        "content": "<p>Aah the penny is dropping</p>",
        "id": 180931384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573944100
    },
    {
        "content": "<p>The point is that the algorithm can't handle the translation the way I want to do it because it goes via the semiring and the algorithm gets stuck?</p>",
        "id": 180931425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573944128
    },
    {
        "content": "<blockquote>\n<p>Is there a function <code>comm_monoid X -&gt; add_comm_monoid X</code> in mathlib</p>\n</blockquote>\n<p>There should be an equiv!</p>",
        "id": 180931428,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573944163
    },
    {
        "content": "<p>Look at <code>algebra/group/type_tags</code></p>",
        "id": 180931434,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1573944192
    },
    {
        "content": "<p>You can do a trick like <code>add_comm_monoid (set M) := show @add_comm_monoid (additive (set (multiplicative M))), by apply_instance</code>; didn't test</p>",
        "id": 180931495,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1573944291
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>tactic.mk_instance failed to generate instance for\n  add_comm_monoid (additive (set (multiplicative α)))\nstate:\nα : Type u_1,\n_inst_1 : add_comm_monoid α\n⊢ add_comm_monoid (additive (set (multiplicative α)))\n</pre></div>",
        "id": 180931518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573944352
    },
    {
        "content": "<p>is your original definition an instance?</p>",
        "id": 180931564,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573944393
    },
    {
        "content": "<p>My original definition isn't even in the file. I thought this was what we were trying to avoid.</p>",
        "id": 180931572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573944419
    },
    {
        "content": "<p>I mean <code>def comm_monoid [comm_monoid α] : comm_monoid (set α) :=</code></p>",
        "id": 180931633,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573944557
    },
    {
        "content": "<p>How do I figure out the name of <a href=\"https://github.com/leanprover-community/mathlib/blob/6ebb7e7884c9b11c137f5bb288cd80a46bc6dfac/src/algebra/group/type_tags.lean#L66\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/6ebb7e7884c9b11c137f5bb288cd80a46bc6dfac/src/algebra/group/type_tags.lean#L66\">this instance</a> painlessly?</p>",
        "id": 180931636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573944587
    },
    {
        "content": "<p>I'm betting <code>additive.add_comm_monoid</code></p>",
        "id": 180931702,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573944677
    },
    {
        "content": "<p>I don't need to know, I've finally got there thanks to the extensive help from the three of you.</p>",
        "id": 180931703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573944704
    },
    {
        "content": "<p>I don't know of a general method for finding that out painlessly. The best I know it to make a def of the same type, prove it with <code>apply_instance</code> and <code>#print</code> it.</p>",
        "id": 180931748,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573944763
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1696\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1696\">#1696</a></p>",
        "id": 180931934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573945137
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> for eventually getting me over the line.</p>",
        "id": 180931943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573945167
    },
    {
        "content": "<p>updated <a href=\"https://github.com/leanprover-community/mathlib/issues/1696\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1696\">#1696</a> after conversation which for some reason ended up <a href=\"#narrow/stream/113489-new-members/topic/Using.20data.2Erat/near/180932863\" title=\"#narrow/stream/113489-new-members/topic/Using.20data.2Erat/near/180932863\">in another thread</a></p>",
        "id": 180933414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573947914
    },
    {
        "content": "<p>Is there room for this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">add_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">+</span><span class=\"o\">),</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">▸</span> <span class=\"n\">add_zero</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>in mathlib? It's the correct constructor for <code>add_comm_monoid</code> where we don't ask for axioms which can be deduced from other axioms.</p>",
        "id": 180934078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573949093
    },
    {
        "content": "<p>Yes, I've wanted to see these sort of things for a while. As you've pointed out, it's a bit sad that you lose constructor notation. One way to fix that is to make a new structure with only these fields and a function to take it to <code>add_comm_monoid</code>. Compare with <code>nonneg_group</code> for making ordered groups</p>",
        "id": 180934144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573949232
    },
    {
        "content": "<p>However, I think it is a bad idea to make this auxiliary structure a class, because it just makes the instance hierarchy bigger</p>",
        "id": 180934187,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573949286
    },
    {
        "content": "<p>I see. So the user makes an auxiliary structure and then they register the resulting <code>add_comm_monoid</code> term with type class inference afterwards?</p>",
        "id": 180934194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573949359
    },
    {
        "content": "<p>right, they get a proof that looks like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span>\n<span class=\"n\">add_comm_monoid</span><span class=\"bp\">.</span><span class=\"n\">mk&#39;</span> <span class=\"o\">{</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">foo</span><span class=\"bp\">.</span><span class=\"n\">add_semigroup</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 180934268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573949480
    },
    {
        "content": "<p>gaargh I broke <code>measure_theory/outer_measure</code></p>",
        "id": 180935291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573951341
    },
    {
        "content": "<p>fixed</p>",
        "id": 180935501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573951788
    },
    {
        "content": "<p>Where does <code>add_comm_monoid.mk'</code> go? It seems to want to go in core.</p>",
        "id": 180935625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573952031
    },
    {
        "content": "<p>Is there an argument which says that these auxiliary structures should go in some new file? I remember now <a href=\"https://xenaproject.wordpress.com/2018/04/30/group-theory-revision/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2018/04/30/group-theory-revision/\">making such a better constructor for <code>group</code></a> and I bet I never PR'ed that.</p>",
        "id": 180935776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573952325
    },
    {
        "content": "<p>I seem to use <code>class has_group_notation (G : Type) extends has_mul G, has_one G, has_inv G</code></p>",
        "id": 180935782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573952378
    },
    {
        "content": "<p>Stuff about the algebraic hierarchy which \"should go in core\" is generally in the <code>algebra</code> folder. Missing theorems about groups and monoids are in <code>algebra.group</code></p>",
        "id": 180936136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573953121
    }
]