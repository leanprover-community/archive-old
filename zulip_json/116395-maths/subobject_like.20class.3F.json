[
    {
        "content": "<p>I'm wondering if it would make sense to add a <code>subobject_like</code> class extending <code>set_like</code> and providing a <code>complete_lattice</code> instance? (example code at the end of the message)</p>\n<p>My motivation is that I want to state a lemma like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⋃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"o\">((</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>that holds for <code>subgroup</code>s, <code>subalgebra</code>s, <code>intermediate_field</code>s, etc... It seems that the natural way to do this sort of thing would be to:</p>\n<ul>\n<li>Add a typeclass or predicate <code>has_directed_unions</code> saying \"you take can directed unions of this sort of subobject\"</li>\n<li>Prove <code>has_directed_unions</code> for <code>subgroup</code>, <code>subalgebra</code>, <code>intermediate_field</code>, etc...</li>\n<li>Prove the lemma assuming <code>has_directed_unions</code><br>\nBut I can't even state the lemma unless I know that the subobjects form a complete lattice. And I can't just add a <code>complete_lattice</code> instance as a hypothesis because it won't necessarily be compatible with the partial order from <code>set_like</code>. So would it make sense to add a typeclass extending <code>set_like</code> that bundles up the <code>galois_insertion</code> and gives the <code>complete_lattice</code> instance?</li>\n</ul>\n<p>Here's some code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set_like.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">subobject_like</span> <span class=\"kd\">extends</span> <span class=\"n\">set_like</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">gi</span> <span class=\"o\">:</span> <span class=\"n\">galois_insertion</span> <span class=\"n\">closure</span> <span class=\"n\">coe</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">subobject_like</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">subobject_like</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">h.gi.lift_complete_lattice</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">subobject_like</span>\n</code></pre></div>",
        "id": 289709047,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657880259
    },
    {
        "content": "<p>It makes more sense to me to prove those lemmas using any Galois insertion, rather than restricting to <code>set</code> + <code>set_like</code>  on one side.</p>",
        "id": 289709382,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657880509
    },
    {
        "content": "<p>Ah, of course. I'll give it a shot.</p>",
        "id": 289709458,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657880549
    },
    {
        "content": "<p>Well, actually it's not true for any Galois insertion.</p>",
        "id": 289709484,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657880573
    },
    {
        "content": "<p>I also need to know this <code>has_directed_unions</code> property.</p>",
        "id": 289709501,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657880594
    },
    {
        "content": "<p>But I suppose I could try to formulate that in terms of the Galois insertion too.</p>",
        "id": 289709515,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657880625
    },
    {
        "content": "<p>Maybe you want a directed complete partial order?</p>",
        "id": 289709663,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657880713
    },
    {
        "content": "<p>Well, I want to assume that the subobjects form a complete lattice, but that taking the <code>supr</code> of a directed subset is compatible with the Galois insertion.</p>",
        "id": 289709802,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657880806
    },
    {
        "content": "<p>In other words, that the supremum of a directed collection of subobjects equals the union of the directed collection of subobjects</p>",
        "id": 289709848,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657880849
    },
    {
        "content": "<p>I would assume the <code>has_directed_unions</code> is something like \"preserves filtered colimits\", so it should be able to be made into a predicate of an order preserving map?</p>",
        "id": 289710120,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657881045
    },
    {
        "content": "<p>I guess you could just add a definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">preserves_filtered_colimits</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_le</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_Sup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_Sup</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">directed_on</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⨆</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n</code></pre></div>\n<p>and prove <code>preserves_filtered_colimits coe</code> for <code>subgroup</code>s, <code>subalgebra</code>s, <code>intermediate_field</code>s, etc...</p>",
        "id": 289710596,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657881389
    },
    {
        "content": "<p>I agree that such a class would be nice; I found myself wanting it for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/direct_sum.is_internal_submodule_iff_independent_and_supr_eq_top\">docs#direct_sum.is_internal_submodule_iff_independent_and_supr_eq_top</a>, which I can't currently state in the generality of <code>add_subgroup_class</code> because that doesn't come with a lattice structure.</p>",
        "id": 289716412,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657885699
    }
]