[
    {
        "content": "<p>Is this expected behaviour?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.category.Profinite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">reflective</span> <span class=\"n\">Profinite.to_CompHaus.</span><span class=\"o\">{</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">reflective</span> <span class=\"n\">Profinite.to_CompHaus</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 226879548,
        "sender_full_name": "Calle Sönne",
        "timestamp": 1613681962
    },
    {
        "content": "<p>The error with this code hopfully will provide a better hint as to what's going wrong:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.category.Profinite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">reflective</span> <span class=\"n\">Profinite.to_CompHaus.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Profinite.to_CompHaus.reflective</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 226892226,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613686684
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"mi\">51</span><span class=\"o\">:</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">Profinite.to_CompHaus.reflective.</span><span class=\"o\">{</span><span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">reflective.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n    <span class=\"n\">Profinite.to_CompHaus.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">((</span><span class=\"n\">max</span> <span class=\"bp\">?</span><span class=\"n\">l_1</span> <span class=\"bp\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">reflective.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Profinite.to_CompHaus.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 226892250,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613686698
    },
    {
        "content": "<p>This works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.category.Profinite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">reflective</span> <span class=\"n\">Profinite.to_CompHaus.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">Profinite.to_CompHaus.reflective.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 226892549,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613686873
    },
    {
        "content": "<p>Right, so it looks like <code>Profinite.to_CompHaus.reflective</code> has the following type with full universe annotation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Profinite.to_CompHaus.reflective.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">reflective.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Profinite.to_CompHaus.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 226892960,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613687112
    },
    {
        "content": "<p>Whereas:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Profinite.to_CompHaus.reflective.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">reflective.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Profinite.to_CompHaus.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 226893100,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613687192
    },
    {
        "content": "<p>Why does <code>Profinite.to_CompHaus.reflective</code> have two universe variables to begin with?</p>",
        "id": 226895290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613688425
    },
    {
        "content": "<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/Profinite.to_CompHaus\">docs#Profinite.to_CompHaus</a> is to blame for that</p>",
        "id": 226895632,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613688615
    },
    {
        "content": "<p>Oh, I see, it allows different universe levels for the source and target.</p>",
        "id": 226895676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613688643
    },
    {
        "content": "<p><code>def CompHaus.to_Profinite : CompHaus ⥤ Profinite := ...</code></p>",
        "id": 226895690,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613688649
    },
    {
        "content": "<p>Yeah, but:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"mi\">121</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">CompHaus.to_Profinite.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">CompHaus.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span> <span class=\"bp\">⥤</span> <span class=\"n\">Profinite.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 226895709,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613688661
    },
    {
        "content": "<p>oh!</p>",
        "id": 226895745,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613688685
    },
    {
        "content": "<p>lame :-)</p>",
        "id": 226895748,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613688687
    },
    {
        "content": "<p>Indeed</p>",
        "id": 226895754,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613688691
    },
    {
        "content": "<p>I'm a bit surprised it's not </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">CompHaus.to_Profinite.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">CompHaus.</span><span class=\"o\">{</span><span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"bp\">⥤</span> <span class=\"n\">Profinite.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">)}</span>\n</code></pre></div>",
        "id": 226895843,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613688727
    },
    {
        "content": "<p>(or something similaar)</p>",
        "id": 226895852,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613688732
    },
    {
        "content": "<p>Would that be more useful than just a constant universe level?</p>",
        "id": 226895988,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613688818
    },
    {
        "content": "<p>I'm generally wary of adding universe lifts in the midst of something else.</p>",
        "id": 226896046,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613688843
    },
    {
        "content": "<p>I don't know. Certainly the current version may as well restrict to the same universe level</p>",
        "id": 226896062,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613688844
    },
    {
        "content": "<p>I suspect this is the source of the original issue anyway</p>",
        "id": 226896118,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613688871
    },
    {
        "content": "<p>Ok, I'm fixing.</p>",
        "id": 226896278,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613688972
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6300\">#6300</a></p>",
        "id": 226896327,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613689005
    },
    {
        "content": "<p>Hmmm.... it looks like the original issue remains even with this change</p>",
        "id": 226896596,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613689131
    },
    {
        "content": "<p>With this change it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The category of profinite sets is reflective in the category of compact hausdroff spaces -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">Profinite.to_CompHaus.reflective</span> <span class=\"o\">:</span> <span class=\"n\">reflective</span> <span class=\"n\">Profinite.to_CompHaus</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_is_right_adjoint</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">CompHaus.to_Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">},</span> <span class=\"n\">Profinite.to_Profinite_adj_to_CompHaus</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 226896671,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613689187
    },
    {
        "content": "<p>Or with this one:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">Profinite.to_CompHaus_equivalence</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">CompHaus.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">Profinite.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">CompHaus.to_Profinite_obj</span> <span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⟶</span> <span class=\"n\">Profinite.to_CompHaus.obj</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f.1</span> <span class=\"bp\">∘</span> <span class=\"n\">quotient.mk</span><span class=\"o\">,</span>\n    <span class=\"n\">continuous_to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">continuous.comp</span> <span class=\"n\">f.2</span> <span class=\"o\">(</span><span class=\"n\">continuous_quotient_mk</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">continuous.connected_components_lift</span> <span class=\"n\">g.2</span><span class=\"o\">,</span>\n      <span class=\"n\">continuous_to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">continuous.connected_components_lift_continuous</span> <span class=\"n\">g.2</span><span class=\"o\">},</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">continuous_map.ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">quotient.induction_on</span> <span class=\"n\">x</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">continuous_map.ext</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 226897016,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613689340
    },
    {
        "content": "<p>I like the second one. Shall I add it to the PR?</p>",
        "id": 226898417,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1613690141
    },
    {
        "content": "<p>Sounds good to me ( I commented on github also )</p>",
        "id": 226898526,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1613690193
    }
]