[
    {
        "content": "<p>Hello everyone, I've been playing around with cardinal numbers in Lean 3 as practice, and I've run into an error that I don't understand. I have the following situation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finite.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal.basic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">cardinal</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nat_eq_fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- this part works, implementation omitted</span>\n\n<span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"n\">κ</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">quot.lift_on</span> <span class=\"n\">κ</span> <span class=\"n\">finite</span> <span class=\"o\">(</span><span class=\"gr\">sorry</span> <span class=\"c\">/-</span><span class=\"cm\">also works-/</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.finite</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finite</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">nat_finite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.finite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat_eq_fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"c1\">-- error</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">cardinal</span>\n</code></pre></div>\n<p>The error I get is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"bp\">↑</span><span class=\"n\">n</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">↑</span><span class=\"n\">n.finite</span>\n</code></pre></div>\n<p>I don't understand why the rewrite fails, the pattern should be exactly present in the goal. There is as far as I know only one coercion from nat to cardinal. Could anyone point me in the right direction?</p>",
        "id": 285983021,
        "sender_full_name": "Roselyn Baxter",
        "timestamp": 1655150885
    },
    {
        "content": "<p>It's a universe issue I think.</p>",
        "id": 285983380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655151080
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">nat_finite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.finite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat_eq_fin</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 285983634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655151215
    },
    {
        "content": "<p>In <code>nat_finite</code> the universe level of <code>n : cardinal</code> is inferred as arbitrary, while in <code>nat_eq_fin</code> it has to be <code>cardinal.{0}</code> because that's where <code>#(fin n)</code> lives.</p>",
        "id": 285983714,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655151247
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Strange.20error.20in.20rewriting.20a.20cardinal.20term/near/285983380\">said</a>:</p>\n<blockquote>\n<p>It's a universe issue I think.</p>\n</blockquote>\n<p>Oh, you're absolutely right! Changing <code>(n : cardinal)</code> to <code>(n : cardinal.{0})</code> in both definitions makes it work. I was hoping I was gonna be able to ignore universes, but I guess I'll need to learn how the lift function works &gt;:/</p>",
        "id": 285983746,
        "sender_full_name": "Roselyn Baxter",
        "timestamp": 1655151265
    },
    {
        "content": "<p>I figured it out by doing this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">--set_option pp.all true</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">nat_finite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cardinal.finite</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">cardinal</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">nat_eq_fin</span> <span class=\"n\">n</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"c1\">-- ↑n.finite = ↑n.finite</span>\n    <span class=\"c1\">-- refl -- fails</span>\n    <span class=\"c1\">-- now uncomment `set_option pp.all true`</span>\n    <span class=\"c1\">-- and observe that the universes don't match up</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 285983869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655151335
    },
    {
        "content": "<p>Reid figured it out by pure thought ;-)</p>",
        "id": 285983903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655151354
    },
    {
        "content": "<p><code>cardinal</code> is clearly not in the area of math where you can ignore size issues.</p>",
        "id": 285983907,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1655151355
    },
    {
        "content": "<p>I was pretty confused though until you mentioned universes.</p>",
        "id": 285983969,
        "sender_full_name": "Reid Barton",
        "timestamp": 1655151368
    }
]