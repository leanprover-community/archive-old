[
    {
        "content": "<p>Which is the best way to say a natural number is not zero? <code>0 &lt; n</code> or <code>n ≠ 0</code>? I think the second. I'm considering a refactor to switch to the second; the first seems to be the standard way right now. Usually you prove <code>0 &lt; n</code>, by assuming <code>n = 0</code> and deriving a contradiction.</p>",
        "id": 171951611,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564411594
    },
    {
        "content": "<blockquote>\n<p>Which is the best way to say a natural number is not zero? <code>0 &lt; n</code> or <code>n ≠ 0</code>? I think the second. I'm considering a refactor to switch to the second; the first seems to be the standard way right now. Usually you prove <code>0 &lt; n</code>, by assuming <code>n = 0</code> and deriving a contradiction.</p>\n</blockquote>\n<p>I like the latter more (hence why I used it in the PR you are reviewing ;) )</p>",
        "id": 171953507,
        "sender_full_name": "Kevin Kappelmann",
        "timestamp": 1564412670
    },
    {
        "content": "<p>To muddy the waters more, I have noticed that <span class=\"user-mention\" data-user-id=\"127148\">@Joe</span> likes to state theorems of the form <code>P (n+1)</code>.</p>\n<p>I think it would be good to uniformize on <code>n ≠ 0</code>. It would be nice if an auto tactic could try a few obvious things to dispel that goal and otherwise leave it for the user to solve, but I don't know if there is a nice way to achieve that. We could cook up a crazy notation like <code>!!ne0</code> for <code>by show_ne_zero</code>.</p>",
        "id": 171959914,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1564416851
    },
    {
        "content": "<p>I think we should refactor and have nat starting at 1.</p>",
        "id": 171959950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564416876
    },
    {
        "content": "<p>Maybe Joe should be using pnat?</p>",
        "id": 171959973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564416900
    },
    {
        "content": "<p>There are lots of old logic papers that take the natural numbers to start at 1. Computer scientists sometimes start their books with Chapter 0. I number my n-tuples t_0, t_1, ..., t_{n-1} because then I can say \"for every i &lt; n, ... t_i ...\". (It could be worse. Set theorists sometimes use <code>i \\in n</code> for <code>i &lt; n</code>, because of course the natural numbers are transitive ordinals.) </p>\n<p>I don't know whether it would help Joe to use <code>pnat</code>, but I would guess not.</p>",
        "id": 171960255,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1564417130
    },
    {
        "content": "<p>I think I would use them more if they were defined recursively a la peano, but then of course you'd have to reprove all the simp lemmas.</p>",
        "id": 171960309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564417180
    }
]