[
    {
        "content": "<p>Does the canonical ring homomorphism from <code>int</code> to a ring <code>R</code> already have a name in Lean?</p>",
        "id": 130132971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532328972
    },
    {
        "content": "<p>something something <code>int.coe</code></p>",
        "id": 130132977,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532328999
    },
    {
        "content": "<p><code>int.cast</code></p>",
        "id": 130132982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532329022
    },
    {
        "content": "<p>Aah, of course. And do we already know that this is a ring hom?</p>",
        "id": 130133232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532329440
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast</span><span class=\"bp\">.</span><span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_add</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_add</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">map_one</span> <span class=\"o\">:=</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 130133599,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532330048
    },
    {
        "content": "<p>now you know</p>",
        "id": 130133600,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532330050
    },
    {
        "content": "<p>(Sorry, I got distracted by other stuff.) Anyway, I'm not surprised that it is a 4-liner. It is just that I don't know how to figure out if this is somewhere in mathlib or not...</p>",
        "id": 130135077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532332681
    },
    {
        "content": "<p>it is not, but kenny is pointing out that all the theorems are already there</p>",
        "id": 130135209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532332831
    },
    {
        "content": "<blockquote>\n<p>(Sorry, I got distracted by other stuff.) Anyway, I'm not surprised that it is a 4-liner. It is just that I don't know how to figure out if this is somewhere in mathlib or not...</p>\n</blockquote>\n<p>You can check to see if Lean's type class inference system already knows a fact by seeing if you can prove it with <code>by apply_instance</code>. Of course this does not tell you whether the proof is in mathlib in a file you didn't import yet...</p>",
        "id": 130135926,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532333987
    },
    {
        "content": "<p>True, I keep forgetting that trick.</p>",
        "id": 130136073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532334149
    },
    {
        "content": "<p>I used it extensively over the weekend in the middle of code just to make sure that type class inference was keeping up with what I was trying to do</p>",
        "id": 130137120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532335803
    },
    {
        "content": "<p>Just debugging lines which I'd delete after, checking my quotient group instances were working</p>",
        "id": 130137155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532335906
    }
]