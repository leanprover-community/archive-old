[
    {
        "content": "<p>TL;DR: <a href=\"https://github.com/b-mehta/lean-experiments/blob/master/src/kruskal_katona_abstract.lean\" target=\"_blank\" title=\"https://github.com/b-mehta/lean-experiments/blob/master/src/kruskal_katona_abstract.lean\">An abstracted version of my problem is here</a>, I'd like to prove the theorem at the bottom and I can't seem to make any serious progress.<br>\nA bit more detail on the problem: we're interested in families 𝒜 of subsets of X={1,...,n} (and each subset has size r) and we'd like to minimise a packing-like quantity: the size of its shadow. (The definitions of these things shouldn't matter for this; the types are in the link above, and the <a href=\"https://github.com/b-mehta/lean-experiments/blob/master/src/kruskal_katona_rewrite.lean\" target=\"_blank\" title=\"https://github.com/b-mehta/lean-experiments/blob/master/src/kruskal_katona_rewrite.lean\">actual definitions are here</a>, if they're needed. I think I've put all the necessary lemmas in the abstracted version though.)<br>\nThe goal is to prove that among families of a fixed size, the minimum size of shadow is attained at a particular family (I'll call this C). To do this, we apply \"compressions\": applying a compression keeps the family the same size and (weakly) decreases the size of its shadow (under certain conditions), and makes the family look a little bit more like C. (Compressions are also idempotent)<br>\nWhat are these conditions? Compressing using the (fin)sets (U,V) (where |U| = |V|) will decrease the size of the shadow of 𝒜 if 𝒜 is already compressed with respect to every pair (U₁,V₁) such that |U₁| &lt; |U| (again, |U₁|=|V₁|). <br>\nAlso, applying a (U,V) compression strictly decreases a particular quantity which I've called the c_measure.<br>\nPutting all this together, we get the following lemma</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">compression_improved</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">𝒜</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">gamma</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U₁</span> <span class=\"n\">V₁</span><span class=\"o\">,</span> <span class=\"n\">gamma</span> <span class=\"n\">U₁</span> <span class=\"n\">V₁</span> <span class=\"bp\">∧</span> <span class=\"n\">U₁</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">&lt;</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">→</span> <span class=\"n\">is_compressed</span> <span class=\"n\">U₁</span> <span class=\"n\">V₁</span> <span class=\"err\">𝒜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₃</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">is_compressed</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"err\">𝒜</span><span class=\"o\">):</span>\n  <span class=\"n\">c_measure</span> <span class=\"o\">(</span><span class=\"n\">compress_family</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"err\">𝒜</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c_measure</span> <span class=\"err\">𝒜</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">compress_family</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"err\">𝒜</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"err\">𝒜</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"err\">∂</span> <span class=\"n\">compress_family</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"err\">𝒜</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">∂𝒜</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>(<code>gamma</code> is a relation which essentially says it's worthwhile to compress using this pair - one of the things in gamma is that |U|=|V|) (∂ is notation for the shadow).<br>\nI'll state also the theorem I'd like to prove from this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">kruskal_katona_helper</span> <span class=\"o\">(</span><span class=\"err\">𝒜</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ℬ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)),</span> <span class=\"err\">𝒜</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">ℬ</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"err\">∂</span><span class=\"n\">ℬ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"err\">∂𝒜</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">gamma</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"bp\">→</span> <span class=\"n\">is_compressed</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">ℬ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>(I'll prove later that ℬ satisfying the last condition means that it is exactly C, but this will do for now.)<br>\nThe maths proof looks something like this. Set 𝒜_0 = 𝒜, and we'll construct a (finite) sequence 𝒜_n. If 𝒜_k is already compressed with respect to all (U,V) in gamma, stop. If not, choose (U,V) in gamma such that  𝒜_k isn't (U,V)-compressed, with |U| minimal, and set 𝒜_(k+1) to be the (U,V)-compression of 𝒜_k. This process terminates, since the c_measure is strictly decreasing (and it's always a natural number). Then set ℬ as the final element of this sequence, and we're done.</p>\n<p>This doesn't seem too hard, but I'm pretty muddled on how to prove this in lean. Actually constructing the sequence seems wrong - I'd have to prove that it'll terminate and it's not clear how (I'd kinda like something like Haskell's <code>unfoldr</code>, maybe?). There's the stuff about well founded relations, but I only get stuff about the compression being better if |U| was picked carefully. It's also not immediate that if you (U,V)-compress, then (U',V')-compress then you're still (U,V)-compressed, so inducting on the size of |U| wouldn't work either. Any help appreciated</p>",
        "id": 183471534,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576383323
    },
    {
        "content": "<p>It sounds like you want to use (strong?) induction on whatever c_measure is</p>",
        "id": 183471664,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576383540
    },
    {
        "content": "<p>I couldn't get that to work because of the thing I mention in the last paragraph - we've got to choose |U| minimal at each stage</p>",
        "id": 183471682,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576383574
    },
    {
        "content": "<p>As far as I can see, that is a separate concern</p>",
        "id": 183471842,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576383779
    },
    {
        "content": "<p>Unless there is some detail I'm missing. When you construct your sequence, do you need anything about the previous A_k (other than it came from A by some sequence of compressions)?</p>",
        "id": 183471858,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576383811
    },
    {
        "content": "<p>It looks like you should be able to prove the following statement by induction on <code>n : nat</code>: if A is any family with <code>c_measure A = n</code>, then ...</p>",
        "id": 183471906,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576383867
    },
    {
        "content": "<p>Ah I see - yeah I could construct the sequence without the fact that the previous compressions were chosen carefully, but how would I prove anything about the sequence?</p>",
        "id": 183471912,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576383893
    },
    {
        "content": "<p>Don't actually construct the sequence</p>",
        "id": 183471919,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576383920
    },
    {
        "content": "<p>Sure, I'd construct the thing I want to be B using strong induction, but even then how would I prove things about the result?</p>",
        "id": 183471928,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576383961
    },
    {
        "content": "<p>Well, for example, if n = 0, then you would learn that there can't be any U V for which A is not compressed</p>",
        "id": 183471989,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576384028
    },
    {
        "content": "<p>More generally, either (what I wrote above) or there exists A' obtained by applying some compression with a smaller c_measure, and then apply the inductive hypothesis to A'</p>",
        "id": 183472047,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576384119
    },
    {
        "content": "<blockquote>\n<p>Sure, I'd construct the thing I want to be B using strong induction, but even then how would I prove things about the result?</p>\n</blockquote>\n<p>Oh I see. This is not quite what I was suggesting.<br>\nInstead modify the statement of <code>kruskal_katona_helper</code> to <code>(n : nat) (A : finset (finset X)) (hn : c_measure A = n) : ...</code></p>",
        "id": 183472117,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576384233
    },
    {
        "content": "<p>Try to apply a compression step, if there's none you can apply, use A as B, else you get A' with smaller c_measure, apply the induction hypothesis and use its B as B.</p>",
        "id": 183472133,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576384279
    },
    {
        "content": "<p>This makes sense, thanks!</p>",
        "id": 183472141,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576384301
    },
    {
        "content": "<p>I'll give it a go now</p>",
        "id": 183472190,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576384344
    },
    {
        "content": "<p>In that case, the fancier but basically equivalent way is to prove <code>kruskal_katona_helper</code> directly by well-founded induction on the order induced by <code>c_measure</code></p>",
        "id": 183472199,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576384369
    },
    {
        "content": "<p>I think I see where I got stuck - I was trying to use the well-founded fixpoint and getting myself confused</p>",
        "id": 183472245,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576384442
    },
    {
        "content": "<p>We often naturally express proofs like this as a construction but sometimes it can be more convenient to reformulate the proof to avoid the construction for the purpose of formalization</p>",
        "id": 183472282,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576384522
    },
    {
        "content": "<p>Yeah I realised construction wasn't the right way to do this in lean but I couldn't get what the right way was</p>",
        "id": 183472326,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576384569
    },
    {
        "content": "<p>Separating out the minimality of |U| as a concern from <code>c_measure</code> was a key point I missed though</p>",
        "id": 183472334,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576384618
    },
    {
        "content": "<p>I've got the line <code>by_cases (∃ U V, gamma U V ∧ ¬ is_compressed U V A),</code>, and it doesn't like this because the type of the expression isn't decidable - I can use classical logic but it doesn't seem right to just assert locally that the expression I want is decidable. Instead, <code>U</code> and <code>V</code> range over a finite set, not being compressed is definitely decidable and <code>gamma</code> looks like <code>∃ (HU : U ≠ ∅), ∃ (HV : V ≠ ∅), {decidable stuff using HU and HV} as argument</code>, so this thing should be decidable... How can I show this? I've found the definition of decidable and decidable_rel, but it seems like there should be some lemmas to help me out</p>",
        "id": 183472837,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576385466
    },
    {
        "content": "<p>And now I'm getting deterministic timeouts on a small file...</p>",
        "id": 183473117,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576386054
    },
    {
        "content": "<p>That can be because you've made a slip and unification can be going crazy with the wrong idea about something instead of failing quickly</p>",
        "id": 183482401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576405539
    },
    {
        "content": "<p>Accidentally coercing an int to a nat used to cause timeouts</p>",
        "id": 183482445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576405576
    },
    {
        "content": "<p>Is there a neat way to get the argmin of a function on a finset?</p>",
        "id": 183490872,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576421202
    },
    {
        "content": "<blockquote>\n<p>That can be because you've made a slip and unification can be going crazy with the wrong idea about something instead of failing quickly</p>\n</blockquote>\n<p>Any suggestions on where the slip is here?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fintype</span>\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">X</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">fin</span> <span class=\"n\">n</span>\n\n<span class=\"n\">def</span> <span class=\"n\">gamma</span> <span class=\"o\">:</span> <span class=\"n\">rel</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">HU</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span><span class=\"o\">),</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">HV</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">≠</span> <span class=\"err\">∅</span><span class=\"o\">),</span> <span class=\"n\">disjoint</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"bp\">∧</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">V</span> <span class=\"bp\">∧</span> <span class=\"n\">max&#39;</span> <span class=\"n\">U</span> <span class=\"n\">HU</span> <span class=\"bp\">&lt;</span> <span class=\"n\">max&#39;</span> <span class=\"n\">V</span> <span class=\"n\">HV</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">thing</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable</span> <span class=\"o\">(</span><span class=\"n\">gamma</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">gamma</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">exists_prop_decidable</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 183492014,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576423083
    },
    {
        "content": "<p>(got it!)</p>",
        "id": 183492457,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576423972
    },
    {
        "content": "<p>Got this lemma done! Thanks so much Reid</p>",
        "id": 183493703,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576426111
    },
    {
        "content": "<p>what was the issue with the code above, out of curiosity?</p>",
        "id": 183493706,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576426130
    },
    {
        "content": "<p>There wasn't an instance of <code>decidable (disjoint U V)</code>, and so typeclass resolution failed for one of the hypotheses of <code>exists_prop_decidable</code></p>",
        "id": 183494545,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576427221
    },
    {
        "content": "<p>Adding that instance in (I'll PR it to mathlib soon) made it work</p>",
        "id": 183494555,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1576427233
    }
]