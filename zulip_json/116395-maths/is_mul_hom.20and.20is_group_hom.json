[
    {
        "content": "<p>Hi, is there any reason why <code>is_group_hom</code> does not extend <code>is_mul_hom</code>?<br>\nBTW, they use slightly different <code>map_mul</code> types (explicit vs implicit arguments).</p>",
        "id": 169357548,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1561935827
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> The reason is history. <code>is_mul_hom</code> was added only very recently. And there was no big refactor, as maybe there should have been.</p>",
        "id": 169361781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561944148
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Thank you for the explanation.</p>",
        "id": 169373918,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1561965904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Probably I'll try to merge <code>is_mul_hom</code> with <code>is_group_hom</code> (I mean, make <code>is_group_hom</code> extend <code>is_mul_hom</code>). Which version of <code>map_mul</code> do you prefer: <code>∀ x y, ...</code> or <code>∀ {x y}, ...</code>?</p>",
        "id": 169723417,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562346974
    },
    {
        "content": "<p><code>∀ x y, ...</code></p>",
        "id": 169723455,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562347041
    },
    {
        "content": "<p>Personally I don't think they should be different things.</p>",
        "id": 169723471,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562347075
    },
    {
        "content": "<p>It just means you have to duplicate a lot of proofs.</p>",
        "id": 169723530,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562347094
    },
    {
        "content": "<p>It seems similar to <code>vector_space</code> vs <code>module</code></p>",
        "id": 169723564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562347131
    },
    {
        "content": "<p>the definition isn't different, just the constraints</p>",
        "id": 169723582,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562347149
    },
    {
        "content": "<p>But why add constraints?</p>",
        "id": 169723591,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562347165
    },
    {
        "content": "<p>I'm not saying what is better, and actually I forget what we did for <code>vector_space</code></p>",
        "id": 169723612,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562347196
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I guess, it improves readability. If you see <code>[group α] [group β] (f : α → β) (h : is_mul_hom f)</code>, you have to know that any <code>is_mul_hom</code> plays nice with <code>1</code> and <code>inv</code> to understand the text. However, <code>(h : is_group_hom f)</code> makes is much easier to read.</p>",
        "id": 169723900,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562347487
    },
    {
        "content": "<p>it could be a notation</p>",
        "id": 169723927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562347535
    },
    {
        "content": "<p>I am not a big fan of when \"readability\" makes my proofs harder</p>",
        "id": 169723989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562347567
    },
    {
        "content": "<p>or I have to do a bunch of boilerplate to support what is effectively notation</p>",
        "id": 169724007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562347601
    },
    {
        "content": "<p>Given instances <code>is_monoid_hom.to_is_mul_hom</code> and <code>is_mul_hom.to_is_monoid_hom [group β]</code>, will Lean enter a loop?</p>",
        "id": 169724155,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562347768
    },
    {
        "content": "<p>yes</p>",
        "id": 169724220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562347805
    },
    {
        "content": "<p>Then we have a reason for <code>is_group_hom</code> to exist.</p>",
        "id": 169724245,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562347829
    },
    {
        "content": "<p>fair point</p>",
        "id": 169724287,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562347918
    },
    {
        "content": "<p>Right... the fact that <code>is_group_hom</code> is just an <code>is_mul_hom</code> is a coincidence.</p>",
        "id": 169725650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562349448
    },
    {
        "content": "<p>But in case of <code>vector_space</code> I can't think of such a reason. I would be happy to see it go away.</p>",
        "id": 169725655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562349468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , could you please have another look at <a href=\"https://github.com/leanprover-community/mathlib/issues/1164\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1164\">#1164</a>? It's a step towards making <code>is_group_hom</code> extend <code>is_mul_hom</code>.</p>",
        "id": 169728737,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562352521
    },
    {
        "content": "<p>Thanks for reminding me <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <br>\nIt's on the merge queue now.</p>",
        "id": 169729007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562352829
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 169729072,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562352855
    },
    {
        "content": "<p>Hi, I'm making <code>is_semiring_hom</code> and <code>is_ring_hom</code> extend <code>is_add_monoid_hom</code> etc.<br>\nI have a few choices:<br>\n1. Add <code>map_mul</code> and friends to the root namespace as <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  suggested <a href=\"https://github.com/leanprover-community/mathlib/pull/1214#pullrequestreview-260461482\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1214#pullrequestreview-260461482\">here</a>. This way <code>map_add</code> conflicts with <code>multiset.map_add</code> (so I have to explicitly add <code>_root_.map_add</code> or <code>multiset.map_add</code>) and <code>map_inv</code> conflicts with its version for fields.<br>\n2. Use <code>is_mul_hom.map_mul</code>, <code>is_monoid_hom.map_one</code>, <code>is_group_hom.map_inv</code>. This way users have to know which class defines <code>map_mul</code> etc.<br>\n3. Use <code>export (is_mul_hom) map_mul</code> etc. This way it should be possible to use <code>is_ring_hom.map_add</code> etc unless you want to provide <code>[is_ring_hom f]</code> argument explicitly; then you find out that you need <code>[is_add_hom f]</code>, not <code>[is_ring_hom f]</code>.<br>\n4. Manually export substituting arguments. I'd prefer to have a tactic for this but I never tried to write a Lean tactic and failed to find any docs on the <code>meta</code>-specific API (e.g., implemented monads).</p>",
        "id": 170799026,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563040031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  Which approach would you prefer?</p>",
        "id": 170802312,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563046025
    },
    {
        "content": "<p>The conflicts in (1) are unfortunate.</p>",
        "id": 170802730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563046828
    },
    {
        "content": "<p>Otherwise I would have very much preferred that one.</p>",
        "id": 170802733,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563046842
    },
    {
        "content": "<p>But I would be happy to write <code>is_field_hom.map_inv</code> to avoid the conflict.</p>",
        "id": 170802744,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563046885
    },
    {
        "content": "<p>So we could make <code>is_field_hom.map_inv</code> protected.</p>",
        "id": 170802747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563046904
    },
    {
        "content": "<p>(Btw, maybe that should be <code>is_division_ring_hom</code>?? But I don't know if that one exists <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span>)</p>",
        "id": 170802790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563046940
    },
    {
        "content": "<p>I don't really like (2). It's quite unfriendly to users and to refactors.</p>",
        "id": 170802795,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563046982
    },
    {
        "content": "<p>There is a plan to bundle all of them at some point by the way. Someone just has to get around to doing it.</p>",
        "id": 170802843,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563047052
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> If we choose (1), this probably means that all the simp-lemmas <code>multiset.map_add</code> and <code>foobar.map_add</code>, etc..., should be made <code>protected</code>. I don't think that's a bad idea anyway.</p>",
        "id": 170802927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563047260
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> What exactly do you want to have? Could you post some code, e.g, for the simplest case of semigroups?</p>",
        "id": 170802973,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563047327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I'll try (1)</p>",
        "id": 170802975,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563047339
    },
    {
        "content": "<p>I would just want something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- root namespace</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">map_add</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_add_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">is_add_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</pre></div>",
        "id": 170803031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563047423
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Yes, this is what I have now (with α and β instead of X and Y)</p>",
        "id": 170803037,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563047465
    },
    {
        "content": "<p>And similar for <code>map_mul</code>, <code>map_zero</code>, <code>map_one</code>, <code>map_sub</code>, <code>map_neg</code>, <code>map_inv</code>, <code>map_div</code>, and any others that I forgot...</p>",
        "id": 170803042,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563047474
    },
    {
        "content": "<p>My question to <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  is about bundling. What should be bundled and how should it look like.</p>",
        "id": 170803045,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563047511
    },
    {
        "content": "<p>Ok, I understand.</p>",
        "id": 170803089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563047538
    },
    {
        "content": "<p>Need to go now. See you later!</p>",
        "id": 170803091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563047543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Now I have just (in root namespace) <code>export is_mul_hom (map_mul)</code></p>",
        "id": 170803093,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563047578
    },
    {
        "content": "<p>Module homomorphisms are bundled and this worked, so the plan is to bundle group homs, ring homs etc, but people seem to be of the opinion that it all needs to be done in one go which makes it a daunting task</p>",
        "id": 170803637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563048627
    },
    {
        "content": "<p>I see that <code>is_linear_map</code> is used in at least 7 files.</p>",
        "id": 170803881,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563049162
    },
    {
        "content": "<p>And <code>linear_map</code> is used in at least 21 files.</p>",
        "id": 170803888,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563049201
    },
    {
        "content": "<p>How should people use these bundled versions for specific maps? E.g., now we have <code>instance : is_semiring_hom (coe : nat -&gt; α)</code>. What should be the bundled version of this?</p>",
        "id": 170804165,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563049762
    },
    {
        "content": "<p><code>of_nat : semiring_hom nat A</code>, <code>of_nat_apply : of_nat a = \\u a</code></p>",
        "id": 170804221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563049850
    },
    {
        "content": "<p>So, we need <code>add_monoid.of_nat</code> and <code>semiring.of_nat</code>.</p>",
        "id": 170804502,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563050436
    },
    {
        "content": "<p>Another question: I have a theorem about <code>add_group_hom</code>. How should I apply it to a <code>ring_hom</code>? Explicit conversion? Some implicit coercion?</p>",
        "id": 170804518,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563050497
    },
    {
        "content": "<p>If this is going to be rewritten, I think that I'll switch from making <code>is_ring_hom</code> extend <code>is_monoid_hom</code> and <code>is_add_group_hom</code> to something more useful.</p>",
        "id": 170804678,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563050879
    },
    {
        "content": "<blockquote>\n<p>Another question: I have a theorem about <code>add_group_hom</code>. How should I apply it to a <code>ring_hom</code>? Explicit conversion? Some implicit coercion?</p>\n</blockquote>\n<p>This is a hard question. If I recall correctly, experiments so far have not really been satisfactory.</p>",
        "id": 170818080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563078988
    },
    {
        "content": "<p>I think that your \"export stuff in the root namespace\" PR would hopefully not be too much work. So you could still just do that. I'm not sure if bundling of morphisms will happen in the near future...</p>",
        "id": 170818091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563079074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> It takes more time&amp;effort than I expected. There are a few reasons:<br>\n1. Many namespaces have <code>map_mul</code>, <code>map_add</code> etc. I have to make all of them <code>protected</code>, then figure out where I need to add <code>namespace.</code><br>\n2. Sometimes class instance resolution fails to find <code>is_add_monoid_hom f</code> a few lines after <code>instance : is_ring_hom f</code>, and I don't know how to fix this but supplying the conversion explicitly (and this looks ugly).<br>\nSo, I'm going to do the following:<br>\n1. Push current state to a branch (compile fails).<br>\n2. Submit PRs on various small fixes I made while trying to do this move.<br>\n3. Try to make <code>is_ring_hom</code> extend <code>is_add_group_hom</code> by \"manually exporting\" <code>map_add</code> etc into <code>is_ring_hom</code> namespace.<br>\n3b. Try to turn the \"manual export\" in (3) into a tactic, if I find some docs on writing tactics.</p>",
        "id": 170877290,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563183179
    },
    {
        "content": "<p>Hmmm, I'm sorry that it is so painful.</p>",
        "id": 170877674,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563183551
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> Concerning writing tactics. Are you aware of <a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md\">https://github.com/leanprover-community/mathlib/blob/master/docs/extras/tactic_writing.md</a>?</p>",
        "id": 170877695,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563183592
    },
    {
        "content": "<p>Thanks, I somehow missed it</p>",
        "id": 170878985,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563184903
    },
    {
        "content": "<p>There will be general \"mathlib-style\" principles about how to do this sort of stuff and it would probably best to hear from a maintainer or expert who understands e.g. the details of typeclass inference and how it works in mathlib, before doing too much more on this.</p>",
        "id": 170879429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563185401
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Then I'll just do (1) and (2)</p>",
        "id": 170892079,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563197167
    },
    {
        "content": "<p>I did make a start on bundling homs <a href=\"https://github.com/leanprover-community/mathlib/tree/bundled-homs\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/bundled-homs\">https://github.com/leanprover-community/mathlib/tree/bundled-homs</a>. My plan was to make group hom be the same as monoid hom (reducible def or something), on the grounds that nobody really cares about semigroups, so this is more useful than it extending mul hom (the downside is one unnecessary axiom, but this isn't much of a downside, and you can just write a new constructor). I also wanted to get rid of <code>is_field_hom</code>.</p>",
        "id": 170892418,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1563197376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I'll have a look at this, but I want to formalize something non-trivial before coming back to cleanup.</p>",
        "id": 170920327,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563216406
    }
]