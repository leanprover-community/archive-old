[
    {
        "content": "<p>Someone pointed me to <a href=\"https://webusers.imj-prg.fr/~daniel.juteau/juteau_files/slides.pdf\">this talk</a> about \"constructive category theory\" which made me wonder whether we could use such tricks to do e.g. snake lemma in a general abelian category via these \"generalised morphisms\".</p>",
        "id": 253171142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1631572562
    },
    {
        "content": "<p>I don't know if this would be any easier than working, e.g., with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.abelian.pseudoelement\">docs#category_theory.abelian.pseudoelement</a></p>",
        "id": 253172067,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631573165
    },
    {
        "content": "<p>But we probably should have some API for categorical spans in mathlib...</p>",
        "id": 253172143,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631573226
    },
    {
        "content": "<p>Are there interesting results on decidability of particular questions about particular categories, in a similar vein to the fact that the first order theory of real-closed fields is decidable? Does it make sense to ask about whether the theory of the category of real finite dimensional vector spaces is decidable, I guess there are a lot of interpretations of that statement.</p>",
        "id": 253173947,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631574276
    },
    {
        "content": "<p>That's an interesting question. I don't recall ever seeing anything about the model theory of categories.</p>",
        "id": 253175308,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631575113
    },
    {
        "content": "<p>But whatever that means, decidability should be invariant under categorical equivalence and not just isomorphisms... Its hard to even imagine such a notion!</p>",
        "id": 253175486,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631575218
    },
    {
        "content": "<p>This so-called Rezk completion probably has something to do with this</p>",
        "id": 253176380,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631575817
    },
    {
        "content": "<p>I just looked at Rezk completion on nlab and I don't understand it because I don't understand what the difference between a precategory and a category is.</p>",
        "id": 253177530,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631576742
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/diagram.20chasing.20in.20abelian.20categories/near/253175486\">said</a>:</p>\n<blockquote>\n<p>But whatever that means, decidability should be invariant under categorical equivalence and not just isomorphisms... Its hard to even imagine such a notion!</p>\n</blockquote>\n<p>I guess that depends on what you mean by isomorphism? Decidable equality isn't invariant under bijections, only under <code>equiv</code>.<br>\nBut I'm not an expert.</p>",
        "id": 253183755,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631581649
    },
    {
        "content": "<p>I think as long as your language doesn't allow to talk about equality of objects, you can't tell the difference between equivalences of categories and isomorphisms of categories, or between a category and its Rezk completion (all the Rezk completion does is to change \"equality of objects\" into \"isomorphism of objects\")</p>",
        "id": 253239703,
        "sender_full_name": "David Wärn",
        "timestamp": 1631621691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/diagram.20chasing.20in.20abelian.20categories/near/253183755\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/diagram.20chasing.20in.20abelian.20categories/near/253175486\">said</a>:</p>\n<blockquote>\n<p>But whatever that means, decidability should be invariant under categorical equivalence and not just isomorphisms... Its hard to even imagine such a notion!</p>\n</blockquote>\n<p>I guess that depends on what you mean by isomorphism? Decidable equality isn't invariant under bijections, only under <code>equiv</code>.<br>\nBut I'm not an expert.</p>\n</blockquote>\n<p>There's a distinction between decidable equality and decidability of the first order theory. e.g. the reals have undecidable equality and a decidable first order theory in the language of rings, but the integers have decidable equality and an undecidable first order theory. Decidability of the first order theory is preserved under bijective homomorphisms.</p>",
        "id": 253240850,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631622230
    },
    {
        "content": "<p>Actually if you allow quantification over objects, then you can encode Peano arithmetic in the theory of the category of fin dim real vector spaces (edit: is this true? you can define addition, but what about multiplication?). If you only quantify over morphisms, then you should get decidability since a morphism is just a matrix of numbers</p>",
        "id": 253242840,
        "sender_full_name": "David Wärn",
        "timestamp": 1631623174
    },
    {
        "content": "<p>Let me elaborate on the answer above. Consider a first-order theory of categories, with two sorts \"objects\" and \"morphisms\", where you can quantify over either one, you have symbols for the domain/codomain of a morphism, and for identity morphisms and composition. I claim that the theory of the category of (finite-dimensional) vector spaces over any field of char 0 is thus undecidable (for stupid reasons, basically). Note that you can <em>define</em> what it means for an object to be zero-dimensional (say, it has a unique endomorphism), for a morphism to be zero, for an object to be one-dimensional (every endomorphism is zero or an iso), and what it means for a diagram to be a (co)product diagram. There is a common trick to defining addition in a category with biproducts, which lets you define addition (and hence subtraction) of morphisms. We can define a \"scalar\" to be a morphism R -&gt; R where R is our favourite one-dimensional object. Note that we can define arithmetic on scalars. I claim that we can also define what it means for a scalar to be a natural number. Then you can interpret Peano arithmetic, so you get undecidability. Note that x is a natural number if and only if it is the trace of some identity morphism. As it turns out, a matrix is traceless iff it is a commutator, so we can define what it means for two endomorphisms of V to have the same trace (their difference is a commutator). Given an inclusion i : R -&gt; V together with a retraction j : V -&gt; R, you can define a trace-preserving embedding End R -&gt; End V, so you can define what it means for a scalar to be the trace of a given endomorphism, as needed.</p>",
        "id": 253261363,
        "sender_full_name": "David Wärn",
        "timestamp": 1631629955
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130377\">David Wärn</span> <a href=\"#narrow/stream/116395-maths/topic/diagram.20chasing.20in.20abelian.20categories/near/253239703\">said</a>:</p>\n<blockquote>\n<p>I think as long as your language doesn't allow to talk about equality of objects, you can't tell the difference between equivalences of categories and isomorphisms of categories, or between a category and its Rezk completion (all the Rezk completion does is to change \"equality of objects\" into \"isomorphism of objects\")</p>\n</blockquote>\n<p>As far as I know, equality is always part of a first order language. So if you encode a category as two sorts (one for objects and one for morphisms), then at least in usual first order logic you will be talking about equality of objects by default.</p>",
        "id": 253261893,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631630143
    },
    {
        "content": "<p>True, in most presentations of first-order logic, equality is included by default. But you can just remove it! It means that you can't define <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><mi>A</mi><mo>→</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">f : A \\to B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> to mean <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>A</mi><mo separator=\"true\">,</mo><mi>B</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mtext>dom</mtext><mi>f</mi><mo separator=\"true\">,</mo><mtext>cod</mtext><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(A, B) = (\\textup{dom} f, \\textup{cod} f)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">A</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord textup\">dom</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord text\"><span class=\"mord textup\">cod</span></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span>, but you can use dependent types for hom-sets like in mathlib.</p>",
        "id": 253263148,
        "sender_full_name": "David Wärn",
        "timestamp": 1631630624
    },
    {
        "content": "<p><a href=\"https://www.math.mcgill.ca/makkai/folds/foldsinpdf/FOLDS.pdf\">https://www.math.mcgill.ca/makkai/folds/foldsinpdf/FOLDS.pdf</a> this might be relevant</p>",
        "id": 253263643,
        "sender_full_name": "David Wärn",
        "timestamp": 1631630796
    }
]