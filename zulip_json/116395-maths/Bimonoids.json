[
    {
        "content": "<p>Does Mathlib contain something in the direction of (strong) bimonoids (as described in Section 2.1 in this <a href=\"https://www.informatik.uni-leipzig.de/~droste/papers/Droste-Stueber-Vogler-final.pdf\">paper</a>)? <br>\nI was considering formalizing some theory of weighted tree automata, which is built upon strong bimonoids.</p>",
        "id": 313490579,
        "sender_full_name": "Marcus Rossel",
        "timestamp": 1669984958
    },
    {
        "content": "<p>Sounds like a bimonoid is <code>[monoid X] [add_monoid X]</code></p>",
        "id": 313503231,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669988902
    },
    {
        "content": "<p>I guess for a strong bimonoid you'd need to make a new class:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">strong_bimonoid</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">add_comm_monoid_with_one</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">monoid_with_zero</span> <span class=\"n\">X.</span>\n\n<span class=\"c1\">-- all semiring are strong bimonoids</span>\n<span class=\"kd\">instance</span> <span class=\"n\">semiring.to_strong_bimonoid</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">strong_bimonoid</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span><span class=\"o\">‹</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">›</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_monoid_with_one\">docs#add_comm_monoid_with_one</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_with_zero\">docs#monoid_with_zero</a>)</p>",
        "id": 313503546,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1669989012
    }
]