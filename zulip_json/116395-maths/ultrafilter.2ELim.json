[
    {
        "content": "<p>Continuing from the discussion here:<br>\n<a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/More.20point.20set.20topology.20questions/near/212748220\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/More.20point.20set.20topology.20questions/near/212748220</a></p>\n<p>I wonder whether it makes sense to define something like the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">filter.ultrafilter.Lim</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">Lim</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">nonempty_of_ne_bot</span> <span class=\"n\">_</span> <span class=\"n\">F.1</span> <span class=\"n\">F.2.1</span><span class=\"o\">)</span> <span class=\"n\">F.1</span>\n</code></pre></div>\n\n<p>After <a href=\"https://github.com/leanprover-community/mathlib/issues/4545\">#4545</a> there will be a few instances where one would like to take a limit of an ultrafilter, and in all those cases we have to manually tell lean that <code>X</code> is nonempty assuming we have <code>F : ultrafilter X</code>. </p>\n<p>Any thoughts about this?</p>",
        "id": 212834027,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602254244
    },
    {
        "content": "<p>Alternatively:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">filter.Lim</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ne_bot</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">Lim</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">nonempty_of_ne_bot</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 212837863,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1602256113
    }
]