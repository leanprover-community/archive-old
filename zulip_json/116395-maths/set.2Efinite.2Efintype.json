[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> From data.set.finite:</span>\n\n<span class=\"cm\">noncomputable instance finite.fintype {s : set α} (h : finite s) : fintype s :=</span>\n<span class=\"cm\">classical.choice h</span>\n\n<span class=\"cm\">-/</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">tactic.mk_instance failed to generate instance for</span>\n<span class=\"cm\">  fintype ↥s</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">α : Type ?,</span>\n<span class=\"cm\">s : set α,</span>\n<span class=\"cm\">hs : finite s</span>\n<span class=\"cm\">⊢ fintype ↥s</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- same error</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">10000</span><span class=\"o\">]</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">fintype</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- same error</span>\n</pre></div>\n\n\n<p>The instance <code>finite s -&gt; fintype s</code> -- I can't ever get it to fire. I just changed <code>instance</code> to <code>def</code> in mathlib and recompiled, and it seems to compile fine (I haven't finished yet but it's been running for a while). Should it be a <code>def</code>?</p>",
        "id": 186803197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580231149
    },
    {
        "content": "<p>I think it should</p>",
        "id": 186804089,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1580231726
    },
    {
        "content": "<p>We could detect this with a linter, right? <code>hs</code> is not a type class argument (and <code>finite</code> is not even a class--does this matter?) and nothing depends on <code>hs</code> so there is no way it could ever be inferred, either.</p>",
        "id": 186844188,
        "sender_full_name": "Reid Barton",
        "timestamp": 1580256393
    },
    {
        "content": "<p>I like the idea of checking this with a linter. It can definitely be done</p>",
        "id": 186844358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580256581
    },
    {
        "content": "<p>it does matter that <code>finite</code> is not a class</p>",
        "id": 186844437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580256656
    },
    {
        "content": "<p>The simplest way to make the linter work is to create a replica of the instance type and try to prove it by <code>apply_instance</code></p>",
        "id": 186844575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580256785
    },
    {
        "content": "<p>this might have false negatives for \"transitivity\" instances like <code>foo A B -&gt; foo B C -&gt; foo A C</code> (which should be discouraged)</p>",
        "id": 186844691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580256919
    },
    {
        "content": "<p>I don't underestand the following error (something to do with universes?). Any ideas?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">set.finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">set.finite.fintype</span> <span class=\"n\">hs</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at application</span>\n<span class=\"cm\">  fintype.card hs.fintype</span>\n<span class=\"cm\">term</span>\n<span class=\"cm\">  hs.fintype</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  fintype ↥s : Type u</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  Type ? : Type (?+1)</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 249575346,
        "sender_full_name": "Nicolás Ojeda Bär",
        "timestamp": 1629112587
    },
    {
        "content": "<p><code>hs</code> is a proof that a set is finite. <code>fintype.card</code> wants the type itself, not a proof that it is finite.</p>",
        "id": 249575392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629112643
    },
    {
        "content": "<p>The function you're looking for already exists and is called <del>something like</del> nat.card</p>",
        "id": 249575414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629112669
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.card\">docs#nat.card</a> is about types not sets,  but that doesn't really matter.</p>",
        "id": 249575469,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629112702
    },
    {
        "content": "<p>I guess this might be illustrative:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">set.finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">@</span><span class=\"n\">fintype.card</span> <span class=\"n\">_</span> <span class=\"n\">hs.fintype</span>\n</code></pre></div>",
        "id": 249575519,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629112762
    },
    {
        "content": "<p>So welcome to type theory. If X is a type then the type of subsets of X is called <code>set X</code> and a term <code>S : set X</code> is a <em>term</em> not a type. In particular you can't in theory talk about <code>x : S</code> to mean \"x is in S\", you need to do <code>x : X</code> and then <code>hxS : x ∈ S</code>.</p>",
        "id": 249575615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629112862
    },
    {
        "content": "<p><code>fintype</code> is a typeclass on types meaning \"this type is finite\". <code>set.finite</code> is a function on terms meaning \"this set is finite\". That weird <code>↥</code> arrow in your error message is an automatically inserted coercion meaning \"I know it's a term, but I'm promoting it to a type because that's the only way to make this make sense\".</p>",
        "id": 249575755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629112995
    },
    {
        "content": "<p>Note also Oliver's trick of <code>hs.fintype</code> being notation for <code>set.finite.fintype hs</code> because <code>hs</code> has type <code>set.finite ...</code> -- this trick is called dot notation. I'm just mentioning these things because I know you're just starting in Lean -- sorry if you figured them all out already!</p>",
        "id": 249575921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629113112
    },
    {
        "content": "<p>Conscious that <span class=\"user-mention\" data-user-id=\"243843\">@Nicolás Ojeda Bär</span> is newish I'd like to offer reassurance that things get easier and formalisation quickly becomes huge fun. At the beginning it can feel annoying that there seem to be obstacles everywhere but in time the problems evaporate.</p>",
        "id": 249576112,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629113263
    },
    {
        "content": "<p>Thanks for the explanations <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , they <em>are</em> useful!</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/set.2Efinite.2Efintype/near/249575392\">said</a>:</p>\n<blockquote>\n<p><code>hs</code> is a proof that a set is finite. <code>fintype.card</code> wants the type itself, not a proof that it is finite.</p>\n</blockquote>\n<p>But I <em>am</em> passing a type, right? That's what <code>set.finite.fintype</code> is supposed to produce... However it only works if I the <code>noncomputable</code> annotation (with the explicit <code>_</code> placeholder), as suggested by Oliver:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/set.2Efinite.2Efintype/near/249575519\">said</a>:</p>\n<blockquote>\n<p>noncomputable def foo (α : Type u) (s : set α) (hs : set.finite s) : ℕ :=<br>\n@fintype.card _ hs.fintype</p>\n</blockquote>\n<p>Is there a simple explanation why it doesn't typecheck if I don't add the <code>noncomputable</code> annotation (and the explicit <code>_</code>) ?</p>",
        "id": 249576234,
        "sender_full_name": "Nicolás Ojeda Bär",
        "timestamp": 1629113350
    },
    {
        "content": "<p>Totally agree with Oliver. Yesterday I rewrote some of <span class=\"user-mention silent\" data-user-id=\"402311\">Henry Swanson</span>'s derangements PR and I really surprised myself by knowing how to deal with all the subtyping and coercions mess to actually get to the point. I really thought \"No way 2021 May's Yaël could have done that\".</p>",
        "id": 249576295,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629113397
    },
    {
        "content": "<p>Noncomputability is inherited from <code>set.finite.fintype</code></p>",
        "id": 249576390,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629113442
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243843\">@Nicolás Ojeda Bär</span> Consider this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"k\">#check</span> <span class=\"n\">fintype.card</span> <span class=\"c1\">-- Output: fintype.card : Π (α : Type u_1) [_inst_1 : fintype α], ℕ</span>\n</code></pre></div>\n<p>This says that fintype.card is a function taking two arguments, called α and _inst_1 above. The second one is optional but by prefixing fintype.card with an @ sign I opted to provide it manually. I then left out the first argument (indicated by _) since its value can be inferred from the type of the second argument.</p>",
        "id": 249576436,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629113480
    },
    {
        "content": "<p><code>set.finite</code> means \"There exists a finset whose elements are the same as my set, but I don't know which\" (roughly) while <code>fintype</code> means \"Here's a finset and a proof that it contains all the stuff in my type\"</p>",
        "id": 249576484,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629113517
    },
    {
        "content": "<p>That's the difference between <strong>knowing there exists</strong> an object that satisfies some conditions and actually <strong>having</strong> such an object.</p>",
        "id": 249576582,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629113572
    },
    {
        "content": "<p>The noncomputability of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite.fintype\">docs#set.finite.fintype</a> is deliberate : if you want computable finiteness, use <code>[fintype ↥s]</code> instead of <code>(h : s.finite)</code></p>",
        "id": 249576614,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629113594
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 249576620,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629113596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243843\">Nicolás Ojeda Bär</span> <a href=\"#narrow/stream/116395-maths/topic/set.2Efinite.2Efintype/near/249576234\">said</a>:</p>\n<blockquote>\n<p>But I <em>am</em> passing a type, right? That's what <code>set.finite.fintype</code> is supposed to produce... </p>\n</blockquote>\n<p><code>set.finite.fintype hs</code> is a proof that the type <code>↥s</code> is finite, so it's a term not a type.</p>",
        "id": 249576745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629113671
    },
    {
        "content": "<p>Passing the type would look like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">set.finite</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"n\">fintype.card</span> <span class=\"bp\">↥</span><span class=\"n\">s</span>\n</code></pre></div>",
        "id": 249576844,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629113745
    },
    {
        "content": "<p>But that fails because it cannot find the typeclass (i.e., the optional argument <code>hs.fintype</code>) which needs to be built from <code>hs</code>.</p>",
        "id": 249576867,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629113763
    },
    {
        "content": "<p>There's also the added confusion that <code>fintype</code> was written with constructive mathematics in mind, so a term of type <code>fintype X</code> is not even a proof, it's actually data (but it's still a term, not a type).</p>",
        "id": 249576924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629113781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/set.2Efinite.2Efintype/near/249576867\">said</a>:</p>\n<blockquote>\n<p>(But that fails because it cannot find the typeclass, which needs to be built from <code>hs</code>.)</p>\n</blockquote>\n<p>Thanks, that clears up (one of) my confusions, I had gotten the implicit argument to <code>fintype.card</code> mixed up.</p>",
        "id": 249577132,
        "sender_full_name": "Nicolás Ojeda Bär",
        "timestamp": 1629113921
    },
    {
        "content": "<p>There are two times where Lean will automatically fill in function inputs for you -- the <code>{}</code> system, where Lean figures out any inputs to functions marked with squiggly brackets using unification, and the <code>[]</code> system, where Lean figures out these inputs by looking at a big database called \"the current contents of the typeclass system\"</p>",
        "id": 249577342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629114057
    },
    {
        "content": "<p>Right, so there are three types of arguments:</p>\n<ol>\n<li>Explicit, for which we use round brackets <code>()</code></li>\n<li>Typeclass, for which we use square brackets <code>[]</code></li>\n<li>Implicit, for which we use curly brackets <code>{}</code></li>\n</ol>",
        "id": 249577393,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1629114086
    },
    {
        "content": "<p>You can override both systems with this <code>@</code> trick, which means that you have to input all inputs manually (but then you can skip some and hope that Lean can figure them out)</p>",
        "id": 249577399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629114090
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/set.2Efinite.2Efintype/near/249576924\">said</a>:</p>\n<blockquote>\n<p>There's also the added confusion that <code>fintype</code> was written with constructive mathematics in mind, so a term of type <code>fintype X</code> is not even a proof, it's actually data (but it's still a term, not a type).</p>\n</blockquote>\n<p>Yes, I was indeed mixed up in my previous comment about it being a type, I see it now. Thanks!</p>",
        "id": 249577440,
        "sender_full_name": "Nicolás Ojeda Bär",
        "timestamp": 1629114117
    },
    {
        "content": "<p>And semi-implicit ⦃⦄ <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 249577508,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629114147
    },
    {
        "content": "<p>I don't know if that's the official name for it.</p>",
        "id": 249577532,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629114171
    },
    {
        "content": "<p>I think those are being removed in Lean 4, so it's best not to talk about them ;-)</p>",
        "id": 249577538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629114176
    },
    {
        "content": "<p>Oh nooo, I liked them. But apparently I was the only one.</p>",
        "id": 249577556,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629114192
    },
    {
        "content": "<p>It looks to me like they've been recently added to Lean4 : <a href=\"https://github.com/leanprover/lean4/commit/4cd7e359dfbfd56cca7f4a70d502ed159a61aa3e\">https://github.com/leanprover/lean4/commit/4cd7e359dfbfd56cca7f4a70d502ed159a61aa3e</a></p>",
        "id": 249579393,
        "sender_full_name": "David Renshaw",
        "timestamp": 1629115436
    },
    {
        "content": "<p>The def everyone wants here is finset.card, and the value is (hs : set.finite).to_finset.card</p>",
        "id": 249591150,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629121965
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.finite.to_finset\">docs#set.finite.to_finset</a></p>",
        "id": 249591221,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629122009
    },
    {
        "content": "<p><a href=\"https://xkcd.com/927/\">https://xkcd.com/927/</a></p>",
        "id": 249599659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629125933
    },
    {
        "content": "<p>I am not sure that mathematicians ever want finset or fintype, we're just conditioned to use them by the constructivists.</p>",
        "id": 249599767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629125987
    }
]