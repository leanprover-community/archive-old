[
    {
        "content": "<p>The following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> doesn't work. How can I make <code>norm_num</code> work with <code>fin n</code>? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic.norm_num</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">norm_num</span>\n</code></pre></div>",
        "id": 274144065,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1646407373
    },
    {
        "content": "<p><code>norm_fin</code></p>",
        "id": 274144102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646407392
    },
    {
        "content": "<p>actually that one should work in <code>norm_num</code></p>",
        "id": 274144185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646407428
    },
    {
        "content": "<p>It doesn't. <code>norm_fin</code> works.</p>",
        "id": 274144355,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1646407490
    },
    {
        "content": "<p>oh, it's just your imports</p>",
        "id": 274144705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646407621
    },
    {
        "content": "<p>if you import <code>tactic.norm_fin</code> then <code>norm_num</code> works</p>",
        "id": 274144733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646407631
    },
    {
        "content": "<p>because <code>tactic.norm_fin</code> declares a <code>norm_num</code> extension</p>",
        "id": 274144797,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646407663
    },
    {
        "content": "<p>wait, how come 2 = 0 in that type?</p>",
        "id": 274160769,
        "sender_full_name": "Jakub Kądziołka",
        "timestamp": 1646414439
    },
    {
        "content": "<p>It doesn't, I guess its a typo</p>",
        "id": 274160936,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1646414522
    },
    {
        "content": "<p>yeah, it adds to the mystery of the question that an expert Lean user is complaining about how he can't prove an obviously false statement</p>",
        "id": 274161657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646414814
    },
    {
        "content": "<p>when I say \"works\" above I mean it reduces to <code>false</code> instead of leaving it as is</p>",
        "id": 274163056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1646415477
    },
    {
        "content": "<p>Who needs <code>norm_num</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 274170116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1646418750
    }
]