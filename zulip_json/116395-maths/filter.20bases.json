[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> Bourbaki is always using filter bases everywhere, and it's been puzzling me forever that this seems to be nowhere in mathlib. In particular I can't find:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">generate_of_base</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">k</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"err\">∩</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">):</span> <span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"n\">generate</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"err\">⊆</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">induction</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">U</span> <span class=\"n\">U_in</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">U_gen</span> <span class=\"n\">UV</span> <span class=\"n\">U_union</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">U_gen</span> <span class=\"n\">V_gen</span> <span class=\"n\">U_union</span> <span class=\"n\">V_union</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">U_in</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"n\">default</span> <span class=\"n\">ι</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">univ_mem_sets</span> <span class=\"o\">:</span> <span class=\"n\">univ</span> <span class=\"err\">∈</span> <span class=\"n\">principal</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">$</span> <span class=\"n\">default</span> <span class=\"n\">ι</span><span class=\"o\">))},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">U_union</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">Ui</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">Ui</span> <span class=\"n\">UV</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">U_union</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">Ui</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">V_union</span> <span class=\"k\">with</span> <span class=\"n\">j</span> <span class=\"n\">Vj</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">k_sub</span><span class=\"o\">,</span>\n      <span class=\"n\">use</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">subset_inter_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">k_sub</span> <span class=\"k\">with</span> <span class=\"n\">ki</span> <span class=\"n\">kj</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">subset_inter_iff</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">ki</span> <span class=\"n\">Ui</span><span class=\"o\">,</span> <span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">kj</span> <span class=\"n\">Vj</span><span class=\"bp\">⟩</span> <span class=\"o\">}},</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">Ui</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">generate_sets</span><span class=\"bp\">.</span><span class=\"n\">superset</span> <span class=\"o\">(</span><span class=\"n\">generate_sets</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"err\">$</span> <span class=\"n\">mem_range_self</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">Ui</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>What is the story here? Do you have a better way?</p>",
        "id": 160579909,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552404344
    },
    {
        "content": "<p>I know this is a fake tactic mode proof, but I don't dare writing the proof term...</p>",
        "id": 160580055,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552404455
    },
    {
        "content": "<p>I usually reduce it to the infimum.</p>",
        "id": 160580058,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552404459
    },
    {
        "content": "<p>So <code>nhds</code> is not defined using a generating set, but as a infimum of <code>principal</code> filters. The advantage is that for the infimum very generic rules exist</p>",
        "id": 160580153,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552404521
    },
    {
        "content": "<p>I can also prove that, under the same assumption, <code>generate (range s) = ⨅ i, principal (s i)</code>. But what do you gain from expressing it as the RHS?</p>",
        "id": 160580170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552404532
    },
    {
        "content": "<p>I think the problem is that <code>⨅ i, principal (s i)</code> is not very nice in general</p>",
        "id": 160580218,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552404585
    },
    {
        "content": "<p>often <code>s</code> is not only indexed by one value, but many values. this fits nicely with <code>infi</code>.</p>",
        "id": 160580223,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552404593
    },
    {
        "content": "<p>You need to take intersections of finite subsets</p>",
        "id": 160580232,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552404599
    },
    {
        "content": "<p>it is not nice if you directly work on sets, instead of on filters.</p>",
        "id": 160580296,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552404620
    },
    {
        "content": "<p>Of course, it is often hard to use filters in their full generality but when we can they are very powerful.</p>",
        "id": 160580330,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552404650
    },
    {
        "content": "<p>I still don't understand why the condition <code>H : ∀ i j, ∃ k, s k ⊆ s i ∩ s j</code> appears nowhere. Whatever the language, things will always be simpler under this assumption, right?</p>",
        "id": 160580382,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552404697
    },
    {
        "content": "<p>This is a <code>directed</code> something assumption</p>",
        "id": 160580399,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552404714
    },
    {
        "content": "<p>Everybody here wants to have more category theory, but nobody is using the complete lattices structure on the filters. But you can see the <code>infi</code> as a nice behaving limit of filters. And many operations commute _somehow_ with infi.</p>",
        "id": 160580469,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552404740
    },
    {
        "content": "<p><code>principal</code> doesn't commute nicely</p>",
        "id": 160580494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552404779
    },
    {
        "content": "<p>What you proved is essentially <code>mem_infi</code></p>",
        "id": 160580496,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552404781
    },
    {
        "content": "<p><code>tendsto</code> and <code>principal</code> and <code>infi</code> work very nicely together!</p>",
        "id": 160580528,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552404798
    },
    {
        "content": "<p><code>⨅ i, principal (s i)</code> is <em>not</em> <code>principal (⨅ i, s i)</code>, right?</p>",
        "id": 160580604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552404851
    },
    {
        "content": "<p>Look at these rules: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/filter/basic.lean#L1205\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/order/filter/basic.lean#L1205\">https://github.com/leanprover-community/mathlib/blob/master/src/order/filter/basic.lean#L1205</a></p>",
        "id": 160580612,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552404857
    },
    {
        "content": "<p>Look ma no <code>directed</code> proof necessary :-)</p>",
        "id": 160580620,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552404866
    },
    {
        "content": "<p>Ah sorry, I didn't mean <code>prinicpal</code> and <code>infi</code> are commuting. But <code>tendsto</code> and <code>infi</code> are nice behaving</p>",
        "id": 160580657,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552404905
    },
    {
        "content": "<p>But the story of filter bases and sub-bases is precisely the story of <code>⨅ i, principal (s i)</code> vs <code>generate (range s)</code></p>",
        "id": 160580725,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552404957
    },
    {
        "content": "<p>Yes, but <code>generate</code> only allows me to construct a filter from sets. While <code>⨅</code> allows me to constructa filter from other filters (hence including sets)</p>",
        "id": 160580879,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552405058
    },
    {
        "content": "<p>Many statements are actually filter inclusion statements. Often they are not seen to be obvious filter inclusions, but when they are then we can use the powerful complete lattice structure.</p>",
        "id": 160581006,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552405152
    },
    {
        "content": "<p>An example is: <a href=\"https://github.com/leanprover-community/mathlib/commit/a4afa904f2e902e34764ff69ec5baf31ad56525a#diff-2f853d294b8568321089942e42ccd7b1L1411\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/a4afa904f2e902e34764ff69ec5baf31ad56525a#diff-2f853d294b8568321089942e42ccd7b1L1411\">https://github.com/leanprover-community/mathlib/commit/a4afa904f2e902e34764ff69ec5baf31ad56525a#diff-2f853d294b8568321089942e42ccd7b1L1411</a><br>\nHere the <code>directed</code> proof is completely unnecessary</p>",
        "id": 160581105,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552405231
    },
    {
        "content": "<p>Or this change:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/commit/a4afa904f2e902e34764ff69ec5baf31ad56525a#diff-11d4223aa3461ef9e12d2f034e79d0f1R375\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/a4afa904f2e902e34764ff69ec5baf31ad56525a#diff-11d4223aa3461ef9e12d2f034e79d0f1R375\">https://github.com/leanprover-community/mathlib/commit/a4afa904f2e902e34764ff69ec5baf31ad56525a#diff-11d4223aa3461ef9e12d2f034e79d0f1R375</a><br>\nHere the same proof which was done before <code>set</code>-wise is now done on filters and their order structure (even when the final goal is to reduce a filer statement to a set statement)</p>",
        "id": 160581217,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552405323
    },
    {
        "content": "<p>What I want to say: <code>generate</code> is much more limited than using <code>infi</code>. With <code>infi</code> we get nice compositional behaviour, and especially for the reduction of <code>tendsto</code> statements it can be very powerful.</p>",
        "id": 160581280,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552405372
    },
    {
        "content": "<p>We can reduce <code>generate</code> to <code>infi</code> but not the other way round</p>",
        "id": 160581434,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552405475
    },
    {
        "content": "<p>We can define <code>infi</code> using <code>generate</code>, but then we lose the compositional behaviour</p>",
        "id": 160581464,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1552405502
    },
    {
        "content": "<p>Thanks, I'll try to keep all that in mind</p>",
        "id": 160582263,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1552406034
    },
    {
        "content": "<p>In mathlib, we have Yury's <a href=\"https://github.com/leanprover-community/mathlib/blob/23681c3db3dc30695a97a769641a99511297f784/src/order/filter/bases.lean\" title=\"https://github.com/leanprover-community/mathlib/blob/23681c3db3dc30695a97a769641a99511297f784/src/order/filter/bases.lean\">filter bases</a> which are predicate based, and used in some places, but notably <em>not</em> in <a href=\"https://github.com/leanprover-community/mathlib/blob/23681c3db3dc30695a97a769641a99511297f784/src/topology/bases.lean\" title=\"https://github.com/leanprover-community/mathlib/blob/23681c3db3dc30695a97a769641a99511297f784/src/topology/bases.lean\">topology.bases</a>. In the perfectoid project, we had filter bases everywhere, but we used a much more bundled approach because:</p>\n<ol>\n<li>We needed to enforce many properties of our bases</li>\n<li>We needed to construct filters starting from a basis having a lot of properties (typically providing a basis for neighborhood of zero in a ring that will ensure there is a topological ring structure inducing that filter).</li>\n</ol>\n<p>As a scaled down example, I'd like to discuss the following example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">decreasing_enumerated_basis</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span>  <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">in_filter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">decreasing</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">V</span> <span class=\"n\">m</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">basis</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"n\">n</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span>  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">decreasing_enumerated_basis</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">V</span> <span class=\"n\">n</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">decreasing_enumerated_basis</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">decreasing_enumerated_basis</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">φ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"err\">ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span> <span class=\"bp\">;</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">in_filter</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">s_in</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">basis</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">s_in</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mem_sets_of_superset</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">preimage_mono</span> <span class=\"n\">hn</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">decreasing_enumerated_basis</span><span class=\"bp\">.</span><span class=\"n\">tendsto&#39;</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">decreasing_enumerated_basis</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">B</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">φ</span> <span class=\"n\">at_top</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">tendsto</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eventually_at_top</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"n\">decreasing</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">m</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">decreasing_enumerated_basis</span><span class=\"bp\">.</span><span class=\"n\">of_has_countable_basis</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">has_countable_basis</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decreasing_enumerated_basis</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>This setup is very convenient to use because you can apply the function defined at the bottom of this snippet, and access all the lemmas using the dot notation. What do <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> and <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> think about this?</p>",
        "id": 192956971,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586089439
    },
    {
        "content": "<p>If this is useful in your specific setup, then go for it! Although I would formulate the third property in your structure using Yury's predicate and call it <code>has_basis</code>, to get all the existing lemmas for bases with <code>B.has_basis.foo</code>.</p>",
        "id": 192959261,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586092711
    },
    {
        "content": "<p>Yes, this is obviously the good solution.</p>",
        "id": 192959964,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586093767
    },
    {
        "content": "<p>In January, Yury said that he has already migrated <code>has_countable_basis</code> to the new API and that he's just splitting it up into multiple PRs.  <a href=\"https://github.com/leanprover-community/mathlib/pull/1896#issuecomment-576681341\" title=\"https://github.com/leanprover-community/mathlib/pull/1896#issuecomment-576681341\">https://github.com/leanprover-community/mathlib/pull/1896#issuecomment-576681341</a></p>",
        "id": 192961162,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586095608
    },
    {
        "content": "<p>Actually maybe an even better solution would be to wrap <code>filter.has_basis</code> into a structure and have more specific basis extending it. That would save a couple of restatements.</p>",
        "id": 192961632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586096383
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> and <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> I'd like comments on WIP at <a href=\"https://github.com/leanprover-community/mathlib/commit/94701f1a9f33abbeb17894929d567affd42e2267\" title=\"https://github.com/leanprover-community/mathlib/commit/94701f1a9f33abbeb17894929d567affd42e2267\">https://github.com/leanprover-community/mathlib/commit/94701f1a9f33abbeb17894929d567affd42e2267</a>. There I did three things: first I removed the filter countable basis stuff from <code>topology.bases</code> and put it in <code>order.filter.bases</code>, next to <code>filter.has_basis</code> where I can be later refactord. Then I added my <code>decreasing_enumerated_basis</code>, in the same file. And then my end goal in this story is what I added in <code>topology.sequences</code>. There is general stuff about subsequences, the high scores stuff and the final lemma which was the end-goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">first_countable_topology</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">compact</span><span class=\"bp\">.</span><span class=\"n\">tendsto_subseq</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">compact</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"n\">n</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">strict_mono</span> <span class=\"n\">φ</span> <span class=\"bp\">∧</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"err\">∘</span> <span class=\"n\">φ</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"err\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">hs</span><span class=\"bp\">.</span><span class=\"n\">tendsto_subseq&#39;</span> <span class=\"o\">(</span><span class=\"n\">univ_mem_sets&#39;</span> <span class=\"n\">hu</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I still need to clean a bit the last file, but I'd like to read at least comments about the reorganization stuff, and naming suggestions.</p>",
        "id": 192978311,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586120935
    },
    {
        "content": "<p>The next step will be to hook this to Sébastien's proper metric space thing to actually get Bolzano-Weirstrass.</p>",
        "id": 192978471,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586121135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>  I'm afraid that I've accidentally deleted this part (messed up with <code>git stash</code>es). So far <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> 's approach looks very good. I think that <code>has_countable_basis</code> should become <code>nonempty (decreasing_enumerated_basis f)</code> if we want it in <code>Prop</code>. BTW, I'd turn it into a <code>class</code> because in many cases (<code>at_top</code> on <code>nat</code>, <code>nhds</code> in an <code>emetric_space</code>) it can be deduced automatically.</p>",
        "id": 192983320,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586129228
    },
    {
        "content": "<p>I don't think we make any use of the fact that <code>has_countable_basis</code> is in Prop.  It is only used as a hypothesis for lemmas.  So I'd say we can replace <code>has_countable_basis</code> by <code>decreasing_enumerated_basis</code> directly.  Although the name is quite a mouthful.</p>",
        "id": 193029021,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586173368
    },
    {
        "content": "<p><code>has_countable_basis</code> is still easier to check in principle, and also what is in the traditional sources.</p>",
        "id": 193030655,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586174424
    },
    {
        "content": "<p>Long names are hard to avoid, especially since we don't want cryptic abreviations.</p>",
        "id": 193030684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586174457
    }
]