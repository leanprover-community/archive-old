[
    {
        "content": "<p>Hi all,</p>\n<p>I've been working on formalizing <a href=\"https://en.wikipedia.org/wiki/Young_tableau\">Young tableaux</a> with the goal of formalizing the <a href=\"https://en.wikipedia.org/wiki/Robinson%E2%80%93Schensted%E2%80%93Knuth_correspondence\">RSK correspondence</a>. A special case of RSK is an equivalence between permutations of <code>n : ℕ</code> and ordered pairs of standard Young tableaux  of the same shape (summing over all shapes of size <code>n</code>).</p>\n<p>I have a fair amount of progress toward RSK and have written, I think, reasonably workable definitions of Young diagram, tableau, etc, with some API around them. Github code here: <a href=\"https://github.com/jakelev/lean-rsk\">https://github.com/jakelev/lean-rsk</a>. </p>\n<p>I'd like to contribute some of it to mathlib, starting with e.g. the basic API around the definitions of young diagram and semistandard Young tableau (SSYT), which for me are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">young_diagram</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">cells</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">nw_of'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i1</span> <span class=\"n\">i2</span> <span class=\"n\">j1</span> <span class=\"n\">j2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span>\n    <span class=\"n\">i1</span> <span class=\"bp\">≤</span> <span class=\"n\">i2</span> <span class=\"bp\">→</span> <span class=\"n\">j1</span> <span class=\"bp\">≤</span> <span class=\"n\">j2</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i2</span><span class=\"o\">,</span> <span class=\"n\">j2</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">cells</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i1</span><span class=\"o\">,</span> <span class=\"n\">j1</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">cells</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">young_diagram.has_mem</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">young_diagram</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">c</span> <span class=\"n\">μ</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">∈</span> <span class=\"n\">μ.cells</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">ssyt</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">young_diagram</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">entry</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">row_weak</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j1</span> <span class=\"n\">j2</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">j1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">j2</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j2</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">μ</span> <span class=\"bp\">→</span>\n    <span class=\"n\">entry</span> <span class=\"n\">i</span> <span class=\"n\">j1</span> <span class=\"bp\">≤</span> <span class=\"n\">entry</span> <span class=\"n\">i</span> <span class=\"n\">j2</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">col_strict</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i1</span> <span class=\"n\">i2</span> <span class=\"n\">j</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">i1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">i2</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">i2</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">μ</span> <span class=\"bp\">→</span>\n    <span class=\"n\">entry</span> <span class=\"n\">i1</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">entry</span> <span class=\"n\">i2</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">zeros'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">∉</span> <span class=\"n\">μ</span> <span class=\"bp\">→</span> <span class=\"n\">entry</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>For example, I have things like the <code>transpose</code> of a Young diagram, the row and column lengths (as weakly-decreasing sequences), adding or deleting a corner box to a Young diagram or tableau, and a <code>fintype</code> instance for SSYTs of fixed shape and bounded entries:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> fintype instance for ssyts with bounded entries.</span>\n<span class=\"cm\">   method is to express as a subtype of (μ.cells → fin m) -/</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ssyt_bounded</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">young_diagram</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">ssyt</span> <span class=\"n\">μ</span> <span class=\"bp\">//</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">μ</span> <span class=\"bp\">→</span> <span class=\"n\">T</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">ssyt_bounded.fintype</span> <span class=\"o\">{</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">young_diagram</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">ssyt_bounded</span> <span class=\"n\">μ</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>RSK can come later, but if you're still reading at this point, basically I have:</p>\n<ul>\n<li>One direction of RSK defined:</li>\n</ul>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">rsk</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"o\">(</span><span class=\"n\">lex</span> <span class=\"o\">(</span><span class=\"n\">ℕ</span> <span class=\"bp\">×</span> <span class=\"n\">ℕ</span><span class=\"o\">))),</span> <span class=\"n\">w.sorted</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"bp\">Σ</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">young_diagram</span><span class=\"o\">),</span> <span class=\"n\">ssyt</span> <span class=\"n\">μ</span> <span class=\"bp\">×</span> <span class=\"n\">ssyt</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<ul>\n<li>Part of inverse-RSK defined (there is a design choice here I am uncertain about, so basically so far I have only defined \"one induction step of inverse RSK\" but haven't defined the whole algorithm)</li>\n<li>Proofs of inversion of the individual step of the insertion procedure; what's missing has to do with induction and well-founded recursion.</li>\n</ul>",
        "id": 291759429,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659469746
    },
    {
        "content": "<p>Questions:</p>\n<ol>\n<li>Should I just start making a PR with some basics?</li>\n<li><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> <span class=\"user-mention\" data-user-id=\"355764\">@Hanting Zhang</span> <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I saw the three of you discussing Young tableaux a while back <a href=\"#narrow/stream/113489-new-members/topic/Young.20tableau\">here</a>. Did any of that end up getting PRed?</li>\n</ol>",
        "id": 291759656,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659469878
    },
    {
        "content": "<p>You should probably use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_lower_set\">docs#is_lower_set</a> in the definition of <code>young_diagram</code>.</p>",
        "id": 291759837,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659469959
    },
    {
        "content": "<p>Cool!!  My first thought (cc <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span>): Is there scope for a Sage extension calling<br>\n<a href=\"https://doc.sagemath.org/html/en/thematic_tutorials/algebraic_combinatorics/rsk.html\">https://doc.sagemath.org/html/en/thematic_tutorials/algebraic_combinatorics/rsk.html</a></p>",
        "id": 291759876,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1659469982
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Young.20tableaux.20and.20RSK/near/291759837\">said</a>:</p>\n<blockquote>\n<p>You should probably use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_lower_set\">docs#is_lower_set</a> in the definition of <code>young_diagram</code>.</p>\n</blockquote>\n<p>Relatedly, would it be better to just define young_diagram as a subtype of <code>finset (ℕ × ℕ)</code> rather than as a structure?</p>",
        "id": 291760338,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659470238
    },
    {
        "content": "<p>Doesn't really matter, I think. I doubt you will need much <code>subtype</code> API and, on the other hand, it won't hurt to define it as a subtype.</p>",
        "id": 291760894,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659470484
    },
    {
        "content": "<p>What you should do either way is provide the <code>set_like young_tableau (ℕ × ℕ)</code> instance.</p>",
        "id": 291761029,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659470525
    },
    {
        "content": "<p>Will that clash with the <code>finset</code> setup? Since it coerces it to a <code>set</code> instead?</p>",
        "id": 291763179,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659471538
    },
    {
        "content": "<p>Regarding subtypes, a custom <code>structure</code> seems better since you're adding instances. Yael's suggestion to define a <code>set_like</code> instance to give you the <code>has_mem</code> (and some free other lemmas) seems like a good one -- I don't think it will clash with anything. (Make sure to follow the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_like\">docs#set_like</a> module docs for what boilerplate to define.)</p>",
        "id": 291763511,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659471705
    },
    {
        "content": "<p><del>Hmm. Is there any reason not just have the definition be <code>def young_diagram := lower_set (ℕ × ℕ)</code>?</del> edit: oh right, because that isn't a <code>finset</code>.</p>",
        "id": 291766440,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659473130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"391579\">Jake Levinson</span> <a href=\"#narrow/stream/116395-maths/topic/Young.20tableaux.20and.20RSK/near/291766440\">said</a>:</p>\n<blockquote>\n<p>Hmm. Is there any reason not just have the definition be <code>def young_diagram := lower_set (ℕ × ℕ)</code>?</p>\n</blockquote>\n<p>That would allow infinite sets.</p>",
        "id": 291766664,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1659473238
    },
    {
        "content": "<p>Maybe we should have more generally the lower <code>finsets</code> of any poset?</p>",
        "id": 291766955,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1659473382
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329754\">@Antoine Labelle</span> Sure, though that seems outside the scope of young diagrams (which have properties particular to <code>ℕ × ℕ</code>).</p>",
        "id": 291767502,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659473660
    },
    {
        "content": "<p>Should <code>cells</code> be renamed to <code>carrier</code>? Seems like that is the convention elsewhere in mathlib.</p>",
        "id": 291767747,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659473803
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329754\">Antoine Labelle</span> <a href=\"#narrow/stream/116395-maths/topic/Young.20tableaux.20and.20RSK/near/291766955\">said</a>:</p>\n<blockquote>\n<p>Maybe we should have more generally the lower <code>finsets</code> of any poset?</p>\n</blockquote>\n<p>That does sound like the correct generalisation, and would fit well with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lower_set\">docs#lower_set</a></p>",
        "id": 291767816,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659473849
    },
    {
        "content": "<p>How big an initial commit / PR should I make? And, is it OK if I just use <code>is_lower_set</code> for now?</p>",
        "id": 291768423,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659474142
    },
    {
        "content": "<p>I'm not so sure about <code>carrier</code> here -- the \"carrier\" is referring to the underlying set of an algebraic structure, but a young diagram isn't an algebraic structure -- defining it as a finite downset of pairs is more of an implementation detail for these combinatorial objects. If you don't want <code>cells</code>, another relevant word is <code>support</code>, especially since a Young tableau is a kind of function with a Young diagram as its support.</p>",
        "id": 291769803,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659474969
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Young.20tableaux.20and.20RSK/near/291759876\">said</a>:</p>\n<blockquote>\n<p>Cool!!  My first thought (cc <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span>): Is there scope for a Sage extension calling<br>\n<a href=\"https://doc.sagemath.org/html/en/thematic_tutorials/algebraic_combinatorics/rsk.html\">https://doc.sagemath.org/html/en/thematic_tutorials/algebraic_combinatorics/rsk.html</a></p>\n</blockquote>\n<p>This isn't a topic I know anything about, are there concrete instances of things that you'd want to calculate? What is Sage being called to do and how are you using it In Lean?</p>",
        "id": 291770165,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1659475187
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> \"Cells\" (actually \"boxes\" :) ) is closest to how I would refer to them in real life. I'm happy to stick with <code>cells</code> then.</p>",
        "id": 291770787,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659475499
    },
    {
        "content": "<p>Re PR size -- it's best if you do things in small chunks (start with some definitions and some boilerplate?). You can include a link to your repository in the PR description below the \"---\" to help reviewers know where it's all going.</p>",
        "id": 291771078,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659475662
    },
    {
        "content": "<p>Okay, will do. Here's an initial PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/15822\">#15822</a></p>",
        "id": 291774137,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659477481
    },
    {
        "content": "<p>Even the basic boilerplate is a 100-line file with the documentation and everything <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 291774356,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659477599
    },
    {
        "content": "<p>The linter asked for an <code>inhabited</code> instance for <code>young_diagram</code>, so I added in the definition of the empty Young diagram as well.</p>",
        "id": 291774472,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659477630
    },
    {
        "content": "<p>Yeah so this is where <code>lower_finset</code> becomes interesting. You will soon want the order on Young tableaux and other order theoretic notions, so you better set it up in the full generality directly.</p>",
        "id": 291774614,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659477715
    },
    {
        "content": "<p>I don’t actually use that very much - I agree it’s relevant, but the stuff I plan to contribute doesn’t use stuff like (for example) intersection and union of Young diagrams.</p>",
        "id": 291776744,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659479037
    },
    {
        "content": "<p>I don’t even know if I use the <code>has_subset</code> instance more than a couple of times</p>",
        "id": 291776851,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659479094
    },
    {
        "content": "<p>For RSK at least, so far the only stuff I’ve needed is adding or deleting a box to a young diagram. I guess this is an order-theoretic notion (adding a covering element) actually.</p>",
        "id": 291777085,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659479234
    },
    {
        "content": "<p>Most of the meat involves <code>ssyt</code> stuff</p>",
        "id": 291777224,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659479317
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/116395-maths/topic/Young.20tableaux.20and.20RSK/near/291770165\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Young.20tableaux.20and.20RSK/near/291759876\">said</a>:</p>\n<blockquote>\n<p>Cool!!  My first thought (cc <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span>): Is there scope for a Sage extension calling<br>\n<a href=\"https://doc.sagemath.org/html/en/thematic_tutorials/algebraic_combinatorics/rsk.html\">https://doc.sagemath.org/html/en/thematic_tutorials/algebraic_combinatorics/rsk.html</a></p>\n</blockquote>\n<p>This isn't a topic I know anything about, are there concrete instances of things that you'd want to calculate? What is Sage being called to do and how are you using it In Lean?</p>\n</blockquote>\n<p>I'm not sure if I have a use case in mind here for Sage. If anything, maybe it should be the other way around -- if stuff is implemented in Lean with certificates of correctness, then maybe Sage will want access to Lean!</p>\n<p>At the moment my implementation of RSK is computable in Lean, so for example I can do</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#eval</span> <span class=\"n\">rsk</span> <span class=\"o\">[(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">)]</span> <span class=\"gr\">sorry</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">⟨[4, 2, 1]</span>\n<span class=\"cm\">□□□□</span>\n<span class=\"cm\">□□</span>\n<span class=\"cm\">□, (shape: [4, 2, 1]</span>\n<span class=\"cm\">1, 1, 1, 3</span>\n<span class=\"cm\">2, 2</span>\n<span class=\"cm\">3, shape: [4, 2, 1]</span>\n<span class=\"cm\">1, 1, 2, 2</span>\n<span class=\"cm\">2, 3</span>\n<span class=\"cm\">3)⟩</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>(The <code>sorry</code> is the omitted proof that the input is a sorted list. The output is a shape, a recording tableau and a bumping tableau. It's <a href=\"https://en.wikipedia.org/wiki/Robinson%E2%80%93Schensted%E2%80%93Knuth_correspondence#Example\">this example</a> from Wikipedia.)</p>",
        "id": 291789684,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659489717
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Regarding <code>lower_finset</code>, is there already a similar setup for other <code>set_like</code> objects like finite subgroups? Like, for any such object, there is always the analogous version whose carrier is a <code>finset</code>.</p>",
        "id": 291850571,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659533891
    },
    {
        "content": "<p>I do not think so, no.</p>",
        "id": 291850607,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659533910
    },
    {
        "content": "<p>I wonder if there’s a way to automatically provide such a thing, like <code>finset_like</code>.</p>",
        "id": 291850926,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1659534049
    },
    {
        "content": "<p>Hi all, <a href=\"https://github.com/leanprover-community/mathlib/pull/15822\">#15822</a> has been added to mathlib. For the next steps, I have a couple of options:</p>\n<ul>\n<li>Transposes, rows and columns (these are convenient to define together -- PR is just over 100 lines added)</li>\n<li>Adding and deleting a corner box (this is another thing that would apply in the generality of a hypothetical <code>lower_finset</code> since it amounts to extending a lower set by a covering element, or deleting a maximal element)</li>\n<li>Basic definition of SSYTs.</li>\n</ul>\n<p>Any preferences on what to PR next?</p>",
        "id": 294015156,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1660800539
    },
    {
        "content": "<p>Why not PR in parallel?</p>",
        "id": 294015335,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1660800686
    },
    {
        "content": "<p>Hmm, that would be pretty doable actually, those three are all independent from each other.</p>",
        "id": 294015499,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1660800790
    },
    {
        "content": "<p>Alright, <a href=\"https://github.com/leanprover-community/mathlib/pull/16120\">#16120</a> on transposes, rows and columns is ready for review.</p>",
        "id": 294016567,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1660801889
    },
    {
        "content": "<p>If anyone is interested in some code golf: the main thing I haven't done is to deduce facts about columns by transposing and applying the corresponding facts about rows. Instead all the column proofs are essentially copy/pasted from the rows section.</p>",
        "id": 294016699,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1660802002
    },
    {
        "content": "<p>Alright, <a href=\"https://github.com/leanprover-community/mathlib/pull/16195\">#16195</a> (semistandard Young tableaux) is ready.</p>",
        "id": 294611376,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1661148838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <a href=\"https://github.com/leanprover-community/mathlib/pull/16120/files#r951890226\">wrote</a>:</p>\n<blockquote>\n<p>Maybe you could write enough lemmas to carry the theory of <code>col</code> to <code>transpose.row</code> then use <code>simp</code>? One feature you might use are <a href=\"https://leanprover-community.github.io/mathlib_docs/commands.html#mk_simp_attribute\">simp sets,</a> so then you can for example write <code>simp with young_diagram_col_to_row</code> to invoke these lemmas.</p>\n</blockquote>\n<p>I have tried this, it seems to work OK, though in the end it doesn't exactly save work since the simp set takes longer to define than the number of lines it saves. Should I post it here or just push it to the PR?</p>",
        "id": 295129994,
        "sender_full_name": "Jake Levinson",
        "timestamp": 1661376652
    }
]