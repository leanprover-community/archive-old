[
    {
        "content": "<p>I was wondering whether it's possible to reconstruct a filter from the neighborhood filters it contains, at least when the filter has a basis of open sets, and allowing the space to be compact Hausdorff?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.separation</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">rebuild_le</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"bp\">''</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">𝓝</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">})</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ha</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">le_rebuild</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"c1\">-- a guess at sufficient assumptions</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">is_open</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">u</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"bp\">''</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">𝓝</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">})</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291070699,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658938334
    },
    {
        "content": "<p>Would you expect this to be true for a principal filter associated to a non-open set?</p>",
        "id": 291081492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658943008
    },
    {
        "content": "<p>I think your <code>h</code> doesn't say anything because u can be empty?</p>",
        "id": 291081647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1658943071
    },
    {
        "content": "<p>That was a mistake -- I want it to be a filter generated by open sets. No guarantees that this is correctly formulated yet.</p>",
        "id": 291082121,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658943270
    },
    {
        "content": "<p>I had imagined that if you have the filter generated by the open sets containing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> that this would be true.</p>\n<p>What I'd like is for every filter generated by open sets to be generated by all the open sets containing some set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>, and I'd like for <code>A = {a : α | 𝓝 a ≤ f}</code>. This might be too much to hope for.</p>",
        "id": 291082599,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658943443
    },
    {
        "content": "<p>The thought here is that in a compact hausdorff space, the neighborhood filters are the only minimal filters among all nonempty filters that are generated by open sets, so these are the only possible points of a filter generated by open sets.</p>",
        "id": 291083194,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658943677
    },
    {
        "content": "<p>It looks like it's true, though I still have a few sorries. <a href=\"https://gist.github.com/kmill/ec673e254e2950d11da1d39785405647\">https://gist.github.com/kmill/ec673e254e2950d11da1d39785405647</a></p>\n<p>The main theorem is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">filter_eq_nhds_principal_pts</span>\n  <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.is_open</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"bp\">𝓝'</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"bp\">𝓝</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>where <code>𝓝' s</code> is the filter generated by all the open sets containing <code>s</code>, and the <code>filter.is_open</code> predicate is whether a filter is generated by open sets. In a T1 space you get <code>𝓝' s ≤ 𝓝' s' ↔ s ⊆ s'</code> among other nice relations.</p>\n<p>The biggest <code>sorry</code> is that maximal open filters in a compact Hausdorff space are exactly neighborhood filters (I've proved it on paper, but it would be nice to put it into Lean to be sure, however I need some sleep!). The other sorries have to be true by abstract nonsense.</p>",
        "id": 291159200,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1659000186
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span>  By \"maximal\" open filters, you actually meant the minimal (ne_bot) ones right? It turns out the <code>nhds</code> filters usually aren't even minimal, because there are <code>nhds_within</code> open filters that are smaller. For example, in the (closed) unit interval [0,1], <code>nhds 0</code> is strictly larger than <code>nhds_within 0 {0}ᶜ</code>, which is in turn strictly larger than <code>nhds_within 0 s</code>, where s = {0, 1, 1/2, 1/3, 1/4, ...}ᶜ. The latter two are examples of filters that \"contains no points\" but are still not ⊥. Here's a formalization:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.separation</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.unit_interval</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">filter.is_open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"bp\">∈</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">u</span> <span class=\"bp\">⊆</span> <span class=\"n\">s</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nhds_is_open</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_open</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">hus</span><span class=\"o\">,</span> <span class=\"n\">ho</span><span class=\"o\">,</span> <span class=\"n\">hau</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_nhds_iff.1</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">ho.mem_nhds</span> <span class=\"n\">hau</span><span class=\"o\">,</span> <span class=\"n\">ho</span><span class=\"o\">,</span> <span class=\"n\">hus</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_open.principal</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓟</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_open</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">subset_rfl</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">filter.is_open.inf</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f.is_open</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">g.is_open</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⊓</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_open</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintro</span> <span class=\"n\">s</span> <span class=\"o\">⟨</span><span class=\"n\">t₁</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">t₂</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">u₁</span><span class=\"o\">,</span> <span class=\"n\">hu₁</span><span class=\"o\">,</span> <span class=\"n\">o₁</span><span class=\"o\">,</span> <span class=\"n\">hut₁</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"n\">t₁</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">u₂</span><span class=\"o\">,</span> <span class=\"n\">hu₂</span><span class=\"o\">,</span> <span class=\"n\">o₂</span><span class=\"o\">,</span> <span class=\"n\">hut₂</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hg</span> <span class=\"n\">t₂</span> <span class=\"n\">h₂</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">u₁</span> <span class=\"bp\">∩</span> <span class=\"n\">u₂</span><span class=\"o\">,</span> <span class=\"n\">filter.inter_mem_inf</span> <span class=\"n\">hu₁</span> <span class=\"n\">hu₂</span><span class=\"o\">,</span> <span class=\"n\">o₁.inter</span> <span class=\"n\">o₂</span><span class=\"o\">,</span> <span class=\"n\">set.inter_subset_inter</span> <span class=\"n\">hut₁</span> <span class=\"n\">hut₂</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nhds_within_is_open</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span><span class=\"o\">[</span><span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_open</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">nhds_is_open</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">inf</span> <span class=\"n\">hs.principal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nhds_within_compl_zero_lt</span> <span class=\"o\">:</span> <span class=\"bp\">𝓝</span><span class=\"o\">[{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">unit_interval</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">𝓝</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_le_not_le</span> <span class=\"n\">inf_le_left</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_nhds_iff.1</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">self_mem_nhds_within</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ht</span> <span class=\"n\">h0</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">reciprocal_seq</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unit_interval</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">unit_interval.div_mem</span><span class=\"bp\">;</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">swap</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nat.succ_le_succ</span><span class=\"o\">,</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">norm_num</span><span class=\"o\">}</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">nhds_within_compl_reciprocal_seq_lt</span> <span class=\"o\">:</span>\n  <span class=\"bp\">𝓝</span><span class=\"o\">[(</span><span class=\"n\">set.range</span> <span class=\"n\">reciprocal_seq</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">unit_interval</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">𝓝</span><span class=\"o\">[{</span><span class=\"mi\">0</span><span class=\"o\">}</span><span class=\"bp\">ᶜ</span><span class=\"o\">]</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">lt_of_le_not_le</span> <span class=\"o\">(</span><span class=\"n\">nhds_within_mono</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">set.compl_subset_compl.2</span> <span class=\"bp\">$</span>\n  <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">reciprocal_seq</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span> <span class=\"o\">})</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">he</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">self_mem_nhds_within</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"n\">hεs</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">metric.mem_nhds_iff.1</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">exists_nat_one_div_lt</span> <span class=\"n\">hε</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">reciprocal_seq</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hεs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">metric.ball</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"n\">abs</span> <span class=\"n\">_</span> <span class=\"bp\">&lt;</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">convert</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">reciprocal_seq</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span><span class=\"o\">,</span> <span class=\"n\">exact_mod_cast</span> <span class=\"o\">(</span><span class=\"n\">reciprocal_seq</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">ht</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">reciprocal_seq</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">subtype.ext_iff.1</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">one_div_ne_zero</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">nat.cast_ne_zero</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">he</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 291402072,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1659149430
    }
]