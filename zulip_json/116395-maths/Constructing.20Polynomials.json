[
    {
        "content": "<p>If I have <code>f : (↑(finset.range n) : set ℕ) → F</code>, what's the best way to turn this into a polynomial (where <code>f</code> is giving the coefficients of the polynomial)? It seems like a polynomial is secretly a finsupp, but turning <code>f</code> into a finsupp seems a bit painful (since some of the coefficients could be zero).</p>",
        "id": 214510774,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603658247
    },
    {
        "content": "<p>Probably something involving a suitable sum of <code>f i * X^i</code></p>",
        "id": 214510833,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603658293
    },
    {
        "content": "<p>And your next question is how to prove that the coefficient of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>i</mi></msup></mrow><annotation encoding=\"application/x-tex\">X^i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.824664em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span></span></span></span>, right?</p>",
        "id": 214510892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603658379
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- `on_finset s f hf` is the finsupp function representing `f` restricted to the finset `s`.</span>\n<span class=\"sd\">  The function needs to be `0` outside of `s`. Use this when the set needs to be filtered anyways,</span>\n<span class=\"sd\">  otherwise a better set representation is often available. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">on_finset</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">s.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 214511164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603658672
    },
    {
        "content": "<p>L298 of <code>data.finsupp.basic</code></p>",
        "id": 214511171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1603658686
    },
    {
        "content": "<p>and now your next question is how to show that when you evaluate it at <code>x : F</code> it agrees with the sum <code>f i * x^i</code>, right?</p>",
        "id": 214511212,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603658752
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I saw that, but wouldn't I need to extend f to all of the natural numbers?</p>",
        "id": 214511266,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603658807
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Actually it's just Kevin's question that I need</p>",
        "id": 214511283,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603658836
    },
    {
        "content": "<p>At the end, I just need to know that it's a polynomial of degree less than n whose coefficients agree with f</p>",
        "id": 214511298,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603658871
    },
    {
        "content": "<p>ah, lucky. But in general, using this <code>on_finset</code> directly would be breaking the abstraction that <code>polynomial</code> provides (or pretends to provide)</p>",
        "id": 214511365,
        "sender_full_name": "Reid Barton",
        "timestamp": 1603658936
    },
    {
        "content": "<p>For reference, I ended up going with the <code>finsupp.on_finset</code> approach, by first extending <code>f</code> to <code>ℕ</code> by <code>let g : ℕ → F := λ k, dite (k &lt; n) (λ h, f ⟨k, finset.mem_coe.mpr (finset.mem_range.mpr h)⟩) (λ h, 0),</code></p>",
        "id": 214519799,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603669777
    },
    {
        "content": "<p>it ended up being fine, albeit rather longwinded</p>",
        "id": 214519853,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1603669819
    }
]