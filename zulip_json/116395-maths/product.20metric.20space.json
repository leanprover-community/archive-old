[
    {
        "content": "<p>Does anyone understand why the following fails (both the uncommented line and the commented one):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">metric_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">metric_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span>\n  <span class=\"err\">⨅</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ε</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">principal</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">×</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"err\">⨅</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">×</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">uniformity</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- The next line type-checks but then `apply this` fails</span>\n  <span class=\"c1\">--have := @le_antisymm (filter $ (Π i, α i)×(Π i, α i)) (@filter.partial_order ((Π i, α i)×(Π i, α i))),</span>\n\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 159933571,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551721549
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> I guess you are the expert here. I'm trying to relate product metric space to product topology and uniform structure.</p>",
        "id": 159933738,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551721669
    },
    {
        "content": "<p>I guess you need to add parenthesis around ⨅</p>",
        "id": 159933836,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1551721724
    },
    {
        "content": "<p>More precisely, I already have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">lattice</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">uniform_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n<span class=\"n\">include</span> <span class=\"n\">U</span>\n\n<span class=\"kn\">instance</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span> <span class=\"o\">:</span> <span class=\"n\">uniform_space</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"err\">⨆</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">uniform_space</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">uniformity</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">uniformity</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span>  <span class=\"err\">⨅</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">uniformity</span> <span class=\"o\">:=</span>\n<span class=\"n\">supr_uniformity</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">uniform_continuous_proj</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">uniform_continuous</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">uniform_continuous_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_supr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">uniform_space</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">j</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">uniform_space_topology</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_topological_space</span> <span class=\"bp\">=</span> <span class=\"k\">Pi</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span> <span class=\"o\">:=</span>\n<span class=\"n\">to_topological_space_supr</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">complete</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">≤</span> <span class=\"n\">nhds</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:</span> <span class=\"n\">cauchy</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n      <span class=\"k\">from</span> <span class=\"n\">cauchy_map</span> <span class=\"o\">(</span><span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">uniform_continuous_proj</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">cauchy_iff_exists_le_nhds</span> <span class=\"err\">$</span> <span class=\"n\">map_ne_bot</span> <span class=\"n\">hf</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">key</span> <span class=\"o\">},</span>\n  <span class=\"n\">choose</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"n\">nhds</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">⨅</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">i</span><span class=\"o\">))),</span>\n        <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">pi</span><span class=\"bp\">.</span><span class=\"n\">uniform_space_topology</span> <span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">nhds_pi</span><span class=\"o\">,</span>\n      <span class=\"n\">le_infi_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">map_le_iff_le_comap</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>although I know Johannes will not like this instance so it  should be a def (because in case iota is not finite this is not necessarily the uniform structure you are interested in). Still, I'd like these lemmas to prove that a (finite) product of complete metric spaces is complete.</p>",
        "id": 159934050,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551721876
    },
    {
        "content": "<p><code>apply this</code> fails because <code>this</code> is an equality, and the goal is <code>le</code>? If I get rid of <code>apply_le_antisymm</code> it works</p>",
        "id": 159934079,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551721908
    },
    {
        "content": "<p>Doh! Adding parenthesis works indeed!</p>",
        "id": 159934153,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551721952
    },
    {
        "content": "<p>I wonder how Lean could parse the version without parenthesis</p>",
        "id": 159934160,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551721968
    },
    {
        "content": "<p>It didn't parse for me. It couldn't find a has_Inf instance for <code>Sort </code></p>",
        "id": 159934192,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551721998
    },
    {
        "content": "<p>Now I need to think about actually proving this (but Johannes or Sébastien or anyone else is very welcome to do it while I take care of the laundry)</p>",
        "id": 159934277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551722050
    },
    {
        "content": "<p>It parses if I make it a lemma. Prop is a complete lattice I guess.</p>",
        "id": 159934341,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551722114
    },
    {
        "content": "<p>Ooohh... It was indeed a lemma in my file</p>",
        "id": 159934447,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551722198
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">h</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">⨅</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">principal</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">}</span> <span class=\"bp\">=</span>\n  <span class=\"err\">⨅</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">×</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">uniformity</span><span class=\"o\">)</span>\n  <span class=\"bp\">=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span> <span class=\"n\">principal</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">×</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">}</span> <span class=\"bp\">=</span>\n  <span class=\"err\">⨅</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">×</span><span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">uniformity</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">infi_Prop_eq</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 159934742,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551722428
    },
    {
        "content": "<p>I can totally see Johannes not resisting the pleasure of defining this lattice instance</p>",
        "id": 159934797,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551722472
    },
    {
        "content": "<p>of course, this is an important instance!</p>",
        "id": 159935159,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1551722740
    },
    {
        "content": "<p>I can't think of a way of defining subset without this and <code>pi.complete_lattice</code>?</p>",
        "id": 159935435,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551722911
    }
]