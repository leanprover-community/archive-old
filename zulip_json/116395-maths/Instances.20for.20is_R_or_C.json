[
    {
        "content": "<p>I learned the other day that typeclass inference finds the <code>complete_space</code> and <code>proper_space</code> instances for finite-dimensional normed spaces over both <code>‚Ñù</code> and <code>‚ÑÇ</code> by typeclass inference.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/116395-maths/topic/Orthogonal.20projection/near/219951852\">said</a>:</p>\n<blockquote>\n<p>Over the reals, it's already registered as an instance.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">complete_space</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<p>(through <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional.proper_real\">docs#finite_dimensional.proper_real</a>). It also applies over the complexes as all the instances to see a complex vector space as a real vector space are already there:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚ÑÇ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">‚ÑÇ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">complete_space</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>question 1: It should be safe to register</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>right?  Since <code>complete_space</code> is Prop-valued, so there is no concern about duplicate instances.  Same for <code>proper_space</code>.</p>\n<p>question 2: Assuming it's safe, how do I do fill in the proof, since the proofs for  <code>‚Ñù</code> and <code>‚ÑÇ</code> are a little different?  Does <code>is_R_or_C</code> allow me to split into cases? <span class=\"user-mention\" data-user-id=\"311453\">@Fr√©d√©ric Dupuis</span></p>",
        "id": 220540793,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608503922
    },
    {
        "content": "<p>Yes, we definitely want the instance for <code>is_R_or_C</code>,  otherwise we can't use it to prove results for both <code>‚Ñù</code> and <code>‚ÑÇ</code> that require <code>complete_space</code>. The challenge is going to be to make sure that this instance is defeq with the existing ones in both cases.</p>",
        "id": 220542924,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1608507493
    },
    {
        "content": "<p>But in this case it shouldn't matter about being defeq, right?  Because <code>complete_space</code> is Prop-valued, no data.</p>",
        "id": 220542931,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608507528
    },
    {
        "content": "<p>Ah, right!</p>",
        "id": 220542951,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1608507560
    },
    {
        "content": "<p>Do you know where those two instances are defined?</p>",
        "id": 220542955,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1608507595
    },
    {
        "content": "<p>So how do I prove this? :). Can I break into cases somehow?</p>",
        "id": 220542957,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608507596
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"311453\">Fr√©d√©ric Dupuis</span> <a href=\"#narrow/stream/116395-maths/topic/Instances.20for.20is_R_or_C/near/220542955\">said</a>:</p>\n<blockquote>\n<p>Do you know where those two instances are defined?</p>\n</blockquote>\n<p>Taking <code>proper</code> first (since <code>complete</code> is deduced from that), it's just <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional.proper_real\">docs#finite_dimensional.proper_real</a>.</p>",
        "id": 220543007,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608507639
    },
    {
        "content": "<p>There's one of the axioms of <code>is_R_or_C</code> that can effectively be used to break into cases, but it won't be type equality.</p>",
        "id": 220543016,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1608507655
    },
    {
        "content": "<p>Using, for C, that a finite-dimensional space over C is also finite-dimensional over R.</p>",
        "id": 220543028,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608507681
    },
    {
        "content": "<p>Ah, then we should be able to do this as well without needing to break in into cases.</p>",
        "id": 220543087,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1608507748
    },
    {
        "content": "<p>(the latter is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional.complex_to_real\">docs#finite_dimensional.complex_to_real</a> apparently)</p>",
        "id": 220543100,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608507785
    },
    {
        "content": "<p>For instance this sort of trick is used here: <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/inner_product.html#exists_norm_eq_infi_of_complete_subspace\">https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/inner_product.html#exists_norm_eq_infi_of_complete_subspace</a></p>",
        "id": 220543157,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1608507844
    },
    {
        "content": "<p>Great, thank you!</p>",
        "id": 220543169,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608507868
    },
    {
        "content": "<p>OK, I can do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.finite_dimension</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.is_R_or_C</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"bp\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_R_or_C</span> <span class=\"bp\">ùïú</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finite_dimensional.is_R_or_C_to_real</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">ùïú</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">finite_dimensional.proper_is_R_or_C</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">proper_space</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">restrict_scalars.normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">restrict_scalars.is_scalar_tower</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">finite_dimensional.trans</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_instance</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>but how do I fill in the sorry?  We don't seem to have that <code>is_R_or_C</code> is finite-dimensional over <code>‚Ñù</code>, and presumably this instance, though safe to add to the library, will have a proof involving breaking into cases.</p>",
        "id": 220543986,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608509166
    },
    {
        "content": "<p>Hmm... good question!</p>",
        "id": 220544317,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1608509777
    },
    {
        "content": "<p>I could probably prove it directly from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_R_or_C.re_add_im_ax\">docs#is_R_or_C.re_add_im_ax</a>, would that be a hack?</p>",
        "id": 220545166,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608511248
    },
    {
        "content": "<p>I wouldn't say it's a hack, I think that's how it should be done!</p>",
        "id": 220545571,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1608511959
    },
    {
        "content": "<p>I think this together with <code>finite_dimensional.iff_fg</code> (and probably a lot of fiddling around...) will do the trick.</p>",
        "id": 220545595,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1608512018
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/5466\">#5466</a></p>",
        "id": 220554713,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1608528940
    }
]