[
    {
        "content": "<p>A more specific version of <a href=\"#narrow/stream/113488-general/subject/structure.20vs.20class/near/124574243\" title=\"#narrow/stream/113488-general/subject/structure.20vs.20class/near/124574243\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/structure.20vs.20class/near/124574243</a> (it may be easier to understand my problem by looking at code) is <a href=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/support.lean#L188\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/support.lean#L188\">https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/support.lean#L188</a> where I'm clearly very stupidly trying to Lean some trivial lemma. I'm completely tangled in coercions and type classes</p>",
        "id": 124593811,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522789720
    },
    {
        "content": "<p>I need two version of <code>supp</code> because I don't know how to have only one</p>",
        "id": 124593836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522789764
    },
    {
        "content": "<p>Then we have a classical <code>rw</code> failure on line 193 (always the same thing, <code>rw</code> itself doesn't do some kind of elaboration or reduction that is needed, and I still can't quite point out what)</p>",
        "id": 124593899,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522789849
    },
    {
        "content": "<p>Then I  would like line 196 to be unnecessary (with the ugly <code> (g.to_equiv).inv_fun</code> never appearing)</p>",
        "id": 124593923,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522789906
    },
    {
        "content": "<p>And finally the computation which should be easy (but still the core of the proof) and cannot do it</p>",
        "id": 124593970,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522789940
    },
    {
        "content": "<p>I'd like to know whether the full setup is broken from the beginning or I only need a couple a carefully crafted simp lemmas to hide this mess (and prove stuff).</p>",
        "id": 124593994,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522789998
    },
    {
        "content": "<p>cons_inj tells me about the lists being equal. Oops wrong topic.</p>",
        "id": 124594355,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522790406
    },
    {
        "content": "<p>I can see this topic has not much success. Maybe the context is too complicated because of topology. But I really think this will come up in other places. The question is: how to do group theory with groups of transformations? As long as you don't need to use the inverse of a transformation, you can easily  functions and composition of function. But what about inverses? Say I'm working with permutations of a type (not necessarily encoded as <code>perm</code> in current mathlib). I define the support of a permutation f as the complement supp f of the fixed point set (no topology here). I want to prove supp gfg⁻¹ = g(supp f). And ideally I would really like f, g and g⁻¹ to live in a type endowed with a group structure, because I have other group theoretic stuff to do. What encoding should I use? How to then talk about the image of a subset as in g(supp f)?</p>",
        "id": 124688060,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522959803
    },
    {
        "content": "<p>I got as far as cutting and pasting a 230 line file and then realising I didn't have the imports</p>",
        "id": 124688263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522960115
    },
    {
        "content": "<p>You define <code>suppp f</code> to be <code>supp f</code>?</p>",
        "id": 124688289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522960180
    },
    {
        "content": "<p>If you want to directly play with code it's much faster to git clone</p>",
        "id": 124688345,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960215
    },
    {
        "content": "<p>Yes, that definition is part of the problem</p>",
        "id": 124688349,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960224
    },
    {
        "content": "<p>I couldn't avoid it</p>",
        "id": 124688354,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960236
    },
    {
        "content": "<p>It's part of coercion/extension hell</p>",
        "id": 124688432,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960380
    },
    {
        "content": "<p><code>supp</code> is defined on functions from <code>X</code> to <code>X</code></p>",
        "id": 124688448,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960433
    },
    {
        "content": "<p>homeos have coercions to functions</p>",
        "id": 124688450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960441
    },
    {
        "content": "<p>but it's not enough</p>",
        "id": 124688494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960468
    },
    {
        "content": "<p>try to replace <code>suppp</code> by <code>supp</code> in the statement following that def and it won't type check</p>",
        "id": 124688499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960492
    },
    {
        "content": "<p>But it's probably easier to solve the problem as I described it today than to add the topology layer</p>",
        "id": 124688514,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960537
    },
    {
        "content": "<p>It's just too hard to make it work.</p>",
        "id": 124688561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522960580
    },
    {
        "content": "<p>I have mathlib not compiling.</p>",
        "id": 124688568,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522960601
    },
    {
        "content": "<p>make what work?</p>",
        "id": 124688569,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960604
    },
    {
        "content": "<p>I just pushed a version compatible with latest Lean nightly and mathlib head</p>",
        "id": 124688572,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960619
    },
    {
        "content": "<p>(only handling a renamed lemma)</p>",
        "id": 124688579,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960625
    },
    {
        "content": "<p>Now I have errors in commutators.lean and groups.lean</p>",
        "id": 124688725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522960811
    },
    {
        "content": "<p>those are old stuff irrelevant here</p>",
        "id": 124688738,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960834
    },
    {
        "content": "<p>they are not updated</p>",
        "id": 124688742,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960839
    },
    {
        "content": "<p>(this repo is my garbage repo, I'm sorry)</p>",
        "id": 124688745,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960848
    },
    {
        "content": "<p>Everything imported in <code>support.lean</code> is ok</p>",
        "id": 124688748,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960859
    },
    {
        "content": "<p>OK it now compiles. What's the question?</p>",
        "id": 124688757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522960872
    },
    {
        "content": "<p>Not that I'm likely to be able to answer it...</p>",
        "id": 124688762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522960883
    },
    {
        "content": "<p>How do you sort out the mess with <code>supp</code> vs <code>suppp</code>, <code>fundamental</code> vs <code>fundamental''</code>, how to remove the sorries in the proof of <code>supp_conj</code></p>",
        "id": 124688811,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522960943
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">equiv</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_apply</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">one_apply</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">def</span> <span class=\"n\">support</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">support</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">support</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">≠</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"k\">by</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_apply</span><span class=\"o\">,</span> <span class=\"n\">mul_apply</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_apply</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_self</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_inv_self</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">_</span> <span class=\"bp\">≠</span> <span class=\"bp\">_</span> <span class=\"bp\">∧</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"bp\">_</span> <span class=\"bp\">≠</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_apply</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_apply</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_apply</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_self</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">mul_apply</span><span class=\"o\">],</span>\n  <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">bijective</span> <span class=\"n\">g</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">rfl</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 124688881,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522961051
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 124688971,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522961224
    },
    {
        "content": "<p>I proved a bit of stuff about permutations a few months ago.</p>",
        "id": 124689034,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522961288
    },
    {
        "content": "<p>Thank you very much. Now I need to rewrite it in full tactic mode to see how it could help</p>",
        "id": 124689045,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522961345
    },
    {
        "content": "<p>The issue is that you are using coe everywhere?</p>",
        "id": 124689055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522961363
    },
    {
        "content": "<p>What do you mean using coe everywhere?</p>",
        "id": 124689076,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522961402
    },
    {
        "content": "<p>I need homeomorphisms to be able to act as functions</p>",
        "id": 124689123,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522961417
    },
    {
        "content": "<p>So yes, they coerce to functions</p>",
        "id": 124689124,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522961427
    },
    {
        "content": "<p>Is the reason the rw doesn't work on line 193 that you are pushing type class inference too hard?</p>",
        "id": 124689126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522961437
    },
    {
        "content": "<p>I have no idea</p>",
        "id": 124689186,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522961531
    },
    {
        "content": "<p>Clearly there is something I'm doing wrong</p>",
        "id": 124689188,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522961539
    },
    {
        "content": "<p>I only want to learn how to do it right</p>",
        "id": 124689194,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522961552
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>ambiguous overload, possible interpretations\n  right_inverse\n  function.right_inverse\n</pre></div>",
        "id": 124689259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522961644
    },
    {
        "content": "<p>where do you see that?</p>",
        "id": 124689274,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522961677
    },
    {
        "content": "<p>when I write <code>#check right_inverse</code></p>",
        "id": 124689278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522961691
    },
    {
        "content": "<p>I don't know how to check types of objects in the middle of Lean code.</p>",
        "id": 124689281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522961702
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> don't you have a version of your proof before obfuscation?</p>",
        "id": 124689282,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522961703
    },
    {
        "content": "<p>Is there an easy way to do that?</p>",
        "id": 124689287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522961706
    },
    {
        "content": "<p>This is something I wonder all the time</p>",
        "id": 124689288,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522961721
    },
    {
        "content": "<p>it seems the answer is no</p>",
        "id": 124689291,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522961731
    },
    {
        "content": "<p>You'd wonder it more if you were reading someone else's code...</p>",
        "id": 124689294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522961742
    },
    {
        "content": "<p>So what is <code> (g.to_equiv).to_fun</code>?</p>",
        "id": 124689413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522961905
    },
    {
        "content": "<p>The reason this topic didn't get much discussion is because you basically said \"there is something wrong, check out my code base and find the error\"</p>",
        "id": 124689414,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522961909
    },
    {
        "content": "<p>he said lots of things</p>",
        "id": 124689418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522961929
    },
    {
        "content": "<p>maybe there were lots of errors :-)</p>",
        "id": 124689420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522961935
    },
    {
        "content": "<p>Could you at least post the error message?</p>",
        "id": 124689421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522961940
    },
    {
        "content": "<p>(s)</p>",
        "id": 124689430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522961951
    },
    {
        "content": "<p>There is no error message. I can't prove stuff</p>",
        "id": 124689431,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522961968
    },
    {
        "content": "<p>Because I'm clearly going against Lean</p>",
        "id": 124689432,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522961985
    },
    {
        "content": "<p>Are you being anti-idiomatic?</p>",
        "id": 124689436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522961997
    },
    {
        "content": "<p>Not writing idiomatic Lean</p>",
        "id": 124689437,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522961999
    },
    {
        "content": "<p>exactly</p>",
        "id": 124689479,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962006
    },
    {
        "content": "<p>what? I am not in a position to see what you are talking about unless you say it here</p>",
        "id": 124689487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522962015
    },
    {
        "content": "<p>If you want to get to the bottom of the reason rewrite fails on line 193 you should write a MWE. But I know this isn't your real question.</p>",
        "id": 124689505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962065
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> don't you have a version of your proof before obfuscation?</p>\n</blockquote>\n<p>That's how I wrote it first time. I shouldn't have opened the <code>perm</code> namespace, so if it didn't work that's probably why.</p>",
        "id": 124689522,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522962094
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is there a way of checking the type of a term in the middle of a tactic proof?</p>",
        "id": 124689526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962109
    },
    {
        "content": "<p>I tried to describe my problems in <a href=\"#narrow/stream/113488-general/subject/structure.20vs.20class/near/124574243\" title=\"#narrow/stream/113488-general/subject/structure.20vs.20class/near/124574243\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/structure.20vs.20class/near/124574243</a> without code, and then I posted link to my actual code. Then I tried to describe a simplified problem. I don't what I could do better to ask for help</p>",
        "id": 124689530,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962117
    },
    {
        "content": "<p>i.e. I can't check it outside the begin/end block because the term is only constructed within the block</p>",
        "id": 124689571,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962130
    },
    {
        "content": "<p>I'm honestly asking</p>",
        "id": 124689572,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962134
    },
    {
        "content": "<p>So what is <code> (g.to_equiv).to_fun</code>?</p>",
        "id": 124689582,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962168
    },
    {
        "content": "<p>It's the function underlying the homeomorphism g</p>",
        "id": 124689588,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962184
    },
    {
        "content": "<p>for <code>g : homeo X X</code></p>",
        "id": 124689592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962190
    },
    {
        "content": "<p>But it goes through two conversions</p>",
        "id": 124689595,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962192
    },
    {
        "content": "<p>First to <code>equiv X X</code> and then to <code>X -&gt; X</code></p>",
        "id": 124689601,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962213
    },
    {
        "content": "<p>When you write <code>g '' ...</code></p>",
        "id": 124689602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962221
    },
    {
        "content": "<p>what do you think happens there?</p>",
        "id": 124689604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962228
    },
    {
        "content": "<p>That's mathlib notation for image of a subset</p>",
        "id": 124689607,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962237
    },
    {
        "content": "<p>Lean does figure out the coercions here</p>",
        "id": 124689647,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962255
    },
    {
        "content": "<p><code>set.image</code> so it takes a function</p>",
        "id": 124689649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962257
    },
    {
        "content": "<p>and which function does it take?</p>",
        "id": 124689653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962267
    },
    {
        "content": "<p>Is there some coe directly from homeo to the function?</p>",
        "id": 124689678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962305
    },
    {
        "content": "<p><code>(g.to_equiv).to_fun</code></p>",
        "id": 124689681,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962310
    },
    {
        "content": "<p>yes</p>",
        "id": 124689684,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962315
    },
    {
        "content": "<p>That's what it uses?</p>",
        "id": 124689685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962316
    },
    {
        "content": "<p><code>instance : has_coe_to_fun (homeo α β) := ⟨_, λ f, f.to_fun⟩</code></p>",
        "id": 124689691,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962336
    },
    {
        "content": "<p>is defined in <code>homeos.lean</code></p>",
        "id": 124689695,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962344
    },
    {
        "content": "<p>It's indeed the same as <code>(g.to_equiv).to_fun</code></p>",
        "id": 124689723,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962363
    },
    {
        "content": "<p>This is a funny error message then:</p>",
        "id": 124689742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962370
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>rewrite tactic failed, did not find instance of the pattern in the target expression\n  (g.to_equiv).to_fun &#39;&#39; {a : X | (λ (x : X), f x ≠ x) a}\nstate:\nX : Type,\n_inst_3 : topological_space X,\nf g : homeo X X\n⊢ {x : X | conj g f x ≠ x} = g &#39;&#39; {x : X | f x ≠ x}\n</pre></div>",
        "id": 124689744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962374
    },
    {
        "content": "<p>Is it definitionally the same?</p>",
        "id": 124689756,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962402
    },
    {
        "content": "<p>rw doesn't do definitionally equal things.</p>",
        "id": 124689771,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522962436
    },
    {
        "content": "<p>oh yeah</p>",
        "id": 124689776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962443
    },
    {
        "content": "<p>that's the second time I've forgotten that this week</p>",
        "id": 124689779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962457
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">homeo</span> <span class=\"n\">X</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span><span class=\"bp\">.</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 124689785,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962470
    },
    {
        "content": "<p>Chris points out the problem</p>",
        "id": 124689829,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962490
    },
    {
        "content": "<p>Yes, I understand this is the problem with the rewrite</p>",
        "id": 124689831,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962498
    },
    {
        "content": "<p>definitionally equivalent is not enough</p>",
        "id": 124689833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962503
    },
    {
        "content": "<p>But I'd like to know the proper way of either not having this problem or workaround it</p>",
        "id": 124689838,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962517
    },
    {
        "content": "<p>without doing this <code>swap, exact ...</code> thing</p>",
        "id": 124689850,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962550
    },
    {
        "content": "<p>Never use <code>( g.to_equiv).to_fun</code>?</p>",
        "id": 124689854,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522962564
    },
    {
        "content": "<p>I don't write this myself</p>",
        "id": 124689863,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962589
    },
    {
        "content": "<p>I usually use <code>show</code> otherwise.</p>",
        "id": 124689868,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522962593
    },
    {
        "content": "<p>it only appears in goals and error messages</p>",
        "id": 124689872,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962599
    },
    {
        "content": "<p>What is this <code>λ h : _ ≠ _,</code> dark magic?</p>",
        "id": 124689928,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962632
    },
    {
        "content": "<p>I had problems with coercions when I was doing schemes so I just stopped using them completely</p>",
        "id": 124689929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962635
    },
    {
        "content": "<p>and wrote everything out in full</p>",
        "id": 124689930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962639
    },
    {
        "content": "<p>How do you do it in tactic mode?</p>",
        "id": 124689933,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962648
    },
    {
        "content": "<p>show works in tactic mode</p>",
        "id": 124689935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962656
    },
    {
        "content": "<p>Kevin, how would you do group theory with permutations of a Type without coercions?</p>",
        "id": 124689952,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962685
    },
    {
        "content": "<p><code> show _ ≠ _ </code> :-)</p>",
        "id": 124689958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962698
    },
    {
        "content": "<p>You both need elements of the group to act on points and to have inverses</p>",
        "id": 124689962,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962702
    },
    {
        "content": "<p>Re: <code>_ ≠ _</code> he does this in place of <code>intro</code></p>",
        "id": 124690007,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962727
    },
    {
        "content": "<p>I'm just saying that you just write the coercions explicitly.</p>",
        "id": 124690009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962733
    },
    {
        "content": "<p>That was what I did when I got sick of getting type class inference to work. I just wrote down everything myself.</p>",
        "id": 124690013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962752
    },
    {
        "content": "<p>There must be a better way</p>",
        "id": 124690085,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962848
    },
    {
        "content": "<p>In real world you would never need to distinguish the element of a group of transformation from themselves like this</p>",
        "id": 124690100,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522962882
    },
    {
        "content": "<p>the real world doesn't use dependent type theory</p>",
        "id": 124690118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962928
    },
    {
        "content": "<p>it uses one piece of notation to mean more than one thing</p>",
        "id": 124690122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962937
    },
    {
        "content": "<p>and we're so used to that, that this world can be kind of annoying sometimes</p>",
        "id": 124690129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962956
    },
    {
        "content": "<p>with their silly pedantic fussing</p>",
        "id": 124690167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962964
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>show {x : X | conj g f x ≠ x} = g.to_equiv.to_fun &#39;&#39; {x : X | f x ≠ x},\nrw aux_1 g.right_inv,\n</pre></div>",
        "id": 124690176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962978
    },
    {
        "content": "<p>works for 193 ;-)</p>",
        "id": 124690178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522962983
    },
    {
        "content": "<p>I don't understand what <code>show</code> does here</p>",
        "id": 124690265,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522963124
    },
    {
        "content": "<p>Usually I need to supply a proof after <code>show</code></p>",
        "id": 124690267,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522963136
    },
    {
        "content": "<p>it rewrites the goal into a definitionally equivalent form</p>",
        "id": 124690273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522963143
    },
    {
        "content": "<p>If the goal is X, then <code>show X,</code> does nothing</p>",
        "id": 124690277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522963151
    },
    {
        "content": "<p>if the goal is definitionally equal to X, it changes the goal to X</p>",
        "id": 124690280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522963161
    },
    {
        "content": "<p>I can see it's doing that here. But what's the link with <code>show</code> I usually use?</p>",
        "id": 124690287,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522963182
    },
    {
        "content": "<p>which I guess is in term mode</p>",
        "id": 124690291,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522963190
    },
    {
        "content": "<p>I don't know, this is the only show I use</p>",
        "id": 124690293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522963194
    },
    {
        "content": "<p>tactic mode is the bomb</p>",
        "id": 124690294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522963197
    },
    {
        "content": "<p>I use <code>show</code> in arguments to <code>rw</code> and <code>simp</code> for easy stuff I don't want to state and name using <code>have</code> beforehand</p>",
        "id": 124690370,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522963255
    },
    {
        "content": "<p>Line 190: <code>lemma  supp_conj (f g : homeo X X) : supp (conj g f : homeo X X) = g '' supp f :=</code> works</p>",
        "id": 124690467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522963436
    },
    {
        "content": "<p>i.e. I removed <code>suppp</code></p>",
        "id": 124690530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522963462
    },
    {
        "content": "<p>Very interesting</p>",
        "id": 124690543,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522963497
    },
    {
        "content": "<p>You are using <code>f</code> and <code>g</code> to mean two different things, and it guessed you wanted the map not the homeo here</p>",
        "id": 124690545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522963499
    },
    {
        "content": "<p>the second suppp could just be removed, but the first one had to be persuaded</p>",
        "id": 124690553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522963513
    },
    {
        "content": "<p>Probably because <code>perm X</code> is also a group</p>",
        "id": 124690561,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522963532
    },
    {
        "content": "<p>and Lean doesn't know the group structure on <code>homeo X X</code> is induced as a subgroup of <code>perm X</code></p>",
        "id": 124690627,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522963569
    },
    {
        "content": "<blockquote>\n<p>Then I  would like line 196 to be unnecessary (with the ugly <code> (g.to_equiv).inv_fun</code> never appearing)</p>\n</blockquote>\n<p>I don't understand this one. Is there another name for <code>g.to_equiv.inv_fun</code>?</p>",
        "id": 124690659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522963681
    },
    {
        "content": "<p>It's <code>g⁻¹</code>!</p>",
        "id": 124690712,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522963710
    },
    {
        "content": "<p>You can put <code>show {x : X | conj g f x ≠ x} = {b : X | f (g⁻¹ b) ≠ g⁻¹ b}</code> on line 196 if you like...</p>",
        "id": 124690856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522963934
    },
    {
        "content": "<p>but you are complaining about the congr?</p>",
        "id": 124690867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522963968
    },
    {
        "content": "<p>You want to prove two sets are equal and you don't want to use congr then funext?</p>",
        "id": 124690884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964034
    },
    {
        "content": "<p>No I don't complain about congr and funext</p>",
        "id": 124690933,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964079
    },
    {
        "content": "<p>I don't complain at all actually, I try to learn</p>",
        "id": 124691006,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964183
    },
    {
        "content": "<p>I mean I complain that I'm not yet learned</p>",
        "id": 124691011,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964204
    },
    {
        "content": "<p>but I don't complain to anybody but me</p>",
        "id": 124691014,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964212
    },
    {
        "content": "<p>I really don't understand Chris's proof at all</p>",
        "id": 124691037,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964276
    },
    {
        "content": "<p>I can't translate it into tactic mode</p>",
        "id": 124691080,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964290
    },
    {
        "content": "<p>Hence I cannot understand it</p>",
        "id": 124691084,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964295
    },
    {
        "content": "<p>I have a really hard time imagining people actually thinking like this (without first writing the tactic proof and then obfuscate it in term mode)</p>",
        "id": 124691093,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964334
    },
    {
        "content": "<p>I do believe you Chris, but my imagination is failing me</p>",
        "id": 124691107,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964350
    },
    {
        "content": "<p>Your comments before the computation seem a bit superficial to me, in the sense that I would not care about any of them myself if they came up in my Lean work.</p>",
        "id": 124691169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964422
    },
    {
        "content": "<p>But the computation is a more serious matter.</p>",
        "id": 124691173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964429
    },
    {
        "content": "<p>The computation is the actual proof</p>",
        "id": 124691188,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964468
    },
    {
        "content": "<p>everything before the computation is distraction</p>",
        "id": 124691198,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964487
    },
    {
        "content": "<p>oh wait</p>",
        "id": 124691262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964527
    },
    {
        "content": "<p>the computation</p>",
        "id": 124691271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964535
    },
    {
        "content": "<p>you write Prop = Prop?</p>",
        "id": 124691277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964544
    },
    {
        "content": "<p>There's no other way?</p>",
        "id": 124691280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964550
    },
    {
        "content": "<p>yes I write Prop = Prop</p>",
        "id": 124691283,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964557
    },
    {
        "content": "<p>Maybe iff would be better with props</p>",
        "id": 124691287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964563
    },
    {
        "content": "<p>That's because we see sets as map from X to  Prop</p>",
        "id": 124691305,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964598
    },
    {
        "content": "<p>oh</p>",
        "id": 124691316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964617
    },
    {
        "content": "<p>So the goal is really Prop = Prop</p>",
        "id": 124691372,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964643
    },
    {
        "content": "<p>eew</p>",
        "id": 124691379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964647
    },
    {
        "content": "<p>because we use funext to get rid of X here</p>",
        "id": 124691384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964655
    },
    {
        "content": "<p>Ok so your question really is something else</p>",
        "id": 124691387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964661
    },
    {
        "content": "<p>But of course on paper I would write iff</p>",
        "id": 124691394,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964686
    },
    {
        "content": "<p>You want to show <code>{x | p x} = {x | q x}</code></p>",
        "id": 124691400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964696
    },
    {
        "content": "<p>x is in this set iff .. iff .. iff ... done</p>",
        "id": 124691406,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964705
    },
    {
        "content": "<p>I don't think you should use congr and then funext</p>",
        "id": 124691409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964706
    },
    {
        "content": "<p>yes</p>",
        "id": 124691420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964719
    },
    {
        "content": "<p>iff</p>",
        "id": 124691423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964721
    },
    {
        "content": "<p>Remember <code>{x | p x}</code> is only syntactic sugar for <code>p</code></p>",
        "id": 124691429,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964735
    },
    {
        "content": "<p>sure</p>",
        "id": 124691433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964741
    },
    {
        "content": "<p>but there are lemmas like sets X and Y are equal iff X subseteq Y and Y subseteq X</p>",
        "id": 124691441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964757
    },
    {
        "content": "<p>or whatever</p>",
        "id": 124691480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964763
    },
    {
        "content": "<p><code>set.ext</code> is what you're talking about</p>",
        "id": 124691493,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1522964790
    },
    {
        "content": "<p>Sure, but here I can prove (on paper) direct equality</p>",
        "id": 124691494,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964790
    },
    {
        "content": "<p>But you can't prove any of your intermediate steps!</p>",
        "id": 124691503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964808
    },
    {
        "content": "<p>So surely this is an indication that trying to prove p x = q x is a bad idea</p>",
        "id": 124691510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964823
    },
    {
        "content": "<p>I would use set.ext instead of congr, funext</p>",
        "id": 124691585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964903
    },
    {
        "content": "<p>and then try the calc with iff's</p>",
        "id": 124691590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522964911
    },
    {
        "content": "<p>indeed <code>apply set.ext</code> transforms the goal to iff</p>",
        "id": 124691592,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964914
    },
    {
        "content": "<p>But my sorry where there because I couldn't use <code>rw</code>, not because I was proving <code>p x = q x</code></p>",
        "id": 124691606,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522964954
    },
    {
        "content": "<p>So what happens if you use set.ext and then try to push the calc through? I can't pass the <code>rw show  ∀ b, (g.to_equiv).inv_fun b = g⁻¹ b, from  λ b, rfl,</code> line</p>",
        "id": 124691686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522965064
    },
    {
        "content": "<p>because I don't really know what's going on</p>",
        "id": 124691689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522965070
    },
    {
        "content": "<p>I don't understand what you don't know</p>",
        "id": 124691752,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522965141
    },
    {
        "content": "<p>I have never seen congr_n in my life</p>",
        "id": 124691755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522965155
    },
    {
        "content": "<p>I don't know what all this rw show business is all about</p>",
        "id": 124691758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522965162
    },
    {
        "content": "<p>how is that different to just show</p>",
        "id": 124691762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522965166
    },
    {
        "content": "<p>can you just write it for me?</p>",
        "id": 124691771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522965181
    },
    {
        "content": "<p><code>congr_n 1</code> is like <code>congr</code> but stops after one step instead of recursing</p>",
        "id": 124691786,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522965210
    },
    {
        "content": "<p>how do you get from not X iff not Y to X iff Y?</p>",
        "id": 124691837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522965250
    },
    {
        "content": "<p>if the goal is <code>f (a + b) = f (c + d)</code> and you <code>congr_n 1</code>, the new goal will be <code>a+b = c+d</code>. With <code>congr</code> it would become two random goals  like <code>a=c</code> and <code>b = d</code></p>",
        "id": 124691841,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522965271
    },
    {
        "content": "<p>In this case <code>f</code> is <code>not</code></p>",
        "id": 124691847,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522965290
    },
    {
        "content": "<p>By the way, I don't know how to get rid of these <code>not</code> once I go to iff instead of =</p>",
        "id": 124691922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522965411
    },
    {
        "content": "<p>not_iff_not.2</p>",
        "id": 124691924,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522965422
    },
    {
        "content": "<p>but there's a catch...</p>",
        "id": 124691942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522965447
    },
    {
        "content": "<p><code> ⊢ decidable (f (g⁻¹ x) = g⁻¹ x) </code></p>",
        "id": 124691945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522965458
    },
    {
        "content": "<p>so I hope you are only interested in decidable topological spaces...</p>",
        "id": 124691946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522965474
    },
    {
        "content": "<p>;-)</p>",
        "id": 124691947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522965479
    },
    {
        "content": "<p>It's funny, as you saw with Adam, most people with a cs background start out in term mode</p>",
        "id": 124691985,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522965486
    },
    {
        "content": "<p>most people with a maths background think lambda is a real number</p>",
        "id": 124691993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522965508
    },
    {
        "content": "<p>I think it's simply familiarity with functional programming concepts</p>",
        "id": 124692004,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522965541
    },
    {
        "content": "<p>Once you spend enough time looking at term mode statements they really do become more understandable <span class=\"emoji emoji-1f642\" title=\"simple smile\">:simple_smile:</span></p>",
        "id": 124692026,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1522965598
    },
    {
        "content": "<p>I just found it using <code>find</code>!</p>",
        "id": 124692030,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522965602
    },
    {
        "content": "<p><code>#find (¬ _ ↔ ¬ _) ↔ (_ ↔ _)</code> does work!</p>",
        "id": 124692079,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522965612
    },
    {
        "content": "<p><span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span> <span class=\"user-mention\" data-user-id=\"110024\">@Sebastian Ullrich</span></p>",
        "id": 124692081,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522965622
    },
    {
        "content": "<p>I found it by guessing what it was called ;-)</p>",
        "id": 124692096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522965672
    },
    {
        "content": "<p>Now what is this <code>decidable</code> crap? I have <code>noncomputable theory\nlocal attribute [instance] classical.prop_decidable</code> on top of my file</p>",
        "id": 124692100,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522965720
    },
    {
        "content": "<p>Even the iff's need some work. I'm beginning to think you were better off with =. but I have to go now, childcare calls</p>",
        "id": 124692101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522965720
    },
    {
        "content": "<p>Why isn't it enough</p>",
        "id": 124692146,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522965734
    },
    {
        "content": "<p>I need to sleep actually, I have a train to catch at an insane time tomorrow to go and give a talk about fuzzy maths in Köln</p>",
        "id": 124692156,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522965772
    },
    {
        "content": "<p>and why this <code>decidable</code> stuff didn't come up in my <code>=</code> instead of iff stuff?</p>",
        "id": 124692190,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522965838
    },
    {
        "content": "<p>Anyway, thank you very much for your help, and thank Chris to</p>",
        "id": 124692239,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522965862
    },
    {
        "content": "<p>I have enough food for thought on the train</p>",
        "id": 124692343,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522965964
    },
    {
        "content": "<p>Except that I would like to understand how to tell Lean I really don't care about the <code>decidable</code> metaphysics</p>",
        "id": 124692361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522965989
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is there a global command to say everything should be assumed to have decidable equality?</p>",
        "id": 124692389,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522966037
    },
    {
        "content": "<p>Is your problem simply that g is not an element of perm X? What happens if you define fp to be the permutation underlying f and gp for g, then use lemmas about groups acting on sets?</p>",
        "id": 124693410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522967585
    },
    {
        "content": "<p>All those iff statements are going to follow from standard lemmas about groups acting on sets. I have no idea if they're there already but that is surely the way to finish the job. Groups acting on sets should be in mathlib (I don't know if it's there already) and then all the lemmas should be proved in the same file and then you just apply them and you're home</p>",
        "id": 124693620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1522967890
    },
    {
        "content": "<blockquote>\n<p>is there a global command to say everything should be assumed to have decidable equality? </p>\n</blockquote>\n<p><code>local attribute [instance] classical.prop_decidable</code> should do that</p>",
        "id": 124702399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522986164
    },
    {
        "content": "<p>Hum. It turns out I can indeed use <code>apply_instance</code> in both cases. This is the first time I need this tactic in a context where I'm not using <code>example</code> to check whether an instance is working</p>",
        "id": 124703691,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522989056
    },
    {
        "content": "<p>Do you understand why <code> apply not_iff_not.2,</code> can spawn those goals without trying <code>apply_instance</code>?</p>",
        "id": 124703700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522989100
    },
    {
        "content": "<p>What's the context?</p>",
        "id": 124703801,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522989353
    },
    {
        "content": "<p>Also, you should probably use <code>not_congr</code> instead, which doesn't have those extra assumptions</p>",
        "id": 124703841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522989393
    },
    {
        "content": "<p>I'm currently working on doing what I can with your file</p>",
        "id": 124703844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522989415
    },
    {
        "content": "<p>I don't think <code>aux_1</code> is true without assuming <code>f</code> and <code>g</code> are two-sided inverses</p>",
        "id": 124703849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522989441
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>lemma aux_1 {α : Type*} {β : Type*} {f : α → β} {g : β → α}\n  (h₁ : function.left_inverse g f) (h₂ : function.right_inverse g f)\n  (p : α → Prop) : f &#39;&#39; {a : α | p a} = {b : β | p (g b)} :=\nset.ext $ λ b, mem_image_iff_of_inverse h₁ h₂\n</pre></div>",
        "id": 124703851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522989465
    },
    {
        "content": "<p>This works for supp_conj:</p>\n<div class=\"codehilite\"><pre><span></span>lemma supp_conj (f g : homeo X X) : supp (conj g f : homeo X X) = g &#39;&#39; supp f :=\n</pre></div>",
        "id": 124703946,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522989639
    },
    {
        "content": "<p>Here's a proof of supp_conj:</p>\n<div class=\"codehilite\"><pre><span></span>-- should be in equiv.lean\ntheorem equiv.left_inverse (f : α ≃ β) : left_inverse f.symm f := f.left_inv\n\ntheorem equiv.right_inverse (f : α ≃ β) : function.right_inverse f.symm f := f.right_inv\n\n-- should be in homeos.lean\ntheorem homeo.left_inverse (f : homeo α β) : left_inverse f.symm f := f.left_inv\n\ntheorem homeo.right_inverse (f : homeo α β) : function.right_inverse f.symm f := f.right_inv\n\ntheorem homeo.bijective (f : homeo α β) : bijective f := f.to_equiv.bijective\n\n@[simp] theorem aut_mul_val (f g : homeo α α) (x) : (f * g) x = f (g x) :=\nhomeo.comp_val _ _ _\n\n@[simp] theorem aut_one_val (x) : (1 : homeo α α) x = x := rfl\n\n@[simp] theorem aut_inv (f : homeo α α) : f⁻¹ = f.symm := rfl\n\nlemma supp_conj (f g : homeo X X) : supp (conj g f : homeo X X) = g &#39;&#39; supp f :=\nbegin\n  unfold supp,\n  rw homeo.image_closure,\n  congr_n 1,\n  apply set.ext (λ x, _),\n  rw mem_image_iff_of_inverse g.left_inverse g.right_inverse,\n  apply not_congr,\n  dsimp [conj],\n  exact calc\n     (g * f * g⁻¹) x = x\n        ↔ g⁻¹ (g (f (g⁻¹ x))) = g⁻¹ x : by simp [(g⁻¹).bijective.1.eq_iff]\n    ... ↔ (f (g⁻¹ x)) = g⁻¹ x : by rw [← aut_mul_val, mul_left_inv]; simp\nend\n</pre></div>",
        "id": 124705045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522992215
    },
    {
        "content": "<p>A million thanks!</p>",
        "id": 124705433,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522992974
    },
    {
        "content": "<p>This looks very nice</p>",
        "id": 124705440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522992992
    },
    {
        "content": "<p>Right now I'm at the train station typing on my phone but I'll try this on the train</p>",
        "id": 124705459,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522993067
    },
    {
        "content": "<p>Question about stuff you indicated as belonging to homeos.lean: are those restatements needed because of modeling mistakes I made or is it normal? I don't mind having them but I try to understand how to do things right.</p>",
        "id": 124705561,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522993255
    },
    {
        "content": "<p>It is normal. Since you have a <code>coe_fn</code> instance for homeo, the coercion there is not written by composing other coercions so you have to restate theorems about the underlying function if you want them as simp lemmas or projections</p>",
        "id": 124705616,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522993386
    },
    {
        "content": "<p>I put all the stuff together and PR'd it to your repo: <a href=\"https://github.com/PatrickMassot/lean-scratchpad/pull/1\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-scratchpad/pull/1\">https://github.com/PatrickMassot/lean-scratchpad/pull/1</a></p>",
        "id": 124705667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522993538
    },
    {
        "content": "<p>Should I remove this coercion and have a coercion to equiv?</p>",
        "id": 124705762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522993723
    },
    {
        "content": "<p>I think it is okay, especially if you expect it will get a lot of use. Otherwise the arrows can pile up</p>",
        "id": 124705770,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522993762
    },
    {
        "content": "<p>Ok. Thank you very much</p>",
        "id": 124705945,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522994123
    },
    {
        "content": "<p>I even managed to merge using the crappy train station wifi</p>",
        "id": 124705948,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1522994156
    },
    {
        "content": "<p>let me know if you want an explanation on something I did there</p>",
        "id": 124706045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1522994293
    },
    {
        "content": "<blockquote>\n<p>I tried to describe my problems in <a href=\"#narrow/stream/113488-general/subject/structure.20vs.20class/near/124574243\" title=\"#narrow/stream/113488-general/subject/structure.20vs.20class/near/124574243\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/structure.20vs.20class/near/124574243</a> without code, and then I posted link to my actual code. Then I tried to describe a simplified problem. I don't what I could do better to ask for help</p>\n</blockquote>\n<p>Write a MWE. I am much more inclined to look at code if I can just cut and paste it and it works first time. Git cloning and then downloading a new mathlib and building everything was a PITA and I couldn't possibly answer a question of the form \"why does line 193 not work\" without doing all that.</p>",
        "id": 124714183,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523011052
    },
    {
        "content": "<blockquote>\n<p>I even managed to merge using the crappy train station wifi</p>\n</blockquote>\n<p>git is great for that isn't it.</p>",
        "id": 124714242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523011157
    },
    {
        "content": "<blockquote>\n<p>Should I remove this coercion and have a coercion to equiv?</p>\n</blockquote>\n<p>It seemed to me that one problem was you had coes from homeo to perm, from perm to fun and from homeo to fun. You had set it up so that the two maps from homeo to fun were definitionally equal (and if they weren't it would surely have been a nightmare) but even with definitional equality this didn't help with rw. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Can there be some version of rw which takes definitonal equality into account? i.e. \"the user said rw (proof of X = Y) and I can't find X in the goal so I'll now start trying to find some term in the goal which is definitionally equal to X\"?</p>",
        "id": 124714355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523011357
    },
    {
        "content": "<p>I've read <code>erw</code> does that, but I've never managed to use it.</p>",
        "id": 124714443,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523011590
    }
]