[
    {
        "content": "<p>Does <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/classicalize/near/224871122\">Yury's rule of thumb</a> say that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.to_finset_inter\">docs#set.to_finset_inter</a> and the other lemmas around there should have a <code>[decidable_eq α]</code> assumption  rather than the (equivalent of) <code>open_locale classical</code> <a href=\"https://github.com/leanprover-community/mathlib/blob/362619ebc74073495414578128b9bcb10879aa57/src/data/set/finite.lean#L589\">here</a>? The issue is that you can't do things like intersections on finsets without decidable equality. I am still trying to get to grips with this rule of thumb. It's one reason I stay away from finsets :-)</p>",
        "id": 226540889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613494390
    },
    {
        "content": "<p>Yeah, I think that's right.</p>",
        "id": 226541473,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613494589
    },
    {
        "content": "<p>oh this is annoying, if I remove the classical.prop_decidable and add decidable_eq alpha then the statement of <code>to_finset_inter</code> still doesn't compile:</p>\n<div class=\"codehilite\" data-code-language=\"Text only\"><pre><span></span><code>failed to synthesize type class instance for\nα : Type ?,\n_inst_1 : fintype α,\n_inst_2 : decidable_eq α,\ns t : set α\n⊢ fintype ↥s\n</code></pre></div>\n<p>I don't need this for anything, I've just been reading <code>data.set.finite</code> recently and the <code>[priority 1]</code> thing caught my eye,</p>",
        "id": 226543239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613495251
    },
    {
        "content": "<p>You need <code>decidable_pred s</code> too</p>",
        "id": 226543501,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613495340
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 226543524,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1613495351
    },
    {
        "content": "<p>That needs the assumption <code>decidable_pred (\\in s)</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.fintype\">docs#subtype.fintype</a></p>",
        "id": 226543556,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613495364
    },
    {
        "content": "<p>So what does the rule of thumb say for this?</p>",
        "id": 226543691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613495411
    },
    {
        "content": "<p>I just add decidable_pred s as well as decidable_eq alpha?</p>",
        "id": 226543761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613495445
    },
    {
        "content": "<p>Or perhaps it says add <code>[fintype ↥s]</code> directly?</p>",
        "id": 226543810,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613495465
    },
    {
        "content": "<p>Can one make a linter to spot these things? The only reason I'm interested was that it burnt Amelia last week.</p>",
        "id": 226543894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613495499
    },
    {
        "content": "<p>Which is better out of <code>decidable_pred s</code> and <code>decidable_pred (∈ s)</code>? Both work.</p>",
        "id": 226544122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613495577
    },
    {
        "content": "<p>Whichever one <code>subtype.fintype</code> actually uses</p>",
        "id": 226544285,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613495638
    },
    {
        "content": "<p>It uses <code>p : alpha -&gt; Prop</code> and not <code>p : set alpha</code></p>",
        "id": 226544381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613495662
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6264\">#6264</a> -- let's see if it compiles</p>",
        "id": 226545003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613495893
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/116395-maths/topic/to_finset_inter/near/226543556\">said</a>:</p>\n<blockquote>\n<p>That needs the assumption <code>decidable_pred (\\in s)</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subtype.fintype\">docs#subtype.fintype</a></p>\n</blockquote>\n<p>I saw a recent PR that replaced <code>decidable_pred (∈ s)</code> with <code>decidable_pred s</code>, and I know I've been consistently using <code>decidable_pred s</code> myself.  The only uses in mathlib of <code>decidable_pred (∈ s)</code> seem to be four lemmas in <code>data.set.basic</code> (<code>mk_preimage_prod_left_eq_if</code> and the rest).  Would it be reasonable to add a <code>decidable_set</code> so that there's an obvious choice?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[reducible]</span>\n<span class=\"kd\">def</span> <span class=\"n\">decidable_set</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 226554095,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613499621
    },
    {
        "content": "<p>I think the choice is obvious enough as it is - <code>decidable_pred s</code> can be proved from <code>decidable_pred (∈ s)</code> but not inferred from it, and <code>decidable_pred (∈ s)</code> can be inferred from <code>decidable_pred s</code>, so there's no reason to ever write <code>decidable_pred (∈ s)</code></p>",
        "id": 226555388,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1613500229
    },
    {
        "content": "<p>I think having <code>decidable_set</code> is reasonable. The problem with <code>decidable_pred s</code> is that it breaks the abstraction barrier of <code>set</code> (<code>s</code> is not a predicate, it is a set). Is there a reason to ever favor <code>decidable_pred s</code> over <code>decidable_pred (∈ s)</code>, assuming the library consistently uses the latter?</p>",
        "id": 226555532,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613500286
    },
    {
        "content": "<p>Yes, if you give an instance <code>decidable_pred (∈ s)</code> then the typeclass system can't deduce <code>decidable_pred s</code> from it, but not vice versa</p>",
        "id": 226555915,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1613500433
    },
    {
        "content": "<p>Why would you ever want to deduce <code>decidable_pred s</code>? That is a statement I would like to see banned from mathlib, since it breaks the abstraction barrier of <code>set</code>.</p>",
        "id": 226556158,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613500543
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think I last touched the section in <a href=\"https://github.com/leanprover-community/mathlib/issues/6264\">#6264</a> (adding the lemmas about <code>erase</code>), and I ended up not changing it to use decidable instances because they are more or less fine if you make sure your tactic proofs are purely classical, and making them use <code>decidable</code> in a way that won't cause any problems was more work than I wanted to do at the time -- you need to make sure that typeclass instances in a lemma statement aren't themselves inferred.</p>\n<p>For example, this I think is what you need for the first lemma of the bunch:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">to_finset_compl</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span><span class=\"bp\">ᶜ.</span><span class=\"n\">to_finset</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s.to_finset</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</code></pre></div>",
        "id": 226556210,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613500566
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/116395-maths/topic/to_finset_inter/near/226556158\">said</a>:</p>\n<blockquote>\n<p>Why would you ever want to deduce <code>decidable_pred s</code>? That is a statement I would like to see banned from mathlib, since it breaks the abstraction barrier of <code>set</code>.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.filter\">docs#finset.filter</a>, for instance - this assumption is needed loads throughout combinatorics and in particular mathlib graph theory</p>",
        "id": 226556305,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1613500606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> What's an example of <code>finset.filter</code> where this would be a problem?  I'm imagining you're saying something like <code>t.filter s</code> where <code>s</code> is a <code>set</code>, and you could write <code>t.filter (∈ s)</code> instead.</p>",
        "id": 226556643,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613500762
    },
    {
        "content": "<p><code>t.filter s</code> also breaks the abstraction barrier.</p>",
        "id": 226556715,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613500799
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/116395-maths/topic/to_finset_inter/near/226556643\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> What's an example of <code>finset.filter</code> where this would be a problem?  I'm imagining you're saying something like <code>t.filter s</code> where <code>s</code> is a <code>set</code>, and you could write <code>t.filter (∈ s)</code> instead.</p>\n</blockquote>\n<p>See this PR for instance: <a href=\"https://github.com/leanprover-community/mathlib/pull/5938\">https://github.com/leanprover-community/mathlib/pull/5938</a></p>",
        "id": 226556717,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1613500800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/116395-maths/topic/to_finset_inter/near/226556717\">said</a>:</p>\n<blockquote>\n<p>See this PR for instance: <a href=\"https://github.com/leanprover-community/mathlib/pull/5938\">https://github.com/leanprover-community/mathlib/pull/5938</a></p>\n</blockquote>\n<p>What part should I be looking at?</p>",
        "id": 226557046,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613500962
    },
    {
        "content": "<p>That's the PR I was referring to earlier (but I was too lazy to include a link), but I'm not sure I understand what this has to do with <code>finset.filter</code></p>",
        "id": 226557070,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613500974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/116395-maths/topic/to_finset_inter/near/226555532\">said</a>:</p>\n<blockquote>\n<p>Is there a reason to ever favor <code>decidable_pred s</code> over <code>decidable_pred (∈ s)</code>, assuming the library consistently uses the latter?</p>\n</blockquote>\n<p>But all the parentheses! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 226557422,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1613501149
    },
    {
        "content": "<p>I should have been clearer. There are cases when <code>mem</code> notation for sets can't be used because the <code>has_mem</code> can't infer what's going on (an example is the definition of <code>presieve</code> here: <a href=\"https://github.com/leanprover-community/mathlib/blob/2411d681127e17b7ba96b80c50c9e50f631491da/src/category_theory/sites/sieves.lean#L36\">https://github.com/leanprover-community/mathlib/blob/2411d681127e17b7ba96b80c50c9e50f631491da/src/category_theory/sites/sieves.lean#L36</a>, suggested by Reid), specifically when I wanted to filter over a finset of arrows using the property that they're in a presieve, it's not true that I could write <code>t.filter (∈ s)</code> instead of <code>t.filter s</code></p>",
        "id": 226558712,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1613501757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> I am a big fan of reducing the number of parentheses :)</p>\n<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span>: presumable you could have written something like <code>t.filter (λ (x : ...), x ∈ s)</code>? I know that would be quite a bit longer than <code>t.filter s</code>, but I think it's important to not break the abstraction barrier. This is the same reason that we ban <code>s x</code> from the library, and favor <code>x ∈ s</code>.<br>\nAnd if you write <code>decidable_pred s</code> or <code>t.filter s</code>, you are doing the same. For example, if you apply <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.mem_filter\">docs#finset.mem_filter</a> to <code>t.filter s</code>, you'll get hypotheses/goals with <code>s x</code> or <code>x ∈ λ x, p x</code>. And then you have to rewrite them away, like this:<a href=\"https://github.com/leanprover-community/mathlib/blob/362619ebc74073495414578128b9bcb10879aa57/src/category_theory/sites/pretopology.lean#L167\">https://github.com/leanprover-community/mathlib/blob/362619ebc74073495414578128b9bcb10879aa57/src/category_theory/sites/pretopology.lean#L167</a><br>\n(though I'm surprised this doesn't happen more often in the library)</p>",
        "id": 226560447,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1613502527
    }
]