[
    {
        "content": "<p>I am stuck in a proof where I have a seemingly trivial goal: <code>measurable (λ (a : nnreal), a)</code>. <br>\nNothing I try seems to work! <br>\nI guess the section on measurable equivalences was set up to solve goals like this, but I'm not able to use it. I'd appreciate any help!</p>",
        "id": 169573558,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562165726
    },
    {
        "content": "<p><code>measurable_id</code>?</p>",
        "id": 169573691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562165820
    },
    {
        "content": "<p>I'm not sure what you mean about measurable equivalences. As always with this kind of thing, there are a hundred implicit arguments so that line is insufficient context</p>",
        "id": 169573811,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562165891
    },
    {
        "content": "<p>Riight. I have a lot of implicit arguments and <code>measurable_id</code> doesn't work in the proof..</p>",
        "id": 169573986,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562166030
    },
    {
        "content": "<p>well, MWE then</p>",
        "id": 169574034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562166074
    },
    {
        "content": "<p>I'm not sure how you expect me to know what the context is if there is something funky going on</p>",
        "id": 169574180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562166170
    },
    {
        "content": "<p>yes im working on a MWE, sorry i only realized about the implicit arguments after i posted the question</p>",
        "id": 169574431,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562166340
    },
    {
        "content": "<p>you could also post your entire goal and/or the partial proof</p>",
        "id": 169574507,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562166374
    },
    {
        "content": "<p>Here's the MWE: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">giry_monad</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"kn\">open</span> <span class=\"n\">measure_theory</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span> <span class=\"n\">set</span>\n\n\n<span class=\"kn\">section</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">probability_measure</span> <span class=\"kn\">extends</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">measure_univ</span> <span class=\"o\">:</span> <span class=\"n\">to_measure</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">probability_measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ_</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">nnreal</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ennreal</span><span class=\"bp\">.</span><span class=\"n\">to_nnreal</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">to_measure</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">probability_measure</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prob_diff</span> <span class=\"o\">{</span><span class=\"n\">s₁</span> <span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s₂</span> <span class=\"err\">⊆</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"err\">\\</span> <span class=\"n\">s₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">p</span> <span class=\"n\">s₁</span> <span class=\"bp\">-</span> <span class=\"n\">p</span> <span class=\"n\">s₂</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prob_univ</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">univ</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">sorry</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">probability_measure</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">is_measurable</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">t</span> <span class=\"n\">ht</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">compl_eq_univ_diff</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span><span class=\"o\">{</span><span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prob_diff</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">subset_univ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">is_measurable</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"n\">ht</span><span class=\"o\">]},</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">prob_univ</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">measurable</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">measurable</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">measurable_sub</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">measurable_const</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">measurable_subtype_val</span><span class=\"o\">,</span> <span class=\"n\">swap</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">measurable_of_continuous</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">nnreal</span><span class=\"bp\">.</span><span class=\"n\">continuous_of_real</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">measurable_id</span> <span class=\"n\">nnreal</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 169576089,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562167525
    },
    {
        "content": "<p>did you try <code>exact measurable_id</code>?</p>",
        "id": 169576258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562167637
    },
    {
        "content": "<p><code>apply measurable_id</code> probably won't work because of the apply bug</p>",
        "id": 169576271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562167651
    },
    {
        "content": "<p>Where is that \"apply bug\" emoticon again?</p>",
        "id": 169576304,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562167678
    },
    {
        "content": "<p>pp.all trace </p>\n<div class=\"codehilite\"><pre><span></span>invalid type ascription, term has type\n  @measurable.{?l_1 ?l_1} ?m_2 ?m_2 ?m_3 ?m_3 (@id.{?l_1+1} ?m_2)\nbut is expected to have type\n  @measurable.{0 0} nnreal\n    (@subtype.{1} real\n       (λ (r : real),\n          @has_le.le.{0} real real.has_le\n            (@has_zero.zero.{0} real\n               (@no_zero_divisors.to_has_zero.{0} real (@domain.to_no_zero_divisors.{0} real real.domain)))\n            r))\n    (@measure_theory.borel.{0} nnreal nnreal.topological_space)\n    (@subtype.measurable_space.{0} real\n       (λ (r : real),\n          @has_le.le.{0} real real.has_le\n            (@has_zero.zero.{0} real\n               (@no_zero_divisors.to_has_zero.{0} real (@domain.to_no_zero_divisors.{0} real real.domain)))\n            r)\n       (@measure_theory.borel.{0} real\n          (@uniform_space.to_topological_space.{0} real\n             (@metric_space.to_uniform_space&#39;.{0} real (@normed_field.to_metric_space.{0} real real.normed_field)))))\n    (λ (a : nnreal), a)\n</pre></div>",
        "id": 169576311,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562167682
    },
    {
        "content": "<p>pp.all?</p>",
        "id": 169576359,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562167692
    },
    {
        "content": "<p>well why didn't you say so</p>",
        "id": 169576416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562167748
    },
    {
        "content": "<p>it's not the same measure</p>",
        "id": 169576423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562167755
    },
    {
        "content": "<p>your MWE doesn't work for me, it fails at the first <code>apply</code></p>",
        "id": 169576450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562167787
    },
    {
        "content": "<p>what's not the same measure?</p>",
        "id": 169576554,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562167815
    },
    {
        "content": "<p>didn't <code>measurable.comp</code> recently get its arguments flipped? I'm not sure if you or I are out of date</p>",
        "id": 169576592,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562167844
    },
    {
        "content": "<p>I didn't update mathlib in a while</p>",
        "id": 169576613,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562167864
    },
    {
        "content": "<p><code>nnreal</code> is defined to be <code>{r : ℝ // 0 ≤ r}</code>, so it has a measurable space from <code>subtype</code> applied to the measure on <code>real</code></p>",
        "id": 169576715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562167943
    },
    {
        "content": "<p>but it is also a topological space and so it gets the borel measurable space</p>",
        "id": 169576749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562167971
    },
    {
        "content": "<p>yes, which is why i thought I should use <code>ennreal_equiv_nnreal</code> and transport it somehow...</p>",
        "id": 169576841,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562168045
    },
    {
        "content": "<p>this works for me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mwe</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">probability_measure</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">is_measurable</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">measurable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">compl_eq_univ_diff</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span><span class=\"o\">{</span><span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">funext</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">prob_diff</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">subset_univ</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"n\">is_measurable</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"n\">ht</span><span class=\"o\">]},</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">prob_univ</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">measurable</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">measurable</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">measurable_sub</span> <span class=\"n\">measurable_const</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"n\">measurable_of_continuous</span> <span class=\"n\">nnreal</span><span class=\"bp\">.</span><span class=\"n\">continuous_of_real</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">measurable_of_continuous</span> <span class=\"n\">nnreal</span><span class=\"bp\">.</span><span class=\"n\">continuous_coe</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 169577295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562168416
    },
    {
        "content": "<p>worked with some modifications for me as well. Thanks mario!</p>",
        "id": 169577664,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562168726
    }
]