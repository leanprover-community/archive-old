[
    {
        "content": "<p>So we've been working with adjoining elements to fields:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">subfield</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">adjoin</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">adjoin_simple</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"c1\">--this is fine</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">adjoin_simple</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">--this is also fine</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">({</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">--this doesn&#39;t work</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>but lean sometimes has trouble figuring out that if <code>α : E</code> then <code>{α} : set E</code></p>\n<p>How can we fix this?</p>",
        "id": 207681042,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598041798
    },
    {
        "content": "<p>You can always tell lean explicitly <code>({a} : set E)</code>.</p>",
        "id": 207681155,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598041856
    },
    {
        "content": "<p>The problem is when we try to define notation (give me a sec)</p>",
        "id": 207681176,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598041869
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 207681213,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598041898
    },
    {
        "content": "<p>We would really like to get notation F[alpha] to work</p>",
        "id": 207681233,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598041918
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 207681349,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598041971
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">subfield</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">adjoin</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">adjoin_simple</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"c1\">--this is fine</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">adjoin_simple</span> <span class=\"n\">F</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">--this is also fine</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">({</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">--this doesn&#39;t work</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">β</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span>\n\n<span class=\"c1\">--how can we get this to work?</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"c1\">--this works because it knows that F[α] is supposed to be in set E</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"bp\">=</span> <span class=\"n\">adjoin_simple</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 207681350,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598041972
    },
    {
        "content": "<p>so the notation sometimes works when it already knows that F[α] is supposed to be in set E, but we would like this sort of notation to work more generally</p>",
        "id": 207681495,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598042048
    },
    {
        "content": "<p>It's a hack:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">β</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">β</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 207681546,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598042074
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 207681555,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598042077
    },
    {
        "content": "<p>Oh, it looks like that works!</p>",
        "id": 207681591,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598042099
    },
    {
        "content": "<p>Is there any downside or is that hack as good as it looks?</p>",
        "id": 207681630,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598042118
    },
    {
        "content": "<p>Yeah, but someone who actually know how to write notation would give you a better answer :)</p>",
        "id": 207681631,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598042119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you have any suggestions?</p>",
        "id": 207681825,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598042239
    },
    {
        "content": "<p>Have you tried <code>notation K`[`:std.prec.max_plus β`]` := adjoin K ({β} : set _)</code>?</p>",
        "id": 207681973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598042301
    },
    {
        "content": "<p>I think that I tried that</p>",
        "id": 207681996,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598042321
    },
    {
        "content": "<p>Yeah, that doesn't work unfortunately</p>",
        "id": 207682025,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598042340
    },
    {
        "content": "<p>Oh, I see the problem now. Yeah you should make the notation unfold to <code>adjoin_simple</code></p>",
        "id": 207682209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598042456
    },
    {
        "content": "<p>it's generally a bad idea to have notations unfold to things other than constant applied to variables</p>",
        "id": 207682354,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598042526
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Lean.20can't.20figure.20out.20type.20of.20.7Ba.7D/near/207682209\">said</a>:</p>\n<blockquote>\n<p>Oh, I see the problem now. Yeah you should make the notation unfold to <code>adjoin_simple</code></p>\n</blockquote>\n<p>We want to remove <code>adjoin_simple</code></p>",
        "id": 207682361,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598042532
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">subfield</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">adjoin</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">adjoin_simple</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">({</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">β</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin_simple</span> <span class=\"n\">K</span> <span class=\"n\">β</span>\n\n<span class=\"c1\">--how can we get this to work?</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 207682380,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598042543
    },
    {
        "content": "<p>Is that safe?</p>",
        "id": 207682387,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598042550
    },
    {
        "content": "<p>Unfortunately lean has limited capacity to perform rewriting as part of notation expansion</p>",
        "id": 207682434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598042578
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Lean.20can't.20figure.20out.20type.20of.20.7Ba.7D/near/207682380\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">subfield</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">adjoin</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">adjoin_simple</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">({</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">β</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin_simple</span> <span class=\"n\">K</span> <span class=\"n\">β</span>\n\n<span class=\"c1\">--how can we get this to work?</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Yeah, that's what we were doing before. But we kind of want to remove <code>adjoin_simple</code></p>",
        "id": 207682461,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598042591
    },
    {
        "content": "<p>You can make <code>adjoin_simple</code> reducible</p>",
        "id": 207682476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598042597
    },
    {
        "content": "<p>Or you can notate the type of <code>α</code></p>",
        "id": 207682506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598042612
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 207682531,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598042623
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">subfield</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">adjoin</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">adjoin_simple</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">F</span> <span class=\"o\">({</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n\n<span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">β</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin_simple</span> <span class=\"n\">K</span> <span class=\"n\">β</span>\n\n<span class=\"c1\">--how can we get this to work?</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 207682625,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598042662
    },
    {
        "content": "<p>or</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">β</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"bp\">`</span><span class=\"n\">E</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"o\">({</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 207682702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598042712
    },
    {
        "content": "<p>By the way, from a mathematical point of view, this is confusing notation since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">[</mo><mi>α</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">K[\\alpha]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">]</span></span></span></span> usually denotes the algebra generated by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> and not the field generated by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>, but I guess <code>(...)</code> doesn't work with notation?</p>",
        "id": 207682908,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598042809
    },
    {
        "content": "<p>aha:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"n\">K</span><span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"n\">std</span><span class=\"bp\">.</span><span class=\"n\">prec</span><span class=\"bp\">.</span><span class=\"n\">max_plus</span> <span class=\"n\">β</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">`</span> <span class=\"o\">:=</span>\n<span class=\"n\">adjoin</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">singleton</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">has_singleton</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">algebra_map</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">F</span><span class=\"o\">[</span><span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 207682991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598042864
    },
    {
        "content": "<p>Now how can we change <code>[..]</code> to <code>(..)</code>?</p>",
        "id": 207683075,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598042898
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Lean.20can't.20figure.20out.20type.20of.20.7Ba.7D/near/207682908\">said</a>:</p>\n<blockquote>\n<p>By the way, from a mathematical point of view, this is confusing notation since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo stretchy=\"false\">[</mo><mi>α</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">K[\\alpha]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span><span class=\"mclose\">]</span></span></span></span> usually denotes the algebra generated by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span> and not the field generated by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>, but I guess <code>(...)</code> doesn't work with notation?</p>\n</blockquote>\n<p>Yeah, parentheses don't seem to work well in notation for some reason</p>",
        "id": 207683084,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598042902
    },
    {
        "content": "<p>We're open to other suggestions for notation though (besides square brackets)</p>",
        "id": 207683128,
        "sender_full_name": "Patrick Lutz",
        "timestamp": 1598042938
    },
    {
        "content": "<p>how about <code> F[(α)]</code></p>",
        "id": 207683162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598042956
    },
    {
        "content": "<p>you can also do funny things like <code>F-(α)-</code> as long as it doesn't begin with <code>(</code> or end with <code>)</code></p>",
        "id": 207683277,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598043008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Lean.20can't.20figure.20out.20type.20of.20.7Ba.7D/near/207683277\">said</a>:</p>\n<blockquote>\n<p>you can also do funny things like <code>F-(α)-</code> as long as it doesn't begin with <code>(</code> or end with <code>)</code></p>\n</blockquote>\n<p>That looks awful!</p>",
        "id": 207683308,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598043029
    },
    {
        "content": "<p>with unicode the Possibilities are Endless (TM)</p>",
        "id": 207683356,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598043063
    },
    {
        "content": "<p>Where are those zero-width unicode characters again?</p>",
        "id": 207683377,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598043081
    },
    {
        "content": "<p>I recall seeing a talk about the mongolian vowel separator</p>",
        "id": 207683401,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598043107
    },
    {
        "content": "<p>In the perfectoid project we also used fancy parentheses.</p>",
        "id": 207683405,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598043109
    },
    {
        "content": "<p>which is one of the few space characters that went through multiple character classes over the different unicode standards</p>",
        "id": 207683492,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598043147
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/Spa/localization_Huber.lean#L28\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/Spa/localization_Huber.lean#L28</a></p>",
        "id": 207683511,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598043159
    },
    {
        "content": "<p>Those are not actual parentheses.</p>",
        "id": 207683567,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598043191
    },
    {
        "content": "<p>My vscode doesn't like that (I think I'm missing some fonts :( )</p>",
        "id": 207683586,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598043205
    },
    {
        "content": "<p>That's one of the many reason why this isn't such a great idea (and it would probably not go through mathlib review).</p>",
        "id": 207683808,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598043309
    },
    {
        "content": "<p>personally I greatly prefer \"ascii art\" to this kind of thing</p>",
        "id": 207683857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598043343
    },
    {
        "content": "<p><code>F&gt;&gt;= a &lt;&lt;=</code>?</p>",
        "id": 207683996,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598043399
    },
    {
        "content": "<p>I think those might already be used for monads</p>",
        "id": 207686148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598044733
    },
    {
        "content": "<p>I would use four characters, then you'll be fine</p>",
        "id": 207686168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598044759
    }
]