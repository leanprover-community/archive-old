[
    {
        "content": "<p>Currently, <code>normed_group</code> is a typeclass for an <em>additive</em> group with a norm. In the geometric group theory thread, the need for multiplicative groups with a norm came up naturally. Would anyone object if one renames <code>normed_group</code> to <code>normed_add_group</code>?</p>",
        "id": 290474697,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1658475684
    },
    {
        "content": "<p>And maybe even to <code>normed_add_comm_group</code>, given that in geometric group theory we are interested in the noncommutative setting.</p>",
        "id": 290476262,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658476813
    },
    {
        "content": "<p>If we're going to add noncommutative versions, is it time to change <code>normed_group</code> to not extend <code>add_comm_group</code> but rather take it as an argument?</p>",
        "id": 290477450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658477732
    },
    {
        "content": "<p>Yes, a mixin is starting to make sense here.</p>",
        "id": 290477575,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658477819
    },
    {
        "content": "<p>My intuition would be that we should</p>\n<ul>\n<li>Rename <code>normed_group</code> to <code>normed_add_group</code> for now, to keep things short</li>\n<li>Consider changing to a \"mixin\" at a later date, to support non-commutativity and additive monoids (nnreal)</li>\n</ul>",
        "id": 290477600,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658477849
    },
    {
        "content": "<p><del>I vote for renaming <code>normed_group</code> to <code>normed_add_group</code> (without adding the <code>comm_</code>) and leaving it at that. IIUC using a mixin may create performance issues for important paths through the typeclass hierarchy.</del> Eric's comment arrived as I sent this.</p>",
        "id": 290477620,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1658477875
    },
    {
        "content": "<p>Do we have any way to measure performance issues besides counting deterministic timeouts?</p>",
        "id": 290477733,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658477953
    },
    {
        "content": "<p>Me personally, no but I expect someone does.</p>",
        "id": 290477793,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1658478001
    },
    {
        "content": "<p>I'd be very on board with Yaël attempting such a refactor (I've already done my time refactoring <code>normed_space</code>!), with the understanding that if performance sucks we might have to throw it away.</p>",
        "id": 290477916,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658478083
    },
    {
        "content": "<p>But not before we do the simple rename first</p>",
        "id": 290477924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658478095
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15619\">#15619</a></p>",
        "id": 290478229,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658478332
    },
    {
        "content": "<p>If you want, I'm happy to even turn <code>normed_group</code> into <code>norm_add_group</code> and <code>seminormed_group</code> into <code>seminorm_add_group</code>.</p>",
        "id": 290478410,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658478478
    },
    {
        "content": "<p>I will fix line breaks once we are settled on this.</p>",
        "id": 290478497,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658478517
    },
    {
        "content": "<p>I'd even go for <code>normed_add_comm_group</code>. But I agree that the mixin idea is probably bad performancewise.</p>",
        "id": 290484538,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1658482694
    },
    {
        "content": "<p>Are you ambivalent as to whether the <code>comm</code> should be included?</p>",
        "id": 290485854,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658483623
    },
    {
        "content": "<p>I would include the <code>comm</code> for the following reason. For performance, I'd keep the current definition (with whatever name we come up with, say <code>X</code>), and in parallel I'd introduce a class <code>normed_group</code> and its addivized version <code>normed_add_group</code> -- and then prove an instance from <code>X</code> to <code>normed_add_group</code>. This works fine and should minimize the refactor pain if the name we choose is different from <code>normed_add_group</code>:-)</p>",
        "id": 290486341,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1658483917
    },
    {
        "content": "<p>Having <code>_comm_</code> sounds good to me, just checking there wasn't opposition based on verbosity grounds</p>",
        "id": 290490355,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658486714
    },
    {
        "content": "<p>/poll What should we renamed normed_group to?</p>\n<ul>\n<li>normed_add_group</li>\n<li>normed_add_comm_group</li>\n<li>do not rename it</li>\n</ul>",
        "id": 290490552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658486865
    },
    {
        "content": "<p>/poll Should we contract semi_normed to seminormed to match seminorm?</p>\n<ul>\n<li>Yes</li>\n<li>No</li>\n</ul>",
        "id": 290490629,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658486916
    },
    {
        "content": "<p>/poll What should we rename <code>normed_group_hom</code> to?</p>\n<ul>\n<li>normed_add_group_hom</li>\n<li>Whichever of normed_add_comm_group_hom and normed_add_group_hom matches our choice for normed_group</li>\n</ul>",
        "id": 290490781,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658487053
    },
    {
        "content": "<p>I think the polls above capture the points of discussion in <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>' PR</p>",
        "id": 290490840,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1658487104
    },
    {
        "content": "<p>Perfect! There's quite a clear consensus so I'll update the PR shortly.</p>",
        "id": 290613929,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658582952
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15619\">#15619</a> now compiles so I suggest it be merged soon.</p>",
        "id": 290683339,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658673364
    },
    {
        "content": "<p>I guess we should contract <code>semi_normed</code> to <code>seminormed</code>  in everything between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/non_unital_semi_normed_ring\">docs#non_unital_semi_normed_ring</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semi_normed_comm_ring\">docs#semi_normed_comm_ring</a>?</p>",
        "id": 291569802,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1659358277
    },
    {
        "content": "<p>Oh yes absolutely! I forgot about those.</p>",
        "id": 291571464,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659359069
    }
]