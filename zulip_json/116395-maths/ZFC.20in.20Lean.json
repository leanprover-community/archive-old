[
    {
        "content": "<p>Hi guys, where can I find the ZFC axioms in Lean? What is there currently in terms of theorems? I want to spend the better part of this week trying to expand on that and maybe even some metatheory on LEAN :)</p>",
        "id": 202181900,
        "sender_full_name": "James Palmer",
        "timestamp": 1593257950
    },
    {
        "content": "<p>The metatheory of lean and zfc don't have that much to do with each other, I think</p>",
        "id": 202181912,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593258001
    },
    {
        "content": "<p>But see <code>src/set_theory/zfc.lean</code></p>",
        "id": 202181958,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593258022
    },
    {
        "content": "<p>Note that mathlib doesn't use zfc anywhere.</p>",
        "id": 202181970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593258052
    },
    {
        "content": "<p>Lean uses dependent type theory</p>",
        "id": 202181989,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1593258119
    },
    {
        "content": "<p>There's this as well <a href=\"https://github.com/flypitch/flypitch/blob/master/src/zfc.lean\">https://github.com/flypitch/flypitch/blob/master/src/zfc.lean</a></p>",
        "id": 202182225,
        "sender_full_name": "Alistair Tucker",
        "timestamp": 1593258417
    },
    {
        "content": "<p>Forgive me I meant metatheory as in First order logic/predicate logic metatheory</p>",
        "id": 202182398,
        "sender_full_name": "James Palmer",
        "timestamp": 1593258629
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245340\">@James Palmer</span> In that case the Flypitch link that Alistair gave is quite important.</p>",
        "id": 202182792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593259252
    },
    {
        "content": "<p>It would be really interesting to get some of that stuff in mathlib</p>",
        "id": 202182796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593259263
    },
    {
        "content": "<p>many thanks</p>",
        "id": 202183164,
        "sender_full_name": "James Palmer",
        "timestamp": 1593259837
    },
    {
        "content": "<p>i.e. we couldn't write constant A: set and then go from there? (permitting that we've write open fol before so that we can make sense of the axioms)</p>",
        "id": 202487971,
        "sender_full_name": "James Palmer",
        "timestamp": 1593547611
    },
    {
        "content": "<p>what are you trying to accomplish exactly?</p>",
        "id": 202488436,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593547849
    },
    {
        "content": "<p>There are two main ways to talk about systems like ZFC: as a model, a set <code>Set</code> of sets with a binary operation called elementhood, or as a syntactic theory, where you have a definition of formulas and axioms and can define the set of provable theorems of ZFC. The former is done in <code>set_theory.zfc</code>, and the latter is done in flypitch</p>",
        "id": 202488684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593547977
    },
    {
        "content": "<p>Your comment seems to involve elements of both approaches</p>",
        "id": 202488812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593548051
    },
    {
        "content": "<p>where do I find these?</p>",
        "id": 202489249,
        "sender_full_name": "James Palmer",
        "timestamp": 1593548282
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Set/src\">src#Set</a></p>",
        "id": 202489299,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593548305
    },
    {
        "content": "<p>I was hoping to look at it with regards to its links to module theory</p>",
        "id": 202489310,
        "sender_full_name": "James Palmer",
        "timestamp": 1593548316
    },
    {
        "content": "<p>flypitch was linked above</p>",
        "id": 202489323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593548326
    },
    {
        "content": "<p>module theory?</p>",
        "id": 202489329,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593548336
    },
    {
        "content": "<p>*model theory</p>",
        "id": 202489355,
        "sender_full_name": "James Palmer",
        "timestamp": 1593548349
    },
    {
        "content": "<p>forgive me my computer is not having the best time communicating things atm</p>",
        "id": 202489425,
        "sender_full_name": "James Palmer",
        "timestamp": 1593548386
    },
    {
        "content": "<p>I don't think the general notion of a model of ZFC is defined, but <a href=\"https://github.com/flypitch/flypitch/blob/master/src/bfol.lean\">https://github.com/flypitch/flypitch/blob/master/src/bfol.lean</a> defines a boolean valued model of a FOL extension</p>",
        "id": 202489860,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593548634
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"245340\">@James Palmer</span> basic model theory is in <code>flypitch/src/fol.lean</code> and <code>flypitch/src/completeness.lean</code></p>\n<p>you can see on <a href=\"https://github.com/flypitch/flypitch/tree/pSet_ZFC\">this branch</a> how the API is used to state the theorem that <code>Set</code>, the canonical model of ZFC in Lean, is formally a model of the ZFC axioms</p>",
        "id": 202523167,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1593568715
    },
    {
        "content": "<p>thanks Jesse, good work on the Continuum Hypothesis project btw!</p>",
        "id": 202547519,
        "sender_full_name": "James Palmer",
        "timestamp": 1593595460
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 202547535,
        "sender_full_name": "James Palmer",
        "timestamp": 1593595472
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 202547584,
        "sender_full_name": "James Palmer",
        "timestamp": 1593595521
    }
]