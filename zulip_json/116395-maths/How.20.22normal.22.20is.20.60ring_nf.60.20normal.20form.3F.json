[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.real.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">t</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">t</span> <span class=\"bp\">-</span> <span class=\"n\">u</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- convert h using 1, ring, -- I know I can do this</span>\n  <span class=\"c1\">-- but I want to do the below instead:</span>\n  <span class=\"n\">ring_nf</span><span class=\"o\">,</span> <span class=\"c1\">-- succeeds but doesn't seem to do anything</span>\n  <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- randomly moves some brackets around</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  h : 0 &lt; a n + (-t + (b n - u))</span>\n<span class=\"cm\">  ⊢ 0 &lt; a n + (b n + (-t - u))</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I had thought that the idea of <code>ring_nf</code> was that if it couldn't solve the goal, it would put things into some sort of unique canonical form, making <code>exact h</code> work. Clearly I'm wrong. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> is this not what <code>ring_nf</code> does?</p>",
        "id": 268330496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642467703
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">ring_nf</span> <span class=\"n\">at</span> <span class=\"bp\">⊢</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 268330688,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642467885
    },
    {
        "content": "<p>As Mario explained to me at some point, it's only canonical within its own tactic-call, so to speak.  So you get it to do both at once.</p>",
        "id": 268330707,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1642467923
    },
    {
        "content": "<p>Oh this is great! Thanks! I was worried that it might be one of those \"fixed in this PR which is unfortunately too late for your class because you promised them you would never bump mathlib\" things :D</p>",
        "id": 268330782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1642467978
    }
]