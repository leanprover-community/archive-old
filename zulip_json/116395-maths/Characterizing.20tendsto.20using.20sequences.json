[
    {
        "content": "<p>Do we have anything like this already?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">tendsto_iff_seq_tendsto</span> <span class=\"o\">{</span><span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">hcb</span> <span class=\"o\">:</span> <span class=\"n\">k</span><span class=\"bp\">.</span><span class=\"n\">has_countable_basis</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"n\">x</span> <span class=\"n\">at_top</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">∘</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 177798750,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1570705288
    },
    {
        "content": "<p>Did you look in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/sequences.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/sequences.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/topology/sequences.lean</a>?</p>",
        "id": 177800627,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570707241
    },
    {
        "content": "<p><code>continuous_iff_sequentially_continuous</code> is essentially your statement, albeit in a more restricted setting. It could be useful to prove your version, and deduce <code>continuous_iff_sequentially_continuous</code> from it.</p>",
        "id": 177801180,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1570707861
    },
    {
        "content": "<p>I'm not sure if continuous_iff_sequentially_continuous is a special case of  my statement.  There are sequential spaces that are not first-countable.</p>",
        "id": 177802663,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1570709370
    },
    {
        "content": "<p>You're right, these statements are independent.</p>",
        "id": 177806467,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1570712110
    }
]