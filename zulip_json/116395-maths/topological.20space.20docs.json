[
    {
        "content": "<p>Ok so after a ropey start (see my heq thread earlier) I made it through the <code>topological_space.lean</code> file today and wrote some docs on it: <a href=\"https://github.com/kbuzzard/mathlib/blob/docs-topspaces/docs/theories/topological_spaces.md\" target=\"_blank\" title=\"https://github.com/kbuzzard/mathlib/blob/docs-topspaces/docs/theories/topological_spaces.md\">https://github.com/kbuzzard/mathlib/blob/docs-topspaces/docs/theories/topological_spaces.md</a> . I needed to read this file for my work on schemes -- in particular I had to finally understand what a filter was and what they had to do with topological spaces.</p>",
        "id": 125088079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523740177
    },
    {
        "content": "<p>You are a bit unfair with filters. You should at least explain that they allow to cover uniformly the cases of sequences and maps from topological spaces. And then slightly more exotic stuff like one-sided limits at some real. That's why Bourbaki invented them.</p>",
        "id": 125088666,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523741626
    },
    {
        "content": "<p>They also allow to mimic using sequential continuity and compactness for non-metric spaces</p>",
        "id": 125088713,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523741734
    },
    {
        "content": "<p>One way to motivate them is to consider the ~16 variations on L'hopital's theorem that arise with lots of permutations of limits to different places in the domain and codomain</p>",
        "id": 125088714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523741748
    },
    {
        "content": "<p>I was just grumpy about them because they have actively stopped me doing what should be trivial stuff for a couple of days, because I didn't know what \\Glb meant</p>",
        "id": 125088753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523741783
    },
    {
        "content": "<p>when I actually ploughed through the file and a lot of the imports, and set pp.all on occasionally etc etc and finally got to the bottom of things and discovered that F &lt;= G iff G subseteq F</p>",
        "id": 125088760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523741827
    },
    {
        "content": "<p>then it all began to make sense</p>",
        "id": 125088761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523741831
    },
    {
        "content": "<p>This is what this definition if compactness is about: a space is compact if every sequence has a converging subsequence,made true for all spaces</p>",
        "id": 125088762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523741837
    },
    {
        "content": "<p>The description of topological basis is also a bit grumpy; the point as I mentioned before is to say \"a topological basis is a collection of sets satisfying these two axioms\" and then fold in the connection to generating a topology</p>",
        "id": 125088763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523741866
    },
    {
        "content": "<p>I'm sure it's a very cute way to think about things</p>",
        "id": 125088764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523741867
    },
    {
        "content": "<p>yeah, I had to get up early this morning, I've been in a grumpy mood all day :-)</p>",
        "id": 125088803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523741885
    },
    {
        "content": "<p>I'm defending filters here but zulip and gitter can testify I went through the same frustrations</p>",
        "id": 125088807,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523741923
    },
    {
        "content": "<p>In fact I think the \"filters are a complete lattice\" angle should probably be emphasized more, since it underlies many of the filter-theoretic definitions</p>",
        "id": 125088814,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523741994
    },
    {
        "content": "<p>A filter which is not bottom is called a proper filter fyi</p>",
        "id": 125088857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742022
    },
    {
        "content": "<p>Mario, the reason I don't buy your explanation is that there is a standard definition of a basis of a topological space, which we all learn, and which is on Wikipedia, and which is not what is implemented, so all your protestations that it's a better way of doing it are cancelled out by the fact that every mathematician will be confused by the way it's done. I have flagged the relevant lemma which saves us.</p>",
        "id": 125088858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742051
    },
    {
        "content": "<p>but it is that definition...</p>",
        "id": 125088863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742066
    },
    {
        "content": "<p>I think Mario had the right idea when I faced that:we keep filters but add lemmas translating to usual stuff in usual situations</p>",
        "id": 125088864,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523742067
    },
    {
        "content": "<p>[explanation of why bases are done like that]</p>",
        "id": 125088865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742076
    },
    {
        "content": "<p>Yes, I explictly flag the lemmas saying \"oh look, compactness looks insane, here's the lemma you need\"</p>",
        "id": 125088866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742096
    },
    {
        "content": "<p>\"bases look insane, here's the lemma you need\"</p>",
        "id": 125088867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742104
    },
    {
        "content": "<p>That's the philosophy of the docs</p>",
        "id": 125088868,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742112
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Base_(topology)\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Base_(topology)\">https://en.wikipedia.org/wiki/Base_(topology)</a></p>\n<blockquote>\n<p>A base is a collection B of subsets of X satisfying these two properties:<br>\n1. The base elements cover X.<br>\n2. Let B1, B2 be base elements and let I be their intersection. Then for each x in I, there is a base element B3 containing x and contained in I.</p>\n</blockquote>",
        "id": 125088907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742128
    },
    {
        "content": "<p>Now I can use topological spaces in Lean, and this morning I couldn't.</p>",
        "id": 125088908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742128
    },
    {
        "content": "<p>Right.</p>",
        "id": 125088910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742139
    },
    {
        "content": "<p>Whereas you have generate_open</p>",
        "id": 125088911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742148
    },
    {
        "content": "<p>it's the generate_open that makes it unusable</p>",
        "id": 125088913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742166
    },
    {
        "content": "<p>I'm sure you could also explain why filters are useful</p>",
        "id": 125088914,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523742167
    },
    {
        "content": "<p>Any topological basis is a basis for the topology it generates</p>",
        "id": 125088915,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742171
    },
    {
        "content": "<p>the lemma you proved and I flagged makes the definition usable</p>",
        "id": 125088916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742179
    },
    {
        "content": "<p>you can always satisfy that clause with refl</p>",
        "id": 125088918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742181
    },
    {
        "content": "<p>My point is simply that if you want to prove that (a,b) x (c,d) is a basis of open sets for the standard topology on R^2, you cannot possibly do that from the definition</p>",
        "id": 125088927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742216
    },
    {
        "content": "<p>but it's easy from the lemma</p>",
        "id": 125088928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742219
    },
    {
        "content": "<p>Yes you can</p>",
        "id": 125088930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742223
    },
    {
        "content": "<p>_you_ can</p>",
        "id": 125088932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742232
    },
    {
        "content": "<p>a mathematician can't</p>",
        "id": 125088934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742237
    },
    {
        "content": "<p>becuase they have no clue how to use generate_open</p>",
        "id": 125088977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742246
    },
    {
        "content": "<p>Those are two different goals though</p>",
        "id": 125088978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742252
    },
    {
        "content": "<p>you are trying to prove that some basis is a basis for something else, rather than just proving it's a basis</p>",
        "id": 125088980,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742278
    },
    {
        "content": "<p>My wife says I must stop participating but please be nice <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
        "id": 125088981,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523742284
    },
    {
        "content": "<p>In maths, the proof goes \"insert argument to prove that if x is in an open set U in R^2 then ther's some (a,b) x (c,d) in U containing x and now we're done</p>",
        "id": 125088988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742307
    },
    {
        "content": "<p>in Lean the proof from the definition of basis goes \"that, and then we have to prove something about generate_open\"</p>",
        "id": 125088990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742326
    },
    {
        "content": "<p>except now we don't because of the lemma</p>",
        "id": 125088991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742331
    },
    {
        "content": "<p>You have a preconceived topology in that example</p>",
        "id": 125088992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742332
    },
    {
        "content": "<p>yes, the one the mathematicans use :-)</p>",
        "id": 125088993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742344
    },
    {
        "content": "<p>I'm talking about proving that some collection of sets is a basis full stop</p>",
        "id": 125088994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742355
    },
    {
        "content": "<p>I know</p>",
        "id": 125088995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742361
    },
    {
        "content": "<p>but that's a silly notion</p>",
        "id": 125089033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742364
    },
    {
        "content": "<p>That's the one wikipedia discusses</p>",
        "id": 125089037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742376
    },
    {
        "content": "<p>there's no generate_open there</p>",
        "id": 125089038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742385
    },
    {
        "content": "<p>it's the generate_open which makes the definition a complete pain to work with</p>",
        "id": 125089039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742410
    },
    {
        "content": "<p>and it's the lemma that saves us</p>",
        "id": 125089040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742421
    },
    {
        "content": "<p>so I highlight the lemma</p>",
        "id": 125089041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742423
    },
    {
        "content": "<p>that's all</p>",
        "id": 125089046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742454
    },
    {
        "content": "<p>the lemmas are all there</p>",
        "id": 125089047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742457
    },
    {
        "content": "<p>The generate_open is dischargable by refl, like I said</p>",
        "id": 125089048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742464
    },
    {
        "content": "<p>I'm saying the definitions are silly, but that's OK because the lemmas are there</p>",
        "id": 125089049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742468
    },
    {
        "content": "<p>yeah but I don't really know what that means</p>",
        "id": 125089050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742477
    },
    {
        "content": "<p>and I know what the lemma means</p>",
        "id": 125089089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742493
    },
    {
        "content": "<p>If S satisfies axioms 1 and 2, then it is a basis for (generate_open S)</p>",
        "id": 125089091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742520
    },
    {
        "content": "<p>and a generic mathematician will come along</p>",
        "id": 125089092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742522
    },
    {
        "content": "<p>with a proof of the two things in wikipedia</p>",
        "id": 125089093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742528
    },
    {
        "content": "<p>and will want to prove that they have a basis</p>",
        "id": 125089094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742532
    },
    {
        "content": "<p>and so they can use the lemma</p>",
        "id": 125089095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742536
    },
    {
        "content": "<p>okay I get it you think the notion is useless</p>",
        "id": 125089101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742547
    },
    {
        "content": "<p>right</p>",
        "id": 125089103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742550
    },
    {
        "content": "<p>but I'm not saying it shouldn't be there</p>",
        "id": 125089105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742556
    },
    {
        "content": "<p>I'm just explaining why I had to write the docs</p>",
        "id": 125089106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742561
    },
    {
        "content": "<p>but the docs are</p>",
        "id": 125089107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742561
    },
    {
        "content": "<p>and why they came out grumpy :-)</p>",
        "id": 125089109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742586
    },
    {
        "content": "<p>that is an absurd definition of compact as well.</p>",
        "id": 125089110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742599
    },
    {
        "content": "<p>It should be a theorem not a definition.</p>",
        "id": 125089156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742607
    },
    {
        "content": "<p>But again it doesn't matter</p>",
        "id": 125089160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742633
    },
    {
        "content": "<p>anyway, I am not grumpy any more :-)</p>",
        "id": 125089161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742663
    },
    {
        "content": "<p>I'm not sure how much I want to defend this... I think Johannes thought the filter stuff would make everything neat and concise</p>",
        "id": 125089162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742663
    },
    {
        "content": "<p>it doesn't matter</p>",
        "id": 125089167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742670
    },
    {
        "content": "<p>I'm just taking a contrary position for a laugh really</p>",
        "id": 125089170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742687
    },
    {
        "content": "<p>I'm really happy now</p>",
        "id": 125089171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742694
    },
    {
        "content": "<p>I can work topological spaces</p>",
        "id": 125089172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742698
    },
    {
        "content": "<p>I personally have a preference for standard point-set definitions</p>",
        "id": 125089173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742709
    },
    {
        "content": "<p>and I'm hoping that other people with the same background as me (i.e. basically two courses in topology and that's it) can do the same</p>",
        "id": 125089174,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742717
    },
    {
        "content": "<p>but there are enough lemmas around to get rid of any filter claims you come across</p>",
        "id": 125089214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742733
    },
    {
        "content": "<p>yeah, that's why Hausdorff is called t2 probably ;-)</p>",
        "id": 125089215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742733
    },
    {
        "content": "<p>t2 is shorter :)</p>",
        "id": 125089217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742751
    },
    {
        "content": "<p>I'm really happy with the lemmas. I was preparing a list of lemmas which you should have proved</p>",
        "id": 125089219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742763
    },
    {
        "content": "<p>and it came out empty in the end</p>",
        "id": 125089220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742766
    },
    {
        "content": "<p>Occasionally it would have size 1 or 2</p>",
        "id": 125089223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742777
    },
    {
        "content": "<p>and then I'd find them :-)</p>",
        "id": 125089226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742783
    },
    {
        "content": "<p>Props to <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> too.</p>",
        "id": 125089232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742802
    },
    {
        "content": "<p>yeah he gets the credit for most of this work</p>",
        "id": 125089233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742823
    },
    {
        "content": "<p>It's a really nice complete library</p>",
        "id": 125089234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742824
    },
    {
        "content": "<p>even though some definitions are theorems and some theorems are definitions ;-)</p>",
        "id": 125089236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742838
    },
    {
        "content": "<p>I guess you guys can barely tell the difference</p>",
        "id": 125089276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742859
    },
    {
        "content": "<p>you probably think I'm talking about unfolding or something</p>",
        "id": 125089278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742872
    },
    {
        "content": "<p>it will teach you to forget about definitions and worry more about interfaces</p>",
        "id": 125089280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742879
    },
    {
        "content": "<p>OK, enough CS baiting. Thank you for your library!</p>",
        "id": 125089281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742888
    },
    {
        "content": "<p>I need to learn what this word interface means</p>",
        "id": 125089282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523742902
    },
    {
        "content": "<p>does API mean something to you?</p>",
        "id": 125089289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523742923
    },
    {
        "content": "<p>not really</p>",
        "id": 125089337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743024
    },
    {
        "content": "<p>this is some way of talking to the theorems</p>",
        "id": 125089340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743044
    },
    {
        "content": "<p>or something</p>",
        "id": 125089341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743046
    },
    {
        "content": "<p>Are my docs some sort of attempt to make an API for mathematicians trying to use topological spaces in Lean?</p>",
        "id": 125089378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743085
    },
    {
        "content": "<p>it's the idea that you encapsulate the underlying definition, somehow make it inaccessible, and then only use theorems that express properties of it</p>",
        "id": 125089382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743093
    },
    {
        "content": "<p>encapsulate is another mystery</p>",
        "id": 125089384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743112
    },
    {
        "content": "<p>these are all very CS words</p>",
        "id": 125089385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743117
    },
    {
        "content": "<p>I understand that a mathematician will come along with a proof that every cover has a finite subcover and will want to deduce that their space is compact</p>",
        "id": 125089391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743155
    },
    {
        "content": "<p>so I point them to the lemma which says this</p>",
        "id": 125089392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743161
    },
    {
        "content": "<p>[and make some snarky remark probably about how the definition is something else]</p>",
        "id": 125089393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743173
    },
    {
        "content": "<p>Category theory does this a lot, for example: A product of two objects is some object with a universal property, so that you can only use the universal property to prove stuff rather than unfolding whatever the product is \"actually\" defined to be in a particular category</p>",
        "id": 125089394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743179
    },
    {
        "content": "<p>universal properties I understand</p>",
        "id": 125089396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743193
    },
    {
        "content": "<p>but I don't understand why this is an argument for giving an unrecognisable definition of compact</p>",
        "id": 125089439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743206
    },
    {
        "content": "<p>A biconditional is also a \"universal property\", in a sense</p>",
        "id": 125089442,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743210
    },
    {
        "content": "<p>biconditional is a theorem of the form X iff Y?</p>",
        "id": 125089443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743228
    },
    {
        "content": "<p>it tells you everything you ever need to know about the definition, without actually telling you what the definition is</p>",
        "id": 125089444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743235
    },
    {
        "content": "<p>I see</p>",
        "id": 125089445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743241
    },
    {
        "content": "<p>but you really need to know where the theorem is</p>",
        "id": 125089448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743250
    },
    {
        "content": "<p>yes, that's the public part</p>",
        "id": 125089449,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743261
    },
    {
        "content": "<p>the definition is the private part</p>",
        "id": 125089457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743268
    },
    {
        "content": "<p>Maybe I saw this in java once</p>",
        "id": 125089459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743270
    },
    {
        "content": "<p>your variables are private</p>",
        "id": 125089460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743279
    },
    {
        "content": "<p>and you make some functions which lets the user change them</p>",
        "id": 125089462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743286
    },
    {
        "content": "<p>or read them</p>",
        "id": 125089463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743289
    },
    {
        "content": "<p>without actually letting them fiddle with them directly</p>",
        "id": 125089464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743300
    },
    {
        "content": "<p>sorry, methods</p>",
        "id": 125089465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743303
    },
    {
        "content": "<p>but I didn't realise this had anything to do with topological spaces at the time</p>",
        "id": 125089502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743325
    },
    {
        "content": "<p>One reasonably basic example of a gnarly construction is the Kuratowski pair (a,b) = {{a}, {a, b}}</p>",
        "id": 125089505,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743363
    },
    {
        "content": "<p>eew</p>",
        "id": 125089506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743368
    },
    {
        "content": "<p>eew</p>",
        "id": 125089507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743369
    },
    {
        "content": "<p>I see</p>",
        "id": 125089509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743377
    },
    {
        "content": "<p>that's a great example</p>",
        "id": 125089510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743382
    },
    {
        "content": "<p>we just need (a,b) = (c,d) iff a=c and b=d</p>",
        "id": 125089516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743390
    },
    {
        "content": "<p>exactly</p>",
        "id": 125089517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743395
    },
    {
        "content": "<p>so we point the user to where that is proved</p>",
        "id": 125089518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743396
    },
    {
        "content": "<p>and they can't see the disgusting truth behind it all</p>",
        "id": 125089519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743409
    },
    {
        "content": "<p>and later, we might want to change the definition for some reason to, say, {{0,a}, {1, b}} and that's okay as long as we can still prove the defining property, since no user depended on the specific construction</p>",
        "id": 125089559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743461
    },
    {
        "content": "<p>but the compactness thing is different. We go for Kuratowski because all the choices are horrible and this one is the least horrible</p>",
        "id": 125089560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743465
    },
    {
        "content": "<p>I see</p>",
        "id": 125089561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743489
    },
    {
        "content": "<p>it's not completely different</p>",
        "id": 125089563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743494
    },
    {
        "content": "<p>you are reserving the right to invent some even more weird thing that is better than filters</p>",
        "id": 125089574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743513
    },
    {
        "content": "<p>and then change the definition of compactness</p>",
        "id": 125089576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743518
    },
    {
        "content": "<p>because it compiles better on a quantum computer or whatever</p>",
        "id": 125089577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743534
    },
    {
        "content": "<p>or even just the point-set definition</p>",
        "id": 125089579,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743561
    },
    {
        "content": "<p>I see. In fact you could just play that trump card and that would shut me up</p>",
        "id": 125089616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743565
    },
    {
        "content": "<p>you should just say \"Kevin, you don't understand, the definition we have here works better if your machine has 8 cores\"</p>",
        "id": 125089620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743592
    },
    {
        "content": "<p>and I would have no response</p>",
        "id": 125089622,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743602
    },
    {
        "content": "<p>the real point is that <em>it shouldn't matter</em> what the actual definition is, and if it does you're doing it wrong</p>",
        "id": 125089623,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743605
    },
    {
        "content": "<p>This is different to mathematics</p>",
        "id": 125089626,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743617
    },
    {
        "content": "<p>If you wrote a maths book with some weird definitions of things</p>",
        "id": 125089630,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743625
    },
    {
        "content": "<p>and then proved theorems which said that they were the same as everyone else's definition</p>",
        "id": 125089634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743641
    },
    {
        "content": "<p>there's also the pedagogical angle, but that's a different issue</p>",
        "id": 125089635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743643
    },
    {
        "content": "<p>people would be confused as to why you were doing it</p>",
        "id": 125089639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743654
    },
    {
        "content": "<p>I don't think that exact thing is unheard of though</p>",
        "id": 125089641,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743673
    },
    {
        "content": "<p>and you can't answer \"this definition works better if you have 8 brains\"</p>",
        "id": 125089642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743674
    },
    {
        "content": "<p>your new definition might be suitable to a particular sort of generalization, for example</p>",
        "id": 125089684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743698
    },
    {
        "content": "<p>As you are probably aware, I am extremely interested in the pedagogical angle</p>",
        "id": 125089685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743704
    },
    {
        "content": "<p>and have very little understanding of stuff like run time analysis and other CS-related matters</p>",
        "id": 125089688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743726
    },
    {
        "content": "<p>in the pedagogical view, you might redefine the same thing several times depending on the current teaching goals</p>",
        "id": 125089689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743740
    },
    {
        "content": "<p>the new definition may not even be the same as earlier ones, although it is usually a generalization or provably equivalent</p>",
        "id": 125089695,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743774
    },
    {
        "content": "<p>So ultimately I should not care about your definitions, my main aim is to make sure that the interfaces are there.</p>",
        "id": 125089742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743835
    },
    {
        "content": "<p>exactly</p>",
        "id": 125089743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743841
    },
    {
        "content": "<p>OK maybe tomorrow I will degrump it a bit :-)</p>",
        "id": 125089744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743851
    },
    {
        "content": "<p>but now I have to make a birthday present</p>",
        "id": 125089745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743860
    },
    {
        "content": "<p>lol it's my birthday so I'll just pretend that's for me ;)</p>",
        "id": 125089750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523743885
    },
    {
        "content": "<p>ha ha it's for my son's GF</p>",
        "id": 125089752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743901
    },
    {
        "content": "<p>happy birthday</p>",
        "id": 125089753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743907
    },
    {
        "content": "<p>I'm not entirely sure you'd want a plastic T anyway</p>",
        "id": 125089795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523743959
    },
    {
        "content": "<p>good mathlib docs are a good present :)</p>",
        "id": 125089802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523744025
    },
    {
        "content": "<p>OK well seeing as it's your birthday I de-grumped the docs a bit.</p>",
        "id": 125091717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523748741
    },
    {
        "content": "<p>even though it's strictly speaking not even your birthday any more where I'm sitting</p>",
        "id": 125091718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523748761
    },
    {
        "content": "<p>I'm now about to get onto the job I meant to do today, which was to prove that Spec(R) is compact using some argument involving bases :-)</p>",
        "id": 125091723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523748790
    },
    {
        "content": "<p>now I understand the interface better :-)</p>",
        "id": 125091724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523748800
    },
    {
        "content": "<p>Thanks as ever, by the way.</p>",
        "id": 125091725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523748809
    },
    {
        "content": "<p>I forget if the contrapositive form of the compactness definition is there: a collection of closed sets with the finite intersection property has nonempty intersection</p>",
        "id": 125091768,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523748901
    },
    {
        "content": "<p>I didn't see it</p>",
        "id": 125091778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523748952
    },
    {
        "content": "<p>and I almost mentioned it as a theorem which should be there</p>",
        "id": 125091783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523748961
    },
    {
        "content": "<p>but then I decided I'd never used it in my life :-)</p>",
        "id": 125091819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523748970
    },
    {
        "content": "<p>I almost mentioned it the other day when Simon was asking whether the same was true for an arbitrary set</p>",
        "id": 125091830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749008
    },
    {
        "content": "<p>I guess it is somewhat similar to the filter definition</p>",
        "id": 125091840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523749044
    },
    {
        "content": "<p>Hmm, I've just realised that I want that a mathlib-basis is a Wikipedia-basis</p>",
        "id": 125091933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749203
    },
    {
        "content": "<p>that's just the first two parts of the definition</p>",
        "id": 125091939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523749241
    },
    {
        "content": "<p>oh sorry I don't mean that</p>",
        "id": 125091985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749339
    },
    {
        "content": "<p>If <code>h1</code> and <code>h2</code> are proofs of the two axioms, then <code>&lt;h1, h2, rfl&gt;</code> is a proof it's a mathlib-basis</p>",
        "id": 125091990,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523749384
    },
    {
        "content": "<p>that's what I've been saying</p>",
        "id": 125091994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523749399
    },
    {
        "content": "<p><code>is_topological_basis_of_open_of_nhds</code></p>",
        "id": 125091999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749436
    },
    {
        "content": "<p>I mean the converse of that</p>",
        "id": 125092001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749441
    },
    {
        "content": "<p>Yes, sorry, I understand now</p>",
        "id": 125092038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749444
    },
    {
        "content": "<p>I was talking nonsense at some points earlier</p>",
        "id": 125092043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749452
    },
    {
        "content": "<p>when I said \"wikipedia definition\"</p>",
        "id": 125092047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749460
    },
    {
        "content": "<p>I sometimes meant \"hypotheses in <code>is_topological_basis_of_open_of_nhds</code>\"</p>",
        "id": 125092049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749481
    },
    {
        "content": "<p>:-/</p>",
        "id": 125092050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749483
    },
    {
        "content": "<p><code>mem_nhds_of_is_topological_basis</code> is the easiest way to get converses of that stuff</p>",
        "id": 125092061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523749539
    },
    {
        "content": "<p><a href=\"https://topospaces.subwiki.org/wiki/Basis_for_a_topological_space\" target=\"_blank\" title=\"https://topospaces.subwiki.org/wiki/Basis_for_a_topological_space\">https://topospaces.subwiki.org/wiki/Basis_for_a_topological_space</a></p>",
        "id": 125092062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749560
    },
    {
        "content": "<p>but there should be a theorem saying that a basis element is open</p>",
        "id": 125092106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523749568
    },
    {
        "content": "<p>there's a website (which I've never heard of) giving that as the definition.</p>",
        "id": 125092108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749577
    },
    {
        "content": "<p>This is evidence that I am very fluid with what my definition is :-/</p>",
        "id": 125092111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749623
    },
    {
        "content": "<p>mem_nhds means I might have to get my hands dirty with neighbourhoods maybe :-/</p>",
        "id": 125092119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749650
    },
    {
        "content": "<p>which statement are you going for specifically?</p>",
        "id": 125092124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523749673
    },
    {
        "content": "<p>if B is a basis then I want that for all U open and for all x in U, there's V in B with x in V in U</p>",
        "id": 125092176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749781
    },
    {
        "content": "<p>because as we all know</p>",
        "id": 125092179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749792
    },
    {
        "content": "<p>50% of the time I will swear blind that this is the definition of a basis in Wikipedia</p>",
        "id": 125092223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749808
    },
    {
        "content": "<p>and I don't want to do induction on generate_open</p>",
        "id": 125092228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749837
    },
    {
        "content": "<p>I want this to be there on a plate</p>",
        "id": 125092229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749843
    },
    {
        "content": "<p>Kenny proved it</p>",
        "id": 125092231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749848
    },
    {
        "content": "<p>in a file called temp.lean :-)</p>",
        "id": 125092233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749860
    },
    {
        "content": "<p>but I was trying to avoid importing this file</p>",
        "id": 125092238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749879
    },
    {
        "content": "<p>because its name looked a bit ominous</p>",
        "id": 125092239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749885
    },
    {
        "content": "<p>I can do this myself</p>",
        "id": 125092284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749947
    },
    {
        "content": "<p>The lemmas I need are all there</p>",
        "id": 125092285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749954
    },
    {
        "content": "<p>I just need to glue them</p>",
        "id": 125092287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749957
    },
    {
        "content": "<p>This morning I didn't know what nhds a was</p>",
        "id": 125092292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749968
    },
    {
        "content": "<p>I have to remember that I'm not scared of it any more</p>",
        "id": 125092293,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523749976
    },
    {
        "content": "<p>I can add these to the file:</p>\n<div class=\"codehilite\"><pre><span></span>lemma is_open_of_is_topological_basis {s : set α} {b : set (set α)}\n  (hb : is_topological_basis b) (hs : s ∈ b) : _root_.is_open s :=\nis_open_iff_mem_nhds.2 $ λ a as,\n(mem_nhds_of_is_topological_basis hb).2 ⟨s, hs, as, subset.refl _⟩\n\nlemma mem_subset_basis_of_mem_open {b : set (set α)}\n  (hb : is_topological_basis b) {a:α} (u : set α) (au : a ∈ u)\n  (ou : _root_.is_open u) : ∃v ∈ b, a ∈ v ∧ v ⊆ u :=\n(mem_nhds_of_is_topological_basis hb).1 $ mem_nhds_sets ou au\n</pre></div>",
        "id": 125092339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523750054
    },
    {
        "content": "<p>It's the easy way of <code>is_open_iff_mem_nhds</code> I need and then I'm done :-)</p>",
        "id": 125092348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523750117
    },
    {
        "content": "<p>yeah, what you said</p>",
        "id": 125092388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523750179
    },
    {
        "content": "<p>I'd vote for them definitely.</p>",
        "id": 125092390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523750196
    },
    {
        "content": "<p>Then I can eschew temp.lean completely</p>",
        "id": 125092391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523750210
    },
    {
        "content": "<p>I like <code>mem_nhds_of_is_topological_basis</code> because it generalizes well to all sorts of bounded quantification over open sets that comes up in topology, like continuity or compactness that can be stated with basis sets</p>",
        "id": 125092393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523750211
    },
    {
        "content": "<p>I didn't like it until today because of the obscure definition of nhds</p>",
        "id": 125092398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523750244
    },
    {
        "content": "<p>but again there was a lemma -- in this case <code>mem_nhds_sets_iff</code> -- which made this clear</p>",
        "id": 125092449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523750348
    },
    {
        "content": "<p>or even <code>nhds_sets</code>, which I mention in the docs</p>",
        "id": 125092510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523750507
    },
    {
        "content": "<p>I see. I'm mentioning all the results that a mathematician needs for the interface.</p>",
        "id": 125092516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523750522
    },
    {
        "content": "<p>eew, <code>exists v \\in B</code> -- I have to run classical.some twice to get that v is in B</p>",
        "id": 125092887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523751470
    },
    {
        "content": "<p>You can use <code>exists.fst</code> for the <code>v \\in B</code> hypothesis</p>",
        "id": 125092927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523751525
    },
    {
        "content": "<p>That means <code>exists v in B, P</code> (B a set) unravels to <code>exists v in X, exists H : v in B, ...</code></p>",
        "id": 125092928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523751530
    },
    {
        "content": "<p>Why not unravel to <code>exists v in X, v in B and ...</code></p>",
        "id": 125092935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523751558
    },
    {
        "content": "<p>You can also use <code>exists v : B, P</code> to pack them both into one</p>",
        "id": 125092936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523751559
    },
    {
        "content": "<p>yeah but you wrote v in B not me ;-)</p>",
        "id": 125092937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523751580
    },
    {
        "content": "<p>because that same translation works for a wide variety of binders</p>",
        "id": 125092938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523751584
    },
    {
        "content": "<p>I don't know what a binder is</p>",
        "id": 125092975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523751603
    },
    {
        "content": "<p>A thing that introduces a bound variable</p>",
        "id": 125092981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523751620
    },
    {
        "content": "<p>like exists or forall or lambda</p>",
        "id": 125092982,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523751629
    },
    {
        "content": "<p>somehow I thought that there were only about three of these</p>",
        "id": 125092983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523751643
    },
    {
        "content": "<p>or Glb or Lub</p>",
        "id": 125092984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523751659
    },
    {
        "content": "<p>but you're saying \"exists v \\in B\" is somehow another one</p>",
        "id": 125092991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523751669
    },
    {
        "content": "<p>or indexed intersection</p>",
        "id": 125092992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523751675
    },
    {
        "content": "<p>I see.</p>",
        "id": 125093034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523751736
    },
    {
        "content": "<p>No, I'm saying that <em>every</em> binder has the translation <code>Q a R b, p a =&gt; Q a, Q (_ : a R b), p a</code> where <code>Q</code> is any binder</p>",
        "id": 125093035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523751740
    },
    {
        "content": "<p>and <code>R</code> is any infix operator</p>",
        "id": 125093037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523751759
    },
    {
        "content": "<p><code>unknown identifier 'exists.fst'</code></p>",
        "id": 125093038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523751772
    },
    {
        "content": "<p>should be in <code>logic.basic</code></p>",
        "id": 125093039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523751781
    },
    {
        "content": "<p>It's <code>Exists.fst</code> so you can use projections</p>",
        "id": 125093044,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523751802
    },
    {
        "content": "<p>capital E, got it</p>",
        "id": 125093083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523751876
    },
    {
        "content": "<p>you use Q again</p>",
        "id": 125093090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523751925
    },
    {
        "content": "<blockquote>\n<p>OK well seeing as it's your birthday I de-grumped the docs a bit.</p>\n</blockquote>\n<p>I think it still misses the main point of using filters: you have limits at a point and limits when a real variable or a natural number goes to infinity gathered in a single definition. For instance uniqueness of limit that you mention in your doc is proved for all three (and more) situations at once. This has nothing to do with \"non-mathematical points such as running times\".</p>",
        "id": 125106157,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523785889
    },
    {
        "content": "<p>I just don't know anything about how filters are used in practice so am in no position to be able to write those parts of the docs properly. I've never had to use them before and I don't really care about explaining them for this reason; I just wanted to get down the things I needed to know myself.</p>",
        "id": 125107091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523788318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  just added your documentation, I guess we can add more comments on filters later.<br>\nI think one problem why there is not a lot of knowledge about filters (or nets) in math, is that it is obvious and usually something you don't need to think about. But we are in a formal system, so we are either forced to generalize over limits (using filters or nets) or we produce a lot of duplication (as Mario and Patrick mentioned). We can avoid them and define things like <code>compact</code> using open covers etc. But some proofs get much more concise using the fact that you can use the complete lattice (and even category theory) properties properties of filters. Currently it is not always intuitive to work with filters, but maybe with more automation and better syntax notations and support from the parser it may get better.<br>\nIn the end they are a powerful abstraction, and as most abstractions it takes some time to learn it.</p>",
        "id": 125116397,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523811629
    },
    {
        "content": "<p>Yeah, Mario convinced me not to worry about what was a definition and what was a theorem, as long as the theorems were all there.</p>",
        "id": 125116956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523813084
    },
    {
        "content": "<p>There is a very expressive way to use filters, with the word eventually.<br>\n<code>def eventually {α : Type} (P : α → Prop) (f : filter α) := {x | P x} ∈ f.sets</code><br>\nThen if you want to say that, eventually, some function u defined on nat is nonnegative, you write<br>\n<code>eventually (λn, 0 ≤ u n) at_top</code><br>\nIf you want to say the same thing around a point x, say (which corresponds to a filter <code>at x</code>), you just write it as<br>\n<code>eventually (λy, 0 ≤ f y) (at x)</code><br>\nIn this way, you can also write readable definitions of limits, or essentially whatever involves filters. This is the only way I use filters in Isabelle, and I was essentially never stuck.</p>",
        "id": 125120174,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1523821109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> what do you think about adding (and using) this definition?</p>",
        "id": 125122549,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523826703
    },
    {
        "content": "<p>I'm fine with adding this definition, especially with a corresponding quantifier notation (and also its dual the <code>frequently</code> quantifier). I'm just not sure if we should abandon the <code>f.sets</code> notation or keep both.</p>",
        "id": 125137370,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523860631
    },
    {
        "content": "<p>I want to refactor the filter stuff so that <code>.sets</code> is superfluous, i.e. <code>s \\in f</code> means <code>s \\in f.sets</code>. I guess we can support <code>eventually</code> if it's a <code>reducible</code> definition, but I don't like the idea of duplicating everything for this purpose</p>",
        "id": 125137483,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523860884
    },
    {
        "content": "<p>Setting up a <code>has_mem</code> for filter is surely a good idea.</p>",
        "id": 125138117,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1523862297
    }
]