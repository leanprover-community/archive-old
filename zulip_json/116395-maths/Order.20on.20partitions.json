[
    {
        "content": "<p>If I tell you that <code>P</code> and <code>Q</code> are two partitions of a set, what do you expect <code>P ≤ Q</code> to mean? In particular, which of <code>P</code> and <code>Q</code> should have the most parts?</p>",
        "id": 267385602,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641774133
    },
    {
        "content": "<p>I would expect it to mean \"there's a map from P to Q\" so I would expect it to mean \"if you're related by the P relation then you're related by the Q relation\" so I'd expect P to have more parts</p>",
        "id": 267386560,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641775750
    },
    {
        "content": "<p>This is also the convention on wikipedia</p>",
        "id": 267387203,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641776810
    },
    {
        "content": "<p>With this convention, the discrete partition is <code>bot</code>, just like the discrete topology.</p>",
        "id": 267387713,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641777664
    },
    {
        "content": "<p>You are aware or <a href=\"https://leanprover-community.github.io/mathlib_docs/find/setoid.partition.complete_lattice\">docs#setoid.partition.complete_lattice</a> right?</p>",
        "id": 267388768,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641779389
    },
    {
        "content": "<p>Hmm... That's annoying. Because if <code>P ≤ Q</code> means \"there's a map from <code>Q</code> to <code>P</code>\", then we can make it into a graded order with grade function the number of parts <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">- 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span></span></span></span> and state this theorem: <a href=\"/user_uploads/3121/sFJAfx61hg7TFvuXgu5USM4s/image.png\">image.png</a>.</p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/sFJAfx61hg7TFvuXgu5USM4s/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/sFJAfx61hg7TFvuXgu5USM4s/image.png\"></a></div>",
        "id": 267405083,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641801746
    },
    {
        "content": "<p><code>P ≤ Q</code> iff there's a map from <code>P</code> to <code>Q</code> seems to be a mathlib-wide convention. For example with topologies T1 &lt;= T2 iff the identity is a continuous map from T1 to T2, and with filters F1 &lt;= F2 iff F1 tends to F2 along the identity map</p>",
        "id": 267406413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641802746
    },
    {
        "content": "<p>I don't see the relevance of your screenshot. Theorems about maximal pairwise incomparable partitions won't care about which way the order is</p>",
        "id": 267406621,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641802900
    },
    {
        "content": "<p>The convention for graded functions is for the grade function to go from <code>α → ℕ</code> and be monotone. This is not possible with the convention on partitions as that would mean the grade goes arbitrarily low.</p>",
        "id": 267407323,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641803354
    },
    {
        "content": "<p>For a general partial order it's not going to be nat-valued</p>",
        "id": 267407755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641803628
    },
    {
        "content": "<p>Yeah, so maybe I'll have to make a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>-valued version too...</p>",
        "id": 267407871,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641803681
    },
    {
        "content": "<p>It's sad because partitions would fit the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> framework great were they ordered the other way.</p>",
        "id": 267407916,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641803712
    },
    {
        "content": "<p>Isn't the lattice of partitions of a finite type both \"graded and cograded\"? It has both top and bottom elements</p>",
        "id": 267425665,
        "sender_full_name": "David Wärn",
        "timestamp": 1641813379
    },
    {
        "content": "<p>\"of a <strong>finite</strong> type\", yes. I'm talking in general. Even when the type is finite, your grade function won't ever be as nice as the number of parts minus 1.</p>",
        "id": 267425922,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641813556
    },
    {
        "content": "<p>But on a general type you have to restrict to finite partitions to get a grading, no? Or to cofinite partitions to get a cograding</p>",
        "id": 267426132,
        "sender_full_name": "David Wärn",
        "timestamp": 1641813669
    },
    {
        "content": "<p>Yes, and we have <a href=\"https://github.com/leanprover-community/mathlib/pull/9795\">#9795</a> which defines finite partitions. What's a cofinite partition?</p>",
        "id": 267426474,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641813902
    },
    {
        "content": "<p>I just made it up, but you would have to look at partitions where each part is finite and all but finitely many are singletons</p>",
        "id": 267426626,
        "sender_full_name": "David Wärn",
        "timestamp": 1641813981
    },
    {
        "content": "<p>Oh, that's a funny one</p>",
        "id": 267426732,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641814060
    },
    {
        "content": "<p>On a finite type <code>S</code> the grade of a partition <code>P</code> will be <code>card S - card P</code>. Arguably this is even nice than <code>card P - min(1, card S)</code></p>",
        "id": 267426747,
        "sender_full_name": "David Wärn",
        "timestamp": 1641814070
    },
    {
        "content": "<p>Why not just <code>card P - 1</code>?</p>",
        "id": 267427069,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641814245
    },
    {
        "content": "<p>An empty type is graded wrt to any grade function.</p>",
        "id": 267427843,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641814719
    },
    {
        "content": "<p>Actually <code>card P - 1</code> does work with truncated nat subtraction. My point was that if <code>S</code> is empty then there is a unique partition and it has cardinality <code>0</code></p>",
        "id": 267432967,
        "sender_full_name": "David Wärn",
        "timestamp": 1641818331
    },
    {
        "content": "<p>Anyway I agree it would be nice to be able to talk about the graded lattice of finite partitions of a general type. But I don't think there's a strong reason to prefer either ordering over the other</p>",
        "id": 267433255,
        "sender_full_name": "David Wärn",
        "timestamp": 1641818501
    },
    {
        "content": "<p>Btw <a href=\"https://github.com/leanprover-community/mathlib/pull/11308\">#11308</a> for graded orders</p>",
        "id": 267433597,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1641818711
    }
]