[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.set.basic</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">classical.em</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Can we prove it without <code>classical.em</code> in lean?</p>",
        "id": 213638481,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1602917028
    },
    {
        "content": "<p>I think it's equivalent. Given an arbitrary proposition P you can make the set of natural numbers such that P holds and then asking if 37 is in or not is just asking if P is true or false</p>",
        "id": 213639257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602918655
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">H</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">unit</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">(),</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span> <span class=\"n\">α</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 213639443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602919071
    },
    {
        "content": "<p>oh oops, here's a better version</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">∨</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">p</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">H</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"n\">ℕ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span> <span class=\"n\">α</span> <span class=\"n\">X</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">X</span><span class=\"o\">)⟩</span>\n</code></pre></div>",
        "id": 213639601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602919344
    },
    {
        "content": "<p>That means: intuitionistic logic can't prove <code>x ∈ s ∨ x ∉ s</code>?</p>",
        "id": 213640445,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1602921319
    },
    {
        "content": "<p>Because sets are functions taking values in Prop not bool</p>",
        "id": 213640493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602921386
    },
    {
        "content": "<p>I use <code>classical.em</code> in this theorem. But I hope that the proof of theorem <code>union_diff_cancel</code> does not rely on the <em>law of excluded middle</em>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universe</span> <span class=\"kd\">variables</span> <span class=\"n\">u</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">union_diff_cancel</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_union_eq</span><span class=\"o\">,</span> <span class=\"n\">set.mem_diff</span><span class=\"o\">,</span> <span class=\"n\">set.subset_def</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rintro</span> <span class=\"o\">(</span><span class=\"n\">h₁</span><span class=\"bp\">|</span><span class=\"o\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span><span class=\"n\">h₂</span><span class=\"o\">⟩),</span>\n    <span class=\"o\">{</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">classical.em</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"c1\">-- TODO: remove classical.em</span>\n    <span class=\"n\">cases</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">left</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">right</span><span class=\"o\">,</span>\n      <span class=\"n\">split</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213640495,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1602921414
    },
    {
        "content": "<p>Set unit = Prop</p>",
        "id": 213640496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602921419
    },
    {
        "content": "<p>unfortunately it does</p>",
        "id": 213640499,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1602921430
    },
    {
        "content": "<p>If alpha is unit, s is P and t is Q you can just directly work out the logic statement that this is equivalent to</p>",
        "id": 213640541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602921512
    },
    {
        "content": "<p>P implies Q is your hypothesis and the conclusion is P or (Q and not P) implies Q</p>",
        "id": 213640551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602921573
    },
    {
        "content": "<p>So your question is simply whether this is true constructively</p>",
        "id": 213640599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602921631
    },
    {
        "content": "<p>And so maybe this is ok</p>",
        "id": 213640612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602921664
    },
    {
        "content": "<p>The general case will reduce to this using functional or set extensionality</p>",
        "id": 213640625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602921715
    },
    {
        "content": "<p>Oh no crap</p>",
        "id": 213640672,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602921769
    },
    {
        "content": "<p>It's P or (Q and not P) is <em>equivalent</em> to Q</p>",
        "id": 213640682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602921806
    },
    {
        "content": "<p>So you're in trouble</p>",
        "id": 213640683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602921814
    },
    {
        "content": "<p>So you're not ok as Kenny says</p>",
        "id": 213640723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602921857
    },
    {
        "content": "<p>You're ok if you assume the set <code>s</code> is given by a decidable predicate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">union_diff_cancel</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_diff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_union_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"n\">xel</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"n\">xnel</span><span class=\"o\">⟩),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">xel</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">xel</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- by_cases x ∈ s, -- but expanded out using the instance just to show there's no classical.em sneaking in</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"bp\">|</span> <span class=\"n\">h₂</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Using <code>by_cases</code> like usual:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">union_diff_cancel</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_diff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_union_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"n\">xel</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"n\">xnel</span><span class=\"o\">⟩),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">xel</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">xel</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213640804,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602922063
    },
    {
        "content": "<p>Referencing what Kevin said,</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/law.20of.20excluded.20middle.20in.20set.20membership/near/213640493\">said</a>:</p>\n<blockquote>\n<p>Because sets are functions taking values in Prop not bool</p>\n</blockquote>\n<p>what <code>decidable_pred</code> gives you is a way to, essentially, turn the <code>Prop</code>-valued set membership function into a <code>bool</code>-valued one.  However, this restricts which sets you're allowed to use this theorem with.</p>",
        "id": 213641011,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602922470
    },
    {
        "content": "<p>Thank you very much. </p>\n<p>But remove <code>[decidable_pred s]</code> in second example also works. Is by_cases introduce em?</p>",
        "id": 213641208,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1602922873
    },
    {
        "content": "<p>yes</p>",
        "id": 213641564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602923582
    },
    {
        "content": "<p>well, it will use a decidable instance if it can</p>",
        "id": 213641567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602923603
    },
    {
        "content": "<p>So, if I want to force it only use <em>a decidable instance</em>, I should write the first style, <code>rcases p x with (h₁ | h₂)</code>.</p>",
        "id": 213641620,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1602923708
    },
    {
        "content": "<p>I'm a bit confused... it looks like the proofs that the tactics generate are exactly the same whether or not that <code>decidable_pred</code> is there.</p>",
        "id": 213641663,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602923791
    },
    {
        "content": "<p>Oh, never mind.  I didn't set it to <code>pp.all</code>.  Without the <code>decidable_pred</code>, it uses <code>classical.prop_decidable</code> instead.</p>",
        "id": 213641783,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602924025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"329691\">@ZHAO Jinxiang</span> I'm not sure what you should do -- I only wrote that because it came to mind.  I usually use classical reasoning within proofs myself.</p>",
        "id": 213641840,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602924164
    },
    {
        "content": "<p>What's <code>pp.all</code>?</p>",
        "id": 213641845,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1602924178
    },
    {
        "content": "<p>First, I was using the command <code>#print union_diff_cancel</code> to get Lean to print the proof term.  Then I remembered to add <code>set_option pp.all true</code> before this to get it to show the full form of the term -- all implicit arguments become visible</p>",
        "id": 213641898,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602924276
    },
    {
        "content": "<p>It turns out <code>set_option pp.implicit true</code> is enough to see the difference, and it's easier to read than <code>pp.all</code></p>",
        "id": 213641911,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602924317
    },
    {
        "content": "<p>I am trying to translate <a href=\"https://www.springer.com/gp/book/9789811017896\">a math book</a> to lean, I want to derive all theorems from axioms as much as possible.</p>",
        "id": 213641912,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1602924320
    },
    {
        "content": "<p>To be perfectly frank, lean isn't the best tool for proofs in a restricted logic, unless that logic is intuitionistic logic</p>",
        "id": 213641962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602924375
    },
    {
        "content": "<p>the majority of mathlib use is predicated on full classical logic</p>",
        "id": 213641974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602924420
    },
    {
        "content": "<p>Is there any reason you don't take <code>classical.em</code> as an axiom then?</p>",
        "id": 213641977,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602924424
    },
    {
        "content": "<p>I would imagine that Tao's Analysis 1 is written for classical logic</p>",
        "id": 213641984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602924476
    },
    {
        "content": "<p>Yes.</p>",
        "id": 213642025,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1602924489
    },
    {
        "content": "<p>so then there are no problems</p>",
        "id": 213642028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602924497
    },
    {
        "content": "<p>just use mathlib normally</p>",
        "id": 213642030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602924504
    },
    {
        "content": "<p>Ok, I'll use classical logic. <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>",
        "id": 213642032,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1602924522
    },
    {
        "content": "<p>Also, have you looked at the proof of <code>classical.em</code>? It follows from other axioms.</p>",
        "id": 213642040,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602924578
    },
    {
        "content": "<p>If you get too close to the foundations you will notice that the axioms don't match up 1-1 to a logic textbook, but the full theories are roughly equivalent</p>",
        "id": 213642041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602924579
    },
    {
        "content": "<p>like there is no axiom for \"and elimination\" in lean, it falls out of a much more general axiom schema for inductive types</p>",
        "id": 213642089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602924636
    },
    {
        "content": "<p>Both of the proofs of <code>union_diff_cancel</code> depend on the two axioms <code>classical.em</code> follows from, if I'm not mistaken.</p>",
        "id": 213642092,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602924644
    },
    {
        "content": "<p><code>union_diff_cancel</code> is equivalent to EM</p>",
        "id": 213642097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602924685
    },
    {
        "content": "<p>Sure, what I mean is that the proof terms explicitly have the <code>propext</code> and <code>funext</code> (but as <code>set.ext</code>)</p>",
        "id": 213642103,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602924717
    },
    {
        "content": "<p>so if that's true, there's no point avoiding <code>classical.em</code></p>",
        "id": 213642145,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602924739
    },
    {
        "content": "<p>well the biggie is <code>classical.choice</code></p>",
        "id": 213642151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602924762
    },
    {
        "content": "<p>also <code>funext</code> isn't an axiom in lean</p>",
        "id": 213642158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602924786
    },
    {
        "content": "<p>(I know that <code>funext</code> comes from quotient types and I was using \"axiom\" loosely, but I did forget <code>classical.prop_decidable</code> used <code>classical.choice</code> in those last comments.)</p>",
        "id": 213642289,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602925038
    },
    {
        "content": "<p>is it possible to make <code>by_cases</code> use <code>classical.em</code> when possible? (assuming anyone cared about <code>classical.choice</code> in their proofs?)</p>",
        "id": 213642338,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602925109
    },
    {
        "content": "<p>Wasn't that added in <a href=\"https://github.com/leanprover-community/lean/issues/409\">lean#409</a>?</p>",
        "id": 213642469,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602925333
    },
    {
        "content": "<p>It looks like it uses <code>classical.prop_decidable</code> as a fallback, which is implemented with <code>classical.choice</code>.</p>",
        "id": 213642545,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602925519
    },
    {
        "content": "<p>I'm ok with choice, so this isn't a serious question in any way.  But if anyone isn't ok with it, it seems like for <code>Prop</code> goals <code>by_cases</code> could use <code>classical.em</code> instead.</p>",
        "id": 213642612,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1602925638
    },
    {
        "content": "<p>Oh, sorry, I see what you mean now.</p>",
        "id": 213642616,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1602925653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/116395-maths/topic/law.20of.20excluded.20middle.20in.20set.20membership/near/213640804\">said</a>:</p>\n<blockquote>\n<p>You're ok if you assume the set <code>s</code> is given by a decidable predicate:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">union_diff_cancel</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_diff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_union_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"n\">xel</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"n\">xnel</span><span class=\"o\">⟩),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">xel</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">xel</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- by_cases x ∈ s, -- but expanded out using the instance just to show there's no classical.em sneaking in</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"bp\">|</span> <span class=\"n\">h₂</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n<p>Using <code>by_cases</code> like usual:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">union_diff_cancel</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_diff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_union_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"n\">xel</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"n\">xnel</span><span class=\"o\">⟩),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">xel</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">xel</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n\n</blockquote>\n<p>What's the difference  with <code>t x</code> and <code>x ∈ t</code>?</p>",
        "id": 213712597,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1603036691
    },
    {
        "content": "<p>They are definitionally, but not syntactically, equal.</p>",
        "id": 213712607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603036719
    },
    {
        "content": "<p>Can we change it  syntactically?</p>",
        "id": 213712622,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1603036771
    },
    {
        "content": "<p><code>rw set.mem_def</code> I think</p>",
        "id": 213712628,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1603036797
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">union_diff_cancel</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">decidable_pred</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">∪</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"bp\">\\</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">t</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_diff</span><span class=\"o\">,</span> <span class=\"n\">set.mem_union_eq</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">(</span><span class=\"n\">xel</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"n\">xnel</span><span class=\"o\">⟩),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">xel</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">xel</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"bp\">|</span> <span class=\"n\">h₂</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rewrite</span> <span class=\"bp\">&lt;-</span><span class=\"n\">set.mem_def</span> <span class=\"n\">at</span> <span class=\"n\">h₁</span><span class=\"o\">,</span>  <span class=\"c1\">-- rewrite tactic failed, did not find instance of the pattern in the target expression</span>\n      <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">xel</span><span class=\"o\">,</span> <span class=\"n\">h₁</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h₂</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213712967,
        "sender_full_name": "ZHAO Jinxiang",
        "timestamp": 1603037254
    },
    {
        "content": "<p><code>      rewrite ← @set.mem_def _ x s at h₁,</code> works. Lean needs some hints for some reason</p>",
        "id": 213730416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1603061762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"329691\">ZHAO Jinxiang</span> <a href=\"#narrow/stream/116395-maths/topic/law.20of.20excluded.20middle.20in.20set.20membership/near/213712597\">said</a>:</p>\n<blockquote>\n<p>What's the difference  with <code>t x</code> and <code>x ∈ t</code>?</p>\n</blockquote>\n<p><code>x ∈ t</code> is defined to be <code>t x</code>, and should <em>always</em> be favored. It is a bad habit to break the abstraction barrier of sets. The phrase <code>decidable_pred s</code> also breaks the abstraction barrier, and should be replaced by <code>decidable_pred (∈ s)</code>.</p>",
        "id": 213730938,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1603062577
    },
    {
        "content": "<p>There is an instance <code>[decidable_pred s] : decidable_pred (∈s)</code>, so at least this doesn't create diamonds.</p>",
        "id": 213731928,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1603064505
    }
]