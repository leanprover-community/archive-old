[
    {
        "content": "<p>Thanks! This get me to rethink about the meaning of something like <code>intro a,</code>, it's a <code>forall a \\in A</code>, rather than actually asserting <code>A</code> is nonempty and instantiating some <code>a</code> from the non-empty set, and <code>|- A -&gt; B</code> is esentially \"if  A \\ne \\emptyset then B \\ne \\emptyset \" but in a constructive manner, so \"if \\exist a \\in A then \\exist \"formula of a\" \\in B\", which is vacously true in the case that <code>A</code> is empty</p>",
        "id": 270813932,
        "sender_full_name": "Matt Yan",
        "timestamp": 1644049326
    },
    {
        "content": "<p>Right. In lean you have these hypotheses above the <code>|-</code> and then the goal to the right of it, but the hypotheses might be nonsense (eg elements of empty sets) and the goal might be nonsense too. All lean is asking for is a proof that the hypotheses imply the goal. In maths you see this phenomenon in a proof by contradiction; then you often have things floating around which are assumptions which can't actually happen</p>",
        "id": 270814179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644049768
    },
    {
        "content": "<p>it's not just non-sensical assumptions floating around in a classical proof by contradiction, it's also always proving something contradictory too (exactly like a nonsensical goal in LEAN)! I think it's exactly like a proof by contradiction, however there seems to be one difference: in classical proofs you start a proof by contradiction intentionally by setting up  a negation of the proposition, but in lean proof by contradiction seems to happen vary naturally....I think implied by the fact that instantiation isn't always possible</p>",
        "id": 270814797,
        "sender_full_name": "Matt Yan",
        "timestamp": 1644050636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"476897\">Matt Yan</span> has marked this topic as resolved.</p>",
        "id": 270815007,
        "sender_full_name": "Notification Bot",
        "timestamp": 1644050897
    },
    {
        "content": "<p>Thank you so much! Amazing game and notes you have developed!</p>",
        "id": 270815096,
        "sender_full_name": "Matt Yan",
        "timestamp": 1644051075
    }
]