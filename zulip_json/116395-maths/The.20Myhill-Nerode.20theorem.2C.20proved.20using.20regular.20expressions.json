[
    {
        "content": "<p>Found this interesting paper. This might give us a way to formalize regular languages without depending on automata (and graphs).</p>\n<p><a href=\"https://nms.kcl.ac.uk/christian.urban/Publications/rexp.pdf\">https://nms.kcl.ac.uk/christian.urban/Publications/rexp.pdf</a></p>",
        "id": 203640827,
        "sender_full_name": "Chris Wong",
        "timestamp": 1594555258
    },
    {
        "content": "<p>The two sentences</p>\n<blockquote>\n<p>Unfortunately, automata are not so straightforward to<br>\nformalise in theorem provers. The reason is that natural representations for automata are<br>\ngraphs, matrices or functions, none of which are inductive datatypes.</p>\n</blockquote>\n<p>sounds very strange relative to mathlib! :-)</p>",
        "id": 203641020,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594555565
    },
    {
        "content": "<p>And a little bit later:</p>\n<blockquote>\n<p>Systems such as Coq permit quantification over<br>\ntypes and thus can state such a definition. This has been recently exploited in an elegant and<br>\nshort formalisation of the Myhill-Nerode theorem in Coq by Doczkal et al. (2013), but as<br>\nsaid this is not available to us working in Isabelle/HOL.</p>\n</blockquote>\n<p>suggests that this approach is not going to be a natural one for Lean.</p>",
        "id": 203641025,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594555589
    },
    {
        "content": "<p>Yeah, I can see how we're not constrained in the same way Isabelle/HOL folks are :P</p>\n<p>What do you mean by it being unnatural?</p>",
        "id": 203641783,
        "sender_full_name": "Chris Wong",
        "timestamp": 1594557070
    },
    {
        "content": "<p>(I guess since Myhill-Nerode is so easy to prove in terms of automata, any other approach will feel unnatural in comparison? <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> )</p>",
        "id": 203642404,
        "sender_full_name": "Chris Wong",
        "timestamp": 1594558156
    },
    {
        "content": "<p>No -- I just meant that they are essentially complaining about the lack of dependent types, and point out that it was straightforward to formalise in Coq, and presumably for this problem Coq and Lean will be pretty equivalent.</p>",
        "id": 203642698,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1594558679
    },
    {
        "content": "<p>Yeah, I found this repo soon afterward (along with a bunch of papers):</p>\n<p><a href=\"https://github.com/coq-community/reglang\">https://github.com/coq-community/reglang</a></p>\n<p>I guess a Lean translation of this would be quite doable, but not very interesting (in terms of research value)</p>",
        "id": 203643878,
        "sender_full_name": "Chris Wong",
        "timestamp": 1594560441
    },
    {
        "content": "<p>There seem to be quite a few different implementations in coq with different aims. The connection with decision procedures for presburger arithmetic (aka <code>omega</code> in lean)  sounds really cool though to me.</p>",
        "id": 203645196,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594562744
    }
]