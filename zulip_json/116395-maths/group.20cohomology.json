[
    {
        "content": "<p>So I'm embarking on group cohomology with an MSc student <span class=\"user-mention\" data-user-id=\"243895\">@Shenyang Wu</span> and we're defining <code>d</code> on cochains. As part of the definition we have these \"contraction\" maps <code>F (n : nat) (j : fin (n + 1)) (g : fin (n + 1) -&gt; G) : fin n -&gt; G</code> with definition <code>lam k, if k &lt; j then g k else if k = j then (g j) * (g (j + 1)) else g (k + 1)</code> and we'll need a lemma of the form F n k \\circ F (n + 1) j = something like F n j \\circ F (n + 1) k except that depending on whether j&lt;k or k&lt;j some j should be a j-1 or maybe some k should be a k-1. This is all no doubt some fundamental construction in some category of simplicial sets or something. <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> is what we need already in mathlib or available somewhere else, so we're not re-inventing the wheel? We need to understand <code>F</code> to prove d^2=0.</p>",
        "id": 180126655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573129459
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> proved that the chain complex of a simplicial abelian group is a complex (d^2 = 0)</p>",
        "id": 180180118,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573163468
    },
    {
        "content": "<p>There is another way to set this up, where <code>F (n : nat) (j : fin (n + 1)) (g : fin (n + 1) -&gt; G) : fin n -&gt; G</code> just drops the j'th term</p>",
        "id": 180180135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573163495
    },
    {
        "content": "<p>However depending on how you set things up, you might have some difficulty showing that you have a simplicial object</p>",
        "id": 180180148,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573163503
    },
    {
        "content": "<p>Yes, that way will be a lot easier, I think.</p>",
        "id": 180180169,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573163512
    },
    {
        "content": "<p>Thanks.</p>",
        "id": 180180267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573163542
    },
    {
        "content": "<p>At least, if you want to connect to Johan's work. Because you already have a simplicial object more or less by definition (a simplicial operator just acts by precomposition).</p>",
        "id": 180180283,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573163547
    },
    {
        "content": "<p>I think Johan's work might have been in a PR that was never merged, let me see if I can find it</p>",
        "id": 180180357,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573163599
    },
    {
        "content": "<p>Well I found <a href=\"https://github.com/leanprover-community/mathlib/issues/144\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/144\">#144</a>, but I think there may have been a second attempt</p>",
        "id": 180180495,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573163709
    },
    {
        "content": "<p>Hmm, maybe there is only <a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/category_theory/simplex.lean\" target=\"_blank\" title=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/category_theory/simplex.lean\">https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/category_theory/simplex.lean</a></p>",
        "id": 180180683,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573163854
    },
    {
        "content": "<p>Do you have any intention of PR'ing all that stuff?</p>",
        "id": 180180816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573163933
    },
    {
        "content": "<p>I want to make group cohomology in Lean and I'm pretty sure that some of those tools are going to be useful for setting up the basics.</p>",
        "id": 180180861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573163962
    },
    {
        "content": "<p>I have too big a backlog of things to PR...</p>",
        "id": 180181015,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573164042
    },
    {
        "content": "<p>But this file doesn't depend on anything else in lean-homotopy-theory at least</p>",
        "id": 180181041,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573164060
    },
    {
        "content": "<p>In your second setup, are you planning to mod out <code>fin (n + 1) -&gt; G</code> by the diagonal action of G?</p>",
        "id": 180181089,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573164086
    },
    {
        "content": "<p>I'm wondering whether I can get away with not doing it.</p>",
        "id": 180181170,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573164128
    },
    {
        "content": "<p>The alternative is to require that <code>0</code> is mapped to the identity of G but then the first face map will have a funny formula</p>",
        "id": 180181186,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573164146
    },
    {
        "content": "<p><a href=\"https://mathoverflow.net/questions/6950/why-is-the-standard-definition-of-cocycle-the-one-that-always-comes-up\" target=\"_blank\" title=\"https://mathoverflow.net/questions/6950/why-is-the-standard-definition-of-cocycle-the-one-that-always-comes-up\">https://mathoverflow.net/questions/6950/why-is-the-standard-definition-of-cocycle-the-one-that-always-comes-up</a></p>",
        "id": 180181187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573164147
    },
    {
        "content": "<p>I started by telling <span class=\"user-mention\" data-user-id=\"243895\">@Shenyang Wu</span> to use <code>(fin n -&gt; G) -&gt; M</code> and using the \"twisted\" d, which involves those maps <code>F</code> I mentioned earlier</p>",
        "id": 180181239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573164191
    },
    {
        "content": "<p>and then I realised that working with <code>fin (n + 1) -&gt; G</code> might be easier because the d^2=0 proof looked much easier</p>",
        "id": 180181268,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573164216
    },
    {
        "content": "<p>but then you have to work around this quotient issue</p>",
        "id": 180181368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573164272
    },
    {
        "content": "<p>As one of the answers observed, rather than actually form a quotient, you could then take only G-equivariant functions out of it</p>",
        "id": 180181417,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573164304
    },
    {
        "content": "<p>G-equivariant functions from <code>fin (n + 1) -&gt; G</code> to <code>M</code></p>",
        "id": 180181459,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573164337
    },
    {
        "content": "<p>Actually I guess you have to do it that way maybe?</p>",
        "id": 180181517,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573164363
    },
    {
        "content": "<p>when M has nontrivial action</p>",
        "id": 180181538,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573164379
    },
    {
        "content": "<p>Oh, it's even in your question.</p>",
        "id": 180181561,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573164396
    },
    {
        "content": "<p>I should probably read that question at some point</p>",
        "id": 180181654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573164479
    },
    {
        "content": "<p>I'm a little surprised I didn't answer this question</p>",
        "id": 180181921,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573164616
    },
    {
        "content": "<p>do you know the answer? I remember being not too convinced by any of the topologists' suggestions.</p>",
        "id": 180181982,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573164651
    },
    {
        "content": "<p>Let me try to give what I think is a better answer</p>",
        "id": 180182000,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573164662
    },
    {
        "content": "<p>I see cocycles coming up in all sorts of calculations in group theory</p>",
        "id": 180182012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573164667
    },
    {
        "content": "<p>I'm not sure exactly how well this will go, but anyways</p>",
        "id": 180182371,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573164875
    },
    {
        "content": "<p>You should start with the category EG, which has one object for each element of G, and a unique morphism between any pair of objects</p>",
        "id": 180182380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573164891
    },
    {
        "content": "<p>This is a \"resolution\" of the category with one object and one morphism (we know maps out of this are G-fixed points, so this has something to do with group cohomology) as something on which G acts freely, by left multiplication, say</p>",
        "id": 180182549,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573164993
    },
    {
        "content": "<p>Let's look at the orbits of EG under the action of G</p>",
        "id": 180182616,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573165045
    },
    {
        "content": "<p>There's obviously just one orbit of objects. For morphisms, if we have a morphism from x to y, give it the label x^{-1} y. Then g sends it to a morphism from gx to gy with the same label (gx)^{-1} gy = x^{-1} y. It's easy to see morphisms with the same label make up the orbits.</p>",
        "id": 180182796,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573165140
    },
    {
        "content": "<p>Moreover if we compose a morphism with label x^{-1} y with a morphism with label y^{-1} z we get a morphism with label x^{-1} z = (x^{-1} y) (y^{-1} z), so labels multiply under composition</p>",
        "id": 180182919,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573165208
    },
    {
        "content": "<p>So if we form the quotient EG/G, we get the category BG with one object and one morphism for each element of G, where composition of morphisms corresponds to multiplication in G.</p>",
        "id": 180182942,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573165233
    },
    {
        "content": "<p>Now, let's look at simplices of the nerve of EG. An n-simplex of the nerve of EG is a functor from [n] = the category {0 -&gt; 1 -&gt; ... -&gt; n} to EG.</p>",
        "id": 180182984,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573165266
    },
    {
        "content": "<p>But in EG there's a unique morphism between any two objects, so this is just given by a function from {0, 1, ..., n} to G.</p>",
        "id": 180183018,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573165287
    },
    {
        "content": "<p>The image of this simplex under the projection EG -&gt; BG is now a functor from [n] to BG. In BG, there is just one object so the only interesting information is where the n morphisms 0 -&gt; 1, 1 -&gt; 2, ..., (n-1) -&gt; n go. For each one I have to give an element of G.</p>",
        "id": 180183177,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573165359
    },
    {
        "content": "<p>If my original simplex was described by (x_0, ..., x_n) then its image in BG is described by (x_0^{-1} x_1, ..., x_{n-1}^{-1} x_n).</p>",
        "id": 180183239,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573165398
    },
    {
        "content": "<p>In the other direction, if I have a simplex in BG (g_1, ..., g_n), then one of the simplices that it is the image of is (1, g_1, g_1 g_2, g_1 g_2 g_3, ..., g_1 ... g_n), and the others are given by left multiplication by any g in G.</p>",
        "id": 180183339,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573165451
    },
    {
        "content": "<p>So that is where the formula you were asking about comes from.</p>",
        "id": 180183357,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573165461
    },
    {
        "content": "<p>I'll need some time to digest this, but thanks (I'm trying to do some topology)</p>",
        "id": 180183410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573165504
    },
    {
        "content": "<p>If M has trivial G-action, then H^*(G, M) is the cohomology of this simplicial set BG = EG/G with coefficients in M. The complex that computes this has C^n = functions from n-simplices of EG/G to M, or from n-simplices of BG to M. Correspondingly this gives functions defined on <code>(fin (n+1) -&gt; G) / G</code> or <code>fin n -&gt; G</code>, with the above rule for translating between these representations. In this case, because M has trivial action, the former can also be thought of as G-equivariant functions from <code>fin (n+1) -&gt; G</code> to M.<br>\nIf M has nontrivial G-action, then I guess you need to say something about local systems and it's not quite as easy to relate group cohomology to simplicial cohomology.</p>",
        "id": 180184023,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573165922
    },
    {
        "content": "<p>For the purpose of formalization, the EG description makes it trivial to show that you've got a simplicial set. The simplicial structure maps are just given by composing <code>fin (m + 1) -&gt; fin (n + 1) -&gt; G</code></p>",
        "id": 180184166,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573166043
    },
    {
        "content": "<p>I've been meaning to return to the simplicial stuff for quite a while. But there are too many other things on my todo list... and it will require some coordination to get a flexible API.</p>",
        "id": 180206646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573195273
    },
    {
        "content": "<p>Sorry to hijack your thread, but I've been meaning to do (or get a student to do) some group cohomology in HoTT, but I'm not exactly sure which theorems to aim for. I guess as a start, I'd prove that the two descriptions, in terms of homotopy theory (cohomology of BG with coefficients in M : BG -&gt; Ab) and combinatorics (cohomology of some cochain complex), are equal. What would be a good test after that do you think?</p>",
        "id": 180219636,
        "sender_full_name": "Ulrik Buchholtz",
        "timestamp": 1573210779
    },
    {
        "content": "<p>I was not going to do anything topological (reflecting my background I guess). My plan was: (1) definition of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>H</mi><mi>n</mi></msup><mo stretchy=\"false\">(</mo><mi>G</mi><mo separator=\"true\">,</mo><mi>M</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">H^n(G,M)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">G</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"mclose\">)</span></span></span></span> (2) proof that it's a functor from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">G</span></span></span></span>-modules to abelian groups (3) long exact sequence of group cohomology (4) [probably won't get there] spectral sequence (5) [probably won't get there] some sort of uniqueness statement -- it's some universal delta-functor.</p>",
        "id": 180221916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573213152
    },
    {
        "content": "<p>OK, thanks. Because we already have the long exact sequence and Serre spectral sequence in the HoTT libraries, we'd get the LES (3) and L-H-S spectral sequence (4) (sans multiplicative structure) for group cohomology as corollaries. I don't know if (5) would follow as well – maybe that would require a theory of module spectra (which we don't know how to do)?</p>",
        "id": 180222635,
        "sender_full_name": "Ulrik Buchholtz",
        "timestamp": 1573213985
    },
    {
        "content": "<p>You don't have the Serre spectral sequence for \"honest topological spaces\" though, just for these homotopy types. I would like to see an honest group cohomology spectral sequence in a HoTT theory, that would be great!</p>",
        "id": 180222876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573214199
    },
    {
        "content": "<p>But homotopy types are precisely enough to talk about BG for any group G, etc., so I don't see what would be dishonest about the resulting group cohomology spectral sequence?</p>",
        "id": 180223137,
        "sender_full_name": "Ulrik Buchholtz",
        "timestamp": 1573214497
    },
    {
        "content": "<p>I'll see if I can put that together for our joint paper on the spectral sequence (which is way overdue)</p>",
        "id": 180223200,
        "sender_full_name": "Ulrik Buchholtz",
        "timestamp": 1573214558
    },
    {
        "content": "<blockquote>\n<p>Sorry to hijack your thread, but I've been meaning to do (or get a student to do) some group cohomology in HoTT, but I'm not exactly sure which theorems to aim for. I guess as a start, I'd prove that the two descriptions, in terms of homotopy theory (cohomology of BG with coefficients in M : BG -&gt; Ab) and combinatorics (cohomology of some cochain complex), are equal.</p>\n</blockquote>\n<p>This already sounds quite challenging to me, or at least the method I would apply in \"ordinary math\" doesn't seem to work, because you can't build the geometric realization of a simplicial set in HoTT, can you?</p>",
        "id": 180228548,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573219123
    },
    {
        "content": "<p>Oh right, you're the author of the $$\\mathbb{RP}^n$ paper. Then I would believe you know how to do this, even though I don't.</p>",
        "id": 180231686,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573221667
    },
    {
        "content": "<p>How about calculating the cohomology of free groups. That should be easier than Kevin's way :)</p>",
        "id": 180231714,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573221679
    },
    {
        "content": "<p>Can I hijack your hijack and ask whether we know how to construct <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">BU</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span></span></span></span> in HoTT yet?</p>",
        "id": 180231940,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573221871
    },
    {
        "content": "<blockquote>\n<p>Can I hijack your hijack and ask whether we know how to construct <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">BU</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span></span></span></span> in HoTT yet?</p>\n</blockquote>\n<p>I think so: construct <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi><mi>U</mi></mrow><annotation encoding=\"application/x-tex\"> KU </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span></span></span></span> using Snaith's theorem, and take the connected component at the basepoint of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi><mo>×</mo><mi>B</mi><mi>U</mi><mo>≃</mo><msup><mi mathvariant=\"normal\">Ω</mi><mi mathvariant=\"normal\">∞</mi></msup><mi>K</mi><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z} \\times BU \\simeq \\Omega^\\infty KU </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77222em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≃</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">Ω</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span></span></span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span></span></span></span>.</p>",
        "id": 180232274,
        "sender_full_name": "Ulrik Buchholtz",
        "timestamp": 1573222164
    },
    {
        "content": "<p>Oh hmm</p>",
        "id": 180232380,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573222226
    },
    {
        "content": "<p>That still doesn't get us <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi><mi>U</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\"> BU(n) </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">U</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span>, though, AFAICT.</p>",
        "id": 180232433,
        "sender_full_name": "Ulrik Buchholtz",
        "timestamp": 1573222269
    },
    {
        "content": "<blockquote>\n<p>This already sounds quite challenging to me, or at least the method I would apply in \"ordinary math\" doesn't seem to work, because you can't build the geometric realization of a simplicial set in HoTT, can you?</p>\n</blockquote>\n<p>Right, we don't have geometric realization of simplicial sets, but here we can build a corresponding CW structure directly, I think, and we know (and have formalized in the Agda library) that the cellular cochain complex computes cohomology correctly.</p>",
        "id": 180232723,
        "sender_full_name": "Ulrik Buchholtz",
        "timestamp": 1573222498
    },
    {
        "content": "<blockquote>\n<p>But homotopy types are precisely enough to talk about BG for any group G, etc</p>\n</blockquote>\n<p>Yes exactly! That's why I think this would be a brilliant thing to do in HoTT.</p>",
        "id": 180238000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573225859
    }
]