[
    {
        "content": "<p>Sorry hit the wrong button.</p>\n<p>I have troubles expression certain <code>coe</code>s as towers of multiple <code>coe</code><br>\n. For characteristics zero, the definition says that the <code>coe:\\N \\to R</code> is injective. Moreover for an R-algebra <code>K</code> one has a \"coe\" (algebra map) <code>R \\to K</code> so I think the <code>coe: \\N \\to K</code> should factor through <code>R</code>, but how would I express that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_zero</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.localization</span>     <span class=\"c1\">-- for `fraction_ring`</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">K</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">fraction_ring</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">algebra_map_fraction_ring_injective</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">fraction_map.injective</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring.of</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">char_zero</span> <span class=\"n\">R</span><span class=\"o\">]:</span> <span class=\"n\">char_zero</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">cast_injective</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">q</span> <span class=\"o\">:=</span> <span class=\"n\">function.injective.comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map_fraction_ring_injective</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h.cast_injective</span><span class=\"o\">),</span>\n    <span class=\"gr\">sorry</span>\n    <span class=\"c1\">-- The \"cast\" `coe:ℕ → K` should be factored as two casts `ℕ → R → K`, but I don't know how to state that...</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 239569185,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621507582
    },
    {
        "content": "<p><code>simp</code> knows there is only one ring hom from <code>ℕ</code> to <code>K</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.char_zero</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.char_p.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.localization</span>     <span class=\"c1\">-- for `fraction_ring`</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">K</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">fraction_ring</span> <span class=\"n\">R</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">algebra_map_fraction_ring_injective</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fraction_map.injective</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring.of</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">char_zero</span> <span class=\"n\">R</span><span class=\"o\">]:</span> <span class=\"n\">char_zero</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cast_injective</span> <span class=\"o\">:=</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">convert</span> <span class=\"n\">function.injective.comp</span> <span class=\"o\">(</span><span class=\"n\">algebra_map_fraction_ring_injective</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h.cast_injective</span><span class=\"o\">),</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 239569632,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1621507815
    },
    {
        "content": "<p>The relevant lemma is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.map_nat_cast\">docs#ring_hom.map_nat_cast</a></p>",
        "id": 239569694,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1621507844
    },
    {
        "content": "<p>Oh I haven't seen <code>convert</code>before, thank you!</p>",
        "id": 239569815,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621507922
    },
    {
        "content": "<p>The other way would be to replace <code>coe</code> with <code>algebra_map ℕ K</code> resp. <code>algebra_map ℕ R</code> using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.eq_nat_cast\">docs#ring_hom.eq_nat_cast</a>, <code>∘</code> with <code>ring_hom.comp</code> using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.coe_comp\">docs#ring_hom.coe_comp</a> and finishing with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_scalar_tower.algebra_map_eq\">docs#is_scalar_tower.algebra_map_eq</a>.</p>",
        "id": 239570002,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1621508019
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"385895\">Jon Eugster</span> <a href=\"#narrow/stream/116395-maths/topic/Characteristics.20of.20fraction_ring/near/239569815\">said</a>:</p>\n<blockquote>\n<p>Oh I haven't seen <code>convert</code>before, thank you!</p>\n</blockquote>\n<p><code>convert</code> and <code>congr</code> are very useful for pointing out exactly where your \"obviously the same\" and Lean's \"obviously the same\" disagree <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 239570830,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1621508421
    }
]