[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> I have difficulties setting up my uniform space structure on topological groups. Basically the trouble is the definition involves dependent nested infimum. I tried to mimick the metric space case where you wrote:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">uniformity</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"err\">⨅</span> <span class=\"n\">ε</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">principal</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"bp\">×</span><span class=\"n\">α</span> <span class=\"bp\">|</span> <span class=\"n\">dist</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">}),</span>\n</pre></div>\n\n\n<p>(nested inf is somewhat hidden but still there). Question 1: would it be a good idea to rather use the subtype of positive real number as the indexing set?</p>",
        "id": 128166284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529149168
    },
    {
        "content": "<p>So, in the context of a topological add group R, I wrote, with obvious notations:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">uniformity</span>  <span class=\"o\">:=</span> <span class=\"err\">⨅</span> <span class=\"n\">U</span> <span class=\"err\">∈</span> <span class=\"n\">nhd_zero</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">principal</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"bp\">×</span><span class=\"n\">R</span> <span class=\"bp\">|</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 128166325,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529149239
    },
    {
        "content": "<p>But again this is somewhat inconvenient to use.</p>",
        "id": 128166331,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529149265
    },
    {
        "content": "<p>I have the following lemma, which is a restatement of something already there:</p>",
        "id": 128166332,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529149304
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">mem_sets_of_mem_infi</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">directed</span> <span class=\"o\">(</span><span class=\"bp\">≤</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ne</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">infi_sets_eq</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 128166335,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529149318
    },
    {
        "content": "<p>but already I'd like to deduced <code>ne</code> from existence of <code>A</code></p>",
        "id": 128166375,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529149365
    },
    {
        "content": "<p>And then I need a version for dependent nested inf that, I think, would be something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">mem_sets_of_mem_infi&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"err\">⨅</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>but with some directedness assumption somewhere</p>",
        "id": 128166385,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529149435
    },
    {
        "content": "<p>Any help would be appreciated</p>",
        "id": 128166424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529149469
    },
    {
        "content": "<p>I tried to prove it, but then realised it wasn't true.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">filter</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">list</span> <span class=\"n\">filter</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">mem_sets_of_mem_infi&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">⨅</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"err\">⨅</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">proof_of_false</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">mem_sets_of_mem_infi&#39;</span> <span class=\"bp\">ℕ</span> <span class=\"n\">empty</span> <span class=\"n\">empty</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">)</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n</pre></div>",
        "id": 128168185,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529153811
    },
    {
        "content": "<p>Not sure how helpful that is.</p>",
        "id": 128168190,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529153850
    },
    {
        "content": "<p>Probably need <code>A ≠ univ</code>, because <code>univ</code> is in every filter, but you might as well just have <code>nonempty ι</code>, which is implied by <code>A ≠ univ</code>,</p>",
        "id": 128168559,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529154666
    },
    {
        "content": "<blockquote>\n<p>but already I'd like to deduced <code>ne</code> from existence of <code>A</code></p>\n</blockquote>\n<p>You should be deducing <code>ne</code> from the fact that <code>f</code> is directed, but I guess mathlib's definition leaves out that condition, oops.</p>",
        "id": 128168701,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529155048
    },
    {
        "content": "<p>Apparently not assuming that a directed set is nonempty is a Bourbaki thing.</p>",
        "id": 128169091,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529155978
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> There is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">infi_sets_eq&#39;</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">directed_on</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ne</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">⨅</span> <span class=\"n\">i</span><span class=\"err\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"err\">⋃</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 128169188,
        "sender_full_name": "Reid Barton",
        "timestamp": 1529156217
    },
    {
        "content": "<p>Hm, I think you don't need the infimum at all, it should be possible to use <code>vmap</code> and <code>nhds_zero</code>:<br>\n<code>uniformity := vmap (fun p, p.1 - p.2) (nhds_zero R)</code></p>",
        "id": 128172055,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1529162876
    },
    {
        "content": "<p>Oh. That's a completely different start</p>",
        "id": 128178252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529177240
    },
    {
        "content": "<p>But maybe it's more natural</p>",
        "id": 128178253,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529177254
    },
    {
        "content": "<p>It means I need to learn a completely new set of lemmas</p>",
        "id": 128178255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529177268
    },
    {
        "content": "<p>It's worse than my original method</p>",
        "id": 128179700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529180687
    },
    {
        "content": "<p>I can't prove any single property</p>",
        "id": 128179701,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529180698
    },
    {
        "content": "<p>like what?</p>",
        "id": 128179709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529180728
    },
    {
        "content": "<p>like <code>principal id_rel ≤ vmap (λ (p : R × R), p.fst - p.snd) (nhds 0)</code></p>",
        "id": 128180101,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529181683
    },
    {
        "content": "<p>and <code>tendsto prod.swap (vmap (λ (p : R × R), p.fst - p.snd) (nhds 0)) (vmap (λ (p : R × R), p.fst - p.snd) (nhds 0))</code></p>",
        "id": 128180103,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529181698
    },
    {
        "content": "<p><code>filter.lift' (vmap (λ (p : R × R), p.fst - p.snd) (nhds 0)) (λ (s : set (R × R)), comp_rel s s) ≤  vmap (λ (p : R × R), p.fst - p.snd) (nhds 0)</code></p>",
        "id": 128180142,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529181729
    },
    {
        "content": "<p>I assume you know <code>nhds_zero = nhds 0</code>?</p>",
        "id": 128180145,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529181761
    },
    {
        "content": "<p>and <code>∀ (s : set R),    topological_space.is_open _inst_2 s ↔  ∀ (x : R),   x ∈ s → {p : R × R | p.fst = x → p.snd ∈ s} ∈ (vmap (λ (p : R × R), p.fst - p.snd) (nhds 0)).sets</code></p>",
        "id": 128180146,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529181762
    },
    {
        "content": "<p>Johannes suggestion doesn't use <code>nhds_zero</code> (which I defined earlier by <code>def nhd_zero := (nhds (0 : R)).sets</code>)</p>",
        "id": 128180152,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529181815
    },
    {
        "content": "<p>What do you mean? I see <code>nhds_zero</code> in his post</p>",
        "id": 128180192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529181854
    },
    {
        "content": "<p>this is based on him incorrectly guessing my definition</p>",
        "id": 128180195,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529181886
    },
    {
        "content": "<p>For the first one, you have <code>tendsto_iff_vmap</code></p>",
        "id": 128180202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529181908
    },
    {
        "content": "<p>he probably thought I had <code>def nhd_zero := nhds (0 : R)</code></p>",
        "id": 128180203,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529181915
    },
    {
        "content": "<p>Well, <code>nhds_zero</code> has a special place in the theory of top groups</p>",
        "id": 128180204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529181933
    },
    {
        "content": "<p>Indeed the first thing I wrote is <code>rw tendsto_vmap_iff</code></p>",
        "id": 128180205,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529181944
    },
    {
        "content": "<p>I also tried <code>rw tendsto_iff_vmap,</code></p>",
        "id": 128180245,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529181973
    },
    {
        "content": "<p>but then I'm stuck</p>",
        "id": 128180254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529182027
    },
    {
        "content": "<p>then use that <code>-</code> is continuous</p>",
        "id": 128180256,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529182035
    },
    {
        "content": "<p><code>continuous.tendsto</code></p>",
        "id": 128180258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529182067
    },
    {
        "content": "<p>I'd love to continue this discussion but I must leave at 6:30 tomorrow morning to get a plane to go to a conference in Cagliari</p>",
        "id": 128180449,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529182512
    },
    {
        "content": "<p>so I should sleep</p>",
        "id": 128180450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529182520
    },
    {
        "content": "<p>thank you very much for these hints</p>",
        "id": 128180451,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1529182527
    },
    {
        "content": "<p>I guessed <code>nhds_zero</code> from your equation <code>uniformity  := ⨅ U ∈ nhd_zero R, principal {p : R×R | p.2 - p.1 ∈ U}</code>.<br>\n(by the way: why is it okay to call the support type of a group <code>R</code> but not alpha?)</p>\n<p>There are two important rules to convert between <code>map</code> and <code>vmap</code>: <code>map_le_iff_le_vmap</code>, and <code>map_eq_vmap_of_inverse</code>.</p>\n<p>To prove the first rule use the rule  <code>map_le_iff_le_vmap</code> to move the<code>-</code> to the left side, then using rewriting to end up with <code>principal {a | a = 0} = pure 0 &lt;= nhds 0</code>.</p>\n<p>The second rule (using prod.swap): use <code>map_le_iff_le_vmap</code>, and then <code>map_comp</code> the left side by <code>(fun x, - x) o (fun p, p.1 - p.2)</code> Then use <code>tendsto_vmap</code> (together with <code>tendsto_comp</code>).</p>\n<p>And for the last one I guess we want to  use <code>vmap_eq_lift'</code> (which essentially proofs that your and my definition are the equal)</p>",
        "id": 128206302,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1529244934
    },
    {
        "content": "<p><a href=\"https://gist.github.com/johoelzl/ca90562c46b49a1bbb1be36272ec3b1a\" target=\"_blank\" title=\"https://gist.github.com/johoelzl/ca90562c46b49a1bbb1be36272ec3b1a\">https://gist.github.com/johoelzl/ca90562c46b49a1bbb1be36272ec3b1a</a><br>\ntransitivity, i.e. the <code>uniform_space.comp</code> rule, is a little bit harder to show</p>",
        "id": 128214709,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1529264627
    },
    {
        "content": "<p>Would you suggest any changes to this? if not I will just add this to mathlib</p>",
        "id": 128214772,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1529264718
    }
]