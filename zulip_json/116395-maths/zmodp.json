[
    {
        "content": "<p>Would it make sense for <code>zmodp</code> to take a <code>primes</code>, rather than a pair?</p>",
        "id": 189462163,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583122781
    },
    {
        "content": "<p>it's probably fine? there will be a lot of coercions</p>",
        "id": 189462710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583123760
    },
    {
        "content": "<p>it seems potentially a lot more convenient in a situation where some prime is fixed for a long time, since the prime will probably be inferrable from everything while a separate <code>hp : prime p</code> will not</p>",
        "id": 189462870,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583124072
    },
    {
        "content": "<p><code>prime</code> is a typeclass, so you can have <code>variables (p : nat) [prime p]</code> and it will be inferred</p>",
        "id": 189462989,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583124312
    },
    {
        "content": "<p>See also <a href=\"https://github.com/leanprover-community/mathlib/issues/1648\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1648\">#1648</a></p>",
        "id": 189465081,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583127855
    },
    {
        "content": "<p>Oh, I just noticed that you changed the definition of <code>prime</code> in that PR. I thought it was just <code>@[class] def prime := ...</code></p>",
        "id": 189465725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583129091
    },
    {
        "content": "<p>BTW, does it make sense to have <code>nat.prime</code> defined differently from <code>prime</code> in <code>algebra/associated</code>?</p>",
        "id": 189468482,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583133831
    },
    {
        "content": "<p>I think that a better approach would be to reuse the general definition, and prove equivalence to the current version of <code>nat.prime</code>.</p>",
        "id": 189468529,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583133889
    },
    {
        "content": "<p>I have an innate dislike of this idea but maybe it's not well grounded</p>",
        "id": 189468535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583133901
    },
    {
        "content": "<p>Of which idea?</p>",
        "id": 189468547,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583133920
    },
    {
        "content": "<p>I think it should be okay but we need to be careful to keep the dependencies down</p>",
        "id": 189468551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583133935
    },
    {
        "content": "<p>the idea to merge the two definitions</p>",
        "id": 189468552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583133948
    },
    {
        "content": "<p>I don't think <code>_root_.prime</code> was defined in an area that was being conscientious about dependencies</p>",
        "id": 189468601,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583134003
    },
    {
        "content": "<p>OK, <code>algebra/associated</code> depends on <code>multiset</code>, and <code>nat.prime</code> uses <code>list.perm</code> relation instead of equality in <code>multiset</code>.</p>",
        "id": 189468675,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583134120
    },
    {
        "content": "<p>Moving definition of <code>_root_.prime</code> with some properties to a file not <code>import</code>ing <code>multiset</code> should be easy.</p>",
        "id": 189468699,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583134167
    },
    {
        "content": "<p>Why does <code>nat.prime</code> need <code>list.perm</code>?</p>",
        "id": 189468802,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583134224
    },
    {
        "content": "<p>For <code>factors_unique</code></p>",
        "id": 189468819,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583134253
    },
    {
        "content": "<p>I think we could split the file into two parts, with the second part dealing with complete factorizations and the unique factorization theorem</p>",
        "id": 189468820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583134256
    },
    {
        "content": "<p>Why <code>nat/prime</code> should care about dependencies?</p>",
        "id": 189468833,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583134277
    },
    {
        "content": "<p>Sometimes you just want to be able to say <code>5</code> is prime and maybe evaluate some primes</p>",
        "id": 189468843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583134303
    },
    {
        "content": "<p>also it's needed by <code>norm_num</code></p>",
        "id": 189468844,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583134312
    },
    {
        "content": "<p>I think that we can move multisets out of <code>algebra/associated</code>.</p>",
        "id": 189468911,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583134402
    },
    {
        "content": "<p>About merging definitions: for a newcomer, having two definitions for the same notion is really confusing.</p>",
        "id": 189468933,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583134442
    },
    {
        "content": "<p>Having a fancy definition for a simple concept is also confusing</p>",
        "id": 189468960,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583134471
    },
    {
        "content": "<p>E.g., it took me a lot of time to understand the situation with <code>cau_seq</code> and <code>cauchy</code>.</p>",
        "id": 189468961,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583134471
    },
    {
        "content": "<p>see filters</p>",
        "id": 189468964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583134489
    },
    {
        "content": "<p>There should be a theorem that relates <code>cau_seq</code> and <code>cauchy</code>. That's how I prefer to resolve these situations</p>",
        "id": 189468988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583134558
    },
    {
        "content": "<p>In the first place there should be a clear documentation (and for <code>cau_seq</code> vs <code>cauchy</code>, I'd use <code>cauchy</code> everywhere).</p>",
        "id": 189469044,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583134651
    },
    {
        "content": "<p>I agree you should use <code>cauchy</code> preferentially if you are doing anything using or depending on topology</p>",
        "id": 189469102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583134699
    },
    {
        "content": "<p><code>cau_seq</code> is mostly an implementation detail for the construction of the reals</p>",
        "id": 189469109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583134721
    },
    {
        "content": "<p>which escaped a bit in order to help with building the p-adic numbers</p>",
        "id": 189469111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583134736
    },
    {
        "content": "<p>If I have <code>h : prime p</code> in the context and I want to apply a theorem taking <code>prime p</code>, then I expect it to work.</p>",
        "id": 189469115,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583134746
    },
    {
        "content": "<p><code>open nat</code> causes a lot of confusion</p>",
        "id": 189469127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583134789
    },
    {
        "content": "<p>Is <code>_root_.prime</code> really that complicated?</p>",
        "id": 189469188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583134843
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- prime element of a semiring -/</span>\n<span class=\"n\">def</span> <span class=\"n\">prime</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">is_unit</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">p</span> <span class=\"err\">∣</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 189469194,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583134857
    },
    {
        "content": "<p>What are the dependencies of that definition that you would like to avoid?</p>",
        "id": 189469195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583134857
    },
    {
        "content": "<p>The definition itself is not complicated, but it's embedded in a file with many dependencies last I checked</p>",
        "id": 189469198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583134870
    },
    {
        "content": "<p>So... merge the definitions and maybe split the file to avoid deps</p>",
        "id": 189469202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583134885
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">group</span><span class=\"bp\">.</span><span class=\"n\">is_unit</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">multiset</span>\n</pre></div>",
        "id": 189469205,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583134889
    },
    {
        "content": "<p>If <code>is_unit</code> is too complicated because it depends on <code>units</code> then we could even spell it out.</p>",
        "id": 189469232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583134923
    },
    {
        "content": "<p>actually my memory is faulty or else I missed the refactor because it's in the algebra directory now and the imports are not as bad as I thought</p>",
        "id": 189469254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583134950
    },
    {
        "content": "<p>Actually <code>data.multiset</code> depends on lots of things, including <code>group_power</code>.</p>",
        "id": 189469263,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583134972
    },
    {
        "content": "<p>yeah, that's definitely the biggest dependency in the list</p>",
        "id": 189469271,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583134985
    },
    {
        "content": "<p>group_power is hard to avoid when talking about prime numbers</p>",
        "id": 189469278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583135013
    },
    {
        "content": "<p>but actually there are a lot of imports in <code>data.multiset</code> that have creeped in about algebra that are surprising</p>",
        "id": 189469351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583135104
    },
    {
        "content": "<p>that's kind of the whole reason <code>algebra.big_operators</code> exists, to act as the join of <code>data.finset</code> and <code>algebra.*</code></p>",
        "id": 189469375,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583135155
    },
    {
        "content": "<p>See <a href=\"#narrow/stream/113489-new-members/topic/Contribution.20to.20mathlib.20with.20the.20Ostrowski.20theorem/near/187592253\" title=\"#narrow/stream/113489-new-members/topic/Contribution.20to.20mathlib.20with.20the.20Ostrowski.20theorem/near/187592253\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Contribution.20to.20mathlib.20with.20the.20Ostrowski.20theorem/near/187592253</a> for the last time someone tried to convince Mario to drop <code>_root_.prime</code>. Maybe we can ask once per month and I'll get tired at some point <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 189469430,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583135191
    },
    {
        "content": "<p>Now I'm trying to convince Mario to drop <code>nat.prime</code>, and use <code>_root_.prime</code> as the only definition ;)</p>",
        "id": 189469442,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583135273
    },
    {
        "content": "<p>Any thoughts on my suggestion to have two files, one about <code>prime</code> (and applied to <code>nat</code>) and one about factorization and unique factorization</p>",
        "id": 189469444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583135274
    },
    {
        "content": "<p>Or should there still be a separate file for <code>@prime nat</code>?</p>",
        "id": 189469496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583135334
    },
    {
        "content": "<p>What information about <code>nat.prime</code> is important for <code>norm_num</code>?</p>",
        "id": 189469559,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583135417
    },
    {
        "content": "<p>The computation of <code>min_fac</code></p>",
        "id": 189469563,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583135439
    },
    {
        "content": "<blockquote>\n<p><code>cau_seq</code> is mostly an implementation detail for the construction of the reals</p>\n</blockquote>\n<p>Yury, if you really have too much time and energy, you can try to revert the change that introduced <code>cau_seq</code>. This was motivated mostly by mysterious performance issues. We used to have a construction of reals (by Johannes Hölzl) which was half-way between the Cauchy sequence construction and Bourbaki construction (using completion of general topological rings). But it caused many time-outs. This was probably because some definition should have been marked as irreducible but wasn't. But nobody could figure out a solution before Mario's desire to stick to low-tech maths kicked in. I'm very grateful to see real numbers that work, but I wouldn't mind getting rid of <code>cau_seq</code>.</p>",
        "id": 189469589,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583135507
    },
    {
        "content": "<blockquote>\n<p>Now I'm trying to convince Mario to drop nat.prime, and use _root_.prime as the only definition ;)</p>\n</blockquote>\n<p>Sorry, I meant dropping <code>nat.prime</code>.</p>",
        "id": 189469635,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583135548
    },
    {
        "content": "<p>Please don't remove <code>cau_seq</code>. For some reason Kevin loves to use <code>data.real.basic</code> in examples, and I have the luxury of a compiled mathlib at most 60% of the time</p>",
        "id": 189469674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583135639
    },
    {
        "content": "<p>If you can make the definition of <code>cauchy</code> and relevant properties similarly speedy I would be okay with it but we have done nothing to improve this situation since I wrote <code>cau_seq</code> AFAIK</p>",
        "id": 189469739,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583135730
    },
    {
        "content": "<p>I want the real numbers to be something that can be considered part of the core library</p>",
        "id": 189469787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583135783
    },
    {
        "content": "<p>Filters and uniform spaces can be considered part of the core library, right?</p>",
        "id": 189469799,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583135812
    },
    {
        "content": "<p>Like I said, if that library got slimmer and faster it might be possible to do away with <code>cau_seq</code>. But it needs a big cleanup / refactor for that</p>",
        "id": 189469824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583135859
    },
    {
        "content": "<p>One way to solve the problem is to use dedekind cuts for the construction instead :D</p>",
        "id": 189469973,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583136011
    },
    {
        "content": "<p>Nooo!</p>",
        "id": 189470075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583136098
    },
    {
        "content": "<p>Also <code>cau_seq</code> is \"computable\". I was discouraged at the time from using explicit moduli but without it the actual computable content is pretty useless, but with it we could conceivably have an exact real arithmetic library built on <code>real</code></p>",
        "id": 189470166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583136145
    },
    {
        "content": "<p>Which sounds like a useful thing to have.</p>",
        "id": 189470196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583136195
    },
    {
        "content": "<p>At some point we want to know that <code>e &gt; 2.71</code> for some reason or other. So we'll need tactics and a library that can \"compute\" with real numbers.</p>",
        "id": 189470219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583136241
    },
    {
        "content": "<p>We already did this kind of thing for pi day</p>",
        "id": 189470265,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583136260
    },
    {
        "content": "<p>For the proof producing version we will need a <code>norm_num</code> style prover, but a computable function would be useful for computations with real numbers in <code>#eval</code></p>",
        "id": 189470309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583136336
    },
    {
        "content": "<p>which, by the way, would probably be used in the prover itself</p>",
        "id": 189470369,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583136377
    },
    {
        "content": "<p>Do I remember correctly that there are no computable well-defined non-constant functions from <code>real</code> to <code>nat</code>?</p>",
        "id": 189470400,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583136436
    },
    {
        "content": "<p>Yes, with the current implementation</p>",
        "id": 189470468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583136504
    },
    {
        "content": "<p>Which implementation has computable functions <em>and</em> is a <code>field</code>?</p>",
        "id": 189470498,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583136573
    },
    {
        "content": "<p>You can, however, inhabit <code>trunc (psum (r &lt; 1) (0 &lt; r))</code></p>",
        "id": 189470499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583136576
    },
    {
        "content": "<p>It will not be a computable <code>field</code>, but it will have an <code>inv</code> function that requires a proof that the argument is nonzero</p>",
        "id": 189470552,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583136613
    },
    {
        "content": "<p>You guys are really not fun. I was talking about Bourbaki reals and you managed to drift to computable reals... I'm going back to normal maths in my geometry class.</p>",
        "id": 189470558,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583136628
    },
    {
        "content": "<p>I think it would be nice to have both</p>",
        "id": 189470584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583136649
    },
    {
        "content": "<p>Once you go in mathematician mode, all the distinctions fade away and you've clearly constructed the actual real numbers</p>",
        "id": 189470608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583136683
    },
    {
        "content": "<p>it can be a <code>field</code> and everything else</p>",
        "id": 189470630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583136710
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Did Boubaki ever need an approximation of a transcendental real number?</p>",
        "id": 189470717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583136830
    },
    {
        "content": "<p>I've never read any of their treatment of analyisis</p>",
        "id": 189470766,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583136859
    },
    {
        "content": "<p>I'm not sure that we can make sufficiently flexible computable (in the sense of <code>eval</code>) real numbers.</p>",
        "id": 189470878,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583137064
    },
    {
        "content": "<p>More or less, a computable real number is a (<code>trunc</code> of) a function <code>λ n, {r : rat | abs (x - r) ≤ 1/n</code> (or <code>(1/2)^n</code>).</p>",
        "id": 189470945,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583137143
    },
    {
        "content": "<p>If you want to define, e.g., <code>a + b</code>, then you need to decide how to distribute the error.</p>",
        "id": 189470958,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583137193
    },
    {
        "content": "<p>Splitting in halves is not a way to go because in <code>a + b + c + d + e + f</code> you'll need to know <code>a</code> with a <em>very</em> high accuracy.</p>",
        "id": 189471050,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583137290
    },
    {
        "content": "<p>So we either need a definition that automatically distributes error margins, or a definition that asks the user how to distribute them.</p>",
        "id": 189471134,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583137395
    },
    {
        "content": "<p>(1) You can always have more fancy functions that allow you to distribute the error more precisely (2) Dividing the error in half isn't so bad. Usually you use <code>1/2^n</code> for the modulus, and most of the basic operations generate bits in linear time, so asking for one more bit is not unreasonable</p>",
        "id": 189471257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583137562
    },
    {
        "content": "<p>I think that a possible way to go is to have classical noncomputable <code>real</code>s and something like <code>approximates (x : real) (f : nat → rat) : Prop := ∀ n, abs (x - f n) &lt; (1 / 2)^n</code>. Then we can have theorems like <code>approximates x f → approximates y g → approximates (x + y) (λ n, f n + g n)</code>.</p>",
        "id": 189471336,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583137607
    },
    {
        "content": "<p>but isn't that just a <code>cau_seq</code> and its representative <code>real</code>?</p>",
        "id": 189471353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583137644
    },
    {
        "content": "<p>No, I prescribe the rate of convergence.</p>",
        "id": 189471375,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583137672
    },
    {
        "content": "<p>I'm talking here about a hypothetical change to the definition of <code>cau_seq</code> to add a modulus so that you can use <code>real</code> for computation</p>",
        "id": 189471435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583137707
    },
    {
        "content": "<p>Ah, so the new <code>cau_seq</code> will converge at a prescribed rate (e.g., <code>(1/2)^n</code>)?</p>",
        "id": 189471510,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583137805
    },
    {
        "content": "<p>right</p>",
        "id": 189471517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583137811
    },
    {
        "content": "<p>Then <code>inv x</code> will require <code>psum (x &lt; 0) (0 &lt; x)</code>, not just <code>x ≠ 0</code>.</p>",
        "id": 189471553,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583137881
    },
    {
        "content": "<p>actually it will need more than that, it will need <code>|x| &gt; 1/n</code></p>",
        "id": 189471654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583137999
    },
    {
        "content": "<p>Yes.</p>",
        "id": 189471664,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583138019
    },
    {
        "content": "<p>i.e. x is apart from 0</p>",
        "id": 189471669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583138025
    },
    {
        "content": "<p>My point being, it will have some funny intuitionistic constraints on it and the mathematicians won't need to touch it but it's there if you want to actually compute</p>",
        "id": 189471727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583138063
    }
]