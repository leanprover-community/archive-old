[
    {
        "content": "<p>What is the tactic which solves goals like</p>\n<div class=\"codehilite\"><pre><span></span>⊢ 𝟙 X ≫ f = f\n</pre></div>\n\n\n<p>or the assertion that composition of morphisms in a category is associative?</p>",
        "id": 183552744,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576506249
    },
    {
        "content": "<p>Oh it's more universe issues :-/</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  category.id_comp C φ\nterm\n  φ\nhas type\n  ℱ ⟶ 𝒢 : Type (max v w)\nbut is expected to have type\n  ?m_1 ⟶ ?m_2 : Type v\nstate:\nC : Type u,\n𝒞 : category C,\nX : Type w,\n_inst_1 : topological_space X,\nℱ 𝒢 : presheaf X C,\nφ : ℱ ⟶ 𝒢\n⊢ 𝟙 ℱ ≫ φ = φ\n</pre></div>",
        "id": 183553474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576506683
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <code>φ</code> is not a morphism in <code>C</code>, right? So shouldn't that be <code>category.id_comp _ φ</code>, where <code>_ = presheaf X C</code>?</p>",
        "id": 183555031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576507662
    },
    {
        "content": "<p>Also, usually <code>simp</code> will solve this, and hence so does <code>tidy</code>.</p>",
        "id": 183555041,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576507673
    },
    {
        "content": "<p>I've had a great day so far slowly but surely doing <a href=\"https://github.com/ramonfmir/lean-scheme/commit/5f5072a8c050dd3f4ca71841cbb69c66e60b2e77\" target=\"_blank\" title=\"https://github.com/ramonfmir/lean-scheme/commit/5f5072a8c050dd3f4ca71841cbb69c66e60b2e77\">this</a>. I haven't got anywhere yet, but the notation is coming out well at least. I don't understand how to get automation to work, it's like when I was a beginner and I'd just try simp and then cc and then I'd ask Mario or Kenny and get a direct answer in ten seconds flat :-)</p>",
        "id": 183556314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576508415
    },
    {
        "content": "<p>Does <code>tidy</code> help?</p>",
        "id": 183557012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576508776
    },
    {
        "content": "<p>I could never get it to do anything</p>",
        "id": 183557041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576508792
    },
    {
        "content": "<p>Weird</p>",
        "id": 183557053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576508802
    },
    {
        "content": "<p>it would just take all the terms apart; I was trying to be really strict with notation, using notation natural for a mathematician.</p>",
        "id": 183557082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576508816
    },
    {
        "content": "<p>This looks very tidyable to me: <a href=\"https://github.com/ramonfmir/lean-scheme/commit/5f5072a8c050dd3f4ca71841cbb69c66e60b2e77#diff-62dda0355159ecad2596c2c93999a2b8R137-R151\" target=\"_blank\" title=\"https://github.com/ramonfmir/lean-scheme/commit/5f5072a8c050dd3f4ca71841cbb69c66e60b2e77#diff-62dda0355159ecad2596c2c93999a2b8R137-R151\">https://github.com/ramonfmir/lean-scheme/commit/5f5072a8c050dd3f4ca71841cbb69c66e60b2e77#diff-62dda0355159ecad2596c2c93999a2b8R137-R151</a></p>",
        "id": 183557104,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576508826
    },
    {
        "content": "<p>tidy just turns the goal from</p>\n<div class=\"codehilite\"><pre><span></span>𝟙 U ≫ f = f\n</pre></div>\n\n\n<p>into</p>\n<div class=\"codehilite\"><pre><span></span>⊢ (𝟙 U ≫ f).map ⟨x_val, x_property⟩ = f.map ⟨x_val, x_property⟩\n</pre></div>\n\n\n<p>I am at the point where I am still proving the axioms for a category (presheaf X C), but there is another category kicking around (namely C).</p>",
        "id": 183557526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576509028
    },
    {
        "content": "<p>Right, but <code>𝟙 U ≫ f</code> lives in this other category, doesn't it?</p>",
        "id": 183558002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576509332
    },
    {
        "content": "<p>No, <code>f</code> is a morphism in the presheaf category, so we do need to take it apart I guess.</p>",
        "id": 183558526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576509642
    },
    {
        "content": "<p>I'd like to hear some automation tips before I embark on presheaves on a basis!</p>",
        "id": 183558584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576509700
    },
    {
        "content": "<p>I'm going straight for sheaves now.</p>",
        "id": 183558591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576509706
    },
    {
        "content": "<blockquote>\n<p>I am at the point where I am still proving the axioms for a category (presheaf X C), but there is another category kicking around (namely C).</p>\n</blockquote>\n<p>aha, a trick question!</p>",
        "id": 183564299,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576513078
    },
    {
        "content": "<p>indeed it was!</p>",
        "id": 183564515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576513203
    },
    {
        "content": "<p><code>simp</code> can fail on a goal like <code>𝟙 X ≫ f</code> for various reasons, but \"because we're in the middle of defining the category instance\" was not one I had considered</p>",
        "id": 183564547,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576513222
    },
    {
        "content": "<p>but when you unravel it all it's just an instance of the same theorem one level down</p>",
        "id": 183564619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576513271
    },
    {
        "content": "<p>Well, up to various sorts of extensionality, yes</p>",
        "id": 183564739,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576513329
    },
    {
        "content": "<p>yeah yeah yeah</p>",
        "id": 183564755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576513342
    },
    {
        "content": "<p><code>simp</code> couldn't do <code>⊢ ⇑(𝟙 X_1 ≫ f) x = ⇑f x</code></p>",
        "id": 183564783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576513362
    },
    {
        "content": "<p>but <code>apply category.id_comp,</code> does it fine. That's one of my favourite uses of the <code>apply</code> tactic.</p>",
        "id": 183564823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576513392
    },
    {
        "content": "<p>You could also try <code>dsimp, simp</code>. Sometimes that helps</p>",
        "id": 183564867,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576513431
    },
    {
        "content": "<p>I'm just not sure if I'm supposed to be happy with getting my hands dirty like this.</p>",
        "id": 183564969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576513476
    },
    {
        "content": "<p>I live in a world where all exts are defeq.</p>",
        "id": 183564988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576513493
    },
    {
        "content": "<p>Oh, you rolled a lot of your own stuff</p>",
        "id": 183565182,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576513594
    },
    {
        "content": "<p>If you replace the whole proof of <code>id_comp'</code> by <code>begin tidy, end</code> how does it get stuck?</p>",
        "id": 183565699,
        "sender_full_name": "Reid Barton",
        "timestamp": 1576513914
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">X_1</span> <span class=\"err\">≫</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">⟨</span><span class=\"n\">x_val</span><span class=\"o\">,</span> <span class=\"n\">x_property</span><span class=\"bp\">⟩</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">⟨</span><span class=\"n\">x_val</span><span class=\"o\">,</span> <span class=\"n\">x_property</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 183609292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576546245
    },
    {
        "content": "<p>I want to assume that my category has all filtered colimits (but not necessarily all colimits). Can this be done easily given the current state of mathlib?</p>",
        "id": 183609313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576546275
    },
    {
        "content": "<p>Yes, up to defining what a filtered diagram is.</p>",
        "id": 183620274,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576560621
    }
]