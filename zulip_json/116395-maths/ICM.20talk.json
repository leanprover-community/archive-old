[
    {
        "content": "<p>I finally wrote an ICM talk. It's <a href=\"https://www.ma.imperial.ac.uk/~buzzard/xena/pdfs/ICMtalkv0.pdf\">here</a>. The deadline to get it to the organisers is...erm (checks notes)...was... 1st October, so if anyone has comments could they get back to me by around...erm...8th December? If people want to encourage me to write some more I still have some pages spare, but I didn't want to go on for too long. I tried to give a lot of people a mention, which was probably an unwise idea but there we go. If there's anyone I forgot who did a cute thing which made it into mathlib then let me know and I'll squeeze them in somehow, I'm sure I'll have forgotten someone. I have no doubt been characteristically slap-dash with my history, I will try to get some experts to read the sections which I'm least sure about...</p>",
        "id": 263370691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638400067
    },
    {
        "content": "<p>Wow nice article Kevin <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span><br>\nSome comments:</p>\n<ul>\n<li>I feel like their is a weird emphasis on \"pure\" mathematics, why not just say mathematics throughout, certainly your running example of nonabelian Iwasawa theory and other examples are to show that you aren't talking about numerical analysis, and what we are doing here seems to encompass a wide spectrum of mathematical reasoning (is probability \"pure\" maths?)</li>\n<li>Likewise I wouldn't personally say its breakthroughs in \"Theoretical\" computer science that have recently pushed the domain of proofs assistants forward, just computer science in general, theoretical computer science is quite a bit more mathematical than actually designing proof assistants. But maybe you have something more specific in mind?</li>\n<li>formally the four colour conjecture -&gt; formerly the four colour conjecture <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span>?</li>\n<li>The adjective loopless in the statement of the four colour theorem seems a bit redundant</li>\n<li>The sentence \"if one is embarking on a gigantic formalisation project, one has to decide how to internally store the data one is going to be manipulating, and this is where the computer scientists come in; they are experts in practical data management\" makes it sound a lot like the choice of embedding all groups into a common parent is a choice only to manage memory somehow, rather than a way to avoid treating multiple possible group actions on the same type (Ok tbh I don't know the reasons here either, but the sentence doesn't give the right impression I think).</li>\n<li>Massot developed a theory of cinompletions -&gt; Massot developed a theory of completions</li>\n<li>\"As Carneiro once said, you can’t stop progress\" is a great ender <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></li>\n</ul>",
        "id": 263377017,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1638404232
    },
    {
        "content": "<p>I'm not particularly convinced by the sentence \"Note that here the computer was being used to compute, rather than to prove.\" regarding the 4CT. </p>\n<p>It's true that it wasn't building a proof inside some formal system with a verifier. But as far as I understand in order to completely believe the Appel-Haken proof, one has to treat some of their programs as if they are tactics, being run in a world with only a human verifier. Thus either the human reader has to read the programs to see that they follow the intended behaviour, or one has the treat the output as a proof script that must be read. (In practice I understand that the former is intended.) In either case, I think this is more than merely computing.</p>",
        "id": 263378147,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638405048
    },
    {
        "content": "<blockquote>\n<p>Gonthier’s write-up “a computer-checked proof</p>\n</blockquote>\n<p>needs a capital A.</p>",
        "id": 263378300,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638405169
    },
    {
        "content": "<p>It's a very nice article. I wonder whether it is a good idea to emphasize propositions as types and implications as functions? It makes it sound like there is something weird and dubious going on. You can equally well present it as nothing more than notation: function types and implications are written with the same arrows, and the same notation is used to apply a lemma to arguments, apply a lemma to hypotheses, and apply a function to arguments.</p>",
        "id": 263379119,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1638405874
    },
    {
        "content": "<p>P.S. Regarding history, according to these notes (<a href=\"https://www.andrew.cmu.edu/user/avigad/Papers/pntnotes.pdf\">https://www.andrew.cmu.edu/user/avigad/Papers/pntnotes.pdf</a>) the PNT formalization was completed on September 6, 2004. IIRC, Georges announced the verification of the four-color theorem a month or two after that, and Tom finished the Jordan curve theorem in early 2005. It was interesting that the three were clustered so closely together.</p>",
        "id": 263380654,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1638407126
    },
    {
        "content": "<p><code>octonians</code> --&gt; <code>octonions</code></p>",
        "id": 263384661,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638410517
    },
    {
        "content": "<p>When you state Mario's result about equivalence of the logical foundation, perhaps better to say \"ZFC plus countably many inaccessible cardinals\" rather than \"ZFC plus countably many universes\", which is mixing up languages.</p>",
        "id": 263384969,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638410788
    },
    {
        "content": "<p>The example in Section 3.5 makes me sad. Before you actually get to the proof you have to have this digression about division on natural numbers, and even the theorem statement is artificially awkward because of the coercion. This would be much more pleasant if you started with just the statement in <code>nat</code>, and only once you embark on the proof do you push things into <code>rat</code>. Even if this comes at the expense of an extra proof obligation that the division is the same, it seems better than to have your main example mainly about how horrible working with division of natural numbers is. :-(</p>",
        "id": 263385326,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638411140
    },
    {
        "content": "<p>If you want to stick with this example, then at least when you write \"Thus we coerce\", I think you could be clearer about what is going on. Maybe instead say explicitly: \"Really, we'd like to just state this theorem about natural numbers, and even though division on the natural numbers is badly behaved, in this case it is actually fine. Nevertheless, in order to have to avoid even thinking about division in the natural numbers, we intentionally state a slightly different version of the result, in the rationals.\"</p>\n<p>That is, if you're going to include an example that involves this issue, I think you should be explicitly sad about it, and be explicit that you are doing something artificial to avoid pain. Otherwise it is just confusing.</p>",
        "id": 263385486,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638411322
    },
    {
        "content": "<p>• on page 3: \"putting together hundreds ... together\"</p>",
        "id": 263386835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638412916
    },
    {
        "content": "<p>From page 8: \"Furthermore, we learn that the kinds of things which humans do when communicating with each other, such as identifying (G/H)/(K/H) with G/K when H ⊆ K are two normal subgroups of G (despite the fact that these groups are not actually equal from a foundational perspective), are no longer a problem.\"</p>\n<p>I still find this very annoying in practice. So I would say it is still somewhat a \"problem\".</p>",
        "id": 263387534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638413700
    },
    {
        "content": "<p>• When you talk about <code>inductive eq</code>, you mention the \"induction principle\", but in the general chat about inductive types you talk about the <em>eliminator</em>. Maybe add a \"(the eliminator)\" after \"induction principle\"?</p>",
        "id": 263388678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638415268
    },
    {
        "content": "<p>Also, the eliminator is in fact for more general, right? You don't need an equivalence relation.</p>",
        "id": 263388836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638415461
    },
    {
        "content": "<p>• In 4.1, \"mathematical documents\", maybe worth mentioning Alectryon? And Lamport's cascading proofs?</p>",
        "id": 263389261,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638416014
    },
    {
        "content": "<p>(• \"Some computer scientists have argued that mathematicians are sloppy, and our literature has errors in\". Some authors of this ICM paper have done the same thing in the past <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span>)</p>",
        "id": 263389521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638416348
    },
    {
        "content": "<p>• About the Mochizuki bit: \"the proof must be clear on paper before it is possible to formalise in a theorem prover\"<br>\nI don't think that's the issue. We figured out the proof of 9.4 along the way in LTE. It wasn't clear to me at all, before we started working on the formalisation.</p>\n<p>I think the issue is that if you get stuck while formalising 3.12, then what? Is Lean stupid? Is the person formalising the proof stupid? Or is there a non-proof. The Mochizuki clan will simply say \"you're stupid, and you should try harder\".</p>",
        "id": 263389706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638416580
    },
    {
        "content": "<p>• \"Once these systems become easier for mathematicians to use, students can experiment for themselves with well-chosen examples supplied by a lecturer and begin to understand what is going on.\"</p>\n<p>Isn't this already possible right now? I think that for these \"learn how proofs works\" type of applications, Lean should be more than ready to handle it.</p>",
        "id": 263389840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638416740
    },
    {
        "content": "<ul>\n<li>\"most modern proof assistants have no problems with the law of the excluded middle, the axiom of choice, and other classical axioms.\"</li>\n</ul>\n<p>I would replace \"classical\" -&gt; \"nonconstructive\"; this use of \"classical\" is jargon which I don't think is used by most pure mathematicians</p>",
        "id": 263390252,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638417283
    },
    {
        "content": "<p>\"cinompletions\" -&gt; \"completions\"</p>",
        "id": 263391267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638418564
    },
    {
        "content": "<ul>\n<li>\"The induction principle for equality, automatically added as an axiom to the system, is the assertion that if R is an equivalence relation on the type X and if R(a,a) is true for all a, and if a = b, then R(a,b) is true.\"</li>\n</ul>\n<p>\"equivalence relation\" should be \"predicate\" or \"relation\" here. Of course we can't talk about equivalence relations yet since this is defining equality, and it's not what we want anyway.</p>",
        "id": 263391726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638419255
    },
    {
        "content": "<p>Any reason for the 32 stars at the end of section 2?</p>",
        "id": 263392302,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1638420084
    },
    {
        "content": "<p>In 4.1, you talk about taking a proof and drilling down to the axioms. Although it might not be your cup of tea, I think the metamath web pages deserve a mention here because they are very good for this kind of thing. For a mathematician working at a high level they can feel long and verbose, but for someone who knows very little of the mathematics having a uniform way to display everything, even the advanced stuff, is great for being able to understand how everything holds together. Mathematicians know how to explain the forest, but metamath can explain the trees.</p>",
        "id": 263392712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638420648
    },
    {
        "content": "<p>Thanks Kevin! I hope this will contribute to bring more mathematicians here. I think it would be nice to include some more citations to other proof assistants and maybe a couple of sample code. A rather cheap way to do this would be to replace all Lean code from Section 3.5 with Coq code (Section 3.2 would also be a natural candidate but unfortunately the recursor story is not exactly the same in Coq). You could also add citations at least to some foundational Coq paper (for instance when you write \"Calculus of inductive constructions\") and maybe also some Sledgehammer paper when you write \"hammer\". On Page 13, you need to remove my name in the \"theory of manifolds\" sentence, and add Sébastien's name in the calculus sentence. Also the exotic integrals take values in Banach spaces, not general topological vector spaces. I'll have some more minor remarks but I don't have time right now. I think the remarks above are the most important ones.</p>",
        "id": 263453549,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638458751
    },
    {
        "content": "<p>Maybe I should have written that the most urgent thing I think you should do after adding a bit more Coq and Isabelle is to send this to Assia Mahboubi and maybe Manuel Eberl and very politely ask them to help you removing as much factual inaccuracies as possible.</p>",
        "id": 263455420,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638459503
    },
    {
        "content": "<blockquote>\n<p>However, more recently two things have happened. [...] many modern proof assistants support “tactics”,</p>\n</blockquote>\n<p>I had the impression that tactics have been quite widespread since the 1980's, at least in the LCF family (e.g. HOL). At least <a href=\"https://link.springer.com/book/10.1007/3-540-09724-4\">Edinburgh LCF</a> had tactics in 1979.</p>",
        "id": 263456491,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638459919
    },
    {
        "content": "<p>In the section about types, I feel like it could be worth mentioning that you cannot <em>prove</em> <code>a : X</code>, so this is not just another notation for <code>a ∈ X</code> (but maybe this is not relevant).</p>",
        "id": 263457624,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1638460316
    },
    {
        "content": "<p>In section 1.4 you mention that modern proof assistants have no issues with classical reasoning, and give Lean and Coq as examples. I would add the HOL family here, since their logic is explicitly classical in setup. (Potentially we could leave out Lean since its support for classical reasoning is essentially the same as Coq's, just that the communities have different tastes.)</p>",
        "id": 263460756,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638461422
    },
    {
        "content": "<p>...also Mizar and Metamath. Really any system that isn't DTT or HoTT based takes LEM for granted</p>",
        "id": 263460988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638461506
    },
    {
        "content": "<p>In <code>1.8</code> you could mention finiteness  of the class group.</p>",
        "id": 263462949,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1638462262
    },
    {
        "content": "<p>That formalization is already mentioned in the mathlib overview in section 2. I would not object to being mentioned twice of course :)</p>",
        "id": 263463253,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1638462392
    },
    {
        "content": "<p>I also didn't get why you seem to imply that excluded middle is more builtin in Lean than in Coq.</p>",
        "id": 263463303,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638462413
    },
    {
        "content": "<p>Ah yes, sorry, I hadn't read section 2 yet.</p>",
        "id": 263463720,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1638462600
    },
    {
        "content": "<p>I hope I hadn't missed it, but also the theory of Witt vectors, being notoriously intricate, could be a good example of what is doable nowadays in a proof assistant.</p>",
        "id": 263464158,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1638462774
    },
    {
        "content": "<p>Many thanks for all these comments, which I've not yet had the chance to look at. I hope to get a version 1 written tomorrow.</p>",
        "id": 263464366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638462864
    },
    {
        "content": "<p>\"Digitised and semantically searchable databases of mathematics are going to appear.\"  Why is this phrased as a prediction for the next 10 years? Does mathlib not already qualify as such a database?  Or am I misunderstanding what you mean by \"semantically searchable\"?</p>",
        "id": 263467594,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638464171
    },
    {
        "content": "<p>\" Similarly  the  definitions  of  the  rationals  and  integers  are  the  same  in  type theory as in set theory.\" These are our dirty secrets, but the statement as it's written it's not accurate, right ? I am not suggesting to explain the definition of <code>Z</code> or <code>Q</code> in mathlib, but maybe saying something like \"the definition can be the same\" or something similar.</p>",
        "id": 263467909,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1638464304
    },
    {
        "content": "<p>\"If you can get to the point where you are able to explain the statements of your own theorems to a computer proof assistant, then the database people can take it from there\"<br>\nThis suggests that merely formalising the statement of the theorem is the end of the mathematical input, and that formalising the proof then requires no further mathematical insight or understanding.</p>",
        "id": 263469040,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638464737
    },
    {
        "content": "<p>Last sentence of Section 1.1: Many mathematicians imagine that formalisation of mathematics is exactly the kind of fiddly gritty chore that you describe at the start of this section — which is exactly why they haven't tried doing it!  Perhaps better to say something like \"Tactics allow formalised mathematics to more closely resemble ordinary mathematical practice by making \"obvious\" things automatic.\"</p>",
        "id": 263473273,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638466501
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/263390252\">said</a>:</p>\n<blockquote>\n<ul>\n<li>\"most modern proof assistants have no problems with the law of the excluded middle, the axiom of choice, and other classical axioms.\"</li>\n</ul>\n<p>I would replace \"classical\" -&gt; \"nonconstructive\"; this use of \"classical\" is jargon which I don't think is used by most pure mathematicians</p>\n</blockquote>\n<p>For what it's worth, in my mind the jargon goes the other way (i.e., \"nonconstructive\" is somewhat jargon and \"classical\" is common parlance). Moreover, \"classical\" also evokes familiarity.</p>",
        "id": 263473737,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638466703
    },
    {
        "content": "<p>Classical is a very overloaded word in mathematics</p>",
        "id": 263473792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638466729
    },
    {
        "content": "<p>\"classical\" just means any mathematics that doesn't use relativity or quantum mechanics, right?</p>",
        "id": 263474300,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638466938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"422543\">@Stuart Presnell</span> I don't think it's necessary to sugarcoat things here - formalization <em>is</em> a fiddly gritty chore, as much as we would like it not to be. Things are changing, but it's still quite far from what most mathematicians would consider acceptable</p>",
        "id": 263474324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638466946
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> \"classical\" means that you are doing algebraic geometry over an algebraically closed field, instead of over an arbitrary base scheme <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> <br>\n(At least that's what all the the people on my floor of the math dept think.)</p>",
        "id": 263474465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638467014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Sure, there's still a lot of work to be done to close the gap between practice and formalisation (since we still don't have a <code>left as an exercise for the reader</code> tactic).  I was just suggesting an expression of what tactics do for us.</p>",
        "id": 263475059,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638467280
    },
    {
        "content": "<p><code>The argument is a very delicate argument</code> -&gt; <code>The proof involves a very delicate argument</code> ?</p>",
        "id": 263476978,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638468077
    },
    {
        "content": "<p>Nice writeup, Kevin. A few thoughts (I may be repeating what people already said, sorry):</p>\n<ul>\n<li>The bit about \"replacing one computer proof with another\" about the 4ct proof read kind of funny to me. If someone  just learned what \"formalization\" means a section before, I don't think it helps to insist \"no, you're missing the point, this one was formalized\" without elaboration. It's maybe a point to insert something about small kernel, shifting the burden of trust from one ad hoc program to a small generic checkable thing, etc.</li>\n<li>Mario could say more but I'm not sure the Metamath-Lean comparison is quite fair. As I understand it, there are \"assistant\"/tactic-like tools for producing MM proofs, right? The crazy strings of symbols are (sometimes) closer to proof terms than input-level tactic proofs? Lean proofs \"need to be written from first principles\" in the same sense that MM proofs do, if the translation happens at the foundational level and not the input level.</li>\n<li>This was pointed out but the \"constructive axioms built in\" bit isn't fair. If you really have to compare Lean and Coq on this axis, the difference is in how the standard libraries for each make use of nonconstructive axioms.</li>\n<li>Not to beg for citations, but since you explicitly call out <code>norm_cast</code>, there is a paper :) <a href=\"https://dblp.org/rec/conf/cade/LewisM20.html?view=bibtex\">https://dblp.org/rec/conf/cade/LewisM20.html?view=bibtex</a></li>\n<li>The reading of <code>eq.rec</code> is weird, I don't really follow.</li>\n<li>You might want to use link shorteners for some of the web editor links. This way you could even keep them up to date if the code breaks with mathlib changes. </li>\n<li>I was surprised not to see a link to Patrick's document experimentation/sphere eversion after you described it.</li>\n</ul>",
        "id": 263482951,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1638470725
    },
    {
        "content": "<p>\"Humans were well aware even back in the 1960s that the proof was correct\" <br>\nI think this quite seriously underplays the problem of error and trust in published mathematics.  I appreciate that perhaps you want to emphasise that the value of systems like Lean is not just checking the correctness of proofs (since this might be regarded as a small payoff for a lot of effort).  But still, verifying correctness is an important contribution and shouldn't be too heavily downplayed.  It's worth noting that the entire field of Homotopy Type Theory was, in part, motivated by not one but <em>two</em> separate erroneous proofs published by Voevodsky (who nevertheless was also awarded the Fields Medal).  [Voevodsky (2014) The Origins and Motivations of Univalent Foundations]</p>",
        "id": 263493494,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638475501
    },
    {
        "content": "<p>My guess is that Kevin still agrees with the \"correctness is an important contribution\" line, but has realised that for better or worse it doesn't actually get much traction with many pure mathematicians.</p>",
        "id": 263506624,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638482767
    },
    {
        "content": "<p>For the purposes of pure maths research, I'm actually much more excited about the potential for \"multi-level\" proofs that formalisation brings. It's essential that on paper we give human level explanations, and give readers who don't want or need the gory detail a way to grok the big ideas. But too often people write explanations that are unnecessarily painful to expand into the careful detail when you want them. If we ever start writing proper literate proofs in Lean, we can solve this problem.</p>",
        "id": 263506887,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638482902
    },
    {
        "content": "<p>Oh, absolutely, these other advantages should be emphasised.  I'd love to see literate collapsible proofs that allow the reader to say \"hold on, explain <em>this</em> step in more detail for me\".  I'm just noting that verified correctness shouldn't be tossed away as if it was an unimportant side-effect of formalisation, given that there are genuine examples of substantial errors in published papers by well established authors.</p>",
        "id": 263509576,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1638484574
    },
    {
        "content": "<p>I haven't read through this thread yet; I will do so tomorrow. But I noticed Stuart's message pop up and indeed Scott is right: mathematicians get nothing but irked if you tell them that their system doesn't work and so instead I'm telling them what they want to hear. The point is that the system is 99.9% fail-safe and that has been enough for thousands of years. We don't need to get to 99.999% especially if it's a lot of work to get there. We want to hear other reasons to formalise. Computer scientists often come across as paranoid in this regard. Perhaps Voevodsky was also paranoid -- or perhaps he was careless. If you talk to people other than Voevodsky they seem to be well aware that his erroneous paper had an error in, many years before he accepted the idea. The system was working but Voevodsky gives a skewed impression in his talks.</p>",
        "id": 263510900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638485436
    },
    {
        "content": "<p>Very nice paper, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , congratulations! As minor comments, I have:</p>\n<ul>\n<li>Why do you prefer the expression \"nonabelian Iwasawa theory\" to \"noncommutative Iwasawa theory\"?</li>\n<li>On p. 11, after quoting Clausen-Scholze's, theorem 9.4 you have an extra parenthesis )</li>\n<li>This is very personal, but on page 9 you say that computer scientists are expert in \"practical data management\" or something is \"pratical from the point of view of the computer prover\" and I feel that the sentence is a bit harsh to computer scientists.</li>\n<li>I find Gouëzel's story of passing from Isabelle to Lean to formalise Gromov-Hausdorff inspiring, and a big result which might be missing from 1.8 (or section 2)</li>\n<li>You mention in a footnote that the de Bruijn factor for the perfectoid space is well over 5: is it really so? You say it comprises 16000 lines, and I wonder if 3000 lines is not a reasonable estimate for all that is really needed to define a perfectoid space.</li>\n<li>In 3.3 you sometimes write proposition and sometimes Proposition (with capital P): is that intended to hint at the existence of <code>Prop</code>?</li>\n<li>In 3.6 why don't you write Zermelo--Frankel with a n-dash (you write, for instance,  Hales–Ferguson)</li>\n<li>In the title of our paper with Anne, Sander and Ashvni, Dedekind should replace dedekind.</li>\n</ul>",
        "id": 263513145,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1638486747
    },
    {
        "content": "<blockquote>\n<p>... this is where the computer scientists come in; they are experts in practical data management ...</p>\n</blockquote>\n<p>Since others have commented on this sentence, I just wanted to say: I really liked this bit and found it to be resonant.</p>",
        "id": 263513677,
        "sender_full_name": "David Renshaw",
        "timestamp": 1638487085
    },
    {
        "content": "<p>I suppose it is something of a rhetorical flourish (a benign equivocation?), where the \"data\" in the first half of the sentence is not necessarily the same as the \"data\" that we typically associate with computer scientists. But in my opinion, the sentence totally makes sense, is memorable, and if anything is flattering to computer scientists.</p>",
        "id": 263515522,
        "sender_full_name": "David Renshaw",
        "timestamp": 1638488044
    },
    {
        "content": "<p>I think the paper does an excellent job of answering the titular questions. A couple of comments/suggestions: </p>\n<ul>\n<li>\n<p>If you are interested by reading the paper and want to explore further, where do you go? Just reading the intro and then references, it is hard to figure out where to learn more about Lean or another ITP.  A footnote at </p>\n<blockquote>\n<p><em>once you know the language</em></p>\n</blockquote>\n<p>Saying something like: <br>\n<code>If you want to learn the Lean language a good place to start is \\href{https://leanprover-community.github.io/index.html}{https://leanprover-community.github.io/index.html}</code><br>\n  would catch the majority of people. Leaving in the url would make sure people know where to go in the case that the pdf is stripped of hyperlinks via some reprocessing back into pdf or to paper. </p>\n</li>\n<li>\n<p>Interested but overextended mathematician? Find a CS inclined student. Teach them math and have them learn and then teach you Lean by formalizing some of that math. Beats having them read a paper and then write a paper showing they understood the original paper.</p>\n</li>\n</ul>",
        "id": 263519808,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1638491195
    },
    {
        "content": "<p>If you can solve the problem of figuring out good honors math thesis topics, that is definitely something done for the working mathematician.</p>",
        "id": 263519932,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1638491290
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/263482951\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Mario could say more but I'm not sure the Metamath-Lean comparison is quite fair. As I understand it, there are \"assistant\"/tactic-like tools for producing MM proofs, right? The crazy strings of symbols are (sometimes) closer to proof terms than input-level tactic proofs? Lean proofs \"need to be written from first principles\" in the same sense that MM proofs do, if the translation happens at the foundational level and not the input level.</li>\n</ul>\n</blockquote>\n<p>Yes, this is a bit inaccurate and I thought about saying something. While I started to write more tacticky things toward the end, for the vast majority of my time writing metamath proofs the level of automation was essentially equivalent to <code>refine</code> + <code>show</code> + <code>library_search</code>. This is very far from nothing; in particular unification is absolutely essential for being able to produce those something like those line-by-line proofs without a huge amount of copy-paste. The main tactics that I use often in lean that would have been significantly more painful in metamath are <code>simp</code>, <code>norm_num</code>, <code>ring</code>, <code>linarith</code> (and I actually ended up writing <code>norm_num</code> for metamath).</p>",
        "id": 263527306,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638497275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/263513145\">said</a>:</p>\n<blockquote>\n<ul>\n<li>You mention in a footnote that the de Bruijn factor for the perfectoid space is well over 5: is it really so? You say it comprises 16000 lines, and I wonder if 3000 lines is not a reasonable estimate for all that is really needed to define a perfectoid space.</li>\n</ul>\n</blockquote>\n<p>I thought that was poking fun at the fact that \"let X be a perfectoid space\" is a lot less than 16000 lines.</p>",
        "id": 263527472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638497429
    },
    {
        "content": "<p>Oh, I certainly missed that one: thanks!</p>",
        "id": 263539346,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1638511358
    },
    {
        "content": "<p>I actually have one minor remark on the \"types don't mix\" section (3.1). When trying to explain to colleagues this point, I got the impression that a more useful example is the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}_{\\geq 0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9341em;vertical-align:-0.2452em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2452em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> are different types, and so that \" a non-negative real number is not a real number\". The problem with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">N</span></span></span></span> vs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> vs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> etc... is that every mathematician agrees that they are \"truly different sets\" and that we put arrows under the rug in common mathematics.  So they don't see a theoretical difference, just a lot of pedantry. But with nonnegative reals,  things are somewhat different: satisfying a property does not interfere with membership, so I feel this example better serves the goal of explaining that types and sets are different. The same holds when saying that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>sin</mi><mo>⁡</mo><mspace></mspace><mspace width=\"0.1111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333em\"/><mi mathvariant=\"double-struck\">R</mi><mo>→</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\sin\\colon\\mathbb{R}\\to\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mop\">sin</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>sin</mi><mo>⁡</mo><mspace></mspace><mspace width=\"0.1111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333em\"/><mi mathvariant=\"double-struck\">R</mi><mo>→</mo><mo stretchy=\"false\">[</mo><mo>−</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\sin\\colon\\mathbb{R}\\to[-1,1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mop\">sin</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span> are different in type theory, but seen as subsets of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi><mo>×</mo><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>⊆</mo><mi mathvariant=\"double-struck\">R</mi><mo>×</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}\\times [0,1]\\subseteq\\mathbb{R}\\times\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7722em;vertical-align:-0.0833em;\"></span><span class=\"mord mathbb\">R</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> they are equal (or \"more equal\" at any rate).</p>",
        "id": 263699241,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1638615959
    },
    {
        "content": "<p>I'm about to sit down and read all of the above comments and revise the article -- thanks a lot for this comment!</p>",
        "id": 263699297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638615999
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"300245\">Filippo A. E. Nuccio</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/263699241\">said</a>:</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}_{\\geq 0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9341em;vertical-align:-0.2452em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2452em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> are different types</p>\n</blockquote>\n<p>and that's why we ever need to assign a value to r/0 ...</p>",
        "id": 263712573,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1638629996
    },
    {
        "content": "<p>I'd mention <a href=\"https://topology.pi-base.org/\">https://topology.pi-base.org/</a> in Sec. 4.2</p>",
        "id": 263753499,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638686908
    },
    {
        "content": "<p>Here is the full review I promised. I understand that this is still your paper and your style, so feel free to ignore anything you don't like in the little liste below.</p>\n<p>The paper is full of http links which are completely useless on paper. I think you can turn them in regular \\cite with links in the bibliography. When read on a computer this means only one extra click. Also there are links to Lean web editors that I didn't check. Did you make sure they link to a frozen Lean web editor with frozen mathlib so that you won't have to maintain them? Ask for help to setup this if needed.</p>\n<p>Page 1</p>\n<p>In the abstract and many other places, including the third paragraph of the introduction, I would add \"and communicate mathematics\" to \"prove theorems\".</p>\n<p>I wouldn't start in the first paragraph with such a controversial statement as \"Mathematics is a game with precise rules\". Generally I don't think we need to claim anything about the nature of mathematics. It's enough to discuss the way we communicate mathematics.</p>\n<p>Page 2</p>\n<p>\"The technology to make such tools is already available\" (this comes back several times). I think this is an exageration. I understand what you mean, but many people make a living of trying to bring us this technology and wouldn't be happy to read this. Maybe you could soften it to: \"The technology to make such tools is already coming\".</p>\n<p>Paragraph 3, the first time you mention Lean you can already mention Coq and Isabelle, maybe after \"If you can get...\". Then I don't know whether \"database people\" is a good terminology. I understand you need to be vague here, but there is a risk people think about SQL. Maybe \"data scientists\" would be better? That's the vague word we use all the time in France. It would allow to also fix the issue that you start mentioning AI only a couple of sentences later while we know it is needed even for a searchable database. We don't want exact match for statements, there are too many variations in ways to express any given definition and result.</p>\n<p>In the last sentence of that paragraph, I would again soften a bit your \"formalisation is mathematics re-interpreted as a computer puzzle game\", maybe including \"can be seen as\". But I understand this kind of sentence is very much part of your style and its efficiency so feel free to ignore such suggestions.</p>\n<p>As I already told you, I think you can expand on the digitised music analogy. Deezer and similar stuff didn't not only reduce storage requirements. I'm not using these things for young people, but my understanding is they fundamentally changed the way modern artist communicate with their fans, essentially bypassing the traditional editorial and advertisement process. I hope that formalized mathematics will also fundamentally improve communication and <em>accessibility</em> of maths. Johan also mentioned that new animated movies do things that were completely impossible in the hand-drawn era.</p>\n<p>Page 3</p>\n<p>The discussion of tactics is a bit weird. It sounds like tactics are much more recent that they are. This comes back on Page 5 in \"In the final 15 years...\". I think you should check this. Maybe also cite a SSReflect paper and a Isar paper (Isar is the new style of Isabelle proof script that Isabelle people like so much). <br>\nAnd that third paragraph misses an extremely important point: one key new ingredient is the growth of the community of mathematicians using a proof assistant.</p>\n<p>Second to last paragraph is a good place for the canonical Lean citation (from CADE 25 in 2015), and also for the mathlib paper. </p>\n<p>Page 5, in the paragraph before Section 1.2, are you sure the ring tactic is called the same in Isabelle/HOL? </p>\n<p>Page 6, in the description of the 4 colours formalisation, is there actually any topology involved? You may be right but this is suprising to me.</p>\n<p>Page 7, do you really want to keep that \"odd\" word, even with quotation marks? Why not adding half a sentence here and be less controversial?</p>\n<p>Page 8, Section 1.4 it would be nice to \\cite the formalisation paper from the beginning. At the end of the first paragraph, I think you're missing and important point. A lot of time in the odd order project was spent developping SSReflect (which began with the four colours proof).  And also figuring out how to handle such large scale projects.</p>\n<p>Page 9, end of second paragraph, I already wrote this but let me repeat that LEM is not more builtin Lean than in Coq. The difference is the library (and people, but that's roughly the same thing).</p>\n<p>Page 10, about Hales original paper. I think even the Annals published a disclaimer about this proof. But you should check.</p>\n<p>Page 11, first sentence of Section 1.7 reads weird. Surely analytic geometry have been using homological algebra at least since Cartan. I know what you mean of course, but some readers will be puzzled. At the end of this paragraph, the parenthetical remark seems to have some grammatical issues. In the last paragraph, I'd like to mention I also contributed non-trivial proofs to that project, I don't understand why you want the team to be made only of algebraic number theorists and arithmetic  geometers.</p>\n<p>Page 12</p>\n<p>Section 1.8, I would add the Poincaré-Bendixon formalisation, noting the usual proof very much relies on drawings. Maybe also Assia's work on numerical integrals and Manuel's word on analytic number theory. Also note that Isabelle formalized manifolds.</p>\n<p>In the next paragraph, note we are not formalizing Smale's proof. We are formalizing a much more general theorem that has Smale's result as a corollary. The last sentence about schemes reads weird since you explained earlier schemes we done very early.</p>\n<p>First paragraph of section 2, don't forget to mention mathlib is monolithic and consistent (in the sense you can mix all parts). Otherwise its size is not so impressive.</p>\n<p>Page 13</p>\n<p>About Galois theory, isn't there a paper you can cite? Also mention somewhere the Coq formalisation. When mentioning manifolds, remove my name. Add Sébastien's name for calculus and maybe write that calculus include implicit function theorem and Picard-Lindelöf. About cateogry theory I would add Adam's name. When describing my work, you may add \"adic topology, valuation theory\".<br>\nWhy is there no name for \"over time flat and projective...\"?<br>\nIntegrals is for function taking values in Banach spaces, not topological vector spaces.<br>\nI would remove footnote 7 and the \"pull request\" terminology and write \"Contributions are reviewed...\". Pull request is a very specific GitHub term.</p>\n<p>Page 14</p>\n<p>Section 3, I feel this lacks a general explanation of why set theory is not a good foundation (or at least not a good user interface). Maybe cite Stacks tag 0009 somewhere around here. Second paragraph of Section 3.1: you can't claim notation is the only difference between set theory and type theory...</p>\n<p>Page 15</p>\n<p>\"In ZFC set theory, the existence...\" is this litteraly true?</p>\n<p>Page 16</p>\n<p>Are you aware that this story is one of the differences between Lean and Coq? In Coq inductive types give rise to a fixpoint operation, not a recursor. You should probably check with Mario.</p>\n<p>Section 3.3: is the first paragraph the begining of an explanation that was abandonned?</p>\n<p>Page 17</p>\n<p>Right before Section 3.5, the jump from dependant type as a way to handle <code>∀ x, P x</code> to sheaves is really weird and probably very hard to understand.</p>\n<p>At the end of this page, I would mention that the convention for ℕ is the one used in civilized countries. And I don't think that calling <code>finset.range</code> like this is a \"computer science convention\". </p>\n<p>Page 18</p>\n<p>As other wrote, I think confronting nat division and coercions is not a good choice.</p>\n<p>Page 19</p>\n<p>I really think that you mention Fields medals and Annals of maths way too many times in this essay. It really sounds like formalized maths is for people who like prizes and h-factors. </p>\n<p>Section 3.6 feels weirdly positionned. Also, does it miss a paragraph where you wanted to mention universes in Lean? It feels like this section ends too soon.</p>\n<p>Page 20</p>\n<p>plasTeX has no leading P.</p>\n<p>Page 21</p>\n<p>I think you should cite a sledgehammer paper when mentioning hammers.</p>\n<p>Section 4.3</p>\n<p>You can't seriously keep that first sentence when there are so many videos of Youtube showing you explaining maths is full of errors and this is a problem.</p>\n<p>At the very end of paper, I would soften the sentence saying the proof must be clear on paper before formalisation. LTE wasn't clear to Johan when he started.</p>\n<p>Page 22</p>\n<p>I would soften the last sentence before Section 4.4 a lot if you want to keep good relations with Peter.</p>\n<p>In Section 4.4, I wouldn't mind seeing Orsay being mentioned here.</p>",
        "id": 263977094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638869885
    },
    {
        "content": "<p>About 4 color thm: <a href=\"https://github.com/math-comp/fourcolor/blob/master/theories/approx.v\">here</a> is the code that glues continuous statement to a combinatorial one. I haven't read it, so I don't know what happens there.</p>",
        "id": 263979465,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638871341
    },
    {
        "content": "<blockquote>\n<p>At the end of this page, I would mention that the convention for ℕ is the one used in civilized countries.</p>\n</blockquote>\n<p>Note that the talk will be given in a country where 0 is not a natural number (at least, in school math). And if you want to say that it is not civilized, then <code>0 ∉ ℕ</code> is not the best argument.</p>",
        "id": 263979972,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1638871682
    },
    {
        "content": "<p>I'm pretty sure Kevin understood I'm not seriously suggesting he writes this is the civilized convention.</p>",
        "id": 263983268,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638873747
    },
    {
        "content": "<p>About mathlib being monolithic, this can have bad connotation from a software engineering standpoint. The term is often used to refer to a piece of software that's hard to tweak and improve</p>",
        "id": 263990623,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638878322
    },
    {
        "content": "<p>Maybe \"well-integrated\" or something along those lines?</p>",
        "id": 263991891,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1638879050
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"451983\">@Arthur Paulino</span> I agree, but I consider this one of the weird results of mathlib: we did what is \"evil\" from a CS pov, and built this giant monolith. But it seems to work, refactors happen, and cool things are built on top of it.</p>",
        "id": 263992729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638879663
    },
    {
        "content": "<p>So calling it a monolith seems correct to me.</p>",
        "id": 263992748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638879677
    },
    {
        "content": "<p>Besides by the time of the ICM, monorepos will be back in style <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 263995276,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1638881252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/263992729\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"451983\">Arthur Paulino</span> I agree, but I consider this one of the weird results of mathlib: we did what is \"evil\" from a CS pov, and built this giant monolith. But it seems to work, refactors happen, and cool things are built on top of it.</p>\n</blockquote>\n<p>I agree and it's indeed a monolith. It's just that it doesn't sell well.</p>",
        "id": 263995859,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638881545
    },
    {
        "content": "<p>About \"database people\", I'd say \"data folks\", which sounds more inclusive and friendly (at least to me). Or even \"data/AI folks\".</p>",
        "id": 263995993,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638881625
    },
    {
        "content": "<p>I really think Kevin shouldn't care about \"bad connotation from a software engineering standpoint\". He is not writing at all for people with a software engineering standpoint.</p>",
        "id": 263996095,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638881670
    },
    {
        "content": "<p>One clear difference between maths and computer science is that the former has much deeper theories, by which I mean that the longest chain of statements/functions in maths is much bigger than in computer science.</p>",
        "id": 263996102,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638881675
    },
    {
        "content": "<p>It doesn't mean we should write stuff for these people, but that particular essay simply isn't targeting them.</p>",
        "id": 263996140,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638881698
    },
    {
        "content": "<p>And concerning the actual \"issue\" we have a very clear answer here: many people proved that the modular separate libraries scheme doesn't work for formalized math and  we proved the monolithic approach works. This is not a theoretical discuss, only facts.</p>",
        "id": 263996316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638881794
    },
    {
        "content": "<p>We will always see people coming from software engineering explaining they pity us and  we should split mathlib, but we can simply continue to ignore them, at least as long as we are successful.</p>",
        "id": 263996525,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638881906
    },
    {
        "content": "<p>What about Isabelle? They're kind of modular and although I wouldn't want to have to deal with several duplicate libraries, that seems to work.</p>",
        "id": 263997171,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638882233
    },
    {
        "content": "<p>No it doesn't</p>",
        "id": 263998023,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638882664
    },
    {
        "content": "<p>Topology and algebra are extremely difficult to mix because they made different technical decisions about infrastructure.</p>",
        "id": 263998091,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1638882704
    },
    {
        "content": "<p>Fair enough</p>",
        "id": 263998211,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638882754
    },
    {
        "content": "<p>At the same time, it's not clear to me that our current monorepo approach will scale to 100x the size. (Which is a lower bound on the endgoal I'm aiming for.) But we can solve that issue when it becomes a real problem.</p>",
        "id": 264003651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638885160
    },
    {
        "content": "<p><span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span> affinity refactor <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 264003854,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638885252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/264003651\">said</a>:</p>\n<blockquote>\n<p>At the same time, it's not clear to me that our current monorepo approach will scale to 100x the size. (Which is a lower bound on the endgoal I'm aiming for.) But we can solve that issue when it becomes a real problem.</p>\n</blockquote>\n<p>Since I have been asked this a couple of times, can you speculate a bit on this? What are the problems you might foresee? More on the \"human side\" (having enough maintainers with enough time to review all PR or stuff like this) or more \" practical\" (CI would take two days to compile mathlib) or something else?</p>",
        "id": 264011487,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1638888621
    },
    {
        "content": "<p>I do think this subject would deserve a thread of its own, just to keep the focus on Kevin's paper</p>",
        "id": 264013992,
        "sender_full_name": "Arthur Paulino",
        "timestamp": 1638889746
    },
    {
        "content": "<p>I've had tons of feedback on the paper (many thanks to eveyone!) and am currently trying to write v1 of the document. I'm quite happy for the conversation to wander, but the reason it should have a thread of its own is not because it could derail this one but because it will be easier to find later on.</p>",
        "id": 264014224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638889841
    },
    {
        "content": "<p>This topic was moved by <span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> to <a class=\"stream-topic\" data-stream-id=\"113488\" href=\"/#narrow/stream/113488-general/topic/Is.20a.20monolithic.20mathlib.20sustainable.3F\">#general &gt; Is a monolithic mathlib sustainable?</a></p>",
        "id": 264016503,
        "sender_full_name": "Notification Bot",
        "timestamp": 1638890909
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/263977094\">said</a>:</p>\n<blockquote>\n<p>Page 15: \"In ZFC set theory, the existence...\" is this literally true?</p>\n</blockquote>\n<p>For reference:</p>\n<blockquote>\n<p>In ZFC set theory, the existence of the set of natural numbers is postulated as an axiom, namely the axiom of infinity. In type theory systems such as Lean’s, the so-called calculus of inductive constructions can be made to construct types. This means that one can define types “inductively”.</p>\n</blockquote>\n<p>I think it is literally true, but in some ways presents a false distinction. In ZFC, the axiom of infinity is more or less the statement that the natural numbers exist. But it is important to note that you don't need an \"axiom of reals\" to prove that the real numbers exist, or the first uncountable ordinal, or other much larger sets. Which is to say, the axiom of infinity is <em>all</em> you need to get basically all the power of inductive types.</p>\n<p>I think it is somewhat of a marketing gimmick to say that CIC has \"inductive constructions\", because inductive types aren't constructed at all: ZFC axiomatizes the existence of the natural numbers but CIC axiomatizes the existence of the natural numbers, the integers, the reals and tons of other things, and this is considered a good thing in type theory circles because being closer to the axioms means that you can hide implementation details.</p>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/263977094\">said</a>:</p>\n<blockquote>\n<p>Are you aware that this story is one of the differences between Lean and Coq? In Coq inductive types give rise to a fixpoint operation, not a recursor. You should probably check with Mario.</p>\n</blockquote>\n<p>It is somewhat folklore that the two approaches (recursors vs fixpoint operations) are equivalent, but they present very differently, and so they encourage different ways to \"bend the rules\", leading to some foundational differences between Coq and Lean. As I mention in my thesis, doing something analogous to what I did for Lean in Coq is still an open problem, because the rules aren't an exact match. If you scale back a bit, though, I think there is definitely a subset of Coq that is bi-interpretable with Lean. I believe \"<a href=\"https://coq.discourse.group/t/alpha-announcement-coq-is-a-lean-typechecker/581\">Coq is a Lean typechecker</a>\" is a partial attempt at this (they had to fudge a lot of rules to make it work).</p>",
        "id": 264145701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1638965340
    },
    {
        "content": "<p>Within the next 12 hours I hope to have dealt with all these comments, but let me just flag a couple of issues. </p>\n<p>1) People are saying \"LEM is no more built in to Lean as it is to Coq\". I don't understand this. LEM and the other classical axioms are <em>explicitly present</em> in core Lean. As far as I know this is not true in Coq. For me this is a big difference. I removed the comment anyway because if there is a difference of opinion then probably it should go.</p>\n<p>2) The objection about natural division I simply do not buy, although I have removed the example anyway because of Scott's objection. When a mathematician has n : nat and writes n(n-1)/2, I absolutely claim that they <em>mean</em> <code>n*(n-1)/2 : rat</code>, because subtraction and division to a mathematican <em>mean</em> subtraction and division in a field. So I regard the coercion to rat as being a <em>literal translation</em> of what a mathematician is saying and I regard <code>n*(n-1)/2 : nat</code> as being mathematically meaningless, even though coincidentally (and it is only coincidentally) it gives the same answer in this case.</p>",
        "id": 264374352,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639087729
    },
    {
        "content": "<p><a href=\"https://coq.inria.fr/library/Coq.Logic.Classical_Prop.html\">https://coq.inria.fr/library/Coq.Logic.Classical_Prop.html</a> is in the core library</p>",
        "id": 264374654,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639087900
    },
    {
        "content": "<p>And AC?</p>",
        "id": 264374759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639087952
    },
    {
        "content": "<p>A few forms of AC: <a href=\"https://coq.inria.fr/library/Coq.Logic.ChoiceFacts.html\">https://coq.inria.fr/library/Coq.Logic.ChoiceFacts.html</a>, see also <a href=\"https://github.com/coq/coq/wiki/CoqAndAxioms\">https://github.com/coq/coq/wiki/CoqAndAxioms</a></p>",
        "id": 264375427,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639088224
    },
    {
        "content": "<p>Propositional extensionality and quotient types are built-in in Lean and are not built-in in Coq.</p>",
        "id": 264375460,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639088248
    },
    {
        "content": "<p>The closest equivalent to our choice axiom is <a href=\"https://coq.inria.fr/library/Coq.Logic.IndefiniteDescription.html\">https://coq.inria.fr/library/Coq.Logic.IndefiniteDescription.html</a></p>",
        "id": 264375757,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639088416
    },
    {
        "content": "<p>I couldn't find an exact match, but I believe this was the original form of classical.choice before the current one (a simplification I suggested)</p>",
        "id": 264375863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639088488
    },
    {
        "content": "<p>Yury, did you mean proof irrelevance (rather than prop ext) or did I miss something ?</p>",
        "id": 264376121,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1639088643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/264374352\">said</a>:</p>\n<blockquote>\n<p>So I regard the coercion to rat as being a <em>literal translation</em> of what a mathematician is saying and I regard <code>n*(n-1)/2 : nat</code> as being mathematically meaningless, even though coincidentally (and it is only coincidentally) it gives the same answer in this case.</p>\n</blockquote>\n<p>I don't think it is a coincidence. It usually shows up explicitly as part of the proof, as if it was a side condition on writing the expression</p>",
        "id": 264376182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639088666
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> Propositional extensionality is in the core library of both Coq and Lean, like choice, but quotient types are built into lean and not Coq, and similarly for proof irrelevance.</p>",
        "id": 264376439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639088806
    },
    {
        "content": "<p>I don't think Coq even has a general definition of quotient type</p>",
        "id": 264376517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639088848
    },
    {
        "content": "<p>Since a couple years Coq also has a (definitionally) proof irrelevant version of <code>Prop</code>, called <code>SProp</code>: <a href=\"https://coq.inria.fr/refman/addendum/sprop.html\">https://coq.inria.fr/refman/addendum/sprop.html</a></p>",
        "id": 264376611,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639088887
    },
    {
        "content": "<p>I feel like when mathematics students say <code>n*(n-1)/2</code>, they carry around a lot of implicit arguments in their head; I think their version of the ℕ division operator is \"if (↑a/↑b) is a natural then that else throw a what the hell are you doing error\".  I think the closest Lean gets to this is something like <code>division_by_monic</code>, which is zero if q isn't monic. For a more extreme example take the product formula of the totient function; but in that case, I feel like it's more used \"formally\" to get back to an expression in terms of <code>+</code>/<code>*</code> as soon as possible. Maybe this changes higher up in academia, though.</p>\n<p>edit: Zulip won't let me escape asterisks...</p>",
        "id": 264376791,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1639088991
    },
    {
        "content": "<p>I think the main difference between classicality of Coq and Lean is the attitude if its users, not the system or the availability of classical axioms.<br>\n<em>Many</em> Coq users try to avoid choice (and many other axioms like function extensionality) as much as they can, and often in papers of Coq formalizations there is a section on what parts do and do not use axioms (and the reason that axioms were necessary).</p>\n<p>Though other libraries freely use choice throughout (e.g. math-comp analysis: <a href=\"https://github.com/math-comp/analysis/blob/27f0473aa958606ae2b954a1328a8e85c9fda5d5/theories/boolp.v#L25\">https://github.com/math-comp/analysis/blob/27f0473aa958606ae2b954a1328a8e85c9fda5d5/theories/boolp.v#L25</a> )</p>",
        "id": 264377059,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639089132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span> <code>n*(n-1)/2</code>?</p>",
        "id": 264377113,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639089176
    },
    {
        "content": "<p>My experience with divisions aligns with Kevin's. You write something like <code>n*(n-1)/2</code> (or something more complicated) and then at the bottom of the page you write \"notice that <code>n*(n-1)/2</code> is always integral\"; the integralness is not considered a precondition for writing <code>n*(n-1)/2</code></p>",
        "id": 264377328,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639089308
    },
    {
        "content": "<p>er, now I'm confused. When you say <code>n*(n-1)/2</code> in a summation limit or otherwise some position which requires it to be a natural number, that's a precondition on the expression to make sense. If you don't, then it's just a real number</p>",
        "id": 264377727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639089501
    },
    {
        "content": "<p>Why is that mathcomp file stating indefinite description and proving diaconescu's theorem if these are already in the core library?</p>",
        "id": 264378247,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639089736
    },
    {
        "content": "<p>I am not sure how much math-comp (analysis) uses from the standard library. I think it redoes a lot of stuff (everything?)</p>",
        "id": 264378324,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639089786
    },
    {
        "content": "<p>They don't seem to be the only coq library that does that kind of thing. I'm not sure how many Coq people even use the \"standard library\"</p>",
        "id": 264378408,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639089835
    },
    {
        "content": "<p>I guess this means that you can't use the standard library and mathcomp simultaneously, since nothing is compatible</p>",
        "id": 264378603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639089934
    },
    {
        "content": "<p>Yeah, many Coq users never use the standard library. But there are also big libraries on top of the standard library. This is tricky for e.g. the Proof Ground competition (<a href=\"https://www21.in.tum.de/~wimmers/proofground/\">https://www21.in.tum.de/~wimmers/proofground/</a>) which in past years only supported the Coq standard library, which is unfamiliar to many users. We had some discussion about providing both a standard library and math-comp version of the problems.</p>",
        "id": 264379090,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639090239
    },
    {
        "content": "<p>For example, I believe that Coquelicot (<a href=\"http://coquelicot.saclay.inria.fr/\">http://coquelicot.saclay.inria.fr/</a>) builds on top of the standard library. <del>(except that it ignores the real numbers of the standard library)</del> (edit: it seems like they use the real numbers of the standard library, but extend the theory)</p>",
        "id": 264379265,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1639090376
    },
    {
        "content": "<p>In this case, I think Kevin was closer to the truth in saying that LEM is more built in to Lean than Coq. Yes, it's in the standard library, but it's not <em>that</em> standard, and people often just use something else, so when working in a Coq development it may or may not be available</p>",
        "id": 264379315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639090414
    },
    {
        "content": "<p>Plus, if you use it, expect to have to defend your contentious choice in the paper</p>",
        "id": 264379423,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639090471
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/264374352\">said</a>:</p>\n<blockquote>\n<p>2) The objection about natural division I simply do not buy, although I have removed the example anyway because of Scott's objection. When a mathematician has n : nat and writes n(n-1)/2, I absolutely claim that they <em>mean</em> <code>n*(n-1)/2 : rat</code>, because subtraction and division to a mathematican <em>mean</em> subtraction and division in a field. So I regard the coercion to rat as being a <em>literal translation</em> of what a mathematician is saying and I regard <code>n*(n-1)/2 : nat</code> as being mathematically meaningless, even though coincidentally (and it is only coincidentally) it gives the same answer in this case.</p>\n</blockquote>\n<p>I am probably being very naïf here, but I would say that when a mathematician has <code>n : nat</code>and writes <code>n(n-1)/2</code> they don't mean much: only once the question is asked they mean something (and then, I agree with you that they mean it is in <code>rat</code>). It is one of the wonderful (although pride-killing) benefit of working with Lean, that mathematicians got the question asked. I know that it sounds trivial, but putting this under the rug, on my opinion, is neglecting that Math is done by human beings and that changing the way humans interact with it is also part of making Math lands in the 21st century.</p>",
        "id": 264379828,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1639090759
    },
    {
        "content": "<p>I don't think they specifically mean it to be in <code>rat</code> though, any more than it is in <code>real</code> or <code>complex</code></p>",
        "id": 264380068,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639090838
    },
    {
        "content": "<p>Well, this is getting somewhat personal (like: \"what is an algebraically closed field of char 0\"? gets the answers <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi mathvariant=\"double-struck\">Q</mi><mo>ˉ</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\bar{\\mathbb{Q}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9923em;vertical-align:-0.1667em;\"></span><span class=\"mord accent\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8257em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathbb\">Q</span></span><span style=\"top:-3.2579em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.1667em;\"><span class=\"mord\">ˉ</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1667em;\"><span></span></span></span></span></span></span></span></span> according to taste); what I meant is that I agree with Kevin that every mathematician would, if asked, perceive both subtraction and division to take place in a field, and for economy it could be the smallest one doing the job (otherwise <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is also a nice answer...)</p>",
        "id": 264380263,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1639090977
    },
    {
        "content": "<p>Maybe I'm misunderstanding this LEM thing. It is <em>literally impossible</em> to use lean without having LEM available (unless you start your file with <code>prelude</code>). Is the same true in Coq?</p>",
        "id": 264381914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639092246
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/264377727\">said</a>:</p>\n<blockquote>\n<p>er, now I'm confused. When you say <code>n*(n-1)/2</code> in a summation limit or otherwise some position which requires it to be a natural number, that's a precondition on the expression to make sense. If you don't, then it's just a real number</p>\n</blockquote>\n<p>It has to be a natural number because it is a sum of natural numbers, but it's by coincidence that Lean's interpretation of <code>n*(n-1)/2</code> is the <em>correct</em> natural number. For example if I rewrote it as <code>n*n/2 - n/2</code> then it is still the correct natural number, but even more by coincidence.</p>",
        "id": 264383865,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639093541
    },
    {
        "content": "<p>If I wrote it as <code>n*((n-1)/2)</code> then it is the wrong natural number.</p>",
        "id": 264383919,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639093567
    },
    {
        "content": "<p>In math all of these are equal.</p>",
        "id": 264383928,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639093574
    },
    {
        "content": "<p>It is not by coincidence that <code>a/b : nat</code> in lean is defined to be the right answer if the right answer exists</p>",
        "id": 264384215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639093820
    },
    {
        "content": "<p>so <code>(n*(n-1))/2 : nat</code> works out correctly because 2 divides <code>n*(n-1)</code></p>",
        "id": 264384249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639093856
    },
    {
        "content": "<p>all of the other examples are \"coincidences\"</p>",
        "id": 264384267,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639093870
    },
    {
        "content": "<p>It's not always though, because the right answer might not be an integer</p>",
        "id": 264384271,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639093873
    },
    {
        "content": "<p>If it's not an integer, then it evaluates to \"garbage\"</p>",
        "id": 264384286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639093887
    },
    {
        "content": "<p>It's only the final result that we know a priori is an integer (or natural number) but there might be intermediates to worry about as well</p>",
        "id": 264384293,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639093896
    },
    {
        "content": "<p>or more precisely, the floor of the actual answer, which is often what you want in e.g. summation bounds</p>",
        "id": 264384327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639093917
    },
    {
        "content": "<p>It's kind of like how the result of a single floating-point operation is always rounded correctly (and so in particular is always exact if the correct result is precisely representable) but that property doesn't extend to larger expressions.</p>",
        "id": 264384421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1639093974
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> There are many levels of \"built-in\". E.g., <code>(p : Prop) (a b : p) : a = b</code> is built into the C++ code of Lean while <code>classical.choice</code> needs an axiom (though this axioms is in prelude and is used everywhere). For (some) computer scientists, only the first flavor of \"built in\" is truly built in.</p>",
        "id": 264384460,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639094010
    },
    {
        "content": "<p>(at least I this is my impression from some discussions)</p>",
        "id": 264384543,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639094049
    },
    {
        "content": "<p>At least some of those \"non-builtin\" axioms are actually required by the C++ code though, for example <code>simp</code> makes explicit reference to <code>propext</code></p>",
        "id": 264384580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639094083
    },
    {
        "content": "<p>the prelude is pretty tightly coupled to the lean C++ code</p>",
        "id": 264384647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639094137
    },
    {
        "content": "<p>It falls under the \"things that are details that, if asked, Lean can provide\". Another possibility (for implementation) is n*(n-1)/2 being a shorthand for {n choose 2} which is defined to be nat, say 1+2+...+n, but happens to have a rational expression in n.</p>",
        "id": 264390670,
        "sender_full_name": "Yao Liu",
        "timestamp": 1639098466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/264381914\">said</a>:</p>\n<blockquote>\n<p>Maybe I'm misunderstanding this LEM thing. It is <em>literally impossible</em> to use lean without having LEM available (unless you start your file with <code>prelude</code>). Is the same true in Coq?</p>\n</blockquote>\n<p>Ignoring any debate about the technical meaning of \"built in\": there's a history of lots of people saying \"Lean is better than Coq for classical reasoning,\" either erroneously or without real justification. It's not true that the Lean system is better at classical reasoning because choice is imported by default, where in Coq you need to add one import line. This is an immaterial difference. I know you didn't write that line as a value judgment but it will definitely be read as stoking the flames of this argument.</p>",
        "id": 264459454,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639148681
    },
    {
        "content": "<p>The differences are of a social kind.</p>",
        "id": 264461231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639149418
    },
    {
        "content": "<p>As well as the social preference for / against <code>choice</code>, is the preference for <code>Prop</code> vs <code>SProp</code> also relevant to the abundance of classical mathematics in lean?</p>",
        "id": 264464664,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639150916
    },
    {
        "content": "<p>That is, something like:</p>\n<ul>\n<li>no one case whether a Lean <code>Prop</code>(coq <code>SProp</code>) is proved classically, because you can't extract data from it anyway; <code>lemma</code>s are never noncomputable</li>\n<li>coq has a culture / history of using <code>Prop</code>, which isn't proof irrelevant, and so noncomputability <em>is</em> meaningful on lemmas</li>\n</ul>\n<p>(warning: I have never used Coq, this is speculation based on earlier conversation)</p>",
        "id": 264464897,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639151023
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 264553736,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1639216872
    },
    {
        "content": "<p>cf <a href=\"https://softwarefoundations.cis.upenn.edu/lf-current/Extraction.html\">https://softwarefoundations.cis.upenn.edu/lf-current/Extraction.html</a></p>",
        "id": 264553750,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1639216919
    },
    {
        "content": "<p>hmm, sorry, pressed wrong button. I was saying that LEM prevents program extraction, something Coq appears to do well, while Lean never had it released. <br>\n<a href=\"https://softwarefoundations.cis.upenn.edu/lf-current/Extraction.html\">https://softwarefoundations.cis.upenn.edu/lf-current/Extraction.html</a></p>\n<p>This might explain the difference in Coq vs Lean work we see.</p>",
        "id": 264553861,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1639217086
    },
    {
        "content": "<p>LEM in proofs doesn't affect program extraction.</p>",
        "id": 264554091,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1639217511
    },
    {
        "content": "<p>Maybe propositions in Coq correspond to <code>Decidable</code> propositions in Lean? (At least if \"program extraction\" and \"code generation\" are the same thing -- and then Lean does have it.) (EDIT: I think that first sentence is actually blatantly wrong.)<br>\nI think it's quite telling that among all the aspects mentioned in the paper, this one gets so much attention.</p>",
        "id": 264556654,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1639221144
    },
    {
        "content": "<p>Just to comment that in v1 of the paper (which I really hope to post before the builder arrives this afternoon) I remove claims that Lean's treatment of LEM is any different to Coq's, and I'll also remark that I will be saying very little about classical v constructive mathematics, because the audience of the paper is research mathematicians, for many of whom \"mathematics\" := classical mathematics and, like me (or at least like me pre 2017), will believe that constructivism rightfully died out in the 1930s.</p>",
        "id": 264556779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639221264
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/EvJpU470SqMyK2ml_u-pbkzm/ICMtalkv1.pdf\">ICMtalkv1.pdf</a> </p>\n<p>Main changes: If you commented above then I almost certainly changed the MS according to your comments. Section 1.8 (other results) now bigger and better-referenced. Propositions as types stuff now removed. Example involving n(n-1)/2 now removed. LEM stuff now hopefully much more accurate. More mathlib work mentioned in section 2. If there are people who feel that they merit a mention (because they formalised something mathsy which the audience will recognise as interesting or relevant) and who I didn't mention yet then feel free to DM me or flag the issue somehow.</p>",
        "id": 264575781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639245886
    },
    {
        "content": "<p>Section 1.8, Other results: \"Argyraki, Edmonds and Paulson verified Szemeredi’s theorem in Isabelle/HOL\"<br>\nNope nope nope they didn't. We didn't either. Szemerédi's regularity lemma is far easier than Szemerédi's theorem.</p>",
        "id": 264575995,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639246103
    },
    {
        "content": "<p>Also, both teams did pretty much the same stuff:</p>\n<ul>\n<li>Us: Equitable Szemerédi's regularity lemma, Triangle counting lemma, Triangle removal lemma, Corners theorem, Roth's theorem on arithmetic progressions + some more random stuff like <a href=\"https://github.com/leanprover-community/mathlib/pull/10509\">#10509</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/10645\">#10645</a></li>\n<li>Them: Szemerédi's regularity lemma, Triangle counting lemma, Triangle removal lemma, Roth's theorem on arithmetic progressions.</li>\n</ul>",
        "id": 264576112,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639246250
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 264576387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639246582
    },
    {
        "content": "<p>\"Szemerédi's regularity lemma and Roth's theorem on arithmetic progressions\" is a fair summing up for both.</p>",
        "id": 264576500,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639246760
    },
    {
        "content": "<p>Nitpick:</p>\n<blockquote>\n<p>However the system worked, and produced code which compiled; however it was of course also [...]</p>\n</blockquote>\n<p>You use <code>however</code> twice in a row.</p>",
        "id": 264576836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639247151
    },
    {
        "content": "<blockquote>\n<p>In type theory systems such as Lean’s, a system known as the calculus of inductive constructions [CP88] can be used to construct types.</p>\n</blockquote>\n<p>\"Calculus of inductive constructions\" is the name for the particular flavor of dependent type theory that Lean and Coq implement. (Also plenty of non-CIC type theories allow inductive types.) Something like \"Type theories such as Lean's allow the user to define custom <em>inductive</em> types\" might be a better phrasing.</p>",
        "id": 264577102,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639247473
    },
    {
        "content": "<p>Typo:</p>\n<blockquote>\n<p>used extensivel in</p>\n</blockquote>\n<p><code>extensively</code></p>",
        "id": 264577196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639247615
    },
    {
        "content": "<p>I'm still not quite sure why you bring up</p>\n<blockquote>\n<p>A corollary is that if R is any binary relation satisfying ∀a, R(a, a) and if a = b, then we can deduce R(a, b).</p>\n</blockquote>\n<p>in the type theory section. Is this example relevant later or something? Would it be more interesting (or just more confusing) to show how to derive symmetry from substitution?</p>",
        "id": 264577337,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1639247804
    },
    {
        "content": "<p>oh I was just following what I did in my own blog post</p>",
        "id": 264577858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639248441
    },
    {
        "content": "<p>substitution is a statement about types, the corollary is a prop</p>",
        "id": 264577876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639248468
    },
    {
        "content": "<p>(at least in my head)</p>",
        "id": 264577920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639248485
    },
    {
        "content": "<p>I think you're right that it's just easier to remove it though</p>",
        "id": 264577943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639248517
    },
    {
        "content": "<p>I have always been fascinated and confused about type-valued v prop-valued recursors. When writing NNG I noticed that you needed the type-valued recursor to prove the props <code>nat.succ_inj</code> and <code>nat.zero_ne_succ</code>; the prop-valued recursor (induction) didn't seem to be enough.</p>",
        "id": 264578026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639248609
    },
    {
        "content": "<p>Historically those two props are presented as axioms in the usual statements of Peano's axioms, but Lean deduces them from the recursor.</p>",
        "id": 264578047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639248644
    },
    {
        "content": "<p>Nitpick:</p>\n<blockquote>\n<p>The library is not designed for pedagogy or readability;</p>\n</blockquote>\n<p>Would it make sense to write <code>s/designed/optimised/</code>?</p>",
        "id": 264578299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639248917
    },
    {
        "content": "<p>aside (semi-off-topic):</p>\n<blockquote>\n<p>apply theorems such as <code>↑(x+y)=↑x+↑y</code> and <code>↑(x∗y)=↑x∗↑y</code> automatically (before this tactic had been written, doing mathematics which involved switching between the naturals, integers and rationals could be quite frustrating [...]</p>\n</blockquote>\n<p>Wow yes! It's good to occasionally remember that this used to be a major PITA. And now you don't even blink twice. Big kudos to the <code>norm_cast</code> authors.</p>",
        "id": 264579091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639249844
    },
    {
        "content": "<p>Also thank <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  for tirelessly working on basic number theory (every natural is sum of four squares etc) and discovering exactly where the pain points in 2018 were -- it was because of his experiences, at least to some extent (at least this is my memory of things), that we got <code>norm_cast</code> and <code>ring</code></p>",
        "id": 264579150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639249940
    },
    {
        "content": "<p>another nitpick:</p>\n<blockquote>\n<p>defines schemes in Isabelle/HOL but which has to implement a new implementation</p>\n</blockquote>\n<p>duplicates <code>implement*</code></p>",
        "id": 264579347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639250206
    },
    {
        "content": "<p>maybe <code>build a new implementation</code>?</p>",
        "id": 264579357,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639250241
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/263377017\">said</a>:</p>\n<blockquote>\n<ul>\n<li>\"As Carneiro once said, you can’t stop progress\" is a great ender :D</li>\n</ul>\n</blockquote>\n<p><a href=\"#narrow/stream/113488-general/topic/Updating.20Mathlib/near/131243695\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/Updating.20Mathlib/near/131243695</a></p>",
        "id": 264580550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639251737
    },
    {
        "content": "<p>Some random nitpicks:</p>\n<blockquote>\n<p>If such a triviality hides 30 lines of axiomatic mathematics, imagine what is hidden behind claims of the form “The function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is clearly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(x^{-2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> large”?</p>\n</blockquote>\n<p>As \"for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> large\" is redundant in that statement (and thus should be omitted IMHO), I'm not convinced this is a particularly nasty claim.</p>\n<p>I was surprised by the somewhat frequent use of the word \"shock\", in particular twice on page 7. But maybe I'm just not easily shocked.</p>\n<blockquote>\n<p>Naively, it looks like in this case we are replacing one “proof by computer” with another one, however this is missing the point. ...</p>\n</blockquote>\n<p>I second the view you are expressing in this paragraph, and I think the argument can be strengthened a bit. Anyone who spends just a bit of time with theorem provers will quickly notice that in order to formalize something, one already needs to have a correct proof in mind, and be able to fill in all necessary details if required. Even if the prover has a bug that compromises soundness, the existence of that bug doesn't actually change anything about the process of formalization. Or, in other words, to get a wrong proof accepted, you'd have a start with a wrong proof in the first place, one that's wrong in exactly the right way. ;-) And how would that even happen, except deliberately?</p>\n<blockquote>\n<p>In the odd order formalisation, the de Bruijn factor (ratio of lines of computer code to lines of human text) was around 5. Here one could argue that it is 16000.</p>\n</blockquote>\n<p>How could one argue that? (I guess it may be meant as a joke, but I don't really understand the joke then.)</p>\n<p>In the section about the difference between set theory and type theory, I have a feeling that one particular aspect could be misinterpreted by people not used to type theory. You write \"distinct types are disjoint\" and then later give an example about positive reals, where an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>:</mo><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">x : \\mathbb{R}_{\\geq 0}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9341em;vertical-align:-0.2452em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2452em;\"><span></span></span></span></span></span></span></span></span></span> does not have type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span>. Before, you stress that the difference between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>:</mo></mrow><annotation encoding=\"application/x-tex\">:</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mrel\">:</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">∈</span></span></span></span> is mostly one of notation. In combination, the reader could wrongly conclude that something analogous to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo mathvariant=\"normal\">∉</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">x \\notin \\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\"><span class=\"mord\"><span class=\"mrel\">∈</span></span><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"llap\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"inner\"><span class=\"mord\"><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.0556em;\"></span></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">R</span></span></span></span> holds (and dismiss type theory as stupid).<br>\nI'm not sure how to avoid this, other than maybe to state explicitly that this would be exactly the wrong way of thinking about types.</p>\n<blockquote>\n<p>... has to implement a new implementation ...</p>\n</blockquote>\n<p>\"has to reimplement ring theory from scratch\" maybe?</p>\n<p>FWIW, I'd like to suggest an additional item for \"4. The Future\". Formalization can motivate mathematical laypersons (like me...) to dabble in research-level mathematics. There are potentially two aspects to this. The first is that formalization helps test one's intuition; this is related to what you wrote about teaching. But in the future, I can also imagine laypersons (or also just mathematicians from a different field) formalizing their work in order to convince people of its correctness.<br>\n(This also works in reverse. \"Oh, you think you have a proof of the Riemann Hypothesis? Very nice, please formalize it and get back to me.\")</p>",
        "id": 264582324,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1639253913
    },
    {
        "content": "<p>Many thanks! </p>\n<p>I think it's dangerous to start suggesting \"you have to formalise it before we believe it\" will ever be a thing -- this is not how our culture works and I suspect it will never be how it works. I even explicitly suggest in the article that telling Mochizuki to formalise his proof is an unreasonable thing to do, even though part of me thinks it's a really good idea. David Roberts has convinced me in various blog posts and conversations that were Mochizuki to try and write down carefully in Lean some of the things he's talking about he might himself learn something about how to express his ideas more clearly.</p>",
        "id": 264582519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639254169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"198266\">Sebastian Reichelt</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/264582324\">said</a>:</p>\n<blockquote>\n<p>Some random nitpicks:</p>\n<blockquote>\n<p>If such a triviality hides 30 lines of axiomatic mathematics, imagine what is hidden behind claims of the form “The function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is clearly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(x^{-2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> large”?</p>\n</blockquote>\n<p>As \"for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> large\" is redundant in that statement (and thus should be omitted IMHO), I'm not convinced this is a particularly nasty claim.</p>\n</blockquote>\n<p>I think that it depends very much on the <code>f</code> in question. My interpretation of this sentence was that for rather innocent <code>f</code>, it might still be painful to verify the claim.</p>",
        "id": 264582653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639254313
    },
    {
        "content": "<p>right -- can you formalise that 1/(1+x^2) is clearly O(x^{-2}) for x large without using any tactics, just using the axioms of a field?</p>",
        "id": 264582666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639254359
    },
    {
        "content": "<p>Maybe I should change <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><msqrt><mrow><mn>1</mn><mo>+</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><msup><mi>x</mi><mn>4</mn></msup></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">1/\\sqrt{1+x^3+x^4}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1634em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9134em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.8734em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1266em;\"><span></span></span></span></span></span></span></span></span> or something.</p>",
        "id": 264582716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639254401
    },
    {
        "content": "<p>I think it's fine as it is</p>",
        "id": 264582944,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639254652
    },
    {
        "content": "<blockquote>\n<p>I think it's dangerous to start suggesting \"you have to formalise it before we believe it\" will ever be a thing</p>\n</blockquote>\n<p>Yes, that's not at all what I was suggesting though. (OK, except for the \"Riemann Hypothesis\" thing, which I said because supposedly some people are regular bothered by cranks.)</p>\n<blockquote>\n<p>right -- can you formalise that 1/(1+x^2) is clearly O(x^{-2}) for x large without using any tactics</p>\n</blockquote>\n<p>I can believe that it's difficult depending on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>. But reading with a non-Lean POV, my thoughts went something like: \"OK, I guess 'for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> large' first needs to be made precise... Wait, it's actually redundant... Now what's so special about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> being <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(x^{-2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>?\"</p>",
        "id": 264583784,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1639255738
    },
    {
        "content": "<p>I don't understand what you you find redundant in that \"for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> large enough\". Saying \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(x^{-2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> large enough\" and \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(x^{-2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> close to zero\" are very different statements. Maybe you would prefer \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(x^{-2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> goes to infinity\"  or something like this?</p>",
        "id": 264585923,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1639258231
    },
    {
        "content": "<blockquote>\n<p>Formalising all the proofs in the [Stacks] database is not a feasible idea.</p>\n</blockquote>\n<p>I found this statement somewhat surprising - is there something making it impossible besides that it'd be a lot of work? (Maybe I read more in the word \"feasible\" than was meant.)</p>",
        "id": 264587070,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1639259758
    },
    {
        "content": "<p>It's not feasible in the following sense. Consider the collection of people who have the knowledge in algebraic geometry to do the job, and the lean skills. That's a group of around 20 people all of whom hang around on this Zulip. Now consider the amount of work it would be. Now where are those people going to find the time to do that work? Right now there is no infrastructure in place for paying us to do it and no compensation eg promotions or job offers at the end of it. Thus I'm arguing that in practice right now this is not a feasible proposal</p>",
        "id": 264588800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639261614
    },
    {
        "content": "<p>Some typos \"Accessed: 30-11-2011\" in the references</p>",
        "id": 264588989,
        "sender_full_name": "Jörg Hanisch",
        "timestamp": 1639261885
    },
    {
        "content": "<p>Oops!</p>",
        "id": 264589436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639262410
    },
    {
        "content": "<p>I found this very approachable to read. The only minor comment I had whilst reading it (beyond some typos that it looks like were pointed out above) was that I found the sentence \"Gouëzel observes that the HOL systems [etc.]\" a bit out of place -- the rest of the section doesn't do much comparison with other theorem provers I believe.</p>",
        "id": 264590165,
        "sender_full_name": "Julian Berman",
        "timestamp": 1639263394
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/264585923\">said</a>:</p>\n<blockquote>\n<p>I don't understand what you you find redundant in that \"for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> large enough\". Saying \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(x^{-2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> large enough\" and \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(x^{-2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> close to zero\" are very different statements. Maybe you would prefer \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>x</mi><mrow><mo>−</mo><mn>2</mn></mrow></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(x^{-2})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> goes to infinity\"  or something like this?</p>\n</blockquote>\n<p>My bad, I automatically assumed the former because in computer science that's all that ever appears anywhere.</p>",
        "id": 264595328,
        "sender_full_name": "Sebastian Reichelt",
        "timestamp": 1639271214
    },
    {
        "content": "<p>I enjoyed reading it - I always thought that an open library/database of known theorems is needed, but didn't know that it was planned and being worked on now. A typo:  'matheamtics' in page 23</p>",
        "id": 264597188,
        "sender_full_name": "Jineon Baek",
        "timestamp": 1639274329
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/264582716\">said</a>:</p>\n<blockquote>\n<p>Maybe I should change <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><msqrt><mrow><mn>1</mn><mo>+</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><msup><mi>x</mi><mn>4</mn></msup></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">1/\\sqrt{1+x^3+x^4}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1634em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9134em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.8734em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1266em;\"><span></span></span></span></span></span></span></span></span> or something.</p>\n</blockquote>\n<p>Maybe <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><msqrt><mrow><msup><mi>x</mi><mn>4</mn></msup><mo>−</mo><mn>1</mn></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">1 / \\sqrt{x^4-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1634em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9134em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-2.8734em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1266em;\"><span></span></span></span></span></span></span></span></span> would be an example that's harder to prove step-by-step than  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><msqrt><mrow><mn>1</mn><mo>+</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><msup><mi>x</mi><mn>4</mn></msup></mrow></msqrt></mrow><annotation encoding=\"application/x-tex\">1/\\sqrt{1+x^3+x^4}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1634em;vertical-align:-0.25em;\"></span><span class=\"mord\">1/</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9134em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7401em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.8734em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1266em;\"><span></span></span></span></span></span></span></span></span>.</p>",
        "id": 264598225,
        "sender_full_name": "Will Sawin",
        "timestamp": 1639275823
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"307953\">Ruben Van de Velde</span> <a href=\"#narrow/stream/116395-maths/topic/ICM.20talk/near/264587070\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>Formalising all the proofs in the [Stacks] database is not a feasible idea.</p>\n</blockquote>\n<p>I found this statement somewhat surprising - is there something making it impossible besides that it'd be a lot of work? (Maybe I read more in the word \"feasible\" than was meant.)</p>\n</blockquote>\n<p>I'm not sure whether you mean this in the \"I'll eat my hat if\" sense, but this does seem like one of the predictions of the paper that is least likely to age well. I can believe in a possible future where the Stacks project is mostly formalized within 5 years. Lots of things (in particular priorities) would have to change to make that possible, but nothing inconceivable from the present moment.</p>",
        "id": 264633512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639329816
    },
    {
        "content": "<p>It's 7000 pages of advanced mathematics mario. The odd order theorem was 400 pages of relatively straightforward arguements in finite group theory and it took a team of 12 people 6 years</p>",
        "id": 264635033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639331806
    },
    {
        "content": "<p>We can't train a random person to do the job because the material is complex</p>",
        "id": 264635053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639331840
    },
    {
        "content": "<p>One point that might be worth emphasizing here is that for projects such as \"formalize the stacks project\" to be remotely feasible, the incentive structure in academic math would have to change drastically.</p>",
        "id": 264635560,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1639332503
    },
    {
        "content": "<p>Yes this is part of the reason why it's not feasible. Young people like Adam and Johan are right now taking risks, working on projects which will produce results which are alien to the traditional assessment approach when it comes to things like hiring or promotion or tenure.</p>",
        "id": 264640022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639338210
    },
    {
        "content": "<p>Right now we have Hoskinson but I think his centre might be more focused on outreach, teaching tools, interactive stuff etc. We have to work on other sources of funding to level up. I can make the definition of a scheme in my spare time on Thursday evenings with a few undergraduates who have nothing to lose and everything to gain from the project. I can't make the stacks project in that way.</p>",
        "id": 264640128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639338334
    },
    {
        "content": "<p>That it took 6 years for Odd Order Theorem formalisation is more to do with the authors being very far from the group theory, research-wise. I gather 50-75% of the time was spent learning enough group theory.</p>",
        "id": 264641661,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1639340389
    },
    {
        "content": "<p>I think closer to the truth world be the assertion that a lot of the time was spent on formalising the prerequisites. But my point is that I think it's easier for a human to learn undergraduate level group theory, number theory and representation theory than it is to learn PhD level material about algebraic stacks and other technical things in alg geom.</p>\n<p>If you like it's the same kind of problem which I'm now facing at Xena. In the past I could tell people \"choose anything you like, it's probably not in mathlib\" and I'd have undergraduates making PRs defining matrices. Nowadays you have to be far more mathematically advanced to contribute. It's that phenomenon but much worse when it comes to a 7000 page document summarising amongst other things post-Grothendieck breakthroughs in commutative algebra and algebraic geometry</p>",
        "id": 264644748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639344795
    },
    {
        "content": "<p>I am not sure about \"ease to contibute\" - I still easily find undergrad combinatorics topics not in mathlib which potentially should lead to contributions. </p>\n<p>But it's the grown requirements for PRs to fit well that stop the contributions, e.g. <a href=\"https://github.com/leanprover-community/mathlib/pull/7498\">https://github.com/leanprover-community/mathlib/pull/7498</a> is stalled for such a reason since summer. Or problems that my other student, Lu-Ming, faced, which seem to be due to inefficiencies in Lean/mathlib dealing with a seemingly easy object, the group Z-algebra of an order $n$ cyclic group, where he had to check concrete  identities for concrete values of $n$.</p>",
        "id": 264652500,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1639355502
    },
    {
        "content": "<p>I don't think we have stricter requirements for PRs these days compared to when I started 3 years ago. The only significant change I can think of is that you now need to satisfy a bunch of linters, but those were mostly enforced by hand before they became code. (Maybe 3 years ago you could write <code>def</code>s without docstrings. But I don't think writing docstrings is what you consider a problem.)<br>\nI'm sure that we all want the contribution process to be as easy as possible. If you have concrete suggestions for something that is hard and could be made easier, please let us know.</p>",
        "id": 264667814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1639376332
    },
    {
        "content": "<p>I personally got a bit harsh on <a href=\"https://github.com/leanprover-community/mathlib/pull/7498\">#7498</a>, sorry. I will make sure it gets into mathlib some time soon. Just haven't gotten round to doing it yet.</p>",
        "id": 264671631,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1639380930
    },
    {
        "content": "<p>by \"stricter\" I meant that there is now more  \"furniture in the room\" a PR should fit into, without triggering a chain of rewrites.</p>",
        "id": 264681950,
        "sender_full_name": "Dima Pasechnik",
        "timestamp": 1639388601
    },
    {
        "content": "<p>I think graph theory is particularly bad in that regard, because there's much less of an obvious choice of definition vs say matrix multiplication.</p>",
        "id": 264685233,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639390495
    },
    {
        "content": "<p><code>typo</code> there are four dots on p. 1 after the <code>`number theory, algebra, analysis,</code> list (using \\dots you get the right ellipses with three dots).</p>",
        "id": 264702139,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1639400494
    },
    {
        "content": "<p>There are four dots because I put a full stop after the <code>\\dots</code>! Is that not right?? &lt;googles&gt; (still don't know)</p>",
        "id": 265436025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1639853792
    },
    {
        "content": "<p>I think four dots is correct, and that's what I use in my writing.</p>",
        "id": 265440468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1639858420
    },
    {
        "content": "<p>I am attaching an excerpt of my \"Oxford Guide to Style\"; the way I see things is that if an an ellipsis marks the end of an incomplete sentence, it replaces the period (= 3 points). You only have four points whenever a normal complete sentence (with its usual period) is followed by omitted material, and it does not seem to me to be your case. <a href=\"/user_uploads/3121/1ZusUbBLqd5HycRKAvjUVJpM/The-Oxford-Guide-to-Style.pdf\">The-Oxford-Guide-to-Style.pdf</a></p>",
        "id": 265568007,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1640009534
    },
    {
        "content": "<p>Wikipedia seems to say:</p>\n<blockquote>\n<p>Whether an ellipsis at the end of a sentence needs a fourth dot to finish the sentence is a matter of debate; Chicago advises it,[8] as does the Publication Manual of the American Psychological Association (APA style),[9] while some other style guides do not;[citation needed] the Merriam-Webster Dictionary and related works treat this style as optional, saying that it \"may\" be used.[10]</p>\n</blockquote>\n<p>So you can win internet points by linking to that oxford style guide for the citation needed :)</p>",
        "id": 265568917,
        "sender_full_name": "Julian Berman",
        "timestamp": 1640010002
    },
    {
        "content": "<p>I did not get that far, I have simply studied one guide to style and it was the Oxford one—whence my comment—but it is nice to see that the matter is debatable :-)</p>",
        "id": 265569202,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1640010119
    }
]