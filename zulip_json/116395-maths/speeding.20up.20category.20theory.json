[
    {
        "content": "<p>Every now and then I attempt to engage with the category theory library and I always manage get a bit further in than the time before. And then I usually run into something which frustrates me (e.g. I get muddled about universes) and moan here for a bit and then go and do something else.</p>\n<p>So <span class=\"user-mention\" data-user-id=\"132603\">@Calle S√∂nne</span>  raised the question of proving that the equalizers of (f,g) and (g,f) are isomorphic. If I write down the map like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">shapes</span><span class=\"bp\">.</span><span class=\"n\">equalizers</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_equalizers</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">ùíû</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">B</span><span class=\"o\">)</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n<span class=\"n\">def</span> <span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">equalizer</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">equalizer</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">Œπ</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">tidy</span><span class=\"o\">)</span>\n<span class=\"c1\">-- elaboration of equalizer.symm.hom took 794ms</span>\n</pre></div>\n\n\n<p>then things are already slow. I changed <code>tidy</code> to <code>simp</code> and it's still slow. My impression is that in Isabelle you replace <code>by tidy</code> with <code>sledgehammer</code> and then look at the output and use that in your code instead. Is there a way of doing this here?<br>\nIsn't there some way of getting <code>tidy</code> to report <code>tidy says...</code>? I know I can put simp logging on but if I could just get something to cut and paste that would be great.</p>",
        "id": 182837840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575712162
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#tidy\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#tidy\">https://github.com/leanprover-community/mathlib/blob/master/docs/tactics.md#tidy</a></p>",
        "id": 182837899,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575712237
    },
    {
        "content": "<p><em>boggle</em> why do I have to look at this web page? I even read the Lean source for <code>tidy</code>. Shouldn't this be mentioned in the docstring?</p>",
        "id": 182837953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575712324
    },
    {
        "content": "<p>Documentation can always be improved, but that one was not so hard to find...</p>",
        "id": 182837966,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575712360
    },
    {
        "content": "<p>If I hover over <code>tidy</code> I get <code>tidy ?? tactic.tidy.cfg?</code></p>",
        "id": 182837969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575712374
    },
    {
        "content": "<p>But you can PR a better docstring of course.</p>",
        "id": 182837971,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575712380
    },
    {
        "content": "<blockquote>\n<p>Documentation can always be improved, but that one was not so hard to find...</p>\n</blockquote>\n<p>It's not so hard to find if you remember <em>all</em> the places where you're supposed to be looking to find this information. I tried the docstring, I tried the source code for the file hoping for a module docstring, I tried searching Zulip for <code>tidy says</code>, I then asked here.</p>",
        "id": 182838043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575712545
    },
    {
        "content": "<p>I can't write this docstring. \"Tidy does something. Try <code>tidy?</code> to see what it did.\"</p>",
        "id": 182838152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575712717
    },
    {
        "content": "<p>oh wait, I can -- I can just copy from the tactic md file ;-)</p>",
        "id": 182838158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575712749
    },
    {
        "content": "<p>Is it <code> [ci skip]</code> or <code>[skip ci]</code> in the commit message? Both have been used recently. Do both work?</p>",
        "id": 182839091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575714541
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1788\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1788\">#1788</a></p>",
        "id": 182839226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575714763
    },
    {
        "content": "<p>I think both <code>[ci skip]</code> and <code>[skip ci]</code> work, although the first one is the legit one.</p>",
        "id": 182841314,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575718630
    }
]