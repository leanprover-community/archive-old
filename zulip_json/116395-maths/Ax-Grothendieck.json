[
    {
        "content": "<p>I am starting a project in model theory working towards a proof of Ax-Grothendieck in lean. So far I have defined languages, structures, morphisms, terms, and interpretation of terms in structures. I have my current work uploaded here <a href=\"https://github.com/Jlh18/ModelTheoryInLean/tree/branch/src\">https://github.com/Jlh18/ModelTheoryInLean/tree/branch/src</a> </p>\n<p>Some of the things I will be needing/doing in this project are </p>\n<ul>\n<li>Compactness theorem, Vaught completeness test, </li>\n<li>algebraic closure</li>\n<li>Transcendence degree</li>\n<li>A load of cardinality lemmas (some specific to rings)</li>\n<li>A good way of moving between models of the theory of rings and rings themselves</li>\n<li>transcendence degree + cardinality determine ACF_p up to isomorphism</li>\n<li>Ax-Grothendieck for locally finite fields (no model theory here)</li>\n</ul>\n<p>Especially with regards to algebraic closure, transcendence degree and cardinality I would be interested in what is already available. If you have any suggestions please let me know. </p>\n<p>FYI here is how I defined terms and interpretation of terms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"kd\">def</span> <span class=\"n\">Demult</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">A</span>\n  <span class=\"bp\">|</span> <span class=\"o\">[]</span>       <span class=\"o\">:=</span> <span class=\"o\">[]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"k\">then</span> <span class=\"n\">Demult</span> <span class=\"n\">l</span> <span class=\"k\">else</span> <span class=\"n\">a</span> <span class=\"o\">::</span> <span class=\"n\">Demult</span> <span class=\"n\">l</span>\n\n\n  <span class=\"c\">/-</span><span class=\"cm\"> For each term we keep track of the (index of)-/</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> variables appearing in it as a list in ℕ without repetitions (Demult applied to the list)-/</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Term.Var only has itself as the variable-/</span>\n  <span class=\"c\">/-</span><span class=\"cm\"> Term.Comp combines all the variables appearing in the terms used in the composition-/</span>\n  <span class=\"kd\">def</span> <span class=\"n\">VarList</span> <span class=\"o\">:</span> <span class=\"n\">Term</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">ℕ</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">[</span><span class=\"n\">x</span><span class=\"o\">]</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Comp</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">t_</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">Demult</span> <span class=\"o\">(</span><span class=\"n\">list.join</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">Fin.List</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">VarList</span> <span class=\"o\">(</span><span class=\"n\">t_</span> <span class=\"n\">x</span><span class=\"o\">))))</span>\n\n\n  <span class=\"c\">/-</span><span class=\"cm\"> We interpret each term with variables [x₁,⋯,xₙ] as a map Mⁿ → M-/</span>\n  <span class=\"kd\">def</span> <span class=\"n\">TermMap</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">L.Structure</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n    <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">L.Term</span><span class=\"o\">),</span> <span class=\"n\">Prod</span> <span class=\"o\">(</span><span class=\"n\">list.length</span> <span class=\"o\">(</span><span class=\"n\">Term.VarList</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Var</span> <span class=\"n\">x</span><span class=\"o\">)</span>         <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">α</span> <span class=\"o\">()</span>\n  <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">Comp</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">t_</span><span class=\"o\">)</span>   <span class=\"n\">α</span> <span class=\"o\">:=</span>\n    <span class=\"n\">FuncMap</span> <span class=\"n\">f</span> <span class=\"o\">(</span>\n      <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">TermMap</span> <span class=\"o\">(</span><span class=\"n\">t_</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Proj</span> <span class=\"o\">(</span><span class=\"n\">t_</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">VarList</span> <span class=\"o\">(</span><span class=\"n\">Comp</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">t_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">VarList</span> <span class=\"o\">(</span><span class=\"n\">TermVarSubCompVar</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n      <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 244964606,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1625510698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"133584\">@Joseph Hua</span> Sounds like a great project! One thing to note: we recently got first-order structures in mathlib thanks to the work of <span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> based on Flypitch, see e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/first_order.language\">docs#first_order.language</a></p>",
        "id": 244965056,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1625511123
    },
    {
        "content": "<p>Yes i have had a look at that and decided to make some adjustments - but it should be pretty much the same on overlaps</p>",
        "id": 244965265,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1625511299
    },
    {
        "content": "<p>I would definitely recommend staying at least somewhat close to Flypitch, because they have proven some big results like compactness, and to be honest just finding a practical inductive definition of formulas is tricky enough</p>",
        "id": 244965872,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1625511842
    },
    {
        "content": "<p>I have a long-term goal of working on model theory in Lean, but will probably not be active much this summer. I would still be happy to review any model-theory related PRs, or take a look at pre-PR work.</p>",
        "id": 244965978,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1625511924
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 244966070,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1625512003
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/116395-maths/topic/Ax-Grothendieck/near/244965872\">said</a>:</p>\n<blockquote>\n<p>I would definitely recommend staying at least somewhat close to Flypitch, because they have proven some big results like compactness, and to be honest just finding a practical inductive definition of formulas is tricky enough</p>\n</blockquote>\n<p>Oh amazing - I only saw basic <a href=\"https://leanprover-community.github.io/mathlib_docs/find/first_order.language\">docs#first_order.language</a> so i couldnt see any results outside the basics. I have now found the rest of it <a href=\"https://github.com/flypitch/flypitch/releases/tag/2.0\">https://github.com/flypitch/flypitch/releases/tag/2.0</a></p>",
        "id": 244966334,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1625512236
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/116395-maths/topic/Ax-Grothendieck/near/244965978\">said</a>:</p>\n<blockquote>\n<p>I have a long-term goal of working on model theory in Lean, but will probably not be active much this summer. I would still be happy to review any model-theory related PRs, or take a look at pre-PR work.</p>\n</blockquote>\n<p>whats a PR? Im doing this as part of my 4th year project, so starting now and ending summer next year</p>",
        "id": 244966465,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1625512366
    },
    {
        "content": "<p>PR = pull request. So that's the process of proposing a new addition to mathlib, getting reviews, and finally getting the stuff merged into mathlib.</p>",
        "id": 244966512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625512403
    },
    {
        "content": "<p>I just understood the definition of formulas, I was super confused as to how to specify which term is bounded by <code>∀'</code>. Am I understanding it correctly to be: it bounds the variable <code>&amp;0</code> and then shifts the index of every remaining free variable down by 1?</p>",
        "id": 245219036,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1625680918
    },
    {
        "content": "<p>Why can i pattern match on <code>t : bounded_preterm L n 0</code> but not do <code>induction t</code> in tactic mode?</p>",
        "id": 248490580,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1628176034
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"133584\">@Joseph Hua</span> gave me an update today and says he has a proof of Ax-Grothendieck with a lot of sorries. The main sorry is a proof of the Łoś–Vaught test which is a model theoretic theorem, but I suggested that we could help him with the non-model theory parts.</p>\n<p>There are two main things to prove</p>\n<p>The first is to prove Ax-Grothendieck for the algebraic closure of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">F</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{F}_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.975em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span>. The proof of this is that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is the algebraic closure of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>F</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">F_p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is an injective polynomial map and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi><mo>∈</mo><msup><mi>K</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">y \\in K^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> then we can find an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">f(x) = y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> by restricting to the subfield <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> generated by the coefficients of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> and the coordinates of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> is finitely generated and therefore finite, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> is surjective when restricted to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> because an injective map from a finite set to itself is surjective.</p>\n<p>The other thing to prove is that any algebraically closed field of characteristic with the same cardinality as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> is isomorphic to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">C</span></span></span></span>. I've made lots of progress on this in <a href=\"https://github.com/leanprover-community/mathlib/pull/9370\">#9370</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/11703\">#11703</a> . I think finishing this off will be easy once the sorries in <a href=\"https://github.com/leanprover-community/mathlib/pull/11703\">#11703</a> are filled in which are that if <code>R</code> and <code>S</code> are integral domains and <code>algebra R S</code> with an injective <code>algebra_map</code> and <code>S</code> is algebraic over <code>R</code> then <code>fraction_ring S</code> is algebraic over <code>fraction_ring R</code> and <code>algebra_map R (fraction_ring S)</code> is injective. I'm sure this is a special case of something more general.</p>\n<p>I think it would be super cool to have a proof of Ax-Grothendieck, it's a bit different from the rest of the stuff we have and really cool to see model theory being used to prove something outside of model theory.</p>",
        "id": 269622868,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1643310865
    },
    {
        "content": "<p>The reason that I leapt upon Joseph's proposal for Ax-Grothendieck in Lean for his MSc project was precisely that I also thought it would be really interesting to see if model theory could prove something outside of model theory.</p>",
        "id": 269623441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643311138
    },
    {
        "content": "<p>Let me make it clear that there will be no issues with people collaborating with Joseph even though the work is part of his degree. If some part of the argument is done by someone else then he can just state this in the write-up.</p>",
        "id": 269623522,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643311186
    },
    {
        "content": "<p>I think we already have <code>algebra_map R (fraction_ring S)</code> is  injective; we use similar things in flt-regular</p>",
        "id": 269623709,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643311264
    },
    {
        "content": "<p>and maybe the algebraic result is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_fraction_ring.comap_is_algebraic_iff\">docs#is_fraction_ring.comap_is_algebraic_iff</a>?</p>",
        "id": 269629546,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643313676
    },
    {
        "content": "<p>Thanks Chris! To summarize:</p>\n<ul>\n<li>The first <code>sorry</code> that remains is that the theories of algebraically closed fields of characteristic 0 / p are complete. To prove this I need </li>\n</ul>\n<ol>\n<li>Vaught's test (which I am working on)</li>\n<li>That any two algebraically closed fields of the same characteristic and cardinality are isomorphic (which Chris is close to fininishing)</li>\n</ol>\n<ul>\n<li>The second <code>sorry</code> is Ax-Groth for the algebraic closure of F_p</li>\n</ul>\n<p>My repo is here <a href=\"https://github.com/Jlh18/ModelTheoryInLean8\">https://github.com/Jlh18/ModelTheoryInLean8</a></p>",
        "id": 269632151,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1643314910
    },
    {
        "content": "<p>For item 2 you, don't you need to exclude countable models?</p>",
        "id": 269633298,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643315484
    },
    {
        "content": "<p>Just to be more explicit, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8556em;vertical-align:-0.1667em;\"></span><span class=\"mord mathbb\">Q</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}(t)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathbb\">Q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">)</span></span></span></span> do not have isomorphic algebraic closure.</p>",
        "id": 269633488,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643315581
    },
    {
        "content": "<p>(it's okay with uncountable cardinality) I suspect Joseph meant to say cardinality of a transcendence base (over the prime subfield)?</p>",
        "id": 269633553,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1643315619
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/116395-maths/topic/Ax-Grothendieck/near/269629546\">said</a>:</p>\n<blockquote>\n<p>and maybe the algebraic result is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_fraction_ring.comap_is_algebraic_iff\">docs#is_fraction_ring.comap_is_algebraic_iff</a>?</p>\n</blockquote>\n<p>I don't think it is this. That would prove <code>algebraic (fraction_ring R) (fraction_ring S)</code> is equivalent to <code>algebraic R (fraction_ring S)</code> but we don't know <code>algebraic R (fraction_ring S)</code>. There's some content to this, you have to prove that if <code>x</code> is a root of <code>P</code>, then <code>x^-1</code> is a root of <code>P</code> with the coefficients in reverse order.</p>",
        "id": 269636588,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1643317019
    },
    {
        "content": "<p>I think Damiano build an API for \"<code>P</code> with coefficients in reverse order\". So the content you are looking for might already be in mathlib.</p>",
        "id": 269681664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643340333
    },
    {
        "content": "<p>Hmm, I can't find that exact result. But there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.reverse\">docs#polynomial.reverse</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.mirror\">docs#polynomial.mirror</a> which both might be relevant.</p>",
        "id": 269681913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643340578
    },
    {
        "content": "<p>For example, we know <code>reverse (f * g) = reverse f * reverse g</code>, and from there it shouldn't be too hard to get your result about <code>x⁻¹</code>.</p>",
        "id": 269681976,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643340626
    },
    {
        "content": "<p>I think I used these algebra instances recently for ratfunc on top of polynomial, just not in the generality of localizations</p>",
        "id": 269683529,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643342309
    },
    {
        "content": "<p>And built the lift of alg_hom that you need to construct your [algebra (fraction_ring R) (fraction_ring S)], just generalize this <a href=\"https://github.com/leanprover-community/mathlib/pull/11276/files#diff-fd31dd5424b8516373b9afed90f52999a75af83f88d655e59e310598a784e137R625\">https://github.com/leanprover-community/mathlib/pull/11276/files#diff-fd31dd5424b8516373b9afed90f52999a75af83f88d655e59e310598a784e137R625</a></p>",
        "id": 269683833,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643342563
    },
    {
        "content": "<p>Unless I misunderstood something and what I said is irrelevant, then ignore it</p>",
        "id": 269683998,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1643342725
    },
    {
        "content": "<p>I used <code>reverse</code> to transport some results about <code>leading_coeff</code>s to similar results about <code>trailing_coeff</code>s.  What you want about roots of reversed polynomials may be close, but I am not sure.</p>\n<p>To go into slightly technical issues, <code>mirror</code> reflects the interval <code>[0, nat_degree + trailing_nat_degree]</code>.  Thus, <code>reverse</code> and <code>mirror</code> only differ by multiplication by a power of <code>x</code>, and this only when 0 is a root of your polynomial.  Nevertheless, <code>mirror</code> might avoid having to worry about the case when 0 really is a root of your polynomial, in which case it will not be a zero of <code>reverse</code> (if the polynomial is non-zero).</p>",
        "id": 269688562,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1643347550
    },
    {
        "content": "<p>Classification of algebraically closed fields part is now done <a href=\"https://github.com/leanprover-community/mathlib/pull/9370\">#9370</a></p>",
        "id": 269892229,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1643494453
    },
    {
        "content": "<p>Thanks a lot Chris!</p>",
        "id": 269896994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643500791
    },
    {
        "content": "<p>Oh amazing! Thanks so much</p>",
        "id": 270004458,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1643622630
    },
    {
        "content": "<p>I should also note that I've started to get some more model theory into actual mathlib. It does look a bit different than flypitch, although it follows most of the same principles.</p>",
        "id": 270070444,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1643650168
    },
    {
        "content": "<p>This probably shouldn't change this project at all, at least not yet. Once I have the compactness theorem, I think it'd be possible to adapt the project to modern mathlib, but I don't know if it'd be worth it.</p>",
        "id": 270070802,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1643650295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/116395-maths/topic/Ax-Grothendieck/near/270070444\">said</a>:</p>\n<blockquote>\n<p>I should also note that I've started to get some more model theory into actual mathlib. It does look a bit different than flypitch, although it follows most of the same principles.</p>\n</blockquote>\n<p>I have seen. In order to work with morphisms of structures (which wasn't mentioned in the flypitch project as far as I could see) I ported some of your work to my copy of the flypitch project. Of course it would be nice to go the other way round and make the flypitch work more suitable for mathlib, but that's a much larger project than I have time for.</p>",
        "id": 270111174,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1643665967
    },
    {
        "content": "<p>It's done! <a href=\"https://github.com/Jlh18/ModelTheoryInLean8\">https://github.com/Jlh18/ModelTheoryInLean8</a></p>",
        "id": 278178612,
        "sender_full_name": "Joseph Hua",
        "timestamp": 1649344240
    },
    {
        "content": "<p>It's here: <a href=\"https://github.com/Jlh18/ModelTheoryInLean8/blob/94823f02a543e8c7ef230925ecc497926c905ea3/src/Rings/AxGroth.lean#L1577\">https://github.com/Jlh18/ModelTheoryInLean8/blob/94823f02a543e8c7ef230925ecc497926c905ea3/src/Rings/AxGroth.lean#L1577</a> . This is nice because it uses model theory to prove a result which doesn't mention model theory.</p>",
        "id": 278180489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649344986
    },
    {
        "content": "<p>Lean 8? Way to be ahead of the rest of us on lean 3 or 4!</p>",
        "id": 278180863,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1649345159
    },
    {
        "content": "<p>those seem like custom types - is there glue to the standard <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial\">docs#polynomial</a> etc?</p>",
        "id": 278184823,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649346590
    },
    {
        "content": "<p>oh, I see, they're not, poly_map really is required</p>",
        "id": 278185071,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649346677
    }
]