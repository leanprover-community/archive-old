[
    {
        "content": "<p>I posted a question on the lean4 thread asking if the Lean4 developers would agree to change the definition of nat multiplication to avoid non-defeq instances of semimodule on nat. Leo's answer was very reasonable: they may consider this, but first all users should agree on this. <a href=\"#narrow/stream/270676-lean4/topic/PR.20welcome.3F/near/221693092\">https://leanprover.zulipchat.com/#narrow/stream/270676-lean4/topic/PR.20welcome.3F/near/221693092</a></p>\n<p>I have the impression that this change would solve a problem we have encountered in Lean 3, but if I understand correctly <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> was not convinced it would really solve the issue. Since I'm not completely sure either way, I thought I'd ask here. What do you think?</p>",
        "id": 221700397,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1609880171
    },
    {
        "content": "<p>I think it will at least solve more problems than it will create (from a maths perspective). I have no idea if there are CS reasons to keep it the way it is.</p>",
        "id": 221700717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1609880336
    },
    {
        "content": "<p>Did you mean to link to the same topic you posted in?</p>",
        "id": 221703282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609881664
    },
    {
        "content": "<p>I'm not sure there's a reason for the right-recursiveness of multiplication except to be consistent with addition.  (And I really prefer <code>n+1</code> over <code>1+n</code>.)</p>",
        "id": 221704188,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1609882176
    },
    {
        "content": "<p>If we want to change this in Lean 4, we should first try it out in Lean 3 and see if there's any unexpected breakage in mathlib.</p>",
        "id": 221704290,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1609882220
    },
    {
        "content": "<p>So is the suggestion to keep addition right-recursive? I agree with Gabriel that <code>n+1</code> looks much nicer than <code>1+n</code>.<br>\nLeft-recursive multiplication and right-recursive addition sounds weird, but maybe that's pretty nice. <code>2 * n</code> looks nicer than (or equally nice as) <code>n * 2</code>.</p>",
        "id": 221710564,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1609885823
    },
    {
        "content": "<p>Ok, here's the diamond in <code>nat.semimodule</code> that this won't help with removing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.module.basic</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">structure</span> <span class=\"n\">has_nat_diamond</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">value</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">has_nat_diamond</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">has_nat_diamond</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">a.1</span> <span class=\"bp\">+</span> <span class=\"n\">b.1</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">zero_add</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_zero</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">has_nat_diamond</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">r</span> <span class=\"bp\">•</span> <span class=\"n\">x.1</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">smul_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">smul_add</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">smul_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">smul_zero</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">add_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">add_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">zero_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">zero_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- fails</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">add_comm_monoid.nat_semimodule</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">ℕ</span> <span class=\"o\">(</span><span class=\"n\">has_nat_diamond</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">has_nat_diamond.semimodule</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">has_nat_diamond</span>\n</code></pre></div>",
        "id": 221775651,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609944872
    },
    {
        "content": "<p>The proof <code>:= subsingleton.elim _ _</code> works, but type-class resolution doesn't try that</p>",
        "id": 221776103,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609945066
    },
    {
        "content": "<p>That's not to say that your suggestion is pointless - it does solve diamonds between <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.regular\">docs#mul_action.regular</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_monoid.nat_semimodule\">docs#add_comm_monoid.nat_semimodule</a></p>",
        "id": 221776232,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609945119
    },
    {
        "content": "<p>Yes indeed, the diamond you're pointing out is not solved by my proposition, which is only to solve the two <code>ℕ</code>-modules structure on <code>ℕ</code>.</p>",
        "id": 221785052,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1609949113
    },
    {
        "content": "<p>The diamond above is quite pervasive - because it affects <code>linear_map</code>, a chain of N linear maps has <code>N+1</code> different nat-semimodule instances</p>",
        "id": 221786349,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1609949672
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/116395-maths/topic/Definition.20of.20nat.20multiplication/near/221704290\">said</a>:</p>\n<blockquote>\n<p>If we want to change this in Lean 4, we should first try it out in Lean 3 and see if there's any unexpected breakage in mathlib.</p>\n</blockquote>\n<p>I had a look at the change in Lean 3, and there is an issue that there is non-homogeneous multiplication in Lean 4 but not in Lean 3, so making the \"same\" change and checking the consequences does not seem obvious. In Lean 4, it would be possible to define a multiplication <code>ℕ → α → α</code> for any <code>α</code> with an addition and a zero, by induction, and then specialize it to a multiplication on <code>ℕ</code>. And then define a multiplication <code>ℤ → α → α </code> for any <code>α</code> with an addition, a zero and a negation (by using the nat addition already defined), and specialize it to get the <code>ℤ</code>-multiplication. In the current state of Lean 3 and mathlib, making the same change would require moving <code>has_scalar</code> to core, so I am not sure it is desirable.</p>",
        "id": 222068138,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1610110108
    },
    {
        "content": "<p>For what it's worth, there's now a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nsmul_eq_smul\">docs#nsmul_eq_smul</a> lemma that will rewrite the \"backwards\" multiplication of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_comm_monoid.int_semimodule\">docs#add_comm_monoid.int_semimodule</a> into the forwards multiplication of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_action.regular\">docs#mul_action.regular</a>, as long as you use <code>local attribute [instance] mul_action.regular</code></p>",
        "id": 222068303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1610110245
    }
]