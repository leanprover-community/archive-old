[
    {
        "content": "<p>Is there a better proof for this (e.g. without using choice):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.unique</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">unique_of_existence_and_uniqueness</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">existence</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">uniqueness</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unique</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">exists_true_iff_nonempty.mp</span> <span class=\"n\">existence</span> <span class=\"k\">in</span>\n<span class=\"o\">{</span> <span class=\"n\">default</span> <span class=\"o\">:=</span> <span class=\"n\">h.some</span><span class=\"o\">,</span>\n  <span class=\"n\">uniq</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">uniqueness</span> <span class=\"n\">x</span> <span class=\"n\">h.some</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 267129761,
        "sender_full_name": "Joël Riou",
        "timestamp": 1641511839
    },
    {
        "content": "<p>One way to do this is using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nonempty\">docs#nonempty</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subsingleton\">docs#subsingleton</a> . I'm not sure if we have a <code>unique</code> instance given both nonempty and subsingleton</p>",
        "id": 267129924,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641511945
    },
    {
        "content": "<p>I don't think you can avoid choice</p>",
        "id": 267130020,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641512037
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.unique</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">unique_of_existence_and_uniqueness</span>\n  <span class=\"o\">(</span><span class=\"n\">existence</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">true</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">uniqueness</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unique</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">uniqueness</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">unique_of_subsingleton</span> <span class=\"n\">existence.some</span>\n</code></pre></div>",
        "id": 267130083,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641512086
    },
    {
        "content": "<p>You can't avoid choice, you can't get data (and <code>unique</code> is data) from the existensial proposition.</p>",
        "id": 267130122,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641512119
    },
    {
        "content": "<p>you definitely can't avoid choice, what if my type is <code>{x : R // x is chaitin's constant}</code></p>",
        "id": 267130214,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1641512169
    },
    {
        "content": "<p>This is a difference between set theory and type theory. In ZFC you wouldn't need choice.</p>",
        "id": 267130856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641512671
    },
    {
        "content": "<p>In Lean it's very clear when you need it -- it is the only route from the <code>Prop</code> universe to the <code>Type</code> universe</p>",
        "id": 267130911,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641512736
    },
    {
        "content": "<p>Computable, using a computable existensial:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.unique</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">unique_of_existence_and_uniqueness</span>\n  <span class=\"o\">(</span><span class=\"n\">existence</span> <span class=\"o\">:</span> <span class=\"n\">trunc</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">uniqueness</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">x</span><span class=\"bp\">=</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">unique</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">subsingleton</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">uniqueness</span><span class=\"o\">⟩</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">unique_of_subsingleton</span> <span class=\"o\">(</span><span class=\"n\">existence.lift</span> <span class=\"n\">id</span> <span class=\"n\">uniqueness</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 267131350,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641513054
    },
    {
        "content": "<p><code>trunc X</code> is <code>quot (λ _ _, true)</code> of <code>X</code>. So a term of <code>trunc X</code> is equal to any other term of <code>trunc X</code>.</p>",
        "id": 267131503,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641513174
    },
    {
        "content": "<p>And since lean quotients are computable, we can \"lift\" the data out of <code>trunc X</code>, the <code>x : X</code> that is wrapped in the quotient, and provide it as the data-witness to unique, and this is legal because we have a proof that all <code>x y : X</code> are equal.</p>",
        "id": 267131558,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641513228
    },
    {
        "content": "<p>So it didn't matter if it was <code>x : X</code> \"inside\" the <code>trunc X</code> or <code>y : X</code> inside.</p>",
        "id": 267131624,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641513257
    },
    {
        "content": "<p>Thanks for your answers! Then, similarly, if we have <code>R : set (X × Y)</code> such that <code>(∀ (x : X), ∃ (y : Y), ⟨x,y⟩ ∈ R) ∧ (∀ xy xy', xy ∈ R → xy' ∈ R → xy.1 = xy.1 → xy.2 = xy.2)</code>, then we cannot define a term of type X → Y without using choice. That is indeed a big difference between ZF(C) and type theory!</p>\n<p>For my particular case, I am afraid the computable existensial trick will not work :-(</p>",
        "id": 267131846,
        "sender_full_name": "Joël Riou",
        "timestamp": 1641513449
    },
    {
        "content": "<p>Can I ask, why do you need to it to be computable? If you want computable functions, you probably wouldn't be working with <code>set X</code> anyway, since <code>set</code> can be arbitrarily large, infinite, uncountable, etc</p>",
        "id": 267131993,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641513563
    },
    {
        "content": "<p>Did you construct such a set, or do you want to just prove things about it?</p>",
        "id": 267132079,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641513605
    },
    {
        "content": "<p>You can for sure prove that this <code>set.nonempty R</code> as long as <code>[nonempty X]</code>.</p>",
        "id": 267132180,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641513645
    },
    {
        "content": "<p>My question was a minimal working example based on the situation I was in while working in the simplex category. I do not need computability or anything: I was only unsatisfied that choice had to be used!</p>",
        "id": 267133224,
        "sender_full_name": "Joël Riou",
        "timestamp": 1641514279
    }
]