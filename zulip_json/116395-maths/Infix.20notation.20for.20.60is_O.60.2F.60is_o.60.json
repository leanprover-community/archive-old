[
    {
        "content": "<p>Hi,</p>\n<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/14129\">#14129</a> I reorder arguments of <code>is_O</code>/<code>is_o</code> and various <code>trans</code> lemmas so that they work with <code>calc</code>. I use notation <code>f =O[l] g</code> and <code>f =o[l] g</code>. <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  doesn't like the idea of using <code>=</code> in the notation of a non-symmetric relation. Any other ideas? I need infix notation for (at least) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f=O(g)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><mi>o</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f=o(g)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><mi mathvariant=\"normal\">Θ</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f=\\Theta(g)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">Θ</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span> (not yet in mathlib).</p>",
        "id": 282365106,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652551663
    },
    {
        "content": "<p>I do like the current notation, it matches mathematical usage.</p>",
        "id": 282365225,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652551821
    },
    {
        "content": "<p>I think <code>=</code> is fine due to convention, but just to through out an alternative, it could be <code>f ∈O[l] g</code>.</p>",
        "id": 282365309,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652552006
    },
    {
        "content": "<p>Oh, that actually works perfectly</p>",
        "id": 282365354,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652552047
    },
    {
        "content": "<p>I like it even more if I'm being honest</p>",
        "id": 282365358,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1652552067
    },
    {
        "content": "<p>I think <code>=O[l]</code> is better; <code>∈O[l]</code> doesn't read right in the context of transitivity/<code>calc</code>, besides being nonstandard</p>",
        "id": 282365596,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652552503
    },
    {
        "content": "<p>\\mem is already supported in calc. Also \\subset(eq), which leads to some ridiculous looking proofs</p>",
        "id": 282365665,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652552580
    },
    {
        "content": "<p>I mean <code>=O[l]</code> is transitive, like <code>=</code>. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">∈</span></span></span></span> is not transitive.</p>",
        "id": 282365735,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652552657
    },
    {
        "content": "<p>Isn't <code>is_o</code> short enough to not warrant a notation?</p>",
        "id": 282365758,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1652552706
    },
    {
        "content": "<p>I've seen <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∈</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f \\in O(g)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span> in the wild, though as a transitive relation it's nonstandard. Arguably this is using <code>∈</code> closer to Peano's original definition of the notation, which means \"is\" (it's a stylized version of the first letter of the Greek word for the Latin word \"est\").</p>",
        "id": 282365760,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652552716
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Infix.20notation.20for.20.60is_O.60.2F.60is_o.60/near/282365758\">said</a>:</p>\n<blockquote>\n<p>Isn't <code>is_o</code> short enough to not warrant a notation?</p>\n</blockquote>\n<p>Sure, but for <code>calc</code> an infix form would be nice (required?)</p>",
        "id": 282365844,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652552811
    },
    {
        "content": "<p>(Small note regarding <code>calc</code> and this: there's still a bug in <code>calc</code> still where it'll completely ignore whatever you put in the square brackets since it only unifies the last two arguments for the relation. Hopefully that will be fixed eventually...)</p>",
        "id": 282365927,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652552902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Infix.20notation.20for.20.60is_O.60.2F.60is_o.60/near/282365844\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Infix.20notation.20for.20.60is_O.60.2F.60is_o.60/near/282365758\">said</a>:</p>\n<blockquote>\n<p>Isn't <code>is_o</code> short enough to not warrant a notation?</p>\n</blockquote>\n<p>Sure, but for <code>calc</code> an infix form would be nice (required?)</p>\n</blockquote>\n<p>I've tried many things and I think it is required.</p>",
        "id": 282366960,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1652554559
    },
    {
        "content": "<p>How about <code>≤O[l]</code> or <code>≼O[l]</code> or just <code>≼[l]</code>? It is not mathematically correct and goes against my conditioning of never having both an inequality and a big-O in the same formula, but at least it feels transitive and not symmetric.</p>",
        "id": 282370811,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1652560312
    },
    {
        "content": "<p>I guess it's pretty easy to guess what <code>f &lt;= O(g)</code> means. I suppose you could even write <code>f &lt;= C*g</code>!</p>",
        "id": 282371785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652561934
    },
    {
        "content": "<p>Yes, it is clear what <code>f ≤ O(g)</code> means, and it is different from what <code>f = O(g)</code> means, which is why the <code>≤O[l]</code> notation could be misleading</p>",
        "id": 282372508,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1652563073
    },
    {
        "content": "<p>What notation do you suggest for small o and theta?</p>",
        "id": 282372712,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652563335
    },
    {
        "content": "<p>I would go for something like <code>f ≼[l] g</code> for <code>f = O(g)</code>,  <code>f ≪[l] g</code> for <code>f = o(g)</code> and <code>f ≍[l] g</code> for <code>Θ</code></p>",
        "id": 282372894,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1652563610
    },
    {
        "content": "<p>I like the last two of Vincent's suggestions a lot, and in my opinion they correspond very well to common use of these symbols. The first one may unfortunately have a risk of misinterpretation, still.</p>",
        "id": 282373199,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1652564097
    },
    {
        "content": "<p>/poll Notation for <code>is_O</code>, <code>is_o</code>, <code>is_Theta</code>, and <code>is_equivalent</code><br>\n<code>f =O[l] g</code>, <code>f =o[l] g</code>, <code>f =Θ[l] g</code>, and <code>f ~[l] g</code><br>\n<code>f ≼[l] g</code>, <code>f ≪[l] g</code>, <code>f ≍[l] g</code>, and <code>f ~[l] g</code></p>",
        "id": 282373373,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652564372
    },
    {
        "content": "<p>Feel free to add choices.</p>",
        "id": 282373375,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652564383
    },
    {
        "content": "<p>I like the fact that the symbols <code>O</code>, <code>o</code>, and <code>Θ</code> are present in the first choice.</p>",
        "id": 282373428,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652564425
    },
    {
        "content": "<p>The second of Vincent's suggestions will probably be controversial with number theory people, since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>≪</mo></mrow><annotation encoding=\"application/x-tex\">\\ll</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">≪</span></span></span></span> means O() in some subfields</p>",
        "id": 282373646,
        "sender_full_name": "Mauricio Collares",
        "timestamp": 1652564682
    },
    {
        "content": "<p>I'm not sure I understood the transitivity issue with the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">∈</span></span></span></span> notation, so I voted for that for now (may change if someone explains). If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>∈</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>h</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">g \\in O(h)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">)</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo>⊂</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>h</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(g) \\subset O(h)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊂</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">)</span></span></span></span>, so we have as usual <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>∈</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo>⇒</mo><mi>f</mi><mo>∈</mo><mi>O</mi><mo stretchy=\"false\">(</mo><mi>h</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f \\in O(g) \\Rightarrow f \\in O(h)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⇒</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">h</span><span class=\"mclose\">)</span></span></span></span> and I don't see anything wrong with transitivity.</p>\n<p>(I do agree that this notation is not very commonly used, but in formalization we occasionally have to be more pedantic.)</p>",
        "id": 282374011,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1652565178
    },
    {
        "content": "<p>By contrast, Eric Wieser's objection to using <code>=</code> for a non-symmetric relation (and even a non-reflexive relation in the case of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>o</mi></mrow><annotation encoding=\"application/x-tex\">o</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">o</span></span></span></span>) is in my opinion relevant.</p>",
        "id": 282374429,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1652565667
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">...</span>    <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>looks good to me but</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">...</span>    <span class=\"bp\">∈</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>does not because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∈</mo></mrow><annotation encoding=\"application/x-tex\">\\in</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">∈</span></span></span></span> is not transitive</p>",
        "id": 282374618,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652565937
    },
    {
        "content": "<p>You can't write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">...</span>    <span class=\"bp\">∈</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 282374670,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652565966
    },
    {
        "content": "<p><code>≼[l]</code> is logical, but might not have a universally understood meaning</p>",
        "id": 282374727,
        "sender_full_name": "Reid Barton",
        "timestamp": 1652566075
    },
    {
        "content": "<p>Thanks for the explanation! I don't think the second one is terrible, however. The same <code>calc</code> does not work for ordinary <code>∈</code>, but that is because <code>f ∈O[l] g</code> really means <code>f ∈ O(g)</code>. However <code>f ∈O[l] g</code> and <code>g ∈O[l] h</code> can be transitively chained because the second implies <code>O(g) ⊆ O(h)</code>.</p>",
        "id": 282375072,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1652566550
    },
    {
        "content": "<p>I was pronouncing <code>∈O[l]</code> as \"is in O[l] of\", which feels transitive even if <code>∈</code> normally isn't.</p>",
        "id": 282375197,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652566719
    },
    {
        "content": "<p>How about having a second syntax just for calc?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n<span class=\"bp\">...</span>    <span class=\"bp\">⊆</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 282376069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652567905
    },
    {
        "content": "<p>They'd both be defined to mean the same thing, but the second one reads better in <code>calc</code> (and would not appear anywhere else). Really the problem is that this relation isn't transitive in a way that makes sense syntactically</p>",
        "id": 282376142,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652568036
    },
    {
        "content": "<p>I find both <code>f ∈O[l] g ∈O[l] h</code> or <code>g ∈ O(g) ⊆ O(h)</code> acceptable, but this compromise suggestion looks weird to me. There is no binary relation <code>⊆O[l]</code> that takes a function <code>g</code> as its first argument, right?</p>",
        "id": 282376206,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1652568178
    },
    {
        "content": "<p>I don't like the idea of duplicating notation just to make <code>calc</code> look smoother. I think the \"simple\" option of <code>=O[l]</code> and friends has the advantage of an obvious interpretation, even if when it appears multiple times in a calc block there is some dissonance.</p>",
        "id": 282376770,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652569192
    },
    {
        "content": "<p>Is changing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_O\">docs#asymptotics.is_O</a> to be a set a viable option? Then we wouldn't need any special notation for the relation, and could just use ∈ and ⊆.</p>",
        "id": 282377823,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652570677
    },
    {
        "content": "<p>I think it's fascinating that this discussion even exists. I've never heard anyone talk about this subtlety before.</p>",
        "id": 282377849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1652570739
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Infix.20notation.20for.20.60is_O.60.2F.60is_o.60/near/282377823\">said</a>:</p>\n<blockquote>\n<p>Is changing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_O\">docs#asymptotics.is_O</a> to be a set a viable option? Then we wouldn't need any special notation for the relation, and could just use ∈ and ⊆.</p>\n</blockquote>\n<p>This won't work with <code>calc</code> unless you explicitly use a lemma saying <code>f ∈ O(g) → O(f) ⊆ O(g)</code> and I think that we should hide this from the users of <code>calc</code>.</p>",
        "id": 282379549,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652573812
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[trans]</span> <span class=\"kd\">lemma</span> <span class=\"n\">set.mem_of_mem_of_subset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">hs</span> <span class=\"n\">hx</span>\n\n<span class=\"kd\">@[trans]</span> <span class=\"kd\">lemma</span> <span class=\"n\">set.mem_of_mem_of_ssubset</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊂</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">hs.1</span> <span class=\"n\">hx</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ht</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">⊂</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">hx</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">⊆</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">hs</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">⊂</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">ht</span>\n</code></pre></div>",
        "id": 282379736,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652574127
    },
    {
        "content": "<p>(That still has the issue you mention though. I just wanted to try using <code>calc</code> for this.)</p>",
        "id": 282379836,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652574264
    },
    {
        "content": "<p>Also, I want to operate with <code>g</code>, not <code>O(g)</code> because we have, e.g., <code>is_O.trans_eventually_eq</code></p>",
        "id": 282379918,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652574361
    },
    {
        "content": "<p>(not yet in <code>master</code>)</p>",
        "id": 282379963,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652574371
    },
    {
        "content": "<p>(it follows from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_O.congr'\">docs#asymptotics.is_O.congr'</a>)</p>",
        "id": 282379975,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652574404
    },
    {
        "content": "<p>And once we fix <a href=\"https://leanprover-community.github.io/mathlib_docs/find/trans_rel_left\">docs#trans_rel_left</a>, we'll be able to use (with either notation)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">f</span>  <span class=\"bp\">=</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 282380165,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652574682
    },
    {
        "content": "<p>Another question: can we allow something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">at_top</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span>\n</code></pre></div>",
        "id": 282385541,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652583977
    },
    {
        "content": "<p>IMHO, it looks better than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"mi\">3</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 282385553,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652584039
    },
    {
        "content": "<p>(of course, the same applies to other choices)</p>",
        "id": 282385555,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652584056
    },
    {
        "content": "<p>If possible (especially if it's possible to use it with <code>calc</code>), I'd love to have both <code>f =O[l] g</code> and <code>x ^ 2 =O[x in l] x ^ 3</code>.</p>",
        "id": 282385602,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652584117
    },
    {
        "content": "<p>I toyed around with this a bit, and I think it's not possible in lean 3. The reason is because notations can only bind things to the right of the binder</p>",
        "id": 282388783,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1652589246
    },
    {
        "content": "<p>Will it be possible with Lean 4?</p>",
        "id": 282390756,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652592587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Infix.20notation.20for.20.60is_O.60.2F.60is_o.60/near/282379918\">said</a>:</p>\n<blockquote>\n<p>Also, I want to operate with <code>g</code>, not <code>O(g)</code> because we have, e.g., <code>is_O.trans_eventually_eq</code></p>\n</blockquote>\n<p>What's the statement of this lemma?</p>",
        "id": 282399296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652605931
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Infix.20notation.20for.20.60is_O.60.2F.60is_o.60/near/282379549\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Infix.20notation.20for.20.60is_O.60.2F.60is_o.60/near/282377823\">said</a>:</p>\n<blockquote>\n<p>Is changing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_O\">docs#asymptotics.is_O</a> to be a set a viable option? Then we wouldn't need any special notation for the relation, and could just use ∈ and ⊆.</p>\n</blockquote>\n<p>This won't work with <code>calc</code> unless you explicitly use a lemma saying <code>f ∈ O(g) → O(f) ⊆ O(g)</code> and I think that we should hide this from the users of <code>calc</code>.</p>\n</blockquote>\n<p>I agree this would need such a lemma, but I don't think it's unreasonable to make users use such a lemma; IMO it results in less strange notation.</p>\n<p>I assume your other remark would be solved by having a <code>eventually_eq f g -&gt; O(f) = O(g)</code> lemma in the same style.</p>",
        "id": 282404124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652612887
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/15ee5fb66975bc9dbcc49f8d07da8e3771129067/src/analysis/asymptotics/asymptotics.lean#L264\"><code>is_O.trans_eventually_eq</code></a></p>",
        "id": 282411704,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652624544
    },
    {
        "content": "<p>What is the type of <code>O(f)</code>, <code>f : α → E</code>?</p>",
        "id": 282411721,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652624572
    },
    {
        "content": "<p>Note that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/asymptotics.is_O\">docs#asymptotics.is_O</a> allows different codomains for functions.</p>",
        "id": 282411739,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652624621
    },
    {
        "content": "<p>IMHO, making users explicitly use lemmas like <code>f ∈ O(g) → O(f)  ⊆ O(g)</code> makes <code>calc</code> computations with big-O/small-o notation much less convenient</p>",
        "id": 282411862,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652624795
    },
    {
        "content": "<p>For me, the main convenience of <code>calc</code> is that it automatically chooses <code>@[trans]</code> lemmas (also, it's easier to read).</p>",
        "id": 282411880,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652624865
    },
    {
        "content": "<p>I'm suggesting instead of writing <code>is_O f g l</code> we write <code>f ∈ O l g</code>, so instead of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_O</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>\n<p>we have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">O</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Mathematically the content is identical, it's just an argument permutation and re-folding of <code>set</code>.</p>",
        "id": 282416262,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652631509
    },
    {
        "content": "<p>I think what you'd write as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">f₁</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>I'm suggesting we write as</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">f₁</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">∈</span> <span class=\"n\">O</span> <span class=\"n\">l</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">O</span> <span class=\"n\">l</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">O_congr</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 282416503,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652631830
    },
    {
        "content": "<p>Then you really need to use lemmas like <code>O_subset_O_of_mem_O</code>. I really like the fact that <code>f =O[l] g</code> is a relation between two functions. IMHO,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span><span class=\"n\">o</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n</code></pre></div>\n<p>looks better than</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"bp\">∈</span> <span class=\"n\">O</span> <span class=\"n\">l</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">⊆</span> <span class=\"n\">o</span> <span class=\"n\">l</span> <span class=\"n\">g'</span> <span class=\"o\">:</span> <span class=\"n\">O_subset_o_of_mem_o</span> <span class=\"n\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">o</span> <span class=\"n\">l</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">o_congr</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 282416551,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652631891
    },
    {
        "content": "<p>BTW, I don't know how to make a <code>trans</code> lemma that will make your example work.</p>",
        "id": 282416588,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652631960
    },
    {
        "content": "<p>Which line of my example do you think is missing a trans lemma?</p>",
        "id": 282416627,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652631983
    },
    {
        "content": "<p>How do you glue the first and the second line?</p>",
        "id": 282416641,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652632010
    },
    {
        "content": "<p><code>=ᶠ[l]</code> and <code>∈</code></p>",
        "id": 282416645,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652632018
    },
    {
        "content": "<p>Something like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f₁</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf_mem</span> <span class=\"o\">:</span> <span class=\"n\">f₂</span> <span class=\"bp\">∈</span> <span class=\"n\">O</span> <span class=\"n\">l</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f₁</span> <span class=\"bp\">∈</span> <span class=\"n\">O</span> <span class=\"n\">l</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>which I think is just <del>an application of </del> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.eventually_eq.trans_is_O\">docs#filter.eventually_eq.trans_is_O</a> with adjusted notation</p>",
        "id": 282416730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652632113
    },
    {
        "content": "<p>Are you suggesting it's mathematically false, or that <code>trans</code> doesn't like it?</p>",
        "id": 282416742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652632131
    },
    {
        "content": "<p>Could you try to make it work with <code>trans</code>, please (e.g., with <code>constant</code>/<code>axiom</code> instead of actual definitions)?</p>",
        "id": 282417551,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652633233
    },
    {
        "content": "<p>I added \"define sets <code>O(f)</code> etc\" as a choice in the <a href=\"#narrow/stream/116395-maths/topic/Infix.20notation.20for.20.60is_O.60.2F.60is_o.60/near/282373373\">poll</a>. Let me notify all the people who already voted: <span class=\"user-mention\" data-user-id=\"325367\">@Mauricio Collares</span> <span class=\"user-mention\" data-user-id=\"306601\">@Kyle Miller</span> <span class=\"user-mention\" data-user-id=\"272823\">@Anas Himmi</span> <span class=\"user-mention\" data-user-id=\"459227\">@Violeta Hernández</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span> <span class=\"user-mention\" data-user-id=\"242586\">@Vincent Beffara</span> <span class=\"user-mention\" data-user-id=\"412682\">@Moritz Doll</span> <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span><br>\nAlso, it would be nice to hear from <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span></p>",
        "id": 282417775,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652633602
    },
    {
        "content": "<p>Should we choose some deadline for the poll so that we don't wait forever? E.g., 24h from now? Or better 48h?</p>",
        "id": 282418205,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652634223
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Infix.20notation.20for.20.60is_O.60.2F.60is_o.60/near/282417551\">said</a>:</p>\n<blockquote>\n<p>Could you try to make it work with <code>trans</code>, please (e.g., with <code>constant</code>/<code>axiom</code> instead of actual definitions)?</p>\n</blockquote>\n<p>hmm, you're right; I can't get that to work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.asymptotics.asymptotic_equivalent</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">asymptotics</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">O</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">is_O</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">l</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[trans, priority 2]</span> <span class=\"kd\">theorem</span> <span class=\"n\">filter.eventually_eq.trans_mem_O</span>\n  <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f₁</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">f₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f₂</span> <span class=\"bp\">∈</span> <span class=\"n\">O</span> <span class=\"n\">E</span> <span class=\"n\">l</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f₁</span> <span class=\"bp\">∈</span> <span class=\"n\">O</span> <span class=\"n\">E</span> <span class=\"n\">l</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f₁</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f₁</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">f₂</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"n\">f₂</span> <span class=\"bp\">∈</span> <span class=\"n\">O</span> <span class=\"n\">E</span> <span class=\"n\">l</span> <span class=\"n\">g₁</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f₁</span> <span class=\"bp\">∈</span> <span class=\"n\">O</span> <span class=\"n\">E</span> <span class=\"n\">l</span> <span class=\"n\">g₁</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">f₁</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"n\">f₂</span> <span class=\"o\">:</span> <span class=\"n\">hf</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">∈</span> <span class=\"n\">O</span> <span class=\"n\">E</span> <span class=\"n\">l</span> <span class=\"n\">g₁</span> <span class=\"o\">:</span> <span class=\"n\">hfg</span> <span class=\"c1\">--fails</span>\n</code></pre></div>",
        "id": 282418353,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652634466
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Infix.20notation.20for.20.60is_O.60.2F.60is_o.60/near/282380165\">said</a>:</p>\n<blockquote>\n<p>And once we fix <a href=\"https://leanprover-community.github.io/mathlib_docs/find/trans_rel_left\">docs#trans_rel_left</a>, we'll be able to use (with either notation)</p>\n</blockquote>\n<p><del>I think this is the reason though; so none of the proposals will work with trans right now</del></p>",
        "id": 282418415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652634549
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span> and <span class=\"user-mention\" data-user-id=\"458865\">@Thomas Bloom</span>, since we talked about a similar question a while ago in the context of analytic number theory</p>",
        "id": 282418425,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1652634573
    },
    {
        "content": "<blockquote>\n<p>hmm, you're right; I can't get that to work:</p>\n</blockquote>\n<p>I think <code>calc</code> can only match on the head symbol (ie not on the <code>_  ∈ O E l _</code> which has a nested expression), which is rather annoying</p>",
        "id": 282418726,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652635065
    },
    {
        "content": "<p>I slightly prefer the first option but defining sets would also make sense.</p>",
        "id": 282424457,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1652642430
    },
    {
        "content": "<p>I fully agree there should be a deadline for the poll.</p>\n<p>In fact it already looks fairly clear that the non-symmetric and non-reflexive equality symbols are the most popular, which just surprises me a bit. Even the (slightly sloppy but) common math notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><mi>o</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f = o(g)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span> doesn't suggest symmetricity or reflexivity as much as <code>f =o[l] g</code>.</p>",
        "id": 282425997,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1652644524
    },
    {
        "content": "<p>In many settings, including all of analytic number theory, it is very common to have long strings of arguments like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">f₁</span> <span class=\"bp\">=</span> <span class=\"n\">f₂</span> <span class=\"bp\">+</span> <span class=\"n\">O</span><span class=\"o\">(</span><span class=\"n\">g₁</span><span class=\"o\">)</span>\n   <span class=\"bp\">=</span> <span class=\"n\">f₃</span> <span class=\"bp\">+</span> <span class=\"n\">O</span><span class=\"o\">(</span><span class=\"n\">g₂</span><span class=\"o\">)</span>\n   <span class=\"bp\">=</span> <span class=\"bp\">...</span>\n</code></pre></div>\n<p>These mean: <code>|f₁ - f₂| = O(g₁)</code>,  <code>|f₂ - f₃| = O(g₂)</code>, etc, and also <code>g₁≪g₂</code>, etc.  (By the way, here I'm using <code>≪</code> for big-Oh, as used to be the case universally. But then Knuth, just to mess with everybody, redefined it to mean little-oh. So now in CS/algorithms and also parts of pde's etc, you'll see that convention. Not sure what if anything can, or should, be done about this... The absolute worst is seeing topologists write <code>X≫0</code>, which should be totally meaningless...)</p>\n<p>Anyway, would be really great if such a thing existed!...</p>",
        "id": 282426874,
        "sender_full_name": "Alex Kontorovich",
        "timestamp": 1652645670
    },
    {
        "content": "<p>Have a look at <a href=\"https://hal.inria.fr/hal-01719918v3\">https://hal.inria.fr/hal-01719918v3</a></p>",
        "id": 282427736,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652646933
    },
    {
        "content": "<p>I'm not ready to implement it in Lean (yet).</p>",
        "id": 282427740,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652646944
    },
    {
        "content": "<p>Note that the equality sign in your notation is not symmetric too.</p>",
        "id": 282427891,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652647158
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"373986\">Kalle Kytölä</span> <a href=\"#narrow/stream/116395-maths/topic/Infix.20notation.20for.20.60is_O.60.2F.60is_o.60/near/282425997\">said</a>:</p>\n<blockquote>\n<p>I fully agree there should be a deadline for the poll.</p>\n<p>In fact it already looks fairly clear that the non-symmetric and non-reflexive equality symbols are the most popular, which just surprises me a bit. Even the (slightly sloppy but) common math notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><mi>o</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f = o(g)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">o</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span> doesn't suggest symmetricity or reflexivity as much as <code>f =o[l] g</code>.</p>\n</blockquote>\n<p>I suggest that people start reviewing <a href=\"https://github.com/leanprover-community/mathlib/pull/14129\">#14129</a>. If in a day or two another choice will get more votes, then I'll do a search&amp;replace. One exception: if the \"define sets\" approach wins, then we'll have to discard <a href=\"https://github.com/leanprover-community/mathlib/pull/14129\">#14129</a> and do a completely different refactor.</p>",
        "id": 282428055,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652647387
    },
    {
        "content": "<p>My feeling now is that probably <code>calc</code> needs a rework before the set approach really pays off</p>",
        "id": 282428064,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652647423
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/Infix.20notation.20for.20.60is_O.60.2F.60is_o.60/near/282427736\">said</a>:</p>\n<blockquote>\n<p>Have a look at <a href=\"https://hal.inria.fr/hal-01719918v3\">https://hal.inria.fr/hal-01719918v3</a></p>\n</blockquote>\n<p>From that paper:</p>\n<blockquote>\n<p>It is not rare to see this reading enforced by the notation <code>f ∈ o(e)</code> in undergraduate-level teaching, allegedly to prevent students' confusion (see for example in [AF88], a textbook from the eighties still popular in France).</p>\n</blockquote>\n<p>My background in the area is similar to that of an undergrad, so it's perhaps not surprising what my opinion is</p>",
        "id": 282428197,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652647630
    },
    {
        "content": "<p>Then I suggest that we use one of the other notations for now. If someone wants to define sets, this person needs to (or find someone  to) rework <code>calc</code> first.</p>",
        "id": 282428261,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1652647719
    },
    {
        "content": "<p>I think a reference to that paper might be a good idea in the module docstrings, in case we want to explore other options in future</p>",
        "id": 282428360,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652647821
    },
    {
        "content": "<p>It looks like quite an interesting approach</p>",
        "id": 282428365,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652647830
    },
    {
        "content": "<p>I'm not sure if this is already handled somewhere in the PR, but for long strings like in <span class=\"user-mention\" data-user-id=\"252920\">@Alex Kontorovich</span>'s example, we might have some notation something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">f</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span> <span class=\"bp\">`</span> <span class=\"n\">g</span> <span class=\"bp\">`</span> <span class=\"bp\">+</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">65</span> <span class=\"n\">l</span> <span class=\"bp\">`</span><span class=\"o\">](</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">k</span> <span class=\"bp\">`</span><span class=\"o\">)</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">is_O</span> <span class=\"n\">l</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">k</span>\n\n<span class=\"kd\">@[trans]</span> <span class=\"kd\">theorem</span> <span class=\"n\">is_O.trans</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f'</span> <span class=\"n\">f''</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">E'</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">F'</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f'</span> <span class=\"bp\">+</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">](</span><span class=\"n\">g</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">f'</span> <span class=\"bp\">=</span> <span class=\"n\">f''</span> <span class=\"bp\">+</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">](</span><span class=\"n\">g</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f''</span> <span class=\"bp\">+</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">](</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">+</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">](</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">+</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">](</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">+</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">](</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(This is just a quick test that it parses. There's an error due to using <code>is_O l (f - g) k</code> paired with a bug in <code>calc</code>.)</p>",
        "id": 282433079,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652655016
    },
    {
        "content": "<p>Did we already consider the version of the notation with parentheses? It should still work with <code>calc</code>.</p>\n<p>Some examples from taking the first couple lemmas in analysis/asymptotics/asymptotics:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"n\">f</span> <span class=\"bp\">`</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">50</span> <span class=\"n\">l</span> <span class=\"bp\">`</span><span class=\"o\">](</span><span class=\"bp\">`</span> <span class=\"n\">g</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"bp\">`</span><span class=\"o\">)</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">is_O</span> <span class=\"n\">l</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_O_iff_is_O_with</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">](</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">is_O_with</span> <span class=\"n\">c</span> <span class=\"n\">l</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">is_O</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_O_iff</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">](</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀ᶠ</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∥</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"bp\">∥</span><span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">is_O</span><span class=\"o\">,</span> <span class=\"n\">is_O_with</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 282433139,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652655140
    },
    {
        "content": "<p>Yeah, this parses:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">](</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">f</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">](</span><span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n   <span class=\"bp\">...</span> <span class=\"bp\">=</span><span class=\"n\">O</span><span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">](</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 282433213,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1652655308
    },
    {
        "content": "<p>Could someone please review <a href=\"https://github.com/leanprover-community/mathlib/pull/14129\">#14129</a>? I'm OK with <code>f =O[l](g)</code> or <code>f =O[l] g</code> notation (BTW, one can write <code>f =O[l](g)</code> with <code>f =O[l] g</code> notation).</p>",
        "id": 284210796,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1653714236
    },
    {
        "content": "<p>I'm afraid that the PR will rot.</p>",
        "id": 284210837,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1653714251
    }
]