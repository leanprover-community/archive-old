[
    {
        "content": "<p>Hey, I was just comparing notes with <span class=\"user-mention\" data-user-id=\"132603\">@Calle S√∂nne</span> because we were both trying to prove that equalizer(f,g)=equalizer(g,f). His proof looks like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">comm_of_equalizer</span> <span class=\"o\">:</span> <span class=\"n\">equalizer</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"err\">‚âÖ</span> <span class=\"n\">equalizer</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">Œπ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">((</span><span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">condition</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)),</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">Œπ</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">((</span><span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">condition</span><span class=\"o\">)</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)),</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span><span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">parallel_pair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">walking_parallel_pair_hom</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">parallel_pair_map_right</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span><span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">parallel_pair</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">walking_parallel_pair_hom</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">parallel_pair_map_right</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>but I've just realised that this proof has non-terminal simps in! The definition of <code>category_theory.iso</code> is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">iso</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">hom_inv_id&#39;</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"err\">‚â´</span> <span class=\"n\">inv</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"n\">X</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_hom_id&#39;</span> <span class=\"o\">:</span> <span class=\"n\">inv</span> <span class=\"err\">‚â´</span> <span class=\"n\">hom</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"n\">Y</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>and those autoparams fire in both cases, and I believe they apply <code>simp</code> in both cases (and several other things). In neither case does <code>obviously</code> close the goal though, so we have non-terminal simps here. I rewrote as</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">equalizer</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">equalizer</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">Œπ</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">condition</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"n\">def</span> <span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">:</span> <span class=\"n\">equalizer</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"err\">‚âÖ</span> <span class=\"n\">equalizer</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">.</span><span class=\"n\">hom</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">hom_inv_id&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">Œπ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"err\">‚â´</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">œÄ</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">parallel_pair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">walking_parallel_pair</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"o\">,</span>\n      <span class=\"n\">obviously</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span><span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">parallel_pair</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">walking_parallel_pair_hom</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">parallel_pair_map_right</span><span class=\"o\">]</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_hom_id&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">Œπ</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"err\">‚â´</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">œÄ</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">parallel_pair</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">walking_parallel_pair</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"o\">,</span>\n      <span class=\"n\">obviously</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">‚Üê</span><span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">w</span> <span class=\"o\">(</span><span class=\"n\">parallel_pair</span> <span class=\"n\">g</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">walking_parallel_pair_hom</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">parallel_pair_map_right</span><span class=\"o\">],</span>\n  <span class=\"kn\">end</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>and I think this avoids them. I would never have noticed the non-terminal simps if I'd been reviewing this code. [NB one needs <code>local attribute [tidy] tactic.case_bash</code> for this proof to work]</p>",
        "id": 182845514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575726112
    },
    {
        "content": "<p>The second version is what the library code usually looks like</p>",
        "id": 182846062,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575727124
    },
    {
        "content": "<p>One red flag is that the first piece of code is a <code>lemma</code> where it should be a <code>def</code>. Once that is fixed, the fact that the data is defined with <code>begin ... end</code> is another reddish flag.</p>",
        "id": 182846073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575727173
    },
    {
        "content": "<p>Once you start fixing that, by writing down the constructor directly. You converge towards the latter codeblock automatically</p>",
        "id": 182846119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575727211
    },
    {
        "content": "<p>One thing you'll notice is that almost every <code>def</code> in the category lib is followed by some simp-lemmas. (Although there are now attributes that take some of this job out of your hands.) Is there a natural simp-lemma that should follow your definitions?</p>",
        "id": 182846191,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575727365
    },
    {
        "content": "<p>I guess you can tag <code>@[simps]</code> before <code>def equalizer.symm</code> to get some useful simp lemmas.</p>",
        "id": 182846200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575727399
    },
    {
        "content": "<p>Also, we should think about whether the stuff following <code>suffices : this_stuff_is_what_I_mean</code> can be simplified further with a suitable simp-lemma.</p>",
        "id": 182846248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575727481
    },
    {
        "content": "<p>I think you can write a simp-lemma for that fact that simplifies the RHS to the LHS. Once that is done, you can compress your definition to just the <code>hom</code> and <code>inv</code> parts.</p>",
        "id": 182846310,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575727572
    },
    {
        "content": "<p>Calle asked whether this should be in mathlib and I didn't really know. What I'm learning now is that there's a lot more to getting category theory into mathlib than meets the eye. </p>\n<p>I am constantly running into issues in my future plans which will need category theory so I've got to learn it really. Here is a question which stumped me. At some point in the equalizer proof one needs the following fact: if <code>K : limits.fork f g</code> is the limit cone for the equaliser diagram (two maps f and g from A to B, say) then K is an object X and then the data of maps from X to A and B and some theorems (all packaged up as one natural transformation). I wanted to show that if you took the map from X to A and then made a new cone, it was equal to the original cone:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">fork</span> <span class=\"o\">:</span> <span class=\"n\">fork</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">cone</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">fork_of_equalizer_eq_fork</span> <span class=\"o\">:</span>\n  <span class=\"n\">fork</span><span class=\"bp\">.</span><span class=\"n\">of_Œπ</span> <span class=\"o\">(</span><span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">Œπ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">condition</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">equalizer</span><span class=\"bp\">.</span><span class=\"n\">fork</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Then I realised I was missing some sort of <code>cone.ext</code>. And <em>then</em> I realised that this might be a problematic lemma because it's some equality of dependent types in there somewhere. So I decided not to go down that route.</p>",
        "id": 182846532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575727945
    },
    {
        "content": "<p>In my application I only needed that a specific map coming from both natural transformations was the same so I could work around it. But it occurred to me that in general one should probably never be attempting to prove that objects are equal, limits are equal, cones are equal...</p>",
        "id": 182846603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575728051
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- The braiding isomorphism which swaps a binary product. -/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">braiding</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"err\">‚®Ø</span> <span class=\"n\">Q</span> <span class=\"err\">‚âÖ</span> <span class=\"n\">Q</span> <span class=\"err\">‚®Ø</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Here automation finishes everything (and again <code>local attribute [tidy] tactic.case_bash</code>). This is from <code>category_theory.limits.shapes.binary_products</code>. The reason it doesn't finish the equalizer question is that Lean doesn't know that if you have a cone for an equalizer diagram X -&gt; -&gt; Y then you can reconstruct it from the map to X.</p>",
        "id": 182849495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575732878
    },
    {
        "content": "<p>I see, so Johan is saying that perhaps the missing steps should be simp lemmas.</p>",
        "id": 182849513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575732945
    },
    {
        "content": "<p>Sorry that I've been completely absent for a while, but I think getting some eyes on <a href=\"https://github.com/leanprover-community/mathlib/pull/1622\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1622\">https://github.com/leanprover-community/mathlib/pull/1622</a> would be a good idea. Making these changes would, I think, make all this sort of stuff easier.</p>",
        "id": 182866737,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1575761140
    }
]