[
    {
        "content": "<p>I think it's time to bundle homs. I'm doing algebraic closure, and unbundled homs are causing some problems.</p>\n<p>1) It is difficult to compose them, particularly if there are more than two.<br>\n2) Lemmas that contain bundled homs in their statements tend to be slow to use. Examples are <code>polynomial.map_map</code> and <code>polynomial.eval₂_map</code> This lemma is also causing me problems.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">algebraic_comp&#39;</span> <span class=\"o\">{</span><span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">→</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">L</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_field_hom</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_field_hom</span> <span class=\"n\">j</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">algebraic</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">algebraic</span> <span class=\"n\">j</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">algebraic</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"err\">∘</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n</pre></div>\n\n\n<p>3) All the simp lemmas will work.</p>\n<p>How should this be done? In particular should it be done in some sort of category theory framework?</p>",
        "id": 166573708,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558874936
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/717\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/717\">https://github.com/leanprover-community/mathlib/pull/717</a></p>",
        "id": 166573795,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558875108
    },
    {
        "content": "<p>I want to bundle all of them at once. No good only bundling field homs, because I use ring hom lemmas.</p>",
        "id": 166573849,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558875166
    },
    {
        "content": "<p>Maybe you could use this business? <a href=\"https://github.com/leanprover-community/mathlib/blob/c6a7f300ea43cfc0478e3ee81a141d5288d90df6/src/category_theory/instances/CommRing/basic.lean#L31\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/c6a7f300ea43cfc0478e3ee81a141d5288d90df6/src/category_theory/instances/CommRing/basic.lean#L31\">https://github.com/leanprover-community/mathlib/blob/c6a7f300ea43cfc0478e3ee81a141d5288d90df6/src/category_theory/instances/CommRing/basic.lean#L31</a><br>\nThen the <code>\\hom</code> arrow gives ring homs</p>",
        "id": 166574436,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558876138
    },
    {
        "content": "<p>I am of course in favor of this. I would suggest something like <code>linear_map</code>: the types are still unbundled in the usual way, but the map types are fully bundled and have the types as explicit args</p>",
        "id": 166575031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558877076
    },
    {
        "content": "<p>So explicit reference to category theory is not necessary and I think not all that useful for this. Rather, I think that category theory stands to gain from bundled maps since it makes it easy to define the hom-sets</p>",
        "id": 166575056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558877155
    },
    {
        "content": "<p>The experts can weigh in but I don't really see how category theory can be leveraged to reduce duplication here. Sure we can say \"these maps and types form a category\" but that doesn't make the definition of the maps any easier, and for defeq reasons we want a bespoke definition anyway</p>",
        "id": 166575186,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558877286
    },
    {
        "content": "<p>same for group/ring/linear isomorphisms</p>",
        "id": 166575191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558877300
    },
    {
        "content": "<p>Update the issue. Have this conversation there maybe?</p>",
        "id": 166575824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558878294
    },
    {
        "content": "<p>Or link to this.</p>",
        "id": 166575856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1558878345
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> should weigh in and not me (and I've no idea how much he cares), but there are some things to say for the category theory machinery; no new notation like <code>f' ∘ᶠ f</code> would need to exist, for example</p>",
        "id": 166575917,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558878437
    },
    {
        "content": "<p>I wasn't really suggesting any advanced category theory, just basically using the same notation as we do for the category theory version, and making a hom in the category of groups the same thing as a group hom.</p>",
        "id": 166576191,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558878902
    },
    {
        "content": "<p>Sorry, I just copied that from a random comment on the issue Kevin mentioned</p>",
        "id": 166576438,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558879275
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Can't we just leave the library as is, and use the category <code>CommRing</code> whenever you need bundled homs?</p>",
        "id": 166628408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558956078
    },
    {
        "content": "<p>That we we don't need <code>→_am</code>, <code>→_m</code>, <code>→_ag</code>, <code>→_g</code>, <code>→_sr</code>, <code>→_r</code> notations for all the different algebraic structures. <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 166628502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558956175
    },
    {
        "content": "<p>Don't forget that I didn't even mention topological (add) groups, topological rings, etc...</p>",
        "id": 166628521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558956194
    },
    {
        "content": "<p>the category library is... well... at times hard to use</p>",
        "id": 166628524,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558956213
    },
    {
        "content": "<p>but that's the me 3 months ago speaking; the library might have changed a lot</p>",
        "id": 166628546,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558956239
    },
    {
        "content": "<p>Please complain on the chat with MWE's... (-; Then we can work to improve it.</p>",
        "id": 166628557,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558956242
    },
    {
        "content": "<p>I remember that time when I couldn't construct the \"shift by 1\" map for the infinite coproduct of a certain object</p>",
        "id": 166628748,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558956392
    },
    {
        "content": "<p>The trouble with using the category theory library, is then I'll need to do things like prove <code>polynomial</code> is a functor, which we already have basically, but not in the language of category theory.  Also, direct limit is not in the category theory language.</p>",
        "id": 166629243,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558956939
    },
    {
        "content": "<p>Turning <code>polynomial</code> into a functor costs you 3 lines: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/instances/CommRing/adjunctions.lean#L23\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/instances/CommRing/adjunctions.lean#L23\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/instances/CommRing/adjunctions.lean#L23</a></p>",
        "id": 166629459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558957121
    },
    {
        "content": "<p>This file gives you a whole bunch of stuff about colimits of CommRings: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/instances/CommRing/colimits.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/instances/CommRing/colimits.lean\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/instances/CommRing/colimits.lean</a></p>",
        "id": 166629491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558957157
    },
    {
        "content": "<p>Maybe you need some specialised things, but it shouldn't take more time than it takes to build those specialised things directly.</p>",
        "id": 166629508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558957182
    },
    {
        "content": "<p>but now everything becomes noncomputable</p>",
        "id": 166629532,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558957201
    },
    {
        "content": "<p>The computability framework is a pain. I want to be able to post-hoc prove that a definition is computable.</p>",
        "id": 166629656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558957274
    },
    {
        "content": "<p>I think the approach we should take to computability is to not sacrifice ease of use for computability, and if you really want to compute something, write the computable version, and prove it's the same as the version with lemmas about it. But this is a different discussion.</p>",
        "id": 166629880,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558957492
    },
    {
        "content": "<p>Why would things become uncomputable?</p>",
        "id": 166629885,
        "sender_full_name": "Reid Barton",
        "timestamp": 1558957501
    },
    {
        "content": "<p>because polynomial requires decidable equality</p>",
        "id": 166629920,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558957537
    },
    {
        "content": "<p>but not every object of <code>CommRing</code> has decidable equality</p>",
        "id": 166629926,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558957548
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> See this functor: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/instances/CommRing/adjunctions.lean#L23\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/instances/CommRing/adjunctions.lean#L23\">https://github.com/leanprover-community/mathlib/blob/master/src/category_theory/instances/CommRing/adjunctions.lean#L23</a></p>",
        "id": 166629969,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558957563
    },
    {
        "content": "<p>There are not that many computable algebraically closed fields. And for computations with those fields, we might want to have more streamlined constructions anyway...</p>",
        "id": 166630021,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558957626
    },
    {
        "content": "<p>I also need other things like <code>eval2_map</code>. This is something other than functoriality.</p>",
        "id": 166630029,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558957635
    },
    {
        "content": "<p>Can't you just use it? You might need a <code>rw/simp</code>-lemma that rewrites the application of the functor to a form where you can use <code>eval₂_map</code>...</p>",
        "id": 166630099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558957691
    },
    {
        "content": "<p>I can't use it right now. It's really slow without bundled homs.</p>",
        "id": 166630149,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1558957772
    },
    {
        "content": "<p>I agree about post hoc computability. More generally, we want to separate the computational implementation from the abstract mathematical definition</p>",
        "id": 166630154,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558957793
    },
    {
        "content": "<p>lol</p>",
        "id": 166630215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558957820
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span> Please make this happen <span aria-label=\"thank you\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"thank you\">:thank_you:</span></p>",
        "id": 166630255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1558957864
    },
    {
        "content": "<p>VM override goes a long way to making it happen</p>",
        "id": 166630268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558957883
    },
    {
        "content": "<p>I think that the <code>noncomputable</code> marker (or more specifically the lack of it) is not of that much importance if we can't actually use the generated code</p>",
        "id": 166630367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1558957969
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">concrete_category</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">instances</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">DecEq</span> <span class=\"o\">:=</span> <span class=\"n\">bundled</span> <span class=\"n\">decidable_eq</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">DecEq</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">str</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">DecEq_category</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">DecEq</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">instances</span>\n</pre></div>",
        "id": 166630394,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558957997
    },
    {
        "content": "<p>in the meantime should we have a category of discrete rings?</p>",
        "id": 166630406,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558958013
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">DecEq</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Option</span> <span class=\"o\">:</span> <span class=\"n\">DecEq</span> <span class=\"err\">⥤</span> <span class=\"n\">DecEq</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">option</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">decidable_eq</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"o\">,</span>\n  <span class=\"n\">map_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map_id</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">DecEq</span>\n</pre></div>",
        "id": 166631130,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558958629
    },
    {
        "content": "<p>this framework is quite promising</p>",
        "id": 166631132,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558958635
    },
    {
        "content": "<p>speaking of which, do we have those functors for <code>Type</code>?</p>",
        "id": 166631446,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558958888
    },
    {
        "content": "<p>What does \"functor for <code>Type</code>\" mean</p>",
        "id": 166631509,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558958952
    },
    {
        "content": "<p><code>Option : Type \\func Type</code></p>",
        "id": 166631529,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558958982
    },
    {
        "content": "<p>Ah right</p>",
        "id": 166631544,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1558958999
    },
    {
        "content": "<p>wait it can't be called Type, what is it called</p>",
        "id": 166631609,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558959016
    },
    {
        "content": "<p>oh it is indeed <code>Sort u</code></p>",
        "id": 166631626,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558959042
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Option</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"err\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">option</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"o\">,</span>\n  <span class=\"n\">map_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">map_id</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 166631664,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1558959078
    },
    {
        "content": "<p>I think rather than defining <code>Option</code> by hand we might want to write <code>as_functor option</code>, which would look for the computer scientists' <code>is_lawful_functor</code> instance.</p>",
        "id": 166728510,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1559057908
    }
]