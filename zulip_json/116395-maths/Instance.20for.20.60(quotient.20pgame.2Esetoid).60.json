[
    {
        "content": "<p>In set_theory/game.lean, <code>game</code> is defined as <code>quotient pgame.setoid</code>.<br>\nThere is an instance <code>add_comm_group game</code> already defined there. </p>\n<p>But the following throws an error: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">pgame.setoid</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">tactic.mk_instance</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">generate</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n  <span class=\"n\">add_comm_group</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">pgame.setoid</span><span class=\"o\">)</span><span class=\"bp\">`</span>\n</code></pre></div>\n<p>I'm trying to define lemmas like </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">⟧</span> <span class=\"bp\">=</span> <span class=\"bp\">⟦</span><span class=\"n\">a</span><span class=\"bp\">⟧</span> <span class=\"bp\">+</span> <span class=\"bp\">⟦</span><span class=\"n\">b</span><span class=\"bp\">⟧</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but I'm getting the same error - Lean is unable to find <code>has_add</code> instance for <code>quotient pgame.setoid</code>.</p>\n<p>What's going on?</p>",
        "id": 237672186,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1620313167
    },
    {
        "content": "<p>When you make the <code>instance</code> definition of <code>instance add_comm_group game</code>, that won't transfer over to <code>quotient pgame.setoid</code> because <code>game</code> is a different type. It is a type synonym. This allows us to place different instances on seemingly \"same\" types.</p>",
        "id": 237672815,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620313286
    },
    {
        "content": "<p>Like opposite orders -- check out <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual\">docs#order_dual</a></p>",
        "id": 237672907,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620313303
    },
    {
        "content": "<p>You could transfer it over explicitly by <code>instance : add_comm_group (quotient pgame.setoid) := game.add_comm_group</code></p>",
        "id": 237673245,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1620313361
    },
    {
        "content": "<p>I see, I thought the two were definitionally equal so the instances would automatically carry over. Thanks!</p>",
        "id": 237675177,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1620313786
    },
    {
        "content": "<p>You can also use <code>@[derive]</code> to automatically transfer the instance, by putting <code>@[derive add_comm_group]</code> above the def of <code>game</code></p>",
        "id": 237676544,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1620314151
    },
    {
        "content": "<p>@[derive] is throwing  some weird errors. Should it be before somewhere else? </p>\n<p><a href=\"https://github.com/leanprover-community/mathlib/blob/9c86e38141b94bcd23665717f26c1da1622c59a7/src/set_theory/game.lean#L35\">https://github.com/leanprover-community/mathlib/blob/9c86e38141b94bcd23665717f26c1da1622c59a7/src/set_theory/game.lean#L35</a></p>",
        "id": 237678916,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1620315034
    },
    {
        "content": "<p><code>derive</code> is a red herring here</p>",
        "id": 237679938,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620315414
    },
    {
        "content": "<p>Changing <code>def game := quotient pgame.setoid</code> to <code>abbreviation game := quotient pgame.setoid</code> would solve your problem, but might create new problems</p>",
        "id": 237679995,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620315435
    },
    {
        "content": "<p>You can only use <code>derive</code> for <code>def foo := bar</code> if <code>bar</code> already has the structure you want to derive</p>",
        "id": 237680165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620315503
    },
    {
        "content": "<p>It doesn't work for structures that haven't been defined yet</p>",
        "id": 237680198,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620315520
    },
    {
        "content": "<p>The first solution of explicitly defining the instance seems to be the best approach then.</p>",
        "id": 237680804,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1620315744
    },
    {
        "content": "<p><code>abbreviation</code> might be better if it doesn't break anything</p>",
        "id": 237682925,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620316476
    },
    {
        "content": "<p>Since then you don't need to do anything else</p>",
        "id": 237682939,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620316481
    },
    {
        "content": "<p>Thanks! It worked, nothing broken so far.</p>",
        "id": 237683400,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1620316656
    }
]