[
    {
        "content": "<p>Is this just a fact of life for some reason:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">profiler</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">6</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">4</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">5</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">6</span><span class=\"bp\">+</span><span class=\"n\">x</span><span class=\"err\">^</span><span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- 5 seconds</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"bp\">+</span><span class=\"n\">X</span><span class=\"bp\">+</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">3</span><span class=\"bp\">+</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">4</span><span class=\"bp\">+</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">5</span><span class=\"bp\">+</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">6</span><span class=\"bp\">+</span><span class=\"n\">X</span><span class=\"err\">^</span><span class=\"mi\">7</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">ring</span> <span class=\"c1\">-- 18 seconds</span>\n</pre></div>",
        "id": 192978896,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586121723
    },
    {
        "content": "<p>I suspect that the majority of the time is coming from the few times I \"save some time\" by calling lean builtins instead of hand rolling exprs using the constructor</p>",
        "id": 192979198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586122230
    },
    {
        "content": "<p>My workaround is to prove the top one and deduce the bottom one with a rw.</p>",
        "id": 192979238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586122318
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span> 8612ms    37.1%   tactic.mk_mapp\n...\n 3405ms    14.7%   tactic.mk_app\n...\n    5ms     0.0%   expr.app\n    3ms     0.0%   tactic.ring.cache.cs_app\n</pre></div>\n\n\n<p>the ones on the top are the lean builtins, the ones on the bottom are the hand rolled ones</p>",
        "id": 192979304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586122404
    },
    {
        "content": "<p>there is something seriously wrong with the lean internals here</p>",
        "id": 192979322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586122439
    },
    {
        "content": "<p>it's almost certainly calling typeclass inference, and that's responsible for the time spent, but I don't understand why the typeclass cache isn't working</p>",
        "id": 192979367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586122492
    },
    {
        "content": "<p>Actually, it might not be a bad idea to do something like that inside ring, that is, generalize the type of the expression before starting the proof proper</p>",
        "id": 192979432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586122575
    },
    {
        "content": "<p>that way those monstrous typeclass arguments are not copied everywhere, but rather are passed in via a <code>have</code></p>",
        "id": 192979443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586122613
    },
    {
        "content": "<p>Hey  Kevin,  with my computer it's faster with the polynomial ? It's normal ?  15 for the first and 11 for the second <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 192979872,
        "sender_full_name": "orlando",
        "timestamp": 1586123237
    },
    {
        "content": "<p>FWIW, on a Intel(R) Core(TM) i7-8550U CPU @ 1.80GHz, got 7 seconds for the first and 28 seconds for the second.</p>\n<p>Profile for the 2nd one:</p>\n<div class=\"codehilite\"><pre><span></span>elaboration: tactic execution took 28.9s\nnum. allocated objects:  7769\nnum. allocated closures: 10240\n28887ms   100.0%   _interaction._lambda_2\n28887ms   100.0%   scope_trace\n28887ms   100.0%   tactic.interactive.ring1._lambda_3\n28887ms   100.0%   tactic.interactive.ring1\n28887ms   100.0%   tactic.step\n28887ms   100.0%   tactic.istep\n28887ms   100.0%   tactic.interactive.ring\n28887ms   100.0%   _interaction\n28887ms   100.0%   interaction_monad_orelse\n28887ms   100.0%   tactic.istep._lambda_1\n28887ms   100.0%   tactic.interactive.ring._lambda_1\n28886ms   100.0%   tactic.ring.ring_m.run\n28886ms   100.0%   interaction_monad.monad._lambda_9\n28872ms    99.9%   tactic.ring.lift\n13373ms    46.3%   tactic.norm_num\n10911ms    37.8%   tactic.mk_mapp\n 9164ms    31.7%   tactic.ring.eval_add._main._lambda_2\n 7687ms    26.6%   tactic.ring.eval_pow._main._lambda_2\n 7154ms    24.8%   norm_num.eval_pow\n 5977ms    20.7%   norm_num.derive\n 5977ms    20.7%   tactic.ext_simplify_core\n 5861ms    20.3%   norm_num.derive._main._lambda_3\n 4157ms    14.4%   tactic.mk_app\n 1846ms     6.4%   expr.of_nat._lambda_1\n</pre></div>\n\n\n<p>Profile for the 1st:</p>\n<div class=\"codehilite\"><pre><span></span>elaboration: tactic execution took 7.45s\nnum. allocated objects:  7771\nnum. allocated closures: 10240\n 7445ms   100.0%   interaction_monad_orelse\n 7445ms   100.0%   tactic.interactive.ring._lambda_1\n 7445ms   100.0%   tactic.istep._lambda_1\n 7445ms   100.0%   _interaction\n 7445ms   100.0%   tactic.interactive.ring\n 7445ms   100.0%   tactic.istep\n 7445ms   100.0%   _interaction._lambda_2\n 7445ms   100.0%   tactic.step\n 7445ms   100.0%   scope_trace\n 7445ms   100.0%   tactic.interactive.ring1\n 7445ms   100.0%   tactic.interactive.ring1._lambda_3\n 7444ms   100.0%   interaction_monad.monad._lambda_9\n 7444ms   100.0%   tactic.ring.ring_m.run\n 7434ms    99.9%   tactic.ring.lift\n 3567ms    47.9%   tactic.norm_num\n 2348ms    31.5%   tactic.ring.eval_add._main._lambda_2\n 2147ms    28.8%   tactic.ring.eval_pow._main._lambda_2\n 2120ms    28.5%   tactic.mk_mapp\n 2050ms    27.5%   norm_num.eval_pow\n 1698ms    22.8%   tactic.ext_simplify_core\n 1698ms    22.8%   norm_num.derive\n 1593ms    21.4%   norm_num.derive._main._lambda_3\n 1440ms    19.3%   tactic.mk_app\n</pre></div>",
        "id": 192980805,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586124554
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/.60by.20ring.60.20is.20slow\" title=\"#narrow/stream/116395-maths/topic/.60by.20ring.60.20is.20slow\">I don't want to sound too repetitive,</a>, but you should use <code>ring_exp</code> here too <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193006130,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1586159748
    },
    {
        "content": "<p>I get approximately the same times as Kevin for <code>ring</code>, but 150ms and 500ms for <code>ring_exp</code>. I'm actually surprised that the difference is so large</p>",
        "id": 193006743,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1586160066
    },
    {
        "content": "<p>Being repetitive is very helpful for me -- I have to hear something several times before it sinks in. Does <code>ring_exp</code> not use <code>ring</code> then??</p>",
        "id": 193007925,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586160701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> you just shaved 10 seconds off a Codewars Kata I'm working on, which might move it from \"too slow to work on the site\" to \"killer question\" :-)</p>",
        "id": 193008302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586160925
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/ring.20is.20slow.20with.20polynomials/near/193007925\" title=\"#narrow/stream/116395-maths/topic/ring.20is.20slow.20with.20polynomials/near/193007925\">said</a>:</p>\n<blockquote>\n<p>Being repetitive is very helpful for me -- I have to hear something several times before it sinks in. Does <code>ring_exp</code> not use <code>ring</code> then??</p>\n</blockquote>\n<p>It doesn't! Basically <code>ring</code> only knows how to represent <code>+</code> and <code>*</code>, but can do so efficiently (using the Horner form), and <code>ring_exp</code> trades in the efficiency on simpler problems to also deal with <code>^</code></p>",
        "id": 193008811,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1586161206
    },
    {
        "content": "<p>I like \"trades in the efficiency\" together with \"runs much faster\".</p>",
        "id": 193009545,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586161691
    },
    {
        "content": "<p>If in practice <code>ring_exp</code> is most often faster on reasonable problems, shouldn't we rename <code>ring</code> to <code>ring_horner</code> and <code>ring_exp</code> to <code>ring</code>? <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 193009957,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1586161911
    },
    {
        "content": "<p>Reading assignment for student Kevin: <a href=\"https://lean-forward.github.io/ring_exp/paper.pdf\" title=\"https://lean-forward.github.io/ring_exp/paper.pdf\">https://lean-forward.github.io/ring_exp/paper.pdf</a></p>",
        "id": 193009959,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586161911
    },
    {
        "content": "<p>This looks like some implementation issue to me</p>",
        "id": 193010269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586162061
    },
    {
        "content": "<p>ring = ring_exp, right? By ext.</p>",
        "id": 193010281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586162070
    },
    {
        "content": "<p>So should Grégoire-Mahboubi be called \"proving equalities in a comm ring done wrong in coq\"? :P (sorry Assia, I love your paper!)</p>",
        "id": 193010537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586162231
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/ring.20is.20slow.20with.20polynomials/near/193010281\" title=\"#narrow/stream/116395-maths/topic/ring.20is.20slow.20with.20polynomials/near/193010281\">said</a>:</p>\n<blockquote>\n<p>ring = ring_exp, right? By ext.</p>\n</blockquote>\n<p>No, I don't think so. <code>ring</code> can't deal with <code>(a + b)^2</code>, whereas <code>ring_exp</code> can.</p>",
        "id": 193011403,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1586162661
    },
    {
        "content": "<p>I wouldn't say that <code>ring_exp</code> is always faster in practice: <code>linarith</code> uses <code>ring</code> internally, and linear expressions are exactly the simpler kind that <code>ring</code> is better at. The Horner form is optimal in theory (if you use the correct definition of \"optimal\")</p>",
        "id": 193012303,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1586163172
    },
    {
        "content": "<p>IIRC, there are some situations where <code>ring</code> is faster than <code>ring_exp</code>. Anne and I did some investigation when they were working on <code>ring_exp</code> and there was a performance regression when we just replaced <code>ring</code> entirely.</p>\n<p>(Yep, what Anne said!)</p>",
        "id": 193012327,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586163184
    },
    {
        "content": "<p>Of course implementation details in both can shift the performance either way for specific problems.</p>",
        "id": 193012448,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586163256
    },
    {
        "content": "<p>It's probably possible to backport some of the <code>ring_exp</code> optimizations to <code>ring</code>.</p>",
        "id": 193012524,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586163298
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/ring.20is.20slow.20with.20polynomials/near/193011403\" title=\"#narrow/stream/116395-maths/topic/ring.20is.20slow.20with.20polynomials/near/193011403\">said</a>:</p>\n<blockquote>\n<p><code>ring</code> can't deal with <code>(a + b)^2</code>, whereas <code>ring_exp</code> can.</p>\n</blockquote>\n<p>It can deal with that specific case, because it first rewrites <code>(a + b)^2</code> to <code>(a + b)*(a + b)</code>. You can replace the <code>2</code> with <code>n : ℕ</code> to get a real counterexample</p>",
        "id": 193012530,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1586163301
    },
    {
        "content": "<p>But what I'm hearing from all these questions about <code>ring</code> and polynomials is that there are still type class issues with polynomials. The inefficiency in <code>ring</code> is probably that it's repeating unnecessary searches, but these searches are slow, and that's the root issue.</p>",
        "id": 193012666,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1586163371
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/ring.20is.20slow.20with.20polynomials/near/193009959\" title=\"#narrow/stream/116395-maths/topic/ring.20is.20slow.20with.20polynomials/near/193009959\">said</a>:</p>\n<blockquote>\n<p>Reading assignment for student Kevin: <a href=\"https://lean-forward.github.io/ring_exp/paper.pdf\" title=\"https://lean-forward.github.io/ring_exp/paper.pdf\">https://lean-forward.github.io/ring_exp/paper.pdf</a></p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> typo in table of p3: \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mrow><mi>b</mi><mo>+</mo><mi>c</mi></mrow></msup><mo>=</mo><msup><mi>a</mi><mi>b</mi></msup><mo>+</mo><msup><mi>a</mi><mi>c</mi></msup></mrow><annotation encoding=\"application/x-tex\">a^{b+c}=a^b+a^c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">b</span><span class=\"mbin mtight\">+</span><span class=\"mord mathdefault mtight\">c</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.932438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">b</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">c</span></span></span></span></span></span></span></span></span></span></span>\"</p>",
        "id": 193012910,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586163521
    },
    {
        "content": "<p>section 4 you seem to say \"we tried random identities and <code>ring_exp</code> was slower\" -- but I'm trying identities that come up in practice and <code>ring_exp</code> is a lot quicker :-)</p>",
        "id": 193013273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586163719
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/ring.20is.20slow.20with.20polynomials/near/193012910\" title=\"#narrow/stream/116395-maths/topic/ring.20is.20slow.20with.20polynomials/near/193012910\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> typo in table of p3: \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mrow><mi>b</mi><mo>+</mo><mi>c</mi></mrow></msup><mo>=</mo><msup><mi>a</mi><mi>b</mi></msup><mo>+</mo><msup><mi>a</mi><mi>c</mi></msup></mrow><annotation encoding=\"application/x-tex\">a^{b+c}=a^b+a^c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">b</span><span class=\"mbin mtight\">+</span><span class=\"mord mathdefault mtight\">c</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.932438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">b</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">c</span></span></span></span></span></span></span></span></span></span></span>\"</p>\n</blockquote>\n<p>Well spotted! I already fixed it in the updated version of the paper, which should be available soon.</p>",
        "id": 193013633,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1586163932
    },
    {
        "content": "<p>Indeed, it's not the most informative comparison, but it's objective and can be explained in a few sentences when there is a 5 page limit, so I think I will have to live with it appearing a bit slower <span aria-label=\"slight smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"slight smile\">:slight_smile:</span></p>",
        "id": 193014179,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1586164283
    },
    {
        "content": "<p>To repeat: the reason <code>ring</code> is slow here has little to do with <code>ring</code>, it has to do with the lean functions that <code>ring</code> calls that are slow when they should not be. Yes, it is possible to make <code>ring</code> faster by avoiding these functions, but this essentially means that you aren't allowed to use the elaborator at all, you have to build a fully formed expr by hand if you want to get performance and that's ridiculous. I'll do it, ring is already 99% implemented like this and the remaning 1% of lean is causing the problem, but this really should be fixed at a lower level</p>",
        "id": 193025367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586171084
    },
    {
        "content": "<p>But Anne, you will have 6 pages for the final version, right? Maybe you can also show some examples from this thread.</p>",
        "id": 193027885,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1586172636
    },
    {
        "content": "<p>and <a href=\"#narrow/stream/116395-maths/topic/.60by.20ring.60.20is.20slow\" title=\"#narrow/stream/116395-maths/topic/.60by.20ring.60.20is.20slow\">this thread</a></p>",
        "id": 193027961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586172699
    },
    {
        "content": "<p>Yeah, I want to add a few more positive examples. But space is still pretty tight, since there are some places that the reviewers pointed out that they want more explanation. And also Mario's objection that the same optimizations can be applied to <code>ring</code>.</p>",
        "id": 193029286,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1586173525
    },
    {
        "content": "<p>Okay, I did a bunch of optimization (which is to say, <code>mk_app</code> considered harmful) and managed to get it down to 11 s. There are a lot of places that implicitly assume that calling <code>mk_app</code> is not that bad, so it's not easy going and the result looks horrible, but that's what you get for trying to circumvent lean internals. I don't think this is likely to get much better until I rewrite <code>tactic.norm_num</code>.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">compilation</span> <span class=\"n\">took</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">97</span><span class=\"n\">ms</span>\n<span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">compilation</span> <span class=\"n\">took</span> <span class=\"mi\">4</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"n\">ms</span>\n<span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">took</span> <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">59</span><span class=\"n\">s</span>\n<span class=\"n\">num</span><span class=\"bp\">.</span> <span class=\"n\">allocated</span> <span class=\"n\">objects</span><span class=\"o\">:</span>  <span class=\"mi\">7909</span>\n<span class=\"n\">num</span><span class=\"bp\">.</span> <span class=\"n\">allocated</span> <span class=\"n\">closures</span><span class=\"o\">:</span> <span class=\"mi\">11047</span>\n <span class=\"mi\">3594</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">ring1</span>\n <span class=\"mi\">3594</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">scope_trace</span>\n <span class=\"mi\">3594</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">ring1</span><span class=\"bp\">._</span><span class=\"n\">lambda_3</span>\n <span class=\"mi\">3594</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">step</span>\n <span class=\"mi\">3594</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"bp\">_</span><span class=\"n\">interaction</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n <span class=\"mi\">3594</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">istep</span>\n <span class=\"mi\">3594</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n <span class=\"mi\">3594</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"bp\">_</span><span class=\"n\">interaction</span>\n <span class=\"mi\">3594</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">interaction_monad_orelse</span>\n <span class=\"mi\">3594</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">istep</span><span class=\"bp\">._</span><span class=\"n\">lambda_1</span>\n <span class=\"mi\">3594</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">._</span><span class=\"n\">lambda_1</span>\n <span class=\"mi\">3593</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">ring_m</span><span class=\"bp\">.</span><span class=\"n\">run</span>\n <span class=\"mi\">3590</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">ring_m</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"bp\">._</span><span class=\"n\">lambda_1</span>\n <span class=\"mi\">3590</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"err\">%</span>   <span class=\"n\">interaction_monad</span><span class=\"bp\">.</span><span class=\"n\">monad</span><span class=\"bp\">._</span><span class=\"n\">lambda_9</span>\n <span class=\"mi\">3590</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">using_new_ref</span>\n <span class=\"mi\">2770</span><span class=\"n\">ms</span>    <span class=\"mi\">77</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n <span class=\"mi\">1559</span><span class=\"n\">ms</span>    <span class=\"mi\">43</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n <span class=\"mi\">1519</span><span class=\"n\">ms</span>    <span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_pow</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n <span class=\"mi\">1517</span><span class=\"n\">ms</span>    <span class=\"mi\">42</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"err\">%</span>   <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">eval_pow</span>\n <span class=\"mi\">1240</span><span class=\"n\">ms</span>    <span class=\"mi\">34</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ext_simplify_core</span>\n <span class=\"mi\">1240</span><span class=\"n\">ms</span>    <span class=\"mi\">34</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"err\">%</span>   <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">derive</span>\n <span class=\"mi\">1166</span><span class=\"n\">ms</span>    <span class=\"mi\">32</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"err\">%</span>   <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">derive</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_3</span>\n  <span class=\"mi\">603</span><span class=\"n\">ms</span>    <span class=\"mi\">16</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span>\n  <span class=\"mi\">202</span><span class=\"n\">ms</span>     <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_21</span>\n  <span class=\"mi\">141</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"err\">%</span>   <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span><span class=\"bp\">._</span><span class=\"n\">lambda_1</span>\n  <span class=\"mi\">107</span><span class=\"n\">ms</span>     <span class=\"mi\">3</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_20</span>\n   <span class=\"mi\">85</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_mapp</span>\n   <span class=\"mi\">78</span><span class=\"n\">ms</span>     <span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_pow</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_19</span>\n   <span class=\"mi\">42</span><span class=\"n\">ms</span>     <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_mul</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n   <span class=\"mi\">28</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_atom</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n   <span class=\"mi\">18</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_14</span>\n   <span class=\"mi\">16</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"err\">%</span>   <span class=\"n\">state_t</span><span class=\"bp\">.</span><span class=\"n\">monad</span><span class=\"bp\">._</span><span class=\"n\">lambda_19</span>\n   <span class=\"mi\">15</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"err\">%</span>   <span class=\"n\">reader_t</span><span class=\"bp\">.</span><span class=\"n\">monad</span><span class=\"bp\">._</span><span class=\"n\">lambda_19</span>\n   <span class=\"mi\">15</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"kn\">eval</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_42</span>\n   <span class=\"mi\">12</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"err\">%</span>   <span class=\"n\">char</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span>\n    <span class=\"mi\">7</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"err\">%</span>   <span class=\"n\">interaction_monad</span><span class=\"bp\">.</span><span class=\"n\">failed</span>\n    <span class=\"mi\">6</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">failed</span>\n    <span class=\"mi\">6</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_13</span>\n    <span class=\"mi\">4</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">derive</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n    <span class=\"mi\">4</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">horner_expr</span><span class=\"bp\">.</span><span class=\"n\">xadd&#39;</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_23</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_instance</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">ring_m</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_22</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">decidable</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"kn\">eval</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_43</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_4</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">eval_div_ext</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_atom</span><span class=\"bp\">._</span><span class=\"n\">lambda_3</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_6</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">interaction_monad</span><span class=\"bp\">.</span><span class=\"n\">fail</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"kn\">eval</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_15</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">state_t</span><span class=\"bp\">.</span><span class=\"n\">monad</span><span class=\"bp\">._</span><span class=\"n\">lambda_20</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">empty</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">to_pos_nat</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">decidable</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"kn\">eval</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_29</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">to_nat</span>\n<span class=\"n\">elaboration</span><span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">execution</span> <span class=\"n\">took</span> <span class=\"mi\">11</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"n\">s</span>\n<span class=\"n\">num</span><span class=\"bp\">.</span> <span class=\"n\">allocated</span> <span class=\"n\">objects</span><span class=\"o\">:</span>  <span class=\"mi\">7909</span>\n<span class=\"n\">num</span><span class=\"bp\">.</span> <span class=\"n\">allocated</span> <span class=\"n\">closures</span><span class=\"o\">:</span> <span class=\"mi\">11047</span>\n<span class=\"mi\">11461</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">._</span><span class=\"n\">lambda_1</span>\n<span class=\"mi\">11461</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">istep</span><span class=\"bp\">._</span><span class=\"n\">lambda_1</span>\n<span class=\"mi\">11461</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">interaction_monad_orelse</span>\n<span class=\"mi\">11461</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"bp\">_</span><span class=\"n\">interaction</span>\n<span class=\"mi\">11461</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n<span class=\"mi\">11461</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">istep</span>\n<span class=\"mi\">11461</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"bp\">_</span><span class=\"n\">interaction</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n<span class=\"mi\">11461</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">step</span>\n<span class=\"mi\">11461</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">ring1</span>\n<span class=\"mi\">11461</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">scope_trace</span>\n<span class=\"mi\">11461</span><span class=\"n\">ms</span>   <span class=\"mi\">100</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">ring1</span><span class=\"bp\">._</span><span class=\"n\">lambda_3</span>\n<span class=\"mi\">11453</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">ring_m</span><span class=\"bp\">.</span><span class=\"n\">run</span><span class=\"bp\">._</span><span class=\"n\">lambda_1</span>\n<span class=\"mi\">11453</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"err\">%</span>   <span class=\"n\">interaction_monad</span><span class=\"bp\">.</span><span class=\"n\">monad</span><span class=\"bp\">._</span><span class=\"n\">lambda_9</span>\n<span class=\"mi\">11453</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">using_new_ref</span>\n<span class=\"mi\">11453</span><span class=\"n\">ms</span>    <span class=\"mi\">99</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">ring_m</span><span class=\"bp\">.</span><span class=\"n\">run</span>\n <span class=\"mi\">9524</span><span class=\"n\">ms</span>    <span class=\"mi\">83</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n <span class=\"mi\">5637</span><span class=\"n\">ms</span>    <span class=\"mi\">49</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n <span class=\"mi\">5253</span><span class=\"n\">ms</span>    <span class=\"mi\">45</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_pow</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n <span class=\"mi\">5251</span><span class=\"n\">ms</span>    <span class=\"mi\">45</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"err\">%</span>   <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">eval_pow</span>\n <span class=\"mi\">4390</span><span class=\"n\">ms</span>    <span class=\"mi\">38</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ext_simplify_core</span>\n <span class=\"mi\">4390</span><span class=\"n\">ms</span>    <span class=\"mi\">38</span><span class=\"bp\">.</span><span class=\"mi\">3</span><span class=\"err\">%</span>   <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">derive</span>\n <span class=\"mi\">4308</span><span class=\"n\">ms</span>    <span class=\"mi\">37</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"err\">%</span>   <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">derive</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_3</span>\n <span class=\"mi\">1710</span><span class=\"n\">ms</span>    <span class=\"mi\">14</span><span class=\"bp\">.</span><span class=\"mi\">9</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span>\n  <span class=\"mi\">180</span><span class=\"n\">ms</span>     <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_mul</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n  <span class=\"mi\">156</span><span class=\"n\">ms</span>     <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">4</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_21</span>\n  <span class=\"mi\">115</span><span class=\"n\">ms</span>     <span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span><span class=\"bp\">._</span><span class=\"n\">lambda_1</span>\n   <span class=\"mi\">90</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">8</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_20</span>\n   <span class=\"mi\">66</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">6</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_pow</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_19</span>\n   <span class=\"mi\">62</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">mk_mapp</span>\n   <span class=\"mi\">21</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_atom</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n   <span class=\"mi\">18</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_14</span>\n   <span class=\"mi\">17</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"kn\">eval</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_42</span>\n    <span class=\"mi\">8</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">char</span><span class=\"bp\">.</span><span class=\"n\">of_nat</span>\n    <span class=\"mi\">8</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">exact</span>\n    <span class=\"mi\">8</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">state_t</span><span class=\"bp\">.</span><span class=\"n\">monad</span><span class=\"bp\">._</span><span class=\"n\">lambda_19</span>\n    <span class=\"mi\">7</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">reader_t</span><span class=\"bp\">.</span><span class=\"n\">monad</span><span class=\"bp\">._</span><span class=\"n\">lambda_19</span>\n    <span class=\"mi\">7</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"err\">%</span>   <span class=\"n\">interaction_monad</span><span class=\"bp\">.</span><span class=\"n\">failed</span>\n    <span class=\"mi\">5</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">failed</span>\n    <span class=\"mi\">5</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_13</span>\n    <span class=\"mi\">5</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">app</span>\n    <span class=\"mi\">3</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">eval_div_ext</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">expr</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">horner_expr</span><span class=\"bp\">.</span><span class=\"n\">xadd&#39;</span>\n    <span class=\"mi\">2</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">ring_m</span><span class=\"bp\">.</span><span class=\"n\">mk_app</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">binary_rec</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_pow</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_20</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">interaction_monad</span><span class=\"bp\">.</span><span class=\"n\">monad</span><span class=\"bp\">._</span><span class=\"n\">lambda_4</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_add</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_22</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">bodd</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">string</span><span class=\"bp\">.</span><span class=\"n\">push</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">eval_ineq</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_pow</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_23</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_pow</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_22</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">eval_pow</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">state_t</span><span class=\"bp\">.</span><span class=\"n\">monad</span><span class=\"bp\">._</span><span class=\"n\">lambda_20</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">norm_num</span><span class=\"bp\">.</span><span class=\"n\">derive</span><span class=\"bp\">._</span><span class=\"n\">main</span><span class=\"bp\">._</span><span class=\"n\">lambda_2</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">decidable_lt</span>\n    <span class=\"mi\">1</span><span class=\"n\">ms</span>     <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">0</span><span class=\"err\">%</span>   <span class=\"n\">reader_t</span><span class=\"bp\">.</span><span class=\"n\">monad</span><span class=\"bp\">._</span><span class=\"n\">lambda_20</span>\n</pre></div>",
        "id": 193049392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586183208
    },
    {
        "content": "<p>(as always, I am frustrated because I know that this job can be done in &lt;1ms if you consider what literally has to happen to produce the term; everything beyond that is lean/vm bloat)</p>",
        "id": 193050030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586183439
    },
    {
        "content": "<p>Why don't you hack^W develop Lean, instead? Would that be much harder?</p>",
        "id": 193050222,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586183516
    },
    {
        "content": "<p>I don't want to touch typeclass inference with a ten foot pole</p>",
        "id": 193050583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586183658
    },
    {
        "content": "<p>maybe the issue in <code>mk_app</code> has a simple fix, maybe not</p>",
        "id": 193050654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586183684
    }
]