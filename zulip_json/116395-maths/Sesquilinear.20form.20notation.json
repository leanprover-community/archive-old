[
    {
        "content": "<p>Hi,</p>\n<p>Why is the notation used for inner products not available for general sesquilinear forms? There's good notions of these that apply for fields that aren't R or C, but the approach in linear_algebra.sesquilinear_form seems a little tricky - there's no bundled form?</p>",
        "id": 286833723,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655754487
    },
    {
        "content": "<p>The only notation for inner products that is defined globally is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`⟫</span><span class=\"n\">_ℝ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n<span class=\"kd\">notation</span> <span class=\"bp\">`⟪`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"n\">y</span><span class=\"bp\">`⟫</span><span class=\"n\">_ℂ</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">inner</span> <span class=\"n\">ℂ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>and wherever we use the plain <code>⟪x, y⟫</code> notation, it's actually defined locally. So there's nothing stopping you from using it for sesquilinear forms.</p>",
        "id": 286834693,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1655755233
    },
    {
        "content": "<p>I think this question might be about associating a canonical sesquilinear/bilinear/quadratic form (but not necessarily an inner product) with a type. Is that accurate, <span class=\"user-mention\" data-user-id=\"330967\">@Wrenna Robson</span>?</p>",
        "id": 286835716,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655756031
    },
    {
        "content": "<p>Or are you only interested in the case where the sesquilinear form really is in some weakened sense an <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_product_space\">docs#inner_product_space</a>?</p>",
        "id": 286835803,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655756085
    },
    {
        "content": "<p>Right now the</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">norm_sq_eq_inner</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"bp\">⇑</span><span class=\"n\">is_R_or_C.re</span> <span class=\"o\">(</span><span class=\"n\">has_inner.inner</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>axiom makes it sort of pointless to talk about fields other than R or C</p>",
        "id": 286836065,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655756300
    },
    {
        "content": "<p>Maybe replacing that with the  stronger</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">norm_sq_eq_inner</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">),</span> <span class=\"n\">algebra_map</span> <span class=\"n\">ℝ</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">∥</span><span class=\"n\">x</span><span class=\"bp\">∥</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">has_inner.inner</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>would help</p>",
        "id": 286836126,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655756389
    },
    {
        "content": "<p>I think essentially I want access to the notation. The context is that in coding theory one talks about the dual space as being the space made up of the orthogonal vectors, and there's a clear idea that the \"dot product\" is a meaningful notion there. But it is just the bilinear form, it isn't an inner product.</p>",
        "id": 286847365,
        "sender_full_name": "Wrenna Robson",
        "timestamp": 1655767226
    }
]