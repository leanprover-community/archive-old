[
    {
        "content": "<p>Is there a notion in mathlib that a(x+y+z+...)=ax+ay+az+...?</p>",
        "id": 163033712,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554922056
    },
    {
        "content": "<p>that's <code>repeat {mul_add}</code></p>",
        "id": 163033804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554922120
    },
    {
        "content": "<p>thanks</p>",
        "id": 163033846,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554922150
    },
    {
        "content": "<p>It's got some official name too, something like <code>left_distrib</code> or <code>right_distrib</code>, but <code>mul_add</code> is a lot easier to remember ;-)</p>",
        "id": 163034397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554922555
    },
    {
        "content": "<p>Hm... not having much success with it.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">open</span> <span class=\"n\">real</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">factor_two</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">apply</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"c1\">-- yay</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">factor_three</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">z</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">mul_add</span><span class=\"o\">},</span> <span class=\"c1\">-- ?</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 163036876,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554924032
    },
    {
        "content": "<blockquote>\n<p><code>tactic failed, there are unsolved goals</code><br>\n<code>state:</code><br>\n<code>a x y z : ℝ</code><br>\n<code>⊢ a * (x + y + z) = a * x + a * y + a * z</code></p>\n</blockquote>",
        "id": 163036978,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554924092
    },
    {
        "content": "<p>rewrite, don't apply</p>",
        "id": 163037032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554924117
    },
    {
        "content": "<p>apply only works when the goal is exactly the target of mul_add</p>",
        "id": 163037097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554924139
    },
    {
        "content": "<p>aha, that's better</p>",
        "id": 163037103,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554924146
    },
    {
        "content": "<p>sorry, my bad, trying to do too many things at once.</p>",
        "id": 163037120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554924167
    },
    {
        "content": "<p>no worries! Still much faster than me monkey-typing here.</p>",
        "id": 163037245,
        "sender_full_name": "Joseph Corneli",
        "timestamp": 1554924248
    }
]