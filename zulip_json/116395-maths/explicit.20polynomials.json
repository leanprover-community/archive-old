[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.integral_closure</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.localization</span> <span class=\"c1\">-- for fraction_ring</span>\n\n<span class=\"c1\">-- Note: This says basically that we can have `(↑d⁻¹:A)`.</span>\n<span class=\"kd\">class</span> <span class=\"n\">equal_char_zero</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">char_zero</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">has_lift</span><span class=\"o\">:</span> <span class=\"n\">has_lift</span> <span class=\"n\">ℚ</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">cast_injective'</span><span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">div_endo_linear_map</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">):</span> <span class=\"n\">K</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">map_add'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">mul_add</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">map_smul'</span> <span class=\"o\">:=</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">mul_smul_comm</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">d</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">div_endo_linear_map.is_integral</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">d</span><span class=\"o\">:</span><span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hd</span><span class=\"o\">:</span> <span class=\"n\">d</span><span class=\"bp\">≠</span><span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"n\">y</span><span class=\"o\">:(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">A</span><span class=\"o\">)}</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span><span class=\"n\">is_integral</span> <span class=\"n\">A</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">equal_char_zero</span> <span class=\"n\">A</span><span class=\"o\">]:</span>\n<span class=\"n\">is_integral</span> <span class=\"n\">A</span> <span class=\"o\">((</span><span class=\"n\">div_endo_linear_map</span> <span class=\"o\">(</span><span class=\"n\">fraction_ring</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">p</span> <span class=\"n\">hp</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  Steps:</span>\n<span class=\"cm\">  1) If `p = a_n X^n + ... + a_0`, then create the polynomial</span>\n<span class=\"cm\">     `q = (a_n/d^n) X^n + ... + (a_0/d^0)`</span>\n<span class=\"cm\">  2) since `p(y) = 0`, we should get that `q(d*y) = 0`</span>\n<span class=\"cm\">  3) `q' = d^n*q` is monic with `q'(d*y) = 0`.</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I looked through the file defining polynomials but I don't fully understand them. Could somebody give me a hint how to construct explicit polynomials (i.e. by modifying each coefficient of another polynomial).</p>\n<p>Above I try to prove that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> is integral over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> then so is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">dy</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> (where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> is essentially a unit in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span>). The way of doing that is to explicitly construct an annihilating polynomial. I think I could work out step <code>2)</code> and <code>3)</code> once I got step <code>1)</code>.</p>\n<p>Thanks for the help!</p>",
        "id": 238990209,
        "sender_full_name": "Jon Eugster",
        "timestamp": 1621182364
    },
    {
        "content": "<p>In this case, could you use <code>polynomial.comp</code>, where you compose <code>p</code> with (1/d) * X?</p>",
        "id": 238991740,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1621184019
    },
    {
        "content": "<p>that'd also need a lemma explaining how the leading coeff changes with <code>.comp</code>, which I don't think exists</p>",
        "id": 238992752,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1621184968
    }
]