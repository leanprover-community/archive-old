[
    {
        "content": "<p>I noticed that the definition of a group in Lean was one more axiom than it could be</p>",
        "id": 125808670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524893982
    },
    {
        "content": "<p>you can prove <code>mul_one</code> from the other axioms</p>",
        "id": 125808710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894005
    },
    {
        "content": "<p>This may well have been talked about before</p>",
        "id": 125808713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894011
    },
    {
        "content": "<p>But I thought I'd write a blog post on this</p>",
        "id": 125808714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894021
    },
    {
        "content": "<p>and I wanted to talk about the proof of <code>mul_one</code> (which goes via <code>mul_left_cancel</code>)</p>",
        "id": 125808715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894052
    },
    {
        "content": "<p>for Lean-groups-without-<code>mul_one</code></p>",
        "id": 125808719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894067
    },
    {
        "content": "<p>But I could not make the arguments look beautiful</p>",
        "id": 125808721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894087
    },
    {
        "content": "<p>This is kind of OK</p>",
        "id": 125808723,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894107
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">gripe</span><span class=\"bp\">.</span><span class=\"n\">mul_left_cancel</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_inv</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">gripe</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">Habac</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"k\">calc</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">gripe</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inv</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">Habac</span>\n<span class=\"c1\">-- ... = c : by simp only [mul_assoc,one_mul,mul_left_inv] -- fails</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">gripe</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">gripe</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inv</span> <span class=\"n\">a</span><span class=\"o\">]</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">one_mul</span> <span class=\"bp\">_</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125808724,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894120
    },
    {
        "content": "<p>although all this <code>has_mul</code> stuff is both really cluttering things up and not actually telling us the one useful thing about it, which is that it is a map alpha -&gt; alpha -&gt; alpha</p>",
        "id": 125808776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894159
    },
    {
        "content": "<p>I made a type for that</p>",
        "id": 125808784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894188
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">gripe</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_inv</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125808785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894207
    },
    {
        "content": "<p>But got a bit sick about still having to say we have a <code>has_mul</code>. On the other hand I really want the notation.</p>",
        "id": 125808828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894267
    },
    {
        "content": "<p>can you use <code>extends</code> instead of those extra parameters to the class? I've never used it myself but I see it in the algebraic classes</p>",
        "id": 125808836,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524894310
    },
    {
        "content": "<p>Other complains about that calc proof is that I need to give too many hint, I seem to have to mention the type's name (gripe) randomly and I can only sometimes get away with <code>_</code>s, and why do I even have to put them at all?</p>",
        "id": 125808837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894313
    },
    {
        "content": "<p>I tried without the structure</p>",
        "id": 125808843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894340
    },
    {
        "content": "<blockquote>\n<p>This may well have been talked about before</p>\n</blockquote>\n<p><a href=\"https://gitter.im/leanprover_public/Lobby?at=59fd723d976e63937e268f50\" target=\"_blank\" title=\"https://gitter.im/leanprover_public/Lobby?at=59fd723d976e63937e268f50\">https://gitter.im/leanprover_public/Lobby?at=59fd723d976e63937e268f50</a></p>",
        "id": 125808845,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524894355
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mul_left_cancel&#39;</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_inv</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">Habac</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"k\">calc</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_left_inv</span><span class=\"o\">]</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"c1\">-- why not just mul_assoc?</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">Habac</span>\n<span class=\"c1\">-- ... = c : by simp only [mul_assoc,one_mul,mul_left_inv] -- fails</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_left_inv</span><span class=\"o\">]</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">one_mul</span> <span class=\"bp\">_</span> <span class=\"c1\">-- why the _ ?</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125808888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894392
    },
    {
        "content": "<p>and that seemed to go better, but then</p>",
        "id": 125808938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894505
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">mul_one&#39;</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_inv</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">mul_left_cancel&#39;</span> <span class=\"n\">mul_assoc</span> <span class=\"n\">one_mul</span> <span class=\"n\">mul_left_inv</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"c1\">-- aargh</span>\n <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">mul_assoc</span><span class=\"o\">,</span><span class=\"n\">mul_left_inv</span><span class=\"o\">,</span><span class=\"n\">one_mul</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125808940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894528
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> edit &gt; change title</p>",
        "id": 125808942,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524894537
    },
    {
        "content": "<p>Oh, I guess you are complaining about <code>has_mul</code> being opaque to the reader wherever it appears, not that you had to write it twice?</p>",
        "id": 125808943,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524894538
    },
    {
        "content": "<p>I couldn't apply the theorem I proved without carrying around all the axioms.</p>",
        "id": 125808948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894551
    },
    {
        "content": "<p>wrong thread</p>",
        "id": 125808949,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524894560
    },
    {
        "content": "<p>I want to write a blog post which looks good and works in Lean and proves clearly that one of the axioms of a group follows from the others</p>",
        "id": 125808952,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894579
    },
    {
        "content": "<p>god</p>",
        "id": 125808953,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524894582
    },
    {
        "content": "<p>but I really want the kids to understand that they can also do some of their group theory example sheets in Lean</p>",
        "id": 125808991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894603
    },
    {
        "content": "<p>whatever</p>",
        "id": 125808995,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524894609
    },
    {
        "content": "<p>How do you feel about using <code>variables</code> instead?</p>",
        "id": 125808998,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524894623
    },
    {
        "content": "<p>can I move this?</p>",
        "id": 125808999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110524\">@Scott Morrison</span> sorry, had to move your messages as well; could you move your messages back to \"notations in category theory\"?</p>",
        "id": 125809007,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524894684
    },
    {
        "content": "<p>Sorry</p>",
        "id": 125809008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894697
    },
    {
        "content": "<p>The stupidity of all the has_one has_mul stuff</p>",
        "id": 125809010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894720
    },
    {
        "content": "<p>is that these typeclasses have notation attached to them</p>",
        "id": 125809049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894728
    },
    {
        "content": "<p>and you want to use the notation</p>",
        "id": 125809050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894733
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`*`</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">one</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"n\">a</span> <span class=\"bp\">`⁻¹`</span> <span class=\"o\">:=</span> <span class=\"n\">inv</span> <span class=\"n\">a</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_left_cancel&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 125809051,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524894735
    },
    {
        "content": "<p>Maybe instead of local notation I can use instances</p>",
        "id": 125809053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524894771
    },
    {
        "content": "<p>oh, I forgot <code>variables</code> don't get along well with tactics</p>",
        "id": 125809250,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524895227
    },
    {
        "content": "<p>I am just going to bite the bullet and implement it in 5 different ways and see which one is best</p>",
        "id": 125823314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524929803
    },
    {
        "content": "<p><code>class has_group_notation (G : Type) extends has_mul G, has_one G, has_inv G</code></p>",
        "id": 125823316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524929821
    },
    {
        "content": "<p>Does that class exist <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> ?</p>",
        "id": 125823322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524929832
    },
    {
        "content": "<p>It seems to come with free and painless type class inference</p>",
        "id": 125823328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524929866
    },
    {
        "content": "<p>I had not appreciated how that barrage of classes in <code>core.lean</code> was actually just a barrage of notation. Each typeclass corresponds to precisely one piece of notation. I had not realised this before!</p>",
        "id": 125823374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524929985
    },
    {
        "content": "<p>I don't really understand notation and don't use any in my schemes work.</p>",
        "id": 125823419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524930010
    },
    {
        "content": "<p>actually I think I suddenly understand it a whole lot better</p>",
        "id": 125823422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524930040
    },
    {
        "content": "<p>my class corresponds to a finite set of notations.</p>",
        "id": 125823427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524930080
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">group&#39;</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_group_notation</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125823661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524930607
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span></p>",
        "id": 125823664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524930610
    },
    {
        "content": "<p>That's the way to get rid of all that continually carrying around <code>[has_add]</code></p>",
        "id": 125823665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524930633
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">group&#39;</span><span class=\"bp\">.</span><span class=\"n\">mul_left_cancel</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group&#39;</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 125823670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524930669
    },
    {
        "content": "<p>This thread is about making the proof that one of the axioms of a group as defined by Lean follows from all of the others</p>",
        "id": 125823671,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524930712
    },
    {
        "content": "<p>look as nice and uncluttered as possible</p>",
        "id": 125823711,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524930729
    },
    {
        "content": "<p>The strat is : first prove <code>mul_left_cancel</code> (without using <code>mul_one</code> of course), and then deduce <code>mul_one</code>. I know there are other strategies but that's the strategy I'd like to showcase in Lean</p>",
        "id": 125823727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524930794
    },
    {
        "content": "<p>so I can show the undergraduates one way of revising for their upcoming group theory exam</p>",
        "id": 125823728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524930815
    },
    {
        "content": "<p>I want to show them that using Lean to do abstract basic chase stuff around stuff in group theory is really easy in Lean</p>",
        "id": 125823743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524930842
    },
    {
        "content": "<p>I'll blog about it but I need to get it as nice looking as possible first</p>",
        "id": 125823771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524930855
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/2adf2b42a9ea23dabc2eb26a1a4b20fb\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/2adf2b42a9ea23dabc2eb26a1a4b20fb\">https://gist.github.com/kbuzzard/2adf2b42a9ea23dabc2eb26a1a4b20fb</a></p>",
        "id": 125824936,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524933768
    },
    {
        "content": "<p>My efforts using classes</p>",
        "id": 125824937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524933773
    },
    {
        "content": "<p>I had to keep writing the class name</p>",
        "id": 125824938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524933781
    },
    {
        "content": "<p>and the calc proof needed a lot of blanks</p>",
        "id": 125824943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524933791
    },
    {
        "content": "<p>How could this be improved?</p>",
        "id": 125824944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524933816
    },
    {
        "content": "<p>I am going to try other ways of setting this up to see pros and cons</p>",
        "id": 125824984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524933858
    },
    {
        "content": "<p>Change</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 125824987,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524933878
    },
    {
        "content": "<p>Do you think that's right?</p>",
        "id": 125825665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935551
    },
    {
        "content": "<p>I changed it for the constants example</p>",
        "id": 125825667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935569
    },
    {
        "content": "<p>and my tactic proof got worse</p>",
        "id": 125825668,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935579
    },
    {
        "content": "<p>if you change it then you don't need to put underscores</p>",
        "id": 125825669,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524935582
    },
    {
        "content": "<p>I'll show you you're wrong</p>",
        "id": 125825674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935591
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/group_axioms_constants.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/group_axioms_constants.lean\">https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/group_axioms_constants.lean</a></p>",
        "id": 125825716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935646
    },
    {
        "content": "<p>But maybe you can fix it :-)</p>",
        "id": 125825718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935652
    },
    {
        "content": "<p>there is a point in tactic mode where I needed underscores :-(</p>",
        "id": 125825720,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935688
    },
    {
        "content": "<p>where?</p>",
        "id": 125825723,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524935703
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/group_axioms_class.lean\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/group_axioms_class.lean\">https://github.com/kbuzzard/xena/blob/master/canonical_isomorphism/group_axioms_class.lean</a></p>",
        "id": 125825729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935716
    },
    {
        "content": "<p>not there</p>",
        "id": 125825730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935717
    },
    {
        "content": "<p>so where am I wrong?</p>",
        "id": 125825732,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524935731
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/xena/blob/48ce83d8bc9782a08ee852d126e784f696086846/canonical_isomorphism/group_axioms_constants.lean#L48\" target=\"_blank\" title=\"https://github.com/kbuzzard/xena/blob/48ce83d8bc9782a08ee852d126e784f696086846/canonical_isomorphism/group_axioms_constants.lean#L48\">https://github.com/kbuzzard/xena/blob/48ce83d8bc9782a08ee852d126e784f696086846/canonical_isomorphism/group_axioms_constants.lean#L48</a></p>",
        "id": 125825733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935733
    },
    {
        "content": "<p>there</p>",
        "id": 125825734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935735
    },
    {
        "content": "<p>In the calc proof, if you just begin every justification with <code>by rw</code>, you can make it quite uniform (at least in this case)</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">exact</span> <span class=\"k\">calc</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">group&#39;</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">group&#39;</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inv</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">group&#39;</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">Habac</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">group&#39;</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">group&#39;</span><span class=\"bp\">.</span><span class=\"n\">mul_left_inv</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>             <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">group&#39;</span><span class=\"bp\">.</span><span class=\"n\">one_mul</span>\n</pre></div>",
        "id": 125825775,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524935791
    },
    {
        "content": "<p>Change</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mul_left_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mul_left_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 125825776,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524935798
    },
    {
        "content": "<p>do you feel that this change is actually justified rather than it being an attempt to sort out a problem?</p>",
        "id": 125825781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935840
    },
    {
        "content": "<p>yes, because <code>a</code> could not be infered from the final type <code>b = c</code></p>",
        "id": 125825782,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524935856
    },
    {
        "content": "<p>yes</p>",
        "id": 125825783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935866
    },
    {
        "content": "<p>I wondered if that was a reasonable justification for the change</p>",
        "id": 125825784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935874
    },
    {
        "content": "<p>It can be inferred from the hypothesis though.</p>",
        "id": 125825823,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524935904
    },
    {
        "content": "<p>exactly</p>",
        "id": 125825824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935911
    },
    {
        "content": "<p>well if you don't want to change it you can state the hypothesis explicitly using <code>have</code></p>",
        "id": 125825825,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524935922
    },
    {
        "content": "<blockquote>\n<p>... = (a⁻¹ * a) * b : by rw [mul_left_inv] -- why does that line even work? I believe it should fail. Is it a bug?</p>\n</blockquote>\n<p>I was puzzled by this too up until quite recently. The reason it works is that <code>rw</code> does not rewrite the left hand side to the right hand side as one might think. Rather, it rewrites the desired equality <code>1 * b = (a⁻¹ * a) * b</code> to whatever it becomes after the rewrite, and that rewrite might occur on either side.</p>",
        "id": 125825826,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524935925
    },
    {
        "content": "<p>so Kenny based on your logic what are the forms of the other axioms that I should be using?</p>",
        "id": 125825827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935926
    },
    {
        "content": "<p>Then because the rewritten goal is of the form <code>a = a</code>, it gets solved by <code>rfl</code> automatically</p>",
        "id": 125825833,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524935962
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> maybe don't make <code>a</code> explicit afterall, lol</p>",
        "id": 125825834,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524935966
    },
    {
        "content": "<p>:-)</p>",
        "id": 125825835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524935979
    },
    {
        "content": "<p>I don't quite know what I am looking for here. I guess what is going on is that different conventions produce different results which may or may not have slight annoyances</p>",
        "id": 125825887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936078
    },
    {
        "content": "<p>Also if you use <code>by rw</code> on every line of the calc proof, then it doesn't matter whether you make the arguments of the axioms explicit or not</p>",
        "id": 125825888,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524936093
    },
    {
        "content": "<p>Kenny in none of the standard typeclasses do I see variables in axioms being introduced with <code>{}</code>. I am imagining there is a good reason for this</p>",
        "id": 125825980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936297
    },
    {
        "content": "<p>Letting them all be <code>{}</code> announces that you're 100 percent convinced that unification will save you</p>",
        "id": 125825987,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936328
    },
    {
        "content": "<p>well they have interface like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mul_assoc</span> <span class=\"o\">[</span><span class=\"n\">semigroup</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">semigroup</span><span class=\"bp\">.</span><span class=\"n\">mul_assoc</span>\n</pre></div>",
        "id": 125825988,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524936332
    },
    {
        "content": "<p>but letting them all be <code>()</code> does not mean you're giving up home</p>",
        "id": 125825989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936339
    },
    {
        "content": "<p>oh wait</p>",
        "id": 125825990,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524936341
    },
    {
        "content": "<p>because other things might fill in the gaps later</p>",
        "id": 125825991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936350
    },
    {
        "content": "<p>right, you still need <code>_</code> for <code>mul_assoc</code> lol</p>",
        "id": 125825992,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524936353
    },
    {
        "content": "<p>so maybe change back to <code>()</code> and use Reid's approach</p>",
        "id": 125826031,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524936371
    },
    {
        "content": "<p>Sometimes I did</p>",
        "id": 125826032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936371
    },
    {
        "content": "<p>sometimes I didn't</p>",
        "id": 125826033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936376
    },
    {
        "content": "<p>Oh I make the interface!</p>",
        "id": 125826040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936399
    },
    {
        "content": "<p>I'm saying, the interface in the library still uses explicit variables</p>",
        "id": 125826053,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524936445
    },
    {
        "content": "<p><code>exact calc b = 1 * b         : by rw group'.one_mul</code> -- that \"shouldn't work\" either</p>",
        "id": 125826096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936492
    },
    {
        "content": "<p>why not?</p>",
        "id": 125826097,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524936509
    },
    {
        "content": "<p>the goal is <code>b = 1 * b</code></p>",
        "id": 125826100,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524936520
    },
    {
        "content": "<p>Oh I see</p>",
        "id": 125826105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936573
    },
    {
        "content": "<p>of course</p>",
        "id": 125826106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936581
    },
    {
        "content": "<p>Kenny do you understand why that bug is not a bug?</p>",
        "id": 125826107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936594
    },
    {
        "content": "<p>line 33</p>",
        "id": 125826149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936604
    },
    {
        "content": "<p>Oh I now understand</p>",
        "id": 125826164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936634
    },
    {
        "content": "<p>I should think of what the rw actually does</p>",
        "id": 125826165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936648
    },
    {
        "content": "<p>not what I want it to do</p>",
        "id": 125826166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936651
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mul_left_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">Habac</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"k\">calc</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">one_mul</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_left_inv</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">Habac</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_left_inv</span>\n           <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">one_mul</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125826218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936725
    },
    {
        "content": "<p>Yes that's really nice</p>",
        "id": 125826221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936730
    },
    {
        "content": "<p>That's just how a mathematician would explain it</p>",
        "id": 125826224,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936767
    },
    {
        "content": "<p>\"apply this axiom\"</p>",
        "id": 125826228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936782
    },
    {
        "content": "<p>\"I don't care which way\"</p>",
        "id": 125826233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936788
    },
    {
        "content": "<p>\"the obvious way\"</p>",
        "id": 125826234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936804
    },
    {
        "content": "<p>I'm sure you can have fewer lines lol</p>",
        "id": 125826236,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524936825
    },
    {
        "content": "<p>of course</p>",
        "id": 125826237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936830
    },
    {
        "content": "<p>but this is the raw beauty which you see here</p>",
        "id": 125826253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936842
    },
    {
        "content": "<p>and then your <code>begin intros exact</code> kind of defeat the purpose of entering tactic mode</p>",
        "id": 125826280,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524936847
    },
    {
        "content": "<p>ha ha you are exactly right</p>",
        "id": 125826282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524936862
    },
    {
        "content": "<p>I wasn't sure whether to comment about the intros line, haha</p>",
        "id": 125826292,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524936921
    },
    {
        "content": "<p>comment about them.</p>",
        "id": 125826294,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524936929
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I just finished writing a file without ever entering tactic mode</p>",
        "id": 125826451,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524937220
    },
    {
        "content": "<p>All the rewrites fail in the below</p>",
        "id": 125831048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948427
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">has_group_notation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">G</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">group&#39;</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_group_notation</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">group&#39;</span><span class=\"bp\">.</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">group&#39;</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_group_notation</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"c1\">-- variables (H : Type) [has_mul H] [has_one H] [has_inv H]</span>\n\n<span class=\"c1\">-- We prove left_mul_cancel for group&#39;</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">group&#39;</span><span class=\"bp\">.</span><span class=\"n\">mul_left_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">Habac</span><span class=\"o\">,</span>\n <span class=\"k\">calc</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">one_mul</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_left_inv</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">Habac</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_left_inv</span>\n                <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">one_mul</span>\n</pre></div>",
        "id": 125831051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948449
    },
    {
        "content": "<p>I am using a structure</p>",
        "id": 125831052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948452
    },
    {
        "content": "<p>I don't understand the error messages</p>",
        "id": 125831053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948460
    },
    {
        "content": "<p>First is</p>",
        "id": 125831054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948474
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>rewrite tactic failed, did not find instance of the pattern in the target expression\n  1 * ?m_3\nstate:\nG : Type,\n_inst_1 : has_group_notation G,\na b c : G,\nHabac : a * b = a * c\n⊢ b = 1 * b\n</pre></div>",
        "id": 125831055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948478
    },
    {
        "content": "<p>I am unimpressed with Lean's instance-finding abilities here</p>",
        "id": 125831094,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948504
    },
    {
        "content": "<p>what am i missing?</p>",
        "id": 125831095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948511
    },
    {
        "content": "<p>I wondered how changing a class to astructure changed things</p>",
        "id": 125831099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948537
    },
    {
        "content": "<p>I think all notation as a notational typeclass works great in these sorts of situations</p>",
        "id": 125831106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948554
    },
    {
        "content": "<p>Lean only finds classes, not structures</p>",
        "id": 125831107,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524948554
    },
    {
        "content": "<p>it's clear what it's doing</p>",
        "id": 125831109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948560
    },
    {
        "content": "<p>and it's doing nothing more</p>",
        "id": 125831110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948563
    },
    {
        "content": "<p>the structure isnt even in the hypotheses</p>",
        "id": 125831111,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524948578
    },
    {
        "content": "<p>I don't understand</p>",
        "id": 125831154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948609
    },
    {
        "content": "<p>I will take notation off</p>",
        "id": 125831158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948627
    },
    {
        "content": "<p>and put pp.all on</p>",
        "id": 125831160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948631
    },
    {
        "content": "<p>am I missing something simple?</p>",
        "id": 125831161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948638
    },
    {
        "content": "<p>kenny can you fix it?</p>",
        "id": 125831166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948660
    },
    {
        "content": "<p>that might help me understand</p>",
        "id": 125831171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948672
    },
    {
        "content": "<p>Look at this beautiful proof</p>",
        "id": 125831267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948902
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">mul_left_cancel&#39;</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_inv</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">Habac</span><span class=\"o\">,</span>\n <span class=\"k\">calc</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">one_mul</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_left_inv</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">Habac</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_left_inv</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">c</span>             <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">one_mul</span>\n</pre></div>",
        "id": 125831273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948908
    },
    {
        "content": "<p>Can you show me how to make a proof which is just as beautiful, but using a class or structure?</p>",
        "id": 125831281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524948928
    },
    {
        "content": "<p>I am getting sick of carrying the axioms around with me</p>",
        "id": 125831329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524949072
    },
    {
        "content": "<p>I have packaged up all the notation in a typeclass</p>",
        "id": 125831368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524949091
    },
    {
        "content": "<p>but I want to package all the group axioms up as well</p>",
        "id": 125831369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524949101
    },
    {
        "content": "<p>The typeclass system is perfect for notation.</p>",
        "id": 125831379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524949149
    },
    {
        "content": "<p>There is very little risk of a diamond :-)</p>",
        "id": 125831381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524949156
    },
    {
        "content": "<p>I want to package everything away but keep the proof beautiful</p>",
        "id": 125831406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524949203
    },
    {
        "content": "<p>and once I have managed that, I think I am done.</p>",
        "id": 125831438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524949235
    },
    {
        "content": "<p>Why aren't you just using the <code>group</code> typeclass?</p>",
        "id": 125831505,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524949431
    },
    {
        "content": "<p>The <code>has_group_notation</code> class has been discussed in some of Jeremy's explorations, called <code>group_struct</code>, but it's not needed in mathlib as it is now</p>",
        "id": 125831988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524950510
    },
    {
        "content": "<p>The standard way to show that an axiom is redundant is to have an auxiliary constructor for <code>group</code> that doesn't have the redundant axioms</p>",
        "id": 125832087,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524950706
    },
    {
        "content": "<p>Is this better?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">has_group_notation</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_one</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"n\">has_inv</span> <span class=\"n\">G</span>\n\n<span class=\"n\">class</span> <span class=\"n\">group&#39;</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">has_group_notation</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_assoc&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">one_mul&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_left_inv&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group&#39;</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">group&#39;</span>\n<span class=\"c1\">-- variables (H : Type) [has_mul H] [has_one H] [has_inv H]</span>\n\n<span class=\"c1\">-- We prove left_mul_cancel for group&#39;</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">group&#39;</span><span class=\"bp\">.</span><span class=\"n\">mul_left_cancel</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">Habac</span><span class=\"o\">,</span>\n <span class=\"k\">calc</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">one_mul&#39;</span> <span class=\"n\">b</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_left_inv&#39;</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc&#39;</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">Habac</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc&#39;</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>         <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_left_inv&#39;</span>\n                <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">one_mul&#39;</span>\n</pre></div>",
        "id": 125832272,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524951165
    },
    {
        "content": "<p>You had two <code>has_group_notation</code> instances, one from <code>group'</code> and another one</p>",
        "id": 125832280,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524951198
    },
    {
        "content": "<p>Just use a namespace and drop the fucking primes</p>",
        "id": 125832281,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524951201
    },
    {
        "content": "<p>one mul is global</p>",
        "id": 125832284,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524951231
    },
    {
        "content": "<p>protected</p>",
        "id": 125832322,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524951245
    },
    {
        "content": "<p>but it doesn't know which <code>one_mul</code> I mean.</p>",
        "id": 125832326,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1524951275
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def group.mk&#39; {α : Type*} [semigroup α] [has_one α] [has_inv α]\n  (one_mul : ∀ (a : α), 1 * a = a)\n  (mul_left_inv : ∀ (a : α), a⁻¹ * a = 1) : group α :=\nhave ∀ a : α, a * a = a → a = 1, from λ a h,\n  calc a = a⁻¹ * a * a : by simp [mul_left_inv, one_mul]\n    ... = a⁻¹ * a : by rw [mul_assoc, h]\n    ... = 1 : mul_left_inv _,\nhave ∀ a : α, a * a⁻¹ = 1, from\nλ a, this _ $ calc\n  a * a⁻¹ * (a * a⁻¹)\n      = a * (a⁻¹ * a) * a⁻¹ : by simp [mul_assoc]\n  ... = a * a⁻¹ : by rw mul_left_inv; simp [mul_assoc, one_mul],\n{ one_mul := one_mul,\n  mul_left_inv := mul_left_inv,\n  mul_one := λ a, show a * 1 = a,\n    by rw [← mul_left_inv a, ← mul_assoc, this, one_mul],\n  ..‹semigroup α›, ..‹has_one α›, ..‹has_inv α› }\n</pre></div>",
        "id": 125832826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524952498
    },
    {
        "content": "<p>This is a common problem in making definitions --- do you go for maximal axioms (so that you don't need lots of lemmas later, and the big results follow easily from the definitions), or minimal axioms (so instances are easy to construct)? Often, the right solution in Lean is to go for maximal axioms with alternate constructors that require minimal axioms.</p>",
        "id": 125834341,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524956075
    },
    {
        "content": "<blockquote>\n<p>The standard way to show that an axiom is redundant is to have an auxiliary constructor for <code>group</code> that doesn't have the redundant axioms</p>\n</blockquote>\n<p>Yes but these are mathematicians with no functional programming background and I think they would prefer to see something which looks like an honest proof (never mention the axiom, then prove it) rather than wrapping anything in a complicated structure.</p>",
        "id": 125836997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524962306
    },
    {
        "content": "<p>Mario your proof is in some sense canonical, but I prefer mine for pedagogical reasons.</p>",
        "id": 125837057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524962511
    },
    {
        "content": "<blockquote>\n<p>Just use a namespace and drop the fucking primes</p>\n</blockquote>\n<p>Kenny can you do it? Namespaces seem to lead to overloading anyway.</p>",
        "id": 125839656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524968827
    },
    {
        "content": "<p>I am reluctant to prime the axioms</p>",
        "id": 125839695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524968903
    },
    {
        "content": "<p>but maybe I have to</p>",
        "id": 125839696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524968912
    },
    {
        "content": "<blockquote>\n<p>something which looks like an honest proof (never mention the axiom, then prove it)</p>\n</blockquote>\n<p>I'm confused. Isn't that pretty much exactly what my proof does? I start with a semigroup with a one and inv, and the left_inv and one_mul axioms, and derive mul_one. There is no funny business at all, or complicated structures, it's literally just proving one statement from another, and then wrapping it up in a <code>group</code>. The proof part could also be factored out like so:</p>\n<div class=\"codehilite\"><pre><span></span>section\nparameters {α : Type*} [semigroup α] [has_one α] [has_inv α]\n  (one_mul : ∀ (a : α), 1 * a = a)\n  (mul_left_inv : ∀ (a : α), a⁻¹ * a = 1)\ninclude one_mul mul_left_inv\n\ntheorem group.mk&#39;_aux1 {a : α} (h : a * a = a) : a = 1 :=\ncalc a = a⁻¹ * a * a : by simp [mul_left_inv, one_mul]\n   ... = a⁻¹ * a : by rw [mul_assoc, h]\n   ... = 1 : mul_left_inv _\n\ntheorem group.mk&#39;_aux2 (a : α) : a * a⁻¹ = 1 :=\ngroup.mk&#39;_aux1 $ calc\n  a * a⁻¹ * (a * a⁻¹)\n      = a * (a⁻¹ * a) * a⁻¹ : by simp [mul_assoc]\n  ... = a * a⁻¹ : by rw mul_left_inv; simp [mul_assoc, one_mul]\n\ntheorem group.mk&#39;_aux3 (a : α) : a * 1 = a :=\nby rw [← mul_left_inv a, ← mul_assoc, group.mk&#39;_aux2, one_mul]\n\ndef group.mk&#39; : group α :=\n{ one_mul := one_mul,\n  mul_left_inv := mul_left_inv,\n  mul_one := group.mk&#39;_aux3,\n  ..‹semigroup α›, ..‹has_one α›, ..‹has_inv α› }\n\nend\n</pre></div>",
        "id": 125840944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524971931
    },
    {
        "content": "<p>Another way to present a proof like this is via an auxiliary class like your <code>gripe</code>, like so:</p>\n<div class=\"codehilite\"><pre><span></span>class gripe (α : Type*) extends semigroup α, has_one α, has_inv α :=\n(one_mul : ∀ (a : α), 1 * a = a)\n(mul_left_inv : ∀ (a : α), a⁻¹ * a = 1)\n\nnamespace gripe\nvariables {α : Type*} [gripe α]\n\ntheorem eq_one_of_idem {a : α} (h : a * a = a) : a = 1 :=\ncalc a = a⁻¹ * a * a : by simp [mul_left_inv, one_mul]\n   ... = a⁻¹ * a : by rw [mul_assoc, h]\n   ... = 1 : mul_left_inv _\n\ntheorem mul_right_inv (a : α) : a * a⁻¹ = 1 :=\neq_one_of_idem $ calc\n  a * a⁻¹ * (a * a⁻¹)\n      = a * (a⁻¹ * a) * a⁻¹ : by simp [mul_assoc]\n  ... = a * a⁻¹ : by rw mul_left_inv; simp [mul_assoc, one_mul]\n\ntheorem mul_one (a : α) : a * 1 = a :=\nby rw [← mul_left_inv a, ← mul_assoc, mul_right_inv, one_mul]\n\ninstance (α) [gripe α] : group α :=\n{ one_mul := one_mul,\n  mul_left_inv := mul_left_inv,\n  mul_one := mul_one,\n  ..gripe.to_semigroup α,\n  ..gripe.to_has_one α,\n  ..gripe.to_has_inv α }\n\nend gripe\n</pre></div>",
        "id": 125841574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524973556
    },
    {
        "content": "<p>Here's how it ended up. <a href=\"https://xenaproject.wordpress.com/2018/04/30/group-theory-revision/\" target=\"_blank\" title=\"https://xenaproject.wordpress.com/2018/04/30/group-theory-revision/\">https://xenaproject.wordpress.com/2018/04/30/group-theory-revision/</a></p>",
        "id": 126004737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1525283268
    }
]