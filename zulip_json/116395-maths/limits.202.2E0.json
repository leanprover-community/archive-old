[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, how are the new limits coming along? I took a peek at community mathlib and it looks like things are happening!</p>",
        "id": 137084883,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541195379
    },
    {
        "content": "<p>Yes, I think it's pretty close now.</p>",
        "id": 137086701,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541197670
    },
    {
        "content": "<p>I spent (too long) trying to follow the argument Emily Riehl uses in her book to explain why (C \\func D) has limits of shape J whenever D has limits of shape J.</p>",
        "id": 137086760,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541197710
    },
    {
        "content": "<p>It turned out to be really gross to formalise.</p>",
        "id": 137086763,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541197717
    },
    {
        "content": "<p>(She first explains that (discrete C) \\func D has those limits, and then shows that the forgetful functor (C \\func D) \\func ((discete C) \\func D) creates limits.)</p>",
        "id": 137086772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541197741
    },
    {
        "content": "<p>So I've just switched to much more directly constructing limits in (C \\func D), and then showing that the evaluation functor ev_X : (C \\func D) \\func D preserves limits.</p>",
        "id": 137086854,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541197811
    },
    {
        "content": "<p>This seems to be nice and clean, so I think I'm happy with that for now.</p>",
        "id": 137086861,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541197822
    },
    {
        "content": "<p>Still to do:<br>\n1. copy-and-pasting for all the dual notions (I think I'm not ready to make tactics for this yet)<br>\n2. quite a bit of cleanup...<br>\n3. port a few examples from the old development<br>\n4. a few @[simp] lemmas describing how colimit.pre and colimit.desc work in the category of types, which I got confused about...</p>",
        "id": 137087044,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541198063
    },
    {
        "content": "<p>If anyone wants to hack on the <code>limits-others-new</code> branch on leanprover-community, feel free. :-)</p>",
        "id": 137087053,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541198093
    },
    {
        "content": "<p>oh, and 5. I need to try porting the construction of limits from equalizers and products to the new setup.</p>",
        "id": 137087081,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541198147
    },
    {
        "content": "<p>Sounds good! I fixed the build by making <code>auto_cases</code> work on quotients again and I also made a couple of minor simplifications which you might still be interested in.</p>",
        "id": 137090585,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541203156
    },
    {
        "content": "<p>I think I will try to check off a few of the items on my \"basic category theory\" list, then.</p>",
        "id": 137090591,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541203171
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I'm happy to help out with some of the dualising work. Which parts would I best start to work on?</p>",
        "id": 137107888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541239723
    },
    {
        "content": "<p>Are certain files pretty stable, and others in flux? Or can I just start anywhere?</p>",
        "id": 137107895,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541239759
    },
    {
        "content": "<p>lol, I started looking at the new limits in more detail, and got annoyed by all these <code>const J C X</code> with so many explicit arguments, and tried making at least the <code>C</code> argument implicit (<code>X : C</code>), and immediately got a bunch of errors related to coercions</p>",
        "id": 137116560,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541258273
    },
    {
        "content": "<p>No wonder Scott went on that rant recently :)</p>",
        "id": 137116561,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541258281
    },
    {
        "content": "<p>That rant got started after I tried making a coercion all the way from <code>C</code> to <code>J \\func C</code>, so you really could just write <code>X</code> instead of <code>const J C X</code>, as we do in the real world.</p>",
        "id": 137131371,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541284603
    },
    {
        "content": "<p>Let's just say it didn't work out. :-)</p>",
        "id": 137131372,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541284611
    },
    {
        "content": "<p>(deleted a dumb question; I really should check the statement when I'm having trouble proving something....)</p>",
        "id": 137138441,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541299402
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, any chance you'd like to help me with any of the following sorries, on the HEAD of <code>limits-others-new</code>:</p>\n<div class=\"codehilite\"><pre><span></span>def is_limit.of_extensions_iso (h : is_iso t.extensions) : is_limit t :=\n{ lift := Œª s, (inv t.extensions) s.X s.œÄ,\n  fac&#39; := begin tidy, sorry, end,\n  uniq&#39; := begin tidy, sorry, end }\n</pre></div>",
        "id": 137151311,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541327603
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def cone.of_representable_cones (F : J ‚•§ C) [r : representable F.cones] : cone F :=\n{ X := r.X,\n  œÄ := r.w.hom r.X (ùüô r.X) }\n\ndef extensions_iso_of_representable_cones (F : J ‚•§ C) [r : representable F.cones] :\n  is_iso (cone.of_representable_cones F).extensions :=\n{ inv :=\n  { app := Œª X, r.w.inv X,\n    naturality&#39; := Œª X Y f, begin tidy, sorry end },\n  hom_inv_id&#39; := begin tidy, sorry end,\n  inv_hom_id&#39; := sorry }\n\ndef has_limit_of_cones_representable (F : J ‚•§ C) [r : representable F.cones] : has_limit F :=\n{ cone := cone.of_representable_cones F,\n  is_limit := is_limit.of_extensions_iso (extensions_iso_of_representable_cones F) }\n\ndef cones_representable_of_has_limit (F : J ‚•§ C) [has_limit F] : representable F.cones :=\n{ X := (has_limit.cone F).X,\n  w := (has_limit.is_limit F).natural_equiv }\n</pre></div>",
        "id": 137151313,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541327620
    },
    {
        "content": "<p>For context, here <code>F.cones</code> is the functor <code>C^op \\to Type</code> so <code>F.cones X</code> is the type of natural transformations <code>X \\natt F</code>, and <code>t.extensions</code>, for <code>t</code> a cone, is the natural transformation <code>yoneda C t.X ‚ü∂ F.cones</code> given by whiskering a cone.</p>",
        "id": 137151406,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541327764
    },
    {
        "content": "<p>I'm finding these sorries very confusing. I'm not sure that this is a sign that the design is bad, just that this is a corner of basic category theory that no one ever writes out the details of. :-)</p>",
        "id": 137151412,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541327819
    },
    {
        "content": "<p>I managed to prove them. It took me 2 hours to write about a dozen lines of code.</p>",
        "id": 137175002,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541373164
    },
    {
        "content": "<p>Awesome!</p>",
        "id": 137175591,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541374468
    },
    {
        "content": "<p>1. I'm glad it took you a while, it makes me feel less incompetent. :-)</p>",
        "id": 137175819,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541374947
    },
    {
        "content": "<p>2. Is there something we can learn from this having been hard??</p>",
        "id": 137175821,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541374958
    },
    {
        "content": "<p>It seems like a bad sign that something a textbook contents itself with merely stating, was a struggle in the library.</p>",
        "id": 137175831,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541375016
    },
    {
        "content": "<p>I also just proved that equalizers are monomorphisms, since that was the other sorry</p>",
        "id": 137175893,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541375134
    },
    {
        "content": "<p>and the lemma I needed to prove it (<code>is_limit.hom_eq</code>; maybe not a very good name? but it's hard to think of different names for all the different aspects of the universal property) is something that I used extensively in my homotopy theory library</p>",
        "id": 137175939,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541375182
    },
    {
        "content": "<p>Ah, thanks!</p>",
        "id": 137175949,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541375246
    },
    {
        "content": "<p>I tend to think of it as a general \"extensionality\" property for limits, since it generalizes funext/prod.ext</p>",
        "id": 137175995,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541375338
    },
    {
        "content": "<p>It's a close relative of</p>\n<div class=\"codehilite\"><pre><span></span>@[extensionality] lemma limit.hom_ext {F : J ‚•§ C} [has_limit F] {X : C}\n  {f g : X ‚ü∂ limit F}\n  (w : ‚àÄ j, f ‚â´ limit.œÄ F j = g ‚â´ limit.œÄ F j) : f = g :=\n</pre></div>",
        "id": 137176009,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541375390
    },
    {
        "content": "<p>I wonder if we should unify them.</p>",
        "id": 137176055,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541375429
    },
    {
        "content": "<p>Oh yeah. Isn't it the same thing?</p>",
        "id": 137176066,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541375476
    },
    {
        "content": "<p>I think you should never prove anything about <code>limit</code>, always <code>is_limit</code></p>",
        "id": 137176067,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541375490
    },
    {
        "content": "<p>and then provide a wrapper for <code>limit</code> if that seems useful</p>",
        "id": 137176068,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541375507
    },
    {
        "content": "<p>because there are lots of ways you could get your hands on a limit cone, only one of which is from the category's chosen limits (if it even has them)</p>",
        "id": 137176108,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541375531
    },
    {
        "content": "<p>I also did this for <code>is_equalizer.mono</code></p>",
        "id": 137176114,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541375624
    },
    {
        "content": "<p>Hmm, I'm on the fence here.</p>",
        "id": 137176162,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541375692
    },
    {
        "content": "<p>One can of course, with some hassle, use theorems stated in terms of <code>limit</code> in situations where you just have an <code>is_limit</code>, by using <code>is_limit.ext</code> to prove that your <code>is_limit</code> is actually equal to the one <code>limit</code> thinks it's using.</p>",
        "id": 137176178,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541375748
    },
    {
        "content": "<blockquote>\n<p>2. Is there something we can learn from this having been hard??</p>\n</blockquote>\n<p>I wondered about this too. My initial feeling was that there were too many definitions built up (<code>cones</code>/<code>representable</code>) with too little supporting theory, but upon reflection this didn't really seem to stand up, considering the eventually successful proof was to think hard about the actual fact which was needed, and then have Lean observe that it was enough.</p>",
        "id": 137176217,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541375772
    },
    {
        "content": "<p>In lean-homotopy-theory I have many, many applications of facts like \"a pushout of a pushout is a pushout\" and I work in a setting where the category is not assumed to have pushouts</p>",
        "id": 137176238,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541375879
    },
    {
        "content": "<p>So that's one obstruction to rewriting things in terms of chosen <code>limit</code>s</p>",
        "id": 137176282,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541375920
    },
    {
        "content": "<p>But it is actually also just more practical in general, because it saves you from transporting the relevant facts across an isomorphism, and dealing with isomorphisms is disproportionately difficult in Lean</p>",
        "id": 137176346,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541376050
    },
    {
        "content": "<p>okay --- so the question is: how much of the stuff I currently have written in terms of <code>limit</code> should we:<br>\n1) remove (for now)<br>\n2) rewrite in terms of <code>is_limit</code>, possible re-adding wrappers<br>\n3) leave as is?</p>",
        "id": 137176403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541376176
    },
    {
        "content": "<p>Well, I suggest 3, with 2 as needed</p>",
        "id": 137176450,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541376273
    },
    {
        "content": "<p>Some things, like \"<code>limit F</code> is functorial in <code>F</code>\", really need <code>limit</code></p>",
        "id": 137176467,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541376315
    },
    {
        "content": "<p>Some other things like <code>limit.pre</code> and <code>limit.pre_pre</code> which involve multiple limit cones are in a sort of middle area. I'm fine with just leaving them how they are until someone wants an <code>is_limit</code> version.</p>",
        "id": 137176649,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541376625
    },
    {
        "content": "<p>Oh, I guess I missed that these functions only require limits of the specific diagrams which appear now. That means you can also use them as their <code>is_limit</code> equivalents, at least in principle...</p>",
        "id": 137176713,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541376827
    },
    {
        "content": "<p>Still, I don't see any particular advantage to defining, say, <code>instance : mono (equalizer.Œπ f g)</code> directly over the way that I did it.</p>",
        "id": 137176758,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541376862
    },
    {
        "content": "<p>I agree there. I think this was my mistake, being over-eager to prove things in the <code>limit</code> variation.</p>",
        "id": 137176763,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541376886
    },
    {
        "content": "<p>Now I remember that I actually considered a design like this at one point in lean-homotopy-theory, where you have a specific class <code>coproduct a b</code> which provides a chosen coproduct of two specific objects. I never tried it out though</p>",
        "id": 137176824,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541376973
    },
    {
        "content": "<p>I guess my hesitation is that switching to <code>is_limit</code> for, for example:</p>\n<div class=\"codehilite\"><pre><span></span>def limit.pre (F : J ‚•§ C) [has_limit F] (E : K ‚•§ J) [has_limit (E ‚ãô F)] : limit F ‚ü∂ limit (E ‚ãô F) :=\nlimit.lift (E ‚ãô F)\n{ X := limit F,\n  œÄ := { app := Œª k, limit.œÄ F (E k) } }\n</pre></div>\n\n\n<p>involves more variables.</p>",
        "id": 137176827,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541377017
    },
    {
        "content": "<p>The <code>has_limit</code> typeclasses each have to turn into a <code>cone</code> and an <code>is_limit</code>.</p>",
        "id": 137176833,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541377041
    },
    {
        "content": "<p>A somewhat scary option is to make <code>is_limit</code> a typeclass again, and make <code>has_limit</code> be inferrable from it...</p>",
        "id": 137176836,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541377070
    },
    {
        "content": "<p>It would be nice if the \"typeclass inferred wasn't the one expected\" class of errors were all solved by appropriate <code>subsingleton</code> instances...</p>",
        "id": 137176894,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541377126
    },
    {
        "content": "<p>Right, so there are just two differences really: whether or not <code>cone</code> and <code>is_limit</code> are bundled together, and whether or not the pair is a type class argument</p>",
        "id": 137176941,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541377165
    },
    {
        "content": "<p>Well, <code>has_limit</code> is not even a subsingleton, unfortunately :)</p>",
        "id": 137177013,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541377267
    },
    {
        "content": "<p>yeah, so at the moment we're in the upside situation: the typeclass is not a singleton, the non-typeclass is...</p>",
        "id": 137177065,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541377336
    },
    {
        "content": "<p>yuck! :-)</p>",
        "id": 137177066,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541377339
    },
    {
        "content": "<p>Well anyways, this just makes me even more want to leave all the <code>limit.*</code> functions alone (besides <code>limit.hom_ext</code> I guess) and just wait and see, in practice, how necessary it is to do \"cone-based reasoning\" vs \"limit-based reasoning\", for lack of better terms, and how inconvenient it is to feed the limit cones you want into <code>limit.*</code></p>",
        "id": 137177141,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541377483
    },
    {
        "content": "<p>okay, great :-)</p>",
        "id": 137177222,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541377628
    },
    {
        "content": "<p>Hmm, does using <code>limit.hom_ext</code> as an <code>[extensionality]</code> lemma really work?</p>",
        "id": 137177288,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541377763
    },
    {
        "content": "<p>I guess it might. I wasn't brave enough to try to make <code>is_limit.hom_ext</code> one too, that seems like it would be bad since it would match basically everything.</p>",
        "id": 137177398,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541377944
    },
    {
        "content": "<p><code>@[extensionality] lemma limit.hom_ext</code> seems to work great!</p>",
        "id": 137180007,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541383249
    },
    {
        "content": "<p>I really need a lot of <code>coblah</code> at the moment. Which approach are we going to take? I advocate putting every <code>costatement</code> right after <code>statement</code>. So the highest level of interleaving that is possible.<br>\nI think every other approach will lead to things going hopelessly out of sync.</p>",
        "id": 146043773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541404787
    },
    {
        "content": "<p>Hmm, I have been keeping them pretty separate. :-(</p>",
        "id": 146785601,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541411450
    },
    {
        "content": "<p>Mostly so that I can work on limits, and then once it has settled down doing a bunch of copy-paste.</p>",
        "id": 146785615,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541411474
    },
    {
        "content": "<p>Which bits of <code>coblah</code> have you been needing?</p>",
        "id": 146785670,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541411530
    },
    {
        "content": "<p>(Are you guys all at Freiburg?)</p>",
        "id": 146785676,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541411539
    },
    {
        "content": "<p>Mostly coequalizers</p>",
        "id": 146785682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541411553
    },
    {
        "content": "<p>There is Kenny, Johannes, Rob, Tobias, Cyril, Patrick, Michael, and me</p>",
        "id": 146785704,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541411626
    },
    {
        "content": "<p>Did you do it yet?</p>",
        "id": 146785747,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541411659
    },
    {
        "content": "<p>It looks like I could dualize everything in equalizers.lean on short notice.</p>",
        "id": 146785753,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541411671
    },
    {
        "content": "<p>No, I got stuck somewhere.</p>",
        "id": 146785764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541411698
    },
    {
        "content": "<p>(I have been synchronizing the two halves of things using a split window editor, and going line by line.)</p>",
        "id": 146785772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541411714
    },
    {
        "content": "<p>Is it okay if I do that now?</p>",
        "id": 146785774,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541411722
    },
    {
        "content": "<p>Yeah cool. Then I'll try to do some sheaves stuff again.</p>",
        "id": 146785785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541411755
    },
    {
        "content": "<p>ok, done!</p>",
        "id": 146786592,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541412796
    },
    {
        "content": "<p>(with one sorry, that I'm very confused about. we may have to ask Reid about it)</p>",
        "id": 146786598,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541412810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> do you want to skype with us?</p>",
        "id": 146786702,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1541412913
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thanks for adding coequalizers!</p>",
        "id": 146787331,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541413781
    },
    {
        "content": "<p>Hmmm, I'm also needing coproducts. But I don't want to overload you...</p>",
        "id": 146787480,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541413939
    },
    {
        "content": "<p>Didn't I do those earlier this evening? Maybe you need to fetch. :-)</p>",
        "id": 146787754,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541414305
    },
    {
        "content": "<blockquote>\n<p>(with one sorry, that I'm very confused about. we may have to ask Reid about it)</p>\n</blockquote>\n<p>I fixed it.</p>",
        "id": 146794617,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541424147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> do you mind if at some point I merge mathlib master into the limits branch?</p>",
        "id": 146796842,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541426572
    },
    {
        "content": "<p>Thanks for the fix! No problem, merge with master whenever you like.</p>",
        "id": 146815058,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541443687
    },
    {
        "content": "<p>Sorry that my git hygiene has been so poor on this branch. We should also rebase and do some squashing.</p>",
        "id": 146815085,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541443713
    },
    {
        "content": "<p>No, please don't do that on public branches.</p>",
        "id": 146815263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541443910
    },
    {
        "content": "<p>I think we should only squash when merging into mathlib.</p>",
        "id": 146815271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541443923
    },
    {
        "content": "<p>Not when multiple people are working on it.</p>",
        "id": 146815314,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541443934
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, two questions/suggestions:<br>\n1) don't you think we should do \"easy\" sheaves _first_, before the ones with sites and coverages?<br>\n2) for your definition <code>def sieve : presheaf X (Type v) :=</code>, I think it's much easier if you start off working in tactic mode, and <code>have</code> each of the four maps you're building, so that it's easy to inspect their types. Once everything works you can obfuscate everything into term mode if you prefer. :-)</p>",
        "id": 146851248,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541491397
    },
    {
        "content": "<p>Thanks for the feedback.<br>\n1) It might be a good idea. But I really want sheaves on a basis. And a basis is a site... And I think I'm almost there.<br>\n2) This sounds like a very good plan!</p>",
        "id": 146851810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541492307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>,  I'm close to \"sticking a fork in it and saying it's done\" on the new limits branch. It's certainly not exhaustively complete, but I want to leave it for a while. Do you think I should re-PR it?</p>",
        "id": 146856102,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541498972
    },
    {
        "content": "<p>It all compiles, and the only sorries are inside comments. :-)</p>",
        "id": 146856103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541498983
    },
    {
        "content": "<p>Cool! We are making some progress with sheaves. Maybe let's wait for a couple hours and see what happens there?</p>",
        "id": 146856168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541499057
    },
    {
        "content": "<p>Of course, it's still conspicuously missing examples!</p>",
        "id": 146856173,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541499064
    },
    {
        "content": "<p>Really I'd like to see all the limits and filtered colimits for CommRing in place...</p>",
        "id": 146856184,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541499098
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Would it be an idea to use <code>coproduct</code> instead of <code>limits.sigma</code>? I think that is just as readable, and less confusing with the existing <code>sigma</code>?</p>",
        "id": 146856745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541499925
    },
    {
        "content": "<p>I'm open. If we change, we should change <code>prod</code> to <code>binary_product</code>, <code>sum</code> to <code>binary_coproduct</code>, <code>pi</code> to <code>product</code> and <code>sigma</code> to <code>coproduct</code>.</p>",
        "id": 146856807,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541500004
    },
    {
        "content": "<p>I actually find calling it sigma helpful, at this point. :-)</p>",
        "id": 146856822,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541500031
    },
    {
        "content": "<p>(because it's just the same as the built-in sigma, just for arbitrary categories, not just Type)</p>",
        "id": 146856885,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541500113
    },
    {
        "content": "<p>Well, we were writing <code>sigma.map</code> and it took a while to figure out that we actually wanted <code>limits.sigma.map</code>.</p>",
        "id": 146856886,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541500119
    },
    {
        "content": "<p>Yeah, okay, I've done that too.</p>",
        "id": 146856892,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541500130
    },
    {
        "content": "<p>Another point, this <code>sigma.map</code> could be a bit more general. The domains of <code>f</code> and <code>g</code> could differ. (In our case we have <code>c √ó c</code> and <code>c</code>, and they are related via the projections.</p>",
        "id": 146856908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541500189
    },
    {
        "content": "<p>Does it make sense what I'm saying?</p>",
        "id": 146856910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541500199
    },
    {
        "content": "<p>We would need a map <code>h : beta ‚Üí beta'</code> such that <code>g \\circ h = f</code> or something like that.</p>",
        "id": 146856966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541500236
    },
    {
        "content": "<p>Perhaps it would be worthwhile to make a list of remaining category theory ingredients needed for schemes and perfectoid spaces?</p>",
        "id": 146873856,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541520155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> My student <span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> wants sheaves on a basis. Is there a way he can look at your code?</p>",
        "id": 146874029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541520322
    },
    {
        "content": "<p>Johan and Johannes are currently working hard on this, the situation will probably be rather different in 24 hours.</p>",
        "id": 146874319,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1541520539
    },
    {
        "content": "<p>Yes, look at the <code>sheaf</code> branch on community mathlib.</p>",
        "id": 146874572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541520742
    },
    {
        "content": "<p>We are pretty close to a definition for sheaves of types on a basis.</p>",
        "id": 146874581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541520755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> We are collecting holes in the api in the <code>sheaf.lean</code> file on the sheaf branch.</p>",
        "id": 146874608,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541520785
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> So I think we can have sheaves of types on a basis rather soon. Generalising to sheaves of groups/rings shouldn't be hard. (We will need to prove that the respective categories have pullbacks and equalizers and such... but I think that should be doable. If <span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> wants, he could also look into that.)<br>\nThe bigger problem is extending sheaves on a basis to sheaves on the topology. Defining the functor on presheaves is not hard (I already did that a while ago); but proving that it preserves sheaves (it is even an equivalence!) seems to be harder.</p>",
        "id": 146876335,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541522083
    },
    {
        "content": "<p>At least it will be hard if I want to use the general machinery of morphisms of sites.</p>",
        "id": 146876360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541522110
    },
    {
        "content": "<p>Maybe this special case is easier... it might help that it is an equivalence.</p>",
        "id": 146876453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541522171
    },
    {
        "content": "<p>So what does this currently look like in Lean? I've not been following developments in category theory since term started.</p>",
        "id": 146876492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541522217
    },
    {
        "content": "<p>Look at the <code>sheaf</code> branch on community-mathlib.</p>",
        "id": 146876513,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541522235
    },
    {
        "content": "<p>Most of the proofs stay really close to the level that we as mathematicians would use. Sometimes you have to go into gory details, which means we didn't set up enough rules for <code>obviously</code>. But that should be easy to improve.</p>",
        "id": 146876627,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541522311
    },
    {
        "content": "<p>no, I mean what does the definition of a sheaf look like?</p>",
        "id": 146876636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541522327
    },
    {
        "content": "<p>Oh I see, sorry, I missed the first message</p>",
        "id": 146876645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541522335
    },
    {
        "content": "<p>On the <code>sheaf</code> branch, you want to look at <code>category_theory/sheaf.lean</code></p>",
        "id": 146876649,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541522341
    },
    {
        "content": "<p>I still need to prove a fundamental lemma, which reduces the sheaf condition to the usual thing in the case of topological spaces.</p>",
        "id": 146876678,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541522379
    },
    {
        "content": "<p>great thanks, this is all we needed to know right now. Thanks a lot!</p>",
        "id": 146876758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1541522436
    },
    {
        "content": "<p>This is throwing up type class issues again:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_limits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cone</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">J</span> <span class=\"bp\">_</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"c1\">-- now I have two instances of small_category J -- HELP</span>\n  <span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">infi</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">,</span>\n    <span class=\"n\">œÄ</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n  <span class=\"n\">is_limit</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span>\n</pre></div>",
        "id": 146884999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541530148
    },
    {
        "content": "<p>I think the problem is actually that you have 0 instances</p>",
        "id": 146885724,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541530852
    },
    {
        "content": "<p>I put <code>by exactI</code> before <code>infi</code>, and now at least that line is accepted.</p>",
        "id": 146885766,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541530878
    },
    {
        "content": "<p>(Or, possibly you have some different imports/mathlib commit than I do.)</p>",
        "id": 146885785,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541530895
    },
    {
        "content": "<p>If you want to avoid <code>by exactI</code> tricks then you could probably define the limits of <code>X</code> in a separate top-level definition, taking care to put the arguments in the correct order for <code>has_limits</code>, and also to put the <code>[small_category J]</code> bit to the left of the colon</p>",
        "id": 146885922,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541531030
    },
    {
        "content": "<p>By the way, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, is there a particular reason for the duplication between <code>has_limits_of</code>, <code>has_limits_of_shapes</code>, <code>has_limits</code>? Why isn't for example <code>has_limits C = Œ† {J : Type v} [small_category J], has_limits_of_shape J C</code>?</p>",
        "id": 146886039,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541531159
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Let me see if I understand what you are suggesting...</p>",
        "id": 146886288,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541531378
    },
    {
        "content": "<p>(Obviously it can't make that big a difference, I just intuitively feel that this duplication will lead to unpacking/repacking down the line. But maybe it's actually more convenient to use for some other reason.)</p>",
        "id": 146886291,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541531390
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Actually <code>limits/types.lean</code> is already written in the style I was suggesting, so you can use that as an example.</p>",
        "id": 146886416,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541531489
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> It's working quite well! Thanks! Now I'm left fighting <code>plift</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"err\">‚•§</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">infi</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">,</span>\n  <span class=\"n\">œÄ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"o\">(</span><span class=\"n\">infi_le</span> <span class=\"bp\">_</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">‚ü©</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">limit_is_limit</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"err\">‚•§</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">limit</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">lift</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">up</span> <span class=\"err\">$</span> <span class=\"n\">le_infi</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">down</span> <span class=\"err\">$</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">œÄ</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">‚ü©</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_limits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cone</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">limit</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">is_limit</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">limit_is_limit</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span> <span class=\"n\">F</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pullbacks</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">has_pullbacks_of_has_limits</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span>\n</pre></div>",
        "id": 146888196,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541533002
    },
    {
        "content": "<p><code>limit_is_limit</code> is still broken. The <code>plift.down</code> is illegal.</p>",
        "id": 146888229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541533027
    },
    {
        "content": "<p>Probably because there is <code>ulift</code> involved too? I wonder why your <code>limit</code> was accepted?</p>",
        "id": 146888373,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541533162
    },
    {
        "content": "<p>oh, I didn't notice the angle brackets!</p>",
        "id": 146888402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541533185
    },
    {
        "content": "<p>I think the other problem has to do with the constant functor etc... I have to look into it...</p>",
        "id": 146888502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541533242
    },
    {
        "content": "<p>I need to do something about my terminal font. or maybe set up emacs to display them in different colors</p>",
        "id": 146888509,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541533246
    },
    {
        "content": "<p>For <code>has_pullbacks</code>? Deleting <code>_</code> worked for me</p>",
        "id": 146888543,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541533280
    },
    {
        "content": "<p>(If using angle brackets for <code>ulift.up</code>, why not also for <code>plift.up</code>?)</p>",
        "id": 146888676,
        "sender_full_name": "Reid Barton",
        "timestamp": 1541533360
    },
    {
        "content": "<p>Yes, maybe I should do that...</p>",
        "id": 146888721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541533389
    },
    {
        "content": "<p>Done:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"err\">‚•§</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cone</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">infi</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span><span class=\"o\">,</span>\n  <span class=\"n\">œÄ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®‚ü®</span><span class=\"n\">infi_le</span> <span class=\"bp\">_</span> <span class=\"n\">j</span><span class=\"bp\">‚ü©‚ü©</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">limit_is_limit</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"err\">‚•§</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">limit</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">lift</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®‚ü®</span><span class=\"n\">le_infi</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">down</span> <span class=\"err\">$</span> <span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">down</span> <span class=\"err\">$</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">œÄ</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">‚ü©‚ü©</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_limits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cone</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">limit</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">is_limit</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">limit_is_limit</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">J</span> <span class=\"n\">hJ</span> <span class=\"n\">F</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_pullbacks</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">has_pullbacks_of_has_limits</span> <span class=\"bp\">_</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span>\n</pre></div>",
        "id": 146889619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541534104
    },
    {
        "content": "<blockquote>\n<p>By the way, <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>, is there a particular reason for the duplication between <code>has_limits_of</code>, <code>has_limits_of_shapes</code>, <code>has_limits</code>? Why isn't for example <code>has_limits C = Œ† {J : Type v} [small_category J], has_limits_of_shape J C</code>?</p>\n</blockquote>\n<p>Oh, it didn't occur to me that this could be possible. I've only recently realised that you can put Pi types in typeclass arguments sometimes.<br>\nIt sounds like a good idea.</p>",
        "id": 146896116,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541539796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> please don't rely on 'theorems' like your</p>\n<div class=\"codehilite\"><pre><span></span>lemma cone.ext&#39; {F : J ‚•§ C} :\n  ‚àÄ{x y : cone F} (eq : x.X = y.X), x.œÄ == y.œÄ ‚Üí x = y ...\n</pre></div>",
        "id": 146933791,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541590169
    },
    {
        "content": "<p>it will lead to tears.</p>",
        "id": 146933795,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541590176
    },
    {
        "content": "<p>If you replace the equalities with isos, it's fine.</p>",
        "id": 146933802,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541590191
    },
    {
        "content": "<p>(and the <code>==</code> with an appropriate composition)</p>",
        "id": 146933848,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541590206
    },
    {
        "content": "<p>It looks like you've made lots of progress on sheaves!!</p>",
        "id": 146933965,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541590337
    },
    {
        "content": "<p>ah, it seems you don't actually use <code>cone.ext'</code> anywhere, so I shouldn't get too upset about it. :-)</p>",
        "id": 146933990,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541590390
    },
    {
        "content": "<p>yes, I removed to prove which used it afterwards, I couldn't apply it. so in the end I unfolded the proof in <code>pullback.lift_id</code>.</p>",
        "id": 146936058,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1541593661
    },
    {
        "content": "<p>I've just pushed some work on <code>sheaf.lean</code>.</p>",
        "id": 146936569,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541594262
    },
    {
        "content": "<p>I moved a bunch of the API stuff you guys added to the limits branch, and then fixed the errors in <code>comap</code>.</p>",
        "id": 146936612,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541594284
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thanks a lot!</p>",
        "id": 146937583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541595381
    },
    {
        "content": "<p>Is <code>preorder (over U)</code> going to create diamond issues? Here <code>U : opens X</code> and <code>X</code> is a type with a topology.</p>",
        "id": 146963725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541602685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I saw that in the stuff on over categories you added <code>right := punit.star</code> a couple of times. Why is this necessary? I thought <code>obviously</code> was handling it. As a user I was very happy that I could ignore <code>right</code> when it was so trivial that you would like to think it didn't even exist.</p>",
        "id": 147248600,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541618664
    },
    {
        "content": "<p>Does mathlib have the indiscrete (codiscrete?) topology, and if so, what is its name?</p>",
        "id": 147250830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541620492
    },
    {
        "content": "<p><code>git grep</code> didn't find either of those...</p>",
        "id": 147250863,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541620525
    },
    {
        "content": "<p><code>‚ä•</code></p>",
        "id": 147251441,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1541620910
    },
    {
        "content": "<p>this is the indiscrete topology</p>",
        "id": 147251491,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1541620924
    },
    {
        "content": "<p>Ok, but it doesn't have a name, I guess?</p>",
        "id": 147251832,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541621228
    },
    {
        "content": "<p>I have now pushed <code>site.trivial</code> and <code>site.discrete</code>.</p>",
        "id": 147251840,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541621240
    },
    {
        "content": "<p>They are the only sorry-free examples of sites we have so far.</p>",
        "id": 147251856,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541621263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, regarding <code>right := punit.star</code>. I did remove this, but I think only temporarily. The problem is that every field with an <code>autoparam</code> should be restated, otherwise the auto_param garbage clutters up the goal view, and sometimes gets in the way of elaboration.  I want to restore <code>obviously</code> to <code>left</code> and <code>right</code>, but it will involve restating <code>hom</code> by hand, and I didn't want to do that on the spot.</p>",
        "id": 147252430,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541621824
    },
    {
        "content": "<p>btw, <code>comap</code> is awesome, I'm really glad it's achievable with the current setup, and hopefully the proofs can even be trimmed down further.</p>",
        "id": 147252459,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541621859
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> If you have a couple of minutes. Would you mind taking a look at the bottom of the current version of the sheaf file? There is a very ugly mixing of category theory, lattices and topological stuff.</p>",
        "id": 147252713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541622090
    },
    {
        "content": "<p>Probably I need to layer things better. But I currently don't see exactly how.</p>",
        "id": 147252724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541622114
    },
    {
        "content": "<p>Especially the case for a <code>basis</code>.</p>",
        "id": 147252776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541622140
    },
    {
        "content": "<p>That one is pretty important, it is math-trivial, and it is getting very ugly.</p>",
        "id": 147252788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541622164
    },
    {
        "content": "<p>the name of <code>‚ä•</code> is <code>bot</code>. I guess the concrete structure is something like <code>topological_space.has_bot</code>? But you can just use <code>‚ä•</code>  whenever you need the indiscrete topology</p>",
        "id": 147252981,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1541622360
    },
    {
        "content": "<p>Ok, I was just looking for a name to give to <code>site.trivial</code>. But maybe <code>site.trivial</code> is fine as it is...</p>",
        "id": 147253052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541622402
    },
    {
        "content": "<p>Or is this going to be <code>site.has_bot</code> at some point <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span>?</p>",
        "id": 147253056,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541622417
    },
    {
        "content": "<p>Anyway...</p>",
        "id": 147253162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541622519
    },
    {
        "content": "<p>I'm feeling like <code>basis.site</code> needs choice somewhere...</p>",
        "id": 147253179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541622537
    },
    {
        "content": "<p>Aah, progress has been made and pushed. It's not done yet, but I need sleep. And now it looks a lot better.</p>",
        "id": 147254105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541623406
    },
    {
        "content": "<p>Anyone who wants to step in: please go ahead!</p>",
        "id": 147254123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541623423
    },
    {
        "content": "<p>okay, I've just been having a look, but it's going to take me a while to get up to speed here. :-(</p>",
        "id": 147254218,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541623486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, I'm starting to doubt using <code>def over (X : C) := comma (functor.id C) (functor.of_obj X)</code></p>",
        "id": 147254452,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541623695
    },
    {
        "content": "<p>It means the <code>comma_morphism.w</code> field is a bit unusable, because it has lurking <code>functor.id</code>s in it that we have to dsimp and then <code>rw category.id_comp</code> to get out of the way.</p>",
        "id": 147254481,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541623733
    },
    {
        "content": "<p>At very least we should not use <code>g.w</code> for <code>g</code> a morphisms of <code>over</code>s, but write a cleaner lemma.</p>",
        "id": 147254513,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541623757
    },
    {
        "content": "<p>Okay, I've fixed that issue, and cleaned up proofs a little. I don't yet have any help for your sorries, however .:-)</p>",
        "id": 147255822,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541624918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thanks for your help! I didn't think <code>over</code> was creating too many problems yet. And I would hope that they would be fixable by API otherwise...</p>",
        "id": 147276527,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541650755
    },
    {
        "content": "<p>I think I solved the over issue; the simp lemma <code>cone_morphism.over_w</code> is all we needed.</p>",
        "id": 147276772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541651227
    },
    {
        "content": "<p>Ugh.. I just sat down to clean some things up in the limits branch, and within minutes I was dealing with something that wouldn't be a problem if we didn't use coercions... <span class=\"emoji emoji-1f4a9\" title=\"pile of poo\">:pile_of_poo:</span></p>",
        "id": 147277421,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541652376
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110294\">@Johannes H√∂lzl</span> <span class=\"emoji emoji-2b06\" title=\"up\">:up:</span></p>",
        "id": 147278698,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541654826
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> when you cleanup the limits branch, take care that no line is longer than 100 chars, also don't indent like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">{</span> <span class=\"n\">long_field_name</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span><span class=\"o\">,</span>\n                         <span class=\"bp\">...</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>but</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">{</span> <span class=\"n\">long_field_name</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"bp\">...</span>\n  <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 147285969,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1541667156
    },
    {
        "content": "<p>Yep, I've been doing this. I'm now in cleanup mode, and will check everything before the PR. :-)</p>",
        "id": 147285982,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541667188
    },
    {
        "content": "<p>Oof, I just realised you said 100 characters, I thought I'd got away with 120 before. I'll trim some more. :-)</p>",
        "id": 147287542,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541669172
    },
    {
        "content": "<p>I'm personally fine with 120 but most people say they cannot read my laptop screen as my resolution is too high... So I think 100 is the better solution. And I get the feeling Mario would prefer 60 :-)</p>",
        "id": 147287766,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1541669438
    },
    {
        "content": "<p>No worries, I'm going for 100 for now. :-)</p>",
        "id": 147287904,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1541669602
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> is it intentional that <code>category_theory.limits.types</code> and <code>category_theory.limits.functor_category</code> aren't imported from <code>category_theory.limits.default</code>?</p>",
        "id": 147616558,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542135265
    },
    {
        "content": "<p>I wasn't sure. My inclination is always to import less by default, but I don't really mind.</p>",
        "id": 147624385,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542142315
    },
    {
        "content": "<p>Would it make sense to add filtered limits to this PR?</p>",
        "id": 147625430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542143249
    },
    {
        "content": "<p>I have a bunch of stuff related to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>Œ∫</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">Œ∫</span></span></span></span>-filtered colimits somewhere</p>",
        "id": 147626278,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542144101
    },
    {
        "content": "<p>The file <code>preserves.lean</code> is not fully dualised. For example, there is no <code>preserved_colimit</code>.</p>",
        "id": 147661810,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542194825
    },
    {
        "content": "<p>Comma categories come with two natural forgetful functors: on this page <a href=\"https://ncatlab.org/nlab/show/comma+category#InComponents\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/comma+category#InComponents\">https://ncatlab.org/nlab/show/comma+category#InComponents</a> they are called <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>H</mi><mi>C</mi></msub></mrow><annotation encoding=\"application/x-tex\">H_C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.07153em;\">C</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>H</mi><mi>D</mi></msub></mrow><annotation encoding=\"application/x-tex\">H_D</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.08125em;\">H</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.08125em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.02778em;\">D</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>.<br>\nSee <a href=\"https://github.com/leanprover-community/mathlib/blob/limits/category_theory/commas.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/limits/category_theory/commas.lean\">https://github.com/leanprover-community/mathlib/blob/limits/category_theory/commas.lean</a> for what we have in the current limits PR. What would be good names for these forgetful functors in Lean?</p>",
        "id": 147692070,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542222932
    },
    {
        "content": "<p>This is not just hypothetical, I want to use them in my sheaves project now...</p>",
        "id": 147692082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542222952
    },
    {
        "content": "<p><code>forget_left</code> could mean that we forget <em>towards</em> the left... or that we forget the left component, and keep the right...</p>",
        "id": 147692133,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542222981
    },
    {
        "content": "<p>So, should we go with <code>to_left</code> or <code>forget_to_left</code>?</p>",
        "id": 147692145,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542223008
    },
    {
        "content": "<p>How about just <code>fst</code> and <code>snd</code>?</p>",
        "id": 147692229,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542223114
    },
    {
        "content": "<p>These are the usual names for the projections on a pair-like object.</p>",
        "id": 147692260,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542223147
    },
    {
        "content": "<p>Ok, fine with me.</p>",
        "id": 147692287,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542223186
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">comma</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">comma</span> <span class=\"n\">L</span> <span class=\"n\">R</span> <span class=\"err\">‚•§</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">snd</span> <span class=\"o\">:</span> <span class=\"n\">comma</span> <span class=\"n\">L</span> <span class=\"n\">R</span> <span class=\"err\">‚•§</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">right</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">right</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">comma</span>\n</pre></div>",
        "id": 147692646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542223454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Should I push this to <code>limits</code>?</p>",
        "id": 147692669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542223472
    },
    {
        "content": "<p>yes, thanks</p>",
        "id": 147692711,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542223503
    },
    {
        "content": "<p>While you're at it, how about we even rename the fields of commas and comma morphisms to <code>fst</code> and <code>snd</code>?</p>",
        "id": 147692756,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542223543
    },
    {
        "content": "<p>Aah, hmm. I pushed already.</p>",
        "id": 147692972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542223727
    },
    {
        "content": "<p>But yes, that might be a good idea.</p>",
        "id": 147692981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542223736
    },
    {
        "content": "<p>But doesn't that lead to conflicts?</p>",
        "id": 147692990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542223746
    },
    {
        "content": "<p>As in, we are defining a structure <code>comma</code> with fields <code>fst</code> and <code>snd</code>, and then in the <code>comma</code> namespace we also want to define <code>fst</code> and <code>snd</code>...</p>",
        "id": 147693020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542223784
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Is this one of the reasons you sometimes add <code>'</code> to names?</p>",
        "id": 147693187,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542223922
    },
    {
        "content": "<p>No, that's not why I sometimes add <code>'</code>. That's purely so we can give restated, <code>dsimp</code>ed (or coercioned, back in the bad old days)) versions of the structure fields.</p>",
        "id": 147704970,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542234758
    },
    {
        "content": "<p>Not sure how to deal with that name conflict....</p>",
        "id": 147704994,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542234793
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> So, what is the common way to resolve naming conflicts like this? The general question is this: what do we do with structures that have a field <code>foo</code> and the projection on <code>foo</code> happens to be a functor... Would this have been easier if functors were a class?</p>",
        "id": 147722024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542259828
    },
    {
        "content": "<p>I've been using one letter prefixes in a few places</p>",
        "id": 147722030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542259854
    },
    {
        "content": "<p>like <code>linear_map.comp</code> is composition of linear maps, and <code>linear_map.lcomp</code> is a linear composition function</p>",
        "id": 147722042,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542259882
    },
    {
        "content": "<p>and <code>llcomp</code> is linear in a really high order type</p>",
        "id": 147722051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542259904
    },
    {
        "content": "<p>So in this case you would propose <code>ffst</code> and <code>fsnd</code>?</p>",
        "id": 147722092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542259933
    },
    {
        "content": "<p>yeah... you might also want to ask <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> in case he has already found a naming convention for this</p>",
        "id": 147722110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542260000
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Have you documented somewhere why functors are not a class?</p>",
        "id": 147722113,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542260011
    },
    {
        "content": "<p>You mean a typeclass on the underlying function of objects?</p>",
        "id": 147722117,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542260032
    },
    {
        "content": "<p>It's a good question, which I've been meaning to try to remember the answer to. :-)</p>",
        "id": 147722129,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542260043
    },
    {
        "content": "<p>Because if we could just write <code>instance : functor (fst)</code> then someone could write <code>X.fst</code> and get functorial behaviour out of that...</p>",
        "id": 147722158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542260062
    },
    {
        "content": "<p>Or am I dreaming?</p>",
        "id": 147722161,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542260068
    },
    {
        "content": "<p>Because now I have a bunch of code containing <code>X.fst</code> which will probably have to be written as the defeq <code>ffst.obj X</code> just to make sure that it plays nice with later constructions.</p>",
        "id": 147722168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542260115
    },
    {
        "content": "<p>At some point in the past I had a strong opinion about this (against the typeclass version), but it's worth revisiting.</p>",
        "id": 147722265,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542260288
    },
    {
        "content": "<p>My opinion may have been based on trying to refactor everything to this form and it being miserable. :-)</p>",
        "id": 147722270,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542260319
    },
    {
        "content": "<p>ah,</p>",
        "id": 147722280,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542260362
    },
    {
        "content": "<p>So you do quickly want the bundled version as well, to talk about the category of functors and natural transformations</p>",
        "id": 147722287,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542260392
    },
    {
        "content": "<p>But that's not an obstacle in itself.</p>",
        "id": 147722312,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542260402
    },
    {
        "content": "<p>When you want to write <code>yoneda : C \\func (C^op \\func Type)</code>, what would we do? Just write <code>yoneda : C \\to (C^op \\to Type)</code></p>",
        "id": 147722341,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542260488
    },
    {
        "content": "<p>and then separate instances <code>functorial (yoneda X)</code>, and ...?</p>",
        "id": 147722345,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542260515
    },
    {
        "content": "<p>the problem is you can't write <code>functorial yoneda</code></p>",
        "id": 147722385,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542260533
    },
    {
        "content": "<p>because we would need a category structure on <code>C^op \\to Type</code></p>",
        "id": 147722389,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542260553
    },
    {
        "content": "<p>and where would that come from?</p>",
        "id": 147722391,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542260558
    },
    {
        "content": "<p>the category structure is only on the bundled functors</p>",
        "id": 147722398,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542260599
    },
    {
        "content": "<p>so.... you define <code>yoneda_2 : C \\to (C^op \\func Type)</code>, and prove that its underlying functions are the same as <code>yoneda</code>, and then construct <code>functorial yoneda_2</code>?</p>",
        "id": 147722453,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542260658
    },
    {
        "content": "<p>Seems a bit gross.</p>",
        "id": 147722454,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542260661
    },
    {
        "content": "<p>I see, those are good points. Thanks for pointing them out! Otoh it might be consistent with what we have been doing so far? (Having both an unbundled and a bundled version.)</p>",
        "id": 147722852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542261455
    },
    {
        "content": "<p>I hope that with the unbundled version a lot of other code might become cleaner...</p>",
        "id": 147722857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542261481
    },
    {
        "content": "<p>Another reason against unbundling is if we can cook up a plethora of examples where functors have the same underlying function on objects... But can only cook up pathological examples at the moment.</p>",
        "id": 147722914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542261543
    },
    {
        "content": "<p>it is worth mentioning that this is basically the opposite direction to the one I took in the module refactor</p>",
        "id": 147724188,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542263944
    },
    {
        "content": "<p>with bundling linear maps</p>",
        "id": 147724192,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542263955
    },
    {
        "content": "<p>I'm not saying it's a bad idea per se, but the reasons that apply to one equally apply to the other</p>",
        "id": 147724254,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542264011
    },
    {
        "content": "<p>I was also very surprised that you did that <span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span> <br>\nI remember that about half a year ago you told me that bundling comes with quite some drawbacks, and that a lot of stuff should be dealt with in an unbundled setting first...</p>",
        "id": 147724263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542264047
    },
    {
        "content": "<p>As a recent example, the bundled version <code>open_set (X : Top)</code> was changed into the unbundled <code>opens (X : Type) [topological_space X]</code></p>",
        "id": 147724281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542264108
    },
    {
        "content": "<p>not only there are drawbacks in every direction, some are innate and some are artifacts of lean 3 implementation</p>",
        "id": 147724327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542264154
    },
    {
        "content": "<p>but I stand by that last one</p>",
        "id": 147724332,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542264179
    },
    {
        "content": "<p>The point is that <code>opens</code> is not a functor, it is a function on a fixed topological space</p>",
        "id": 147724342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542264199
    },
    {
        "content": "<p>er, actually I think it is a functor from the preorder category, but you get the idea</p>",
        "id": 147724347,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542264223
    },
    {
        "content": "<p>It is a <code>functor</code> from <code>Top</code> to <code>Type</code></p>",
        "id": 147724389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542264248
    },
    {
        "content": "<p>it's not, though</p>",
        "id": 147724392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542264257
    },
    {
        "content": "<p>contravariant</p>",
        "id": 147724393,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542264258
    },
    {
        "content": "<p>like not literally</p>",
        "id": 147724395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542264262
    },
    {
        "content": "<p>???</p>",
        "id": 147724396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542264272
    },
    {
        "content": "<p>this is what <code>fopens</code> would be for</p>",
        "id": 147724397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542264272
    },
    {
        "content": "<p>you take the function and bundle it up into a functor</p>",
        "id": 147724398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542264288
    },
    {
        "content": "<p>Ok, so I want <code>instance : functorial opens</code></p>",
        "id": 147724409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542264307
    },
    {
        "content": "<p>this is also what scott is talking about with <code>yoneda_2</code></p>",
        "id": 147724413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542264316
    },
    {
        "content": "<p>that's not going to help if you need a functor though</p>",
        "id": 147724427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542264340
    },
    {
        "content": "<p>it's still unbundled</p>",
        "id": 147724428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542264347
    },
    {
        "content": "<p>Or maybe we rename the current <code>functor</code> to <code>Functor</code>, and then have <code>functor</code> for the unbundled version.</p>",
        "id": 147724429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542264350
    },
    {
        "content": "<p>like if you need to inhabit a functor category like scott said</p>",
        "id": 147724431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542264360
    },
    {
        "content": "<p>Anyway, my train is calling me. See you in 45min.</p>",
        "id": 147724472,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542264370
    },
    {
        "content": "<p>Ok, so what is the verdict? Would it make sense to introduce an unbundled version of <code>functor</code> or should I go for the prefix naming scheme? Or is  this something that isn't clear, and deserves more experimentation?</p>",
        "id": 147726032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542267247
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Also, which parts exactly do you think a br0xen because of Lean 3? And which parts are inherent drawbacks?</p>",
        "id": 147726036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542267275
    },
    {
        "content": "<p>the stuff about coercions is broken because of lean 3</p>",
        "id": 147726115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542267477
    },
    {
        "content": "<p>some of the stuff about using bundled classes for <code>Group</code>, <code>Top</code> etc could be solved but only with significant changes to how elaboration works (i.e. unification hints)</p>",
        "id": 147726174,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542267561
    },
    {
        "content": "<p>I think you shouldn't bother making an unbundled version of functor. This already exists, and it's called <code>functor</code></p>",
        "id": 147726220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542267609
    },
    {
        "content": "<p>I don't follow</p>",
        "id": 147726353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542267872
    },
    {
        "content": "<p>If <code>functor</code> is unbundled, what would be a bundled functor?</p>",
        "id": 147726369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542267907
    },
    {
        "content": "<p><code>_root_.functor</code></p>",
        "id": 147727014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542268934
    },
    {
        "content": "<p>What? That is not even in the category theory library...</p>",
        "id": 147727117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542269107
    },
    {
        "content": "<p>Also, it isn't bundling the function on objects. So I would call this an unbundled endofunctor of <code>Type</code></p>",
        "id": 147727119,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542269137
    },
    {
        "content": "<p>Maybe I'm just very confused about terminology.</p>",
        "id": 147727158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542269164
    },
    {
        "content": "<p>What we have now is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">functor</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u‚ÇÅ</span> <span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u‚ÇÇ</span> <span class=\"n\">v‚ÇÇ</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span> <span class=\"n\">v‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">obj</span>       <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map</span>       <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">((</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">map_id&#39;</span>   <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_comp&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"err\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>And I'm asking whether it makes sense to also have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">functor</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u‚ÇÅ</span> <span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u‚ÇÇ</span> <span class=\"n\">v‚ÇÇ</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span> <span class=\"n\">v‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map</span>       <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">((</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">map_id&#39;</span>   <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">ùüô</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_comp&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"err\">‚â´</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 147727294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542269472
    },
    {
        "content": "<p>possibly... in particular it may work better with notations, just like the <code>&lt;$&gt;</code> notation in <code>_root_.functor</code></p>",
        "id": 147727698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542270179
    },
    {
        "content": "<p>which is not necessarily an endofunctor btw</p>",
        "id": 147727703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542270191
    },
    {
        "content": "<p>I was saying that <code>_root_.functor</code> is unbundled</p>",
        "id": 147727713,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542270221
    },
    {
        "content": "<p>but I think it doesn't work well with identity and composition of functors</p>",
        "id": 147727832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542270370
    },
    {
        "content": "<p>I recall Simon had to do some workaround stuff to define the composition of <code>_root_.functor</code>s</p>",
        "id": 147727843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542270406
    },
    {
        "content": "<p>It is best when all the functors are \"atomic\", i.e. <code>F A : D</code> if <code>A : C</code>, and <code>F</code> is a variable or constant here</p>",
        "id": 147727858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542270478
    },
    {
        "content": "<p>when you have things like <code>(F o G) A = F (G A)</code> it gets hard for lean</p>",
        "id": 147727905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542270503
    },
    {
        "content": "<p>Ok, I don't understand all the issues, but I'll believe you (-;</p>",
        "id": 147728150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542270917
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The <code>f</code> in <code>_root_.functor f</code> goes from <code>Type u</code> to <code>Type v</code>, so up to universes it is an endofunctor, right?</p>",
        "id": 147728206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542271011
    },
    {
        "content": "<p>Yes, <code>_root_.functor</code> is an endofunctor in the <code>Type</code> category (as you said, up to universes)</p>",
        "id": 147729217,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1542272532
    },
    {
        "content": "<p>I guess you meant also <code>class functor {C : Type u‚ÇÅ} [category.{u‚ÇÅ v‚ÇÅ} C] {D : Type u‚ÇÇ} [category.{u‚ÇÇ v‚ÇÇ} D] (obj : C ‚Üí D) : ...</code> (<code>class</code> instead of <code>structure</code>)?</p>",
        "id": 147729225,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1542272574
    },
    {
        "content": "<p>Aah sure, that was an \"edito\"</p>",
        "id": 147729239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542272603
    },
    {
        "content": "<p>The problem with classes is that the <code>.func_in_namespace</code> syntax doesn't work. So while you can add a specific function (like <code>fst</code>) <code>map</code> needs to be named <code>fmap</code> or we need to introduce a infix operator. Similar with the theorem names.</p>",
        "id": 147729410,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1542272806
    },
    {
        "content": "<p>I see, that makes sense.</p>",
        "id": 147729444,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542272879
    },
    {
        "content": "<p>This is a hard decision. I think there is no clear answer (at least not in Lean 3)</p>",
        "id": 147729580,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1542273007
    },
    {
        "content": "<p>The correct solution in this case is probably that we should define <code>comma</code> as a 2-categorical pullback. That would instantly make <code>fst</code> and <code>snd</code> into functors (√† la Scott).</p>",
        "id": 147729597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542273056
    },
    {
        "content": "<p>Next naming question: given a natural transformation <code>R‚ÇÅ \\nattrans R‚ÇÇ</code> you get a functor <code>comma L R‚ÇÅ ‚Üí comma L R‚ÇÇ</code>. How should we call this gadget? Would this be <code>map_right</code>, and the corresponding thing for <code>L‚ÇÅ</code> and <code>L‚ÇÇ</code> would be <code>map_left</code>?</p>",
        "id": 147734668,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542280129
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes H√∂lzl</span> Is it safe to add <code>@[simp]</code> in the following way?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">fst</span> <span class=\"o\">:</span> <span class=\"n\">comma</span> <span class=\"n\">L</span> <span class=\"n\">R</span> <span class=\"err\">‚•§</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 147735408,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542281099
    },
    {
        "content": "<p>It is safe, but would be annoying. I think you only want to unfold <code>fst</code> under a projection (i.e. <code>obj (fst _) = _</code> and <code>map (fst _) = _</code>) or some other operation</p>",
        "id": 147735458,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1542281163
    },
    {
        "content": "<p>Ok, so I should write my own explicit simp-lemmas</p>",
        "id": 147735554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542281380
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I just pushed <code>map_left</code> and <code>map_right</code> to <code>limits</code>. I don't know if you like that, but I think they are pretty useful. Maybe I shouldn't be touching this branch too much. I can keep further stuff in the <code>sheaf</code> branch.</p>",
        "id": 147736369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542282582
    },
    {
        "content": "<p>Also, I didn't have the <code>-- obviously says</code> comments. Maybe that is bad, because then you won't find this code for future clean-ups??</p>",
        "id": 147736431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542282623
    },
    {
        "content": "<p>No, it's fine. I think my point that <code>rewrite_search</code> is awesome but for now slow has been made, and we can drop those comments. :-)</p>",
        "id": 147769051,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542311978
    },
    {
        "content": "<p>Well, maybe you put the comments there so that you could easily clean up those blocks once mathlib has a fast <code>rewrite_search</code>...</p>",
        "id": 147769663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542312492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> do you have an opinion about this change?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"gh\">diff --git a/category_theory/limits/cones.lean b/category_theory/limits/cones.lean</span>\n<span class=\"gh\">index 6d68844..7fce15c 100644</span>\n<span class=\"gd\">--- a/category_theory/limits/cones.lean</span>\n<span class=\"gi\">+++ b/category_theory/limits/cones.lean</span>\n<span class=\"gu\">@@ -228,16 +228,17 @@ include ùíü</span>\n\n @[simp] def functoriality (F : J ‚•§ C) (G : C ‚•§ D) : (cocone F) ‚•§ (cocone (F ‚ãô G)) :=\n { obj := Œª A,\n<span class=\"gd\">-  { X  := G.obj A.X,</span>\n<span class=\"gd\">-    Œπ  :=  whisker_right A.Œπ G ‚äü (functor.const_compose _ _ _).inv },</span>\n<span class=\"gi\">+  { X := G.obj A.X,</span>\n<span class=\"gi\">+    Œπ :=</span>\n<span class=\"gi\">+    { app := Œª j, G.map (A.Œπ.app j), naturality&#39; := by intros; erw ‚ÜêG.map_comp; tidy } },</span>\n   map := Œª _ _ f,\n   { hom := G.map f.hom,\n     w&#39;  :=\n     begin\n       intros, dsimp,\n<span class=\"gd\">-      erw [category.comp_id, ‚Üêfunctor.map_comp, cocone_morphism.w, category.comp_id],</span>\n<span class=\"gi\">+      erw [‚Üêfunctor.map_comp, cocone_morphism.w],</span>\n     end } }\n end\n end cocones\n\n end category_theory.limits\n<span class=\"gu\">@@ -257,6 +261,6 @@ def map_cocone_morphism (H : C ‚•§ D) {c c&#39; : cocone F} (f : cocone_morphism c c</span>\n @[simp] lemma map_cone_œÄ (H : C ‚•§ D) (c : cone F) (j : J) :\n   (map_cone H c).œÄ.app j = ((functor.const_compose _ _ _).hom ‚äü whisker_right c.œÄ H).app j := rfl\n @[simp] lemma map_cocone_Œπ (H : C ‚•§ D) (c : cocone F) (j : J) :\n<span class=\"gd\">-  (map_cocone H c).Œπ.app j = (whisker_right c.Œπ H ‚äü (functor.const_compose _ _ _).inv).app j := rfl</span>\n<span class=\"gi\">+  (map_cocone H c).Œπ.app j = H.map (c.Œπ.app j) := rfl</span>\n\n end category_theory.functor\n</pre></div>",
        "id": 147829089,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542386822
    },
    {
        "content": "<p>Looks fine.</p>",
        "id": 147848336,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542404741
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_colimits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">CommRing</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cocone</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">HJ</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n         <span class=\"k\">let</span> <span class=\"n\">poly_vars</span> <span class=\"o\">:=</span> <span class=\"err\">Œ£</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">j</span> <span class=\"k\">in</span>\n         <span class=\"k\">let</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">poly_vars</span> <span class=\"bp\">‚Ñ§</span> <span class=\"k\">in</span>\n         <span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span><span class=\"bp\">;</span> <span class=\"n\">exact</span>\n         <span class=\"k\">let</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"err\">‚àÖ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n         <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"o\">},</span><span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>Why do I have to put all these <code>letI</code>'s in? Is this expected? I'm trying to construct the colimit of a diagram of commutative rings. The ideal is currently wrong. </p>\n<p>Oh -- I also made this change to mathlib:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">bundled</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">str</span> <span class=\"o\">:</span> <span class=\"n\">c</span> <span class=\"n\">Œ±</span> <span class=\"bp\">.</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">interactive</span><span class=\"bp\">.</span><span class=\"n\">apply_instance</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>Is that crazy?</p>",
        "id": 148053105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542733398
    },
    {
        "content": "<p>A much more trivial remark is that, as far as I understand, nested <code>let</code> can be flattened</p>",
        "id": 148053183,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542733475
    },
    {
        "content": "<p>the <code>letI</code>'s can't though and they are interspersed with the lets :-/</p>",
        "id": 148053208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542733515
    },
    {
        "content": "<p>not for <code>poly_vars</code> and <code>R</code></p>",
        "id": 148053215,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542733535
    },
    {
        "content": "<p>The first <code>letI</code> is expected; or you can use <code>by exactI ...</code></p>",
        "id": 148054778,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542735160
    },
    {
        "content": "<p>I don't know why you would need the second one though</p>",
        "id": 148054889,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542735290
    },
    {
        "content": "<p>We don't need it! Thanks! We needed it at some point -- maybe I was confused by another error.</p>",
        "id": 148054916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542735350
    },
    {
        "content": "<p>For making objects of <code>bundled</code>, the intent was to use <code>mk_ob</code> in the situation where the instance is one that will be provided by type class inference</p>",
        "id": 148054921,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542735358
    },
    {
        "content": "<p>though I'm not sure whether it really works... it worked great in <code>lean-homotopy-theory</code>, where the category <code>Top</code> was fixed, but I'm not sure it works as well with <code>c</code> variable</p>",
        "id": 148054972,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542735395
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_colimits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">CommRing</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cocone</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span>\n         <span class=\"k\">let</span> <span class=\"n\">poly_vars</span> <span class=\"o\">:=</span> <span class=\"err\">Œ£</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n         <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">poly_vars</span> <span class=\"bp\">‚Ñ§</span> <span class=\"k\">in</span>\n         <span class=\"k\">let</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"err\">‚àÖ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n         <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"o\">,</span> <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">},</span>\n    <span class=\"n\">Œπ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®Œª</span> <span class=\"n\">r</span><span class=\"o\">,</span><span class=\"k\">begin</span> <span class=\"n\">sorry</span> <span class=\"kn\">end</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">sorry</span> <span class=\"kn\">end</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n  <span class=\"n\">is_colimit</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I have a student making colimits -- this is how far we are.</p>",
        "id": 148054974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542735400
    },
    {
        "content": "<p>I see, I didn't know about <code>mk_ob</code></p>",
        "id": 148054991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542735430
    },
    {
        "content": "<p>however, I also found making the <code>str</code> field into a <code>()</code> field more convenient, for the case where you want to provide it explicitly</p>",
        "id": 148055005,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542735474
    },
    {
        "content": "<p>using <code>\\&lt;_, _\\&gt;</code></p>",
        "id": 148055050,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542735488
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span>\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_colimits</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">CommRing</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cocone</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">J</span> <span class=\"n\">HJ</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">{</span>\n    <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">exactI</span>\n         <span class=\"k\">let</span> <span class=\"n\">poly_vars</span> <span class=\"o\">:=</span> <span class=\"err\">Œ£</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">J</span><span class=\"o\">),</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n         <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">poly_vars</span> <span class=\"bp\">‚Ñ§</span> <span class=\"k\">in</span>\n         <span class=\"k\">let</span> <span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"err\">‚àÖ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n         <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">mk_ob</span> <span class=\"o\">(</span><span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"o\">),</span>\n    <span class=\"n\">Œπ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®Œª</span> <span class=\"n\">r</span><span class=\"o\">,</span><span class=\"k\">begin</span> <span class=\"n\">sorry</span> <span class=\"kn\">end</span><span class=\"o\">,</span> <span class=\"k\">begin</span> <span class=\"n\">sorry</span> <span class=\"kn\">end</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">}</span>\n    <span class=\"o\">},</span>\n  <span class=\"n\">is_colimit</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p><code>mk_ob</code> added</p>",
        "id": 148055055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542735494
    },
    {
        "content": "<p>Yes, looks like a good start</p>",
        "id": 148055059,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542735510
    },
    {
        "content": "<p>I have never used this library before, I didn't know about <code>mk_ob</code>. Are there any docs or basic worked examples?</p>",
        "id": 148055063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542735516
    },
    {
        "content": "<p>Maybe I'm writing it :-)</p>",
        "id": 148055068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542735527
    },
    {
        "content": "<p>I think possibly nobody has used it before</p>",
        "id": 148055078,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542735540
    },
    {
        "content": "<p>I think something like this might be useful, and I couldn't find it elsewhere:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"err\">ùí¶</span> <span class=\"o\">:</span> <span class=\"n\">small_category</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">C</span> <span class=\"err\">ùíû</span> <span class=\"n\">K</span> <span class=\"err\">ùí¶</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">colimit</span><span class=\"bp\">.</span><span class=\"n\">pre_map</span>\n  <span class=\"o\">[</span><span class=\"n\">has_colimits_of_shape</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">J</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_colimits_of_shape</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">K</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E‚ÇÅ</span> <span class=\"n\">E‚ÇÇ</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"err\">‚•§</span> <span class=\"n\">J</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">E‚ÇÅ</span> <span class=\"err\">‚üπ</span> <span class=\"n\">E‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">colimit</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"n\">F</span> <span class=\"n\">E‚ÇÅ</span> <span class=\"bp\">=</span> <span class=\"n\">colim</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">whisker_right</span> <span class=\"n\">Œ±</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">‚â´</span> <span class=\"n\">colimit</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"n\">F</span> <span class=\"n\">E‚ÇÇ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">to_rhs</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">‚Üê</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">assoc</span><span class=\"o\">},</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n</pre></div>",
        "id": 148639534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543327470
    },
    {
        "content": "<p>I don't have time to finish this atm, but I think we want lemmas like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">colimit</span><span class=\"bp\">.</span><span class=\"n\">coyoneda</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_colimit</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">coyoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">colimit</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">‚âÖ</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">cocones</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">P</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">cocones_of_cocone</span> <span class=\"o\">((</span><span class=\"n\">colimit</span><span class=\"bp\">.</span><span class=\"n\">cocone</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">extend</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n    <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">tidy</span> <span class=\"o\">{</span><span class=\"n\">trace_result</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n      <span class=\"n\">sorry</span>\n    <span class=\"kn\">end</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">P</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">colimit</span><span class=\"bp\">.</span><span class=\"n\">desc</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">cocone_of_cocones</span> <span class=\"n\">c</span><span class=\"o\">),</span>\n    <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">tidy</span> <span class=\"o\">{</span><span class=\"n\">trace_result</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n      <span class=\"n\">sorry</span>\n    <span class=\"kn\">end</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 148796377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543507256
    },
    {
        "content": "<p>This generalises</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">colimit</span><span class=\"bp\">.</span><span class=\"n\">hom_equiv</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_colimit</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">colimit</span> <span class=\"n\">F</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"err\">‚âÖ</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">cocones</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">cocones_of_cocone</span> <span class=\"o\">((</span><span class=\"n\">colimit</span><span class=\"bp\">.</span><span class=\"n\">cocone</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">extend</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">colimit</span><span class=\"bp\">.</span><span class=\"n\">desc</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">cocone_of_cocones</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 148796397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543507272
    },
    {
        "content": "<p>Yes, probably. But this one is kind of automatic, I think. You might have an easier time constructing it with <code>nat_iso.of_components</code>.</p>",
        "id": 148797402,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543508036
    },
    {
        "content": "<p>The more crucial one is that the isomorphism is also natural in F</p>",
        "id": 148797474,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543508068
    },
    {
        "content": "<p>And I guess we should state these simultaneously somehow</p>",
        "id": 148797932,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543508458
    },
    {
        "content": "<p>Yes, I realised that while I was on the train. I'm not general enough...</p>",
        "id": 148801479,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543511610
    },
    {
        "content": "<p>So <code>cocones</code> has to be turned into a functor, and then <code>colim &gt;&gt;&gt; coyoneda</code> should be naturally isomorphic to it, I guess.</p>",
        "id": 148801571,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543511675
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Do you think it makes sense to do this before the <code>limits-2</code> branch is merged?</p>",
        "id": 148802040,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543512068
    },
    {
        "content": "<p>No</p>",
        "id": 148802171,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543512198
    },
    {
        "content": "<p>No adding things!</p>",
        "id": 148802173,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543512203
    },
    {
        "content": "<p>Sure... I'll create a <code>limits-2.epsilon</code> after this one is merged <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 148802390,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543512404
    },
    {
        "content": "<p>This business with special shapes of limits is more subtle than I expected</p>",
        "id": 150749766,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543810907
    },
    {
        "content": "<p>Nothing is defeq to anything...</p>",
        "id": 150749768,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543810921
    },
    {
        "content": "<p>Maybe we should just not do anything here?</p>",
        "id": 150750517,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543812228
    },
    {
        "content": "<p>What does \"not do anything\" mean?</p>",
        "id": 150751753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543814529
    },
    {
        "content": "<p>Do you mean to not have these special cases at all? Or do you mean that you don't want to change anything of what Scott did?</p>",
        "id": 150751764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543814561
    },
    {
        "content": "<p>I mean not to have these special cases, or more precisely, still provide the functions for building functors and cones out of discrete categories, for example, but don't use the word \"product\" anywhere</p>",
        "id": 150782044,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543854906
    },
    {
        "content": "<p>Ok, I would have to see that in action. I guess it would be useful if it increases the defeqness (defeqtitude?) of the library.</p>",
        "id": 150783206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543855999
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Are you currently testing this out? Could you show what it would look like for (binary) products?</p>",
        "id": 150788548,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543860827
    },
    {
        "content": "<p>I haven't tried to put this into practice yet (hopefully I will be able to do so over the next few days) but you can approximate it by just ignoring the existence of files like <code>limits/products.lean</code>.</p>",
        "id": 150789492,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543861702
    },
    {
        "content": "<p>The definition of <code>pi</code> there for example is essentially just <code>pi f := limit (functor.of_function f)</code>--I'm suggesting you work with the right-hand side directly</p>",
        "id": 150789525,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543861752
    },
    {
        "content": "<p>Hmm, but it is surprising that that would increase defeqness, right?</p>",
        "id": 150789803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543862004
    },
    {
        "content": "<p>I'm \"increasing defeqness\" by removing all the parts of the library which have defeq issues</p>",
        "id": 150789813,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543862023
    },
    {
        "content": "<p>it's a right adjoint</p>",
        "id": 150789817,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543862027
    },
    {
        "content": "<p>Here is an example: <code>limit.post : G.obj (limit F) ‚ü∂ limit (F ‚ãô G)</code><br>\nThe products version should look like <code>pi.post : G.obj (limits.pi f) ‚ü∂ (limits.pi (G.obj ‚àò f))</code> where <code>limits.pi f = limit (functor.of_function f)</code></p>",
        "id": 150789918,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543862103
    },
    {
        "content": "<p>Unfortunately <code>functor.of_function (G.obj ‚àò f)</code> is not definitionally equal to <code>functor.of_function f ‚ãô G</code></p>",
        "id": 150790016,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543862192
    },
    {
        "content": "<p>so <code>pi.post</code> is not a special case of <code>limit.post</code></p>",
        "id": 150790029,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543862209
    },
    {
        "content": "<p>So. my current feeling is that I have no idea how to solve this kind of issue clearly in the library, and so I would rather not even try, and let the user deal with it instead.</p>",
        "id": 150790062,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543862266
    },
    {
        "content": "<p>Hmm... I see. So what kind of functions would you still provide?</p>",
        "id": 150790136,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543862303
    },
    {
        "content": "<p><code>functor.of_function</code> and similar things</p>",
        "id": 150790153,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543862329
    },
    {
        "content": "<p>Anything which lets you build a functor, natural transformation, cone, etc. out of one of these special indexing categories from simpler data. That amount clearly seems to be required, since building those manually is a big pain.</p>",
        "id": 150790344,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543862511
    },
    {
        "content": "<p>I want to make the overall API of size O(N+M) where N is the number of facts I know about limits and M is the number of special cases of limits I care about, not O(N*M)</p>",
        "id": 150790414,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543862545
    },
    {
        "content": "<p>I wouldn't mind having nice binder notation for <code>limit (functor.of_function f)</code>, but I guess we need to use a weird <code>\\Pi</code>, because the other one is stolen...</p>",
        "id": 150791572,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543863496
    },
    {
        "content": "<p>And writing <code>limit (functor.of_pair X Y)</code> seems pretty verbose. But we'll see. For now I think it is a good idea to at least make a PR with all the special shapes.</p>",
        "id": 150791631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543863568
    },
    {
        "content": "<p><code>limit (functor.of_pair X Y)</code> feels pretty lame to me. I agree the interface size is an issue, but we should set aside the pain of producing it, and decide whether the <code>N+M</code> or <code>N*M</code> interface is actually more usable.</p>",
        "id": 150828818,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543908464
    },
    {
        "content": "<p>I worry that all the things you're proposing to leave out because they suffer from defeq issues are exactly putting the pain of dealing with those defeq issues on the user of the library.</p>",
        "id": 150828865,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543908496
    },
    {
        "content": "<p>I mean, this is why I wrote everything out again in each special shape --- precisely because you can't just use the general one (or rather, if you do, you get a clumsier statement).</p>",
        "id": 150828882,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543908557
    },
    {
        "content": "<p>That said, I absolutely appreciate the horror of an N*M size library.</p>",
        "id": 150828966,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543908674
    },
    {
        "content": "<p>I would really have to see how this works out in practice.</p>",
        "id": 150829264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543909151
    },
    {
        "content": "<blockquote>\n<p>I worry that all the things you're proposing to leave out because they suffer from defeq issues are exactly putting the pain of dealing with those defeq issues on the user of the library.</p>\n</blockquote>\n<p>Yes, this is exactly the plan.</p>",
        "id": 150848260,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543932066
    },
    {
        "content": "<p>Note that the example <code>pi.post</code> where things start to go wrong is again a <em>definition</em>. That means it will appear in the statement of theorems about limits. It will not be possible to specialize these theorems to facts about <code>pi.post</code> if the latter is defined in a way unrelated to <code>limit.post</code>.</p>",
        "id": 150849330,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543932626
    },
    {
        "content": "<p>Basically my claim is that we don't actually how to address these issues (yet?) and I would rather not make O(N*M) guesses about the best way to proceed.</p>",
        "id": 150850056,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543933208
    },
    {
        "content": "<p>In my mind M and especially N are not fixed, but variable. So it's not just a matter of \"write out all the N*M things, and then you're done\"</p>",
        "id": 150850070,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543933228
    },
    {
        "content": "<p>I think I agree with both of you.</p>",
        "id": 150850190,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543933334
    },
    {
        "content": "<p>For the short-term future, I would follow Reid, but in the long-term I wouldn't mind having a really slick and polished library the way that Scott envisions it.</p>",
        "id": 150850229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543933375
    },
    {
        "content": "<p>I do think we could define <code>product X Y := limit (functor.of_pair X Y)</code> and maybe 2-3 minor conveniences per limit type.</p>",
        "id": 150850248,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543933395
    },
    {
        "content": "<p>Anyway, we've had an O(N) chunk merged. Next up seems to be an O(M) chunk. (-;</p>",
        "id": 150850250,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543933397
    },
    {
        "content": "<p>So, how about the classes <code>has_products</code>, <code>has_pullbacks</code>, <code>has_equalizers</code>, etc... will they remain? Or do we just write <code>has_limits_of_shape walking_pair</code>?</p>",
        "id": 150859092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543940743
    },
    {
        "content": "<p>I was planning on getting rid of those as well, though for a different reason, namely that the class system doesn't seem to deal with them well</p>",
        "id": 150863424,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543944750
    },
    {
        "content": "<p>I'm really pretty dubious. We know that in many categories, there should be separate implementations of, say, binary_products and general limits. How will this be achieved in the minimal API?</p>",
        "id": 150870290,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543950544
    },
    {
        "content": "<p>No, don't do that</p>",
        "id": 150870609,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543950747
    },
    {
        "content": "<p>Better: provide specialized ways to construct <code>is_limit</code> cones</p>",
        "id": 150870639,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543950782
    },
    {
        "content": "<p>I'm confused. What will it look like when someone needs to compare the carrier type of <code>limit (functor.of_pair X Y)</code> with the Lean built-in product of the carrier types of <code>X</code> and <code>Y</code>?</p>",
        "id": 150870808,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543950893
    },
    {
        "content": "<p>(supposing we're in an algebraic category)</p>",
        "id": 150870833,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543950919
    },
    {
        "content": "<p>I think you should not do that either, if by \"compare\" you mean expect them to be defeq</p>",
        "id": 150870858,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543950941
    },
    {
        "content": "<p>But you can use the <code>is_limit</code> for the cone for the product type to get an isomorphism to the <code>limit</code></p>",
        "id": 150870959,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543951024
    },
    {
        "content": "<p>So, will we provide the natural isomorphism between the two functors <code>C x C -&gt; Type</code> at some point?</p>",
        "id": 150871011,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543951072
    },
    {
        "content": "<p>Or if you're feeling lucky, you can locally set the product type one as an instance</p>",
        "id": 150871051,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543951083
    },
    {
        "content": "<p>What two functors?</p>",
        "id": 150871087,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543951103
    },
    {
        "content": "<p>Do you mean Type x Type -&gt; Type?</p>",
        "id": 150871213,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543951204
    },
    {
        "content": "<p>There's going to be a difference between the underlying type of a limit over a discrete diagram that comes from <code>limit</code> and the Pi type in any case.</p>",
        "id": 150871525,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543951448
    },
    {
        "content": "<p>I'd rather have this difference out in the open where I can deal with it explicitly, than buried inside some implicit parameter to a class instance</p>",
        "id": 150871574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543951503
    },
    {
        "content": "<p>I'm afraid I'm too much of an ITP-newbie to contribute meaningfully to this discussion. But for what it's worth, I'dd love to use sheaves as a testing ground of what <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> is suggesting.</p>",
        "id": 150872073,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543951859
    },
    {
        "content": "<p>Recall Johan's issue <a href=\"#narrow/stream/116395-maths/subject/sheaves.20and.20sites/near/148024839\" title=\"#narrow/stream/116395-maths/subject/sheaves.20and.20sites/near/148024839\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/subject/sheaves.20and.20sites/near/148024839</a>. It took me a long time to even understand how the two sides could be different</p>",
        "id": 150872086,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543951866
    },
    {
        "content": "<p>Okay, I'm definitely happy with the plan to just provide the bare minimum (e.g. functor.of_function and its friends), and then see if we can rebase the sheaf branch onto that.</p>",
        "id": 150878374,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543956852
    },
    {
        "content": "<p>And learn what we need from that development.</p>",
        "id": 150878380,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543956860
    },
    {
        "content": "<p>I agree it's hard to know how bad leaving things out is going to be, in the abstract.</p>",
        "id": 150878403,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543956885
    },
    {
        "content": "<p>As mentioned elsewhere, I've rebased what remains of my limits PR into two pieces: some assorted stuff that can be merged, and the remaining remaining stuff, about special shapes, that shouldn't (yet) be.</p>",
        "id": 150905894,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543988794
    },
    {
        "content": "<p>I did, in the special shapes part, remove a few very naughty <code>[instance]</code> attributes that really shouldn't have been there. I will, sometime, investigate whether their removal has helped.</p>",
        "id": 150905922,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543988833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Any news about the next stage? Can you use any help?</p>",
        "id": 151229767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544377678
    },
    {
        "content": "<p>I've been focusing on other Lean projects recently but actually the next thing I was going to do was PR a version of discrete categories, which Scott has already done in the meantime.</p>",
        "id": 151235379,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544387766
    },
    {
        "content": "<p>I'm going to be needing some of the other shapes before too long as well</p>",
        "id": 151235463,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544387987
    },
    {
        "content": "<p>I need to prove that <code>cocone.whisker</code>ing with an equivalence preserves <code>is_colimit</code>. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I don't suppose either of you has already done this?</p>",
        "id": 151566382,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544651461
    },
    {
        "content": "<p>What does whisker mean?</p>",
        "id": 151567210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544652325
    },
    {
        "content": "<p>I know what a cocone is.</p>",
        "id": 151567222,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544652338
    },
    {
        "content": "<p>No, sorry, haven't done this.</p>",
        "id": 151567445,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1544652583
    },
    {
        "content": "<p>A cocone on F is a natural transformation from F : J \\func C to a constant functor X. Whiskering means whiskering this natural transformation by a functor (i.e. horizontal composition with the identity natural transformation on a functor) (but we still need to work out if we mean by a functor J' \\func J or by a functor C \\func C'). Looking up <code>category_theory/limits/cones.lean</code>, it seems we have <code>def whisker {K : Type v} [small_category K] (E : K ‚•§ J) (c : cocone F) : cocone (E ‚ãô F)</code>,  so it's whiskering on the left.</p>",
        "id": 151567712,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1544652870
    },
    {
        "content": "<p>I kind of want to rename <code>whisker</code> to <code>whisker_left</code> and make it a functor and rename <code>functoriality</code> to <code>whisker_right</code></p>",
        "id": 151567877,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544653072
    },
    {
        "content": "<p>I think the definition you originally wrote made the relationship to <code>whisker_right</code> more obvious</p>",
        "id": 151567938,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544653101
    },
    {
        "content": "<p>I agree, these would be good changes.</p>",
        "id": 151568636,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1544653872
    },
    {
        "content": "<p>Only seeing this now, but sounds good to me.</p>",
        "id": 151587223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544680337
    },
    {
        "content": "<p>I would like to get more access to specialised shapes. But I don't have a good feeling which for which direction we want to go now. If we can get one example into a PR-ready form, then I could work on the others myself. <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Do you think you have time to work on (say) products, this week?</p>",
        "id": 151831861,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544869261
    },
    {
        "content": "<p>For example, I want to connect binary (co)products to <code>sup</code> and <code>inf</code> for lattices.</p>",
        "id": 151831870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544869296
    },
    {
        "content": "<p>I'm going to take a look at special shapes again today. However, I'm not entirely sure how to proceed, both in terms of what we want the API to look like, and also in view of the fact that there is already an outstanding PR which adds discrete categories.</p>",
        "id": 151842125,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544890362
    },
    {
        "content": "<p>Ok, cool. <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Would you have some time to take care of the outstanding PR's? Then we could start moving forward again. It seems to be blocking some work... (But I understand completely if you have other deadlines that are more important.)</p>",
        "id": 151844141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544893661
    },
    {
        "content": "<p>Any advice on where to focus?</p>",
        "id": 151844146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544893681
    },
    {
        "content": "<p>(eg <a href=\"https://github.com/leanprover/mathlib/issues/503\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/503\">#503</a>, <a href=\"https://github.com/leanprover/mathlib/issues/505\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/505\">#505</a>)</p>",
        "id": 151844468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544894219
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/issues/512\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/512\">#512</a> has discrete categories which I think are the least problematic of the \"special shapes\"</p>",
        "id": 151844534,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544894335
    },
    {
        "content": "<p>I commented on that PR, but it looks like there are still some outstanding comments of yours as well</p>",
        "id": 151844795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544894786
    },
    {
        "content": "<p>Indeed</p>",
        "id": 151844812,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544894835
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> While you are at it, would you mind taking a look at my other PR's? I think they are all pretty straight-forward. Just adding little tidbits to the category lib</p>",
        "id": 151844959,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544895024
    },
    {
        "content": "<p>I'm not sure about the <code>op</code> thing though</p>",
        "id": 151845078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544895263
    },
    {
        "content": "<p>I thought there was a reason it was a type synonym rather than a wrapper</p>",
        "id": 151845089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544895319
    },
    {
        "content": "<p>I agree that if it is irreducible it may as well just be a separate inductive type</p>",
        "id": 151845094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544895348
    },
    {
        "content": "<p>although with up and down functions you won't get <code>up (down x) = x</code> and <code>down (up x) = x</code> both being rfl</p>",
        "id": 151845140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544895402
    },
    {
        "content": "<p>maybe this doesn't matter because these are object equalities...?</p>",
        "id": 151845149,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544895462
    },
    {
        "content": "<p>Oh yeah, that could be annoying...</p>",
        "id": 151845151,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544895471
    },
    {
        "content": "<p>with irreducible you will get strange things not being refl, like with real</p>",
        "id": 151845195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544895501
    },
    {
        "content": "<p>I tend to shy away from it for that reason</p>",
        "id": 151845198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544895513
    },
    {
        "content": "<p>I notice that PR doesn't build currently anyways</p>",
        "id": 151845258,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544895645
    },
    {
        "content": "<p>With the <code>irreducible</code> definition, would the elaborator treat both <code>unop (op x) = x</code> and <code>op (unop x) = x</code> as definitional equalities?</p>",
        "id": 151845509,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544896177
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks for the merges!</p>",
        "id": 151845511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544896182
    },
    {
        "content": "<p>I guess I should just experiment... but this particular PR hasn't been a high priority for me</p>",
        "id": 151845566,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544896210
    },
    {
        "content": "<p>I think these being questions about equalities between objects makes it more important whether the equalities are definitional, not less</p>",
        "id": 151846091,
        "sender_full_name": "Reid Barton",
        "timestamp": 1544897289
    },
    {
        "content": "<p>with the irreducible definition I think they would both not be defeq</p>",
        "id": 151846670,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544898522
    },
    {
        "content": "<p>I stand corrected:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">irreducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_nat</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">delta</span> <span class=\"n\">A</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">id</span>\n<span class=\"n\">def</span> <span class=\"n\">of_nat</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">delta</span> <span class=\"n\">A</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">id</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">to_of</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">to_nat</span> <span class=\"o\">(</span><span class=\"n\">of_nat</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--ok</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">of_to</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">of_nat</span> <span class=\"o\">(</span><span class=\"n\">to_nat</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">--ok</span>\n</pre></div>",
        "id": 151846738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544898670
    },
    {
        "content": "<p>What the heck is <code>delta</code>? I've never seen it before...</p>",
        "id": 151846902,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1544899023
    },
    {
        "content": "<p>it's a variation on <code>dunfold</code></p>",
        "id": 151846950,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1544899107
    },
    {
        "content": "<p>I've never used it</p>",
        "id": 151847009,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1544899218
    },
    {
        "content": "<p>it's a very low level definition unfolding tactic</p>",
        "id": 151847488,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544900204
    },
    {
        "content": "<p>it's good for cases when the elaborator doesn't want it to unfold</p>",
        "id": 151847490,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544900221
    },
    {
        "content": "<p>although I guess in this case <code>dunfold</code> suffices</p>",
        "id": 151847497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544900271
    },
    {
        "content": "<p>I used <code>delta</code> also in the <code>hidden</code> thread, to unfold <code>nat.add</code> into its underlying recursor</p>",
        "id": 151847602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544900407
    },
    {
        "content": "<p><code>dunfold</code> and its friends refuse to use the definition, they only use equation lemmas</p>",
        "id": 151847608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1544900427
    },
    {
        "content": "<p>I knew I saw it not a long time ago!</p>",
        "id": 151847627,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1544900480
    },
    {
        "content": "<p>It was when I was writing a blog post about equality (a post which is still in the queue of jobs).</p>",
        "id": 151848133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1544901500
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, I just separated out what remains of my limits PR into two branches. <code>limits-shapes</code> just provides convenience methods for dealing with cones of special shapes, but doesn't attempt to introduce <code>has_products</code> or any similar gadgets.</p>",
        "id": 152253229,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1545309021
    },
    {
        "content": "<p>There's also <code>limits-other</code> which still has everything (the O(M*N) approach...) rebased onto this.</p>",
        "id": 152253241,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1545309051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Does this also mean that you are planning to split <a href=\"https://github.com/leanprover/mathlib/issues/512\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/512\">#512</a> into two pieces?</p>",
        "id": 152304748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545361378
    },
    {
        "content": "<p>I guess I was hoping to just get <a href=\"https://github.com/leanprover/mathlib/issues/512\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/512\">#512</a> merged.</p>",
        "id": 152305601,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1545362576
    },
    {
        "content": "<p>It's such a grab bag it's not obvious to me where a split would go.</p>",
        "id": 152305618,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1545362627
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> The merge of <a href=\"https://github.com/leanprover/mathlib/issues/512\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/512\">#512</a> introduced some regressions.</p>",
        "id": 152315453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545380245
    },
    {
        "content": "<p>okay, then progress it</p>",
        "id": 152315459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545380281
    },
    {
        "content": "<p>At least <a href=\"https://github.com/leanprover/mathlib/pull/512/files#diff-c997371393c06bacaf4074ef43915f3e\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/512/files#diff-c997371393c06bacaf4074ef43915f3e\">https://github.com/leanprover/mathlib/pull/512/files#diff-c997371393c06bacaf4074ef43915f3e</a></p>",
        "id": 152315464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545380281
    },
    {
        "content": "<p>I think the rest is fine.</p>",
        "id": 152315502,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545380289
    },
    {
        "content": "<p>I will leave it to you and scott to figure out what needs fixing</p>",
        "id": 152315512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545380326
    },
    {
        "content": "<p>Done (finally): <a href=\"https://github.com/leanprover/mathlib/issues/550\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/550\">#550</a></p>",
        "id": 152317406,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545383044
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>.</p>",
        "id": 152320743,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1545387323
    }
]