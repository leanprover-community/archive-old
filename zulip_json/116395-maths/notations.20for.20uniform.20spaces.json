[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> and <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>. In relation to my work on sequential compactness and our filter.basic efforts, how would you like to see things like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">uniformity</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `ball_[` V `] ` x:55 := (prod.mk x) ‚Åª¬π&#39; V&quot;</span> <span class=\"k\">in</span> <span class=\"n\">uniformity</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;infix `‚óã`:55 := comp_rel&quot;</span> <span class=\"k\">in</span> <span class=\"n\">uniformity</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mem_ball_comp</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"bp\">√ó</span> <span class=\"n\">Œ±</span><span class=\"o\">)}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"err\">‚àà</span> <span class=\"n\">ball_</span><span class=\"o\">[</span><span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">‚àà</span> <span class=\"n\">ball_</span><span class=\"o\">[</span><span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">z</span> <span class=\"err\">‚àà</span> <span class=\"n\">ball_</span><span class=\"o\">[</span><span class=\"n\">V</span> <span class=\"err\">‚óã</span> <span class=\"n\">W</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">prod_mk_mem_comp_rel</span> <span class=\"n\">h</span> <span class=\"n\">h&#39;</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_open_iff_ball_subset</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_open</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üî</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">V</span> <span class=\"err\">‚àà</span> <span class=\"err\">ùì§</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">ball_</span><span class=\"o\">[</span><span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"n\">x</span> <span class=\"err\">‚äÜ</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">is_open_iff_mem_nhds</span><span class=\"o\">,</span> <span class=\"n\">nhds_eq_comap_uniformity</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">iff</span><span class=\"bp\">.</span><span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 194011266,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586947015
    },
    {
        "content": "<p>The circle thing is only bringing in Bourbaki's notation. The main goal here is the ball notation, trying to make it easier for our casual readers to bridge the gap from metric spaces to uniform spaces.</p>",
        "id": 194011342,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586947078
    },
    {
        "content": "<p>How about making a ball function instead?</p>",
        "id": 194011466,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586947137
    },
    {
        "content": "<p>I'm pinging S√©bastien and Yury because I hope they have an opinion, but of course everybody is welcome to answer.</p>",
        "id": 194011492,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586947158
    },
    {
        "content": "<p>including Gabriel.</p>",
        "id": 194011499,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586947165
    },
    {
        "content": "<p>I don't want a name clash with metric space balls. Although this notation suggests they are the same, type theory doesn't quite agree.</p>",
        "id": 194011610,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586947217
    },
    {
        "content": "<p>Actually even on paper <code>ball_[V]</code> is more general in metric spaces, because not every entourage belongs to the obvious basis.</p>",
        "id": 194011649,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586947253
    },
    {
        "content": "<p>why is this a notation?</p>",
        "id": 194011723,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586947297
    },
    {
        "content": "<p>instead of a function</p>",
        "id": 194011728,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586947302
    },
    {
        "content": "<p>Ok, give me a function name then.</p>",
        "id": 194011813,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586947346
    },
    {
        "content": "<p>(ball is not good enough, as I told Gabriel)</p>",
        "id": 194011829,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586947362
    },
    {
        "content": "<p>do we use the term <code>entourage</code>?</p>",
        "id": 194011834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586947367
    },
    {
        "content": "<p>Sure</p>",
        "id": 194011849,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586947376
    },
    {
        "content": "<p><code>uniform_space.ball</code>?</p>",
        "id": 194011851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586947378
    },
    {
        "content": "<p>At least in docstrings</p>",
        "id": 194011858,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586947381
    },
    {
        "content": "<p><code>entourage.ball</code>?</p>",
        "id": 194011864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586947385
    },
    {
        "content": "<p>This will clash as soon as the <code>metric</code> namespace is open</p>",
        "id": 194011905,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586947415
    },
    {
        "content": "<p>only if <code>uniform_space</code> is also open</p>",
        "id": 194011929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586947431
    },
    {
        "content": "<p><code>uball</code>?</p>",
        "id": 194011957,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586947443
    },
    {
        "content": "<p>I feel like this kind of argument defeats the purpose of namespaces</p>",
        "id": 194012028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586947484
    },
    {
        "content": "<p>yes, things will clash if you open too many namespaces at once. Maybe don't do that then</p>",
        "id": 194012061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586947522
    },
    {
        "content": "<p>It defeats it only when considering two namespaces that are likely to be open together.</p>",
        "id": 194012075,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586947537
    },
    {
        "content": "<p>or use qualified names when you need to</p>",
        "id": 194012076,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586947538
    },
    {
        "content": "<p>In this case I guess this will be common only in very foundational files.</p>",
        "id": 194012094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586947559
    },
    {
        "content": "<p>I should think this will only be in files about uniform spaces, that aren't also doing metric space stuff</p>",
        "id": 194012159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586947585
    },
    {
        "content": "<p>there might be one theorem about the relation between ball and uball and that's it</p>",
        "id": 194012176,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586947605
    },
    {
        "content": "<p>and I would definitely expect the use of qualified names in that theorem for clarity if nothing else</p>",
        "id": 194012222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586947657
    },
    {
        "content": "<p>also, the notation doesn't appear to be doing that much work for you. It doesn't seem any more readable than <code>ball V x</code></p>",
        "id": 194012374,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586947745
    },
    {
        "content": "<p>Oh sure, the brackets are here only because the parser doesn't like two variables in a row.</p>",
        "id": 194012598,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586947904
    },
    {
        "content": "<p>I mean what's wrong with simple application?</p>",
        "id": 194012660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586947936
    },
    {
        "content": "<p>I'll make a function anyway.</p>",
        "id": 194012668,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586947941
    },
    {
        "content": "<p>At least after reading some mathematical comments about all this.</p>",
        "id": 194012688,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586947966
    },
    {
        "content": "<p>Does this relate to a mathematical construction in the books? I mean I get why you call this a ball but is the notation ball_V x common?</p>",
        "id": 194012737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586948027
    },
    {
        "content": "<p>TBH I don't know many books that cover uniform spaces in the first place</p>",
        "id": 194012816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586948068
    },
    {
        "content": "<p>Not that I know, otherwise I wouldn't ask for comments.</p>",
        "id": 194012821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586948070
    },
    {
        "content": "<p>I only read Bourbaki on this topic, and they don't really care about readers who understand slowly.</p>",
        "id": 194012854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586948103
    },
    {
        "content": "<p>I usually use wikipedia as a source for formal math. It's pretty rare that I need to go beyond wikipedia level coverage on a library topic</p>",
        "id": 194013030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586948225
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Uniform_space#Entourage_definition\" title=\"https://en.wikipedia.org/wiki/Uniform_space#Entourage_definition\">https://en.wikipedia.org/wiki/Uniform_space#Entourage_definition</a> has the notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">V[x]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">]</span></span></span></span>.</p>",
        "id": 194013130,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586948285
    },
    {
        "content": "<p>Actually Bourbaki uses <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">V(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 194013235,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586948371
    },
    {
        "content": "<p>I suppose, if you defined <code>entourage A := set (A x A)</code> you could have a coe_to_fun so that <code>V x</code> means <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">V[x]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.22222em;\">V</span><span class=\"mopen\">[</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">]</span></span></span></span></p>",
        "id": 194013438,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586948513
    },
    {
        "content": "<p>that wouldn't be confusing at all</p>",
        "id": 194013485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586948527
    },
    {
        "content": "<p>Mario, you know coercions to functions don't work in Lean 3...</p>",
        "id": 194013535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586948584
    },
    {
        "content": "<p>they work for long enough for the demo</p>",
        "id": 194013609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586948646
    },
    {
        "content": "<p>That's true, but we are discussing things to include in mathlib here.</p>",
        "id": 194013626,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586948667
    },
    {
        "content": "<p>For mathlib, I wouldn't even bother with notations or functions for any of this, but maybe that's just me</p>",
        "id": 194013658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586948694
    },
    {
        "content": "<p>I mean uniform spaces have already muddled through all of this without the definition</p>",
        "id": 194013683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586948715
    },
    {
        "content": "<p>if we're talking about only what's needed to make the mathematical arguments work, this is all window dressing, <code>prod.mk x \\-1' V</code> works fine</p>",
        "id": 194013828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586948813
    },
    {
        "content": "<p>But this uniform_space.basic is really hard to read, for no good reason at all.</p>",
        "id": 194013829,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586948813
    },
    {
        "content": "<p>I think that advanced filter notation is what makes it the hardest to read</p>",
        "id": 194013866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586948850
    },
    {
        "content": "<p>more notations makes it harder to read, not easier</p>",
        "id": 194013889,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586948867
    },
    {
        "content": "<p>Which advanced filter notation?</p>",
        "id": 194013943,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586948886
    },
    {
        "content": "<p>all this clever stuff with map and le on filters</p>",
        "id": 194013965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586948911
    },
    {
        "content": "<p>This is not notation.</p>",
        "id": 194013979,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586948924
    },
    {
        "content": "<p>it's a definition for a more basic set level expression</p>",
        "id": 194014018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586948961
    },
    {
        "content": "<p>Yeah! We reached the Mario point! He didn't need all that in metamath <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 194014150,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586949068
    },
    {
        "content": "<p>It's all very \"clever\" in the bad sense of the word. Everyone struggles with it at first, and I'm not sure what has been gained; not proof length, not compilation speed, it is less characters in statements but that's a dubious gain if it means more definitions</p>",
        "id": 194014413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586949307
    },
    {
        "content": "<p>I would much prefer that uniform spaces look like the wikipedia definition</p>",
        "id": 194014511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586949371
    },
    {
        "content": "<p>I think Johannes went a bit too far in this direction in this file, but the overall idea is good.</p>",
        "id": 194015032,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586949777
    },
    {
        "content": "<p>I think the idea should be leveraged for shorter proofs where applicable, but shouldn't be in the definitions</p>",
        "id": 194015222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586949904
    }
]