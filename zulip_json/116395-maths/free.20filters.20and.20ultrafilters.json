[
    {
        "content": "<p>Does mathlib have stuff on free filters? The only thing I see is this about <code>filter.hyperfilter</code>.</p>",
        "id": 304178199,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1665828929
    },
    {
        "content": "<p>I can't find it but on an infinite type, a filter F is free iff <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.cofinite\">docs#filter.cofinite</a> (the Frechet filter) is contained in it (in mathlib notation, <code>F ‚â§ filter.cofinite</code>). It seems to me that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.principal\">docs#filter.principal</a><del>pure</del> is a Galois insertion from <code>set X</code> to <code>filter X</code> with adjoint given by taking intersection of all sets in a filter, which is apparently also missing in mathlib.</p>",
        "id": 304222948,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665852136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"224323\">@Junyan Xu</span> Do you mean <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.has_pure\">docs#filter.has_pure</a>? That one is for <code>X -&gt; filter X</code>, but I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.principal\">docs#filter.principal</a> is what corresponds to the adjunction between <code>set X</code> and <code>filter X</code>. The adjoint is known as the <em>kernel</em> of a filter, and I haven't seen it in mathlib.</p>",
        "id": 304224657,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665853242
    },
    {
        "content": "<p>Incidentally, I sometimes wish that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nhds\">docs#nhds</a> were defined to be a function <code>set X -&gt; filter X</code> such that <code>ùìù s</code> is the infimum of all the principal filters for open sets containing <code>s</code>. That way we'd have parallelism between <code>ùìü s</code> for plain filters and <code>ùìù s</code> for open filters.</p>\n<p>One application is that you can consider germs of continuous functions at arbitrary subsets <code>s</code> of a topological space, with the understanding that you're using (the open sets in) <code>ùìù s</code> for the directed system.</p>",
        "id": 304225372,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665853706
    },
    {
        "content": "<p>Thanks! Corrected my post.</p>",
        "id": 304226217,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665854259
    },
    {
        "content": "<p>So, should I takee this as an opportunity to open some PRs?</p>",
        "id": 304228151,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1665855491
    },
    {
        "content": "<p>You're welcome to!</p>",
        "id": 304228366,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665855639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"306601\">Kyle Miller</span> <a href=\"#narrow/stream/116395-maths/topic/free.20filters.20and.20ultrafilters/near/304225372\">said</a>:</p>\n<blockquote>\n<p>Incidentally, I sometimes wish that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nhds\">docs#nhds</a> were defined to be a function <code>set X -&gt; filter X</code> such that <code>ùìù s</code> is the infimum of all the principal filters for open sets containing <code>s</code>. </p>\n</blockquote>\n<p>We have this as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nhds_set\">docs#nhds_set</a></p>",
        "id": 304239129,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1665864005
    },
    {
        "content": "<p>I will rename hyperfilter to free_ultrafilter since this terminology is standard.</p>",
        "id": 304248106,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1665871896
    },
    {
        "content": "<p>So I'm trying to prove the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">free_ultrafilter_is_free</span> <span class=\"o\">:</span> <span class=\"bp\">‚ãÇ‚ÇÄ</span> <span class=\"o\">(</span><span class=\"n\">free_ultrafilter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àÖ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hcontra</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">ne_empty_iff_nonempty</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hcontra</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hmem</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">hcontra</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"bp\">‚Üë</span><span class=\"o\">(</span><span class=\"n\">free_ultrafilter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"bp\">‚Üë</span><span class=\"o\">(</span><span class=\"n\">free_ultrafilter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">free_ultrafilter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne_bot.le_pure_iff.mp</span> <span class=\"n\">hle</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">hcofinite</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">·∂ú.</span><span class=\"n\">finite</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">tauto</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">filter.mem_pure</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">heq</span><span class=\"o\">,</span> <span class=\"n\">free_ultrafilter</span><span class=\"o\">,</span> <span class=\"n\">cofinite</span><span class=\"o\">,</span> <span class=\"n\">has_mem.mem</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- STUCK HERE</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"n\">oops</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">·∂ú.</span><span class=\"n\">infinite</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_finite</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">·∂ú</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In the STUCK HERE part, I see <code>this: {x} x</code> in the tactic goal window. I don't know what to make of this. Any tips?</p>",
        "id": 304316659,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1665931456
    },
    {
        "content": "<p>Try dropping the has_mem.mem from the simp call</p>",
        "id": 304317244,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1665931937
    },
    {
        "content": "<p>But maybe the bigger issue is the <code>at this</code>?</p>",
        "id": 304317324,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1665932019
    },
    {
        "content": "<p>Yes, I can drop the has_mem.mem, but how do I make it simp to ({x} : set Œ±)·∂ú.finite ?</p>",
        "id": 304317628,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1665932248
    },
    {
        "content": "<p>What's the problem with <code>at this</code>?</p>",
        "id": 304317751,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1665932315
    },
    {
        "content": "<p><code>this : {x} x</code> might well mean the useless <code>x \\in {x}</code> because a set is implemented as a function.</p>",
        "id": 304318779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1665933031
    },
    {
        "content": "<p>Ah, I see.</p>",
        "id": 304318800,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1665933053
    },
    {
        "content": "<p>Oh, I was trying to take a look now that I'm at lean, but there seems to be a lot of code missing</p>",
        "id": 304345922,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1665949740
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"416322\">Bernd Losert</span> <a href=\"#narrow/stream/116395-maths/topic/free.20filters.20and.20ultrafilters/near/304248106\">said</a>:</p>\n<blockquote>\n<p>I will rename hyperfilter to free_ultrafilter since this terminology is standard.</p>\n</blockquote>\n<p>I don't understand that claim. Do you have any reference. I don't like the name <code>hyperfilter</code>, but for me free ultrafilter does not refer to this specific filter.</p>",
        "id": 304346439,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665950068
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperfilter_is_free</span> <span class=\"o\">:</span> <span class=\"bp\">‚ãÇ‚ÇÄ</span> <span class=\"o\">(</span><span class=\"n\">hyperfilter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àÖ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_contra</span> <span class=\"n\">hcontra</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">ne_empty_iff_nonempty</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hcontra</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hmem</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">hcontra</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hle</span> <span class=\"o\">:</span> <span class=\"bp\">‚Üë</span><span class=\"o\">(</span><span class=\"n\">hyperfilter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">‚â§</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">heq</span> <span class=\"o\">:</span> <span class=\"bp\">‚Üë</span><span class=\"o\">(</span><span class=\"n\">hyperfilter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">hyperfilter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne_bot.le_pure_iff.mp</span> <span class=\"n\">hle</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hcofinite</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">·∂ú.</span><span class=\"n\">finite</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">mem_singleton</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">mem_singleton</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span><span class=\"n\">filter.mem_pure</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span><span class=\"n\">heq</span><span class=\"o\">,</span> <span class=\"n\">ultrafilter.mem_coe</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">mem_singleton</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- ‚ä¢ {x} ‚àà hyperfilter Œ± ‚Üí {x}·∂ú.finite</span>\n    <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">oops</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">·∂ú.</span><span class=\"n\">infinite</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">oops</span> <span class=\"n\">hcofinite</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>And this is where my (nonexistent) knowledge of filters runs out - it seems like the definition of a hyperfilter is basically the other direction</p>",
        "id": 304347702,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1665950998
    },
    {
        "content": "<blockquote>\n<p>free ultrafilter does not refer to this specific filter.</p>\n</blockquote>\n<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/hyperfilter\">docs#hyperfilter</a> is just an arbitrarily chosen free ultrafilter?</p>",
        "id": 304357128,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665959681
    },
    {
        "content": "<p>Here's an easy proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span> <span class=\"c1\">--import order.filter.cofinite suffices for the theorem</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sInter_sets_eq_empty_iff_le_cofinite</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚ãÇ‚ÇÄ</span> <span class=\"n\">F.sets</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àÖ</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">F</span> <span class=\"bp\">‚â§</span> <span class=\"n\">cofinite</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"c1\">-- doesn't require infiniteness</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.sInter_eq_empty_iff</span><span class=\"o\">,</span> <span class=\"n\">le_cofinite_iff_compl_singleton_mem</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©‚ü©,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mem_of_superset</span> <span class=\"n\">hs</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">ne_of_mem_of_not_mem</span> <span class=\"n\">hb</span> <span class=\"n\">ha</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperfilter_is_free</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">‚ãÇ‚ÇÄ</span> <span class=\"o\">(</span><span class=\"n\">hyperfilter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àÖ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sInter_sets_eq_empty_iff_le_cofinite</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hyperfilter_le_cofinite</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">filter</span>\n</code></pre></div>",
        "id": 304358934,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665961648
    },
    {
        "content": "<p>So now I'm not sure that <code>free</code> should be a separate definition, since it's always equivalent to <code>F ‚â§ cofinite</code>.</p>",
        "id": 304359105,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1665961858
    },
    {
        "content": "<p>I was wondering where the name came from, and the <code>hyperfilter</code> was introduced back in <a href=\"https://github.com/leanprover-community/mathlib/pull/801\">mathlib#801</a> for the hyperreals.</p>",
        "id": 304365269,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1665968857
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/116395-maths/topic/free.20filters.20and.20ultrafilters/near/304357128\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>free ultrafilter does not refer to this specific filter.</p>\n</blockquote>\n<p>I think <a href=\"https://leanprover-community.github.io/mathlib_docs/find/hyperfilter\">docs#hyperfilter</a> is just an arbitrarily chosen free ultrafilter?</p>\n</blockquote>\n<p>Yes it is. So it's not a specific ultrafilter at all.</p>",
        "id": 304393632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665990344
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/116395-maths/topic/free.20filters.20and.20ultrafilters/near/304358934\">said</a>:</p>\n<blockquote>\n<p>Here's an easy proof:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span> <span class=\"c1\">--import order.filter.cofinite suffices for the theorem</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">sInter_sets_eq_empty_iff_le_cofinite</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚ãÇ‚ÇÄ</span> <span class=\"n\">F.sets</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àÖ</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">F</span> <span class=\"bp\">‚â§</span> <span class=\"n\">cofinite</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span> <span class=\"c1\">-- doesn't require infiniteness</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set.sInter_eq_empty_iff</span><span class=\"o\">,</span> <span class=\"n\">le_cofinite_iff_compl_singleton_mem</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">rfl</span><span class=\"o\">‚ü©‚ü©,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">‚ü®</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mem_of_superset</span> <span class=\"n\">hs</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">ne_of_mem_of_not_mem</span> <span class=\"n\">hb</span> <span class=\"n\">ha</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">hyperfilter_is_free</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">‚ãÇ‚ÇÄ</span> <span class=\"o\">(</span><span class=\"n\">hyperfilter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"bp\">=</span> <span class=\"bp\">‚àÖ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sInter_sets_eq_empty_iff_le_cofinite</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hyperfilter_le_cofinite</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">filter</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Please don't PR that statement since the wording <code>‚ãÇ‚ÇÄ F.sets</code> badly breaks the API barrier for filters.</p>",
        "id": 304393838,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1665990450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/free.20filters.20and.20ultrafilters/near/304393838\">said</a>:</p>\n<blockquote>\n<p>Please don't PR that statement since the wording <code>‚ãÇ‚ÇÄ F.sets</code> badly breaks the API barrier for filters.</p>\n</blockquote>\n<p>I don't understand why <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.supr_sets_eq\">docs#filter.supr_sets_eq</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.sInter_comap_sets\">docs#filter.sInter_comap_sets</a> etc. are allowed but this isn't. Any other options for writing down the same thing?</p>",
        "id": 304492959,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666020847
    },
    {
        "content": "<p>Use <code>\\in</code> notation, I think.</p>",
        "id": 304518025,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1666028084
    },
    {
        "content": "<p>You could state</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">s</span> <span class=\"bp\">‚àà</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">‚àâ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">F</span> <span class=\"bp\">‚â§</span> <span class=\"n\">cofinite</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>and then in the proof you needn't rewrite by <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.sInter_eq_empty_iff\">docs#set.sInter_eq_empty_iff</a>, but it's not the same statement (not even defeq), only equivalent, in my opinion.</p>",
        "id": 304521078,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1666028958
    },
    {
        "content": "<p>The easy fix is to state <code>‚ãÇ‚ÇÄ {U | U ‚àà F} = ‚àÖ ‚Üî F ‚â§ cofinite</code> which is defeq to your statement, so it has the same proof.</p>",
        "id": 304526462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666030489
    },
    {
        "content": "<p>A statement that is much more in the spirit of mathlib, but not obviously equivalent to yours is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">forall_finite_iff_le_cofinite</span> <span class=\"o\">{</span><span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"n\">s.finite</span> <span class=\"bp\">‚Üí</span> <span class=\"bp\">‚àÄ·∂†</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">‚àâ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">F</span> <span class=\"bp\">‚â§</span> <span class=\"n\">cofinite</span> <span class=\"o\">:=</span>\n<span class=\"o\">‚ü®</span><span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">le_cofinite_iff_compl_singleton_mem.mpr</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">to_finite</span><span class=\"o\">),</span>\n <span class=\"bp\">Œª</span> <span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">hs.eventually_cofinite_nmem.filter_mono</span> <span class=\"n\">h</span><span class=\"o\">‚ü©</span>\n</code></pre></div>",
        "id": 304526599,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1666030524
    },
    {
        "content": "<p>Also let me tell you that all this is secretly about <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bornology\">docs#bornology</a></p>",
        "id": 304578528,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1666048726
    },
    {
        "content": "<p>I never realized there was a connection with bornology. In any case, I need to talk about free filters, i.e. those satisfying ‚ãÇ‚ÇÄ {U | U ‚àà F} = ‚àÖ and I need to be able to choose a free ultrafilter finer than a given filter. I'm not sure what the best API design for this is. Should I add something like<code>free_ultrafilter.of</code> like we have with <code>ultrafilter.of</code>?</p>",
        "id": 305536722,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1666445358
    },
    {
        "content": "<p><code>bornology.of</code> maybe? for consistency</p>",
        "id": 305539451,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1666446663
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/free.20filters.20and.20ultrafilters/near/305539451\">said</a>:</p>\n<blockquote>\n<p><code>bornology.of</code> maybe? for consistency</p>\n</blockquote>\n<p>I don't like that, this doesn't tell you at all that this is about ultrafilters (and not just filters). Besides, we should really not use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bornology\">docs#bornology</a> as a way of talking about filters smaller than <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.cofinite\">docs#filter.cofinite</a>. Describing a bornology as a filter is a nice implementation trick and we should absolutely abuse it when talking about bornologies, but not the other way around. Also, I still think we should remove the \"smaller than <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cofinite\">docs#cofinite</a>\" condition for bornology, so please don't use it as a \"filter smaller than cofinite\" definition</p>",
        "id": 305544775,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1666449174
    },
    {
        "content": "<p>Agree. I don't want to have to invoke the technology of bornologies just to get a free ultrafilter.</p>",
        "id": 305562638,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1666458651
    }
]