[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> It doesn't look like we have pre-inner product spaces (i.e., where <code>λ x, ⟪x, x⟫</code> is not definite but only semi-definite. This will be an essential part of the Gelfand-Naimark-Segal construction of a cyclic representation from a state on a C^*-algebra. For this one needs the Cauchy-Schwarz inequality for pre-inner product spaces and other related results. Any thoughts about how to modify existing code to go about incorporating this?</p>",
        "id": 263510052,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638484878
    },
    {
        "content": "<p>For reference the argument of the GNS construction proceeds as follows: Given a C⋆-algebra <code>A</code> over <code>𝕜</code>, a state <code>φ : A → 𝕜</code> makes <code>A</code> itself into a pre-inner product space via <code>⟪a, b⟫ := φ a⋆ b</code>. Then one can quotient out by the closed left-ideal with carrier <code>{ a : A | φ a⋆ a = 0 }</code> (maybe it's a right-ideal since I normally think of inner products as being conjugate <br>\nlinear in the second coordinate, but <code>mathlib</code> does it in the first). Finally, one completes this inner product space to a Hilbert space <code>H</code>. Then one obtains a cyclic representation <code>ρ : A → (H →L[𝕜] H)</code> arising from the natural action of multiplication on <code>H</code> by elements of <code>A</code>.</p>",
        "id": 263510305,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638485033
    },
    {
        "content": "<p>Oh, actually, perhaps it's not strictly necessary after all. Instead maybe you can just define an inner product directly on <code>A/I</code> where <code>I</code> is the indicated ideal.</p>",
        "id": 263510950,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638485475
    },
    {
        "content": "<p>It would be nice to avoid it if possible, since currently inner product spaces extend normed spaces, so it can't be easily modified to extend pre-inner product spaces.</p>",
        "id": 263516951,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1638489030
    },
    {
        "content": "<p>Why can't preinner product spaces extend prenormed spaces?</p>",
        "id": 263517119,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638489197
    },
    {
        "content": "<p>I mean, it could definitely be done, but it sounds like a lot of work :-)</p>",
        "id": 263517210,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1638489276
    },
    {
        "content": "<p>Maybe it's not too bad: you could probably switch most of the current code with most of the basic lemmas to pre-inner product spaces instead.</p>",
        "id": 263517774,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1638489686
    },
    {
        "content": "<p>Meh, just a matter of copy-pasteing a file or two <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 263517785,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638489695
    },
    {
        "content": "<p>Yeah exactly. I could do that in a day or two.</p>",
        "id": 263517809,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638489713
    },
    {
        "content": "<p>Well, code duplication is exactly what I would want to avoid.</p>",
        "id": 263517830,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1638489723
    },
    {
        "content": "<p>Some boilerplate code will be duplicated, but lemmas shouldn't.</p>",
        "id": 263517880,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638489748
    },
    {
        "content": "<p>Right.</p>",
        "id": 263517892,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1638489758
    },
    {
        "content": "<p>Although if we're seriously considering a refactor of inner product spaces, there is also the question of whether we want to base them on bilinear forms. Now we could have <code>inner</code> be of type <code> E →ₗ⋆[𝕜] E →ₗ[𝕜] 𝕜</code>.</p>",
        "id": 263518059,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1638489881
    },
    {
        "content": "<p>Another option is to have <code>inner_hom</code> a bundled version of <code>inner</code>.</p>",
        "id": 263518142,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638489945
    },
    {
        "content": "<p>Yes -- see the big fat TODO right above <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_right\">docs#inner_right</a> :-)</p>",
        "id": 263518258,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1638490041
    },
    {
        "content": "<p>Either way should be fine for the infoview because everything is buried under notation, right? I wouldn't wish anyone to see an horrendous <code>⇑(⇑inner x) y</code>.</p>",
        "id": 263518396,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638490154
    },
    {
        "content": "<p>I'm still not sure it's worth the trouble though.</p>",
        "id": 263518574,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1638490300
    },
    {
        "content": "<p>Yeah, I would say not. I'm betting most of the time you can just take the quotient ahead of time like in this situation with <code>A/I</code>. If it becomes an issue we can always refactor/add this feature later.</p>",
        "id": 263522628,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638493424
    }
]