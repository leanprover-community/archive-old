[
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>\n<span class=\"k\">with</span>\n  <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">G</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span>\n</code></pre></div>\n<p>irregardless of the current cause, maybe <code>lean</code> (and any other programming language around there) could be so kind and notice that when it produces a “failed to unify” error message with identical pretty-printed code, and maybe add a polite sentence like “and I’m sorry for the unhelpful error message”.</p>",
        "id": 269864660,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643463393
    },
    {
        "content": "<p>usually it unfolds the definitions it if things pretty print the same, I'm not sure why it didn't here. the issue is that you have two <code>group</code> instances, btw</p>",
        "id": 269864691,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643463442
    },
    {
        "content": "<p>Hmm, maybe I am using <code>comm_group G</code> wrong then. How do I express that a group <code>G</code> for which I have <code>group G</code> is commutative? I didn't find a predicate  <code>G.abelian</code> or something like that.</p>",
        "id": 269864891,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643463656
    },
    {
        "content": "<p><code>⊤.is_commutative</code> is a bit roundabout</p>",
        "id": 269864908,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643463694
    },
    {
        "content": "<p>Ah, maybe <code>is_commutative G  (*)</code></p>",
        "id": 269864991,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643463787
    },
    {
        "content": "<p><code>cyclic</code> sort of has to deal with this a little, ctrl+f \"commutative\" <a href=\"https://leanprover-community.github.io/mathlib_docs/group_theory/specific_groups/cyclic.html\">here</a> to see some of what they do</p>",
        "id": 269865233,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643463952
    },
    {
        "content": "<p>If you're assuming <code>[comm_group G]</code> then don't assume <code>[group G]</code></p>",
        "id": 269865306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643464052
    },
    {
        "content": "<p>So is this reasonable?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">_root_.group.comm_group_of_center_eq_top</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">center</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">center</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">simp</span><span class=\"o\">,},</span>\n  <span class=\"n\">exact</span> <span class=\"o\">{</span> <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h'</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 269865371,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643464132
    },
    {
        "content": "<p>yeah, you can maybe golf it to this but otherwise fine:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">_root_.group.comm_group_of_center_eq_top</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">center</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">comm_group</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">center</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">in</span> <span class=\"o\">{</span> <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">h'</span> <span class=\"n\">y</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">..</span> <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 269865534,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1643464334
    },
    {
        "content": "<p>You would usually put the <code>comm_group.mk</code> outermost</p>",
        "id": 269865744,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643464615
    },
    {
        "content": "<p>Further refinements welcome at <a href=\"https://github.com/leanprover-community/mathlib/pull/11718\">https://github.com/leanprover-community/mathlib/pull/11718</a> :-)</p>",
        "id": 269865854,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643464750
    },
    {
        "content": "<p>Ah, this should probably be a <code>def</code>, not a <code>lemma</code>, if it returns <code>comm_group</code>, right?</p>",
        "id": 269865880,
        "sender_full_name": "Joachim Breitner",
        "timestamp": 1643464798
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"470149\">Joachim Breitner</span> <a href=\"#narrow/stream/116395-maths/topic/failed.20to.20unify/near/269864660\">said</a>:</p>\n<blockquote>\n<p>maybe add a polite sentence like “and I’m sorry for the unhelpful error message”.</p>\n</blockquote>\n<p>You're right that it would be good to have a more helpful error message here.  This kind of error — things that pretty-print to the same thing but aren't considered identical — often seems to be due to typeclass problems.  So maybe something could be added to the error message to direct the user to check their typeclasses?</p>",
        "id": 269879684,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643480241
    },
    {
        "content": "<p>(I'm assuming here that it's possible to automatically detect that the pp output is identical in these cases.)</p>",
        "id": 269879709,
        "sender_full_name": "Stuart Presnell",
        "timestamp": 1643480274
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/lean/blob/b99b2ec06a55fceaa396d03e1c2cc6821b5adf4e/src/library/tactic/apply_tactic.cpp#L220\">The error message is generated by <code>apply_tactic.cpp:220</code></a>, and there's similar code in <a href=\"https://github.com/leanprover-community/lean/blob/6f1b5639005a358db19f183c2d7296cebcb12b39/src/library/tactic/tactic_state.cpp#L513\"><code>tactic_state.cpp:513</code></a></p>",
        "id": 270013104,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1643626714
    }
]