[
    {
        "content": "<p>Hi all,</p>\n<p>I've been working on the Cantor-Bendixson theorem, following Chapter 6 of Kechris. I thought I'd share what I have here and ask what people think. The complete file is <a href=\"https://github.com/Felix-Weilacher/dst/blob/main/src/Cantor_Bendixson.lean\">here</a>.</p>\n<p>The main things are:</p>\n<p>A definition of a perfect subset of a topological space: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">perfect</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span> <span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"n\">is_closed</span> <span class=\"n\">C</span> <span class=\"bp\">‚àß</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"bp\">‚àà</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">U</span> <span class=\"bp\">‚àà</span> <span class=\"n\">nhds</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">y</span> <span class=\"bp\">‚àà</span> <span class=\"n\">U</span> <span class=\"bp\">‚à©</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">y</span> <span class=\"bp\">‚â†</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">perf_nonempty</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">set.nonempty</span> <span class=\"n\">C</span> <span class=\"bp\">‚àß</span> <span class=\"n\">perfect</span> <span class=\"n\">C</span>\n</code></pre></div>\n<p>Any perfect nonempty subset of a complete metric space contains a homeomorphic copy of the Cantor space: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_of_perf_nonempty</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hC</span> <span class=\"o\">:</span> <span class=\"n\">perf_nonempty</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">C</span> <span class=\"bp\">‚àß</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"bp\">‚àß</span> <span class=\"n\">injective</span> <span class=\"n\">f</span>\n</code></pre></div>\n<p>Any closed subset of a second countable space can be written as the union of a perfect set and a countable set:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">ctble_union_perfect_of_closed</span> <span class=\"o\">[</span><span class=\"n\">second_countable_topology</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hclosed</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">‚àÉ</span> <span class=\"n\">V</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">V.countable</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">perfect</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"bp\">‚àß</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"bp\">‚à™</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>Combining these two, any uncountable closed subset of a Polish space contains a homeomorphic copy of the Cantor space:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">cantor_of_closed_unc</span> <span class=\"o\">[</span><span class=\"n\">polish_space</span> <span class=\"n\">Œ±</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">Œ±</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hclosed</span> <span class=\"o\">:</span> <span class=\"n\">is_closed</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hunc</span> <span class=\"o\">:</span> <span class=\"bp\">¬¨</span> <span class=\"n\">C.countable</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">bool</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">‚äÜ</span> <span class=\"n\">C</span> <span class=\"bp\">‚àß</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"bp\">‚àß</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 305689631,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1666548177
    },
    {
        "content": "<p>It might be relevant to look at a recent discussion about accumulation points here <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Accumulation.20point\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Accumulation.20point</a> for the definition of perfect subsets</p>",
        "id": 305694161,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1666551338
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/116395-maths/topic/Cantor-Bendixson/near/305694161\">said</a>:</p>\n<blockquote>\n<p>It might be relevant to look at a recent discussion about accumulation points here <a href=\"#narrow/stream/217875-Is-there-code-for-X.3F/topic/Accumulation.20point\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there-code-for-X.3F/topic/Accumulation.20point</a> for the definition of perfect subsets</p>\n</blockquote>\n<p>I see, so <code>‚àÄ U ‚àà nhds x, ‚àÉ y ‚àà U ‚à© C, y ‚â† x</code> could be <code>(ùìù[‚â†] x ‚äì ùìü C).ne_bot</code> or  <code>‚àÉ·∂† y in ùìù[‚â†] x, y ‚àà C</code> ?</p>",
        "id": 305699776,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1666553569
    },
    {
        "content": "<p>Yes, exactly. Or <code>‚àÉ·∂† y in ùìù[C] x, y ‚â† x</code> which would match what you wrote.<br>\nOr if you are building some API around prefect subsets, maybe it would be a good occasion to introduce <code>accumulation_pt C x</code> or something like this if it makes sense to have API for that as well.</p>",
        "id": 305700593,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1666554083
    },
    {
        "content": "<p>By the way, is <code>‚Ñï ‚Üí bool</code> the best way to represent the Cantor space? There are a lot of 2 element types and I'm not sure which are preferred for which situations.</p>",
        "id": 311489638,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1669071749
    },
    {
        "content": "<p>I think bool is the only two-term type with a topological space instance by default, so I would say, yes!</p>",
        "id": 311495631,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669074911
    },
    {
        "content": "<p>we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sierpinski_space\">docs#sierpinski_space</a> as well, but that‚Äôs not the right topology</p>",
        "id": 311495673,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669074946
    },
    {
        "content": "<p>doesn't <code>fin n</code> have a topology?</p>",
        "id": 311495754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669074973
    },
    {
        "content": "<p>Does it?</p>",
        "id": 311495791,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669074998
    },
    {
        "content": "<p>(not that I disagree with your judgment here, just being pedantic)</p>",
        "id": 311495806,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669075009
    },
    {
        "content": "<p>I would expect it to be equipped with the discrete topology</p>",
        "id": 311495832,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669075025
    },
    {
        "content": "<p>otherwise stuff like R^n would not \"just work\"</p>",
        "id": 311495863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669075038
    },
    {
        "content": "<p>Sure it would, you don‚Äôt need a topology on the domain, but rather the codomain</p>",
        "id": 311495890,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669075063
    },
    {
        "content": "<p>oh, is it not using compact-open?</p>",
        "id": 311495903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669075075
    },
    {
        "content": "<p>No it‚Äôs the product topology</p>",
        "id": 311495960,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669075088
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/Pi.topological_space\">docs#Pi.topological_space</a></p>",
        "id": 311496005,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669075111
    },
    {
        "content": "<p>ah right, compact-open is for <code>C(A, B)</code></p>",
        "id": 311496057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669075142
    },
    {
        "content": "<p>but I think it probably still comes up when looking at those spaces in the finite dimensional case</p>",
        "id": 311496115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669075183
    },
    {
        "content": "<p>Doesn't <code>Prop</code> also get a topology by default?</p>",
        "id": 311496726,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1669075456
    },
    {
        "content": "<p>it does but it's the sierpinski topology</p>",
        "id": 311496751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669075474
    },
    {
        "content": "<p>Hmm, that instance is badly named, then.</p>",
        "id": 311496824,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1669075521
    },
    {
        "content": "<p>really? It's literally called <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sierpinski_space\">docs#sierpinski_space</a> which seems apt</p>",
        "id": 311496903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669075558
    },
    {
        "content": "<p>There's no <code>Prop</code> in the name! Every time I've looked for a topology on Prop, I look for <code>Prop.topological_space</code>, which doesn't exist, so surely it does not have a topology. But clearly it does, so it must come from another instance through the order.</p>",
        "id": 311497113,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1669075673
    },
    {
        "content": "<p>If it was called <code>Prop.topological_space</code> it would be a lot less obvious that it's the sierpinski topology</p>",
        "id": 311497281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669075767
    },
    {
        "content": "<p>That's what docstrings are for.</p>",
        "id": 311497302,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1669075791
    },
    {
        "content": "<p>who looks at docstrings on instances?</p>",
        "id": 311497371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669075817
    },
    {
        "content": "<p><code>sierpinski_space</code> sounds like the topology given to a type synonym, not the topology given to <code>Prop</code> itself.</p>",
        "id": 311497379,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1669075824
    },
    {
        "content": "<p>I do, for a fact.</p>",
        "id": 311497382,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1669075828
    },
    {
        "content": "<p>I mean I'm sure that's a self-fulfilling prophecy</p>",
        "id": 311497387,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669075836
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Ya√´l Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Cantor-Bendixson/near/311497379\">said</a>:</p>\n<blockquote>\n<p><code>sierpinski_space</code> sounds like the topology given to a type synonym, not the topology given to <code>Prop</code> itself.</p>\n</blockquote>\n<p>I think this is the deeper issue. I'm curious whether the topology has ever been used in mathlib, and if so whether it was an error</p>",
        "id": 311497555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669075940
    },
    {
        "content": "<p>it strikes me as something that was added just because the sierpinski space is cool</p>",
        "id": 311497606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1669075985
    },
    {
        "content": "<p>Oh actually, doesn't that make the compact-open topology on <code>Œ± ‚Üí Prop</code> the correct topology on <code>set Œ±</code>?</p>",
        "id": 311498191,
        "sender_full_name": "Ya√´l Dillies",
        "timestamp": 1669076346
    },
    {
        "content": "<p>The whole point of the Sierpinski space is that continuous functions from X to it correspond to open sets in X.</p>",
        "id": 311498843,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669076779
    },
    {
        "content": "<p>I don't really understand what you mean by the '\"correct\" topology on <code>set X</code>, and you also didn't restrict to continuous maps.</p>",
        "id": 311498909,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669076840
    },
    {
        "content": "<p>I think I used this space somewhere in the context of profinite sets (I don't remember if this was in LTE or mathlib)</p>",
        "id": 311498951,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1669076872
    },
    {
        "content": "<p>I used it <a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/homotopy_theory/topological_spaces/pushout_lemmas.lean\">here</a> to prove that a pushout of an embedding is an embedding.</p>",
        "id": 311521289,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669095611
    },
    {
        "content": "<p>I'm confused why one would look for instances by name rather than using <code>#check infer_instance</code> or whatever.</p>",
        "id": 311521314,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669095633
    },
    {
        "content": "<p>In general, the Sierpinski space is quite useful for working out the topology of colimits because maps from X into it correspond to open sets of X as mentioned above, and a colimit X is defined in terms of how to map out of it.</p>",
        "id": 311522574,
        "sender_full_name": "Reid Barton",
        "timestamp": 1669096654
    },
    {
        "content": "<p>(If one is looking by name, is there anything wrong with adding the name <code>Prop.topological_space_sierpinski</code>?)</p>",
        "id": 311539612,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1669105226
    }
]