[
    {
        "content": "<p>It's silly talking about IMO2019 in three different threads none of which are in <a class=\"stream\" data-stream-id=\"116395\" href=\"/#narrow/stream/116395-maths\">#maths</a>  . When I was a kid I always used to feel that \"every geometry problem can be solved using coordinates\". Is that true? I would imagine this sort of thing is well-understood nowadays. My feeling was that you just bash everything out and you end up having to prove something of the form X=X. What is actually going on? In particular, is the analytic approach to Q2 and Q6 \"doomed to succeed\" in some sense?</p>",
        "id": 172254134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564688542
    },
    {
        "content": "<p><a href=\"https://www.imo-official.org/year_info.aspx?year=2019\" target=\"_blank\" title=\"https://www.imo-official.org/year_info.aspx?year=2019\">https://www.imo-official.org/year_info.aspx?year=2019</a></p>",
        "id": 172254150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564688556
    },
    {
        "content": "<p>Didn't Tarski prove that Euclidean geometry is decidable? That's what you were alluding to with the <code>dec_trivial</code>, right?</p>",
        "id": 172254202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564688613
    },
    {
        "content": "<p>The <code>dec_trivial</code> was about the graph theory problem, which is indeed a finite search problem...</p>",
        "id": 172254288,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564688664
    },
    {
        "content": "<p>Aah, right. So nr2 and nr6 are also <code>dec_trivial</code></p>",
        "id": 172254327,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564688709
    },
    {
        "content": "<p>Great, so only two problems left!</p>",
        "id": 172255126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564689358
    },
    {
        "content": "<p>And Reid has nearly done one of them</p>",
        "id": 172255213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564689373
    },
    {
        "content": "<p>I don't know anything about IMO, but I guess proofs by <code>dec_trivial</code> do not qualify. Would you get points for transcribing an exhaustive search or something like that? Or is it a virtual question because this would take way too much time in practice?</p>",
        "id": 172262252,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564694135
    },
    {
        "content": "<p>Yes exactly, it will probably take longer than the lifespan of the earth to do it by <code>dec_trivial</code>. But of course this is just a tedious implementation issue.</p>",
        "id": 172264463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564695908
    },
    {
        "content": "<p>Actually maybe the geometry ones could really be done by just bashing out the algebra. I've done olympiad problems in the past that way. It was the only technique I knew :-)</p>",
        "id": 172264503,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564695943
    },
    {
        "content": "<p>See also <a href=\"https://dpt-info.u-strasbg.fr/~narboux/area_method.html\" target=\"_blank\" title=\"https://dpt-info.u-strasbg.fr/~narboux/area_method.html\">https://dpt-info.u-strasbg.fr/~narboux/area_method.html</a></p>",
        "id": 172264604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564696002
    },
    {
        "content": "<p>random hit from google \"formalization area method\"</p>",
        "id": 172264638,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1564696044
    },
    {
        "content": "<p>Manual Eberl's Isabelle effort for Q1 -- much shorter. <a href=\"http://downthetypehole.de/paste/4YbGgqb4\" target=\"_blank\" title=\"http://downthetypehole.de/paste/4YbGgqb4\">http://downthetypehole.de/paste/4YbGgqb4</a></p>",
        "id": 172266496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564697981
    },
    {
        "content": "<p>I see some <code>auto</code> and some <code>blast</code> in there; can Kevin or Reid tell us \"which parts\" of their proofs are being handled by these?</p>",
        "id": 172268233,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1564699557
    },
    {
        "content": "<p>The <code>auto</code> on line 24 corresponds to the stuff I do starting <code>have hf₀ := hf 0 0,</code> in order to solve the equations <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>c</mi><mn>2</mn></msup><mo>=</mo><mn>2</mn><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c^2 = 2c</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathdefault\">c</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mi>d</mi><mo>=</mo><mi>c</mi><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">2d=cd</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathdefault\">d</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">c</span><span class=\"mord mathdefault\">d</span></span></span></span></p>",
        "id": 172271548,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564703425
    },
    {
        "content": "<p>I don't see how the <code>blast</code> on line 34 does anything interesting at all, it looks like we did all the work earlier</p>",
        "id": 172271598,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564703506
    },
    {
        "content": "<p>Some of the other <code>auto</code>/<code>simp</code> handles some linear combinations of equations and algebraic simplification which I wasn't too happy about in my version</p>",
        "id": 172271664,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564703550
    },
    {
        "content": "<p>Making good progress on IMO 2019-4: <a href=\"https://gist.github.com/fpvandoorn/e0bd9d116a59a5f01d1d661f3677b72f\" target=\"_blank\" title=\"https://gist.github.com/fpvandoorn/e0bd9d116a59a5f01d1d661f3677b72f\">https://gist.github.com/fpvandoorn/e0bd9d116a59a5f01d1d661f3677b72f</a></p>\n<p>The main argument is there. The main missing ingredient is that <code>multiplicity 2 n.fact &lt; n</code>, i.e. there are less than <code>n</code> factors of <code>2</code> in <code>n!</code>.</p>",
        "id": 172273695,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564706033
    },
    {
        "content": "<p>I think your sorried lemmas about multiplicity already exist for <code>padic_val</code>, is that known to be the same as <code>multiplicity</code>?</p>",
        "id": 172274847,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564707498
    },
    {
        "content": "<p>The theorem about the multiplicity of primes in factorials was discussed here around the end of May I think</p>",
        "id": 172275121,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564707849
    },
    {
        "content": "<p>Though I don't think anyone proved it</p>",
        "id": 172275122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564707863
    },
    {
        "content": "<p><code>padic_val</code> is defined in terms of <code>multiplicity</code>.</p>",
        "id": 172285437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564724643
    },
    {
        "content": "<blockquote>\n<p>The main argument is there. The main missing ingredient is that <code>multiplicity 2 n.fact &lt; n</code>, i.e. there are less than <code>n</code> factors of <code>2</code> in <code>n!</code>.</p>\n</blockquote>\n<p>I'm having a go at this, but note that the actual sorried lemma in the gist is false for n=0</p>",
        "id": 172297354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564740356
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">padics</span> <span class=\"n\">imo2019_4</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">two_prime</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">aux1</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">padic_val_rat</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"bp\">=</span> <span class=\"n\">padic_val_rat</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">padic_val_rat</span> <span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- side conditions</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">fact_pos</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c1\">-- I have no shame</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">aux2</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">padic_val_rat</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">show</span> <span class=\"n\">padic_val_rat</span> <span class=\"mi\">2</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">padic_val_rat_of_int</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">enat</span><span class=\"bp\">.</span><span class=\"n\">get_zero</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">multiplicity</span><span class=\"bp\">.</span><span class=\"n\">multiplicity_eq_zero_of_not_dvd</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"bp\">@</span><span class=\"n\">zero_ne_one</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_mod_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">%</span> <span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">hc</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mod_two_of_bodd</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span>    <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now pick up the pieces</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">two_adic_val_fact_even</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">padic_val_rat</span> <span class=\"mi\">2</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">padic_val_rat</span> <span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">padic_val_rat</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"n\">padic_val_rat</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">aux1</span><span class=\"o\">,</span> <span class=\"n\">aux1</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">mul</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">padic_val_rat_self</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"n\">d</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">aux1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">aux2</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">try</span> <span class=\"o\">{</span><span class=\"n\">norm_cast</span><span class=\"o\">},</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">two_adic_val_fact_odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">padic_val_rat</span> <span class=\"mi\">2</span> <span class=\"o\">((</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fact</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">padic_val_rat</span> <span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">aux1</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">two_adic_val_fact_even</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">zero_add</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">aux2</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">even_or_odd</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">∨</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">c</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hd</span> <span class=\"k\">with</span> <span class=\"n\">e</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">right</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">he</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">he</span><span class=\"o\">,</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">two_adic_val_fact</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">padic_val_rat</span> <span class=\"mi\">2</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">padic_val_rat</span> <span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">even_or_odd</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">two_adic_val_fact_even</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_div_cancel</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">two_adic_val_fact_odd</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n      <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_mul_div_left</span><span class=\"o\">],</span> <span class=\"n\">convert</span> <span class=\"n\">zero_add</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">},</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">easy</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">even_or_odd</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_div_right</span><span class=\"o\">],</span> <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_mul_div_left</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">dec_trivial</span><span class=\"o\">),</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span> <span class=\"c1\">-- finally!</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">two_adic_val_fact_lt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">padic_val_rat</span> <span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">revert</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">strong_induction_on</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">padic_val_rat</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">padic_val_rat</span><span class=\"bp\">.</span><span class=\"n\">one</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">two_adic_val_fact</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">hm</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"o\">(</span><span class=\"n\">add_lt_add_left</span> <span class=\"n\">this</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">easy</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_lt_iff_lt_mul&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_two</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_add_of_zero_lt_left</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- now pick up the pieces</span>\n    <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">div_eq_zero_iff</span> <span class=\"n\">at</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hc</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>There's the proof for p=2 but using padic_val_rat. It's dirty but it works. Now I need to convince Lean that multiplicity (taking values in enat) and padic_val_rat (taking values in int) are the same...</p>",
        "id": 172299653,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564743663
    },
    {
        "content": "<p>Isn't <code>padic_val</code> defined in terms of <code>multiplicity</code>? So I would hope that after unfolding some definitions <code>norm_cast</code> can do this.</p>",
        "id": 172299936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564744028
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>h1 : ↑((multiplicity ↑2 ↑(nat.fact n)).get _) &lt; ↑n\n⊢ multiplicity 2 (nat.fact n) &lt; ↑n\n</pre></div>\n\n\n<p><code>h1</code> is about <code>int</code>, and the goal is about <code>enat</code>. What do you think?</p>",
        "id": 172299959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564744073
    },
    {
        "content": "<p>the <code>get</code> is <code>roption.get</code></p>",
        "id": 172300009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564744094
    },
    {
        "content": "<p>hmm, <code>h1</code> might be a coe from nat to int</p>",
        "id": 172300032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564744190
    },
    {
        "content": "<p><code>rw coe_lt_coe at h1</code>?</p>",
        "id": 172300682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564745026
    },
    {
        "content": "<p>Where is the proof that goes into the <code>get _</code>?</p>",
        "id": 172300732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564745053
    },
    {
        "content": "<p>The problem is the <code>_</code>. I've made progress.</p>",
        "id": 172300734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564745057
    },
    {
        "content": "<p>Yes exactly, one has to supply that proof explicitly it seems.</p>",
        "id": 172300746,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564745070
    },
    {
        "content": "<p><code>convert h1; exact option.some_get _</code>?</p>",
        "id": 172300755,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564745082
    },
    {
        "content": "<p>Because <code>rw [← enat.coe_get ThatProof, enat.coe_lt_coe]</code> will also help.</p>",
        "id": 172300758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564745085
    },
    {
        "content": "<p>convert h1 fails horribly with goals like int = enat</p>",
        "id": 172300773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564745106
    },
    {
        "content": "<p>I'm making progress though.</p>",
        "id": 172300785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564745118
    },
    {
        "content": "<p>Ah, there is also <code>multiplicity.nat_eq_int</code> or whatever.</p>",
        "id": 172300791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564745129
    },
    {
        "content": "<p>There's some int coercions i didn't see.</p>",
        "id": 172300792,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564745130
    },
    {
        "content": "<p>So there's a lemma to prove about multiplicity being preseved along injective monoid homs I guess.</p>",
        "id": 172300840,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1564745178
    },
    {
        "content": "<p><code>int.coe_nat_multiplicity</code></p>",
        "id": 172300841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564745179
    },
    {
        "content": "<p>I've got it down to</p>\n<div class=\"codehilite\"><pre><span></span>⊢ ∀ (m : enat) (n : ℕ) (h : m.dom), m.get h &lt; n → m &lt; ↑n\n</pre></div>",
        "id": 172301602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564746176
    },
    {
        "content": "<p>I'm hoping this is true, because modulo this I have </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">multiplicity_two_fact_lt</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">multiplicity</span> <span class=\"mi\">2</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"n\">fact</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>which is hopefully enough for <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  (note h)</p>",
        "id": 172301772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564746367
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">aux_53</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">dom</span><span class=\"o\">),</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">h</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">enat</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"o\">),</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 172301941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564746547
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/4ca88f429bda4744fd038f7471ebfb67\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/4ca88f429bda4744fd038f7471ebfb67\">https://gist.github.com/kbuzzard/4ca88f429bda4744fd038f7471ebfb67</a></p>\n<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  -- it's a mess, but hopefully it helps.</p>",
        "id": 172302042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564746642
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"213273\">@Paul-Nicolas Madelaine</span> I used <code>norm_cast</code> 11 times! Thank you so much!</p>",
        "id": 172302099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564746716
    },
    {
        "content": "<blockquote>\n<p>Because <code>rw [← enat.coe_get ThatProof, enat.coe_lt_coe]</code> will also help.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> does this help <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 172302168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564746763
    },
    {
        "content": "<p>Ooh, wait. You already found a proof.</p>",
        "id": 172302186,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1564746791
    },
    {
        "content": "<p>Yes, what you and Chris said helped a great deal.</p>",
        "id": 172302191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564746805
    },
    {
        "content": "<p>Yes, there are no sorries in the gist.</p>",
        "id": 172302208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564746834
    },
    {
        "content": "<p>It feels a bit dirty not doing something for general p (I guess <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>&gt;</mo><mn>0</mn><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><msub><mi>v</mi><mi>p</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo><mo>&lt;</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><mo stretchy=\"false\">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n &gt;0 \\implies v_p(n!)&lt;n/(p-1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66844em;vertical-align:-0.024em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">!</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mord\">/</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>) but we only need it for p=2 for the IMO problem.</p>",
        "id": 172302267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564746899
    },
    {
        "content": "<p>p=2 makes life much easier because one doesn't have to venture into rat.</p>",
        "id": 172302295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564746930
    },
    {
        "content": "<p>and one can just use the dirty fact that every integer is either even or odd, and the 2-adic valuation of an odd integer is 0. The general proof will be more painful for both of these reasons.</p>",
        "id": 172302377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564747046
    },
    {
        "content": "<p>I'm going to leave this now because unfortunately I have literally hundreds of unread emails which need dealing with, but this experience showed me that we seem to be missing a bunch of lemmas all over the place.</p>",
        "id": 172302438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564747104
    },
    {
        "content": "<p>I used <code>padic_val_rat</code> because results like <code>padic_val_rat.mul</code> were proved (which are not true for general n-adic valuations if n isn't irreducible). Is there an analogous result for multiplicity in e.g. a UFD?</p>",
        "id": 172302546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564747222
    },
    {
        "content": "<p>If there is then I suspect that one could have used multiplicity all the way through, but I suspect it would have been no easier or harder. The proof needs a huge tidy.</p>",
        "id": 172302572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564747277
    },
    {
        "content": "<p>Looks like a good start though. There was some discussion earlier about the best way to even write down the answer <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mo>∑</mo><mrow><mi>j</mi><mo>≥</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">⌊</mo><mi>n</mi><mi mathvariant=\"normal\">/</mi><msup><mi>p</mi><mi>j</mi></msup><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{j \\ge 1} \\lfloor n/p^j \\rfloor</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.260482em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mopen\">⌊</span><span class=\"mord mathdefault\">n</span><span class=\"mord\">/</span><span class=\"mord\"><span class=\"mord mathdefault\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span></span></span></span><span class=\"mclose\">⌋</span></span></span></span>.<br>\nYour <code>two_adic_val_fact (d : ℕ) : padic_val_rat 2 d.fact = d / 2 + padic_val_rat 2 (d / 2).fact</code> is a nice intermediate statement to aim for (for general <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span></span></span></span>) and sometimes it might be the most convenient form to use as well.</p>",
        "id": 172304815,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564749778
    },
    {
        "content": "<p>That was the reason I put the time in. I was initially thinking \"eew, you can't prove this by induction, it's kind of nasty\" but then when I realised that the intermediate statement was provable by the case split into even and odd and then induction, and the result we needed followed from that and strong induction, I thought I'd go for it. Probably I should have done everything using <code>multiplicity</code>.</p>",
        "id": 172304988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1564749946
    },
    {
        "content": "<p>Right, I see in a couple places you did 2 things where in general you would have to do <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span></span></span></span> things. But it's probably not that hard to do little inductions from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mo>∗</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">p*n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6597200000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">n</span></span></span></span> up to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>p</mi><mo>∗</mo><mi>n</mi><mo>+</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">p*n + r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6597200000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>≤</mo><mi>r</mi><mo>&lt;</mo><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">0 \\le r &lt; p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span></span></span></span></p>",
        "id": 172306775,
        "sender_full_name": "Reid Barton",
        "timestamp": 1564751366
    },
    {
        "content": "<p>Very nice, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>. Thanks! I indeed have the assumption that <code>n &gt; 0</code>, so adding that assumption (that I missed) is indeed no problem.</p>",
        "id": 172315319,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564757859
    },
    {
        "content": "<p>I finished the proof of IMO 2019-4! <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span> <a href=\"https://gist.github.com/fpvandoorn/e0bd9d116a59a5f01d1d661f3677b72f\" target=\"_blank\" title=\"https://gist.github.com/fpvandoorn/e0bd9d116a59a5f01d1d661f3677b72f\">https://gist.github.com/fpvandoorn/e0bd9d116a59a5f01d1d661f3677b72f</a></p>\n<p>Not all lemmas I prove in that file are used. Once I started proving lemma's about multiplicity/enat/roption, I decided to also prove all similar missing lemmas. I'll PR them to mathlib at some point.</p>",
        "id": 172340008,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564777733
    },
    {
        "content": "<p>I'm importing Kevin's file in that Gist.</p>",
        "id": 172340039,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564777762
    },
    {
        "content": "<p>Should we have a leanprover-community/lean-imo repository?</p>",
        "id": 172340053,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1564777785
    },
    {
        "content": "<p>That's one possibility. <br>\nI will make a PR to mathlib soon adding a new top-level folder where we can put one-off projects like this. I think when we talked about this earlier the consensus was to have projects like these in mathlib, but not in the <code>src/</code> folder, so that we can make sure that files like this keep compiling.</p>",
        "id": 172380057,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1564787232
    },
    {
        "content": "<p>IMO2019-4 just appeared in the AFP along with 1 and 5. I guess it's the year of the contest problem...</p>",
        "id": 172610110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1565112750
    },
    {
        "content": "<p>Yeah, Manuel Eberl saw me going on about Q1 on Twitter.</p>",
        "id": 172610149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565112774
    },
    {
        "content": "<p><a href=\"https://mathoverflow.net/questions/337558/automatically-solving-olympiad-geometry-problems?noredirect=1#comment844402_337558\" target=\"_blank\" title=\"https://mathoverflow.net/questions/337558/automatically-solving-olympiad-geometry-problems?noredirect=1#comment844402_337558\">https://mathoverflow.net/questions/337558/automatically-solving-olympiad-geometry-problems?noredirect=1#comment844402_337558</a> That was me trying to work out how to do Q2 and Q6</p>",
        "id": 172610233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565112823
    },
    {
        "content": "<p>Manuel was even seen here at the time we were discussing IMO</p>",
        "id": 172615638,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565115866
    },
    {
        "content": "<p>For the record, Kevin:</p>\n<blockquote>\n<p>See also <a href=\"https://dpt-info.u-strasbg.fr/~narboux/area_method.html\" target=\"_blank\" title=\"https://dpt-info.u-strasbg.fr/~narboux/area_method.html\">https://dpt-info.u-strasbg.fr/~narboux/area_method.html</a></p>\n</blockquote>",
        "id": 172615675,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1565115903
    },
    {
        "content": "<p>Aah, that link makes a lot more sense now I know what the area method is! Thanks Patrick. Sorry I missed it the first time around. So maybe the Coq people can do Q2?</p>",
        "id": 172621304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1565119947
    }
]