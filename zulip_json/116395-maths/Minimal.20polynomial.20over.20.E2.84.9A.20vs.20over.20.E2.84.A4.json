[
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/issues/5006\">#5006</a> I proved that the minimal polynomial over any GCD domain is the same  as the minimal polynomial over its field of fractions. Now I want to use it to say that the minimal polynomial of an algebraic integer, over <code>ℤ</code>, is the same as the minimal polynomial over <code>ℚ</code>. Something like in the following code (there is a <code>sorry</code> in <code>gcd_domain_eq_field_fractions</code> because it needs other results, but in <a href=\"https://github.com/leanprover-community/mathlib/issues/5006\">#5006</a> it is proved. If you are wondering why the <code>@is_integral...</code> is because without that it doesn't work)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.minimal_polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.localization</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">ℤ</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">ℚ</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gcd_domain_eq_field_fractions</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">gcd_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fraction_map</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">f.codomain</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"n\">f.codomain</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">minimal_polynomial</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_integral_of_is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"n\">f.codomain</span> <span class=\"n\">γ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span>\n  <span class=\"o\">(</span><span class=\"n\">localization_map.to_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">int.cast_ring_hom</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">hint</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">minimal_polynomial</span> <span class=\"n\">halg</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">gcd_domain_eq_field_fractions</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">fraction_map.int.fraction_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">z</span> <span class=\"n\">hint</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>It seems that the second lemma should be an immediate consequence of the first one, but I am not able to prove it. I want to prove it using <code>fraction_map.int.fraction_map</code>, but Leans complains with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n<span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">ℤ</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n<span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">ℚ</span> <span class=\"n\">z</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"n\">localization_map.codomain</span> <span class=\"n\">fraction_map.int.fraction_map</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span>\n</code></pre></div>\n<p>I see that at some point I have to prove some compatibility between <code>polynomial.map (int.cast_ring_hom ℚ)</code> and <code>polynomial.map\n  (localization_map.to_ring_hom fraction_map.int.fraction_map)</code> but I am stuck before getting to it: I do not know how to say that <code>localization_map.codomain fraction_map.int.fraction_map</code> is<code>ℚ</code>, so we have the required algebra structure on <code>ℂ</code>.</p>\n<p>Any help is appreciated, thank you!</p>",
        "id": 217004166,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605621026
    },
    {
        "content": "<p>Does something like this work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">int.cast_ring_hom</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">hint</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">minimal_polynomial</span> <span class=\"n\">halg</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"n\">localization_map.codomain</span> <span class=\"n\">fraction_map.int.fraction_map</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n    <span class=\"k\">show</span> <span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">gcd_domain_eq_field_fractions</span> <span class=\"n\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"n\">fraction_map.int.fraction_map</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">z</span> <span class=\"n\">hint</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217006063,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1605622075
    },
    {
        "content": "<p>I think this might show that we've been using too much bundling for localization maps?</p>",
        "id": 217006608,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605622341
    },
    {
        "content": "<p>If <code>is_localization</code> were a predicate assuming <code>[algebra R A]</code>, then we wouldn't have those <code>g.codomain</code>s that throw sand in the type class inference machine.</p>",
        "id": 217006693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605622394
    },
    {
        "content": "<p>Yeah, now that <code>is_scalar_tower</code> exists, we should be able to get rid of the <code>codomain</code> trick.</p>",
        "id": 217007228,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1605622620
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  Now it asks to prove <code>scalar_tower</code>, that should follow from <code>is_scalar_tower.int</code>. I am trying to understand what you wrote to prove this.</p>",
        "id": 217008818,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605623335
    },
    {
        "content": "<p>I tried with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">int.cast_ring_hom</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">hint</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">minimal_polynomial</span> <span class=\"n\">halg</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"n\">localization_map.codomain</span> <span class=\"n\">fraction_map.int.fraction_map</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n\n  <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">localization_map.codomain</span> <span class=\"n\">fraction_map.int.fraction_map</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">is_scalar_tower.int</span> <span class=\"o\">(</span><span class=\"n\">localization_map.codomain</span> <span class=\"n\">fraction_map.int.fraction_map</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">gcd_domain_eq_field_fractions</span> <span class=\"n\">fraction_map.int.fraction_map</span> <span class=\"n\">hint</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>But it says</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n<span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">ℤ</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n<span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">ℚ</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n<span class=\"n\">_inst</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"n\">localization_map.codomain</span> <span class=\"n\">fraction_map.int.fraction_map</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">localization_map.codomain</span> <span class=\"n\">fraction_map.int.fraction_map</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">is_scalar_tower.int</span> <span class=\"o\">(</span><span class=\"n\">localization_map.codomain</span> <span class=\"n\">fraction_map.int.fraction_map</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">localization_map.codomain</span> <span class=\"n\">fraction_map.int.fraction_map</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span>\n<span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">ℤ</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n<span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">ℚ</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n<span class=\"n\">_inst</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"o\">(</span><span class=\"n\">localization_map.codomain</span> <span class=\"n\">fraction_map.int.fraction_map</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"k\">show</span> <span class=\"n\">algebra</span> <span class=\"n\">ℚ</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">localization_map.codomain</span> <span class=\"n\">fraction_map.int.fraction_map</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span>\n  <span class=\"n\">is_scalar_tower.int</span> <span class=\"o\">(</span><span class=\"n\">localization_map.codomain</span> <span class=\"n\">fraction_map.int.fraction_map</span><span class=\"o\">)</span> <span class=\"n\">ℂ</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">polynomial.map</span> <span class=\"o\">(</span><span class=\"n\">int.cast_ring_hom</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">hint</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">minimal_polynomial</span> <span class=\"n\">halg</span>\n</code></pre></div>\n<p>I guess I will just prove it by hand, without using the general result :D</p>",
        "id": 217010444,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605624006
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> Really, we should try to fix the library so that you can apply the general result in a 1-liner.</p>",
        "id": 217013210,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605625099
    },
    {
        "content": "<p>I agree that  having a proposition <code>is_localization</code> for an algebra is much more close to what I have in mind, but I don't know  how much work it requires.</p>",
        "id": 217015552,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605626124
    },
    {
        "content": "<p>By the way, I would be very happy to help in doing this!</p>",
        "id": 217036107,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605634650
    },
    {
        "content": "<p>If someone is still interested in this I managed to make it working. This  should be useful to at least understand what can be improved in <code>ring_theory/localization</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.minimal_polynomial</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory.localization</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">char_zero</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hint</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">ℤ</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">halg</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">ℚ</span> <span class=\"n\">z</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gcd_domain_eq_field_fractions</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">gcd_monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">fraction_map</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">f.codomain</span> <span class=\"n\">γ</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">α</span> <span class=\"n\">γ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hto</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"n\">f.codomain</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">is_integral</span> <span class=\"n\">α</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">minimal_polynomial</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_integral_of_is_scalar_tower</span> <span class=\"n\">α</span> <span class=\"n\">f.codomain</span> <span class=\"n\">γ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"o\">((</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">hx</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">localization_map.to_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">int.cast_ring_hom</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">minimal_polynomial</span> <span class=\"n\">hint</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">minimal_polynomial</span> <span class=\"n\">halg</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">localization_map.to_ring_hom</span> <span class=\"n\">fraction_map.int.fraction_map</span> <span class=\"bp\">=</span> <span class=\"n\">int.cast_ring_hom</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">h₁</span><span class=\"o\">,</span>\n  <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">gcd_domain_eq_field_fractions</span> <span class=\"n\">fraction_map.int.fraction_map</span> <span class=\"n\">_</span> <span class=\"n\">hint</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">algebra.smul_def</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ring_hom.eq_int_cast</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_int_cast</span><span class=\"o\">,</span> <span class=\"n\">ring_hom.map_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">ring</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Note that <code>is_scalar_tower</code> in the first lemma is now an assumption rather than an instance, so I can use <code>refine</code> (I tried all the various <code>letI</code> <code>haveI</code>, but they don't work).</p>\n<p>I think that the main problem using the codomain trick is that lean uses <code>fraction_map.int.fraction_map</code> to consider <code>ℚ</code> a <code>ℤ</code>-algebra in the lemma, but use the obvious structure otherwise. This leads to very confusing things to prove, for example at some point I had to prove <code>(x • y) • z = x • y • z</code> and I managed to prove <code>(x • y) • z = x • y • z</code>... except that the <code>•</code> where not the same...  and <code>set_option pp.implicit true</code> produced a gigantic practically unreadable output.</p>\n<p>Note that the result <code>localization_map.to_ring_hom fraction_map.int.fraction_map = int.cast_ring_hom ℚ</code> and should probably be added,  the problem with the algebra structure would not be solved simply by this.</p>",
        "id": 217914580,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606324997
    },
    {
        "content": "<p>So what exactly is the suggestion here? Rather than <code>localization_map</code>, we want to say that an <code>algebra</code> instance is a localization? How do we relate it to the set <code>S</code>?</p>",
        "id": 218166533,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606573910
    },
    {
        "content": "<p>I guess <code>is_localization</code> would still be an ordinary proposition and not an instance?</p>",
        "id": 218166592,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606573991
    },
    {
        "content": "<p>In the non-additive setting, we still have <code>is_scalar_tower</code> but nothing like <code>algebra</code> I guess. Also, <code>localization_map</code> makes sense even for <code>R</code> (and <code>S</code>) noncommutative but we don't have <code>algebra</code> in that situation either.</p>",
        "id": 218166733,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606574201
    },
    {
        "content": "<p>I think we should refactor <code>localization</code> in such a way that <code>is_localization</code> is a proposition for an <code>algebra</code>. If you look in the source code there is this trick with <code>codomain</code> that I don't understand completely. I am thinking about it, but it is the first time I try to do something like that (instead of proving a \"normal\" theorem), so I am (very) slow and I would appreciate any suggestion :)</p>",
        "id": 218166753,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606574253
    },
    {
        "content": "<p>I've been (also very slowly) working on generalizing localization to Ore localization and handling localization of modules, so this will intersect what I'm doing at some point.</p>",
        "id": 218166806,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606574306
    },
    {
        "content": "<p>It seems like we can write something like <code>is_localization R A S : Prop</code> to mean that <code>algebra_map</code> from <code>R</code> to <code>A</code> can be made into a <code>localization_map</code> at <code>S</code>, right?</p>",
        "id": 218166920,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606574448
    },
    {
        "content": "<p>I guess <code>R</code> is redundant, since it's determined by <code>S</code>, but maybe it's nice to include it anyways</p>",
        "id": 218166933,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606574466
    },
    {
        "content": "<p>I am still in the process of reading the source code (that also use localization for monoids) to decide what to do.</p>",
        "id": 218167013,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606574616
    },
    {
        "content": "<p>Currently <code>localization_map</code> extends <code>ring_hom</code> by some propositional fields, so we could split those propositional fields into a new <code>is_localization_map</code> and define <code>is_localization</code> for algebras by applying that to <code>algebra_map</code></p>",
        "id": 218167015,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606574626
    },
    {
        "content": "<p>I think at the end what we need is something like a proposition<code>is_localization (R A  M: Type*) [comm_ring R] [comm_ring A] [algebra R A] (M : submonoid R)</code></p>",
        "id": 218167068,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606574678
    },
    {
        "content": "<p>And just an ordinary proposition, not a class, right?</p>",
        "id": 218167080,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606574703
    },
    {
        "content": "<p>at least, we can start with an ordinary proposition</p>",
        "id": 218167091,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606574734
    },
    {
        "content": "<p>To be honest I have no idea about this kind of details, my plan was to ask here :D</p>",
        "id": 218167092,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606574737
    },
    {
        "content": "<p>For special cases like \"is the fraction field of\", maybe it makes sense to have a class</p>",
        "id": 218167149,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606574801
    },
    {
        "content": "<p>Defining the proposition is really easy, as you said it suffices to use <code>algebra_map</code>.  It is the part of working with classes/structures/instances that scares me a little bit.</p>",
        "id": 218167697,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606575642
    },
    {
        "content": "<p>It might make sense to do this for <code>ring_hom</code> instead of <code>algebra_map</code>. (I'm maybe still too biased towards comm. algebra)</p>",
        "id": 218169880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1606579229
    },
    {
        "content": "<p>You mean defining <code>is_localization (R A  M: Type*) [comm_ring R] [comm_ring A] (M : submonoid R) (f : R →+* S)</code>?  This is exactly the kind of questions I have no idea how to answer, in my head this and <code>is_localization (R A  M: Type*) [comm_ring R] [comm_ring A] [algebra R A] (M : submonoid R)</code> are exactly the same thing.</p>",
        "id": 218171656,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606582371
    }
]