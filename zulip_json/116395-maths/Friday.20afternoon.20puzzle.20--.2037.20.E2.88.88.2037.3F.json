[
    {
        "content": "<p>At Xena yesterday I was too quick with my use of <code>use</code>, accidentally using <code>37</code> for a set of reals. But it worked! Shing noted that <code>set \\R</code> now has zero, one and add, so numerals work. This reminds me a bit of ZFC, where the corresponding result is false. Puzzle: is it true in Lean?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">foo</span>\n\n<span class=\"c1\">-- all these work fine</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span>\n<span class=\"c1\">-- so numerals work too</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">foo</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">37</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">37</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- ⊢ 37 ∈ 37</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217417614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605887194
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.singleton_one\">docs#set.singleton_one</a> also looks scarily non-well-founded.</p>",
        "id": 217418357,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605887510
    },
    {
        "content": "<p>Maybe it would make sense to put basically this whole file in a <code>locale</code>?</p>",
        "id": 217418582,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605887585
    },
    {
        "content": "<p>e.g. <code>open_locale pointwise</code> to get these instances</p>",
        "id": 217418641,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605887618
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">silly</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat.succ_eq_add_one</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set.add_mem_add</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">n_ih</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set.one_mem_one</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"mi\">37</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"mi\">37</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">silly</span> <span class=\"mi\">37</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217418942,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605887729
    },
    {
        "content": "<p>Also, tidy proves it...</p>",
        "id": 217418997,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605887747
    },
    {
        "content": "<p>here is the proof tidy finds:</p>\n<p>use 37,<br>\n  use 37,<br>\n  fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { refl }, refl } }, fsplit, work_on_goal 1 { fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { refl }, refl } }, refl } } }, fsplit, work_on_goal 1 { fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { refl }, refl } }, fsplit, work_on_goal 1 { fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { refl }, refl } }, refl } } }, refl } } }, refl } }, fsplit, work_on_goal 1 { fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { refl }, refl } }, fsplit, work_on_goal 1 { fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { refl }, refl } }, refl } } }, fsplit, work_on_goal 1 { fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { refl }, refl } }, fsplit, work_on_goal 1 { fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { refl }, refl } }, refl } } }, refl } } }, refl } }, refl } } }, fsplit, work_on_goal 1 { fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { refl }, refl } }, fsplit, work_on_goal 1 { fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { refl }, refl } }, refl } } }, fsplit, work_on_goal 1 { fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { refl }, refl } }, fsplit, work_on_goal 1 { fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { refl }, refl } }, refl } } }, refl } } }, refl } }, fsplit, work_on_goal 1 { fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { refl }, refl } }, fsplit, work_on_goal 1 { fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { refl }, refl } }, refl } } }, fsplit, work_on_goal 1 { fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { refl }, refl } }, fsplit, work_on_goal 1 { fsplit, work_on_goal 0 { fsplit, work_on_goal 1 { simp at *, fsplit, work_on_goal 0 { refl }, refl } }, refl } } }, refl } } }, refl } }, refl } } }, refl } } }, refl },</p>",
        "id": 217419098,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605887774
    },
    {
        "content": "<p>In ZFC, <code>37 ∈ 38</code>...</p>",
        "id": 217419134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605887790
    },
    {
        "content": "<p>or, without following the misleading second <code>use</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">solve_by_elim</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 217419243,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605887842
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat.cast_zero</span><span class=\"o\">,</span> <span class=\"n\">set.mem_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">hn</span><span class=\"o\">⟩,}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217419250,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1605887846
    },
    {
        "content": "<p>I didn't really expect anything beyond entertainment to come from this post, but actually maybe Reid has a point. I remember <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  being a bit concerned about defining addition on <code>set A</code> too (A something with +)</p>",
        "id": 217419372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605887897
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_bit0</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">bit0</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mem_bit1</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit1</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">bit1</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">bit0</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">mem_bit0</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">one_mem_one</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"mi\">37</span><span class=\"o\">],</span>\n  <span class=\"n\">solve_by_elim</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mem_bit1</span><span class=\"o\">,</span> <span class=\"n\">mem_bit0</span><span class=\"o\">,</span> <span class=\"n\">one_mem_one</span><span class=\"o\">,</span> <span class=\"n\">zero_mem_zero</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">max_depth</span> <span class=\"o\">:=</span> <span class=\"mi\">6</span><span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217420439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605888275
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>(practicing minimizing skills)</p>",
        "id": 217420828,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605888434
    },
    {
        "content": "<p>I just wanted to post that one</p>",
        "id": 217420848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605888445
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> Yeah, you're getting scary</p>",
        "id": 217420872,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605888460
    },
    {
        "content": "<p>spoiler alert:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">set.singleton_zero</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hn</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217421033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605888535
    },
    {
        "content": "<p>Amusing as this is, I agree with Reid that the pointwise instances on set should be hidden in a locale.</p>",
        "id": 217424486,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605889874
    },
    {
        "content": "<p>IIRC Mario's objection was that one could imagine a scenario where one has a local definition of addition on subsets of X (e.g. when making them a boolean ring, when you might want + to mean xor), and then you'd have problems if X accidentally also had an addition.</p>",
        "id": 217424920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605890042
    },
    {
        "content": "<p>With a view towards further developments, the boolean structure on subsets often shows up in explicit representations of 2-torsion points on hyperelliptic curves.  In such cases, the underlying set X could very well be a field.  Would that be an issue?</p>",
        "id": 217426634,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605890623
    },
    {
        "content": "<p>(in the example of hyperelliptic curves, the 2-torsion points might be subsets of ramification points, or rather 2-set partitions of the ramification points)</p>",
        "id": 217426787,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605890682
    },
    {
        "content": "<p>If we end up <em>not</em> moving these, should we add <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>'s bit0 lemmas as <code>norm_cast</code>?</p>",
        "id": 217427376,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605890904
    },
    {
        "content": "<p>Johann's lemmas do not mention <code>coe</code>, so they can't be <code>norm_cast</code>.  But an <code>↔</code> version should be simp.</p>",
        "id": 217430327,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1605892100
    },
    {
        "content": "<p>To add to the silliness of the Friday afternoon: <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> 's first lemma can be proved as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mem_bit0</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">bit0</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">bit0</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">fconstructor</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›,</span> <span class=\"o\">},</span>\n  <span class=\"n\">fconstructor</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>For me, it is the first time that <code>fconstructor</code> closes a goal, I think.</p>",
        "id": 217431473,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605892634
    },
    {
        "content": "<p>See if you can get <code>split</code> to close a goal :-)</p>",
        "id": 217434817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605894166
    },
    {
        "content": "<p>Ahaha!  I was wondering whether I was more surprised by <code>fconstructor</code> or  <code>split</code> and went for <code>fconstructor</code>!</p>",
        "id": 217435469,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605894472
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/116395-maths/topic/Friday.20afternoon.20puzzle.20--.2037.20.E2.88.88.2037.3F/near/217430327\">said</a>:</p>\n<blockquote>\n<p>Johann's lemmas do not mention <code>coe</code>, so they can't be <code>norm_cast</code>.  But an <code>↔</code> version should be simp.</p>\n</blockquote>\n<p>Sadly, the <code>iff</code> version isn't true. For example <code>bit0 2 \\mem bit0 {1,3}</code></p>",
        "id": 217435813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605894633
    },
    {
        "content": "<p>I'd never really internalised this {1}=1 thing but I was just working on valuations this evening and proving lemmas about trivial valuations. I noticed this was missing:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">subgroup.closure_eq_bot_iff</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">closure</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"bp\">↔</span> <span class=\"n\">S</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>so I tried <code>simp</code> and it changed the RHS to <code>S ⊆ 1</code>. Meh :-/</p>",
        "id": 217443765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605898614
    },
    {
        "content": "<p>I was surprised to see that <code>0 = {0}</code> in that definition. I would have guessed <code>0 = empty</code></p>",
        "id": 217455473,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605904421
    },
    {
        "content": "<p>which for me is enough to suggest that these should not be simp normal form, because they are not universal enough</p>",
        "id": 217455565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605904459
    },
    {
        "content": "<p>as for <code>1 : set A</code> I just have no idea what that should mean. It could mean <code>univ</code> if you treat <code>set A</code> as a boolean algebra and notate the top and bottom with 0 and 1. (We don't, but some books do and this would be a source of confusion)</p>",
        "id": 217455714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605904563
    },
    {
        "content": "<p>Sorry for beating to death this thread, but I got hung up on the <code>tidy</code> proof and while trying to make sense of it, I realized that Lean either subtracts 1 or divides by 2, when the number is even (see below).  Why is that?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">36</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>  <span class=\"c1\">--here Lean subtracts 1</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">set.mem_one</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">18</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">18</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>  <span class=\"c1\">--here Lean divides by 2</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">set.mem_one</span><span class=\"o\">,</span> <span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩⟩,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">,</span> <span class=\"n\">and_true</span><span class=\"o\">,</span> <span class=\"n\">and_self</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">set.mem_one.mpr</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I would have imagined that Lean would have subtracted 1 all the way.</p>",
        "id": 217493616,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605951311
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.numerals</span> <span class=\"n\">false</span>\n\n<span class=\"k\">#check</span> <span class=\"mi\">37</span> <span class=\"c1\">-- bit1 (bit0 (bit1 (bit0 (bit0 has_one.one)))) : ℕ</span>\n</code></pre></div>\n<p>Lean stores numerals internally as binary.</p>",
        "id": 217493688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605951466
    },
    {
        "content": "<p>Ah!  So this proof is a more clunky version of Johan's, right?  Thanks for the explanation!</p>",
        "id": 217493732,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605951497
    },
    {
        "content": "<p>Btw, Lean tells me </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"mi\">37</span>  <span class=\"c1\">-- 37 : ℕ</span>\n</code></pre></div>\n<p>I do not see the binaries...</p>",
        "id": 217493756,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605951566
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1000000000</span> <span class=\"bp\">+</span> <span class=\"mi\">1000000000</span> <span class=\"bp\">=</span> <span class=\"mi\">2000000000</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- works</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1000000</span> <span class=\"bp\">+</span> <span class=\"mi\">2000000</span> <span class=\"bp\">=</span> <span class=\"mi\">3000000</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- times out</span>\n</code></pre></div>\n<p>I was surprised the first time I saw this.</p>",
        "id": 217493764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605951590
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/Friday.20afternoon.20puzzle.20--.2037.20.E2.88.88.2037.3F/near/217493756\">said</a>:</p>\n<blockquote>\n<p>Btw, Lean tells me </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"mi\">37</span>  <span class=\"c1\">-- 37 : ℕ</span>\n</code></pre></div>\n<p>I do not see the binaries...</p>\n</blockquote>\n<p>That's because you didn't do what I did.</p>",
        "id": 217493812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605951624
    },
    {
        "content": "<p>Sorry, I missed the first line of your code... <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 217493832,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605951666
    },
    {
        "content": "<p>The <code>pp.</code> options just control what the pretty printer outputs (the infoview).</p>",
        "id": 217493836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605951670
    },
    {
        "content": "<p>The elaborator turns <code>37</code> into some internal representation, and the pretty printer turns it back into the 37.</p>",
        "id": 217493845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605951701
    },
    {
        "content": "<p>Thanks for the explanation!</p>",
        "id": 217493894,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605951753
    },
    {
        "content": "<p>I think that at some point in my Lean education someone told me about <code>set_option pp.all true</code>, which means \"print out what Lean is really thinking\", and the realisation that I could do this suddenly taught me a lot about what was going on internally. Sometimes you think \"Lean why are you so slow\", but then when you turn on <code>pp.all</code> you discover that it is manipulating gigantic terms.</p>",
        "id": 217493956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605951867
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">37</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217493972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605951913
    },
    {
        "content": "<p>I had a similar realization when I found out about <code>show_term</code> and started using it on all the lines of my code!</p>",
        "id": 217493973,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605951916
    },
    {
        "content": "<p>I will explore <code>set_option pp.all true</code> now!</p>",
        "id": 217493977,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605951925
    },
    {
        "content": "<p>Try it in the middle of a commutative algebra proof and you might get a bit of a shock!</p>",
        "id": 217493978,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605951940
    },
    {
        "content": "<p>Already I can see that I no longer have to guess how many <code>_</code> I have to use in a <code>refine ⟨_, _, ...⟩</code> expression!</p>",
        "id": 217494043,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605952046
    },
    {
        "content": "<p>PS re <code>pp.all</code> -- the infoview actually makes things a bit worse here. In the old days when we just had text output, the <code>pp.all</code>output was really nicely formatted. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">pp.all</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"mi\">37</span> <span class=\"bp\">=</span> <span class=\"mi\">37</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>The error here has really nice spacing (especially if you make the infoview window big).</p>",
        "id": 217494047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605952049
    },
    {
        "content": "<p>This <code>set_option</code> really seems to clarify lots of things that were obscure in the \"digested\" view on the right</p>",
        "id": 217494107,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605952184
    },
    {
        "content": "<p>Try <code>#help options</code> .</p>",
        "id": 217494154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605952217
    },
    {
        "content": "<p>I now need to look back at all the code that I wrote, turning this on!</p>",
        "id": 217494156,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605952218
    },
    {
        "content": "<p>Those give you all the options you can play with. I have never used 95% of them :-) Many are just for people debugging Lean.</p>",
        "id": 217494166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605952264
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Friday.20afternoon.20puzzle.20--.2037.20.E2.88.88.2037.3F/near/217494154\">said</a>:</p>\n<blockquote>\n<p>Try <code>#help options</code> .</p>\n</blockquote>\n<p>This means that I can do <code>set_option</code> and then any one of the things that this outputs, right?</p>",
        "id": 217494172,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605952279
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Friday.20afternoon.20puzzle.20--.2037.20.E2.88.88.2037.3F/near/217494166\">said</a>:</p>\n<blockquote>\n<p>Those give you all the options you can play with. I have never used 95% of them :-) Many are just for people debugging Lean.</p>\n</blockquote>\n<p>Ok, thanks!</p>",
        "id": 217494176,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605952291
    },
    {
        "content": "<p>Right. But for the mathematician end user, most of these are not helpful.</p>",
        "id": 217494184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605952312
    },
    {
        "content": "<p>Things like <code>pp.all</code> help a huge amount when you can't close <code>x = x</code> with <code>rfl</code> though. You can find out yourself exactly what went wrong.</p>",
        "id": 217494226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605952349
    },
    {
        "content": "<p>If you see that one side has an <code>_inst_1</code> in and the other side an <code>_inst_5</code> that's when you realise that you have two abelian group structures on something.</p>",
        "id": 217494232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605952380
    },
    {
        "content": "<p>Yes, I can see exactly where this would have helped with the <code>order_dual</code> stuff</p>",
        "id": 217494252,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605952439
    },
    {
        "content": "<p>When lean is computing <code>max</code> and I have no idea if it means max or min!</p>",
        "id": 217494297,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605952478
    },
    {
        "content": "<p>Oh yeah, then you would have been able to see exactly what was going on. I'm sorry I didn't look at that issue more carefully.</p>",
        "id": 217494298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605952482
    },
    {
        "content": "<p>Do not worry: this way I used alone <code>convert refl _</code> for the first time!</p>",
        "id": 217494310,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605952542
    },
    {
        "content": "<p>My feeling is that this sort of thing might be solved best by making stuff <code>irreducible</code>. But I didn't think too carefully. If <code>order_dual X = X</code> then that's fine, but then if some tactic manages to actually _change_ <code>order_dual X</code> back to <code>X</code> then that's when you're in trouble.</p>",
        "id": 217494354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605952576
    },
    {
        "content": "<p>When I was working with valuations and groups with 0, we would be working with <code>with_zero X</code> and sometimes this would magically change to <code>option X</code> because <code>with_zero X</code> is defined to be <code>option X</code> but of course you want it to always stay as <code>with_zero X</code> to remind both you and Lean that it's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>∪</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">X\\cup\\{0\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span></span></span></span> rather than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span> plus some arbitrary extra thing. But sometimes a tactic like <code>simp</code> might change <code>with_zero X</code> to <code>option X</code> and suddenly things are confusing (especially if you are also using <code>with_bot</code> or <code>with_top</code> or whatever). I fixed this by making <code>with_zero</code> irreducible and then things were much better, but also a bunch of proofs broke so I had to fix them :-)</p>",
        "id": 217494474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605952752
    },
    {
        "content": "<p>When I will have some time, I will look into <code>irreducible</code>: what you describe seems very relevant!</p>",
        "id": 217494579,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605952878
    },
    {
        "content": "<p>But once we'd got things working again, stuff was better because Lean wasn't doing this incorrect unfolding. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">order_dual</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>This definition is fine, but the problem is that when later on Lean is trying to guess what a type is, the elaborator might guess wrong, and think you mean alpha instead of order_dual alpha. Because they are definitionally equal, an <code>order_dual X</code> might accidentally turn back into an <code>X</code> and now all of a sudden max = min and things become impossible to work with. Marking <code>order_dual</code> irreducible will stop this happening.</p>",
        "id": 217494590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605952913
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">order_dual</span> <span class=\"c1\">-- def order_dual :</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">with_zero</span> <span class=\"c1\">-- @[irreducible] def with_zero : ...</span>\n</code></pre></div>\n<p><code>order_dual</code> isn't irreducible. It was only relatively recently we realised that this sort of thing could really help. The reals weren't irreducible for a while, and then occasionally Lean would think \"I know, let's consider this real as an equivalence class of Cauchy sequences of rationals\", which is 100% never what you want to do. Probably more things should be irreducible -- it guides Lean in the right direction.</p>",
        "id": 217494727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605953061
    },
    {
        "content": "<p>The idea is that you make the definition, make the API with it not irreducible (so e.g. you can prove transitivity of <code>&lt;</code> on <code>order_dual X</code> from transitivity of <code>&gt;</code> on <code>X</code>) and then make it irreducible at the end of the file. Then in other files making API, you temporarily make it semireducible so you can do these tricks again if you need them.</p>",
        "id": 217494809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605953191
    },
    {
        "content": "<p>But end users shouldn't be needing to unfold it, they should have all the lemmas they need from the API, and should be imagining <code>order_dual X</code> as in some sense being a completely different object to <code>X</code> -- even the map from <code>X</code> to <code>order_dual X</code> should have a name which isn't <code>id</code>.</p>",
        "id": 217494835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605953248
    },
    {
        "content": "<p>Ok, I am not at the computer right now, but will look into this as soon as I am!  Thanks!</p>",
        "id": 217494838,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605953250
    },
    {
        "content": "<p>(because <code>id</code> won't work any more if <code>order_dual</code> is irreducible). This is the price you pay, but it makes you write more principled code.</p>",
        "id": 217494844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605953272
    },
    {
        "content": "<p>Yes, what you describe is very close to what I experienced!</p>",
        "id": 217494885,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1605953286
    },
    {
        "content": "<p>Damiano, note that <code>pp.all</code> is much less needed now that we have info view widgets. The advantage of widgets is you can choose what to display instead of getting overwhelmed by <code>pp.all</code>. If you don't understand what I mean then you can post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> where you feel <code>pp.all</code> helps you and I'll explain how to get the same information from widgets.</p>",
        "id": 217498102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1605958696
    },
    {
        "content": "<p>I think it's easier to do diffing on a type mismatch with pp.all than with the goal view</p>",
        "id": 217498517,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605959479
    },
    {
        "content": "<p>it's also easier to post a pp.all expression in zulip</p>",
        "id": 217498570,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605959553
    },
    {
        "content": "<p>particularly if you don't know what you are looking for</p>",
        "id": 217498575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605959579
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.pointwise</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h4</span> <span class=\"o\">:</span> <span class=\"mi\">4</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h8</span> <span class=\"o\">:</span> <span class=\"mi\">8</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"mi\">8</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"mi\">4</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h9</span> <span class=\"o\">:</span> <span class=\"mi\">9</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"mi\">9</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">8</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h8</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h18</span> <span class=\"o\">:</span> <span class=\"mi\">18</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"mi\">18</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"mi\">9</span><span class=\"o\">,</span> <span class=\"n\">h9</span><span class=\"o\">,</span> <span class=\"n\">h9</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h36</span> <span class=\"o\">:</span> <span class=\"mi\">36</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"mi\">36</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">18</span><span class=\"o\">,</span> <span class=\"mi\">18</span><span class=\"o\">,</span> <span class=\"n\">h18</span><span class=\"o\">,</span> <span class=\"n\">h18</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h37</span> <span class=\"o\">:</span> <span class=\"mi\">37</span> <span class=\"bp\">∈</span> <span class=\"o\">(</span><span class=\"mi\">37</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"mi\">36</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">h36</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">h37</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217499245,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1605960624
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.pointwise</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">bit1</span><span class=\"o\">,</span> <span class=\"n\">bit0</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">set.singleton_one</span><span class=\"o\">,</span> <span class=\"n\">set.singleton_add_singleton</span><span class=\"o\">,</span> <span class=\"n\">set.mem_singleton</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217503661,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1605968362
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.pointwise</span>\n\n<span class=\"kd\">meta</span> <span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"n\">tactic</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"bp\">`</span><span class=\"o\">[{</span><span class=\"n\">apply</span> <span class=\"n\">set.add_mem_add</span><span class=\"bp\">;</span> <span class=\"n\">foo</span><span class=\"o\">}</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">set.one_mem_one</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∈</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"mi\">37</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">foo</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 217503734,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1605968453
    },
    {
        "content": "<p>Sorry for the silly questions, but what are widgets?</p>",
        "id": 217505966,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605972439
    },
    {
        "content": "<p>Also... does <code>37 ∈ 37</code> mean that sets in lean are not well founded  or am I missing something obvious?</p>",
        "id": 217506145,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605972764
    },
    {
        "content": "<p>It's not <code>37 ∈ 37</code>, it's <code>37 ∈ \\uparrow 37</code>, right?</p>",
        "id": 217506217,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1605972881
    },
    {
        "content": "<p>The two <img alt=\":37:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18469.png\" title=\"37\"> s mean different things</p>",
        "id": 217506222,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605972903
    },
    {
        "content": "<p>Ah OK, that's reassuring :D</p>",
        "id": 217506224,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605972905
    },
    {
        "content": "<p>Any type which has a <code>0</code>, a <code>1</code> and an <code>+</code> automatically gets a <code>37</code>. In this case this was unintentional, and the joke was to work out what this set actually was. Turns out it's <code>{37}</code>.</p>",
        "id": 217506802,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605973877
    },
    {
        "content": "<p>I see, <code>set ℕ</code> is a monoid with <code>1</code>, it makes sense.</p>",
        "id": 217506959,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1605974157
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/Friday.20afternoon.20puzzle.20--.2037.20.E2.88.88.2037.3F/near/217505966\">said</a>:</p>\n<blockquote>\n<p>Sorry for the silly questions, but what are widgets?</p>\n</blockquote>\n<p>Widgets are a way of viewing arbitrary html in the goal view due to <span class=\"user-mention\" data-user-id=\"121918\">@Edward Ayers</span>. In vscode this is what allows us to click terms in the goal view and repeatedly click on subterms and go to definition, and gives the nice highlighting of subterms.</p>",
        "id": 217516030,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1605988356
    }
]