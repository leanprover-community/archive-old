[
    {
        "content": "<p>(splitting a thread away from PR Reviews for greater visibility)</p>",
        "id": 231441451,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616491364
    },
    {
        "content": "<p>What would be the disadvantages of switching from an algebraic hierarchy design where <code>comm_X</code> extends <code>X</code>, for every <code>X</code> (like we have now) to a design with a <code>[comm X]</code> mixin?</p>",
        "id": 231441524,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616491424
    },
    {
        "content": "<p>We're treading scarily close to exponential blowup in the algebraic hierarchy, with the recent desire to start talking about non-unital and non-associative rings.</p>",
        "id": 231441616,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616491471
    },
    {
        "content": "<p>(e.g. Lie algebras, algebras of functions vanishing at infinity, etc. etc. These are legitimate objects. :-)</p>",
        "id": 231441643,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616491495
    },
    {
        "content": "<p>One small disadvantage is a slight increase in verbosity, but it barely a few characters.</p>",
        "id": 231441680,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616491519
    },
    {
        "content": "<p>A potential disadvantage might be that there are more typeclass search problems (but recently this just hasn't been a problem, and we expect Lean4 to be at least as good).</p>",
        "id": 231441741,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1616491555
    },
    {
        "content": "<p>The trouble is that it leads to exponential blowup in a different corner, right: <a href=\"https://www.ralfj.de/blog/2019/05/15/typeclasses-exponential-blowup.html\">https://www.ralfj.de/blog/2019/05/15/typeclasses-exponential-blowup.html</a></p>",
        "id": 231442452,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616492013
    },
    {
        "content": "<p>I have seen new users be confused about how to say simple things like \"let R be an integral domain\" because our current system is not intuitive, but I don't know if this is reason enough to change. One advantage of just stripping back to a typeclass for <code>ring</code> and then things like commutative, noetherian and integral domain being dumped on top is that this is how mathematicians actually do it in practice. Of course one could take it to extremes and have the data typeclasses being nothing more than notation, so \"ring_structure\" would just be 0,1,+,-,* and then <code>is_ring</code> is things like associativity etc on top</p>",
        "id": 231442471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616492027
    },
    {
        "content": "<p>It seems to me that we have to accept exponential blowup somewhere: either in the code that we write, or in problems that Lean has to solve on its own.</p>",
        "id": 231443265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616492436
    },
    {
        "content": "<p>Or perhaps in the amount of work we delegate to a metaprogram?</p>",
        "id": 231443311,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616492465
    },
    {
        "content": "<p>But if we can generate the code that we write from some simple skeleton, then maybe that could be a trade off?</p>",
        "id": 231443319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616492466
    },
    {
        "content": "<p>Exactly. Either a metaprogram, or if that is too complicated I wouldn't mind falling back to a python script.</p>",
        "id": 231443351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616492491
    },
    {
        "content": "<p>The linked Coq issue doesn't really seem to apply to the proposed commutativity class as far as I can tell.</p>",
        "id": 231448115,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616495184
    },
    {
        "content": "<p>Only theorems would get the extra <code>[comm R]</code> argument.  Definitions don't need it (therefore I would expect no large blowup in term size).</p>",
        "id": 231448397,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616495347
    },
    {
        "content": "<p>Of course, we'd need both <code>[add_comm A]</code> and <code>[comm G]</code> type classes.</p>",
        "id": 231448448,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616495387
    },
    {
        "content": "<p>Or <code>[comm A (+)]</code></p>",
        "id": 231448574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616495439
    },
    {
        "content": "<p>I would also strongly suggest to keep the <code>field</code> type class and not replace it by <code>[division_ring R] [comm R]</code>.</p>",
        "id": 231448585,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616495441
    },
    {
        "content": "<p>For sociological reasons?</p>",
        "id": 231448645,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1616495472
    },
    {
        "content": "<p>Or technical reasons?</p>",
        "id": 231448673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616495492
    },
    {
        "content": "<p>Actually for typing effort.</p>",
        "id": 231448678,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616495494
    },
    {
        "content": "<p>It seems like we need a way to create alias typeclasses</p>",
        "id": 231448714,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616495520
    },
    {
        "content": "<p>Where <code>[foo A]</code> actually means <code>[bar A] [baz A]</code></p>",
        "id": 231448801,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616495554
    },
    {
        "content": "<p><code>foo extends bar A, baz A</code> doesn't work because it can't build a foo out of a bar and baz found in typeclass search as that would form a loop</p>",
        "id": 231448892,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616495607
    },
    {
        "content": "<p>I wonder if this would be possible in Lean 4; i.e. have <code>[α] → [β] → Both α β</code>, <code>[Both α β] → α</code>, and <code>[Both α β] → β</code> instances without running into nontermination.</p>",
        "id": 231449062,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616495684
    },
    {
        "content": "<p>I'd hope that with enough marker attributes that would be straightforward to special case in typeclass resolution</p>",
        "id": 231449159,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1616495738
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/116395-maths/topic/.60.5Bcomm_ring.20R.5D.60.20vs.20.60.5Bring.20R.5D.20.5Bcomm.20R.5D.60/near/231448397\">said</a>:</p>\n<blockquote>\n<p>Only theorems would get the extra <code>[comm R]</code> argument.  Definitions don't need it (therefore I would expect no large blowup in term size).</p>\n</blockquote>\n<p>It's not clear to me that this is true. At least not with current mathlib, but even in general.<br>\nThe first example that comes to mind is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/prime_spectrum\">docs#prime_spectrum</a>, the type of all prime ideals in a commutative ring.</p>",
        "id": 231449889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616496092
    },
    {
        "content": "<p>Certain definitions will really need to assume these properties like <code>comm R</code>, just to be able to state the defn</p>",
        "id": 231449936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616496122
    },
    {
        "content": "<p>Good point, it's already <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal\">docs#ideal</a> which is problematic.</p>",
        "id": 231450039,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616496175
    },
    {
        "content": "<p>There are certainly some definitions where commutativity is required, but I would expect them to be in the minority.  In particular none of the really common ones (0, 1, +, *, polynomial, ...) require it.</p>",
        "id": 231450196,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616496271
    },
    {
        "content": "<p>BTW, it is possible to generalize the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal\">docs#ideal</a> definition to rings.  (Even if it does not make sense for noncommutative rings.)</p>",
        "id": 231450601,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616496529
    },
    {
        "content": "<p>I think that in general it will be really tricky to keep those assumptions out of our definitions.</p>",
        "id": 231450803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616496661
    },
    {
        "content": "<p>Indeed, this seems to work in Lean 4:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">One</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"n\">where</span>\n  <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">α</span>\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">One</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">OfNat</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">nat_lit</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">One.one</span><span class=\"o\">⟩</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">One</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">c</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span>\n<span class=\"kn\">export</span> <span class=\"n\">Monoid</span> <span class=\"o\">(</span><span class=\"n\">mul_assoc</span> <span class=\"n\">one_mul</span> <span class=\"n\">mul_one</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">Comm</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">Mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n<span class=\"kn\">export</span> <span class=\"n\">Comm</span> <span class=\"o\">(</span><span class=\"n\">mul_comm</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">CommMonoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">Comm</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Comm</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">CommMonoid</span> <span class=\"n\">α</span> <span class=\"n\">where</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">mul_comm</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Comm</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span>\n  <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">CommMonoid</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">inferInstanceAs</span> <span class=\"o\">(</span><span class=\"n\">CommMonoid</span> <span class=\"o\">(</span><span class=\"n\">Option</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"c1\">-- fails fast</span>\n  <span class=\"n\">exact</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 231454335,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1616498643
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/116395-maths/topic/.60.5Bcomm_ring.20R.5D.60.20vs.20.60.5Bring.20R.5D.20.5Bcomm.20R.5D.60/near/231450601\">said</a>:</p>\n<blockquote>\n<p>BTW, it is possible to generalize the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ideal\">docs#ideal</a> definition to rings.  (Even if it does not make sense for noncommutative rings.)</p>\n</blockquote>\n<p>What's wrong with left ideals?</p>",
        "id": 231460873,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1616502388
    },
    {
        "content": "<p>Nothing, but I'm sure we can come up with other example.</p>",
        "id": 231461963,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1616502933
    }
]