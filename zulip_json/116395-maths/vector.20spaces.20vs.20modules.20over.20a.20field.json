[
    {
        "content": "<p>I have a module over a field. How do I upgrade it to a vector_space? We can't have a generic instance, because we would immediately get loops (every vector_space is already a module).</p>",
        "id": 128233939,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529306756
    },
    {
        "content": "<p>I really wish this would be transparent, because there is no content at all.</p>",
        "id": 128233981,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529306777
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">F</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">Mvector_space</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span> <span class=\"n\">F</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">m</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 128237488,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529313502
    },
    {
        "content": "<p>Maybe make vector_space a reducible definition for module?</p>",
        "id": 128237549,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1529313605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> That is tricky right? Because then we get cycles in the type class system.</p>",
        "id": 128237680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529313936
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> How do I make a class reducible?</p>",
        "id": 128237682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529313946
    },
    {
        "content": "<p>I agree it does seem a little silly. I'm not sure we'd get cycles any more than we would by any other use of extends. This is a little weird because there aren't any extra axioms, but extends is used all the time without any problems.</p>",
        "id": 128237786,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529314094
    },
    {
        "content": "<p>In fact just making what I just wrote a global instance is probably a good idea.</p>",
        "id": 128237806,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529314154
    },
    {
        "content": "<p>Not class, just <code>@[reducible] def vector_space (α : Type u) (β : Type v) [field α] := module α β</code></p>",
        "id": 128237812,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1529314175
    },
    {
        "content": "<p>But then we can't use the type class instance anymore...</p>",
        "id": 128237871,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529314242
    },
    {
        "content": "<p>Chris, Hmmm, I thought introducing cycles was a bad idea. I think we try to avoid them.</p>",
        "id": 128237896,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529314279
    },
    {
        "content": "<p><code>extends</code> does not introduce cycles. So I don't understand your point.</p>",
        "id": 128237910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529314319
    },
    {
        "content": "<p>The definition of <code>vector_space</code> just <code>extends</code> <code>module</code> with no extra axioms. So it won't introduce cycles.</p>",
        "id": 128238026,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529314474
    },
    {
        "content": "<p>If <code>extends</code> doesn't introduce cycles.</p>",
        "id": 128238028,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529314492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> There is the cycle module -&gt; vector_space -&gt; module.</p>",
        "id": 128238029,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1529314493
    },
    {
        "content": "<p>(If you add the instance.)</p>",
        "id": 128238033,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1529314502
    },
    {
        "content": "<p>Oh I see.</p>",
        "id": 128238038,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529314507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I just tried replacing the vector_space class by a definition and everything seems to work.  Why do you think it would break type class instances?</p>",
        "id": 128238046,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1529314558
    },
    {
        "content": "<p>I mean, then I can't any longer write <code>{V : Type} [vector_space real V]</code> in my theorems. Right?</p>",
        "id": 128238097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529314623
    },
    {
        "content": "<p>Because the <code>[]</code> only work for classes.</p>",
        "id": 128238103,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529314636
    },
    {
        "content": "<p>Maybe it will just interpret it as <code>module real V</code></p>",
        "id": 128238156,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529314689
    },
    {
        "content": "<p>The reason that nothing breaks after your change, is because mathlib has not <em>really used</em> vector spaces yet. It only defines them...</p>",
        "id": 128238167,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529314717
    },
    {
        "content": "<p>Chris, hmm, that might be true! Then it might work!</p>",
        "id": 128238185,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529314780
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Ok, I see that in fact on the line below there is already <code>[vector_space ...]</code> and it seems to work. You are right. Thanks!</p>",
        "id": 128238264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529314878
    },
    {
        "content": "<p>IIRC I set this up before (<code>vector_space</code> as reducible def) and <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> reverted it to the current wrapper class style, so there was probably a reason although I forget what it is.</p>",
        "id": 128242421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529322134
    },
    {
        "content": "<p>I think the preferred solution is just to have instances of <code>vector_space</code> for all your vector spaces</p>",
        "id": 128242443,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529322227
    },
    {
        "content": "<p>Ok, but aren't you scared that this creates cycles?</p>",
        "id": 128242581,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529322445
    },
    {
        "content": "<p>Chris's instance will create cycles. I'm not suggesting that</p>",
        "id": 128242598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529322478
    },
    {
        "content": "<p>Or, you mean, explicitly saying</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">foobar</span> <span class=\"o\">:</span> <span class=\"n\">vector_space</span> <span class=\"n\">real</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"o\">{}</span>\n</pre></div>",
        "id": 128242640,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529322487
    },
    {
        "content": "<p>whenever <code>V</code> is a module over the reals.</p>",
        "id": 128242648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529322502
    },
    {
        "content": "<p>depends on what <code>V</code> is there</p>",
        "id": 128242649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529322502
    },
    {
        "content": "<p>if <code>V</code> is an arbitrary module over the reals, then no</p>",
        "id": 128242659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529322525
    },
    {
        "content": "<p>if you replace <code>V</code> with <code>my_R_vec</code> then yes</p>",
        "id": 128242677,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529322564
    },
    {
        "content": "<p>If you want to deal with an arbitrary real vector space, the assumption should say <code>vector_space</code> not <code>module</code></p>",
        "id": 128242737,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529322603
    },
    {
        "content": "<p>What happens if you have something like a vector space instance for polynomials over a field, but also a module instance for polynomials over a ring. Then you have cycles.</p>",
        "id": 128242744,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1529322622
    },
    {
        "content": "<p>no</p>",
        "id": 128242750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529322638
    },
    {
        "content": "<p>that's perfectly okay</p>",
        "id": 128242752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529322642
    },
    {
        "content": "<p>that's a diamond not a cycle</p>",
        "id": 128242755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529322655
    },
    {
        "content": "<p>and the defeq constraint will be easy to satisfy here</p>",
        "id": 128242763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529322687
    },
    {
        "content": "<p>Mario, I am defining Lie algebras. They are modules over a ring with extra data and properties. But if my ring happens to be a field, then I want to prove extra things about my Lie algebras (using things like <code>dimension</code> etc...). How should I explain to Lean that if I have <code>[field R]</code> I want to upgrade my <code>[lie_algebra L]</code> to a <code>[vector_space R L]</code> instead of just the <code>module R L</code> that it extends?</p>",
        "id": 128242909,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529322920
    },
    {
        "content": "<p>you can have an instance for that</p>",
        "id": 128243070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529323153
    },
    {
        "content": "<p><code>instance [field R] [lie_algebra L] : vector_space R L</code></p>",
        "id": 128243075,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1529323173
    },
    {
        "content": "<p>ok, I see</p>",
        "id": 128243174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529323267
    },
    {
        "content": "<p>That's a good solution, I guess (-;</p>",
        "id": 128243182,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1529323285
    },
    {
        "content": "<p>I don't remember why I changed it to a <code>class</code> maybe I had a problem in combination with the <code>inout</code> parameter. We can change it back and see what happens.</p>",
        "id": 128263024,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1529347983
    }
]