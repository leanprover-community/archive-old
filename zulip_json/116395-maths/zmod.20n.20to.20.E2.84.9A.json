[
    {
        "content": "<p>I don't understand why this is true :<br>\n<code>example (n : ℕ) (a b : zmod n) : ((a * b) : ℚ) = (a : ℚ) * (b : ℚ) := </code><br>\nThe proof is <code>refl</code>. As far as I understand, the coercion to <code>ℚ</code> arises from the map to <code>ℕ</code> taking <code>a : zmod n</code> to <code>a.val</code>, which is not multiplicative..<br>\nAny help is appreciated, thank you!</p>",
        "id": 260717857,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1636405075
    },
    {
        "content": "<p>The proof is <code>refl</code> because elaboration works from the outside in. Lean sees <code>(a * b : ℚ)</code> and its first thought is _not_ \"oh, <code>a</code> and <code>b</code> are in <code>zmod n</code>, so that <code>*</code> must be multiplication in <code>zmod n</code>\", it says \"Oh OK, so the result of this multiplication is supposed to be in <code>ℚ</code> so that multiplication must definitely be <code>rat.mul</code> -- now let's elaborate further; oh look, <code>a</code> and <code>b</code> are in <code>zmod n</code>, we wanted things in <code>rat</code> so let's coerce.\" The result is that the two sides of the equality in your example are the same.</p>",
        "id": 260718470,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636405336
    },
    {
        "content": "<p>I see, thank you!</p>",
        "id": 260719230,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1636405687
    },
    {
        "content": "<p>Let me elaborate a bit since this is an important and tricky topic. First thing to notice is that the goal clearly shows the coercion arrows are not where you want them to be. Then you need to understand when Lean insert coercion arrows.</p>",
        "id": 260719344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636405754
    },
    {
        "content": "<p>Oh yeah as Patrick says, if you look at your goal for the refl goal it's <code>⊢ ↑a * ↑b = ↑a * ↑b</code>. The way to make the false goal is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">((</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">zmod</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>which gives you a goal <code>⊢ ↑(a * b) = ↑a * ↑b</code></p>",
        "id": 260719743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1636405990
    },
    {
        "content": "<p>Basically Lean works left to right, soliving constraints as soon as possible and inserts a coercion only when desperate. Here you need to remember that the infix notation is only a notation, so <code>((a * b) : ℚ)</code> is really a <code>has_mul.mul a b : ℚ</code>. Given the type ascription, Lean knows the multiplication has to be multiplication of rational numbers. Then it moves to <code>a</code>. This is not a rational and there is nothing else to try so Lean inserts a coercion. Then the same happen with <code>b</code>.</p>",
        "id": 260719750,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1636405992
    },
    {
        "content": "<p>Oh I see, thank you!</p>",
        "id": 260727880,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1636410314
    }
]