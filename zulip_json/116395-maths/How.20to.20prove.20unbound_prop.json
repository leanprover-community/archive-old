[
    {
        "content": "<p>such as (∀ x, p x ∨  r) →  (∀ x, p x) ∨ r, can someone give me some idea or solution</p>",
        "id": 187148923,
        "sender_full_name": "李拯先",
        "timestamp": 1580536789
    },
    {
        "content": "<p>You need <code>classical.by_cases r</code> here.</p>",
        "id": 187149266,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1580537444
    },
    {
        "content": "<p>[Quoting…]<br>\nHow to prove when r is wrong here</p>",
        "id": 187151135,
        "sender_full_name": "李拯先",
        "timestamp": 1580541102
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr&#39;</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hr&#39;</span> <span class=\"n\">hr</span><span class=\"o\">)))</span>\n</pre></div>",
        "id": 187151303,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1580541412
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"n\">id</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr&#39;</span><span class=\"o\">,</span> <span class=\"n\">absurd</span> <span class=\"n\">hr&#39;</span> <span class=\"n\">hr</span><span class=\"o\">))</span>\n</pre></div>\n\n\n</blockquote>\n<p>I'm so sorry but i want to ask what is $ means here, and i know id meaning but i don't understand what its'meaning here, can you give me a explain？ thanks</p>",
        "id": 187152380,
        "sender_full_name": "李拯先",
        "timestamp": 1580543706
    },
    {
        "content": "<p>Removed the dollar sign. <code>f $ x</code> is <code>f x</code>, <code>f $ g x</code> is <code>f (g x)</code> etc.</p>",
        "id": 187152905,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1580544585
    },
    {
        "content": "<p><code>(f $ x y z)</code> means the same thing as <code>(f (x y z))</code>. It lets you write function application with fewer parentheses.</p>\n<blockquote>\n<p>i know id meaning but i don't understand what its'meaning here</p>\n</blockquote>\n<p>Let's start by investigating <code>λ x, (H x).elim id (λ hr', absurd hr' hr)</code>. If you replace that entire term with an underscore, Lean will report an error which will tell you what the type is: </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">by_cases</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hr</span><span class=\"o\">,</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">$</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">don&#39;t know how to synthesize placeholder</span>\n<span class=\"cm\">context:</span>\n<span class=\"cm\">α : Type ?,</span>\n<span class=\"cm\">p : α → Prop,</span>\n<span class=\"cm\">r : Prop,</span>\n<span class=\"cm\">H : ∀ (x : α), p x ∨ r,</span>\n<span class=\"cm\">hr : ¬r</span>\n<span class=\"cm\">⊢ ∀ (x : α), p x</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>This tells us that <code> λ x, (H x).elim id (λ hr', absurd hr' hr) : ∀ (x : α), p x</code> and hence <code>(H x).elim id (λ hr', absurd hr' hr) : p x</code>.</p>\n<p>Next, you should be able to see that <code>(H x)</code> has type <code>p x ∨ r</code> (try putting your cursor over <code>H</code> and <code>x</code> in your editor). What may be less familiar is that <code>(H x).elim</code> is short for <code>or.elim (H x)</code> (this uses Lean's \"dot notation\", see the text after \"Lean provides another useful syntactic gadget\" <a href=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#conjunction\" target=\"_blank\" title=\"https://leanprover.github.io/theorem_proving_in_lean/propositions_and_proofs.html#conjunction\">in 3.1 of Theorem Proving in Lean</a>). </p>\n<p><code>or.elim</code> has type <code>∀ {a b c : Prop}, a ∨ b → (a → c) → (b → c) → c</code>, so <code>(H x).elim</code> has type: <code>(p x → p x) → (r → p x) → p x</code>. The type of the first argument is <code>(p x → p x)</code>, which matches the type of <code>id : Π {α : Sort u_1}, α → α</code>. You could also replace <code>id</code> with the equivalent term, <code>λ hpx, hpx</code>.</p>\n<p>Informally, the last paragraph above could be stated this way: we've shown <code>p x ∨ r</code> and we want to prove <code>p x</code>. We have two cases, and the first one is to show <code>p x</code> from <code>p x</code>. This trivial implication is <code>id</code>.</p>",
        "id": 187153912,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1580546534
    },
    {
        "content": "<p>Thank you very much, your explanation help me a lot.</p>",
        "id": 187155208,
        "sender_full_name": "李拯先",
        "timestamp": 1580549451
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">2</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hr</span> <span class=\"o\">:</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- r is true</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">assumption</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- r is false</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">assumption</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">contradiction</span><span class=\"o\">}</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 187159675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580558299
    }
]