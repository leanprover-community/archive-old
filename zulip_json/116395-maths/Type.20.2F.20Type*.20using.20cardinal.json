[
    {
        "content": "<p>The following function gives me the existence an element outside of the range of a function from <code>fin n</code>provided the cardinal of the target type is greater than <code>n</code>, but that only works when the target type is chosen as a <code>Type</code> but not a <code>Type*</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gimme_more</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">#</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">function.surjective</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_forall.mp</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">lt_iff_not_ge</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span>  <span class=\"n\">hα</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">cardinal.mk_fin</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">cardinal.mk_le_of_surjective</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gimme_more'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">#</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">function.surjective</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_forall.mp</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">lt_iff_not_ge</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span>  <span class=\"n\">hα</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">cardinal.mk_fin</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">cardinal.mk_le_of_surjective</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(For some time, I was OK with setting alpha as a <code>Type</code>, but later one, Lean complained that I should use <code>set_like.coe_mem</code> with a <code>Type ?</code> as a target, but not just a <code>Type</code>…)</p>",
        "id": 276554686,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1648166021
    },
    {
        "content": "<p>note that <code>fin n</code> is in <code>Type</code>, causing you the issue... try <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.lift_mk_of_fin\">docs#cardinal.lift_mk_of_fin</a></p>",
        "id": 276557326,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648168062
    },
    {
        "content": "<p>There is a typo in the name of your function, I'm browsing the library to find the correct one.<br>\nAside : why isn't <code>fin n</code> in <code>Type 0</code>?</p>",
        "id": 276585982,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1648195196
    },
    {
        "content": "<p>It is?</p>",
        "id": 276586134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648195253
    },
    {
        "content": "<p>Try <code>#check (fin 37 : Type 0)</code>. I'd be surprised if it failed</p>",
        "id": 276586180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1648195299
    },
    {
        "content": "<p>It doesn't fails but returns <code>fin 37 : Type</code>.</p>",
        "id": 276586367,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1648195456
    },
    {
        "content": "<p>But I thought that <code>Type=Type 0</code>, no?</p>",
        "id": 276586720,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1648195759
    },
    {
        "content": "<p>Oh! I had presumed the opposite, namely that <code>Type</code> wouldn't refer to a specific universe.</p>",
        "id": 276586761,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1648195798
    },
    {
        "content": "<p>Well, I am certainly not an expert, but reading Ch. 7 of \"Theorem proving in Lean\", you can see that they start by saying </p>\n<blockquote>\n<p>We have seen that Lean’s formal foundation includes basic types, <code>Prop</code>, <code>Type 0</code>, <code>Type 1</code>, <code>Type 2</code>, ..., and allows ...</p>\n</blockquote>\n<p>I think that \" the types of an unspecified universe\" should not really exist.</p>",
        "id": 276587115,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1648196058
    },
    {
        "content": "<p><code>Type</code> and <code>Type 0</code> are indeed the same</p>",
        "id": 276587604,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648196482
    },
    {
        "content": "<p>And they're the same as <code>Sort 1</code>, while <code>Prop</code> is <code>Sort 0</code>.</p>",
        "id": 276587693,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648196530
    },
    {
        "content": "<p>Generally if we want to make a statement that's polymorphic over all type universes, we would use <code>Type*</code> or <code>Type u</code> after naming a universe variable. If we want to be polymorphic over all Type universes and also Prop, we use <code>Sort*</code> or <code>Sort u</code></p>",
        "id": 276588048,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648196816
    },
    {
        "content": "<p>When you have concrete types such as <code>fin 37</code>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span>, etc., they will usually be in <code>Type</code> (equiv. <code>Type 0</code>).</p>",
        "id": 276588181,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1648196939
    },
    {
        "content": "<p>The question for me seems to transform a surjective<code>h :fin m -&gt; t</code> (with <code>m : nat</code> and <code>t : Type u</code>) to  a surjective map from a variant of <code>fin m</code> which also belongs to <code>Type u</code>.</p>",
        "id": 276594076,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1648200604
    },
    {
        "content": "<p>This is a proof of <code>gimme_more'</code>, but I found it horrible to write! There <em>must</em> be some better way…</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">set_theory.cardinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">control.ulift</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">cardinal</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gimme_more</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">#</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">not_forall.mp</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">function.surjective</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">lt_iff_not_ge</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span>  <span class=\"n\">hα</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">cardinal.mk_fin</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">cardinal.mk_le_of_surjective</span> <span class=\"n\">h</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">gimme_more'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">#</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">not_forall.mp</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- change ¬ (function.surjective x),</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">lt_iff_not_ge</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span>  <span class=\"n\">hα</span><span class=\"o\">,</span>\n  <span class=\"c1\">--   rw ge_iff_le,</span>\n  <span class=\"k\">have</span> <span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"o\">(</span><span class=\"n\">ulift.map</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">a.down</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ulift.map_up</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">ulift.up_down</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">z</span> <span class=\"o\">:=</span> <span class=\"n\">cardinal.mk_le_of_surjective</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">cardinal.mk_ulift</span><span class=\"o\">,</span> <span class=\"n\">cardinal.mk_fintype</span><span class=\"o\">,</span>\n  <span class=\"n\">fintype.card_ulift</span><span class=\"o\">,</span> <span class=\"n\">fintype.card_fin</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span>  <span class=\"n\">cardinal.lift_id</span> <span class=\"n\">at</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276598378,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1648203339
    },
    {
        "content": "<p>Maybe one needs <code>ulift_injective_of_injective</code> and <code>ulift_surjective_of_surjective</code>…</p>",
        "id": 276598469,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1648203384
    },
    {
        "content": "<p>Should I PR these two lemmas ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">control.ulift</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ulift</span>\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">surjective_of_surjective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.surjective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.surjective</span> <span class=\"o\">(</span><span class=\"n\">ulift.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">hf</span> <span class=\"n\">b.down</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">ulift.map_up</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">ulift.up_down</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">injective_of_bijective</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">function.injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.injective</span> <span class=\"o\">(</span><span class=\"n\">ulift.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">a'</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">ulift.up_down</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"o\">(</span><span class=\"n\">ulift.up_down</span> <span class=\"n\">a'</span><span class=\"o\">)],</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ulift.map_up</span><span class=\"o\">,</span> <span class=\"n\">ulift.ext_iff</span><span class=\"o\">,</span> <span class=\"n\">ulift.down_up</span><span class=\"o\">],</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hf</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">ulift</span>\n</code></pre></div>",
        "id": 276604219,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1648206918
    },
    {
        "content": "<p>You may find using <code>equiv.ulift</code>easier</p>",
        "id": 276604379,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648206988
    },
    {
        "content": "<p>Indeed ! The following is much nicer, but I needed to add two “rfl-lemmas” which I don't know how to invoke otherwise.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">comp_ulift_eq_ulift_comp</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">equiv.ulift</span> <span class=\"bp\">=</span> <span class=\"n\">equiv.ulift</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">ulift.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comp_ulift_eq_ulift_comp'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"n\">ulift.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"n\">equiv.ulift.symm</span> <span class=\"bp\">=</span> <span class=\"n\">equiv.ulift.symm</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">surjective_iff_surjective</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">function.surjective</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span>\n  <span class=\"n\">function.surjective</span> <span class=\"o\">(</span><span class=\"n\">ulift.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">equiv.comp_surjective</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">comp_ulift_eq_ulift_comp'</span><span class=\"o\">,</span> <span class=\"n\">equiv.surjective_comp</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 276610436,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1648210931
    },
    {
        "content": "<p>I thought this was a bit easier:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">gimme_more'</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hα</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">#</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">∉</span> <span class=\"n\">set.range</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">function.surjective</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">not_forall.mp</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">lt_iff_not_ge</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">hα</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">cardinal.lift_mk_fin</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">cardinal.mk_ulift</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">cardinal.mk_le_of_surjective</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">function.surjective</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">∘</span> <span class=\"n\">equiv.ulift</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">equiv.surjective_comp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276610986,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648211222
    },
    {
        "content": "<p>or for those last two lines even <code>exact cardinal.mk_le_of_surjective ((equiv.ulift.surjective_comp x).mpr h)</code></p>",
        "id": 276611144,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648211303
    },
    {
        "content": "<p>At least, it doesn't require to add some external lemmas. (Which I find structurally interesting to have, anyway…)</p>",
        "id": 276611562,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1648211535
    },
    {
        "content": "<p>One question about my proof : Is there another way than adding “rfl-lemmas” to rewrite a term to semething else? What is the canonical way to do it in Lean/mathlib ?</p>",
        "id": 276611672,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1648211603
    },
    {
        "content": "<p>(In my case, look at  <code>comp_ulift_eq_ulift_comp</code>)</p>",
        "id": 276611720,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1648211632
    },
    {
        "content": "<p>I think <code>comp_ulift_eq_ulift_comp</code> is a bit of a weird lemma, as the end result is you're ulifting to another separate universe (look at <code>pp.universes</code> - you have &lt;4&gt; universe variables there)</p>",
        "id": 276612352,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648211946
    },
    {
        "content": "<p>Isn't it normal ? I am not sure I understand completely how to interpret what VSCode writes, but  <code>equiv.ulift</code> hides its arguments and before unification takes place, one cannot guess which universes should be there.</p>",
        "id": 276615909,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1648213809
    },
    {
        "content": "<p>I think this ulifts twice, is what I'm saying; why would you need two free universe params instead of just one?</p>",
        "id": 276621622,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1648216436
    },
    {
        "content": "<p>It's probably best to write all the universes explicitly for this type of lemma</p>",
        "id": 276788898,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648388363
    },
    {
        "content": "<p>To make it clear what you intended</p>",
        "id": 276788903,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648388372
    },
    {
        "content": "<p>I just experimented with</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- with universe</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">comp_ulift_eq_ulift_comp'</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n<span class=\"n\">equiv.ulift.</span><span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">ulift.map.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n  <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">equiv.ulift.</span><span class=\"o\">{</span><span class=\"n\">w</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>that involves only 3 universes. However, it makes the proof of <code>ulift.surjective_iff_surjective</code> etc. break down.</p>",
        "id": 276832758,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1648449799
    },
    {
        "content": "<p>So what's the four-universe version that lean is inferring?</p>",
        "id": 276873607,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648474479
    },
    {
        "content": "<p>(and what universes are <code>α</code> and <code>β</code> in there?)</p>",
        "id": 276873728,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1648474527
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">comp_ulift_eq_ulift_comp</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">equiv.ulift</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">ulift.map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"n\">equiv.ulift</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">comp_ulift_eq_ulift_comp.{u_1 u_2 u_3 u_4} :</span>\n<span class=\"cm\">  ⇑equiv.ulift.{u_4 u_2} ∘ ulift.map.{u_1 u_2 u_3 u_4} ?M_3 = ?M_3 ∘ ⇑equiv.ulift.{u_3 u_1}</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 276905895,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1648488208
    },
    {
        "content": "<p>That seems like the right version to me, but writing explicit universe levels might still be useful for future readers.<br>\nBtw, the type of <code>ulift.map</code> is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">protected</span> <span class=\"kd\">def</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">u_1</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"n\">ulift.map</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">ulift.</span><span class=\"o\">{</span><span class=\"n\">u_1</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ulift.</span><span class=\"o\">{</span><span class=\"n\">u_2</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">β</span>\n</code></pre></div>",
        "id": 276927378,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1648499521
    }
]