[
    {
        "content": "<p>I am stuck.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">multivariate_polynomial</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"c1\">-- ### FOR_MATHLIB</span>\n<span class=\"c1\">-- everything in this section should move to other files</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">ring_hom_commutes_with_stuff</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ring_hom_sum</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sum_empty</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">s&#39;</span> <span class=\"n\">hx</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sum_insert</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">ring_hom_commutes_with_stuff</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">C_is_ring_hom</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_one</span> <span class=\"o\">:=</span> <span class=\"n\">C_1</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_add</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">C_mul_monomial</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">functorial_is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">functorial</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_one</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">functorial</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_range</span><span class=\"o\">],</span>\n    <span class=\"c1\">-- simp [function.comp],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">on_finset_apply</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">functorial</span><span class=\"o\">,</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_range</span><span class=\"o\">,</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">functorial</span><span class=\"o\">,</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_range</span><span class=\"o\">,</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mul_def</span><span class=\"o\">,</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">],</span>\n    <span class=\"n\">apply</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ring_hom_sum</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 130203646,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532429015
    },
    {
        "content": "<p>There are two <code>sorry</code>s in that bit of code. I don't know how to get rid of them.</p>",
        "id": 130203649,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532429039
    },
    {
        "content": "<p>I think you are going about this the wrong way, at least if you want a clean proof at the end</p>",
        "id": 130204295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430108
    },
    {
        "content": "<p>Hmmm, so what is the right way?</p>",
        "id": 130204348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532430154
    },
    {
        "content": "<p>You should break the proof into smaller and more useful parts rather than just attacking the whole thing at once</p>",
        "id": 130204353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430165
    },
    {
        "content": "<p>Ok, but I think I don't even really see the smaller useful parts...</p>",
        "id": 130204372,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532430235
    },
    {
        "content": "<p>here's the first thing I would prove:</p>\n<div class=\"codehilite\"><pre><span></span>theorem map_monomial (f : α → β) [is_ring_hom f]\n  (s : σ →₀ ℕ) (a : α) : map f (monomial s a) = monomial s (f a) :=\nsorry\n</pre></div>",
        "id": 130204416,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430267
    },
    {
        "content": "<p>(I renamed <code>functorial</code> to <code>map</code>)</p>",
        "id": 130204420,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430277
    },
    {
        "content": "<p>It is still called <code>functorial</code> in mathlib right?</p>",
        "id": 130204431,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532430304
    },
    {
        "content": "<p>not in my local copy as of a minute ago</p>",
        "id": 130204437,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430322
    },
    {
        "content": "<p>Aaah...</p>",
        "id": 130204440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532430331
    },
    {
        "content": "<p>you can use <code>functorial</code> if it's easier</p>",
        "id": 130204444,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430354
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">map_monomial</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">functorial</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">x</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">monomial</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">functorial</span><span class=\"o\">,</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_range</span><span class=\"o\">,</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span><span class=\"n\">monomial</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 130204565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532430522
    },
    {
        "content": "<p>I am suspicious still</p>",
        "id": 130204574,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430547
    },
    {
        "content": "<p>that proof is too complicated</p>",
        "id": 130204577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430564
    },
    {
        "content": "<p>Hmmm, ok, I'll try to golf it.</p>",
        "id": 130204579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532430585
    },
    {
        "content": "<p>it should be a one liner about the composition of <code>map_range</code> with <code>single</code></p>",
        "id": 130204583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430590
    },
    {
        "content": "<p>Incidentally is <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>  planning on removing the use of <code>monomial</code> for <code>mv_polynomial</code>s like he did for univariate polys?</p>",
        "id": 130204641,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532430653
    },
    {
        "content": "<p>I don't know anything about this</p>",
        "id": 130204650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430672
    },
    {
        "content": "<p>oh, I see he just uses <code>single</code></p>",
        "id": 130204658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430718
    },
    {
        "content": "<p>The idea is to use <code>C a * X^n</code> instead of <code>monomial</code></p>",
        "id": 130204702,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532430746
    },
    {
        "content": "<p>For foundational stuff that's no good</p>",
        "id": 130204707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430769
    },
    {
        "content": "<p>because the theorems about <code>C a</code> and <code>X</code> come from a theorem on <code>single</code></p>",
        "id": 130204716,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430798
    },
    {
        "content": "<p>Yeah, but once the foundations are done, users are supposed to use <code>C a * X^n</code> I think.</p>",
        "id": 130204737,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532430842
    },
    {
        "content": "<p>sure</p>",
        "id": 130204772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430862
    },
    {
        "content": "<p>/me seems to be a user who has to do some foundational stuff...</p>",
        "id": 130204773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532430873
    },
    {
        "content": "<p>Johan Commelin has stumbled on a gap in mathlib</p>",
        "id": 130204777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430892
    },
    {
        "content": "<p>That's the same thing right?</p>",
        "id": 130204785,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532430907
    },
    {
        "content": "<p>not always</p>",
        "id": 130204789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430915
    },
    {
        "content": "<p>fair enough</p>",
        "id": 130204793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532430933
    },
    {
        "content": "<p>well, I guess that depends on what qualifies as \"foundational\"</p>",
        "id": 130204794,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430933
    },
    {
        "content": "<p>in this case the API is clearly lacking, and there is even an \"unfinished\" comment</p>",
        "id": 130204803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532430959
    },
    {
        "content": "<p>Written by?</p>",
        "id": 130204843,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532430966
    },
    {
        "content": "<p>Johan Commelin (-;</p>",
        "id": 130204847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532430971
    },
    {
        "content": "<p>So, I can only blame myself</p>",
        "id": 130204851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532430983
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/linear_algebra/multivariate_polynomial.lean#L183\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/linear_algebra/multivariate_polynomial.lean#L183\">https://github.com/leanprover/mathlib/blob/master/linear_algebra/multivariate_polynomial.lean#L183</a></p>",
        "id": 130204856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532431016
    },
    {
        "content": "<p>But you can guess why I wrote that comment... because back then I would have been even worse at proving this lemma.</p>",
        "id": 130204857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532431016
    },
    {
        "content": "<p>Yeah, the <code>git blame</code> is not accurate.</p>",
        "id": 130204864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532431043
    },
    {
        "content": "<p>I've removed 1 sorry (en hep nok 4 toegevoegt):</p>",
        "id": 130204865,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532431050
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">multivariate_polynomial</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">u₁</span>\n\n<span class=\"c1\">-- ### FOR_MATHLIB</span>\n<span class=\"c1\">-- everything in this section should move to other files</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">ring_hom_commutes_with_stuff</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ring_hom_sum</span><span class=\"bp\">.</span><span class=\"n\">finset</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sum_empty</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">s&#39;</span> <span class=\"n\">hx</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sum_insert</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">finset</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">finsupp</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finsupp</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">hf1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">hf2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">b₁</span> <span class=\"bp\">+</span> <span class=\"n\">b₂</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b₁</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b₂</span><span class=\"o\">)</span>\n<span class=\"n\">include</span> <span class=\"n\">hf1</span> <span class=\"n\">hf2</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ring_hom_sum</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">sum</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">sum</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sum_zero_index</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">f&#39;</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sum_add_index</span> <span class=\"o\">},</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">sum_single_index</span> <span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hf1</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hf1</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hf1</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">hf2</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hf1</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">hf2</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">finsupp</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">ring_hom_commutes_with_stuff</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">σ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">σ</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">C_is_ring_hom</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_one</span> <span class=\"o\">:=</span> <span class=\"n\">C_1</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_add</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">C_mul_monomial</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">functorial_is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n<span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">functorial</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_one</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">functorial</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_range</span><span class=\"o\">],</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">on_finset_apply</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">H2</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">one_def</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">one_def</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">],</span>\n    <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"n\">i</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"n\">i</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">functorial</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_range</span><span class=\"o\">],</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_add</span> <span class=\"n\">i</span><span class=\"o\">]</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">functorial</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_range</span><span class=\"o\">],</span>\n    <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">on_finset_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mul_def</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">ring_hom_sum</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span> <span class=\"n\">i</span><span class=\"o\">],</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mv_polynomial</span>\n</pre></div>",
        "id": 130204868,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532431076
    },
    {
        "content": "<p>I wrote that stuff, but didn't actually know what I was doing. So Johannes took my stuff and transformed it into something mathlib-ready.</p>",
        "id": 130204870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532431080
    },
    {
        "content": "<p>I didn't realize you were an author of the file, you aren't credited if so</p>",
        "id": 130204912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532431087
    },
    {
        "content": "<p>I added you as an author</p>",
        "id": 130204920,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532431119
    },
    {
        "content": "<p>Does that bring responsibilities with it? Does that mean I should now be able to answer foundational questions about this file?</p>",
        "id": 130205097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532431334
    },
    {
        "content": "<p>Not really</p>",
        "id": 130205103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532431345
    },
    {
        "content": "<p>By the way... I already had:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">functorial_ring_hom_X</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n <span class=\"o\">:</span> <span class=\"n\">functorial</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">functorial</span><span class=\"o\">,</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_range</span><span class=\"o\">,</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span><span class=\"n\">C</span><span class=\"o\">,</span><span class=\"n\">monomial</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">functorial_ring_hom_C</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">:</span> <span class=\"n\">functorial</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">functorial</span><span class=\"o\">,</span><span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_range</span><span class=\"o\">,</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span><span class=\"n\">C</span><span class=\"o\">,</span><span class=\"n\">monomial</span><span class=\"o\">,</span><span class=\"bp\">*</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">],</span>\n  <span class=\"n\">split_ifs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 130205235,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532431576
    },
    {
        "content": "<p>But I didn't see how to use them.</p>",
        "id": 130205239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532431591
    },
    {
        "content": "<p>But maybe I'm learning, because I think it was pretty close to your suggestion about monomials.</p>",
        "id": 130205241,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532431607
    },
    {
        "content": "<p>almost there:</p>\n<div class=\"codehilite\"><pre><span></span>-- `mv_polynomial σ` is a functor (incomplete)\ndef map : mv_polynomial σ α → mv_polynomial σ β :=\nmap_range f (is_ring_hom.map_zero f)\n\ntheorem map_monomial (s : σ →₀ ℕ) (a : α) : map f (monomial s a) = monomial s (f a) :=\nmap_range_single\n\ntheorem map_C (f : α → β) [is_ring_hom f] (a : α) : map f (C a : mv_polynomial σ α) = C (f a) :=\nmap_monomial _ _ _\n\ntheorem map_one (f : α → β) [is_ring_hom f] : map f (1 : mv_polynomial σ α) = 1 :=\n(map_C _ _).trans $ by simp [is_ring_hom.map_one f]\n\ntheorem map_add (f : α → β) [is_ring_hom f] (p q : mv_polynomial σ α) :\n  map f (p + q) = map f p + map f q :=\nby simp [map]; ext a; simp [is_ring_hom.map_add f]\n\ntheorem map_mul (f : α → β) [is_ring_hom f] (p q : mv_polynomial σ α) :\n  map f (p * q) = map f p * map f q :=\nsorry\n</pre></div>",
        "id": 130205242,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532431608
    },
    {
        "content": "<p>Ok, please add <code>map_X</code>. It will turn out to be really useful.</p>",
        "id": 130205248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532431638
    },
    {
        "content": "<p>/me wonders when he will ever approximate the overlord-powers of Mario... <span class=\"emoji emoji-1f914\" title=\"thinking face\">:thinking_face:</span></p>",
        "id": 130205296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532431695
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>theorem map_X (f : α → β) [is_ring_hom f] (n : σ) : map f (X n : mv_polynomial σ α) = X n :=\n(map_monomial _ _ _).trans $ by simp [is_ring_hom.map_one f]\n</pre></div>",
        "id": 130205297,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532431699
    },
    {
        "content": "<p>oh wait that doesn't work</p>\n<div class=\"codehilite\"><pre><span></span>theorem map_X (f : α → β) [is_ring_hom f] (n : σ) : map f (X n : mv_polynomial σ α) = X n :=\nby simp [X, map_monomial, is_ring_hom.map_one f]\n</pre></div>",
        "id": 130205313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532431750
    },
    {
        "content": "<p>You fixed it and made it shorter! Double win.</p>",
        "id": 130205321,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532431783
    },
    {
        "content": "<p>mul is probably the hard one</p>",
        "id": 130205398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532431828
    },
    {
        "content": "<p>Last man standing (-;</p>",
        "id": 130205402,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532431841
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I wouldn't be surprised if you need the <code>section ring_hom_commutes_with_stuff</code></p>",
        "id": 130205492,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532431962
    },
    {
        "content": "<p>See Kenny's post a few lines up.</p>",
        "id": 130205497,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532431986
    },
    {
        "content": "<p>I was planning on using induction</p>",
        "id": 130205500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532431987
    },
    {
        "content": "<p>Right, that's what we did in that section.</p>",
        "id": 130205508,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532432006
    },
    {
        "content": "<p>no I mean to prove <code>map_mul</code></p>",
        "id": 130205509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532432020
    },
    {
        "content": "<p>Yes, but that might mean duplicating effort... I don't know.</p>",
        "id": 130205570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532432074
    },
    {
        "content": "<p>well, commuting with <code>sum</code> still leaves commuting over <code>^</code></p>",
        "id": 130205580,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532432105
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">ring_hom_powers</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">i</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span><span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"n\">i</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span><span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">ih</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 130205770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532432371
    },
    {
        "content": "<p>Was already in my file, but didn't copy it into the MWE.</p>",
        "id": 130205774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532432382
    },
    {
        "content": "<p>I was hoping that <code>map</code> was defined using <code>eval</code>, but unfortunately it's a bit circular</p>",
        "id": 130205840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532432462
    },
    {
        "content": "<p>How would you define it using <code>eval</code>?</p>",
        "id": 130205866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532432518
    },
    {
        "content": "<p>I was thinking something along the lines of \"evaluate the constants using <code>C o f</code> and the variables using <code>X</code>\"</p>",
        "id": 130205923,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532432596
    },
    {
        "content": "<p>but <code>eval</code> doesn't work like that; it maps everything into the coefficient ring rather than some other ring across a ring hom</p>",
        "id": 130205943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532432638
    },
    {
        "content": "<p>True. So either you need a beefed up <code>eval</code>, or you need <code>map</code>.</p>",
        "id": 130205993,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532432666
    },
    {
        "content": "<p>exactly</p>",
        "id": 130205995,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532432675
    },
    {
        "content": "<p>Oooh, while you are editing that file. I was also thinking that the <code>instance</code> that <code>eval</code> is a ring hom should get a name. Because <code>C</code> is also a useful ring hom in that context.</p>",
        "id": 130206015,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532432726
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">C_is_ring_hom</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_one</span> <span class=\"o\">:=</span> <span class=\"n\">C_1</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_add</span><span class=\"o\">,</span>\n  <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"err\">$</span> <span class=\"n\">C_mul_monomial</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 130206033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532432757
    },
    {
        "content": "<p>I saw that</p>",
        "id": 130206077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532432769
    },
    {
        "content": "<p>I agree that it is useful</p>",
        "id": 130206082,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532432775
    },
    {
        "content": "<p>Yes, I'm currently using <code>map C</code> all over the place.</p>",
        "id": 130206098,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532432790
    },
    {
        "content": "<p>I think I will define beefed up <code>eval</code>, what should it be called?</p>",
        "id": 130206125,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532432849
    },
    {
        "content": "<p>Hmm, I don't know a TLA...</p>",
        "id": 130206277,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532433014
    },
    {
        "content": "<p>oh dear, I need semiring homs</p>",
        "id": 130206281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532433026
    },
    {
        "content": "<p>You're kidding me (-;</p>",
        "id": 130206285,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532433037
    },
    {
        "content": "<p>You don't <em>need</em> them. You only <em>want</em> them.</p>",
        "id": 130206294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532433055
    },
    {
        "content": "<p>if I use beefed up eval to define eval, it won't work on semiring like it does now</p>",
        "id": 130206301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532433068
    },
    {
        "content": "<p>Mathematicians have survived over 3000 years without needing them.</p>",
        "id": 130206305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532433073
    },
    {
        "content": "<p>I'm sorry, but they really do come up in lean, a lot</p>",
        "id": 130206308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532433092
    },
    {
        "content": "<p><code>nat</code> is a semiring, <code>ennreal</code> is a semiring. These get lots of use</p>",
        "id": 130206311,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532433106
    },
    {
        "content": "<p>Only trolling (-;. I guess you stumbled on a gap in mathlib?</p>",
        "id": 130206312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532433121
    },
    {
        "content": "<p>maybe because it was written by a bunch of blithe mathematicians ;)</p>",
        "id": 130206360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532433141
    },
    {
        "content": "<p>who think semirings have no value</p>",
        "id": 130206367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532433156
    },
    {
        "content": "<p>You mean the definition of <code>is_ring_hom</code>? Lol. We really need <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> and you guys (Mario + <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> ) to get categories into mathlib. You will be amazed at how many <code>is_X_hom</code> definitions will be added by a bunch of blithe mathematicians (-;</p>",
        "id": 130206786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532433790
    },
    {
        "content": "<p>Well, category theory doesn't save you from having to define the homs</p>",
        "id": 130206793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532433819
    },
    {
        "content": "<p>No, I agree. But all of a sudden we will want to define a bunch of categories. And then we'll define the homs as well (-;</p>",
        "id": 130206947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532434079
    },
    {
        "content": "<p>Although maybe we will forget about the category of semirings...</p>",
        "id": 130206988,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532434100
    },
    {
        "content": "<p>Aaaahrg, now I need to make sure that <code>eval</code> of polynomials is associative...</p>",
        "id": 130207579,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532434866
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> How 's it going with <code>eval_on_steroids</code>?</p>",
        "id": 130211457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532439423
    },
    {
        "content": "<blockquote>\n<p><code>nat</code> is a semiring, <code>ennreal</code> is a semiring. These get lots of use</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120256\">@Ali Sever</span> (the guy formalising Euclid/Tarski geometry in Lean) was saying that he wanted to be able to say \"the distance from a to b is q times the distance from c to d\" where q&gt;=0 is rational. There is no formal definition of distance, we just have a predicate <code>eqd a b c d</code> interpreted as \"dist(a,b)=dist(c,d)\", but we defined distance anyway as point x point / equiv reln (formally these are \"attainable distances\") and they should indeed be a semi-vector space over the semi-ring of non-negative rationals.</p>",
        "id": 130220081,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532448255
    },
    {
        "content": "<p>I'm going to have to get back to you on <code>eval_on_steroids</code>, conferences tend to be a time sink so probably not until the weekend</p>",
        "id": 130259206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532502585
    },
    {
        "content": "<p>Too bad. Have fun!</p>",
        "id": 130259252,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532502638
    },
    {
        "content": "<p>William Stein reported that he'd met Mario, so Mario at conferences does have advantages :-)</p>",
        "id": 130263243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532508819
    },
    {
        "content": "<p>Mario, since you said you would take a stab at these problems, may I suggest you also consider <a href=\"https://gist.github.com/jcommelin/0e401d47ac3e0b7291c27d3313ea850f\" target=\"_blank\" title=\"https://gist.github.com/jcommelin/0e401d47ac3e0b7291c27d3313ea850f\">https://gist.github.com/jcommelin/0e401d47ac3e0b7291c27d3313ea850f</a> while you're going at it...?</p>",
        "id": 130403696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532690583
    },
    {
        "content": "<p>Oooh, and <code>s/functorial/map/</code>.</p>",
        "id": 130403711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532690610
    },
    {
        "content": "<p>Hi Mario, any news here? Do you have a definition about which I could try to prove some lemmas?</p>",
        "id": 130766236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533199181
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  News is here. I didn't prove the assoc lemmas but all the assoc lemmas on <code>eval</code> and <code>map</code> follow from the obvious composition lemma for <code>map2</code></p>",
        "id": 130908402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533427149
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I think the second associativity lemma is false:</p>\n<div class=\"codehilite\"><pre><span></span>theorem eval_assoc₂_false\n  {α} [comm_semiring α] [decidable_eq α]\n  {σ} [decidable_eq σ]\n  {τ} [decidable_eq τ]\n  (f : σ → mv_polynomial τ α) (g : τ → α)\n  (H : ∀ (p : mv_polynomial σ (mv_polynomial τ α)),\n    C ((p.eval f).eval g) = p.eval (C ∘ eval g ∘ f))\n  (a : τ) : C (g a) = X a :=\nby simpa using H (C (X a))\n</pre></div>",
        "id": 130953117,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533521707
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Cool! This is adding a lot of flexibility. Do you think it makes sense to add <code>map2_neg</code> and <code>map2_sub</code>?</p>",
        "id": 131023083,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533618527
    },
    {
        "content": "<p>Sure. They should be direct applications of the <code>is_ring_hom</code> instance</p>",
        "id": 131023091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533618563
    },
    {
        "content": "<p>Ok, do you want me to do that? Or have you already done it (-;</p>",
        "id": 131023142,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533618613
    },
    {
        "content": "<p>I haven't done it, it's up to you</p>",
        "id": 131023151,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533618676
    },
    {
        "content": "<p>Ok, I'll add them.</p>",
        "id": 131023155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533618713
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is <code>rw</code> the \"morally\" correct way to prove such a thing?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">map₂_sub</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"n\">q</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map₂</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">map₂</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">-</span> <span class=\"n\">q</span><span class=\"bp\">.</span><span class=\"n\">map₂</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">is_ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_sub</span> <span class=\"o\">(</span><span class=\"n\">map₂</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 131023374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533619144
    },
    {
        "content": "<p>you should be able to just apply the theorem, right? Does <code>is_ring_hom.map_sub _</code> work as a proof?</p>",
        "id": 131023381,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533619200
    },
    {
        "content": "<p>Yes, it does. Thanks! Do you want a 5 line PR?</p>",
        "id": 131023437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533619260
    },
    {
        "content": "<p>sure</p>",
        "id": 131023448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533619300
    },
    {
        "content": "<p>You should have the same theorems for <code>eval</code> and <code>map</code> too</p>",
        "id": 131023451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533619317
    },
    {
        "content": "<p>and <code>C</code></p>",
        "id": 131023496,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533619333
    },
    {
        "content": "<p>Ok, I'll add those too</p>",
        "id": 131023578,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533619488
    },
    {
        "content": "<p><code>map_add</code> and <code>map_mul</code> are simp lemmas</p>",
        "id": 131023734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533619696
    },
    {
        "content": "<p>But the corresponding lemmas for <code>map2</code> are not.</p>",
        "id": 131023735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533619705
    },
    {
        "content": "<p>Is there a reason for this?</p>",
        "id": 131023737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533619709
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> If you can tell me which ones should be simp lemmas, then I think I'm done.</p>",
        "id": 131023962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533620075
    },
    {
        "content": "<p>I think there was, but I don't think it was a good reason. Just make them all simp lemmas</p>",
        "id": 131023966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533620087
    },
    {
        "content": "<p><code>eval</code> too</p>",
        "id": 131023976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533620114
    },
    {
        "content": "<p>And <code>C</code> as well</p>",
        "id": 131023985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533620141
    },
    {
        "content": "<p>There probably isn't any point in having the <code>_sub</code> theorems be simp lemmas, since the LHS is not in simp normal form</p>",
        "id": 131023991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533620156
    },
    {
        "content": "<p>Hmm, I don't think I know what that means. Nevertheless, it would be cool if <code>simp</code> would just do all those rewrites for me...</p>",
        "id": 131024076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533620278
    },
    {
        "content": "<p>PR'd</p>",
        "id": 131024219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533620435
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Ok, so now there are some merge conflicts... The renaming is straightforward.</p>",
        "id": 131028888,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533628682
    },
    {
        "content": "<p>Shall I make the <code>add</code> and <code>mul</code> lemmas into simp lemmas?</p>",
        "id": 131028928,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533628697
    },
    {
        "content": "<p>yeah, same as the last version of your PR</p>",
        "id": 131028937,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533628730
    },
    {
        "content": "<p>Ok!</p>",
        "id": 131028949,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533628757
    },
    {
        "content": "<p>Updated the PR</p>",
        "id": 131033604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1533635249
    }
]