[
    {
        "content": "<p>I pushed the results of yesterdays painful efforts to <a href=\"https://github.com/leanprover-community/mathlib/blob/open_set/category_theory/examples/topological_spaces.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/open_set/category_theory/examples/topological_spaces.lean\">https://github.com/leanprover-community/mathlib/blob/open_set/category_theory/examples/topological_spaces.lean</a>. This wouldn't have been possible without the great help of <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> <br>\nI guess that some of the proofs need to be minimised. I obfuscated them as much as possible, and don't see how to squeeze out more. If someone wants to take a look, please go ahead.<br>\nThe motivation for these changes is that we want to be able to talk about \"sheaves on a basis\".</p>",
        "id": 135955551,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539762096
    },
    {
        "content": "<p>I think <code>open_set</code> should be unbundled in the topology argument</p>",
        "id": 135990528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539800018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  What do you mean with that?</p>",
        "id": 135991087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539800474
    },
    {
        "content": "<p>You want an unbundled version in <code>analysis/topology/blah.lean</code>?</p>",
        "id": 135991108,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539800504
    },
    {
        "content": "<p>I think we also want the bundled version. But maybe I should first prove things with it, to show that it is useful.</p>",
        "id": 135991165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539800545
    },
    {
        "content": "<p>I mean that for a fixed topological space, <code>@open_set X top_X</code> is a category</p>",
        "id": 135994508,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539803986
    },
    {
        "content": "<p>On top of that there is an <code>open_set</code> <em>functor</em>  from <code>Top</code> to <code>Type</code>, but that needs its own definition anyway</p>",
        "id": 135994589,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539804024
    },
    {
        "content": "<p>er, I think I mean lattice not category, I see you haven't given it a category structure</p>",
        "id": 135994650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539804103
    },
    {
        "content": "<p>so in that case it could indeed move to <code>analysis/topology</code>. I would suggest the name <code>opens</code> for this lattice</p>",
        "id": 135994706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539804138
    },
    {
        "content": "<p>It is... every preorder is a category (in mathlib)</p>",
        "id": 135994710,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539804142
    },
    {
        "content": "<p>right, but you haven't made any explicit reference to categories in the definition</p>",
        "id": 135994724,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539804169
    },
    {
        "content": "<p>Hmmm... I don't follow exactly. Do you want to change the definition of <code>open_set</code>? Or do you want to define <code>opens</code> and if so, what should it be?</p>",
        "id": 135994811,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539804249
    },
    {
        "content": "<p>Also, should we change the definition of <code>open_set X</code> to <code>open_set X := X.str</code>? That is equivalent, and might simplify a lot of the stuff that follows...</p>",
        "id": 135994954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539804421
    },
    {
        "content": "<p><code>def opens (X : Type*) [topological_space X] : Type* := {s // is_open s}</code></p>",
        "id": 135997479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539806890
    },
    {
        "content": "<p>I don't understand the idea behind the <code>X.str</code> definition. The point is that <code>open_set X</code> is a type, not a structure</p>",
        "id": 135997602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539807032
    },
    {
        "content": "<p>my proposal is <code>opens</code> as above, and <code>category.opens : Top ⥤ Cat</code> (or some other prefix?) has that as its object part</p>",
        "id": 135997659,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539807117
    },
    {
        "content": "<p>although maybe we need more functors than just that because it's properly a 2-functor</p>",
        "id": 135997756,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539807202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> So <code>open_set</code> should go asway, and be replaced by <code>opens</code>?<br>\nWhat is wrong with:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">opens</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"n\">is_open</span>\n</pre></div>\n\n\n<p>That is what I meant with the <code>X.str</code> definition.</p>",
        "id": 136018803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539835124
    },
    {
        "content": "<p>That doesn't typecheck?</p>",
        "id": 136018818,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539835181
    },
    {
        "content": "<p>Ok, fair enough. I meant <code>subtype t.is_open</code>. I fixed this above.</p>",
        "id": 136018953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539835423
    },
    {
        "content": "<p>that's the same as I wrote modulo eta expansion</p>",
        "id": 136018996,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539835450
    },
    {
        "content": "<p>Right. So it doesn't matter.</p>",
        "id": 136018999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539835473
    },
    {
        "content": "<p>well, you are also using a different <code>is_open</code></p>",
        "id": 136019003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539835496
    },
    {
        "content": "<p>Aah, and maybe mine is more painful?</p>",
        "id": 136019018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539835521
    },
    {
        "content": "<p>there are fewer lemmas about it</p>",
        "id": 136019025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539835540
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you mean you would like to see something like this in <code>analysis/topology/topological_space.lean</code>?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">opens</span>\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">opens</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"bp\">_</span><span class=\"n\">root_</span><span class=\"bp\">.</span><span class=\"n\">is_open</span> <span class=\"n\">s</span><span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_subset</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">subset</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">⊆</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_mem</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">mem</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">extensionality</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"bp\">=</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">U</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">V</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"n\">partial_order</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refine</span> <span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"err\">⊆</span><span class=\"o\">),</span> <span class=\"bp\">..</span> <span class=\"o\">}</span> <span class=\"bp\">;</span> <span class=\"n\">tidy</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">opens</span>\n</pre></div>\n\n\n<p>Note that I am using <code>tidy</code> in the last line. I don't know if this is too early in the mathlib-tree?</p>",
        "id": 136023764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539844837
    },
    {
        "content": "<p>If this is the direction you had in mind, I can continue moving stuff from the category folder into this file; and then PR it.</p>",
        "id": 136023792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539844906
    },
    {
        "content": "<p>We have functions for transfering a partial order</p>",
        "id": 136023793,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539844911
    },
    {
        "content": "<p><code>partial_order.lift</code></p>",
        "id": 136023837,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539844944
    },
    {
        "content": "<p>I hope you aren't so attached to using blasty tactics that you are reproving theorems that we already have</p>",
        "id": 136023849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539844984
    },
    {
        "content": "<p>in fact, <code>subtype.partial_order</code> is just what you need</p>",
        "id": 136023856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539845023
    },
    {
        "content": "<p><code>ext</code> is <code>subtype.eq</code></p>",
        "id": 136023905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539845088
    },
    {
        "content": "<p>Ok, that's fine with me. But about the general direction? Is this what you want?</p>",
        "id": 136023910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539845099
    },
    {
        "content": "<p>yes</p>",
        "id": 136023918,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539845108
    },
    {
        "content": "<p>But <code>subtype.ext</code> is not an ext-lemma</p>",
        "id": 136023966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539845165
    },
    {
        "content": "<p>Should I phrase mine as an ext-lemma, or as an iff?</p>",
        "id": 136023971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539845186
    },
    {
        "content": "<p>I'm not saying you shouldn't state it, but it is a proof by reference to subtype.eq</p>",
        "id": 136024115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539845500
    },
    {
        "content": "<p>Right. But which version should I state? Or both?</p>",
        "id": 136024117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539845516
    },
    {
        "content": "<p><code>extensionality</code> requires the one-directional form</p>",
        "id": 136024159,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539845548
    },
    {
        "content": "<p>I don't know if it would be better to use set extensionality as well though</p>",
        "id": 136024162,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539845577
    },
    {
        "content": "<p>so it says <code>forall a, a \\in U \\lr a \\in V</code></p>",
        "id": 136024168,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539845593
    },
    {
        "content": "<p><code>ext</code> can chain those together. So I think I'll only do the first step.</p>",
        "id": 136024230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539845672
    },
    {
        "content": "<p>Done. See <a href=\"https://github.com/leanprover/mathlib/issues/427\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/427\">#427</a>.</p>",
        "id": 136025567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539847756
    },
    {
        "content": "<blockquote>\n<p>But <code>subtype.ext</code> is not an ext-lemma</p>\n</blockquote>\n<p>I've been wondering about this one --- can we make <code>attribute [extensionality] subtype.eq</code>?</p>",
        "id": 136047222,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1539873180
    },
    {
        "content": "<p>ext can chain them, but you will get <code>x \\in U.val</code> instead of <code>x \\in U</code></p>",
        "id": 136047463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539873383
    }
]