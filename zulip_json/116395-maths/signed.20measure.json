[
    {
        "content": "<p>Hi,<br>\nI would like to prove Hahn decomposition and am I correct in saying that there is no signed measure in mathlib yet? <br>\nUsing the definition from wikipedia, I think a natural definition for this is to define a signed measure as a function to <code>with_top \\R</code> (satisfying the axioms).  Would this be a good idea? Would theory about <code>with_top \\R</code> be welcome in mathlib?</p>",
        "id": 244576015,
        "sender_full_name": "Jason KY.",
        "timestamp": 1625150066
    },
    {
        "content": "<p><code>ereal</code> is the type of <code>real</code> + infty. It's already in mathlib.</p>",
        "id": 244576208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625150143
    },
    {
        "content": "<p>signed measures, I don't know</p>",
        "id": 244576229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1625150153
    },
    {
        "content": "<p>I think <code>ereal</code> includes the negative infinity as well which I don't think is good for the definition of signed measure</p>",
        "id": 244576514,
        "sender_full_name": "Jason KY.",
        "timestamp": 1625150251
    },
    {
        "content": "<p>If <code>mu</code> is a signed measure, you want <code>-mu</code> to also be a signed measure. So, if you allow plus infinity, you also need minus infinity (and indeed <code>ereal</code> contains both).</p>",
        "id": 244576911,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1625150414
    },
    {
        "content": "<p>Thats a good point, thanks. In that case, would the following definition be any good? </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">signed_measure</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">measure_of</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ereal</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">empty</span> <span class=\"o\">:</span> <span class=\"n\">measure_of</span> <span class=\"bp\">∅</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">m_Union</span> <span class=\"o\">⦃</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">⦄</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measurable_set</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"n\">on</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">measure_of</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">∑'</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measure_of</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">faithful</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">signed_measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_faithful</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">measurable_set</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">measurable_set</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"n\">s.measure_of</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span> <span class=\"bp\">→</span> <span class=\"n\">s.measure_of</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 244577280,
        "sender_full_name": "Jason KY.",
        "timestamp": 1625150557
    },
    {
        "content": "<p>It depends on what you want to do. Most signed measures I have ever encountered had finite total variation, and in this case you could even take the measure to be real-valued (or more generally vector-space valued, which has the advantage of treating in particular complex-valued measures). If allowing infinity is important for you, though, then I think your definition looks good (although I am not completely sure if you shouldn't add some summability assumptions -- but you will see that when trying to formalize theorems).</p>",
        "id": 244579363,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1625151297
    },
    {
        "content": "<p>I've now continued to work with the definition (and it seems that you were correct in that I didn't need infinity anyway) and gotten as far as proving the <a href=\"https://github.com/JasonKYi/probability_theory/blob/main/src/hahn.lean#L529\">Hahn decomposition</a> and the <a href=\"https://github.com/JasonKYi/probability_theory/blob/main/src/singular.lean#L28\">Jordan decomposition theorem</a>. I've now realized a problem with this definition where two signed measures are equal iff the underlying function is equal for every <code>set \\a</code>. This is not what I want since I would like two signed measure to be equal if they agree on measurable sets. To fix this I added the condition that a signed measure on nonmeasurable set is 0 (see <a href=\"https://github.com/JasonKYi/probability_theory/blob/main/src/signed_measure.lean#L18\">here</a>) and it seems to work fine. Is this a reasonable condition? Is there a better method of fixing this problem? Thanks</p>",
        "id": 244958237,
        "sender_full_name": "Jason KY.",
        "timestamp": 1625505177
    },
    {
        "content": "<p>What about the trick of defining the measure of a non measurable set as the sup of the measures of its measurable subsets?</p>",
        "id": 244958364,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1625505263
    },
    {
        "content": "<p>Are you aware that the Hahn decomposition is already in mathlib (for positive measures) in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.hahn_decomposition\">docs#measure_theory.hahn_decomposition</a> ?</p>",
        "id": 244958518,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1625505367
    },
    {
        "content": "<p>Do I impose that as a condition in the structure, or do you mean do something similar to what was done for <code>outer_measure</code> for normal measures</p>",
        "id": 244958525,
        "sender_full_name": "Jason KY.",
        "timestamp": 1625505373
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> <a href=\"#narrow/stream/116395-maths/topic/signed.20measure/near/244958518\">said</a>:</p>\n<blockquote>\n<p>Are you aware that the Hahn decomposition is already in mathlib (for positive measures) in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.hahn_decomposition\">docs#measure_theory.hahn_decomposition</a> ?</p>\n</blockquote>\n<p>Can I deduce the signed measure version from the positive measure version?</p>",
        "id": 244958588,
        "sender_full_name": "Jason KY.",
        "timestamp": 1625505434
    },
    {
        "content": "<p>That's not obvious to me!</p>",
        "id": 244958876,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1625505656
    },
    {
        "content": "<p>I guess my question is, should I pr what I have now or do you think my definition is crappy and needs to be reworked</p>",
        "id": 244959119,
        "sender_full_name": "Jason KY.",
        "timestamp": 1625505866
    },
    {
        "content": "<p>I think you should probably go for a general definition of vector-valued measure, called <code>vector_measure</code>, and require in the definition that things are summable, via</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">m_Union</span> <span class=\"o\">⦃</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">⦄</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measurable_set</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"n\">on</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measure_of</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"o\">(</span><span class=\"n\">measure_of</span> <span class=\"o\">(</span><span class=\"bp\">⋃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>But your restriction that the measure of non-measurable sets should be zero looks perfectly fine to me. </p>\n<p>Then develop everything you can for general vector-valued measure (to handle simultaneously signed measures and complex measures), and specialize to signed measures only when it's needed (no need for a new name, just use <code>vector_measure ℝ</code>).</p>",
        "id": 244965136,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1625511193
    },
    {
        "content": "<p>I wonder if we need to require things to be summable. In my current definition, I was able to prove <a href=\"https://github.com/JasonKYi/probability_theory/blob/main/src/signed_measure.lean#L292\">that</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">summable_measure_of</span>\n  <span class=\"o\">(</span><span class=\"n\">hf₁</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">measurable_set</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hf₂</span> <span class=\"o\">:</span> <span class=\"n\">pairwise</span> <span class=\"o\">(</span><span class=\"n\">disjoint</span> <span class=\"n\">on</span> <span class=\"n\">f</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- where `s` is any signed measure, `f : \\N \\to set \\a`</span>\n</code></pre></div>",
        "id": 244965951,
        "sender_full_name": "Jason KY.",
        "timestamp": 1625511900
    },
    {
        "content": "<p>I will definitely try to generalize the definition for vector valued measures and report back when I made some progress</p>",
        "id": 244965999,
        "sender_full_name": "Jason KY.",
        "timestamp": 1625511950
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> <a href=\"#narrow/stream/116395-maths/topic/signed.20measure/near/244965951\">said</a>:</p>\n<blockquote>\n<p>I wonder if we need to require things to be summable.</p>\n</blockquote>\n<p>Maybe it's not strictly necessary, but in any case the definition will be usable only if it implies summability, so you might as well require it directly.</p>",
        "id": 244967527,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1625513293
    },
    {
        "content": "<p>Whenever you check that you have a vector measure, when checking <code>m_Union</code> even in its weak version you will need to prove the summability (because otherwise you won't be able to prove anything), so requiring summability in the definition will not make checking it harder, and it will make using it easier.</p>",
        "id": 244967590,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1625513394
    },
    {
        "content": "<p>I see what you mean, I will add the condition in that case</p>",
        "id": 244968014,
        "sender_full_name": "Jason KY.",
        "timestamp": 1625513772
    },
    {
        "content": "<p>Actually, i'm not sure requiring summability makes using it easier since in that case, we need to prove <code>summable f</code> whenever we want to use this property</p>",
        "id": 244968692,
        "sender_full_name": "Jason KY.",
        "timestamp": 1625514417
    },
    {
        "content": "<p>But, I think it might be necessary to require it nonetheless since I believe the proof only works for finite dimensional spaces</p>",
        "id": 244968784,
        "sender_full_name": "Jason KY.",
        "timestamp": 1625514506
    },
    {
        "content": "<p>My advice is to require <code>has_sum</code> in the property <code>m_Union</code>, see <a href=\"#narrow/stream/116395-maths/topic/signed.20measure/near/244965136\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/signed.20measure/near/244965136</a>. It requires that, for any disjoint sets <code>f i</code>, their measures are summable, and add up to the measure of their union.</p>",
        "id": 244969183,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1625514890
    },
    {
        "content": "<p>So, when you use it you don't need to prove summability, instead summability is given to you for free.</p>",
        "id": 244969224,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1625514930
    },
    {
        "content": "<p>Ah! Sorry I missed your suggestion. Thats much better than what I had in mind</p>",
        "id": 244969237,
        "sender_full_name": "Jason KY.",
        "timestamp": 1625514945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> This is what I have right now: <a href=\"https://github.com/JasonKYi/probability_theory/blob/main/src/vector_measure.lean#L41\">https://github.com/JasonKYi/probability_theory/blob/main/src/vector_measure.lean#L41</a><br>\nIs there anything else you think needs changing?</p>",
        "id": 245039374,
        "sender_full_name": "Jason KY.",
        "timestamp": 1625578663
    }
]