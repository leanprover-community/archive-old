[
    {
        "content": "<p>Could someone prove that xor is not associative constructively, perhaps by constructing a Kripke model where this fails?</p>",
        "id": 125256439,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524065232
    },
    {
        "content": "<p>here <code>xor</code> is defined as Lean defines it: <code>p xor q := (p and not q) or (not p and q)</code></p>",
        "id": 125256453,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524065264
    },
    {
        "content": "<p>or maybe show that <code>xor</code> is associative implies LEM</p>",
        "id": 125256507,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524065312
    },
    {
        "content": "<p>if you defined <code>xor'</code> as <code>(p or q) and (not p or not q)</code> then can you constructively prove that this is the same as <code>xor</code>?</p>",
        "id": 125256694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065558
    },
    {
        "content": "<p>I can't believe I'm thinking about such nonsense</p>",
        "id": 125256703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065579
    },
    {
        "content": "<p>let's say you can. and then?</p>",
        "id": 125256719,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524065619
    },
    {
        "content": "<p>I've convinced myself that you can</p>",
        "id": 125256762,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524065651
    },
    {
        "content": "<p>I guess distributivity is all fine constructively</p>",
        "id": 125256781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065720
    },
    {
        "content": "<blockquote>\n<p>I can't believe I'm thinking about such nonsense</p>\n</blockquote>\n<p>Kevin, I'm very disappointed</p>",
        "id": 125256783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524065721
    },
    {
        "content": "<p>I'm trying to finish this affine scheme thing and he keeps pestering me!</p>",
        "id": 125256787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065735
    },
    {
        "content": "<p>He should work on mechanics each time he is tempted by constructivist non-sense</p>",
        "id": 125256846,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524065782
    },
    {
        "content": "<p>mechanics is super constructive</p>",
        "id": 125256848,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524065789
    },
    {
        "content": "<p>you bunch are horrible people</p>",
        "id": 125256851,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524065796
    },
    {
        "content": "<p>with spanners and everything</p>",
        "id": 125256852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524065797
    },
    {
        "content": "<blockquote>\n<p>you bunch are horrible people</p>\n</blockquote>\n<p>We are working on saving your soul</p>",
        "id": 125256971,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524065991
    },
    {
        "content": "<p>:(</p>",
        "id": 125256975,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524065999
    },
    {
        "content": "<p>Kenny, the only technique I know for this sort of thing is to imagine Prop is some topological space</p>",
        "id": 125257018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524066005
    },
    {
        "content": "<p>that's one interpretation</p>",
        "id": 125257032,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524066022
    },
    {
        "content": "<p>and then there's something with open sets</p>",
        "id": 125257034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524066025
    },
    {
        "content": "<p>but I like Kripke model more</p>",
        "id": 125257036,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524066026
    },
    {
        "content": "<p>Imagining Prop is a topological space saves souls??</p>",
        "id": 125257042,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524066035
    },
    {
        "content": "<p>since it's morally what's going on behind constructivism</p>",
        "id": 125257043,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524066035
    },
    {
        "content": "<p>where not p is something like the interior of the complement of p</p>",
        "id": 125257044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524066038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> he's unsaving me</p>",
        "id": 125257048,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524066043
    },
    {
        "content": "<p>All I'm saying is that the one time in my life when I thought about this was a few months ago, when I proved that not not p implies p was not provable constructively</p>",
        "id": 125257062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524066070
    },
    {
        "content": "<p>by making some trivial observation about topological spaces</p>",
        "id": 125257070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524066083
    },
    {
        "content": "<p>right, but the connection is not trivial at all :-)</p>",
        "id": 125257074,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524066094
    },
    {
        "content": "<p>having just read some Wikipedia article about this sort of thing</p>",
        "id": 125257075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524066097
    },
    {
        "content": "<p>soon they will be using toposes...</p>",
        "id": 125257083,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524066111
    },
    {
        "content": "<p>and it seems to me that your question might yield to the same strategy</p>",
        "id": 125257087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524066118
    },
    {
        "content": "<p>here is a simpler problem: if not (p xor q), is p decidable?</p>",
        "id": 125264808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524075878
    },
    {
        "content": "<p>ah, of course not: if p &lt;-&gt; q then not (p xor q) but then p may be some arbitrary nondecidable proposition</p>",
        "id": 125265116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524076254
    },
    {
        "content": "<p>use non-well-founded recursion to prove that p is decidable :P <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 125265606,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524076846
    },
    {
        "content": "<p>using p &lt;-&gt; q</p>",
        "id": 125265608,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524076852
    },
    {
        "content": "<p>Maybe a better problem: if <code>xor p q</code>, is <code>p</code> decidable?</p>",
        "id": 125266047,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524077413
    },
    {
        "content": "<p>BTW, this is a nice puzzle!  Thanks, <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 125266061,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524077445
    },
    {
        "content": "<p>no problem</p>",
        "id": 125266065,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077452
    },
    {
        "content": "<p>here's what inspired me</p>",
        "id": 125266078,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077466
    },
    {
        "content": "<p>I wanted to prove that Prop is a group under xor</p>",
        "id": 125266084,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077473
    },
    {
        "content": "<p>but if this is possible, then it would imply double negation elimination</p>",
        "id": 125266088,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077486
    },
    {
        "content": "<p>so one of the group axioms must go wrong</p>",
        "id": 125266089,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077491
    },
    {
        "content": "<p>who can possibly know that it is the associativity</p>",
        "id": 125266091,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077497
    },
    {
        "content": "<p>(well I eliminated the other trivial axioms though)</p>",
        "id": 125266093,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077507
    },
    {
        "content": "<blockquote>\n<p>Maybe a better problem: if <code>xor p q</code>, is <code>p</code> decidable?</p>\n</blockquote>\n<p>technically, even <code>p or not p</code> doesn't mean <code>p</code> is decidable</p>",
        "id": 125266148,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077562
    },
    {
        "content": "<p>Kenny did you try the topological space approach?</p>",
        "id": 125266159,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077590
    },
    {
        "content": "<p>Ah, you're right of course.</p>",
        "id": 125266173,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524077634
    },
    {
        "content": "<blockquote>\n<p>Kenny did you try the topological space approach?</p>\n</blockquote>\n<p>I'm busy getting free group to work</p>",
        "id": 125266216,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077648
    },
    {
        "content": "<p>You need to check p xor not p is provable :-)</p>",
        "id": 125266225,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077685
    },
    {
        "content": "<p>OK let me just spend a few minutes doing the top space thing in case it clarifies anything</p>",
        "id": 125266232,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077703
    },
    {
        "content": "<p>I don't remember the details</p>",
        "id": 125266237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077709
    },
    {
        "content": "<p>but is the idea somehow that we can think of a prop as being an open set in a topological space</p>",
        "id": 125266244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077727
    },
    {
        "content": "<p>right</p>",
        "id": 125266248,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077733
    },
    {
        "content": "<p>not = exterior, or = union, and = intersection</p>",
        "id": 125266250,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077740
    },
    {
        "content": "<p>not is what?</p>",
        "id": 125266254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077751
    },
    {
        "content": "<p>exterior</p>",
        "id": 125266255,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077756
    },
    {
        "content": "<p>Do I take the interior of the complement?</p>",
        "id": 125266256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077759
    },
    {
        "content": "<p>right</p>",
        "id": 125266294,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077763
    },
    {
        "content": "<p>Is that what exterior means? I've never heard that</p>",
        "id": 125266296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077766
    },
    {
        "content": "<p>yes</p>",
        "id": 125266300,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077769
    },
    {
        "content": "<p>interior + boundary + exterior = whole space</p>",
        "id": 125266303,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077781
    },
    {
        "content": "<p>interior + boundary = closure</p>",
        "id": 125266305,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077789
    },
    {
        "content": "<p>So are we 100 percent fixed on definition of xor?</p>",
        "id": 125266306,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077790
    },
    {
        "content": "<p>what is xor here?</p>",
        "id": 125266309,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077798
    },
    {
        "content": "<p>oh right, we already have everything</p>",
        "id": 125266313,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077803
    },
    {
        "content": "<p>yes then</p>",
        "id": 125266316,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077806
    },
    {
        "content": "<p>so here is a proof of LEM from xor assoc:</p>\n<div class=\"codehilite\"><pre><span></span>example (h : ∀ p q r, xor p (xor q r) ↔ xor (xor p q) r) {p} : p ∨ ¬ p :=\nhave ¬ xor p p, from λ h, h.elim (λ ⟨hp, np⟩, np hp) (λ ⟨hp, np⟩, np hp),\nhave xor p (xor p true), from (h p p true).2 (or.inr ⟨trivial, this⟩),\nthis.imp and.left and.right\n</pre></div>",
        "id": 125266318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524077811
    },
    {
        "content": "<p>great, Mario just saved me a job :-)</p>",
        "id": 125266332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077833
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> muito obrigado</p>",
        "id": 125266341,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077853
    },
    {
        "content": "<p>this is random but related to xor: has anyone seen a definition of one-hot encoding?</p>",
        "id": 125266387,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524077892
    },
    {
        "content": "<p>now the other way!</p>",
        "id": 125266388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077894
    },
    {
        "content": "<p>Oh the other way is trivial, right?</p>",
        "id": 125266391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077905
    },
    {
        "content": "<p>Just do cases</p>",
        "id": 125266392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077908
    },
    {
        "content": "<p>right</p>",
        "id": 125266396,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524077920
    },
    {
        "content": "<p>so this is another way of formulating LEM :-)</p>",
        "id": 125266400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077927
    },
    {
        "content": "<p>that Prop is a group :-)</p>",
        "id": 125266406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524077937
    },
    {
        "content": "<p>right</p>",
        "id": 125266595,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524078188
    },
    {
        "content": "<p>and people won't guess that it is associativity that fails</p>",
        "id": 125266598,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524078194
    },
    {
        "content": "<p>I'll put it on next year's Christmas Quiz</p>",
        "id": 125266605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078212
    },
    {
        "content": "<p>I wonder if there is any group structure on Prop?</p>",
        "id": 125266655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524078256
    },
    {
        "content": "<p>The double-negation translation of <code>xor</code> should do the job.</p>",
        "id": 125266662,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524078284
    },
    {
        "content": "<p>rofl</p>",
        "id": 125266665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078290
    },
    {
        "content": "<p>I am not so sure life is so easy</p>",
        "id": 125266676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078309
    },
    {
        "content": "<p>I don't think that will satisfy the cancellation laws on nondecidable props</p>",
        "id": 125266694,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524078333
    },
    {
        "content": "<p>I am not sure this has inverses.</p>",
        "id": 125266697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078337
    },
    {
        "content": "<p>This question is related to putting a group structure on the set of open sets in a topological space I guess</p>",
        "id": 125266758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078409
    },
    {
        "content": "<p>Mmh, the double-negation translation turns classical theorems into intuitionistic theorems.  So if <code>xor</code> is associative, etc., classicaly then <code>xor^N</code> should be intuitionistically associative, etc.</p>",
        "id": 125266765,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524078418
    },
    {
        "content": "<p>true, but the group has to include all props, not just the negative props</p>",
        "id": 125266781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524078458
    },
    {
        "content": "<p>in my language, consider open sets which are dense. Their negation is empty</p>",
        "id": 125266840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078503
    },
    {
        "content": "<p>so you have lost information which is never coming back, and that's bad for groups</p>",
        "id": 125266846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078519
    },
    {
        "content": "<p>Does the following make sense:</p>",
        "id": 125266861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078563
    },
    {
        "content": "<p>there is a two-point space with one point open</p>",
        "id": 125266864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078580
    },
    {
        "content": "<p>and this space has three open sets</p>",
        "id": 125266869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078591
    },
    {
        "content": "<p>and so if it were a group it would be cyclic of order 3</p>",
        "id": 125266871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078600
    },
    {
        "content": "<p>and now I want to write down a map from bool to this set or from this set to bool</p>",
        "id": 125266923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078619
    },
    {
        "content": "<p>and argue that if Prop had a group structure it would have to be a group homomorphism</p>",
        "id": 125266927,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078628
    },
    {
        "content": "<p>but things don't add up</p>",
        "id": 125266929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078634
    },
    {
        "content": "<p>Ah, how about this: every (definable in intuitionistic logic) one-arg operator is noninjective on some topological space or is the identity</p>",
        "id": 125266957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524078668
    },
    {
        "content": "<p>because I am hoping I am writing down two incompatible \"interpretations\" of Prop somehow</p>",
        "id": 125266960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524078670
    },
    {
        "content": "<p>Ah yes, everything goes through except <code>xor p false &lt;-&gt; p</code>...</p>",
        "id": 125266964,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524078681
    },
    {
        "content": "<blockquote>\n<p>Ah yes, everything goes through except <code>xor p false &lt;-&gt; p</code>...</p>\n</blockquote>\n<p>what do you mean?</p>",
        "id": 125267027,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524078771
    },
    {
        "content": "<p>isn't that intuitionistically valid</p>",
        "id": 125267039,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524078786
    },
    {
        "content": "<p><code>xor</code> implies both its arguments are decidable</p>",
        "id": 125267057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524078803
    },
    {
        "content": "<p>(in the LEM sense)</p>",
        "id": 125267060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524078818
    },
    {
        "content": "<p>does it?</p>",
        "id": 125267075,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524078833
    },
    {
        "content": "<p>right, it does</p>",
        "id": 125267093,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524078842
    },
    {
        "content": "<p>something is wrong with me</p>",
        "id": 125267120,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524078850
    },
    {
        "content": "<p><code>xor p false &lt;-&gt; p</code> fails for the double-negation translation.  It is true in the official version, though.</p>",
        "id": 125267153,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1524078928
    },
    {
        "content": "<p>Can't one just check associativity of xor in Heyting algebras? It fails in the 3-element Heyting algebra where 0&lt;1&lt;2:  (2 xor 2) xor 1 \\ne 2 xor (2 xor 1)    (assuming a xor b is defined as (a or b) and not (a and b)). Of course this would require quite some background work defining Heyting algebras etc.</p>",
        "id": 125624185,
        "sender_full_name": "Peter Jipsen",
        "timestamp": 1524582268
    },
    {
        "content": "<p>Is it the same thing as Kripke frames?</p>",
        "id": 125624194,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524582284
    },
    {
        "content": "<p>Yes, it's the algebraic version</p>",
        "id": 125624204,
        "sender_full_name": "Peter Jipsen",
        "timestamp": 1524582305
    },
    {
        "content": "<p>aha</p>",
        "id": 125624210,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524582309
    },
    {
        "content": "<p>a xor b is defined as (a and not b) or (not a and b)</p>",
        "id": 125624216,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524582321
    },
    {
        "content": "<p>would knowing about Kripke frames and boolean algebra make Heyting algebra easy to learn? if so, do you mind teaching me?</p>",
        "id": 125624225,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524582350
    },
    {
        "content": "<p><a href=\"http://www.cri.ensmp.fr/classement/doc/E-372.pdf\" target=\"_blank\" title=\"http://www.cri.ensmp.fr/classement/doc/E-372.pdf\">http://www.cri.ensmp.fr/classement/doc/E-372.pdf</a></p>",
        "id": 125624285,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524582396
    },
    {
        "content": "<p>:o infinite logic?</p>",
        "id": 125624360,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524582501
    },
    {
        "content": "<p>the paper is a little hard to read without a little more background</p>",
        "id": 125624389,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524582589
    },
    {
        "content": "<p>but the coq code is nice</p>",
        "id": 125624390,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524582592
    },
    {
        "content": "<p><a href=\"https://github.com/SkySkimmer/NormalisationByCompleteness\" target=\"_blank\" title=\"https://github.com/SkySkimmer/NormalisationByCompleteness\">https://github.com/SkySkimmer/NormalisationByCompleteness</a></p>",
        "id": 125624391,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1524582593
    },
    {
        "content": "<p>The definition (a and not b) or (not a and b) has the same counterexample.<br>\nThe equivalence between finite Heyting algebras and finite partially ordered Kripke frames is similar to the equivalence between finite Boolean algebras and finite sets, so you have all the necessary background. (In the general case Esakia spaces are a categorical dual of Heyting algebras.) Propositional intuitionistic logic is decidable, so questions like this can be answered algorithmically by a tableau prover or Gentzen's sequent calculus LJ.</p>",
        "id": 125625538,
        "sender_full_name": "Peter Jipsen",
        "timestamp": 1524584060
    },
    {
        "content": "<p>thanks</p>",
        "id": 125625548,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524584090
    },
    {
        "content": "<p>A interesting test problem is to decide if the two definitions of xor are intuitionistically equivalent. I would like to understand how one would use Lean to help prove or refute it. E.g. is there a tactic that implements tableau?</p>",
        "id": 125626599,
        "sender_full_name": "Peter Jipsen",
        "timestamp": 1524585809
    }
]