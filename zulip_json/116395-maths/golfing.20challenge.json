[
    {
        "content": "<p>This shouldn't be so hard/long/slow...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">polynomial</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">polynomial</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- The formal derivative of polynomials, as additive homomorphism. -/</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">derivative_hom</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"bp\">→+</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">derivative</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">derivative_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">derivative_add</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">derivative_neg</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">derivative</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">-</span><span class=\"n\">derivative</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">derivative_hom</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_neg</span> <span class=\"n\">f</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">derivative_sub</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">derivative</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">derivative</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"n\">derivative</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">derivative_hom</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_sub</span> <span class=\"n\">f</span> <span class=\"n\">g</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_coprime_of_is_root_of_eval_derivative_ne_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">is_root</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf&#39;</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">derivative</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">is_coprime</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">/</span><span class=\"err\">ₘ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_div_by_monic_eq_iff_is_root</span> <span class=\"n\">at</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hf</span> <span class=\"n\">at</span> <span class=\"n\">hf&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eval_C</span><span class=\"o\">,</span> <span class=\"n\">eval_X</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">derivative_X</span><span class=\"o\">,</span> <span class=\"n\">derivative_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">eval_sub</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">derivative_sub</span><span class=\"o\">,</span> <span class=\"n\">eval_add</span><span class=\"o\">,</span> <span class=\"n\">eval_mul</span><span class=\"o\">,</span> <span class=\"n\">derivative_C</span><span class=\"o\">,</span> <span class=\"n\">sub_self</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hf&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_coprime_of_dvd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">push_neg</span><span class=\"o\">,</span> <span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"k\">assume</span> <span class=\"n\">eqz</span><span class=\"o\">,</span>\n    <span class=\"n\">apply_fun</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"n\">at</span> <span class=\"n\">eqz</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">degree_X_sub_C</span> <span class=\"n\">at</span> <span class=\"n\">eqz</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">no_confusion</span> <span class=\"n\">eqz</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">a</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span> <span class=\"bp\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hab</span><span class=\"bp\">⟩</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"kn\">irreducible</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">irreducible_of_degree_eq_one</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">degree_X_sub_C</span> <span class=\"bp\">_</span> <span class=\"o\">},</span>\n    <span class=\"n\">rcases</span> <span class=\"o\">(</span><span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">is_unit_or_is_unit</span> <span class=\"n\">hab</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">ha</span><span class=\"bp\">|⟨</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h1</span> <span class=\"n\">ha</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">hf&#39;</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"n\">is_root</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">dvd_iff_is_root</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">dvd_trans</span> <span class=\"bp\">⟨</span><span class=\"err\">↑</span><span class=\"n\">b</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hab</span><span class=\"o\">,</span> <span class=\"n\">units</span><span class=\"bp\">.</span><span class=\"n\">mul_inv_cancel_right</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">polynomial</span>\n</code></pre></div>",
        "id": 196060730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588439011
    },
    {
        "content": "<p>Probably this can be golfed more, but heres a slightly different proof (I think?) </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">is_coprime_of_is_root_of_eval_derivative_ne_zero</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">is_root</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf&#39;</span> <span class=\"o\">:</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">derivative</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">is_coprime</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">/</span><span class=\"err\">ₘ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">aa</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">/</span><span class=\"err\">ₘ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">%ₘ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">))</span>  <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_sub_iff_add_eq</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">eq_sub_iff_add_eq&#39;</span><span class=\"o\">,</span> <span class=\"n\">mod_by_monic_eq_sub_mul_div</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">monic_X_sub_C</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">derivative</span> <span class=\"n\">at</span> <span class=\"n\">aa</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">derivative_X</span><span class=\"o\">,</span> <span class=\"n\">derivative_mul</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">,</span> <span class=\"n\">derivative_sub</span><span class=\"o\">,</span> <span class=\"n\">mod_by_monic_X_sub_C_eq_C_eval</span><span class=\"o\">,</span> <span class=\"n\">derivative_C</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">aa</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">resolve_left</span> <span class=\"o\">(</span><span class=\"n\">dvd_or_coprime</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">/</span><span class=\"err\">ₘ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">irreducible_of_degree_eq_one</span> <span class=\"o\">(</span><span class=\"n\">polynomial</span><span class=\"bp\">.</span><span class=\"n\">degree_X_sub_C</span> <span class=\"n\">r</span><span class=\"o\">)))</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">hf&#39;</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"n\">derivative</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">aa</span> <span class=\"bp\">▸</span> <span class=\"o\">(</span><span class=\"n\">dvd_add</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">dvd</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">(</span><span class=\"n\">derivative</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">/</span><span class=\"err\">ₘ</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"n\">r</span><span class=\"o\">)))</span> <span class=\"n\">rfl</span><span class=\"o\">)),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">dvd_iff_mod_by_monic_eq_zero</span> <span class=\"o\">(</span><span class=\"n\">monic_X_sub_C</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">mod_by_monic_X_sub_C_eq_C_eval</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">apply_fun</span> <span class=\"n\">coeff</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">congr_fun</span> <span class=\"n\">this</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff_C_zero</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196063662,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1588443322
    },
    {
        "content": "<p>Thanks... it's certainly shorter than what I had.</p>",
        "id": 196069265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588452132
    },
    {
        "content": "<p>Feel free to turn this into a kata.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span>\n\n<span class=\"c1\">-- Generalise this to arbitrary property that is respected by addition/multiplication:</span>\n<span class=\"c1\">-- example applications: sum_pos, sum_neg, ... others?</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">dvd_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">∣</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">b</span> <span class=\"err\">∣</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">∣</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">t</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">subset</span><span class=\"bp\">.</span><span class=\"n\">refl</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">revert</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">simp</span><span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">s&#39;</span> <span class=\"n\">ha</span> <span class=\"n\">IH</span> <span class=\"n\">hs&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">insert_subset</span> <span class=\"n\">at</span> <span class=\"n\">hs&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hs&#39;</span> <span class=\"k\">with</span> <span class=\"n\">has</span> <span class=\"n\">hs&#39;</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">dvd_add</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">coe_nat_dvd</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_cast</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">dvd_sub_pow_of_dvd_sub</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span> <span class=\"n\">clear</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_eq_add_one</span><span class=\"o\">],</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">ih</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hc</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sub_eq_iff_eq_add&#39;</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hc</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">add_pow</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_range_succ</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_self</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">cast_one</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n    <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_self</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">mul_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_eq_pow</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hc</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">add_sub_cancel&#39;</span><span class=\"o\">],</span> <span class=\"n\">clear</span> <span class=\"n\">hc</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">dvd_sum</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span> <span class=\"n\">at</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_pow</span><span class=\"o\">,</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span> <span class=\"o\">},</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">dvd_mul_of_dvd_right</span> <span class=\"o\">},</span> <span class=\"n\">clear</span> <span class=\"n\">c</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">coe_nat_dvd</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">^</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_dvd_pow</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_left&#39;</span> <span class=\"err\">$</span> <span class=\"n\">le_add_left</span> <span class=\"err\">$</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_of_eq</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">mul_le_mul_left</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">hp</span><span class=\"bp\">.</span><span class=\"n\">two_le</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">p</span><span class=\"o\">)),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_two</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">i_pos</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pos_of_ne_zero</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_dvd_mul</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">generalize</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">sub_pos_of_lt</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">conv</span> <span class=\"o\">{</span><span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_one</span> <span class=\"n\">b</span><span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_dvd_pow</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">dvd_choose</span> <span class=\"n\">i_pos</span> <span class=\"n\">hi</span> <span class=\"err\">‹</span><span class=\"bp\">_</span><span class=\"err\">›</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196989334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589027111
    },
    {
        "content": "<p>Currently it takes so long on my machine that I'm worried codewars wouldn't accept it.</p>",
        "id": 196989346,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589027134
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/golfing.20challenge/near/196989334\" title=\"#narrow/stream/116395-maths/topic/golfing.20challenge/near/196989334\">said</a>:</p>\n<blockquote>\n<p>Feel free to turn this into a <del>kata</del> mathlib PR.</p>\n</blockquote>",
        "id": 196989400,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589027188
    },
    {
        "content": "<p>Only after it's fast enough to be a kata</p>",
        "id": 196989418,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589027214
    },
    {
        "content": "<p>The generalization of the first theorem is <code>is_add_submonoid.sum_mem</code>. Whether that's a good way to state it I don't know.</p>",
        "id": 196990008,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589028227
    },
    {
        "content": "<p>But it might be a good way to prove it.</p>",
        "id": 196990061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589028292
    },
    {
        "content": "<p>On the other hand, the other suggestions don't really follow from <code>sum_mem</code>, I guess. Things like <code>sum_pos</code> and <code>sum_neg</code></p>",
        "id": 196990080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589028327
    },
    {
        "content": "<p>Well, they do, but I don't think the relevant submonoids have been set up.</p>",
        "id": 196990127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589028363
    },
    {
        "content": "<p><code>sum_pos</code> and <code>sum_neg</code> actually need <code>is_add_subsemigroup.sum_mem_of_ne_empty</code> which doesn't exist.</p>",
        "id": 196991420,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589030394
    },
    {
        "content": "<p><code>sum_nonpos</code> and <code>sum_nonneg</code>...</p>",
        "id": 196991463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589030417
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">geom_sum</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"c1\">-- Generalise this to arbitrary property that is respected by addition/multiplication:</span>\n<span class=\"c1\">-- example applications: sum_pos, sum_neg, ... others?</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">dvd_sum</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">∣</span> <span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">b</span> <span class=\"err\">∣</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">revert</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">dvd_zero</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">has</span> <span class=\"n\">ih</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">forall_mem_insert</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_insert</span> <span class=\"n\">has</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">dvd_add</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">ih</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">coe_nat_dvd</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">∣</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_cast</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_ring_hom</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk_hom</span> <span class=\"n\">I</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_ring_hom</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">mk_eq_mk_hom</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">I</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk_hom</span> <span class=\"n\">I</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_geom_series₂</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→+*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">geom_series₂</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">geom_series₂</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">geom_series₂_def</span><span class=\"o\">,</span> <span class=\"n\">geom_series₂_def</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_hom</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"o\">],</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">map_pow</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">geom_series₂_self</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">geom_series₂</span> <span class=\"n\">x</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span>  <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n    <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">pow_add</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">congr_arg</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_sub_cancel&#39;</span> <span class=\"err\">$</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_pred_of_lt</span> <span class=\"err\">$</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hi</span><span class=\"o\">)</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_const</span> <span class=\"bp\">_</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card_range</span><span class=\"o\">,</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">]</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">dvd_sub_pow_of_dvd_sub</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">geom_sum₂_mul</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mul_dvd_mul</span> <span class=\"bp\">_</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_span_singleton</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">,</span> <span class=\"n\">mk_eq_mk_hom</span><span class=\"o\">,</span> <span class=\"n\">mk_eq_mk_hom</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_span_singleton</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_iff_mem</span><span class=\"o\">,</span> <span class=\"n\">mk_eq_mk_hom</span><span class=\"o\">,</span>\n      <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_geom_series₂</span><span class=\"o\">,</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_pow</span><span class=\"o\">,</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_pow</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">geom_series₂_self</span><span class=\"o\">,</span>\n      <span class=\"err\">←</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_pow</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_pow</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">erw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk_hom</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)))</span><span class=\"bp\">.</span><span class=\"n\">to_add_monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span>\n      <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_iff_mem</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mul_mem_right</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_span_singleton</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">dvd_refl</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196993221,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589033244
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> the trick is to use <code>geom_series\\2</code> and quotient ring</p>",
        "id": 196993237,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589033280
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>  Sounds good. Thanks! Wanna make a PR?</p>",
        "id": 196993454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589033559
    },
    {
        "content": "<p>go ahead</p>",
        "id": 196993461,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589033579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Golfed further:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">dvd_sub_pow_of_dvd_sub</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">fact</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"n\">a</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">∣</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">p</span><span class=\"bp\">^</span><span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">,</span> <span class=\"n\">pow_one</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"n\">pow_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">geom_sum₂_mul</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mul_dvd_mul</span> <span class=\"bp\">_</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">p</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_span_singleton</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_iff_mem</span><span class=\"o\">,</span> <span class=\"n\">mk_eq_mk_hom</span><span class=\"o\">,</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_nat_cast</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_span_singleton</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">,</span> <span class=\"n\">mk_eq_mk_hom</span><span class=\"o\">,</span> <span class=\"n\">mk_eq_mk_hom</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_span_singleton</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_iff_mem</span><span class=\"o\">,</span> <span class=\"n\">mk_eq_mk_hom</span><span class=\"o\">,</span>\n      <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_geom_series₂</span><span class=\"o\">,</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_pow</span><span class=\"o\">,</span> <span class=\"n\">ring_hom</span><span class=\"bp\">.</span><span class=\"n\">map_pow</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">geom_series₂_self</span><span class=\"o\">,</span>\n      <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196994350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589034725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> aha, you applied the quotient philosophy even more</p>",
        "id": 196994371,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589034786
    },
    {
        "content": "<p>Wow, from a monster it's now at de Bruijn index 1!</p>",
        "id": 196995771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589036619
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2640\" title=\"https://github.com/leanprover-community/mathlib/issues/2640\">#2640</a></p>",
        "id": 196996126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589037104
    },
    {
        "content": "<p>Unexpected side effect: the proof doesn't use that <code>p</code> is prime (-;</p>",
        "id": 197000897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589043471
    },
    {
        "content": "<p>Maybe not so unexpected after all. But that hypothesis certainly existed in my mental copy of this lemma (-;</p>",
        "id": 197000940,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589043507
    },
    {
        "content": "<p>Linters are good.</p>",
        "id": 197000943,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589043519
    },
    {
        "content": "<p>wow that's unexpected</p>",
        "id": 197001109,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589043795
    },
    {
        "content": "<p>it's probably because you called the variable <code>p</code></p>",
        "id": 197001123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589043839
    },
    {
        "content": "<p>It's called <code>n</code> now (-;</p>",
        "id": 197001162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589043854
    },
    {
        "content": "<p>I sort of think it should still be called <code>p</code></p>",
        "id": 197001263,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589044032
    },
    {
        "content": "<p>I had no idea this was true for <code>p</code> not prime and I would certainly expect to see <code>p</code> in the theorem statement</p>",
        "id": 197001266,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589044045
    },
    {
        "content": "<p>Oops... I didn't update the theorem name...</p>",
        "id": 197001270,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589044063
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> You can prove the special case, if you want <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 197001416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589044196
    },
    {
        "content": "<p>I don't need the special case, I just want the theorem statement to read as expected, with the <code>prime p</code> hypothesis mysteriously absent.</p>",
        "id": 197001512,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589044247
    },
    {
        "content": "<p>Sure, was only joking</p>",
        "id": 197001798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589044532
    },
    {
        "content": "<p>Yeah I like that style, it's kind of an in joke</p>",
        "id": 197002305,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589045062
    },
    {
        "content": "<p>For 2 you can beat this result, 2^(k+2) divides the 2^kth power if k&gt;=1.</p>",
        "id": 197002359,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589045116
    },
    {
        "content": "<p>And does this get used somewhere?</p>",
        "id": 197002438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589045163
    },
    {
        "content": "<p>And the pair (1,5) show that this is tight for all k&gt;=1</p>",
        "id": 197002454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589045176
    },
    {
        "content": "<p>Analogous to the pair (1,p+1) showing its tight for odd primes</p>",
        "id": 197002480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589045208
    },
    {
        "content": "<p>You mean for arbitrary <code>p ≥ 3</code>?</p>",
        "id": 197002506,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589045233
    },
    {
        "content": "<p>For <code>p = 1</code> you can do even better than for <code>p = 2</code>!!!</p>",
        "id": 197002515,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589045256
    },
    {
        "content": "<p>Yes you can use it to demonstrate that 1+p resp 5 have large multiplicative orders mod p^n, and determine their order precisely</p>",
        "id": 197002518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589045265
    },
    {
        "content": "<p>And is this fact about <code>5</code> used somewhere?</p>",
        "id": 197002561,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589045304
    },
    {
        "content": "<p>This gives you the structure theorem for the units of Z/p^nZ and then by CRT the structure of the units in Z/NZ</p>",
        "id": 197002563,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589045308
    },
    {
        "content": "<p>Aah, I see</p>",
        "id": 197002567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589045320
    },
    {
        "content": "<p>Yes it tells you that the units in Z/32 have an element of order 8 and with that and the elements +-17 you know the structure of the group modulo the structure theorem</p>",
        "id": 197002606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589045371
    },
    {
        "content": "<p>Which you can probably prove by hand here</p>",
        "id": 197002616,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589045378
    },
    {
        "content": "<p><code>dec_trivial</code>?</p>",
        "id": 197002633,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589045396
    },
    {
        "content": "<p>Lol, just kidding</p>",
        "id": 197002673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589045403
    },
    {
        "content": "<p>If only</p>",
        "id": 197002689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589045410
    },
    {
        "content": "<p>But were you aware that this lemma doesn't need the primality assumption?</p>",
        "id": 197002700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589045420
    },
    {
        "content": "<p>It's <code>come_on_lean</code> you need</p>",
        "id": 197002704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589045424
    },
    {
        "content": "<p>No I didn't know</p>",
        "id": 197002713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589045434
    },
    {
        "content": "<p>Would that give you a speed up for the structure theorem?</p>",
        "id": 197002724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589045443
    },
    {
        "content": "<p>But everything I said needed it</p>",
        "id": 197002728,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589045446
    },
    {
        "content": "<p>Ok, I see</p>",
        "id": 197002739,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589045458
    },
    {
        "content": "<p>Well, we can make those tightness bounds into an issue for later</p>",
        "id": 197002791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589045510
    },
    {
        "content": "<p>I think this is made more precise by the \"Lifting the Exponent lemma\", i.e. \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>p</mi></msub><mo stretchy=\"false\">(</mo><msup><mi>a</mi><mi>n</mi></msup><mo>−</mo><msup><mi>b</mi><mi>n</mi></msup><mo stretchy=\"false\">)</mo><mo>=</mo><msub><mi>v</mi><mi>p</mi></msub><mo stretchy=\"false\">(</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mo>+</mo><msub><mi>v</mi><mi>p</mi></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">v_p(a^n - b^n) = v_p(a-b)  + v_p(n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">b</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">n</span><span class=\"mclose\">)</span></span></span></span> for p odd prime with p dividing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>−</mo><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">a-b</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">b</span></span></span></span> but not a or b\"</p>",
        "id": 197003189,
        "sender_full_name": "David Wärn",
        "timestamp": 1589046165
    },
    {
        "content": "<p>But that needs the primality assumption...</p>",
        "id": 197003254,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589046286
    },
    {
        "content": "<p>Probably one direction does, yes</p>",
        "id": 197003355,
        "sender_full_name": "David Wärn",
        "timestamp": 1589046470
    },
    {
        "content": "<p>Or maybe both... Not sure</p>",
        "id": 197003414,
        "sender_full_name": "David Wärn",
        "timestamp": 1589046538
    }
]