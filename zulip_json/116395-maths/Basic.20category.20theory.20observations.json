[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">functor</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v‚ÇÅ</span> <span class=\"n\">v‚ÇÇ</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">u‚ÇÇ</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÅ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÅ</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"err\">ùíü</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v‚ÇÇ</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"err\">‚ãô</span> <span class=\"mi\">ùü≠</span> <span class=\"n\">D</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">comp_id</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"mi\">ùü≠</span> <span class=\"n\">C</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">comp_id</span> <span class=\"c1\">-- compiled before I&#39;d finished editing to F.id_comp</span>\n</pre></div>\n\n\n<p>The last line works; the line above tells you the actual type. I was surprised.</p>",
        "id": 189981374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583606874
    },
    {
        "content": "<p>Another surprising functor thing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"err\">‚ãô</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">comp_map</span> <span class=\"n\">G</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"c1\">-- or rfl</span>\n</pre></div>\n\n\n<p><code>comp_map</code> wants <code>X</code> and <code>Y</code> explicitly (here f: X \\h Y)</p>",
        "id": 189981583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583607161
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"err\">‚ãô</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">comp_map</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"c1\">-- or rfl</span>\n</pre></div>",
        "id": 189981598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583607225
    },
    {
        "content": "<p>Surprising natural transformation fact:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">structure</span> <span class=\"n\">nat_trans</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"err\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u‚ÇÅ</span> <span class=\"n\">v‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>The definition of the structure is tagged <code>ext</code>!</p>",
        "id": 189981797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583607527
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Basic.20category.20theory.20observations/near/189981583\" title=\"#narrow/stream/116395-maths/topic/Basic.20category.20theory.20observations/near/189981583\">said</a>:</p>\n<blockquote>\n<p>Another surprising functor thing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"err\">‚ãô</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">comp_map</span> <span class=\"n\">G</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"c1\">-- or rfl</span>\n</pre></div>\n\n\n<p><code>comp_map</code> wants <code>X</code> and <code>Y</code> explicitly (here f: X \\h Y)</p>\n</blockquote>\n<p>what are you of all people doing term mode proofs for!</p>",
        "id": 189982118,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583608060
    },
    {
        "content": "<p>But yes, this seems not ideal</p>",
        "id": 189982125,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583608071
    },
    {
        "content": "<p>You're avoiding the question.</p>",
        "id": 189982133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583608082
    },
    {
        "content": "<p>What was the question?</p>",
        "id": 189982168,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583608091
    },
    {
        "content": "<p><code>example : ùü≠ C ‚ãô F = F := F.comp_id </code></p>",
        "id": 189982171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583608102
    },
    {
        "content": "<p>Yes because I was still thinking about that one. I mean both proofs look like <code>cases F; refl</code> so I guess that is the reason?</p>",
        "id": 189982178,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583608128
    },
    {
        "content": "<p><code>example : F.comp_id = F.id_comp := rfl</code> despite them having different types</p>",
        "id": 189982182,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583608144
    },
    {
        "content": "<p>oh, no</p>",
        "id": 189982183,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583608145
    },
    {
        "content": "<p>It's because 1 C &gt;&gt;&gt; F and F &gt;&gt;&gt; 1 D are definitionally equal</p>",
        "id": 189982185,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583608167
    },
    {
        "content": "<p>This is doing my head in</p>",
        "id": 189982221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583608202
    },
    {
        "content": "<p>OK fair enough</p>",
        "id": 189982243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583608231
    },
    {
        "content": "<p>So they're not definitionally equal to F, but they're definitionally equal to each other?</p>",
        "id": 189982248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583608256
    },
    {
        "content": "<p>I mean, it's \"almost\" the case that 1 C &gt;&gt;&gt; F = F definitionally in the first place. It would be true with definitional eta expansion for records.</p>",
        "id": 189982250,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583608258
    },
    {
        "content": "<p>Are we getting that in Lean 4?</p>",
        "id": 189982256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583608281
    },
    {
        "content": "<p>They're both definitionally equal to <code>{ obj := F.obj, map := F.map, ... }</code> or so</p>",
        "id": 189982257,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583608290
    },
    {
        "content": "<p>I see.</p>",
        "id": 189982259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583608297
    },
    {
        "content": "<p>Very nice!</p>",
        "id": 189982261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583608304
    },
    {
        "content": "<p>I doubt it, but wouldn't rule it out entirely</p>",
        "id": 189982263,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583608308
    },
    {
        "content": "<p>Similarly composition of functors is definitionally associative</p>",
        "id": 189982301,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583608326
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Basic.20category.20theory.20observations/near/189982118\" title=\"#narrow/stream/116395-maths/topic/Basic.20category.20theory.20observations/near/189982118\">said</a>:</p>\n<blockquote>\n<p>what are you of all people doing term mode proofs for!</p>\n</blockquote>\n<p>I'm re-learning all the notation for category theory because I learnt it once, didn't use it for 3 months and then realised I'd forgotten it all. I'm writing some basic docs, I'm nearly done.</p>",
        "id": 189982439,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583608570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Basic.20category.20theory.20observations/near/189981583\" title=\"#narrow/stream/116395-maths/topic/Basic.20category.20theory.20observations/near/189981583\">said</a>:</p>\n<blockquote>\n<p>Another surprising functor thing:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"err\">‚ãô</span> <span class=\"n\">G</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">G</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">comp_map</span> <span class=\"n\">G</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"c1\">-- or rfl</span>\n</pre></div>\n\n\n<p><code>comp_map</code> wants <code>X</code> and <code>Y</code> explicitly (here f: X \\h Y)</p>\n</blockquote>\n<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib/issues/2103\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2103\">#2103</a>, hopefully.</p>",
        "id": 189983010,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583609434
    },
    {
        "content": "<p>These \"accidents\" that composition of functors is definitionally associative (and almost definitionally unital), have been a cause of trouble: implicitly relying on these facts have resulted in some bad <code>rfl</code> incidents where proofs became extremely slow.</p>",
        "id": 189983038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583609512
    },
    {
        "content": "<p>Aah I remember this: at the time someone explained the analogy of proving <code>11111+22222=33333</code> by <code>rfl</code> instead of by <code>norm_num</code>. I've mentioned definitional equality a few times in <a href=\"https://github.com/leanprover-community/mathlib/issues/2104\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2104\">#2104</a> -- perhaps this is a double-edged sword. I now realise that I did not mention automation once.</p>",
        "id": 189983642,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583610636
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/Basic.20category.20theory.20observations/near/189983010\" title=\"#narrow/stream/116395-maths/topic/Basic.20category.20theory.20observations/near/189983010\">said</a>:</p>\n<blockquote>\n<p>Fixed in <a href=\"https://github.com/leanprover-community/mathlib/issues/2103\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/2103\">#2103</a>, hopefully.</p>\n</blockquote>\n<p>I don't really have any feeling as to whether G and f should also be implicit. Not having <code>F</code> implicit means that you can use projection notation <em>shrug</em></p>",
        "id": 189983721,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583610750
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, do you object if I push a commit that linewraps all the paragraphs? It will be easier to review.</p>",
        "id": 189983852,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583611030
    },
    {
        "content": "<p>Okay, I did it anyway. :-)</p>",
        "id": 189983905,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583611098
    },
    {
        "content": "<p>While we're at this, I'm very happy to replace the choice of <code>\\hom</code> arrow. I choose it way back when, before I understood that it was easy to update <code>translations.json</code>.</p>",
        "id": 189983987,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583611297
    },
    {
        "content": "<p>How about <code>‚§è</code>, <code>‚§ë</code>, <code>‚á¢</code>, <code>‚≠¢</code>, <code>‚§≥</code>, <code>‚ûû</code>, <code>‚áæ</code>, <code>‚á•</code>?</p>",
        "id": 189983988,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583611301
    },
    {
        "content": "<p>Feel free to do what you like with the PR. I think that rather than adding confusion by changing the arrow I should just find how to change the default font in my VS Code set-up. I've seen people with huge arrows in their VS Code.</p>",
        "id": 189984426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583612110
    },
    {
        "content": "<p>A question about tutorials --- my instinct is that it's better to write tutorials as Lean files, using <code>/-! -/</code> module doc comments for the text, rather than writing as markdown files with code blocks.</p>",
        "id": 189984701,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583612566
    },
    {
        "content": "<p>Having the tutorials runnable (and be checked by CI) is pretty useful.</p>",
        "id": 189984712,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583612582
    },
    {
        "content": "<p>I appreciate that it's harder to explain how to do imports, etc.</p>",
        "id": 189984720,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583612605
    },
    {
        "content": "<p>That's an interesting comment. I wrote the <code>simp</code> tutorial as an md file when I was learning about simp but I noticed you preferred lean files</p>",
        "id": 189986068,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583614895
    },
    {
        "content": "<p>I do worry about tutorials bit rotting, and CI checked lean files help there.</p>",
        "id": 189986251,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583615201
    },
    {
        "content": "<p>We need more tutorials Lean files. Also remember everybody is very welcome to contribute to <a href=\"https://github.com/leanprover-community/tutorials\" target=\"_blank\" title=\"https://github.com/leanprover-community/tutorials\">https://github.com/leanprover-community/tutorials</a>. I'm not saying everything you want to call a tutorial should go there, but it would be nice to have more there.</p>",
        "id": 189986589,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583615836
    },
    {
        "content": "<p>I think that I want an md file precisely because I found that my workflow yesterday involved having a bunch of lean files from the category theory library open in VS Code and having to switch between them; with an md file I can get the information I needed on a nice web link in GitHub</p>",
        "id": 189987234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583617079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, after playing with fonts for a bit, I think you want <code>Deja Vu Sans Mono</code>, which has a nice big arrow (and seems generally nice). I mentioned that in the new category theory docs. It seems others were already using it. (I read back through zulip, and found various old discussions of fonts.)</p>",
        "id": 189999569,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583642628
    },
    {
        "content": "<p>Also, I noticed that I renamed <code>docs/tutorials/category_theory/category_theory_intro.md</code> to <code>docs/tutorials/category_theory/intro.md</code>, and then when you converted it to a Lean file (thanks!) it became again <code>docs/tutorials/category_theory/category_theory_intro.lean</code>.</p>",
        "id": 189999616,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583642702
    },
    {
        "content": "<p>I don't think we're having a revert war, just not noticing, but if it's okay with you I'll rename it back to <code>intro.lean</code>, and the principle that the directory it's in already tells you it's about category theory?</p>",
        "id": 189999627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583642739
    },
    {
        "content": "<p>Also -- I'll delete the markdown file now? (I just made a bunch of further changes, all to the Lean file, so they've already parted ways.)</p>",
        "id": 189999669,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583642808
    },
    {
        "content": "<p>The name \"change\" was because I made the lean file without noticing you had made a commit -- I don't care what the files are called.</p>\n<p>But for me, the markdown file is better. I would go so far to say that the markdown file is what I actually want. It's easier to read in a web browser, it appropriately changes notation (we have f : W -&gt; X when talking about categories because I wanted to talk about transitivity W -&gt; X -&gt; Y -&gt; Z and f : X -&gt; Y when talking about functors because I didn't), and the imports are more explanatory. The variable names in the Lean file are really messed up because I can't unvariable a variable. The natural way to fix this would to be to make three Lean files with different variable names -- one for categories, one for functors and one for natural transformations -- and the very fact that you need three Lean files to explain what is going on <em>is exactly the reason I wrote the md file in the first place</em>: I already have three Lean files which explain what's going on and instead I wanted one file which had markup. If you don't want the markdown file in the tutorials directory that's fine -- why don't we move it to <code>docs/extras</code>? I <em>definitely</em> want to keep the markdown file <em>somewhere</em>. I made the Lean file because you wanted it -- but when I was working on G-modules yesterday I had the markdown file open in a browser whilst I coded in VS Code.</p>",
        "id": 190006385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583657963
    },
    {
        "content": "<blockquote>\n<p>I can't unvariable a variable</p>\n</blockquote>\n<p>Maybe you need sections then.</p>",
        "id": 190006628,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583658403
    },
    {
        "content": "<blockquote>\n<p>An attempt to install it left me with <code>Source Code Variable</code>, where the arrows are hugely different :-) Unfortunately they are still the same in the \"Lean Messages\" view, which now has a different font to the tabs where I'm editing Lean files...</p>\n</blockquote>\n<p>I now see that there is a different setting which changes the font in the messages view!</p>",
        "id": 190007289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583659918
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Basic.20category.20theory.20observations/near/190006628\" title=\"#narrow/stream/116395-maths/topic/Basic.20category.20theory.20observations/near/190006628\">said</a>:</p>\n<blockquote>\n<blockquote>\n<p>I can't unvariable a variable</p>\n</blockquote>\n<p>Maybe you need sections then.</p>\n</blockquote>\n<p>That should solve the variable problem, and I don't really care about the import issue -- so all that's left is the fact that at the end of the day I want to view the file with markdown in a browser instead of clogging up my VS Code tabs -- the point of this is to get the aid I need out of VS Code.</p>",
        "id": 190007396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583660089
    },
    {
        "content": "<p>Here's another potential problem with getting three Lean files into one Lean file -- these universe order issues. In the md file I have <code>universes v u</code> when doing categories, then <code>universes v‚ÇÅ v‚ÇÇ v‚ÇÉ u‚ÇÅ u‚ÇÇ u‚ÇÉ</code> when doing functors. If I do that then <code>u</code> will be introduced before <code>v‚ÇÅ</code>. Will that matter? I still feel that I am fighting things in the Lean file which aren't issues in the markdown file. Why is the markdown file not a good idea?</p>\n<p>I'm adding sections to the Lean file.</p>",
        "id": 190007760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583660895
    },
    {
        "content": "<p>Okay! I hadn't appreciated how much you wanted a markdown file. So we better have it!</p>",
        "id": 190019551,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583685529
    },
    {
        "content": "<p>Oh it's OK, I put the sections in -- I'm much happier with the situation now.</p>",
        "id": 190019565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583685572
    },
    {
        "content": "<p>Here are some other possibilities:</p>",
        "id": 190019567,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583685585
    },
    {
        "content": "<ol>\n<li>we use the existing tooling to make a nice browser friendly file from the Lean tutorial</li>\n</ol>",
        "id": 190019610,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583685604
    },
    {
        "content": "<ol start=\"2\">\n<li>rewriting the actual library files for category/functor/natural_transformation, moving as much as possible into other files, possibly combining those three into a single file, and including in that file as much documentation as is reasonable</li>\n</ol>",
        "id": 190019701,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583685731
    },
    {
        "content": "<p>I'm over it now. My problem was with the variables. I pushed a fix to the Lean file a few hours ago and removed the WIP tag. I'm happy to go ahead with the PR. I can use tooling to see what I want to see.</p>",
        "id": 190019715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583685800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, what do you think of moving the universes into sections too? (I'm happy to do this if you think it's a good idea.)</p>",
        "id": 190022204,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583690519
    },
    {
        "content": "<p>That way we won't have to mysteriously introduce 8 universes at once at the top of the file.</p>",
        "id": 190022243,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583690535
    },
    {
        "content": "<p>universes are I agree a bit ugly still. What I was worried about was that if we moved them to within sections then we would end up with <code>universes v u v1 u1</code> and would have committed the cardinal sin of declaring u before v1. Is this an issue? That was the only reason I declared them all at the start.</p>",
        "id": 190022254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583690598
    },
    {
        "content": "<p>It's only the pairs which are used together that need to be in the right order.</p>",
        "id": 190022262,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583690634
    },
    {
        "content": "<p>There's nothing wrong with v u v1 u1 v2 u2</p>",
        "id": 190022301,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583690646
    },
    {
        "content": "<p>Okay, I'll tweak this now.</p>",
        "id": 190022303,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583690655
    },
    {
        "content": "<p>Oh in which case let's definitely move the universes.</p>",
        "id": 190022304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583690656
    },
    {
        "content": "<p>There is definitely some really cool link which I can <em>never</em> find and which I associate with <span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> , where you can type in a mathlib PR or something, and it displays a Lean file in markdown. This is the last thing I need!</p>",
        "id": 190022312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583690703
    },
    {
        "content": "<p>I think it's a link to observable -- maybe an observable notebook?</p>",
        "id": 190022324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583690722
    },
    {
        "content": "<p>got it: <a href=\"https://observablehq.com/@bryangingechen/github-lean-doc-preview\" target=\"_blank\" title=\"https://observablehq.com/@bryangingechen/github-lean-doc-preview\">https://observablehq.com/@bryangingechen/github-lean-doc-preview</a></p>",
        "id": 190022336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583690756
    },
    {
        "content": "<p>Oh <em>darn</em> it, it doesn't display the Lean code when I feed it <a href=\"https://github.com/leanprover-community/mathlib/blob/category_theory_docs/docs/tutorial/category_theory/intro.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/category_theory_docs/docs/tutorial/category_theory/intro.lean\">https://github.com/leanprover-community/mathlib/blob/category_theory_docs/docs/tutorial/category_theory/intro.lean</a> !</p>",
        "id": 190022390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583690859
    },
    {
        "content": "<p>I really want to get this out of VS Code somehow.</p>",
        "id": 190022432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583690886
    },
    {
        "content": "<p>gaargh I'm going back to my local copy of the md file ;-)</p>",
        "id": 190022448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583690956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"123965\">@Bryan Gin-ge Chen</span> can we arrange for <a href=\"https://observablehq.com/@bryangingechen/github-lean-doc-preview\" target=\"_blank\" title=\"https://observablehq.com/@bryangingechen/github-lean-doc-preview\">https://observablehq.com/@bryangingechen/github-lean-doc-preview</a> to also display the Lean code? (Maybe via a checkbox option?)</p>",
        "id": 190022519,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583691056
    },
    {
        "content": "<p>In a tutorial it probably makes no difference in what order you define universe variables anyways</p>",
        "id": 190025015,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583695831
    },
    {
        "content": "<p>I didn't follow the discussion too closely but I would definitely prefer for these tutorials to be subject to CI somehow, most likely by being lean files. Otherwise I think they will become out of date quickly.</p>",
        "id": 190025077,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583695945
    },
    {
        "content": "<p>I can try to add syntax-highlighted Lean code to that notebook later this week. In principle we could also integrate \"live\" Lean on that page as well but the interface would be pretty ugly so I won't try.</p>",
        "id": 190025326,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1583696510
    },
    {
        "content": "<p>The issue is that md files rot and lean tutorial files which haven't been processed with Patrick's formatter can be read in VS code but if you're just using them as documentation to be read then they'd be better off out of VS code in my opinion -- it's more convenient for me to switch from Vs code to browser than it is to switch tabs in Vs code. At least this is my experience -- I am not sure I can pin tabs in Vs code</p>",
        "id": 190026354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583698445
    },
    {
        "content": "<p>So I think the best end goal is a lean file you can reasonably read in a browser. I'm not up to speed on the various tools we currently have to do things like this</p>",
        "id": 190026393,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583698555
    },
    {
        "content": "<p>Bryan's link above is cool. Is there a way we can make an md file from a lean file? I think Patrick might argue though that his formatter is the correct thing to be using. I guess one would need more tooling to keep an html file up to date though</p>",
        "id": 190026484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583698692
    },
    {
        "content": "<p>I haven't been following this thread. What do you want to do with my formatter? In any case I'm unlikely to argue it is the correct thing to be using, it is still very much an experiment. But I may suggest contributing to it.</p>",
        "id": 190026552,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583698851
    },
    {
        "content": "<p>In brief: I wanted somewhere where I could just remind myself of the difference between &lt;&lt; and &lt;&lt;&lt; etc, because I realised that whenever I wanted to do anything with categories I would have to have category.lean and functor.lean and natural_transformation.lean open in VS Code, and these three tabs were pushing my other tabs off the screen. So I wrote an md file like those simp.md or conv.md files to summarise how things work, and then all of a sudden Scott wanted to turn it back into a Lean file because he was concerned about bitrot, whereas I just wanted to view an md file in the browser.</p>",
        "id": 190026958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583699610
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/e7c960a221df0f0936986a0e30b86d4dd6f26197/docs/tutorial/category_theory/intro.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/e7c960a221df0f0936986a0e30b86d4dd6f26197/docs/tutorial/category_theory/intro.lean\">here</a> is the state of the Lean file. <a href=\"https://github.com/leanprover-community/mathlib/blob/ab3718ee5249d180ed8c535c30643efa21d869db/docs/tutorial/category_theory/intro.md\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/ab3718ee5249d180ed8c535c30643efa21d869db/docs/tutorial/category_theory/intro.md\">here</a> is what I initially had in mind.</p>",
        "id": 190027095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583699864
    },
    {
        "content": "<p>You don't have much tactic state to inspect in those files, right?</p>",
        "id": 190027208,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583700030
    },
    {
        "content": "<p>So you don't really need the non-trivial part of the formatter.</p>",
        "id": 190027216,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583700075
    },
    {
        "content": "<p>No, no tactic state at all.</p>",
        "id": 190027217,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583700081
    },
    {
        "content": "<p>Exactly. I wrote it precisely so I didn't have to keep opening functor.lean and then natural_transformation.lean whenever I saw &lt;&lt;&lt;. I am a slow learner and I wrote precisely what I needed to help me.</p>",
        "id": 190027219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583700093
    },
    {
        "content": "<p>So we could have a simple tool extracting all code-blocks from a md file, concatenate into a Lean file and check whether it compiles.</p>",
        "id": 190027259,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1583700157
    },
    {
        "content": "<p>I was still using the md file even at the end of when I was writing the G-module file, as I still couldn't remember the name of <code>alpha.naturality</code>; I know the maths but I don't remember the Lean notation for the concepts.</p>",
        "id": 190027275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583700208
    },
    {
        "content": "<p>I'm really dubious that the source should be an md file. Extracting documentation from code seems better than extracting code from documentation.</p>",
        "id": 190027393,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1583700425
    },
    {
        "content": "<p>If Bryan's tool could be made to output something that displays like the md file from the Lean file, I will certainly not be complaining.</p>",
        "id": 190027456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583700577
    },
    {
        "content": "<p>The extract code from documentation approach is quite common in other languages, I think it is also viable</p>",
        "id": 190030799,
        "sender_full_name": "Reid Barton",
        "timestamp": 1583706884
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <a href=\"https://observablehq.com/@bryangingechen/github-lean-file-viewer?url=%22https%3A%2F%2Fgithub.com%2Fleanprover-community%2Fmathlib%2Fblob%2Fmaster%2Fdocs%2Ftutorial%2Fcategory_theory%2Fintro.lean%22#docs\" target=\"_blank\" title=\"https://observablehq.com/@bryangingechen/github-lean-file-viewer?url=%22https%3A%2F%2Fgithub.com%2Fleanprover-community%2Fmathlib%2Fblob%2Fmaster%2Fdocs%2Ftutorial%2Fcategory_theory%2Fintro.lean%22#docs\">Here's a rough version of a Lean file viewer (applied to the category theory tutorial file)</a>. It makes use of <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>'s highlightjs code, which I copied to an Observable notebook <a href=\"https://observablehq.com/@bryangingechen/highlightjs-for-lean\" target=\"_blank\" title=\"https://observablehq.com/@bryangingechen/highlightjs-for-lean\">here</a>.</p>",
        "id": 190630298,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1584249224
    },
    {
        "content": "<p>Lovely.</p>",
        "id": 190630574,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1584249575
    },
    {
        "content": "<p>Perfect! This is precisely the document I needed last week :D Thanks Bryan! So the problem is now completely solved as far as I am concerned -- we can write docs which are Lean files and look at them like this.</p>",
        "id": 190636239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1584259735
    }
]