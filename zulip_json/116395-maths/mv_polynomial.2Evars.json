[
    {
        "content": "<p>I'm really struggling with <code>mv_polynomial.vars</code>. I'm looking for some lemma that I can use to reason about it without having to think about polynomials as <code>finsupp</code>. Something like the fact that <code>p</code> is in the image of the canonical map from <code>mv_polynomial p.vars R</code>, or the fact that for any set <code>s</code>, <code>algebra.adjoin (X '' s) = {p | ↑p.vars ⊆ s}</code>. Does someone who knows this part of the library have a good idea about how to do this?</p>",
        "id": 253011275,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631479997
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.eval₂\">docs#mv_polynomial.eval₂</a> the preferred way to \"change the variables type\" (after composition with <code>mv_polynomial.X</code> of course)? The API search comes up with nothing when I look for <code>mv_polynomial vars eval</code> which is not very promising...</p>",
        "id": 253012327,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631481182
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 253018043,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631487655
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/mv_polynomial.2Evars/near/253012327\">said</a>:</p>\n<blockquote>\n<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.eval₂\">docs#mv_polynomial.eval₂</a> the preferred way to \"change the variables type\" (after composition with <code>mv_polynomial.X</code> of course)? The API search comes up with nothing when I look for <code>mv_polynomial vars eval</code> which is not very promising...</p>\n</blockquote>\n<p>The preferred way is <code>rename</code>.</p>",
        "id": 253018053,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631487668
    },
    {
        "content": "<p>I guess maybe <code>vars_rename</code> is the key.</p>",
        "id": 253018278,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631487879
    },
    {
        "content": "<p>It's still not easy to work out how to use that.</p>",
        "id": 253018872,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631488492
    },
    {
        "content": "<p>( <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.vars_rename\">docs#mv_polynomial.vars_rename</a> since I'm on mobile)</p>",
        "id": 253018985,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631488655
    },
    {
        "content": "<p>Let <code>s</code> be the smallest set such that <code>p</code> is in the image of <code>rename (coe : s -&gt; sigma)</code>. suppose <code>rename coe q = p</code>, then <code>q.vars ⊆ s ⊆ p.vars</code> by <code>vars_rename</code>. Therefore <code>p</code> is in the image of the map from <code>mv_polynomial p.vars R</code>. I'm tired, but I hope that's right.</p>",
        "id": 253019144,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631488827
    },
    {
        "content": "<p>This tells me <code>vars</code> is big enough which is what I struggling with. I already knew it was small enough.</p>",
        "id": 253019189,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631488895
    },
    {
        "content": "<p>Hang on, I know <code>q.vars ⊆ s</code> and <code>q.vars ⊆ p.vars</code> but not <code>s ⊆ p.vars</code> which is what I need.</p>",
        "id": 253019389,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631489117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> I'm not a <code>vars</code> expert, but I've worked with it before. I need to take care of some bureaucrazy this morning. But please ping me later today, if you are still struggling with it then.</p>",
        "id": 253037898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631509053
    },
    {
        "content": "<p>It seems like I managed it. The key lemma was <code>eval₂_hom_congr'</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">exists_rename_eq_of_vars_subset_range</span>  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">σ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hfi</span> <span class=\"o\">:</span> <span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"n\">p.vars</span> <span class=\"bp\">⊆</span> <span class=\"n\">set.range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">rename</span> <span class=\"n\">f</span> <span class=\"n\">q</span> <span class=\"bp\">=</span> <span class=\"n\">p</span>\n</code></pre></div>",
        "id": 253055246,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631522176
    },
    {
        "content": "<p>I think I used <code>eval\\2_hom_congr'</code> a tonne during the Witt project.</p>",
        "id": 253055318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631522225
    },
    {
        "content": "<p>Do you need injectivity of <code>f</code>?</p>",
        "id": 253055362,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631522258
    },
    {
        "content": "<p>Ooh, I see. We used the version without <code>'</code> quite a lot, and the version with <code>'</code> was used twice.</p>",
        "id": 253055554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1631522384
    },
    {
        "content": "<p>(<a href=\"https://leanprover-community.github.io/mathlib_docs/find/mv_polynomial.eval₂_hom_congr'\">docs#mv_polynomial.eval₂_hom_congr'</a>)</p>",
        "id": 253056832,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1631523207
    }
]