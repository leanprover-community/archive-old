[
    {
        "content": "<p>Hello, I propose the following refactor of integrals; the design is partially based on <code>big_operators</code>.</p>\n<ol>\n<li>The main definition is the integral of a function w.r.t. an explicit measure <code>μ</code> on a set <code>s</code>.</li>\n<li>We have special <em>notation</em> for the cases <code>s = univ</code> and <code>μ = volume</code>.</li>\n<li>Most theorems take <code>s</code> and <code>μ</code> as implicit arguments.</li>\n<li>We still need a special notation/definition for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>d</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\int_a^b f(x)\\,dx</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.399828em;vertical-align:-0.35582em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.044008em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span><span style=\"top:-3.2579000000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">x</span></span></span></span> because we want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mo>∫</mo><mi>b</mi><mi>a</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>d</mi><mi>x</mi><mo>=</mo><mo>−</mo><msubsup><mo>∫</mo><mi>a</mi><mi>b</mi></msubsup><mi>f</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext> </mtext><mi>d</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">\\int_b^a f(x)\\,dx=-\\int_a^b f(x)\\,dx</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.215112em;vertical-align:-0.35582em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8592920000000001em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">b</span></span></span><span style=\"top:-3.2579000000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.399828em;vertical-align:-0.35582em;\"></span><span class=\"mord\">−</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.044008em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">a</span></span></span><span style=\"top:-3.2579000000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">b</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\">d</span><span class=\"mord mathdefault\">x</span></span></span></span>.</li>\n</ol>",
        "id": 200826837,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592157830
    },
    {
        "content": "<p>I agree with all of this.</p>",
        "id": 200827172,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592158409
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3075\">#3075</a> is the first step.</p>",
        "id": 200827535,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592158979
    },
    {
        "content": "<p>I am not sure it is worth going through small steps in such a big refactor: it will be painful to have something coherent at every step, and these PRs will also be hard to review if we don't know the bigger picture. Maybe you can just tell us here on Zulip what the main definitions and notations would be, then we discuss it here, and once we're all happy you can go for a giant PR that I will try to review quickly.</p>",
        "id": 200829310,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592161883
    },
    {
        "content": "<p>OK, I'll try this.</p>",
        "id": 200829809,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592162738
    },
    {
        "content": "<p>This sounds good to me. In Isabelle it was always painful having so many variations on the integral. I think this is the most elegant way to simplify and standardize.</p>",
        "id": 200903973,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1592234550
    },
    {
        "content": "<blockquote>\n<p>I am not sure it is worth going through small steps in such a big refactor</p>\n</blockquote>\n<p>Now I'm not sure that this is true. One of my goals is to make the new code \"almost\" backwards compatible with the old code. More precisely, old code using notation (and not functions) should compile, possibly after some search&amp;replace of lemma names. Another reason to go with smaller PRs is that I'm very bad at refactoring one part of a library without touching other parts.</p>\n<blockquote>\n<p>and these PRs will also be hard to review if we don't know the bigger picture</p>\n</blockquote>\n<p>Sure. I'll try to describe my plan tonight.</p>",
        "id": 200958093,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592263804
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/issues/3084\">#3084</a></p>",
        "id": 200961296,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592266847
    },
    {
        "content": "<p>It includes a notation <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 200961303,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592266860
    },
    {
        "content": "<p>(tested with <a href=\"https://github.com/leanprover-community/mathlib/issues/3075\">#3075</a>)</p>",
        "id": 200961311,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592266875
    },
    {
        "content": "<p>This looks great to me, except that I would put <code>∂ μ</code> at the end, if this is possible with Lean's notation system (I mean, write <code>∫⁻ x in t, 1  ∂ volume</code>. Also, do you have plans for more restricted classes of measures, say probability measures (or sigma-finite measures, or whatever)? It is easy to provide a typeclass extending <code>measure_space</code> specifying that <code> volume</code> should have mass 1, and to state theorems under this typeclass assumption, but it wouldn't make them easily available for any probability measure on any measure space without the typeclass. And conversely I don't see an easy mechanism to state the theorem in general with an assumption that would be filled automatically when dealing with a probability coming from the typeclass -- a default tactic for the assumption, maybe?</p>",
        "id": 200980340,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592292040
    },
    {
        "content": "<p>About notation: I copied notation for sums and slightly modified it. I don't know the full syntax of Lean <code>notation</code> command. I hope that someone with more experience with <code>notation</code> can help.</p>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span> (who else should I tag on questions like this one?)</p>",
        "id": 200980882,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592292524
    },
    {
        "content": "<p>We can have <code>@[class] def probability_measure (μ : measure α) := μ univ = 1</code>, a class <code>probability_space</code>, and an instance <code>[probability_space α] : probability_measure (volume : measure α)</code>.</p>",
        "id": 200981076,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592292643
    },
    {
        "content": "<p>The notations look fine.  We should probably adjust the precedence a little bit so that <code>∫⁻ x, 0 = 0</code> parses as expected.</p>",
        "id": 200981951,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592293391
    },
    {
        "content": "<p>That is, probably <code>notation `∫⁻` binders `, ` r:(scoped:67 f, lintegral volume set.univ f) := r</code></p>",
        "id": 200982062,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592293450
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/integral.20refactor/near/200981076\">said</a>:</p>\n<blockquote>\n<p>We can have <code>@[class] def probability_measure (μ : measure α) := μ univ = 1</code>, a class <code>probability_space</code>, and an instance <code>[probability_space α] : probability_measure (volume : measure α)</code>.</p>\n</blockquote>\n<p>Yes, looks perfect!</p>",
        "id": 200982137,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592293512
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110043\">Gabriel Ebner</span> <a href=\"#narrow/stream/116395-maths/topic/integral.20refactor/near/200981951\">said</a>:</p>\n<blockquote>\n<p>The notations look fine. </p>\n</blockquote>\n<p>I was asking if it is possible to put the measure at the end, to write <code>∫⁻ x in t, 1  ∂ volume</code>. Then the notation incantation should be different, and Yury doesn't know how to do it.</p>",
        "id": 200982238,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592293579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 201152689,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592405723
    },
    {
        "content": "<p>Is it easy/possible with <code>notation</code>? Of course, we can reorder arguments in the definition if it would help.</p>",
        "id": 201152854,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592405769
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">measure_theory</span><span class=\"bp\">.</span><span class=\"n\">measure_space</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">measure_theory</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">[</span><span class=\"n\">measure_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lintegral</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">∫⁻</span><span class=\"bp\">`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span> <span class=\"k\">in</span> <span class=\"bp\">`</span> <span class=\"n\">s</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">`</span> <span class=\"err\">∂</span> <span class=\"bp\">`</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">lintegral</span> <span class=\"n\">μ</span> <span class=\"n\">s</span> <span class=\"n\">r</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">∫⁻</span><span class=\"bp\">`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span> <span class=\"k\">in</span> <span class=\"bp\">`</span> <span class=\"n\">s</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">lintegral</span> <span class=\"n\">volume</span> <span class=\"n\">s</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">∫⁻</span><span class=\"bp\">`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">`</span> <span class=\"err\">∂</span> <span class=\"bp\">`</span> <span class=\"n\">μ</span> <span class=\"o\">:=</span> <span class=\"n\">lintegral</span> <span class=\"n\">μ</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"n\">r</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">∫⁻</span><span class=\"bp\">`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span><span class=\"o\">:</span><span class=\"mi\">67</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">lintegral</span> <span class=\"n\">volume</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">∫⁻</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"mi\">0</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">∫⁻</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"err\">∂</span> <span class=\"n\">volume</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">∫⁻</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"mi\">0</span> <span class=\"err\">∂</span> <span class=\"n\">μ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">∫⁻</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"err\">∂</span> <span class=\"n\">μ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">∫⁻</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">1</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">∫⁻</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"err\">∂</span> <span class=\"n\">μ</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">∫⁻</span> <span class=\"n\">x</span> <span class=\"k\">in</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"err\">∂</span> <span class=\"n\">volume</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"err\">∫⁻</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">,</span> <span class=\"mi\">1</span> <span class=\"err\">∂</span> <span class=\"n\">volume</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">measure_theory</span>\n</code></pre></div>",
        "id": 201154018,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592406196
    },
    {
        "content": "<p>It's not perfect, for example <code>∫⁻ x y, 0 ∂ μ</code> doesn't work.</p>",
        "id": 201154209,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1592406264
    },
    {
        "content": "<p>Thanks a lot! I think that we can live with <code>∫⁻ (x : α), (∫⁻ (y : β), 0) ∂ μ</code> for double integrals.</p>",
        "id": 201157344,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592407525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> ping about <a href=\"https://github.com/leanprover-community/mathlib/issues/3075\">#3075</a></p>",
        "id": 201175306,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592415504
    },
    {
        "content": "<p>The first draft of <code>measure_theory/integration</code> is in <a href=\"https://github.com/leanprover-community/mathlib/issues/3373\">#3373</a>. I decided to exclude <code>s</code> from the definition and use <code>notation</code> to enter <code>∫⁻ x, f x ∂(restrict s μ)</code> as <code>∫⁻ x in s, f x ∂ μ</code> (and not <code>∫⁻ x, indicator s f x ∂ μ</code>). The main reason is that theorems that do not care about <code>s</code> can be formulated without it and be useful for <code>∫⁻ x in s, f x ∂μ</code>.</p>\n<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Could you please have a look at <a href=\"https://github.com/leanprover-community/mathlib/blob/bc1dda1fdf15cac68d0df180edd8cc1c8b56e8c2/src/measure_theory/integration.lean\">integration.lean</a>? If you're happy with these changes, I'll adjust the rest of <code>measure_theory/</code> to the new API and rewrite <code>bochner_integration</code> using the same style. Note: for most lemmas/theorems I just changed the notation. In particular, I rarely tried to rewrite (or even carefully read) a proof.</p>\n<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> Could you please have a look at <code>notation</code>s <a href=\"https://github.com/leanprover-community/mathlib/blob/bc1dda1fdf15cac68d0df180edd8cc1c8b56e8c2/src/measure_theory/integration.lean#L744\">here</a>? While Lean accepts <code>∫⁻ x in s, f x ∂μ</code>, it prints <code>∫⁻ x, f x ∂(restrict s μ)</code> in the proof state.</p>",
        "id": 203622738,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1594518798
    }
]