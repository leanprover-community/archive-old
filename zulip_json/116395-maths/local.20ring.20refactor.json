[
    {
        "content": "<p>My understanding is that we're now coming round to the idea that there should be a predicate either called <code>local_ring</code> or <code>is_local_ring</code> on commutative rings, and that this predicate should also be a class. Currently in mathlib we have</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">local_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">nonzero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_local</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n</code></pre></div>\n\n\n<p>(a class but not a Prop) and</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_local_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">((</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>(a Prop but not a class). My understanding of the type class system is poor. Note that we also have <code>nonzero R</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">protect_proj</span><span class=\"o\">]</span> <span class=\"n\">class</span> <span class=\"n\">nonzero</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero_ne_one</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>which is a class and a Prop. I realise now that I am not sure about the relationship between <code>nonzero</code> and our dream class Prop <code>is_local_ring</code> predicate. Which of these do we want:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">is_local_ring1</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonzero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_local</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n\n<span class=\"n\">class</span> <span class=\"n\">is_local_ring2</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">nonzero</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_local</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n</code></pre></div>\n\n\n<p>Or do we want something else? And if I introduce this prop class, which, if either, of the current <code>local_ring</code> and <code>is_local_ring</code> should I remove? I'm hoping that this is not too big a refactor; <code>local_ring</code>(including <code>is_local_ring</code>) only gets 61 hits in mathlib.</p>",
        "id": 201959509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593086455
    },
    {
        "content": "<p>I think we want <code>is_local_ring2</code>.</p>",
        "id": 201959705,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593086606
    },
    {
        "content": "<p>And we want to remove both <code>local_ring</code> and the current <code>is_local_ring</code>.</p>",
        "id": 201960001,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593086818
    },
    {
        "content": "<p>Thanks! Any comments on the name of the new class predicate? :-)</p>",
        "id": 201960349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593087054
    },
    {
        "content": "<p><code>is_local_ring</code>, I would say.</p>",
        "id": 201960488,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593087152
    },
    {
        "content": "<p>And the name of the namespace for all the local ring lemmas?</p>",
        "id": 201960536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593087216
    },
    {
        "content": "<p>I'm also fine with dropping all the <code>is_</code> prefixes</p>",
        "id": 201960655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593087279
    },
    {
        "content": "<p>This is a decision which needs to be made. It's going to come up again and again. I'm doing <code>is_DVR</code> next, then <code>is_Dedekind_domain</code>, then...</p>",
        "id": 201960823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593087366
    },
    {
        "content": "<p>Yes, <code>local_ring</code> is fine. The only ambiguity (which is not present with the <code>is_</code>) is that you don't know if it takes <code>ring</code> as a parameter or if it extends it, but I agree it is uselessly (is this a word?) verbose. For topological spaces, we have dropped the <code>is_</code> on space predicates.</p>",
        "id": 201960872,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593087415
    },
    {
        "content": "<p>We have <code>complete_space</code> or <code>proper_space</code>, which take <code>toplogical_space</code> as a parameter. So, I vote for dropping the <code>is_</code>.</p>",
        "id": 201960933,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1593087459
    },
    {
        "content": "<p>Whether or not it's a word, it's clear what you mean. Another advantage of dropping the <code>is</code> is that we then can work in the local_ring namespace and not have to open is_local_ring or copy the definition of is_local_ring.is_local into a local_ring namespace</p>",
        "id": 201961056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593087531
    },
    {
        "content": "<p>The name of the class and the name of the namespace should be the same, I think</p>",
        "id": 201961086,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593087564
    },
    {
        "content": "<p>The below result should not be a def (any more). But I'm assuming there's no point making it an instance? The target is a typeclass but I can't imagine type class inference ever being able to find <code>h</code> and <code>hnze</code>. Am I thinking about this in the correct way?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">local_of_is_local_ring</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hnze</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">nonunits</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">nonunits</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 201973967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593094262
    },
    {
        "content": "<p>In this form it won't. But you could use the <code>fact</code> typeclass.</p>",
        "id": 201974273,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593094436
    },
    {
        "content": "<p><code>[nonzero \\a]</code></p>",
        "id": 201976139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593095280
    },
    {
        "content": "<p>I cannot see the point of this lemma at all and it is not used anywhere else.</p>",
        "id": 201976231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593095312
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <code>nonzero</code> is one of the classes that went through the \"make it a predicate refactor\" already</p>",
        "id": 201976250,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593095325
    },
    {
        "content": "<p>It can't be an instance, because of <code>h</code>, but <code>hnze</code> is fine.</p>",
        "id": 201976339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593095370
    },
    {
        "content": "<p>This just literally says \"if I can prove all the fields of this structure, I can make an instance of the structure\". When would one want to use this? The proof is <code>{nonzero := hnze, is_local := h}</code></p>",
        "id": 201976372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593095386
    },
    {
        "content": "<p>The proof might even be <code>mk</code></p>",
        "id": 201976454,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593095407
    },
    {
        "content": "<p>Well, in that case, you might as well remove it, I guess</p>",
        "id": 201976663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593095521
    },
    {
        "content": "<p>Sorry, I have conflated two definitions, adding to the confusion. The one I posted seems completely pointless. There is also</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">local_of_nonunits_ideal</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hnze</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">nonunits</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">nonunits</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>which is a cooler result and is the one we should be talking about. Here I could change hnze to <code>nonzero \\alpha</code> but leave it as a lemma.</p>",
        "id": 201976942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593095655
    },
    {
        "content": "<p>Whut is the diff?</p>",
        "id": 201977020,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593095701
    },
    {
        "content": "<p>I'm just checking it shouldn't be an instance</p>",
        "id": 201977664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593095976
    },
    {
        "content": "<p>It shouldn't</p>",
        "id": 201977685,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593095984
    }
]