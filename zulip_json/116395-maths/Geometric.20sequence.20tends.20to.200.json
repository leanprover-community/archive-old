[
    {
        "content": "<p>I'm looking for the following lemma:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">decreasing_and_nonneg</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">nonneg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">decreasing</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">k</span> <span class=\"bp\">/</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">m</span> <span class=\"bp\">≥</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">m</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>(This is in service of proving that <code>sqrt_aux</code>, an explicit definition of a Cauchy sequence defining <code>sqrt x</code>, converges.)</p>\n<p>I found <code>analysis.specific_limits.basic</code> and <code>tendsto_at_top_of_geom_le</code> which seems to be closest to what I want, but it talks about infinity rather than 0 :( and I'd prefer to stay in the rationals for this. Does anyone know where I can find it, or am I likely to have to prove it?</p>",
        "id": 280071088,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1650894293
    },
    {
        "content": "<p>I think that the major problem you are facing is that limits of these kind are treated using filters in <code>mathlib</code>.</p>",
        "id": 280073861,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650895442
    },
    {
        "content": "<p>See for instance <a href=\"https://leanprover-community.github.io/mathlib_docs/find/eventually_lt_of_tendsto_lt\">docs#eventually_lt_of_tendsto_lt</a></p>",
        "id": 280074760,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650895837
    },
    {
        "content": "<p>Ah, I see, thanks - I do need the epsilon formulation because I'm going to plug the result into an <code>is_cau_seq</code>, but I'll see if I can filterise my hypotheses</p>",
        "id": 280075568,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1650896214
    },
    {
        "content": "<p>One good way to epsilon-ise filter definitions is through eventually-holding properties, see for instance here <a href=\"https://leanprover-community.github.io/mathlib_docs/find/le_of_tendsto\">docs#le_of_tendsto</a>.</p>",
        "id": 280075932,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650896387
    },
    {
        "content": "<p>The <code>∀ᶠ</code> means \" for almost all\" or \" for all but finitely many\" according to context.</p>",
        "id": 280076054,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650896427
    },
    {
        "content": "<p>Or perhaps <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_at_top\">docs#tendsto_at_top</a> is really what you want!</p>",
        "id": 280086490,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1650900972
    }
]