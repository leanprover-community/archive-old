[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"438192\">@Yuma Mizuno</span> and/or <span class=\"user-mention\" data-user-id=\"487500\">@Oleksandr Manzyuk</span> may be interested in the <a href=\"https://github.com/leanprover-community/mathlib/tree/semorrison/Bimod\">branch#semorrison/Bimod</a> I just started with the aspiration of constructing the 2-category of (algebras)/(bimodules)/(intertwiners), (all internal to some monoidal category, e.g. R-mod). This is related e.g. to the <a href=\"https://ncatlab.org/nlab/show/Brauer+group\">Brauer group</a> of a commutative ring R. The new content is in <code>category_theory/monoidal/Bimod.lean</code>.</p>\n<p>My summary so far is that it still looks hard! I got as far as constructing the <em>data</em> for the tensor product of two bimodules, but have many scary looking proof obligations. There's constant interplay between the colimits API and the monoidal API in the proofs.</p>\n<p>I'm about to disappear for a week or two, but if anyone wants to play with it please go ahead. :-)</p>",
        "id": 278817335,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649849924
    },
    {
        "content": "<p>Johan always said he wanted Brauer groups but I don't think he was thinking of this! Perhaps for fields the story is far simpler.</p>",
        "id": 278833445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649858940
    },
    {
        "content": "<p>I would have imagined a cohomological description of the Brauer group would come first!</p>",
        "id": 278833598,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649859012
    },
    {
        "content": "<p>I was imagining that we proved that H^2(k,G_m)=Br(k) by an explicit computation with 2-cocycles (this is continuous group cohomology, which we're slowly working towards at Imperial)</p>",
        "id": 278833678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649859053
    },
    {
        "content": "<p>cocycles? oof. What's the status of Hilbert 90? How close are you to that? (I mean the general statement with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">GL_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>)</p>",
        "id": 278833839,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649859126
    },
    {
        "content": "<p>last I heard we were still struggling to get <em>any</em> definition of group cohomology into mathlib :-/</p>",
        "id": 278833880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649859158
    },
    {
        "content": "<p>Amelia is busy with something else right now but I hope to get back to working on this in the near future</p>",
        "id": 278833919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649859182
    },
    {
        "content": "<p>I realize you've not quite gotten to the point where this becomes pertinent yet but I would start from the other end--write <code>constant tensor_Bimod</code> and enough of the related structure in order to build the bicategory first, before trying to make an actual definition of <code>tensor_Bimod</code>.</p>",
        "id": 278836964,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649860534
    },
    {
        "content": "<p>Oh--I see you've made this more difficult with the weak assumptions on the original category</p>",
        "id": 278838356,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649861120
    },
    {
        "content": "<p>Yes, the weak assumptions are probably not helping. I've only ever had reason to care about the case of symmetric frobenius algebras in rigid categories, where you can define the tensor product of bimodules as the image of an idempotent rather than as a coequalizer, and that is probably easier (and equivalent to the more general definition I started on).</p>",
        "id": 278891538,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649884488
    },
    {
        "content": "<p>The main assumption I was thinking would help is that the category is closed monoidal</p>",
        "id": 278896351,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649887025
    },
    {
        "content": "<p>The main reason I didn't go there is that we currently on have closed-on-one-side, not biclosed monoidal categories, and in this context I wouldn't want to assume a braiding or symmetry. Thus I just assumed that tensor-on-left and tensor-on-right preserved colimits, which is the immediate consequence of biclosed that seems relevant. I'll think some more to how being biclosed could help.</p>",
        "id": 278912564,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1649899458
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I've started playing with your code (filled in two sorries so far), and I've noticed a small problem with the implementation of <code>pure_coherence</code>: it's not hygienic.  When used in a context that has shadowed the definition of <code>id</code>, <code>pure_coherence</code> will fail (as will, of course, <code>coherence</code>).  Fortunately, the error message (type mismatch for the type of <code>id</code>) was helpful to quickly pinpoint the issue, but it'd be nice to make the tactic more robust.</p>",
        "id": 279023380,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1649971605
    },
    {
        "content": "<p>I also had to replace the uses of monoidal composition <code>⊗≫</code> with plain composition with explicitly constructed isomorphisms inserted because we have no tools to reason about monoidal composition at the moment.</p>",
        "id": 279024003,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1649972002
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/13507\">#13507</a></p>",
        "id": 279355846,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1650333727
    },
    {
        "content": "<p>FWIW, I've finished the definition of <code>tensor_Bimod</code> (pushed to <a href=\"https://github.com/leanprover-community/mathlib/tree/semorrison/Bimod\">branch#semorrison/Bimod</a>).  I haven't had much time recently, so the progress has been slow, but I intend to continue.</p>",
        "id": 279611217,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1650493546
    },
    {
        "content": "<p>I wanted to start defining a bicategory structure on <code>Mon_ C</code> but it seems just importing <code>category_theory.bicategory.basic</code> causes pesky deterministic timeouts, and I'm not sure how to resolve them.  I already had to extract the fields of <code>tensor_Bimod</code> to top-level definitions and lemmas because of deterministic timeouts, and importing <code>category_theory.bicategory.basic</code> causes a deterministic timeout in one of the lemmas, <code>middle_assoc'</code>.</p>\n<p>The proofs seem to share a lot of structure, so perhaps there are some useful lemmas that could be extracted to simplify the proofs, but I haven't looked into this yet.</p>",
        "id": 279918349,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1650708054
    },
    {
        "content": "<p>This does sound unfortunate.</p>",
        "id": 279919976,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1650710533
    },
    {
        "content": "<p>An obvious workaround is to prove these lemmas, and only <code>import bicategory.basic</code> in a new file.</p>",
        "id": 279919984,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1650710554
    },
    {
        "content": "<p>Oh --  the obvious explanation for the deterministic timeouts is just all the non-terminal simps. Replacing these with <code>simp only</code> will make your lemmas much more robust to additional imports.</p>",
        "id": 279920010,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1650710639
    },
    {
        "content": "<p>Ah, good suggestion, thank you, I'll try that.</p>",
        "id": 279928701,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1650723613
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I'm hoping you're still interested in this.  I've finished the definition of the bicategory and can open a PR now.</p>",
        "id": 283976883,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1653548828
    },
    {
        "content": "<p>Awesome, yes, I'd love to have a look.</p>",
        "id": 283976894,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653548844
    },
    {
        "content": "<p>Remind me what branch it is on?</p>",
        "id": 283976904,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653548853
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/semorrison/Bimod\">https://github.com/leanprover-community/mathlib/tree/semorrison/Bimod</a></p>",
        "id": 283976962,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1653548896
    },
    {
        "content": "<p>Epic!</p>",
        "id": 283981312,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653553323
    },
    {
        "content": "<p><code>wisker</code> should be <code>whisker</code></p>",
        "id": 283981328,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653553339
    },
    {
        "content": "<p>I'll look more later. I'm impressed, I would not have had the fortitude for that. :-)</p>",
        "id": 283981352,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653553352
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/The.20bicategory.20of.20algebras.20and.20bimodules/near/283981328\">said</a>:</p>\n<blockquote>\n<p><code>wisker</code> should be <code>whisker</code></p>\n</blockquote>\n<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 283987647,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1653558213
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/The.20bicategory.20of.20algebras.20and.20bimodules/near/283981352\">said</a>:</p>\n<blockquote>\n<p>I'll look more later. I'm impressed, I would not have had the fortitude for that. :-)</p>\n</blockquote>\n<p>Thanks!  It wasn't too bad.  I think <code>map_π_epi</code> stating that the image of <code>coequalizer.π</code> under a colimit-preserving functor is an epi really helped to structure the proofs.  When we need to prove equality of two morphisms from a coequalizer, we can use <code>ext</code>, which precomposes both morphisms with <code>coequalizer.π</code>, and <code>map_π_epi</code> together with <code>cancel_epi</code> allows us to apply the same idea when the source of the morphisms is a coequalizer tensored with other objects.  Once we have compositions starting with <code>coequalizer.π</code>, proofs almost write themselves.  Initially I relied on <code>simp</code> a lot, but it was slow, so following your advice I replaced it with <code>simp only</code>, which taught me quite a bit of the relevant API, and at some point I felt more comfortable using the API and performing rewrites directly, which also helped with the perf.</p>",
        "id": 283988665,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1653559050
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14402\">#14402</a></p>",
        "id": 284067710,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1653602915
    },
    {
        "content": "<p>I'll be away from the <a href=\"https://bit.ly/3zVLgqR\">#queue</a> for a few days, but hopefully others can look at this too. You've got ahead of the old world, so we can't even compare this to the bicategory of vanilla algebras/bimodules/intertwiners when <code>C = Type</code>. :-)</p>",
        "id": 284070465,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653604637
    },
    {
        "content": "<p>Not at all for now, but later I'd love to see how this construction works out in special cases. When you restrict to (symmetric??) Frobenius algebras and the category is idempotent complete there are nicer formulas for the tensor product of bimodules (the image of the \"ladder\" idempotent), and I'm hopeful that we can prove an equivalence.</p>",
        "id": 284070665,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653604782
    },
    {
        "content": "<p>(In some settings, e.g. in a fusion category, restricting to Frobenius algebras is not much of a restriction.)</p>",
        "id": 284070757,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1653604818
    },
    {
        "content": "<p>It's so nice! I'm happy to see that the bicategory structure on the algebras and bimodules is defined in this generality.</p>",
        "id": 284403275,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1653941820
    },
    {
        "content": "<p>I would like to make a comment that are not intended to interfere with the current PR.</p>\n<p>The proofs in the PR <a href=\"https://github.com/leanprover-community/mathlib/pull/14402\">#14402</a> contain several rewriting of the form <code>(𝟙 _ ⊗ f) ≫ (g ⊗ 𝟙 _) = (g ⊗ 𝟙 _) ≫ (𝟙 _ ⊗ f)</code>. In fact, these are equal to <code>tensor_hom</code>, <code>g ⊗ f</code>.</p>\n<p>In my experience, <code>tensor_hom</code> seems to be incompatible with simp. I think this can be improved by introducing <code>whisker_right</code> and <code>whisker_left</code> as the primitive objects in the definition of the monoidal category rather than <code>tensor_hom</code>, as I did in the definition of bicategory, which uses <code>whisker_right</code> and <code>whisker_left</code> instead of the horizontal compositions. I would like to do this kind of a refactoring if I can find the time.</p>",
        "id": 284405981,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1653944293
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"438192\">@Yuma Mizuno</span>  This is a gentle reminder that I would appreciate your review of <a href=\"https://github.com/leanprover-community/mathlib/pull/14402\">#14402</a>.</p>",
        "id": 286454238,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1655450246
    },
    {
        "content": "<p>Hi everyone (particularly <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  and <span class=\"user-mention\" data-user-id=\"438192\">@Yuma Mizuno</span> ), <a href=\"https://github.com/leanprover-community/mathlib/pull/14402\">#14402</a> was last reviewed over 2 weeks ago, and since then I've made quite a few changes and would appreciate another pass over the PR.</p>",
        "id": 287347506,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1656085234
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"487500\">@Oleksandr Manzyuk</span> Sorry for delay. I left some comments.</p>",
        "id": 287417567,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1656138642
    },
    {
        "content": "<p>By the way, you can add the awaiting-review label, then maintainers can find your PR.</p>",
        "id": 287417603,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1656138668
    },
    {
        "content": "<p>I think I've addressed all comments from <span class=\"user-mention\" data-user-id=\"438192\">@Yuma Mizuno</span> on <a href=\"https://github.com/leanprover-community/mathlib/pull/14402\">#14402</a>.  Are there any other change you'd like me to make?</p>",
        "id": 290635001,
        "sender_full_name": "Oleksandr Manzyuk",
        "timestamp": 1658612551
    },
    {
        "content": "<p>Now <a href=\"https://github.com/leanprover-community/mathlib/pull/14402\">#14402</a> looks good to me.</p>",
        "id": 290649514,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1658634033
    },
    {
        "content": "<p>I put approved on github just to make sure.</p>",
        "id": 290649708,
        "sender_full_name": "Yuma Mizuno",
        "timestamp": 1658634287
    }
]