[
    {
        "content": "<p>I have a Euclidean geometry challenge:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.projection</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">real_inner_product_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- ignore the next line which is fixing a pretty-printer bug</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">line_printing_only</span><span class=\"o\">)</span> <span class=\"bp\">`Δ`</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">submodule.span</span> <span class=\"n\">ℝ</span> <span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`Δ`</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">submodule.span</span> <span class=\"n\">ℝ</span> <span class=\"o\">({</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ignore the next line which is fixing a pretty-printer bug</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">module_span_printing_only</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">.`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">ᗮ`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℝ</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span><span class=\"bp\">ᗮ</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">.`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">ᗮ`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℝ</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span><span class=\"bp\">ᗮ</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">pr</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">ᗮ`</span> <span class=\"o\">:=</span> <span class=\"n\">orthogonal_projection</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℝ</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span><span class=\"bp\">ᗮ</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᗮ</span> <span class=\"bp\">⊓</span> <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">v</span><span class=\"o\">}</span><span class=\"bp\">ᗮ</span>  <span class=\"bp\">⊔</span> <span class=\"bp\">Δ</span> <span class=\"o\">(</span><span class=\"n\">pr</span><span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">]</span><span class=\"bp\">ᗮ</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">v</span><span class=\"o\">}</span><span class=\"bp\">ᗮ</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Note that you can assume <code>E</code> is finite dimensional if this help.</p>",
        "id": 297864123,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662670724
    },
    {
        "content": "<p>I think this is true unconditionally but the relevant case is when <code>u</code> and <code>v</code> are non zero and not parallel.</p>",
        "id": 297864271,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662670797
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.projection</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">real_inner_product_space</span>\n<span class=\"kn\">open</span> <span class=\"n\">submodule</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- ignore the next line which is fixing a pretty-printer bug</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">line_printing_only</span><span class=\"o\">)</span> <span class=\"bp\">`Δ`</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">submodule.span</span> <span class=\"n\">ℝ</span> <span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`Δ`</span> <span class=\"n\">v</span><span class=\"o\">:</span><span class=\"mi\">55</span> <span class=\"o\">:=</span> <span class=\"n\">submodule.span</span> <span class=\"n\">ℝ</span> <span class=\"o\">({</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n<span class=\"c1\">-- ignore the next line which is fixing a pretty-printer bug</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"o\">(</span><span class=\"n\">name</span> <span class=\"o\">:=</span> <span class=\"n\">module_span_printing_only</span><span class=\"o\">)</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">.`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">ᗮ`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℝ</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span><span class=\"bp\">ᗮ</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"o\">{</span><span class=\"bp\">.`</span> <span class=\"n\">x</span> <span class=\"bp\">`</span><span class=\"o\">}</span><span class=\"bp\">ᗮ`</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℝ</span> <span class=\"o\">({</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span><span class=\"bp\">ᗮ</span>\n<span class=\"kn\">local</span> <span class=\"kd\">notation</span> <span class=\"bp\">`</span><span class=\"n\">pr</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"n\">x</span><span class=\"bp\">`</span><span class=\"o\">]</span><span class=\"bp\">ᗮ`</span> <span class=\"o\">:=</span> <span class=\"n\">orthogonal_projection</span> <span class=\"o\">(</span><span class=\"n\">submodule.span</span> <span class=\"n\">ℝ</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">})</span><span class=\"bp\">ᗮ</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foobar</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">orthogonal_projection</span> <span class=\"n\">U</span><span class=\"bp\">ᗮ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">orthogonal_projection</span> <span class=\"n\">U</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_sub_iff_add_eq</span><span class=\"o\">,</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">eq_sum_orthogonal_projection_self_orthogonal_complement</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᗮ</span> <span class=\"bp\">⊓</span> <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">v</span><span class=\"o\">}</span><span class=\"bp\">ᗮ</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">pr</span><span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">]</span><span class=\"bp\">ᗮ</span> <span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᗮ</span> <span class=\"bp\">⊓</span> <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">v</span><span class=\"o\">}</span><span class=\"bp\">ᗮ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hx.2</span><span class=\"o\">⟩)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">hx.2</span><span class=\"o\">⟩)</span><span class=\"bp\">;</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mem_orthogonal_singleton_of_inner_left</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foobar</span><span class=\"o\">,</span> <span class=\"n\">inner_sub_right</span><span class=\"o\">,</span> <span class=\"n\">inner_left_of_mem_orthogonal_singleton</span> <span class=\"n\">_</span> <span class=\"n\">hx.1</span><span class=\"o\">,</span>\n        <span class=\"n\">inner_left_of_mem_orthogonal</span> <span class=\"o\">(</span><span class=\"n\">coe_mem</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hx.2</span><span class=\"o\">,</span> <span class=\"n\">sub_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_sum_orthogonal_projection_self_orthogonal_complement</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n        <span class=\"n\">inner_add_right</span><span class=\"o\">,</span> <span class=\"n\">inner_left_of_mem_orthogonal_singleton</span> <span class=\"n\">_</span> <span class=\"n\">hx.1</span><span class=\"o\">,</span>\n        <span class=\"n\">inner_left_of_mem_orthogonal</span> <span class=\"o\">(</span><span class=\"n\">coe_mem</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">hx.2</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᗮ</span> <span class=\"bp\">⊓</span> <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">v</span><span class=\"o\">}</span><span class=\"bp\">ᗮ</span>  <span class=\"bp\">⊔</span> <span class=\"bp\">Δ</span> <span class=\"o\">(</span><span class=\"n\">pr</span><span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">]</span><span class=\"bp\">ᗮ</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">v</span><span class=\"o\">}</span><span class=\"bp\">ᗮ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">bar</span><span class=\"o\">,</span> <span class=\"n\">sup_comm</span><span class=\"o\">,</span> <span class=\"n\">sup_orthogonal_inf_of_complete_space</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"n\">span_singleton_le_iff_mem</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">coe_mem</span> <span class=\"n\">_</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 297870238,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662673702
    },
    {
        "content": "<p>I'm very happy to have found <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sup_orthogonal_inf_of_complete_space\">docs#sup_orthogonal_inf_of_complete_space</a> by pure luck here, I would never have thought to look for it</p>",
        "id": 297870381,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662673786
    },
    {
        "content": "<p>The proof of <code>bar</code> is almost surely suboptimal, but I have to sleep now</p>",
        "id": 297870562,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662673874
    },
    {
        "content": "<p>Fantastic, thank you very much!</p>",
        "id": 297915027,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1662706542
    },
    {
        "content": "<p>This is not particularly shorter, but morally this should be the proof of <code>bar</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">bar</span> <span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᗮ</span> <span class=\"bp\">⊓</span> <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">v</span><span class=\"o\">}</span><span class=\"bp\">ᗮ</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">pr</span><span class=\"o\">[</span><span class=\"n\">v</span><span class=\"o\">]</span><span class=\"bp\">ᗮ</span> <span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">ᗮ</span> <span class=\"bp\">⊓</span> <span class=\"o\">{</span><span class=\"bp\">.</span><span class=\"n\">v</span><span class=\"o\">}</span><span class=\"bp\">ᗮ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inf_orthogonal</span><span class=\"o\">,</span> <span class=\"n\">inf_orthogonal</span><span class=\"o\">],</span>\n  <span class=\"n\">refine</span> <span class=\"n\">congr_arg</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">sup_le</span> <span class=\"n\">_</span> <span class=\"n\">le_sup_right</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sup_le</span> <span class=\"n\">_</span> <span class=\"n\">le_sup_right</span><span class=\"o\">))</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">span_singleton_le_iff_mem</span><span class=\"o\">],</span>\n  <span class=\"o\">{</span> <span class=\"n\">nth_rewrite</span> <span class=\"mi\">0</span> <span class=\"n\">eq_sum_orthogonal_projection_self_orthogonal_complement</span> <span class=\"o\">(</span><span class=\"bp\">Δ</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">add_mem</span> <span class=\"o\">(</span><span class=\"n\">mem_sup_right</span> <span class=\"bp\">$</span> <span class=\"n\">coe_mem</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mem_sup_left</span> <span class=\"bp\">$</span> <span class=\"n\">mem_span_singleton_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">foobar</span><span class=\"o\">],</span>\n    <span class=\"n\">refine</span> <span class=\"n\">sub_mem</span> <span class=\"o\">(</span><span class=\"n\">mem_sup_left</span> <span class=\"bp\">$</span> <span class=\"n\">mem_span_singleton_self</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mem_sup_right</span> <span class=\"bp\">$</span> <span class=\"n\">coe_mem</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 297931032,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1662714237
    },
    {
        "content": "<p>If someone is interested in another challenge, mixed with some calculus:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.projection</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.cont_diff</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">inner_product_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cont_diff_subtypeL_comp_orthogonal_projection_span</span> <span class=\"o\">{</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx₀</span> <span class=\"o\">:</span> <span class=\"n\">x₀</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cont_diff_at</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"n\">submodule.subtypeL</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">∙</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∘</span><span class=\"n\">L</span> <span class=\"n\">orthogonal_projection</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">∙</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"n\">x₀</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>Again, finite dimensionality assumptions are fine.</p>",
        "id": 297971770,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662729844
    },
    {
        "content": "<p>Oh, I see that <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> already proved this in the sphere eversion project. Thanks!</p>",
        "id": 298008052,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1662740091
    }
]