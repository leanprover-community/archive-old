[
    {
        "content": "<p>In the sphere eversion project we reached the point where we'll need to actually use partitions of unity. But either I'm not looking at the right place or the API isn't here. <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> do you know how to finish the proof below? Or do you have useful pointers or advice?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.partition_of_unity</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span> <span class=\"n\">manifold</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">partition_induction_on</span>\n  <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">convex</span> <span class=\"n\">ℝ</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">})</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hP'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">choose</span> <span class=\"n\">U</span> <span class=\"n\">hU</span> <span class=\"n\">hU'</span> <span class=\"n\">using</span> <span class=\"n\">hP'</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">φ</span> <span class=\"n\">hφ</span> <span class=\"n\">using</span> <span class=\"n\">hU'</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">smooth_bump_covering.exists_is_subordinate</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">is_closed_univ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hU</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"o\">⟨</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ρ</span> <span class=\"o\">:=</span> <span class=\"n\">b.to_smooth_partition_of_unity</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">sum_ρ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ρ.sum_eq_one</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">nonneg_ρ</span> <span class=\"o\">:=</span> <span class=\"n\">ρ.nonneg</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">lf</span> <span class=\"o\">:</span> <span class=\"n\">locally_finite</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">support</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ρ</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">b.c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">ρ.locally_finite.subset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∑ᶠ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">b.c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">cont_diff_iff_cont_diff_at.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">lf</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V_in</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                      <span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">support</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ρ</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">b.c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">⟩},</span>\n  <span class=\"o\">{</span> <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hφ</span> <span class=\"bp\">$</span> <span class=\"n\">b.c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">-- Extra credit for a version in an open set:</span>\n\n<span class=\"cm\">lemma partition_induction_on {s : set E} (hs : is_open s)</span>\n<span class=\"cm\">  {P : E → F → Prop} (hP : ∀ x ∈ s, convex ℝ {y | P x y})</span>\n<span class=\"cm\">  {n : with_top ℕ}</span>\n<span class=\"cm\">  (hP' : ∀ x ∈ s, ∃ U ∈ 𝓝 x, ∃ f : E → F, cont_diff_on ℝ n f U ∧ ∀ x ∈ U, P x (f x)) :</span>\n<span class=\"cm\">  ∃ f : E → F, cont_diff_on ℝ n f s ∧ ∀ x ∈ s, P x (f x) :=</span>\n<span class=\"cm\">-/</span>\n\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x'</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"bp\">∧</span> <span class=\"n\">ε</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f'</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"bp\">⊤</span> <span class=\"n\">f'</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">f'</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">f'</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">t</span> <span class=\"bp\">∧</span> <span class=\"n\">t</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">convex</span> <span class=\"n\">ℝ</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">},</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">convex_Ioc</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">partition_induction_on</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U_in</span><span class=\"o\">,</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U_in</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">cont_diff_on_const</span><span class=\"o\">,</span> <span class=\"n\">hU</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276806347,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648413138
    },
    {
        "content": "<p>I should also ping <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> and <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span></p>",
        "id": 276806369,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648413186
    },
    {
        "content": "<p>Note that the proof start may be wrong, I'm guessing part of the API there.</p>",
        "id": 276806387,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648413236
    },
    {
        "content": "<p>In about 9h I'll be home alone, then I'll try to prove it</p>",
        "id": 276826514,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1648442120
    },
    {
        "content": "<p>I should add that I was using partitions of unity last week and I was delighted with what we have and I'm very grateful to Yury, Sébastien and others for what we have.</p>",
        "id": 276843958,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1648457647
    },
    {
        "content": "<p>However I agree with Patrick: there is still some API to be added. I have some pieces locally (abstracted from very messy proofs that I bashed into the Sphere Eversion project) which I'll try to PR soon.</p>",
        "id": 276844048,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1648457716
    },
    {
        "content": "<p>For the sake of definiteness, here is a result I found useful. I've tidied up the statement but still have to fix its ridiculous proof:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.partition_of_unity</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">partition_of_unity</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">function</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">ho</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">partition_of_unity</span> <span class=\"n\">ι</span> <span class=\"n\">X</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p.is_subordinate</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"kn\">include</span> <span class=\"n\">ho</span> <span class=\"n\">hp</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">exists_finset_nhd</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">is</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn₁</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn₂</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">⊆</span> <span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"n\">support</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">is</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- Ridiculous proof</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">hn'</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">p.locally_finite</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">is</span> <span class=\"o\">:=</span> <span class=\"n\">hn'.to_finset.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"k\">let</span> <span class=\"n\">js</span> <span class=\"o\">:=</span> <span class=\"n\">hn'.to_finset.filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">U</span> <span class=\"n\">j</span><span class=\"o\">),</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">n</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">js</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">tsupport</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">j</span><span class=\"o\">))</span><span class=\"bp\">ᶜ</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"n\">i</span> <span class=\"bp\">∈</span> <span class=\"n\">is</span><span class=\"o\">,</span> <span class=\"n\">U</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"n\">filter.inter_mem</span> <span class=\"o\">(</span><span class=\"n\">filter.inter_mem</span> <span class=\"n\">hn</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inter_subset_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">filter.bInter_finset_mem</span> <span class=\"n\">js</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">j</span> <span class=\"n\">hj</span><span class=\"o\">,</span> <span class=\"n\">is_closed.compl_mem_nhds</span>\n      <span class=\"o\">(</span><span class=\"n\">is_closed_tsupport</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_filter</span><span class=\"o\">,</span> <span class=\"n\">finite.mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">set.not_mem_subset</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">hj.2</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">filter.bInter_finset_mem</span> <span class=\"n\">is</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_filter</span><span class=\"o\">,</span> <span class=\"n\">finite.mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ho</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mem_nhds</span> <span class=\"n\">hi.2</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">hz'</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">∈</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">inter_assoc</span> <span class=\"n\">at</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">mem_of_mem_inter_left</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">support</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">hn'.to_finset</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finite.coe_to_finset</span><span class=\"o\">,</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">],</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">mem_inter</span> <span class=\"n\">hi</span> <span class=\"n\">hz'</span><span class=\"o\">⟩,</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">hz₂</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">hn'.to_finset</span><span class=\"o\">,</span> <span class=\"n\">j</span> <span class=\"bp\">∈</span> <span class=\"n\">js</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">∉</span> <span class=\"n\">support</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">j</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hz</span> <span class=\"o\">:=</span> <span class=\"n\">mem_of_mem_inter_right</span> <span class=\"o\">(</span><span class=\"n\">mem_of_mem_inter_left</span> <span class=\"n\">hz</span><span class=\"o\">),</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_filter</span><span class=\"o\">,</span> <span class=\"n\">finite.mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">,</span> <span class=\"n\">mem_Inter</span><span class=\"o\">,</span> <span class=\"n\">mem_compl_eq</span><span class=\"o\">,</span>\n        <span class=\"n\">and_imp</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_filter</span><span class=\"o\">,</span> <span class=\"n\">finite.mem_to_finset</span><span class=\"o\">,</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hj</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">set.not_mem_subset</span> <span class=\"o\">(</span><span class=\"n\">subset_tsupport</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">j</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">hz</span> <span class=\"n\">j</span> <span class=\"n\">hj.1</span> <span class=\"n\">hj.2</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">∉</span> <span class=\"n\">js</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.mem_filter</span><span class=\"o\">,</span> <span class=\"n\">not_and</span><span class=\"o\">,</span> <span class=\"n\">not_not_mem</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">finset.coe_filter</span><span class=\"o\">,</span> <span class=\"n\">finite.coe_to_finset</span><span class=\"o\">,</span> <span class=\"n\">sep_set_of</span><span class=\"o\">,</span> <span class=\"n\">mem_set_of_eq</span><span class=\"o\">],</span>\n      <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">hi</span><span class=\"o\">)⟩,</span>\n      <span class=\"n\">specialize</span> <span class=\"n\">h₁</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n      <span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">contra</span><span class=\"o\">,</span> <span class=\"n\">hz₂</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">hi</span><span class=\"o\">)</span> <span class=\"n\">contra</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">partition_of_unity</span>\n</code></pre></div>",
        "id": 276848195,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1648460216
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  I'm currently proving my lemma so you don't need to worry about it.</p>",
        "id": 276873958,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648474621
    },
    {
        "content": "<p>Note that you can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smooth_partition_of_unity.exists_is_subordinate\">docs#smooth_partition_of_unity.exists_is_subordinate</a> instead of going through a <code>smooth_bump_covering</code>.</p>",
        "id": 276875528,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1648475319
    },
    {
        "content": "<p>Anyway, if you're on it, then I'll wait.</p>",
        "id": 276875953,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1648475514
    },
    {
        "content": "<p>I was on it but the administrative issues interfered so I'll have to come back to it</p>",
        "id": 276878408,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648476587
    },
    {
        "content": "<p>In the end there was too much admin and now I need to go and take care of kids. I'll return to this tonight if you don't do it in the mean time. I started a proof, but I wasn't careful enough it needs more information (see the comment at the end).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.partition_of_unity</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span> <span class=\"n\">manifold</span> <span class=\"n\">big_operators</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">finsum.exists_finset</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">locally_finite</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">support</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x₀</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∑ᶠ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=ᶠ</span><span class=\"o\">[</span><span class=\"bp\">𝓝</span> <span class=\"n\">x₀</span><span class=\"o\">]</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hf</span> <span class=\"n\">x₀</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V_in</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x₀</span><span class=\"o\">,</span>\n                      <span class=\"n\">hV</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">support</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">∩</span> <span class=\"n\">V</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">use</span> <span class=\"n\">hV.to_finset</span><span class=\"o\">,</span>\n  <span class=\"n\">filter_upwards</span> <span class=\"o\">[</span><span class=\"n\">V_in</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">x_in</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finsum_eq_sum_of_support_subset</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finite.coe_to_finset</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">hi</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">x_in</span><span class=\"o\">⟩</span>\n<span class=\"kd\">end</span>\n\n\n<span class=\"kd\">lemma</span> <span class=\"n\">has_fderiv_at_of_not_mem</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">tsupport</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_fderiv_at</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">has_fderiv_at_const</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span>  <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">congr_of_eventually_eq</span>\n  <span class=\"o\">(</span><span class=\"n\">not_mem_closure_support_iff_eventually_eq.mp</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cont_diff_at_of_not_mem</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∉</span> <span class=\"n\">tsupport</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff_at</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cont_diff_at_const</span> <span class=\"o\">:</span> <span class=\"n\">cont_diff_at</span> <span class=\"bp\">𝕜</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">congr_of_eventually_eq</span>\n   <span class=\"o\">(</span><span class=\"n\">not_mem_closure_support_iff_eventually_eq.mp</span> <span class=\"n\">hx</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- TODO: put reasonnable assumptions and prove it</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">tsupport_smul</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tsupport</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">tsupport</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">partition_induction_on</span>\n  <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">convex</span> <span class=\"n\">ℝ</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">})</span>\n  <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hP'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">cont_diff</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">replace</span> <span class=\"n\">hP'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">U</span> <span class=\"bp\">∈</span> <span class=\"bp\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"bp\">∃</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">U</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"o\">((</span><span class=\"n\">nhds_basis_opens</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">exists_iff</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"o\">(</span><span class=\"n\">hP'</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">x_in</span><span class=\"o\">,</span> <span class=\"n\">U_op</span><span class=\"o\">⟩,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hfP</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">U_op.mem_nhds</span> <span class=\"n\">x_in</span><span class=\"o\">,</span> <span class=\"n\">U_op</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hfP</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">hst</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">hf'</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf.mono</span> <span class=\"n\">hst</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hf'</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">hst</span> <span class=\"n\">hx</span><span class=\"o\">)⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">choose</span> <span class=\"n\">U</span> <span class=\"n\">hU</span> <span class=\"n\">U_op</span> <span class=\"n\">hU'</span> <span class=\"n\">using</span> <span class=\"n\">hP'</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">φ</span> <span class=\"n\">hφ</span> <span class=\"n\">using</span> <span class=\"n\">hU'</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">smooth_bump_covering.exists_is_subordinate</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"n\">is_closed_univ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hU</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">with</span>\n    <span class=\"o\">⟨</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"o\">⟩,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ρ</span> <span class=\"o\">:=</span> <span class=\"n\">b.to_smooth_partition_of_unity</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">sum_ρ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ρ.sum_eq_one</span> <span class=\"o\">(</span><span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">nonneg_ρ</span> <span class=\"o\">:=</span> <span class=\"n\">ρ.nonneg</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">tsupp_rho</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">tsupport</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">b.c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">hb.to_smooth_partition_of_unity</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">lf</span> <span class=\"o\">:</span> <span class=\"n\">locally_finite</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">support</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ρ</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"bp\">•</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">b.c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">ρ.locally_finite.subset</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"n\">hx</span> <span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">hx</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx'</span><span class=\"o\">,</span> <span class=\"n\">zero_smul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∑ᶠ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">b.c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">cont_diff_iff_cont_diff_at.mpr</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"n\">rcases</span> <span class=\"n\">finsum.exists_finset</span> <span class=\"n\">lf</span> <span class=\"n\">x₀</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">hs</span><span class=\"o\">⟩</span>  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">cont_diff_at.congr_of_eventually_eq</span> <span class=\"n\">_</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">cont_diff_at.sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">hx₀</span> <span class=\"o\">:</span> <span class=\"n\">x₀</span> <span class=\"bp\">∈</span> <span class=\"n\">U</span> <span class=\"o\">(</span><span class=\"n\">b.c</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">cont_diff_at.smul</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">ρ</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">smooth.cont_diff.cont_diff_at</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">of_le</span> <span class=\"n\">le_top</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"o\">((</span><span class=\"n\">hφ</span> <span class=\"bp\">$</span> <span class=\"n\">b.c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x₀</span> <span class=\"n\">hx₀</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cont_diff_at</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">U_op</span> <span class=\"bp\">$</span> <span class=\"n\">b.c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mem_nhds</span> <span class=\"n\">hx₀</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">cont_diff_at_of_not_mem</span><span class=\"o\">,</span>\n      <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n      <span class=\"n\">intros</span> <span class=\"n\">Hx₀</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">x₀</span> <span class=\"bp\">∉</span> <span class=\"n\">tsupport</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hx₀</span> <span class=\"o\">(</span><span class=\"n\">tsupp_rho</span> <span class=\"n\">i</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n      <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">tsupport_smul</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">b.c</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">Hx₀</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hφ</span> <span class=\"bp\">$</span> <span class=\"n\">b.c</span> <span class=\"n\">i</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"k\">show</span> <span class=\"bp\">∑ᶠ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">ρ</span> <span class=\"n\">i</span> <span class=\"n\">x₀</span> <span class=\"bp\">•</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">b.c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x₀</span> <span class=\"bp\">=</span> <span class=\"bp\">∑</span> <span class=\"n\">i</span> <span class=\"k\">in</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">ρ</span> <span class=\"n\">i</span> <span class=\"n\">x₀</span> <span class=\"bp\">•</span> <span class=\"n\">φ</span> <span class=\"o\">(</span><span class=\"n\">b.c</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">x₀</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">hs.eq_of_nhds</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- We don't know enough. We need to know that x₀ ∈ U (b.c i) for each i in s.</span>\n    <span class=\"gr\">sorry</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 276888088,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648480320
    },
    {
        "content": "<p>And I still wish I could do that on an open set, but mathlib doesn't seem to know that an open set in a real vector space is a manifold (at least type class search doesn't know).</p>",
        "id": 276888238,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648480369
    },
    {
        "content": "<p>Distantly-related PR <a href=\"https://github.com/leanprover-community/mathlib/pull/13006\">#13006</a></p>",
        "id": 276892974,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1648482485
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Using.20partitions.20of.20unity/near/276888238\">said</a>:</p>\n<blockquote>\n<p>And I still wish I could do that on an open set, but mathlib doesn't seem to know that an open set in a real vector space is a manifold (at least type class search doesn't know).</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.opens.smooth_manifold_with_corners\">docs#topological_space.opens.smooth_manifold_with_corners</a> (I can't remember why I didn't make it an instance)</p>",
        "id": 276893096,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648482554
    },
    {
        "content": "<p>Update: I proved the lemma in the absolute case. I'll clean up and prove the open set case tomorrow.</p>",
        "id": 276937339,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648505462
    },
    {
        "content": "<p>My version of the \"finset\" lemma is in <a href=\"https://github.com/leanprover-community/mathlib/pull/13013\">#13013</a></p>",
        "id": 276958139,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1648529817
    },
    {
        "content": "<p>I use <code>mul_support</code>/<code>support</code> instead of <code>tsupport</code> because that's what I used in various lemmas about partition of unity that were written before <code>tsupport</code> was added to <code>mathlib</code>. We should have a lemma that relates <code>locally_finite</code> for these two families of sets.</p>",
        "id": 276959547,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1648531389
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_finite.closure\">docs#locally_finite.closure</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_finite.mono\">docs#locally_finite.mono</a> prove that they're equivalent. We should agree on the canonical form. Probably, <code>tsupport</code> is better because it is what people usually use in analysis.</p>",
        "id": 276959621,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1648531480
    },
    {
        "content": "<p>I'm going to bed now. Probably, I won't have time for Lean till next evening (Toronto time).</p>",
        "id": 276959657,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1648531545
    },
    {
        "content": "<p>The lemmas involving <code>support</code> are useful in algebra. The usefulness of the <code>tsupport</code> versions comes from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/not_mem_closure_support_iff_eventually_eq\">docs#not_mem_closure_support_iff_eventually_eq</a></p>",
        "id": 276967835,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648539342
    },
    {
        "content": "<p>I cleaned up a bit my code and created more sorry about <code>cont_mdiff</code>. Now I need to stop and do real work (grading stuff and administration). I'd be grateful if someone among <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> , <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> or <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> could do a quick review of <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/master/src/to_mathlib/partition.lean\">https://github.com/leanprover-community/sphere-eversion/blob/master/src/to_mathlib/partition.lean</a>. Note this file is completely independent from the sphere eversion project,  so you can simply drop it into a recent mathlib.</p>",
        "id": 277004282,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648560508
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> and <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> may want to have a look as well</p>",
        "id": 277004323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648560534
    },
    {
        "content": "<p>In particular I'd be grateful to learn that <code>cont_mdiff_within_at.smul</code> and <code>cont_mdiff_within_at.add</code> are actually already there somewhere.</p>",
        "id": 277004554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648560652
    },
    {
        "content": "<p>Of course I hope I'll be able to get a version where the source is a manifold, and then apply it to open sets in vector spaces, using Heather's non-instance.</p>",
        "id": 277004824,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648560784
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Using.20partitions.20of.20unity/near/276893096\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Using.20partitions.20of.20unity/near/276888238\">said</a>:</p>\n<blockquote>\n<p>And I still wish I could do that on an open set, but mathlib doesn't seem to know that an open set in a real vector space is a manifold (at least type class search doesn't know).</p>\n</blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.opens.smooth_manifold_with_corners\">docs#topological_space.opens.smooth_manifold_with_corners</a> (I can't remember why I didn't make it an instance)</p>\n</blockquote>\n<p>Acutally this seems to be instance. Since you know about this, could you try to prove a version of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cont_mdiff_iff_cont_diff\">docs#cont_mdiff_iff_cont_diff</a> relating <code>cont_diff_on</code> for an open set of a vector space with <code>cont_mdiff</code> for the manifold structure on the corresponding subtype?</p>",
        "id": 277424676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648822619
    },
    {
        "content": "<p>Sure, I'll try this afternoon.</p>",
        "id": 277427213,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648823709
    },
    {
        "content": "<p>Great! I think I'll need:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.partition_of_unity</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kd\">universes</span> <span class=\"n\">uM</span> <span class=\"n\">uH</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span> <span class=\"n\">manifold</span>\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">topological_space</span> <span class=\"n\">function</span> <span class=\"n\">set</span>\n\n<span class=\"kd\">variables</span>\n  <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cont_mdiff_iff_cont_diff_on</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">E</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">cont_mdiff</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cont_mdiff_iff_cont_diff_on'</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">cont_mdiff</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cont_mdiff_on_iff_cont_diff_on'</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">cont_mdiff_on</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">𝓘</span><span class=\"o\">(</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">cont_diff_on</span> <span class=\"n\">ℝ</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 277440582,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648829095
    },
    {
        "content": "<p>I hope these are true. I'm sure you can feel my subtype pain from these statements. This all comes from trying to deduce from the manifold library results that are purely about open sets in vector spaces (we only have smooth partitions of unity in the manifold context).</p>",
        "id": 277440808,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648829175
    },
    {
        "content": "<p>You can see this at <a href=\"https://github.com/leanprover-community/sphere-eversion/blob/2a042511a8f70f3917c914685418db6231e57110/src/to_mathlib/partition.lean#L356-L360\">https://github.com/leanprover-community/sphere-eversion/blob/2a042511a8f70f3917c914685418db6231e57110/src/to_mathlib/partition.lean#L356-L360</a></p>",
        "id": 277441850,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648829589
    },
    {
        "content": "<p>And I should also ping <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span></p>",
        "id": 277441864,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648829598
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> I got as far as this translation:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.local_invariant_properties</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"n\">structure_groupoid.local_invariant_prop</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">H'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">M'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">H'</span> <span class=\"n\">M'</span><span class=\"o\">]</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">structure_groupoid</span> <span class=\"n\">H</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">G'</span> <span class=\"o\">:</span> <span class=\"n\">structure_groupoid</span> <span class=\"n\">H'</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">H'</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"n\">H</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">G.local_invariant_prop</span> <span class=\"n\">G'</span> <span class=\"n\">P</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">hG</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cont_mdiff_iff_cont_mdiff_on</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">M</span><span class=\"o\">}</span>  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M'</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">lift_prop</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">↔</span> <span class=\"n\">lift_prop_on</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cont_mdiff_iff_cont_diff_on'</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">M'</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">M'</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">lift_prop</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"n\">lift_prop_on</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"k\">then</span> <span class=\"n\">f</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"k\">else</span> <span class=\"n\">default</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">cont_mdiff_on_iff_cont_diff_on'</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">M'</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">lift_prop_on</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">∘</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">lift_prop_on</span> <span class=\"n\">P</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 277505721,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1648873839
    },
    {
        "content": "<p>I don't understand what this means. Does it mean that if you can prove those lemmas then mine follow?</p>",
        "id": 277522686,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1648897360
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/Using.20partitions.20of.20unity/near/277522686\">said</a>:</p>\n<blockquote>\n<p>I don't understand what this means. Does it mean that if you can prove those lemmas then mine follow?</p>\n</blockquote>\n<p>Sorry for the slow reply.  Yes, I claim that this is a suitable general context, and your lemmas should be 1-line specializations.</p>",
        "id": 277967428,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1649210915
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> I can confirm your lemmas imply mines.</p>",
        "id": 278217042,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649360941
    },
    {
        "content": "<p>Did you make any progress on proving your lemmas?</p>",
        "id": 278217123,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1649360990
    }
]