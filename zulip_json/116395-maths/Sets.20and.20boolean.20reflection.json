[
    {
        "content": "<p>ssreflect has a pattern <code>[pick x in A | P] == Some x</code> (See: <a href=\"http://ssr.msr-inria.inria.fr/doc/ssreflect-1.5/Ssreflect.fintype.html\" target=\"_blank\" title=\"http://ssr.msr-inria.inria.fr/doc/ssreflect-1.5/Ssreflect.fintype.html\">http://ssr.msr-inria.inria.fr/doc/ssreflect-1.5/Ssreflect.fintype.html</a>) which is used in a proof that I want to translate from COQ. <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> already showed me how to model other parts of ssreflect in pure lean. I wonder if there is a canonical way to express this pattern in lean?</p>",
        "id": 134259292,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537381125
    },
    {
        "content": "<p>There is <code>classical.some</code>, although I'm surprised to say there is no option-returning version of this. I guess it hasn't been necessary</p>",
        "id": 134260318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537381985
    },
    {
        "content": "<p>The usual way we write it is to do <code>if h : \\exists x, p x then classical.some h else default _</code></p>",
        "id": 134260409,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537382067
    },
    {
        "content": "<p>where the branches are usually some more complicated expressions</p>",
        "id": 134260430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1537382090
    },
    {
        "content": "<p>Thank you. Playing with it.</p>",
        "id": 134261730,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537383401
    },
    {
        "content": "<p>This seems to not be as easy as I thought:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">class</span><span class=\"bp\">.</span><span class=\"n\">instance_max_depth</span> <span class=\"mi\">200</span>\n<span class=\"n\">def</span> <span class=\"n\">Gaussian_elimination</span> <span class=\"o\">[</span><span class=\"n\">ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]:</span>\n   <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">matrix</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">α</span>  <span class=\"bp\">→</span> <span class=\"n\">α</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"bp\">¬</span> <span class=\"o\">((</span><span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">uncurry</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">))</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)}</span> <span class=\"k\">in</span>\n  <span class=\"k\">if</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">el</span><span class=\"o\">,</span> <span class=\"n\">el</span> <span class=\"err\">∈</span> <span class=\"n\">S</span>\n  <span class=\"k\">then</span>\n    <span class=\"k\">let</span> <span class=\"n\">el2</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">h</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">el2</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">el2</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"k\">in</span>\n    <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"k\">else</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 134265194,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537387330
    },
    {
        "content": "<p>This gives me an error <code>maximum class-instance resolution depth has been reached (the limit can be increased by setting option 'class.instance_max_depth') (the class-instance resolution trace can be visualized by setting option 'trace.class_instances')</code></p>",
        "id": 134265203,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1537387352
    }
]