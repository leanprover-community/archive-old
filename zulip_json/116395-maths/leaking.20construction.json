[
    {
        "content": "<p>Sometimes I see things like: <code>quot.lift (λ (a₁ : cau_seq ℚ abs), quotient.lift (has_lt.lt a₁) _ ε) _</code> in my tactic state when playing with real numbers. It looks like internal details of the constructions are leaking. What does it mean? Can I avoid that?</p>",
        "id": 133622397,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536522419
    },
    {
        "content": "<p>how are you \"playing\"?</p>",
        "id": 133622571,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536522726
    },
    {
        "content": "<p>if you unfold stuff you can see this</p>",
        "id": 133622577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536522756
    },
    {
        "content": "<p>More precisely, I have:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">,</span>\n<span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">,</span>\n<span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">ball</span> <span class=\"n\">a</span> <span class=\"n\">ε</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">u</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sets</span>\n</pre></div>\n\n\n<p>If I do <code>have:= mem_map.2 this</code> then the new this is the horror</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a₁</span> <span class=\"o\">:</span> <span class=\"n\">cau_seq</span> <span class=\"n\">ℚ</span> <span class=\"n\">abs</span><span class=\"o\">),</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span> <span class=\"n\">a₁</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"err\">∈</span>   <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">dist</span> <span class=\"n\">y</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">u</span> <span class=\"n\">f</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">sets</span>\n</pre></div>\n\n\n<p>but I can do instead <code>have : {b | u b ∈ ball a ε} ∈ f.sets := mem_map.2 this,</code> and Lean won't unfold it</p>",
        "id": 133622621,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536522854
    },
    {
        "content": "<p>You are going the wrong way</p>",
        "id": 133622685,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536523057
    },
    {
        "content": "<p>use <code>mem_map.1 this</code></p>",
        "id": 133622686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536523069
    },
    {
        "content": "<p>(it works because the two sides are defeq so it doesn't really matter if you apply it, but then the matching goes crazy)</p>",
        "id": 133622735,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536523104
    },
    {
        "content": "<p>oh</p>",
        "id": 133622736,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536523110
    },
    {
        "content": "<p>weird</p>",
        "id": 133622737,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536523112
    },
    {
        "content": "<p>That's biconditional in action: try one direction at random and, if Lean is willing to apply it, never look back</p>",
        "id": 133622751,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536523147
    },
    {
        "content": "<p>notice that you have another <code>map</code> in the result</p>",
        "id": 133622752,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536523159
    },
    {
        "content": "<p><code>(map (λ (y : α), dist y a) (map u f)).sets</code></p>",
        "id": 133622755,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536523162
    },
    {
        "content": "<p>true</p>",
        "id": 133622757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536523168
    },
    {
        "content": "<p>so it tried to figure out how to read <code>ball a ε</code> as <code>{x | m x ∈ t}</code> for some <code>m, t</code> and chaos ensues</p>",
        "id": 133622809,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536523235
    },
    {
        "content": "<p>That's wonderful. In the proof I posted earlier:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"n\">u</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span><span class=\"o\">},</span> <span class=\"n\">n</span> <span class=\"bp\">≥</span> <span class=\"n\">N</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">H</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span><span class=\"o\">,</span> <span class=\"n\">mem_at_top_sets</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"n\">mem_map</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"n\">ball_mem_nhds</span> <span class=\"bp\">_</span> <span class=\"n\">εpos</span><span class=\"o\">),</span>\n <span class=\"bp\">λ</span> <span class=\"n\">H</span> <span class=\"n\">s</span> <span class=\"n\">s_nhd</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">εpos</span><span class=\"o\">,</span> <span class=\"n\">sub</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">mem_nhds_iff_metric</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">s_nhd</span> <span class=\"k\">in</span>\n   <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">H&#39;</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">ε</span> <span class=\"n\">εpos</span> <span class=\"k\">in</span> <span class=\"n\">mem_at_top_sets</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">nN</span><span class=\"o\">,</span>\n   <span class=\"n\">sub</span> <span class=\"err\">$</span> <span class=\"n\">mem_ball</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">H&#39;</span> <span class=\"n\">nN</span><span class=\"bp\">⟩⟩</span>\n</pre></div>\n\n\n<p>There is a <code>$ mem_map.2 $ </code>. You can change 2 into 1, it still works. Then you can remove that bit entirely and it still works!</p>",
        "id": 133622819,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536523264
    },
    {
        "content": "<p>because the proof is <code>rfl</code></p>",
        "id": 133622825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536523277
    },
    {
        "content": "<p>Yeah, I understand</p>",
        "id": 133622827,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536523284
    },
    {
        "content": "<p><code>simp</code> can do this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">tendsto_at_top_nhds_metric</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">ε</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"bp\">≥</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">tendsto_infi</span><span class=\"o\">,</span> <span class=\"n\">tendsto_principal</span><span class=\"o\">,</span> <span class=\"n\">nhds_eq_metric</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>The trick is to unfold <code>nhds_eq_metric</code> and rhen focus on the right side: An infimum is equal to a quantifier around the <code>tendsto</code>, until it reaches <code>principal</code>, then it is reduced to membership in <code>at_top</code>.<br>\nOther examples</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">tendsto_at_top_at_top</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"n\">at_top</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"bp\">≥</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">M</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">at_top</span><span class=\"o\">]</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">tendsto_infi</span><span class=\"o\">,</span> <span class=\"n\">tendsto_principal</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>or</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">tendsto_nhds_metric_nhds_metric</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">}:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">ε</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">δ</span><span class=\"bp\">&gt;</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">x</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">dist</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">conv</span> <span class=\"o\">{</span> <span class=\"n\">to_lhs</span><span class=\"o\">,</span> <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">skip</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nhds_eq_metric</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">tendsto_infi</span><span class=\"o\">,</span> <span class=\"n\">tendsto_principal</span><span class=\"o\">,</span> <span class=\"n\">mem_nhds_iff_metric</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_def</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Here the annoying part is that we need to focus on the right <code>nhds</code> or <code>at_top</code>.</p>",
        "id": 133633334,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1536545332
    }
]