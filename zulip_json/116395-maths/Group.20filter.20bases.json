[
    {
        "content": "<p>Hi, I suggest that we migrate from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/group_filter_basis\">docs#group_filter_basis</a> to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">group_filter</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">filter</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">one'</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">≤</span> <span class=\"n\">to_filter</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul'</span> <span class=\"o\">:</span> <span class=\"n\">to_filter</span> <span class=\"bp\">*</span> <span class=\"n\">to_filter</span> <span class=\"bp\">≤</span> <span class=\"n\">to_filter</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv'</span> <span class=\"o\">:</span> <span class=\"n\">to_filter</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">≤</span> <span class=\"n\">to_filter</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">conj'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"n\">to_filter</span> <span class=\"n\">to_filter</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 320033580,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673150903
    },
    {
        "content": "<p>The main pro of this approach is that <code>group_filter</code>s are in <code>≃o</code> correspondence with <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/group/basic.html#group_topology\">group topologies</a>.</p>",
        "id": 320033690,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673151080
    },
    {
        "content": "<p>Two different <code>f g : group_filter_basis G</code> can define the same topology (if they define the same filter) but two different <code>group_filter</code>s define different topologies.</p>",
        "id": 320033737,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673151130
    },
    {
        "content": "<p>Also, sometimes it's easier to construct a filter, not a filter basis. E.g., instead of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/seminorm_family.basis_sets\">docs#seminorm_family.basis_sets</a> and related definitions we can use <code>⨅ i, (p i).to_filter</code>, where <code>seminorm.to_filter p := ⨅ (r : ℝ) (hr : 0 &lt; ℝ), p.ball (0 : E) r</code>.</p>",
        "id": 320033920,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673151408
    },
    {
        "content": "<p>As far as I can tell, these definitions are equivalent to what we have but it's easier to use <code>infi_le</code>, <code>le_infi</code> etc instead of destructing intersections of balls here and there.</p>",
        "id": 320033944,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673151471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> What do you think? <span aria-label=\"up\" class=\"emoji emoji-2b06\" role=\"img\" title=\"up\">:up:</span></p>",
        "id": 320033951,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673151479
    },
    {
        "content": "<p>Do you also propose we delete the definition of a basis of a topological space because two bases can generate the same topology?</p>",
        "id": 320075894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673184226
    },
    {
        "content": "<p>Oh -- what do you mean by \"migrate\"? We certainly used group filter bases when putting the topology on an infinite Galois group.</p>",
        "id": 320076116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673184336
    },
    {
        "content": "<p>There are definitely cases where the natural thing is the filter basis, for instance for non-archimedean groups. We also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_group.of_nhds_one\">docs#topological_group.of_nhds_one</a> which is closer to what wrote, but assumes you already have a topology (and is used in the proof of group_filter_basis.is_topological_group). That lemma could also be used to prove that <code>group_filter</code> gives rise to topological group. Those are all very close variations. I was worried that including all variations would result in a bloated API, but you can try. But it would be sad to loose the wording \"the I-adic topology is the topology having as a basis of neighborhoods of zero the powers of I\" and replace it by something much harder to read for beginners without a really clear gain.</p>",
        "id": 320079993,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673186540
    },
    {
        "content": "<p>The topology of an infinite Galois group Gal(L/K) is defined as \"basis of nhds of 1 is Gal(L/E) as E runs through intermediate fields finite over K\".</p>",
        "id": 320110229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673205432
    },
    {
        "content": "<p>Probably, I badly formulated my proposal. I'll make some proposal with code, then we'll decide what parts of it should be merged. I understand that the answer can be \"all of it\".</p>",
        "id": 320111758,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1673206478
    }
]