[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">w</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">&lt;</span><span class=\"n\">insert</span> <span class=\"n\">maths</span> <span class=\"n\">here</span><span class=\"bp\">&gt;</span>\n<span class=\"n\">def</span> <span class=\"o\">:</span> <span class=\"n\">large_category</span> <span class=\"o\">(</span><span class=\"n\">presheaf</span> <span class=\"n\">X</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>gives me</p>\n<div class=\"codehilite\"><pre><span></span>type mismatch at application\n  large_category (presheaf X C)\nterm\n  presheaf X C\nhas type\n  Type (max u v w) : Type (max (u+1) (v+1) (w+1))\nbut is expected to have type\n  Type (?+1) : Type (?+2)\n</pre></div>\n\n\n<p>Seems to me that Lean wants to know that \"something is large\". The risk is that if C is a small category then there won't be a universe small enough to contain my morphisms! I guess in that case I would rather have had a small category. </p>\n<p>I'm going to make it a small category. A better approach would be to demand u&gt;=1, which is fine here because u=1 in all the examples I care about, butI don't know how to manage that because of the delicate universe category-theory set-up -- I'm only just learning the basics.</p>",
        "id": 183543692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576498830
    },
    {
        "content": "<p>Oh this is a nightmare. The morphisms have type <code>max v w</code>. Maybe I should just make a category :-/</p>",
        "id": 183544355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576499496
    },
    {
        "content": "<p>I am back in hell</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">XYZ</span><span class=\"o\">:</span> <span class=\"n\">has_coe_to_fun</span> <span class=\"o\">(</span><span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span> <span class=\"n\">X</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">has_coe_to_fun</span>\n</pre></div>\n\n\n<div class=\"codehilite\"><pre><span></span>invalid type ascription, term has type\n  has_coe_to_fun (presheaf ?m_1 ?m_3) : Type (max (max ? ?) (max (?+1) 1) (?+1))\nbut is expected to have type\n  has_coe_to_fun (presheaf X C) : Type (max (max u v w) ?)\nstate:\nX : Type w,\n_inst_1 : topological_space X,\nC : Type u,\nùíû : category C\n‚ä¢ has_coe_to_fun (presheaf X C)\n</pre></div>\n\n\n<p>I just really want to say \"switch the universes off, I honestly don't care and i think <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  is paranoid\"</p>",
        "id": 183560205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576510658
    },
    {
        "content": "<p>a little bit of type in type never hurt anyone.</p>",
        "id": 183560282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576510690
    },
    {
        "content": "<p>I don't remember exactly, but this might have been one of the reasons why the category lib stopped using coercions for functors.</p>",
        "id": 183560997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576511103
    },
    {
        "content": "<p>the computer scientists want us to be polymorphic and I just want sheaves of rings and I'll do anything they say about universes, as long as it works when stuff is Type 0 (sets) or Type 1 (classes) and the ZFC people will be happy. Why am I getting these obscure errors?</p>",
        "id": 183561652,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576511446
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">res&#39;</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"err\">?</span><span class=\"n\">l_2</span><span class=\"o\">}</span> <span class=\"n\">‚Ñ±</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">‚Ñ±</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">u</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">X</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"err\">?</span><span class=\"n\">l_2</span> <span class=\"err\">?</span><span class=\"n\">l_1</span><span class=\"o\">}</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"err\">?</span><span class=\"n\">l_1</span> <span class=\"err\">?</span><span class=\"n\">l_2</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I don't know how to fix it with ulift. Am I supposed to be managing these universes myself?</p>",
        "id": 183561804,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576511540
    },
    {
        "content": "<p>I think I will try again with v, the universe of the morphisms in C being equal to w, the universe of the topological space X. In reality v and w are always sets so I'd even happily set v=w=0.</p>",
        "id": 183561934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576511633
    },
    {
        "content": "<p>Looks like swapping all your <code>w</code>s to <code>v</code>s might help.</p>",
        "id": 183561944,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1576511641
    },
    {
        "content": "<p>I'm letting w = v and it's working much better</p>",
        "id": 183562030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576511674
    },
    {
        "content": "<p>w=v corresponds to the fact that mathematicians know that topological spaces and sets of morphisms are sets.</p>",
        "id": 183562086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576511706
    },
    {
        "content": "<p>so they can live in the same universe</p>",
        "id": 183562103,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576511717
    }
]