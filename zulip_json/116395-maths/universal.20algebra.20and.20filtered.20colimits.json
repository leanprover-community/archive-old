[
    {
        "content": "<p>I read about <span class=\"user-mention\" data-user-id=\"384542\">@Justus Springer</span>'s work on filtered colimits and got curious about how the universal algebra version would look, so I had a go at writing it up on <a href=\"https://github.com/leanprover-community/mathlib/tree/unialg\">branch#unialg</a>. The idea was to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.colimit_limit_to_limit_colimit_is_iso\">docs#category_theory.limits.colimit_limit_to_limit_colimit_is_iso</a> to prove that the functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>X</mi><mo>↦</mo><msup><mi>X</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">X \\mapsto X^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> preserves filtered colimits. If you then consider some notion of structure (like \"ring\") defined by functions n-ary functions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>X</mi><mi>n</mi></msup><mo>→</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X^n \\to X</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, you can define corresponding operations on the colimit type, as well as showing that they are \"lawful\". I didn't go so far as proving that the resulting structure is a colimit (or that the forgetful functor to <code>Type</code> preserves / reflects / creates filtered colimits), but there shouldn't be any obstacle to this. So far it's not too much code, but you would need some more work to connect this perspective with mathlib's notion of group / ring / etc.</p>",
        "id": 253790663,
        "sender_full_name": "David Wärn",
        "timestamp": 1631905020
    },
    {
        "content": "<p>I think the main challenge with this sort of generalisation is that translating mathlib's <code>group</code>, <code>ring</code> etc into the language of category theory and varieties isn't so complicated as to make it easier to prove theorems directly on <code>group</code> than apply the general theorem. I feel like this universal algebra could be unified with the first order logic stuff we already have. flypitch did a bunch of work on that, and some of it is in <a href=\"https://leanprover-community.github.io/mathlib_docs/model_theory/basic.html\">https://leanprover-community.github.io/mathlib_docs/model_theory/basic.html</a></p>",
        "id": 253793580,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631906089
    },
    {
        "content": "<p>Another change I would make is to introduce a characteristic predicate for a category coming from an equational theory. We should still be using the usual category <code>Grp</code> and then some type class on a category saying what its signature is etc.</p>",
        "id": 253794612,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631906572
    },
    {
        "content": "<p>Wow, interesting to see this perspective being developed! I don't know much about universal algebra. Do you think the existence of limits and colimits could also be proved at this abstract level? Because for limits, you'd need pi instances for arbitrary structs right? E.g. the limit cone of <code>F : J ⥤ Mon</code> is defined as a submonoid of <code>Π j, F.obj j</code>.</p>",
        "id": 253795251,
        "sender_full_name": "Justus Springer",
        "timestamp": 1631906874
    },
    {
        "content": "<p>Yes, limits and colimits are easy to construct. I only defined binary products but the general <code>pi</code> instance looks the same.</p>",
        "id": 253796307,
        "sender_full_name": "David Wärn",
        "timestamp": 1631907308
    },
    {
        "content": "<p>Whatever happens with universal algebra, it should be integrated with the model theory part of mathlib.</p>",
        "id": 253796376,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631907348
    },
    {
        "content": "<p>Another approach to all this stuff is through Lawvere theories.</p>",
        "id": 253801138,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1631909581
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/116395-maths/topic/universal.20algebra.20and.20filtered.20colimits/near/253793580\">said</a>:</p>\n<blockquote>\n<p>I think the main challenge with this sort of generalisation is that translating mathlib's <code>group</code>, <code>ring</code> etc into the language of category theory and varieties isn't so complicated as to make it easier to prove theorems directly on <code>group</code> than apply the general theorem.</p>\n</blockquote>\n<p>Ideally we would have some <code>meta</code> code for this (e.g. to calculate from the definition of <code>group</code> a certain algebraic theory, and build an equivalence between its category of models and the category of groups)</p>",
        "id": 253833087,
        "sender_full_name": "Reid Barton",
        "timestamp": 1631934077
    },
    {
        "content": "<p>Yes. One approach would be</p>\n<ol>\n<li>define a typeclass <code>is_algebraic C</code> for concrete categories <code>C</code>, to say that <code>C</code> is equivalent to the category of algebras of some algebraic theory (and that this equivalence commutes with the forgetful functor)</li>\n<li>inhabit this typeclass for categories like <code>Mon</code>, <code>Group</code>, <code>Ring</code> (by hand or using metaprogramming)</li>\n<li>for any <code>is_algebraic C</code>, prove that <code>C</code> has limits and colimits and that the forgetful functor is monadic / creates limits / preserves filtered colimits.</li>\n</ol>\n<p>In the end you'd get theorems about <code>Group</code> instead of <code>group</code>, but I guess that's fine.</p>",
        "id": 253852591,
        "sender_full_name": "David Wärn",
        "timestamp": 1631955227
    },
    {
        "content": "<p>The other problem which needs quite a lot of thought is that a lot of the time stronger versions of the theorems exist in particular equational theories. E.g. if the equational theory has no functions of arity 2 or greater then I think the forgetful functor preserves all colimits not just directed ones.</p>\n<p>Depending how far this goes, you probably want some typeclass for an equational theory that extends groups so that you can state theorems in terms of kernels in those categories instead of congruence relations.</p>\n<p>You probably want a slightly different version of the theory for each category.</p>",
        "id": 253858176,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1631960970
    }
]