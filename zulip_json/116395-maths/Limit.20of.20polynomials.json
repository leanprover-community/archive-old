[
    {
        "content": "<p>I have a monic polynomial <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span></span></span></span> (with integer coefficients if that matters, it is the cyclotomic polynomial). I need that for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> large enough <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> is  bigger than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (to be precise I am interested only at this result for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> an integer). Normally I would just say that the limit for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>→</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">x \\to +\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">+\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span></span></span></span>.</p>\n<p>How can I start proving this in lean? Should I look in the analysis part of the library? I had a quick look but I didn't find any polynomial.</p>\n<p>Thank you!</p>",
        "id": 218126834,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606508703
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.tendsto_infinity\">docs#polynomial.tendsto_infinity</a> close enough?</p>",
        "id": 218127006,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606508895
    },
    {
        "content": "<p>Ah, it was in topology, non analysis!</p>",
        "id": 218127156,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606509068
    },
    {
        "content": "<p>This was for the fundamental theorem of algebra so it might not be very suited to the integers</p>",
        "id": 218127158,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606509069
    },
    {
        "content": "<p>There's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_pow_at_top\">docs#tendsto_pow_at_top</a> for semirings</p>",
        "id": 218127184,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1606509095
    },
    {
        "content": "<p>It is exactly what I need, thank you!! It is even already translated in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ε</mi><mo>−</mo><mi>δ</mi></mrow><annotation encoding=\"application/x-tex\">\\varepsilon-\\delta</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">ε</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03785em;\">δ</span></span></span></span> terms... I thought I had to learn something about filters.</p>",
        "id": 218127334,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606509235
    },
    {
        "content": "<p>That's too bad! But I'm sure you'll have other opportunities to learn about filters.</p>",
        "id": 218140040,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1606525758
    },
    {
        "content": "<p>Maybe we should remove those epsilon delta translations, they're probably not used in mathlib and if they are then we're doing it wrong</p>",
        "id": 218153291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606549758
    },
    {
        "content": "<p>Hmmmmmm I don't agree on that (but I may be absolutely wrong, this is only my naive opinion). If I understand it correctly, the goal of mathlib is not only to be a big self-contained collection of theorems, it should also be usable by external users to make their project in Lean. So, although epsilon delta definitions should not be used inside mathlib itself, I think there might be a lot of people who want to do analysis using mathlib without having to learn all of the theory behind filters.</p>",
        "id": 218156115,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1606555442
    },
    {
        "content": "<p>If there's a strong urge to remove them, they could go into an \"examples\" directory or something so that we still ensure that they build and users who don't know about filters yet can use them to help learn.</p>",
        "id": 218156635,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606556374
    },
    {
        "content": "<p>Perhaps we need a \"filters game\"?</p>",
        "id": 218156639,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606556386
    },
    {
        "content": "<p>Why would you want to remove the epsilon-delta properties? There are some situations where these are precisely the way you will need to use a limit, so they definitely belong to mathlib.</p>",
        "id": 218157925,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1606558820
    },
    {
        "content": "<p>My, very personal, opinion is that it should be easy to obtain concrete results like the one I needed.  I have no idea how hard it is to translate a result in the language of filters to something concrete, but I guess not that much. BTW, I don't see in mathlib any result about limit of polynomials using filters...</p>",
        "id": 218157991,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606558959
    },
    {
        "content": "<p>I mean that results like \"if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> tends to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>, written in the language of filters, then blah blah\" are definitely useful. I agree that  having explicitly that  \" for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>∈</mo><mi mathvariant=\"bold\">R</mi></mrow><annotation encoding=\"application/x-tex\">M \\in \\mathbf{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">R</span></span></span></span></span> there exist <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub><mo>∈</mo><mi mathvariant=\"bold\">R</mi></mrow><annotation encoding=\"application/x-tex\">x_0 \\in \\mathbf{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6891em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">R</span></span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>&gt;</mo><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">\\exp(x) &gt; M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">exp</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>&gt;</mo><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">x &gt; x_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>\" is quite redundant.</p>",
        "id": 218158134,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606559251
    },
    {
        "content": "<p>Oh sorry, I was just trying to wind Riccardo up! I wasn't being at all serious</p>",
        "id": 218158138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606559275
    },
    {
        "content": "<p>But I do agree there should be a filter game</p>",
        "id": 218158178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606559308
    },
    {
        "content": "<p>Don't worry, I will learn filters anyway <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 218158246,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606559466
    },
    {
        "content": "<p>Maybe you should write it :D</p>",
        "id": 218158389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606559723
    },
    {
        "content": "<p>They are hugely powerful. I spent some time over the summer writing proofs like \"closed subspace of compact space is compact\" and \"compact subspace of Hausdorff space is closed\" using the open set proof, and I don't know if this has something to do with type theory or what, but the proofs were much longer than the filter proofs.</p>",
        "id": 218158447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606559810
    },
    {
        "content": "<p>Really a topology game in general would make a great sequel</p>",
        "id": 218158448,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606559819
    },
    {
        "content": "<p>Right, I was just thinking this. Building up the basic results in a first undergrad topology course using filters would be interesting for lots of reasons.</p>",
        "id": 218158459,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606559856
    },
    {
        "content": "<p>One reason the open set proofs were a bit clunky was that we use the axiom of choice all the time in the natural proofs. For example, we say \"say X is a compact subset of a Hausdorff space. Fix a not in X. Now for every x in X, let's choose disjoint opens containing a and x (using the axiom of choice). Cover X by the x-opens, take a finite subcover, take the intersection of the finitely many corresponding neighbourhoods of a and there's your open neighbourhood of a disjoint from X\". This is a very natural proof for mathematicians, but there is some <code>classical.some</code> involved in Lean.</p>",
        "id": 218158585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606560031
    },
    {
        "content": "<p>But the moment you start asking about a constructive proof you run into issues that there is more than one constructive <em>statement</em> of the theorem. For example does \"Hausdorff\" mean \"given a and x, there exists disjoint opens\" or does it mean \"there exists a function which takes two distinct elements and spits out two disjoint opens\"? These are different things constructively.</p>",
        "id": 218158641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606560146
    },
    {
        "content": "<p>I supervised an undergraduate project on doing topology with filters last year, because I know from experience that one way to learn a topic is to make an undergraduate do a project in it and then you have to answer their questions. I was really impressed by the super-short proof that an arbitrary product of compact spaces was compact.</p>",
        "id": 218158733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606560340
    },
    {
        "content": "<p>This theorem was filed in my mind up until that point as \"elementary, but quite tricky\".</p>",
        "id": 218158779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606560374
    },
    {
        "content": "<p>On the specific topic of proving analysis results about polynomial functions, I was also surprised to see that there was almost nothing in mathlib. I wanted to give it a try but I didn't know which setup I should have used (the way typeclass hierarchy is set up is still a bit of a mystery to me), so I did nothing useful. Maybe I should have done it with reals first and then try to generalize.</p>",
        "id": 218158928,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1606560692
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Limit.20of.20polynomials/near/218158641\">said</a>:</p>\n<blockquote>\n<p>But the moment you start asking about a constructive proof you run into issues that there is more than one constructive <em>statement</em> of the theorem. For example does \"Hausdorff\" mean \"given a and x, there exists disjoint opens\" or does it mean \"there exists a function which takes two distinct elements and spits out two disjoint opens\"? These are different things constructively.</p>\n</blockquote>\n<p>Or does it mean \"if every pair of opens around a and x intersect then a = x\"</p>",
        "id": 218159057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1606560920
    },
    {
        "content": "<p>The funniest (for my sense of humour at least) part of this was that when I was raging about all this on Twitter, arguing that the maths proof I presented was clearly the \"natural\" one, a whole bunch of constructivists popped up (as they often do on Twitter) and started explaining the proper way to do it, and they all had different ideas. I hadn't really internalised that there were lots of different kinds of constructivists. One said that all topology should be done classically, one said that I should be using locales, one said my definition of Hausdorff was wrong, one said it was right but instead of choosing a set I should use all the sets (and this argument does work, I checked it in Lean).</p>",
        "id": 218159169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606561109
    },
    {
        "content": "<p>As for limits of polynomials, I quite agree that we are missing tons of stuff. At Xena last week I wrote over 20 lines of code proving (in a way a beginner could understand) that the limit of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><mi>n</mi><mo>+</mo><mn>7</mn></mrow><mi>n</mi></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n+7}{n}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">7</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> was 1 as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> tended to infinity, and then the next question was to prove that the limit of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mi>n</mi><mrow><mi>n</mi><mo>+</mo><mn>7</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n}{n+7}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0987230000000001em;vertical-align:-0.403331em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">7</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> was 1 and the students were like \"please skip it\". Then the next one was <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mrow><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>5</mn><mi>n</mi><mo>+</mo><mn>6</mn></mrow><mrow><msup><mi>n</mi><mn>3</mn></msup><mo>−</mo><mn>2</mn></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{n^2+5n+6}{n^3-2}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.4212509999999998em;vertical-align:-0.403331em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.01792em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">5</span><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">6</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> and they were like \"please skip that one too\".</p>",
        "id": 218159239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606561228
    },
    {
        "content": "<p>And because I couldn't really imagine using any techniques which we hadn't seen already in the first proof, I agreed and we went on to other questions. The computations really were a bit painful, and the reason is simply that nobody has tried to make them easier -- certainly myself I'd rather be proving that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo>→</mo><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">a_n\\to l</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mi>n</mi></msub><mo>→</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">b_n\\to m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><msub><mi>b</mi><mi>n</mi></msub><mo>→</mo><mi>l</mi><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">a_nb_n\\to lm</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">m</span></span></span></span> by building up a little library of results about limits (which I should say I defined by hand using the epsilon-N definition), I think this is an intrinsically more interesting thing to be doing in Lean.</p>",
        "id": 218159310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606561370
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/M40002/blob/60f07e2b2e1e460495e9a9756df44b5e0dedcff3/src/solutions_sheet_three.lean#L28-L55\">https://github.com/ImperialCollegeLondon/M40002/blob/60f07e2b2e1e460495e9a9756df44b5e0dedcff3/src/solutions_sheet_three.lean#L28-L55</a></p>",
        "id": 218159336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606561431
    },
    {
        "content": "<p><code>use (ceil ((37 : ℝ) / ε)).nat_abs,</code> says \"OK so in this proof we'll be skipping between the reals, the integers and the naturals\". I think there's <code>exists_nat_gt</code> in the library and perhaps this would have made life a bit easier, but there are clearly a bunch of things one could easily prove here which would enable people to compute the limit of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">/</mi><mi>q</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">p(x)/q(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">/</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">x\\to\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span> for e.g. all polynomials <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mo separator=\"true\">,</mo><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">p,q</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> and a bunch of other things too (e.g. polynomial plus bounded function, in many cases), for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> running through nat or pnat (as the lecturer insists on using) or the reals etc.</p>",
        "id": 218159425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606561564
    },
    {
        "content": "<p>What is missing here are lots of lemmas about asymptotics (little o and big O).</p>",
        "id": 218159470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1606561655
    },
    {
        "content": "<p>Yes, and Eberl just did them in Isabelle/HOL so we have something to work on too. Not sure how interested he was in sequences though.</p>",
        "id": 218159517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606561684
    },
    {
        "content": "<p>I was hoping that this could be simplified by what I defined in <a href=\"https://github.com/leanprover-community/mathlib/issues/4979\">#4979</a> : the idea would be to say : <code>n ~ n</code> and <code>n+7 ~ n</code> so <code>n/(n+7) ~ n/n = 1</code>. But the thing I haven't managed to do yet is prove that every polynomial is equivalent to its leading term at infinity</p>",
        "id": 218159519,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1606561686
    },
    {
        "content": "<p>Yes, Anatole, this is exactly what I meant.</p>",
        "id": 218160114,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1606562837
    },
    {
        "content": "<p>oh here you can of course just use some easy epsilon delta argument :P (or maybe an epsilon N argument in this case)</p>",
        "id": 218160307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606563198
    },
    {
        "content": "<p>Yeah I guess the problem really is I wanted to start with the most general statement so I got stuck on simple things. I'll give it a try again when I have some time</p>",
        "id": 218160570,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1606563637
    },
    {
        "content": "<p>Eberl also has a nice <code>real_asymp</code> tactic based on Multiseries and inspired by some Maple implementation. Maybe it can serve as inspiration (if it doesn't already).</p>",
        "id": 218179330,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1606594720
    },
    {
        "content": "<p>Is there any reason why <code>is_absolute_value</code> takes value in a <code>linear_ordered_field</code> rather then in a <code>linear_ordered_ring</code> (maybe even semiring)? The definition makes sense, and since we have results like <code>polynomial.tendsto_infinity</code> that work, for example, for polynomials over <code>ℤ</code>, we can obtain directly that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">P(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> is big enough as an integer, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>∈</mo><mi mathvariant=\"bold\">Z</mi><mo stretchy=\"false\">[</mo><mi>x</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">P \\in \\mathbf{Z}[x]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span></span></span></span>, without going to <code>ℚ</code> and then going back to <code>ℤ</code>.</p>",
        "id": 218556248,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606916225
    },
    {
        "content": "<p>Make a new branch of mathlib, change the definition of <code>is_absolute_value</code>, push to github and tomorrow when you remember, take a look and see if it compiled!</p>",
        "id": 218585689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606928175
    },
    {
        "content": "<p>I just did that locally:  the first properties in <code>data.real.cau_seq</code> can be generalized easily  to the case of  <code>linear_ordered_comm_ring R</code>, but then I tried to modify the proof that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>lim</mi><mo>⁡</mo><mrow><mi>x</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow><mi mathvariant=\"normal\">∣</mi><mi>P</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\lim{x \\to \\infty} |P(x)| = \\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">lim</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\">∞</span></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span> and realized that this is probably false! If in <code>R</code> there is an infinitesimal element <code>ε</code> but no infinite elements then the polynomial <code>C ε * X</code> is bounded <span aria-label=\"dizzy\" class=\"emoji emoji-1f635\" role=\"img\" title=\"dizzy\">:dizzy:</span></p>",
        "id": 218588008,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1606929005
    },
    {
        "content": "<p>Ok so I have good and bad news.</p>\n<ul>\n<li>\n<p>I've managed to prove that for any polynomial <code>P</code> on a <code>normed_linear_ordered_field</code>, we have <code>(λ x, eval x P) ~[at_top] (λ x, P.leading_coeff * x ^ P.nat_degree)</code>, from which I deduced the three cases for the limit of P/Q depending on the degree (either infinity, 0, or ratio of leading coeffs). I'll PR all of this soon</p>\n</li>\n<li>\n<p>I tried proving a random example using these. But it is still incredibly boring because of the lack of automation about polynomial, which makes it quite boring. This gives the following proof, which is very long, but most of the length comes from proving degrees. If you have any advice on how to make this shorter, I'll take it !</p>\n</li>\n</ul>",
        "id": 219378957,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1607539112
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">7</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"o\">(</span><span class=\"mi\">12</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">𝓝</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"bp\">/</span><span class=\"mi\">4</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">key1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"mi\">7</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">monomial</span> <span class=\"mi\">1</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"n\">monomial</span> <span class=\"mi\">0</span> <span class=\"mi\">7</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">12</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"mi\">4</span> <span class=\"bp\">=</span> <span class=\"n\">eval</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">2</span> <span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"n\">monomial</span> <span class=\"mi\">0</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">key1</span><span class=\"o\">,</span> <span class=\"n\">key2</span><span class=\"o\">],</span>\n  <span class=\"n\">set</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">monomial</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">monomial</span> <span class=\"mi\">1</span> <span class=\"mi\">6</span> <span class=\"bp\">+</span> <span class=\"n\">monomial</span> <span class=\"mi\">0</span> <span class=\"mi\">7</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span> <span class=\"n\">monomial</span> <span class=\"mi\">2</span> <span class=\"mi\">12</span> <span class=\"bp\">+</span> <span class=\"n\">monomial</span> <span class=\"mi\">0</span> <span class=\"mi\">4</span><span class=\"o\">,</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">degA1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">degree_monomial</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">degA2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">1</span> <span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">degree_monomial</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">degA3</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">0</span> <span class=\"mi\">7</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">degree_monomial</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">degA4</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"bp\">-</span> <span class=\"n\">monomial</span> <span class=\"mi\">1</span> <span class=\"mi\">6</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">degA1</span> <span class=\"bp\">▸</span> <span class=\"n\">degree_sub_eq_left_of_degree_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">degA1</span><span class=\"o\">,</span> <span class=\"n\">degA2</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">degA</span> <span class=\"o\">:</span> <span class=\"n\">A.degree</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">degA4</span> <span class=\"bp\">▸</span> <span class=\"n\">degree_add_eq_left_of_degree_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">degA3</span><span class=\"o\">,</span> <span class=\"n\">degA4</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span><span class=\"o\">),</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">degB1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">2</span> <span class=\"mi\">12</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">degree_monomial</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">degB2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"mi\">0</span> <span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">degree</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">degree_monomial</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">degB</span> <span class=\"o\">:</span> <span class=\"n\">B.degree</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">degB1</span> <span class=\"bp\">▸</span> <span class=\"n\">degree_add_eq_left_of_degree_lt</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">degB1</span><span class=\"o\">,</span> <span class=\"n\">degB2</span><span class=\"o\">]</span> <span class=\"bp\">;</span> <span class=\"n\">dec_trivial</span><span class=\"o\">),</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">leadA</span> <span class=\"o\">:</span> <span class=\"n\">A.leading_coeff</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">leading_coeff</span> <span class=\"n\">nat_degree</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">degA</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coeff_add</span><span class=\"o\">,</span><span class=\"n\">coeff_sub</span><span class=\"o\">,</span><span class=\"n\">coeff_monomial</span><span class=\"o\">,</span><span class=\"n\">if_true</span><span class=\"o\">,</span><span class=\"n\">option.get_or_else_coe</span><span class=\"o\">,</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">],</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n\n  <span class=\"k\">have</span> <span class=\"n\">leadB</span> <span class=\"o\">:</span> <span class=\"n\">B.leading_coeff</span> <span class=\"bp\">=</span> <span class=\"mi\">12</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">unfold</span> <span class=\"n\">leading_coeff</span> <span class=\"n\">nat_degree</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">degB</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coeff_add</span><span class=\"o\">,</span><span class=\"n\">coeff_sub</span><span class=\"o\">,</span><span class=\"n\">coeff_monomial</span><span class=\"o\">,</span><span class=\"n\">if_true</span><span class=\"o\">,</span><span class=\"n\">option.get_or_else_coe</span><span class=\"o\">,</span><span class=\"n\">eq_self_iff_true</span><span class=\"o\">],</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n\n  <span class=\"n\">convert</span> <span class=\"n\">A.eval_div_tendsto_leading_coeff_div_of_degree_eq</span> <span class=\"n\">B</span> <span class=\"o\">(</span><span class=\"n\">degA.trans</span> <span class=\"n\">degB.symm</span><span class=\"o\">)</span> <span class=\"n\">using</span> <span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">leadA</span><span class=\"o\">,</span> <span class=\"n\">leadB</span><span class=\"o\">],</span>\n  <span class=\"n\">norm_num</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 219379007,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1607539142
    },
    {
        "content": "<p>I think that if there is a <code>char_zero R</code> floating around, then some <code>norm_num</code> plugin should be able to handle a lot of these computations. But unfortunately I don't know how to write such a plugin.</p>",
        "id": 219396034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607547173
    },
    {
        "content": "<p>A little while back in <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/constant.20polynomial.20tactic/near/201179210\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/constant.20polynomial.20tactic/near/201179210</a> <span class=\"user-mention\" data-user-id=\"297832\">@Jack J Garzella</span> was thinking about making a tactic for this sort of stuff, not sure how far it got though</p>",
        "id": 219400310,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1607549136
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> <span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> I was hoping to make such a tactic. Unfortunately, I got busy (I'm a first year graduate student) before I could get started, so I haven't actually done anything :/. Most likely I won't get to do much Lean until March, so if it's something you're interested in have at it.</p>",
        "id": 220995765,
        "sender_full_name": "Jack J Garzella",
        "timestamp": 1609049501
    }
]