[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> raised the topic of discrete valuation fields, and \"the best way to do them\". A discrete valuation field is a field equipped with a non-trivial discrete valuation which almost universally in the literature is an additive valuation to <code>with_top int</code>. This issue is also holding me up with valuations on DVRs because the valuation we already have (<code>multiplicity</code> on the semiring of ideals) is valued in <code>enat</code> and I need to get to <code>multiplicative (with_top int)</code> somehow.</p>\n<p>I wonder whether a reasonable stopping point here is an API for additive discrete valuations, which can be defined to explicitly go from a ring R to <code>with_top int</code>, and follow the usual additive convention. There can be a coercion or function from additive discrete valuations to Lean's (hyper-general multiplicative) valuations, and conversely a predicate <code>is_discrete</code> on Lean's valuations, together with a proof that the two math-definitions ((1) : image discrete in non-zero part of tot ord gp with 0, (2) in the image of the additive discrete valuations) coincide.</p>\n<p>Now I can hear Johan worrying that fixing <code>int</code> instead of using something with a universal property might be a disaster -- but I'm thinking that all the general manipulation of valuations can happen using the multiplicative language, and the additive language would nick some of the API and also of course add more coming from the API of int. For example when we start thinking about extensions of valuations we change from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mi>n</mi></mfrac><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{n}\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> -- but this is the sort of calculation that should be going on using the multiplicative language perhaps. </p>\n<p>If the idea of making a new <code>additive_discrete_valuation</code> class does not appeal, then I could make a new type alias for <code>multiplicative (with_top int)</code> (and would need advice on the name) and use this, or I could just get abstract and try proving things directly using an <code>is_discrete</code> predicate on valuations, although in practice I would imagine I would run into situations where I would far rather be in <code>with_top int</code>. </p>\n<p>The structure which somehow doesn't care about whether the valuation is additive or multiplicative is the subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">R^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> associated to the valuation, defined as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo>:</mo><mi>v</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><mi>v</mi><mo stretchy=\"false\">(</mo><mi>y</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{(x,y):v(x)\\leq v(y)\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mclose\">)</span><span class=\"mclose\">}</span></span></span></span>. Maybe one should pay more attention to this subset?</p>\n<p>Will <code>to_additive</code> get us from <code>with_top A</code> to <code>group_with_zero</code>?</p>",
        "id": 209625201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599737431
    },
    {
        "content": "<p>/me <span aria-label=\"worried\" class=\"emoji emoji-1f61f\" role=\"img\" title=\"worried\">:worried:</span></p>",
        "id": 209625588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599737728
    },
    {
        "content": "<p>The valuation ring itself is an mult/add independent way of speaking about the valuation <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 209633521,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599742325
    },
    {
        "content": "<p>There is one place where I would argue that one needs to fix the value group as something concrete like Z, and that's the product formula.</p>",
        "id": 209634173,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1599742594
    },
    {
        "content": "<p>OK so Johan, what do you think about an API for discrete additive valuations taking values in <code>with_top int</code>?</p>",
        "id": 209640255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599745002
    },
    {
        "content": "<p>This is all taking so long to get right. Another question is whether <code>with_top X</code> should be redefined as an inductive type, or perhaps made irreducible.</p>",
        "id": 209640360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599745053
    },
    {
        "content": "<p>You have stuff like v(pi)=1, and 0&lt;v(x) implies 1 &lt;= v(x), so a little more API: DVRs is the story of <code>with_top nat</code> and DVFs the story of <code>with_top int</code>.</p>",
        "id": 209641002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599745237
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/additive.20discrete.20valuation/near/209640360\">said</a>:</p>\n<blockquote>\n<p>This is all taking so long to get right. Another question is whether <code>with_top X</code> should be redefined as an inductive type, or perhaps made irreducible.</p>\n</blockquote>\n<p>It's a wrapper around an inductive type, right?</p>",
        "id": 209643066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599745653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/additive.20discrete.20valuation/near/209640255\">said</a>:</p>\n<blockquote>\n<p>OK so Johan, what do you think about an API for discrete additive valuations taking values in <code>with_top int</code>?</p>\n</blockquote>\n<p>I think we can't really get around it. So it will be important to have all the norm_cast lemmas that help when moving from <code>enat</code> to <code>with_top int</code>.</p>",
        "id": 209643179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599745694
    },
    {
        "content": "<p>Also, before embarking on anything, I guess the api for <code>enat / multiplicity</code> should be fleshed out.</p>",
        "id": 209643227,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599745719
    },
    {
        "content": "<p>Are you imagining fleshing out this API for enat/multiplicity specifically within the context of DVRs or generally? For DVR's I was just going to make the API for the composition of <code>multiplicity</code> with the map to <code>with_top int</code>.</p>",
        "id": 209645113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599746278
    },
    {
        "content": "<p>I would make a dedicated map <code>enat -&gt; with_top int</code> and prove bunch of lemmas about it.</p>",
        "id": 209645669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599746493
    },
    {
        "content": "<p>But <code>enat</code>s generally seem to be a pain to use.</p>",
        "id": 209645699,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599746504
    },
    {
        "content": "<p>So I think the <code>coe : nat -&gt; enat</code> is also missing some API</p>",
        "id": 209645870,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599746520
    },
    {
        "content": "<p>OK I can certainly start with this, I know what I'm doing here. What is the name of the map <code>enat -&gt; with_top int</code>?</p>",
        "id": 209646387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599746562
    },
    {
        "content": "<p>Also, the API seems to be that you write <code>k \\in n</code> for <code>k : nat</code> and <code>n : enat</code>. I'm sure that computers like this. But for humans it is a very weird notation.</p>",
        "id": 209646494,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599746570
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/additive.20discrete.20valuation/near/209646387\">said</a>:</p>\n<blockquote>\n<p>OK I can certainly start with this, I know what I'm doing here. What is the name of the map <code>enat -&gt; with_top int</code>?</p>\n</blockquote>\n<p>Maybe <code>coe</code>?</p>",
        "id": 209646982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599746597
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiplicity\">docs#multiplicity</a></p>",
        "id": 209702493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599768484
    },
    {
        "content": "<p>I have a proposal for additive valuations: <a href=\"https://github.com/leanprover-community/mathlib/tree/add_valuation2\">branch#add_valuation2</a></p>",
        "id": 228454474,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614707491
    },
    {
        "content": "<p>Basically, I think (but am not completely committed to the idea) that we should have an <code>add_valuation</code> be a separate structure, satisfying the axioms as you might find them in the literature, but then we can have an <code>add_valuation.to_valuation</code> function that turns it into a default multiplicative valuation on a value group made with type tags.</p>",
        "id": 228455083,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614707703
    },
    {
        "content": "<p>We'd still need to duplicate the API, but hopefully the proofs would all just reference the existing lemmas for <code>v.to_valuation</code>, and perhaps we could teach <code>to_additive</code> or a similar tactic to generate the statements too.</p>",
        "id": 228455443,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614707842
    },
    {
        "content": "<p>Hmmm.... shouldn't you use <code>linear_ordered_add_comm_group</code>?</p>",
        "id": 228456138,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614708073
    },
    {
        "content": "<p>Do I not?</p>",
        "id": 228456940,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614708360
    },
    {
        "content": "<p>Oh, never mind... I was looking at the top of the file where you have <code>linear_ordered_comm_group</code>, but I missed the fact that you have a separate section later on with <code>linear_ordered_add_comm_group</code>.</p>",
        "id": 228457574,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1614708585
    },
    {
        "content": "<p>Yes, all the new stuff is at the bottom of the file.</p>",
        "id": 228457597,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614708600
    },
    {
        "content": "<p>Johan tried this for valuations but eventually decided that it was better to make group_with_zero</p>",
        "id": 228457714,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614708632
    },
    {
        "content": "<p>You won't be able to do valuations to <code>enat</code> this way</p>",
        "id": 228457745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614708648
    },
    {
        "content": "<p><code>with_zero (multiplicative (order_dual Γ))</code> sounds like a pleasure to work with. /s</p>",
        "id": 228457759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614708659
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/additive.20discrete.20valuation/near/228457759\">said</a>:</p>\n<blockquote>\n<p><code>with_zero (multiplicative (order_dual Γ))</code> sounds like a pleasure to work with. /s</p>\n</blockquote>\n<p>This is why I don't want to define an <code>add_valuation</code> as literally a valuation to that group...</p>",
        "id": 228457908,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614708718
    },
    {
        "content": "<p>For two reasons -- it's not with_top of anything and it's a monoid not a group</p>",
        "id": 228457993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614708741
    },
    {
        "content": "<p>Valuations need refactoring so they go to monoids with 0. I set everything up but then teaching hit and I never finished the job</p>",
        "id": 228458163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614708822
    },
    {
        "content": "<p>The valuation on a DVR goes to with_top nat</p>",
        "id": 228458164,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614708822
    },
    {
        "content": "<p>Valuations need refactoring so they go to monoids with 0. I set everything up but then teaching hit and I never finished the job</p>",
        "id": 228458165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614708822
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/additive.20discrete.20valuation/near/228458165\">said</a>:</p>\n<blockquote>\n<p>Valuations need refactoring so they go to monoids with 0. I set everything up but then teaching hit and I never finished the job</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6500\">#6500</a></p>",
        "id": 228458480,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614708936
    },
    {
        "content": "<p>As far as the additive case for monoids, my current formulation has a problem that we don't even have <code>linear_ordered_add_comm_monoid</code>, but we do have <code>linear_ordered_cancel_add_comm_monoid</code>. Other than that, <a href=\"https://github.com/leanprover-community/mathlib/issues/6500\">#6500</a> should be enough to switch to monoids.</p>",
        "id": 228462472,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614710406
    },
    {
        "content": "<p>As far as <code>enat</code> not being <code>with_top</code> of anything, I see two options:</p>",
        "id": 228462594,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614710448
    },
    {
        "content": "<ul>\n<li>define <code>linear_ordered_add_comm_monoid_with_top</code></li>\n</ul>",
        "id": 228462601,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614710450
    },
    {
        "content": "<ul>\n<li>refactor <code>enat</code> to be <code>with_top nat</code></li>\n</ul>",
        "id": 228462661,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614710470
    },
    {
        "content": "<p>I'm probably actually in favor of both</p>",
        "id": 228462680,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614710479
    },
    {
        "content": "<p>In my use case for valuations we really want non-cancellative ones by the way. I want to have a valuation on Z/p^nZ whose target is a eg quotient of [0,1] where you collapse [0,e) to zero for some appropriate e</p>",
        "id": 228464073,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614710963
    },
    {
        "content": "<p>Ok, I defer to the mystery of <code>option</code> vs. <code>roption</code>, I've defined <code>linear_ordered_add_comm_monoid_with_top</code> at <a href=\"https://github.com/leanprover-community/mathlib/tree/linear_ordered_comm_monoid\">branch#linear_ordered_comm_monoid</a></p>",
        "id": 228632739,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614792744
    },
    {
        "content": "<p>And I've placed an instance on <code>multiplicative (order_dual a)</code> which should allow us to get definitional equality when translating between multiplicative and additive valuations.</p>",
        "id": 228633001,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614792838
    },
    {
        "content": "<p>Two quick comments about that branch: it's likely to conflict with <a href=\"https://github.com/leanprover-community/mathlib/issues/6489\">#6489</a>; <a href=\"https://leanprover-community.github.io/mathlib_docs/attributes.html#ancestor\">attr#ancestor</a> should match the order in the <code>extends</code> clause</p>",
        "id": 228634863,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614793547
    },
    {
        "content": "<p>I do think this is the right way of doing it. Thanks for putting in this effort!</p>",
        "id": 228635725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614793838
    },
    {
        "content": "<p>I assume you can put an instance in the reverse direction on <code>additive (order_dual a)</code> too?</p>",
        "id": 228635917,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1614793912
    },
    {
        "content": "<p>In case this is of help to someone else, Mario explained to me the difference between <code>option</code> and <code>roption</code> here (and around the conversation in the following link):</p>\n<p><a href=\"#narrow/stream/113489-new-members/topic/discrete_topology/near/218941558\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/discrete_topology/near/218941558</a></p>",
        "id": 228638816,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614794951
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/additive.20discrete.20valuation/near/228635917\">said</a>:</p>\n<blockquote>\n<p>I assume you can put an instance in the reverse direction on <code>additive (order_dual a)</code> too?</p>\n</blockquote>\n<p>I just checked - yes.</p>",
        "id": 228669147,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614805899
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6520\">#6520</a> has the required changes to the ordered algebra hierarchy, and <a href=\"https://github.com/leanprover-community/mathlib/tree/add_valuation3\">branch#add_valuation3</a> implements additive valuations using it.</p>",
        "id": 228684027,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614812288
    },
    {
        "content": "<p>I'm thinking currently the best strategy is to define <code>add_valuation R G</code> to be <code>valuation R (multiplicative (order_dual G))</code>, copy the API (largely done), and then probably also create a new constructor <code>add_valuation.of</code> that will take more reasonably stated (but definitionally equivalent) proofs as input.</p>",
        "id": 228684448,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614812514
    },
    {
        "content": "<p>Oh that's a nice idea!</p>",
        "id": 228685213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614812831
    },
    {
        "content": "<p>Actual proof of concept at <a href=\"https://github.com/leanprover-community/mathlib/tree/add_valuation3\">branch#add_valuation3</a>: multiplicity of a prime in an integral domain as an <code>add_valuation</code></p>",
        "id": 228716893,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614833519
    },
    {
        "content": "<p>That should subsume the DVR case at least, and may be useful somewhere in the p-adic library</p>",
        "id": 228717110,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1614833667
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6559\">#6559</a></p>",
        "id": 229112337,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1615049974
    },
    {
        "content": "<p>Thanks so much for taking this on</p>",
        "id": 229117878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615054858
    },
    {
        "content": "<p>A related question I always had was whether there should be special notation or a definition for multiplicative int (the infinite cyclic group) and with_zero (multiplicative int) (the target of a discrete valuation)</p>",
        "id": 229117992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615054932
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6660\">#6660</a> builds the DVR valuation</p>",
        "id": 230087336,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1615578688
    },
    {
        "content": "<p>I'd like to move on directly to the p-adics, but there are a lot of choices to be made there</p>",
        "id": 230087517,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1615578761
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , what other API/examples do you want for valuations now?</p>",
        "id": 230097653,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1615583223
    },
    {
        "content": "<p>If we have a mono morphism of ordered monoids with 0 then this induces a map from the valuations taking values in the first monoid to valuations taking values in the second monoid</p>",
        "id": 230119740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615594820
    },
    {
        "content": "<p>I want that if R is a comm ring with a valuation and p is in R then R/pR gets a valuation to some kind of quotient monoid. This was precisely what couldn't be done with ordered groups with 0</p>",
        "id": 230119860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615594912
    },
    {
        "content": "<p>I want to collapse 0&lt;=x&lt;=v(p) to zero. I think you can do that with totally ordered monoids</p>",
        "id": 230119928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615594960
    },
    {
        "content": "<p>Do you have a source I can read about this kind of quotient?</p>",
        "id": 230176061,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1615655472
    },
    {
        "content": "<p>Deligne's paper on truncated DVRs is the only one I know of</p>",
        "id": 230176893,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615656409
    },
    {
        "content": "<p>But Deligne's notion of a truncated DVR involves more data</p>",
        "id": 230176985,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1615656572
    }
]