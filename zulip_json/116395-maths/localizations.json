[
    {
        "content": "<p>I'm confused by the recent refactor of localisations... everything is now about characteristic predicates, which is great. But we still need to know that localisations exist... did we accidentally throw away the construction?</p>",
        "id": 199465419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591088520
    },
    {
        "content": "<p>Or am I just blind and bad at searching...</p>",
        "id": 199465471,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591088534
    },
    {
        "content": "<p>I had the same thought. <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span></p>",
        "id": 199474551,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1591094958
    },
    {
        "content": "<p>Yeah we don't seem to have that, if anyone wants to play with one specific one though:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_rat_raction_map</span> <span class=\"o\">:</span> <span class=\"n\">fraction_map</span> <span class=\"bp\">ℤ</span> <span class=\"n\">ℚ</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">map_units&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">is_unit_iff_ne_zero</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"o\">(</span><span class=\"k\">begin</span>\n    <span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">submonoid</span><span class=\"bp\">.</span><span class=\"n\">mem_carrier</span><span class=\"o\">,</span> <span class=\"n\">mem_non_zero_divisors_iff_ne_zero</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">x_property</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">x_val</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">x_property</span><span class=\"o\">,</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">),</span>\n  <span class=\"n\">surj&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">use</span> <span class=\"o\">(</span><span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">denom</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">),</span> <span class=\"k\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">submonoid</span><span class=\"bp\">.</span><span class=\"n\">mem_carrier</span><span class=\"o\">,</span> <span class=\"n\">mem_non_zero_divisors_iff_ne_zero</span><span class=\"o\">],</span>\n        <span class=\"n\">exact</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_ne_zero_iff_pos</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">pos</span><span class=\"o\">,</span>\n      <span class=\"kn\">end</span><span class=\"bp\">⟩⟩</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">×</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">non_zero_divisors</span> <span class=\"bp\">ℤ</span><span class=\"o\">)),</span>\n      <span class=\"n\">change</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">denom</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">num</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mul_own_denom_eq_num</span><span class=\"o\">,</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_iff_exists&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">split</span><span class=\"bp\">;</span> <span class=\"n\">intro</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_one</span><span class=\"o\">,</span> <span class=\"n\">submonoid</span><span class=\"bp\">.</span><span class=\"n\">coe_one</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n      <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">exact_mod_cast</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">a_w</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">intro</span><span class=\"bp\">;</span>\n        <span class=\"n\">exact</span> <span class=\"n\">zero_ne_one</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">(</span><span class=\"n\">a_w</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"mi\">1</span>\n          <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">a_w</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">mul_zero</span> <span class=\"mi\">1</span><span class=\"o\">)),</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">eq_of_mul_eq_mul_right</span> <span class=\"n\">this</span><span class=\"o\">)</span> <span class=\"n\">a_h</span><span class=\"o\">,}</span>\n   <span class=\"kn\">end</span><span class=\"o\">,</span>\n   <span class=\"bp\">..</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast_ring_hom</span> <span class=\"n\">ℚ</span>\n  <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 199512882,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1591113050
    },
    {
        "content": "<p>But the construction used to be there...<br>\n<span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Thanks! PR!</p>",
        "id": 199519717,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591116035
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/localizations/near/199519717\">said</a>:</p>\n<blockquote>\n<p>But the construction used to be there...<br>\n<span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> Thanks! PR!</p>\n</blockquote>\n<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2921\">#2921</a> naming/location comments welcome!</p>",
        "id": 199530675,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1591121234
    },
    {
        "content": "<p>Thanks! I've left some comments</p>",
        "id": 199531341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591121551
    },
    {
        "content": "<p>We have a construction in <code>monoid_localization</code>.</p>",
        "id": 199531785,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591121739
    },
    {
        "content": "<p>It's called <code>submonoid.localization</code>. It works for rings too, don't know whether we have a proof.</p>",
        "id": 199532001,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1591121837
    },
    {
        "content": "<p>Aah, ok. And that can automagically be reused in, say <code>fraction_map</code>?</p>",
        "id": 199532007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591121839
    },
    {
        "content": "<p>I know the underlying type works for rings...</p>",
        "id": 199532034,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591121853
    },
    {
        "content": "<p>But I guess there will be some proof obligations</p>",
        "id": 199532052,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591121861
    },
    {
        "content": "<p>Sorry - it's coming back. I should have put it in the first PR; I had planned to open the second one quicker but things got in the way. I will open a little one with the old construction today.</p>",
        "id": 199534234,
        "sender_full_name": "Amelia Livingston",
        "timestamp": 1591122796
    },
    {
        "content": "<p>Great, thanks!</p>",
        "id": 199534955,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591123146
    }
]