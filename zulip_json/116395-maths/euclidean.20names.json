[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> I'm a bit worried that the long names in <code>euclidean/*</code> are hampering readability, because things now often wrap to multiple lines. What do you think of the following renamings (also on all other names that contain these substrings):</p>\n<ul>\n<li><code>orthogonal</code> → <code>ortho</code></li>\n<li><code>projection</code> → <code>proj</code></li>\n<li><code>circumcenter</code> → <code>ccenter</code></li>\n<li><code>circumradius</code> → <code>cradius</code></li>\n</ul>\n<p>Maybe there are other options out there as well.</p>",
        "id": 209776351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599828820
    },
    {
        "content": "<p>Out of context, I'm not a fan.<br>\nWhat are some problematic lines?</p>",
        "id": 209776675,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599829012
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/4087/files#diff-db3e8bc3ecf028041f199be03f316f16R645\">https://github.com/leanprover-community/mathlib/pull/4087/files#diff-db3e8bc3ecf028041f199be03f316f16R645</a><br>\nrandom example</p>",
        "id": 209776977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599829157
    },
    {
        "content": "<p>In this case, maybe <code>orthogonal_projection</code> could just be <code>projection</code>?</p>",
        "id": 209780669,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599831039
    },
    {
        "content": "<p>I don't have a strong opinion on exactly what changes. But I think that these wrapping lines are a bit problematic</p>",
        "id": 209780777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599831092
    },
    {
        "content": "<p>Is it too crazy to use <code>O</code> as a name component for <code>circumcenter</code>, <code>H</code> for <code>orthocenter</code>, etc.?</p>",
        "id": 209782593,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599832065
    },
    {
        "content": "<p>I think it's worth having a poll on that.</p>",
        "id": 209782735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599832123
    },
    {
        "content": "<p>why <code>O</code> and <code>H</code>?</p>",
        "id": 209783342,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1599832428
    },
    {
        "content": "<p>These are the traditional letters used for the points: <a href=\"https://en.wikipedia.org/wiki/Triangle_center#Classical_triangle_centers\">https://en.wikipedia.org/wiki/Triangle_center#Classical_triangle_centers</a></p>",
        "id": 209783535,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599832536
    },
    {
        "content": "<p>another possible compression from that line is <code>square</code> -&gt; <code>sq</code>--mathlib seems to use both and I can't think of another possible meaning of <code>sq</code></p>",
        "id": 209783948,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599832760
    },
    {
        "content": "<p>(<code>sq</code> is also used to abbreviate commutative square in the category theory library, but it's still a square)</p>",
        "id": 209784076,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599832822
    },
    {
        "content": "<p>Would you also use those names in the definitions themselves, or only for lemmas, and would <code>G</code> be used for <code>centroid</code> not just in the Euclidean context? For example, would <code>circumcenter_eq_centroid</code> (this is in namespace <code>affine.simplex</code>) end up as</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- The circumcenter of a 1-simplex equals its centroid. -/</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">O_eq_G</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">simplex</span> <span class=\"n\">ℝ</span> <span class=\"n\">P</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">O</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">G</span> <span class=\"n\">ℝ</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">points</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>or would only the name of the lemma change?</p>",
        "id": 209784279,
        "sender_full_name": "Joseph Myers",
        "timestamp": 1599832935
    },
    {
        "content": "<p>Everything is open for debate (-;</p>",
        "id": 209784328,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599832978
    },
    {
        "content": "<p>I was thinking only the lemma names would change, but I don't feel strongly about this</p>",
        "id": 209784341,
        "sender_full_name": "Reid Barton",
        "timestamp": 1599832983
    },
    {
        "content": "<p>I think with good docstrings, and namespaced definitions, we could even have 1-letter definitions in this part of mathlib.</p>",
        "id": 209784360,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599833000
    },
    {
        "content": "<p><code>standard_symbol.O</code></p>",
        "id": 209784998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599833347
    },
    {
        "content": "<p>Oh, <code>simplex.O</code> even better!</p>",
        "id": 209785036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599833368
    },
    {
        "content": "<p><code>standard_symbol.O</code> is already taken by orthogonal matrices</p>",
        "id": 209785039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599833369
    },
    {
        "content": "<p>I think the issue is only in lemma names, because they use several def names. But of course changing the name from def to lemma is inconsistent <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span>.</p>",
        "id": 209788176,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1599834798
    },
    {
        "content": "<p>Yep, this is why definition names should be short</p>",
        "id": 209790320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599835871
    },
    {
        "content": "<p>On the subject of long expressions, is there a sensible way to abbreviate terms like <code>dist p₁ s.circumcenter * dist p₁ s.circumcenter</code>? <code>let d = dist p₁ s.circumcenter in d * d</code>? Does mathlib have a <code>square</code> function?</p>",
        "id": 209796601,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599838591
    },
    {
        "content": "<p><code>d ^ 2</code>?</p>",
        "id": 209796658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599838615
    },
    {
        "content": "<p>That then needs an extra lemma to work with, right? <code>pow_2_eq_mul</code> or something</p>",
        "id": 209796965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1599838767
    },
    {
        "content": "<p>so?</p>",
        "id": 209800110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599840201
    },
    {
        "content": "<p>I would put more emphasis on keeping theorem statement size down rather than not ever needing to rewrite</p>",
        "id": 209800221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1599840243
    },
    {
        "content": "<p>So... shall we use <code>H</code> and <code>O</code>? I like the idea. (I'm fine with making those names protected, if people fear name clashes otherwise.)</p>",
        "id": 209866348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599889473
    },
    {
        "content": "<p><span aria-label=\"ping pong\" class=\"emoji emoji-1f3d3\" role=\"img\" title=\"ping pong\">:ping_pong:</span></p>",
        "id": 211134880,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1600956012
    },
    {
        "content": "<p>/poll short euclidean names<br>\nLet's keep <code>orthogonal_projection</code>, <code>circumcenter</code>, and <code>monge_point</code>, etc...<br>\nLet's change to <code>euclidean.H</code>, <code>euclidean.O</code>, and <code>proj</code>, etc... (with long names in the docstrings)</p>",
        "id": 212266616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601883211
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> you've participated in the above discussion. Please join the vote. (Others are welcome too!)</p>",
        "id": 212266860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601883380
    },
    {
        "content": "<p>E.g., <code>triangle</code> can have many one-letter <code>def</code>s in its namespace.</p>",
        "id": 212271175,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1601886554
    },
    {
        "content": "<p>I think that most of these names are already in very sensible namespaces. That alone will not solve the issue of having lemma names that are &gt; 50 chars.</p>",
        "id": 212284178,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601895804
    },
    {
        "content": "<p><code>euclidean_projection.orthogonal_projection</code> is definitely not in a useful namespace</p>",
        "id": 212285492,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1601896679
    },
    {
        "content": "<p>Sure, that's true.<br>\nBut I do think that this is orthogonal to getting shorter lemma names by having shorter definition names.</p>",
        "id": 212286421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601897325
    },
    {
        "content": "<p>Also, not that for bundled morphisms, dot notation doesn't help.</p>",
        "id": 212286449,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601897350
    }
]