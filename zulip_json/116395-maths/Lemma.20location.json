[
    {
        "content": "<p>This lemma doesn't seem to be in mathlib, but I'm not sure where it should go. Any suggestions?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[to_additive]</span> <span class=\"kd\">lemma</span> <span class=\"n\">mul_eq_mul_iff_eq_and_eq</span> <span class=\"o\">{</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ordered_cancel_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">N</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hac</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hbd</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">d</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">congr_arg2</span> <span class=\"o\">(</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"n\">h.1</span> <span class=\"n\">h.2</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">eq_or_lt_of_le</span> <span class=\"n\">hac</span> <span class=\"k\">with</span> <span class=\"n\">hac</span> <span class=\"n\">hac</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hac</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">hac</span><span class=\"o\">,</span> <span class=\"n\">mul_left_cancel</span> <span class=\"n\">h</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">cases</span> <span class=\"n\">eq_or_lt_of_le</span> <span class=\"n\">hbd</span> <span class=\"k\">with</span> <span class=\"n\">hbd</span> <span class=\"n\">hbd</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hbd</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">mul_right_cancel</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">hbd</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"o\">((</span><span class=\"n\">mul_lt_mul'''</span> <span class=\"n\">hac</span> <span class=\"n\">hbd</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elim</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 266078963,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1640472151
    },
    {
        "content": "<p>Close to the other <code>ordered_cancel_comm_monoid</code> lemmas, in <code>algebra.order.monoid_lemmas</code>.</p>",
        "id": 266079812,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640473657
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 266081060,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1640475952
    },
    {
        "content": "<p>There is something funny: I would have expected that the lemma was missing some exceptional cases where one of the variables is zero, but of course, if it formalizes, it has to be true as stated! (This reminds me of sth that happened to <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> in real life.)</p>",
        "id": 266166803,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1640605754
    },
    {
        "content": "<p>There is no zero because it's <code>cancel_</code>, which means you can cancel any multiplication: <code>a * b = a * c → b = c</code></p>",
        "id": 266167071,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640606064
    }
]