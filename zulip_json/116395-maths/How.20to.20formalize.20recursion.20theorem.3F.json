[
    {
        "content": "<p>I have defined natural numbers with Peano axioms, rather than inductive types. Any hint on how to formalize natural number recursion theorem from this framework?</p>\n<p>The reference book I got is <code>Elements of Set Theory</code>, in which the recursion theorem is proved by taking union of functions. This operation doesn't seem to be very native in type theory language. Is there any other way to formalize it?</p>",
        "id": 216548611,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605226525
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"352122\">@Rui Liu</span> Could you share some code? That will make it easier to help you.</p>",
        "id": 216573198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605250159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20formalize.20recursion.20theorem.3F/near/216573198\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"352122\">Rui Liu</span> Could you share some code? That will make it easier to help you.</p>\n</blockquote>\n<p>I have defined the following code for Peano axioms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">Nat</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">Zero</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">constant</span> <span class=\"n\">Successor</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">constant</span> <span class=\"n\">AxiomNat1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Successor</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">Zero</span>\n<span class=\"kd\">constant</span> <span class=\"n\">AxiomNat2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Successor</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Successor</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n<span class=\"kd\">constant</span> <span class=\"n\">AxiomNat3</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Zero</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">Successor</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n</code></pre></div>\n<p>Now I would like to prove the recursion theorem, which takes <code>a:A</code> and <code>f: A → A</code>, to get a <em>unique</em> recursion function <code>g</code> on <code>Nat</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">recursion</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">Π</span><span class=\"n\">f</span><span class=\"o\">:(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">∃</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">Zero</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Successor</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n<p>I know a proof in documented in \"Elements of Set Theory\" but that's too heavily based on sets and feel unnatural to do in type theory (not even sure if it will work). Is there a more natural way to prove it in type theory that only uses the axioms above without resorting to inductive types?</p>",
        "id": 216603537,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605270688
    },
    {
        "content": "<p>I think you can approach the problem like this:</p>\n<ul>\n<li>there's no way we can produce the required function <code>g</code> directly, so we have to use (unique) choice to obtain it from its graph</li>\n<li>so let's try to produce the relation <code>r : Nat -&gt; A -&gt; Prop</code> which is supposed to be the graph of <code>g</code></li>\n<li>now if we used the inductive type <code>nat</code>, we could define <code>r</code> as an inductive predicate with two constructors <code>r 0 a</code> and <code>r n x -&gt; r (n+1) (f x)</code></li>\n<li>by a general procedure, we can replace the inductive description of this predicate by the following \"impredicative\" one: take the intersection of all relations <code>s</code> satisfying <code>s 0 a</code> and <code>forall n x, s n x -&gt; s (n + 1) (f x)</code>, and call it <code>r</code></li>\n<li>now try to prove by induction on <code>n</code> that this <code>r</code> is the graph of a function <code>g</code></li>\n<li>since it satisfies the conditions <code>r 0 a</code> and <code>r n x -&gt; r (n+1) (f x)</code> (basically by definition) we conclude the function <code>g</code> will satisfy the desired recurrence relation.</li>\n</ul>",
        "id": 216611777,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605275050
    },
    {
        "content": "<p>in the next to last point by \"is the graph of a function\" I just mean that for each <code>n</code>, there is a unique <code>y</code> such that <code>r n y</code></p>",
        "id": 216612130,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605275216
    },
    {
        "content": "<p>Probably you could approximate the relation <code>r</code> \"from below\" rather than \"from above\", as well</p>",
        "id": 216613139,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605275651
    },
    {
        "content": "<p>If you want a minimal addition to your setup that allows you to construct such functions, I suggest adding a <code>constant the : unique A -&gt; A</code></p>",
        "id": 216627096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605281609
    },
    {
        "content": "<p>or possibly even a first order version of that to avoid needing subtypes</p>",
        "id": 216627203,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605281649
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20formalize.20recursion.20theorem.3F/near/216611777\">said</a>:</p>\n<blockquote>\n<p>I think you can approach the problem like this:</p>\n<ul>\n<li>there's no way we can produce the required function <code>g</code> directly, so we have to use (unique) choice to obtain it from its graph</li>\n<li>so let's try to produce the relation <code>r : Nat -&gt; A -&gt; Prop</code> which is supposed to be the graph of <code>g</code></li>\n<li>now if we used the inductive type <code>nat</code>, we could define <code>r</code> as an inductive predicate with two constructors <code>r 0 a</code> and <code>r n x -&gt; r (n+1) (f x)</code></li>\n<li>by a general procedure, we can replace the inductive description of this predicate by the following \"impredicative\" one: take the intersection of all relations <code>s</code> satisfying <code>s 0 a</code> and <code>forall n x, s n x -&gt; s (n + 1) (f x)</code>, and call it <code>r</code></li>\n<li>now try to prove by induction on <code>n</code> that this <code>r</code> is the graph of a function <code>g</code></li>\n<li>since it satisfies the conditions <code>r 0 a</code> and <code>r n x -&gt; r (n+1) (f x)</code> (basically by definition) we conclude the function <code>g</code> will satisfy the desired recurrence relation.</li>\n</ul>\n</blockquote>\n<p>How do you define \"intersection of all relations\", when we're working in a synthetic theory rather than reducing everything to sets?</p>",
        "id": 216671131,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605300645
    },
    {
        "content": "<p>Intersection meaning \"and\", if you will. The relations are all effectively subsets of <code>Nat \\x A</code>.</p>",
        "id": 216671358,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605300746
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">\\</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"bp\">\\</span><span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"bp\">/\\</span> <span class=\"bp\">\\</span><span class=\"n\">all</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 216671527,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605300838
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20formalize.20recursion.20theorem.3F/near/216671527\">said</a>:</p>\n<blockquote>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">\\</span><span class=\"n\">lam</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n<span class=\"bp\">\\</span><span class=\"n\">all</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">A</span> <span class=\"bp\">-&gt;</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"mi\">0</span> <span class=\"n\">a</span> <span class=\"bp\">/\\</span> <span class=\"bp\">\\</span><span class=\"n\">all</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">x</span>\n</code></pre></div>\n</blockquote>\n<p>Thanks and I'm trying out this approach. Intuitively with this definition I should be able to prove:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"mi\">0</span> <span class=\"n\">a</span>\n<span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"k\">forall</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>These properties are directly provable when we define <code>r</code> as intersection in set theory. However in type theory, I managed to prove <code>h0</code>, but I don't see how to prove <code>h1</code> yet. Any ideas?</p>",
        "id": 216750436,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605388335
    },
    {
        "content": "<p>I think just expanding everything and apply hypotheses will do it</p>",
        "id": 216750530,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605388511
    },
    {
        "content": "<p>we know every \"good\" <code>s</code> (satisfying the inner condition) satisfies <code>s n x</code>, and we need to show every good <code>s</code> satisfies <code>s (n+1) (f x)</code>, but by definition, for a good <code>s</code>, <code>s n x</code> implies <code>s (n+1) (f x)</code></p>",
        "id": 216750676,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605388753
    },
    {
        "content": "<p>in general, any set theory that doesn't rely on a global membership relation (like ordinals) should translate directly to type theory</p>",
        "id": 216750873,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605389062
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20formalize.20recursion.20theorem.3F/near/216750873\">said</a>:</p>\n<blockquote>\n<p>in general, any set theory that doesn't rely on a global membership relation (like ordinals) should translate directly to type theory</p>\n</blockquote>\n<p>I might missed something ... but the following code doesn't type check:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">constant</span> <span class=\"n\">Nat</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">Zero</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">constant</span> <span class=\"n\">Succ</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">constant</span> <span class=\"n\">AxiomNat1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Succ</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">Zero</span>\n<span class=\"kd\">constant</span> <span class=\"n\">AxiomNat2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Succ</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n<span class=\"kd\">constant</span> <span class=\"n\">AxiomNat3</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Zero</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"kd\">constant</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span>\n<span class=\"kd\">def</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">),</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">Zero</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">Zero</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">Zero</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">and.elim_left</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">Zero</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">and.elim_right</span> <span class=\"n\">h'</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n</code></pre></div>",
        "id": 216750995,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605389324
    },
    {
        "content": "<p>You're using term mode = challenge mode.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">Zero</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"kd\">begin</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h'.2</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n    <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216751078,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605389481
    },
    {
        "content": "<p>Or in term mode, it's easier if you keep the proof type checking aside from holes (<code>_</code>).</p>",
        "id": 216751269,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605389651
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> </p>\n<p>Thank you! I just spent like an hour staring at screen...</p>\n<blockquote>\n<p>Or in term mode, it's easier if you keep the proof type checking aside from holes (_).</p>\n</blockquote>\n<p>How do you do this?</p>\n<p>Also you mentioned that it's also possible to approximate from below, can you elaborate how would you do with that strategy?</p>",
        "id": 216751886,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605390342
    },
    {
        "content": "<p>e.g. after all the <code>assume</code>s, put <code>_</code></p>",
        "id": 216752020,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605390477
    },
    {
        "content": "<p>then only replace the <code>_</code> by some other term with a hole that still type checks, like <code>h'.2 _</code></p>",
        "id": 216752072,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605390500
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352122\">Rui Liu</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20formalize.20recursion.20theorem.3F/near/216751886\">said</a>:</p>\n<blockquote>\n<p>Also you mentioned that it's also possible to approximate from below, can you elaborate how would you do with that strategy?</p>\n</blockquote>\n<p>Something like: take the union of all relations <code>s</code> such that</p>\n<ul>\n<li>if <code>s 0 x</code>, then <code>x = a</code></li>\n<li>if <code>s (n+1) y</code>, then there exists <code>x</code> with <code>s n x</code> and <code>y = f x</code></li>\n</ul>",
        "id": 216752451,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605390908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20formalize.20recursion.20theorem.3F/near/216752451\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"352122\">Rui Liu</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20formalize.20recursion.20theorem.3F/near/216751886\">said</a>:</p>\n<blockquote>\n<p>Also you mentioned that it's also possible to approximate from below, can you elaborate how would you do with that strategy?</p>\n</blockquote>\n<p>Something like: take the union of all relations <code>s</code> such that</p>\n<ul>\n<li>if <code>s 0 x</code>, then <code>x = a</code></li>\n<li>if <code>s (n+1) y</code>, then there exists <code>x</code> with <code>s n x</code> and <code>y = f x</code></li>\n</ul>\n</blockquote>\n<p>Sorry but how do you do union of relations in type theory?</p>",
        "id": 216752789,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605391418
    },
    {
        "content": "<p><code>\\exists</code></p>",
        "id": 216752888,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605391578
    },
    {
        "content": "<p>I don't think this proof works, because to show the relation is not trivial you have to first prove the theorem</p>",
        "id": 216753241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605392200
    },
    {
        "content": "<p>Thanks for the help from everyone! I finally got this theorem formalized using <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> 's idea! This is so much more involved than informal proof, since I need to find out all the details to derive a simple property and find the correct way to invoke them in type theory. This makes me realize how much implicit formula manipulation that's happening in mind without realizing them.... Also, after several levels deep inside the proof, I don't see a good way to name the proof terms and bookkeeping them any more... All the important steps and non-important steps are all listed together, which doesn't give a good high level overview. I'd like to try tactics mode at some point and I don't know if they will solve some of the problems above. </p>\n<p>Here's the proof (also here a reference on the proof <a href=\"http://math.iisc.ernet.in/~gadgil/BasicAnalysis/blog/2016/01/08/natural-numbers-axioms/\">http://math.iisc.ernet.in/~gadgil/BasicAnalysis/blog/2016/01/08/natural-numbers-axioms/</a>) for anyone interested:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">open</span> <span class=\"n\">classical</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">Nat</span><span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">Zero</span><span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">constant</span> <span class=\"n\">Succ</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">constant</span> <span class=\"n\">AxiomNat1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Succ</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">Zero</span>\n<span class=\"kd\">constant</span> <span class=\"n\">AxiomNat2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">m</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Succ</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n<span class=\"kd\">constant</span> <span class=\"n\">AxiomNat3</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"n\">Zero</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Unique</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"bp\">Π</span> <span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)(</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span><span class=\"n\">y</span><span class=\"o\">:</span><span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"kd\">def</span> <span class=\"n\">UniqueIntro</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">Unique</span> <span class=\"n\">P</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">exists.intro</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"n\">h0</span> <span class=\"n\">h1</span><span class=\"o\">)</span>\n<span class=\"kd\">constant</span> <span class=\"n\">UniqueObj</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"n\">Unique</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">S</span>\n<span class=\"kd\">constant</span> <span class=\"n\">UniqueProp</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Unique</span> <span class=\"n\">P</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">UniqueObj</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kd\">def</span> <span class=\"n\">UniqueEq</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">},</span> <span class=\"n\">Unique</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">P</span><span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Unique</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">ha</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hb</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">exists.elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span>\n        <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n        <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"n\">P</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"k\">let</span> <span class=\"n\">ea</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">and.elim_right</span> <span class=\"n\">h</span> <span class=\"n\">a</span> <span class=\"n\">ha</span> <span class=\"k\">in</span>\n        <span class=\"k\">let</span> <span class=\"n\">eb</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">and.elim_right</span> <span class=\"n\">h</span> <span class=\"n\">b</span> <span class=\"n\">hb</span> <span class=\"k\">in</span>\n        <span class=\"o\">(</span><span class=\"n\">eq.trans</span> <span class=\"n\">ea</span> <span class=\"o\">(</span><span class=\"n\">eq.symm</span> <span class=\"n\">eb</span><span class=\"o\">))</span>\n    <span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NotAnd</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">),</span>\n    <span class=\"n\">by_cases</span> <span class=\"o\">(</span>\n        <span class=\"k\">assume</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n        <span class=\"n\">by_cases</span> <span class=\"o\">(</span>\n            <span class=\"k\">assume</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n            <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"n\">p</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"n\">h</span>\n        <span class=\"o\">)</span> <span class=\"o\">(</span>\n            <span class=\"k\">assume</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n            <span class=\"n\">or.intro_right</span> <span class=\"n\">_</span> <span class=\"n\">q</span>\n        <span class=\"o\">)</span>\n    <span class=\"o\">)</span> <span class=\"o\">(</span>\n        <span class=\"k\">assume</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n        <span class=\"n\">or.intro_left</span> <span class=\"n\">_</span> <span class=\"n\">p</span>\n    <span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NotOr</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">np</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or.intro_left</span> <span class=\"n\">_</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">nq</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">or.intro_right</span> <span class=\"n\">_</span> <span class=\"n\">q</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n    <span class=\"n\">and.intro</span> <span class=\"n\">np</span> <span class=\"n\">nq</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NotPOrQ</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">p</span><span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">,</span>\n    <span class=\"n\">or.elim</span> <span class=\"n\">h</span> <span class=\"o\">(</span>\n        <span class=\"k\">assume</span> <span class=\"n\">notP</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">P</span><span class=\"o\">,</span>\n        <span class=\"n\">absurd</span> <span class=\"n\">p</span> <span class=\"n\">notP</span>\n    <span class=\"o\">)</span> <span class=\"o\">(</span>\n        <span class=\"k\">assume</span> <span class=\"n\">q</span><span class=\"o\">:</span> <span class=\"n\">Q</span><span class=\"o\">,</span>\n        <span class=\"n\">q</span>\n    <span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NeSymm</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hh</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">eq.symm</span> <span class=\"n\">hh</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NeNot</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">},</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">by_contradiction</span> <span class=\"o\">(</span>\n        <span class=\"k\">assume</span> <span class=\"n\">nh</span><span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n        <span class=\"n\">h</span> <span class=\"n\">nh</span>\n    <span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Recursion</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">,</span> <span class=\"bp\">Π</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">Π</span><span class=\"n\">f</span><span class=\"o\">:(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">∃</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">Zero</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">assume</span> <span class=\"n\">A</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"k\">assume</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">r</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">),</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">Zero</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">x</span>\n<span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">r0</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">Zero</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">Zero</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">and.elim_left</span> <span class=\"n\">h</span>\n<span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">r1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">s</span><span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h'</span><span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"n\">Zero</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"n\">and.elim_right</span> <span class=\"n\">h'</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"n\">h'</span><span class=\"o\">)</span>\n<span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">unique_zero</span><span class=\"o\">:</span> <span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">Zero</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">unique</span><span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">Zero</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n        <span class=\"k\">assume</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span>\n        <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">Zero</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n        <span class=\"n\">by_contradiction</span><span class=\"o\">(</span>\n            <span class=\"k\">assume</span> <span class=\"n\">b_ne_a</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n            <span class=\"k\">let</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n                <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n                <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Zero</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n            <span class=\"k\">in</span>\n            <span class=\"k\">let</span> <span class=\"n\">r'0</span> <span class=\"o\">:</span> <span class=\"n\">r'</span> <span class=\"n\">Zero</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n                <span class=\"n\">and.intro</span> <span class=\"n\">r0</span> <span class=\"o\">(</span><span class=\"n\">or.intro_right</span> <span class=\"n\">_</span> <span class=\"n\">b_ne_a</span><span class=\"o\">)</span>\n            <span class=\"k\">in</span>\n            <span class=\"k\">let</span> <span class=\"n\">r'1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n                <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>\n                <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n                <span class=\"k\">assume</span> <span class=\"n\">r'_n_x</span><span class=\"o\">:</span> <span class=\"n\">r'</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n                <span class=\"k\">let</span> <span class=\"n\">r_n_x</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">and.elim_left</span> <span class=\"n\">r'_n_x</span> <span class=\"k\">in</span>\n                <span class=\"k\">let</span> <span class=\"n\">r_succ_n_f_x</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r1</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">r_n_x</span> <span class=\"k\">in</span>\n                <span class=\"n\">and.intro</span> <span class=\"n\">r_succ_n_f_x</span> <span class=\"o\">(</span><span class=\"n\">or.intro_left</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">NeSymm</span> <span class=\"o\">(</span><span class=\"n\">AxiomNat1</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n            <span class=\"k\">in</span>\n            <span class=\"k\">let</span> <span class=\"n\">r'_zero_b</span> <span class=\"o\">:</span> <span class=\"n\">r'</span> <span class=\"n\">Zero</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n                <span class=\"n\">h</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"n\">r'0</span> <span class=\"n\">r'1</span><span class=\"o\">)</span>\n            <span class=\"k\">in</span>\n            <span class=\"n\">or.elim</span> <span class=\"o\">(</span><span class=\"n\">and.elim_right</span> <span class=\"n\">r'_zero_b</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Zero</span> <span class=\"bp\">≠</span> <span class=\"n\">Zero</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"n\">Zero</span><span class=\"o\">))</span>\n                <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n        <span class=\"o\">)</span>\n    <span class=\"k\">in</span>\n    <span class=\"n\">UniqueIntro</span> <span class=\"n\">a</span> <span class=\"n\">r0</span> <span class=\"n\">unique</span>\n<span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">unique_succ</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">UniqueObj</span> <span class=\"n\">h</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">r_n_x</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">UniqueProp</span> <span class=\"n\">h</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">r_succ_n_f_x</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r1</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">r_n_x</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">unique</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n        <span class=\"k\">assume</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span>\n        <span class=\"k\">assume</span> <span class=\"n\">r_succ_n_b</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n        <span class=\"n\">by_contradiction</span><span class=\"o\">(</span>\n            <span class=\"k\">assume</span> <span class=\"n\">b_ne_x</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n            <span class=\"k\">let</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n                <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">n'</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x'</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n                <span class=\"n\">r</span> <span class=\"n\">n'</span> <span class=\"n\">x'</span> <span class=\"bp\">∧</span> <span class=\"o\">((</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"n\">n'</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">x'</span><span class=\"o\">)</span>\n            <span class=\"k\">in</span>\n            <span class=\"k\">let</span> <span class=\"n\">r'0</span> <span class=\"o\">:</span> <span class=\"n\">r'</span> <span class=\"n\">Zero</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n                <span class=\"n\">and.intro</span> <span class=\"n\">r0</span> <span class=\"o\">(</span><span class=\"n\">or.intro_left</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">AxiomNat1</span> <span class=\"n\">n</span><span class=\"o\">))</span>\n            <span class=\"k\">in</span>\n            <span class=\"k\">let</span> <span class=\"n\">r'1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n'</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">)(</span><span class=\"n\">x'</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">r'</span> <span class=\"n\">n'</span> <span class=\"n\">x'</span> <span class=\"bp\">→</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n                <span class=\"k\">assume</span> <span class=\"n\">n'</span><span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span>\n                <span class=\"k\">assume</span> <span class=\"n\">x'</span><span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n                <span class=\"k\">assume</span> <span class=\"n\">r'_n'_x'</span><span class=\"o\">:</span> <span class=\"n\">r'</span> <span class=\"n\">n'</span> <span class=\"n\">x'</span><span class=\"o\">,</span>\n                <span class=\"k\">let</span> <span class=\"n\">r_n'_x'</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">n'</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"n\">and.elim_left</span> <span class=\"n\">r'_n'_x'</span> <span class=\"k\">in</span>\n                <span class=\"k\">let</span> <span class=\"n\">r_succ_n'_f_x'</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r1</span> <span class=\"n\">n'</span> <span class=\"n\">x'</span> <span class=\"n\">r_n'_x'</span> <span class=\"k\">in</span>\n                <span class=\"k\">let</span> <span class=\"n\">r'_succ_n'_f_x'</span><span class=\"o\">:</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x'</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">by_contradiction</span><span class=\"o\">(</span>\n                    <span class=\"k\">assume</span> <span class=\"n\">hh</span><span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x'</span><span class=\"o\">)),</span>\n                    <span class=\"k\">let</span> <span class=\"n\">hh'</span><span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"o\">((</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n'</span><span class=\"o\">))</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x'</span><span class=\"o\">)))</span> <span class=\"o\">:=</span> <span class=\"n\">NotOr</span> <span class=\"o\">(</span><span class=\"n\">NotPOrQ</span> <span class=\"o\">(</span><span class=\"n\">NotAnd</span> <span class=\"n\">hh</span><span class=\"o\">)</span> <span class=\"n\">r_succ_n'_f_x'</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n                    <span class=\"k\">let</span> <span class=\"n\">eq1</span><span class=\"o\">:</span> <span class=\"n\">Succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Succ</span> <span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"n\">NeNot</span> <span class=\"o\">(</span><span class=\"n\">and.elim_left</span> <span class=\"n\">hh'</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n                    <span class=\"k\">let</span> <span class=\"n\">eq2</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"n\">NeNot</span> <span class=\"o\">(</span><span class=\"n\">and.elim_right</span> <span class=\"n\">hh'</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n                    <span class=\"k\">let</span> <span class=\"n\">eq3</span><span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">n'</span> <span class=\"o\">:=</span> <span class=\"n\">AxiomNat2</span> <span class=\"n\">n</span> <span class=\"n\">n'</span> <span class=\"o\">(</span><span class=\"n\">eq1</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n                    <span class=\"k\">let</span> <span class=\"n\">r_n_x'</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"n\">eq.subst</span> <span class=\"o\">(</span><span class=\"n\">eq.symm</span> <span class=\"n\">eq3</span><span class=\"o\">)</span> <span class=\"n\">r_n'_x'</span> <span class=\"k\">in</span>\n                    <span class=\"k\">let</span> <span class=\"n\">eq4</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"n\">UniqueEq</span> <span class=\"n\">h</span> <span class=\"n\">r_n_x</span> <span class=\"n\">r_n_x'</span> <span class=\"k\">in</span>\n                    <span class=\"k\">let</span> <span class=\"n\">eq5</span><span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x'</span> <span class=\"o\">:=</span> <span class=\"n\">congr_arg</span> <span class=\"n\">f</span> <span class=\"n\">eq4</span> <span class=\"k\">in</span>\n                    <span class=\"n\">b_ne_x</span> <span class=\"o\">(</span><span class=\"n\">eq.trans</span> <span class=\"n\">eq2</span> <span class=\"o\">(</span><span class=\"n\">eq.symm</span> <span class=\"n\">eq5</span><span class=\"o\">))</span>\n                <span class=\"o\">)</span> <span class=\"k\">in</span>\n                <span class=\"n\">r'_succ_n'_f_x'</span>\n            <span class=\"k\">in</span>\n            <span class=\"k\">let</span> <span class=\"n\">r'_false</span> <span class=\"o\">:</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n                <span class=\"n\">r_succ_n_b</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"n\">r'0</span> <span class=\"n\">r'1</span><span class=\"o\">)</span>\n            <span class=\"k\">in</span>\n            <span class=\"n\">or.elim</span> <span class=\"o\">(</span><span class=\"n\">and.elim_right</span> <span class=\"n\">r'_false</span><span class=\"o\">)</span>\n                <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">Succ</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)))</span>\n                <span class=\"o\">(</span><span class=\"k\">assume</span> <span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">eq.refl</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n        <span class=\"o\">)</span>\n    <span class=\"k\">in</span>\n    <span class=\"n\">UniqueIntro</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">r_succ_n_f_x</span> <span class=\"n\">unique</span>\n<span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">unique_all</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"n\">AxiomNat3</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"n\">unique_zero</span> <span class=\"n\">unique_succ</span><span class=\"o\">)</span>\n<span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">UniqueObj</span> <span class=\"o\">(</span><span class=\"n\">unique_all</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"n\">g</span> <span class=\"n\">Zero</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n    <span class=\"k\">let</span> <span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">Zero</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">Zero</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">UniqueProp</span> <span class=\"n\">unique_zero</span> <span class=\"k\">in</span>\n    <span class=\"n\">UniqueEq</span> <span class=\"n\">unique_zero</span> <span class=\"n\">h</span> <span class=\"n\">r0</span>\n<span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">),</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">Nat</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">h0</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">UniqueProp</span> <span class=\"o\">(</span><span class=\"n\">unique_all</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">r1</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">UniqueProp</span> <span class=\"o\">(</span><span class=\"n\">unique_all</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"k\">in</span>\n    <span class=\"n\">UniqueEq</span> <span class=\"o\">(</span><span class=\"n\">unique_all</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"n\">h0</span> <span class=\"n\">h1</span>\n<span class=\"k\">in</span>\n<span class=\"n\">exists.intro</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">and.intro</span> <span class=\"n\">h0</span> <span class=\"n\">h1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 216798695,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605454962
    },
    {
        "content": "<p>You <em>definitely</em> want to try either proper term mode or tactic mode!</p>",
        "id": 216803764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605461684
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> What's <strong>proper</strong> term mode?</p>",
        "id": 216805696,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605463735
    },
    {
        "content": "<p>I guess Kevin means a far more concise version of term mode. Using things like <code>⟨a, b⟩</code> instead of <code>and.intro a b</code>, <code>h.2</code> instead of <code>and.elim_right h</code>, <code>λ n x h s h',</code> instead of five lines of <code>assume</code>.</p>",
        "id": 216806147,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605464463
    },
    {
        "content": "<p>This proof looks like some kind of compiler intermediate language where there are only three constructs left--<code>assume</code>, <code>let</code> and function application.</p>",
        "id": 216806167,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605464522
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">h1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h'.2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">h</span> <span class=\"n\">_</span> <span class=\"bp\">$</span> <span class=\"n\">h'</span>\n</code></pre></div>",
        "id": 216806229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605464617
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">NeNot</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">},</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">finish</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216806347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605464777
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">NeSymm</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">A</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">A</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">library_search</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216806356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605464801
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">NotPOrQ</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">tauto</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216806368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605464846
    },
    {
        "content": "<p>(the latter three only work with <code>import tactic</code> at the top of your file, and working in a project with mathlib as a dependency)</p>",
        "id": 216806379,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605464881
    },
    {
        "content": "<p>I guess maybe part of the exercise was to use almost nothing even from the core library.</p>",
        "id": 216806418,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605464890
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">NotPOrQ</span>  <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">contradiction</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">assumption</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216806494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605465046
    },
    {
        "content": "<p>Actually I think starting out with this style can be good if you have the stomach for it, because then as you learn more (syntax, library functions, tactics) you can understand how they work at this level.</p>",
        "id": 216806496,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605465051
    },
    {
        "content": "<p>Clearly Jeremy thinks the same way, or he wouldn't have written TPIL like that.</p>",
        "id": 216806502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605465077
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352122\">Rui Liu</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20formalize.20recursion.20theorem.3F/near/216805696\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> What's <strong>proper</strong> term mode?</p>\n</blockquote>\n<p>Just like in math, \"proper\" = \"compact\" :)</p>",
        "id": 216807656,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605466236
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> That's short <span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span> , what's good resource to learn more about tactics and more utilities? I know this <a href=\"https://leanprover.github.io/theorem_proving_in_lean/tactics.html\">https://leanprover.github.io/theorem_proving_in_lean/tactics.html</a> , any more?</p>\n<blockquote>\n<p>I guess maybe part of the exercise was to use almost nothing even from the core library.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> That was indeed the intention. I started to learn about type theory, then got interested in how to formalize maths in type theory. So I was deliberately not using any tools.</p>\n<p>Btw, how do you manage proof term variables? I was struggling to give sensible names to it. Or is it when you're using more advanced tactic modes, you usually don't need to write proof variables?</p>",
        "id": 216808229,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605466905
    },
    {
        "content": "<p>More tactics here: <a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html\">https://leanprover-community.github.io/mathlib_docs/tactics.html</a> . But many of these tactics need the maths library <code>mathlib</code>.</p>",
        "id": 216809983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605469320
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"352122\">Rui Liu</span> <a href=\"#narrow/stream/116395-maths/topic/How.20to.20formalize.20recursion.20theorem.3F/near/216808229\">said</a>:</p>\n<blockquote>\n<p>Btw, how do you manage proof term variables? I was struggling to give sensible names to it. Or is it when you're using more advanced tactic modes, you usually don't need to write proof variables?</p>\n</blockquote>\n<p>You can inline the use of a variable if it appears only once. That way you only have to focus on the \"interesting\" subgoals. In tactic mode, if you use <code>have</code> without a name it gets the default name <code>this</code>, which is also useful if your proof is somewhat linear and you just keep shadowing the name</p>",
        "id": 216818788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605480215
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"352122\">@Rui Liu</span> Here's a conversion of your proof to tactic style (keeping the original proof structure, i.e. no fancy tactics like <code>finish</code> or even <code>rw</code>). I have also tried to use mathlib style elsewhere.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kd\">constant</span> <span class=\"n\">Nat</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"kd\">constant</span> <span class=\"n\">Zero</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">constant</span> <span class=\"n\">Succ</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">Nat</span>\n<span class=\"kd\">constant</span> <span class=\"n\">AxiomNat1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">Succ</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">Zero</span>\n<span class=\"kd\">constant</span> <span class=\"n\">AxiomNat2</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Succ</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">Succ</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span>\n<span class=\"kd\">constant</span> <span class=\"n\">AxiomNat3</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">Zero</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">n</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">Unique</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">UniqueIntro</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Unique</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">h0</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">⟩</span>\n<span class=\"kd\">constant</span> <span class=\"n\">UniqueObj</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">Unique</span> <span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">S</span>\n<span class=\"kd\">constant</span> <span class=\"n\">UniqueProp</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Unique</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">UniqueObj</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">UniqueEq</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">Unique</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"k\">in</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"n\">_</span> <span class=\"n\">ha</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"n\">_</span> <span class=\"n\">hb</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NotAnd</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_and_distrib.1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NotOr</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">not_or_distrib.1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NotPOrQ</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"n\">Q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">P</span> <span class=\"bp\">∨</span> <span class=\"n\">Q</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">or.neg_resolve_left</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NeSymm</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">ne.symm</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">NeNot</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"n\">not_not.1</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">Recursion</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"n\">Zero</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">,</span>\n      <span class=\"n\">s</span> <span class=\"n\">Zero</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">s</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">r0</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">Zero</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h.1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">r1</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"n\">h'</span><span class=\"o\">,</span> <span class=\"n\">h'.2</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">s</span> <span class=\"n\">h'</span><span class=\"o\">),</span>\n  <span class=\"k\">suffices</span> <span class=\"n\">hu</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">Unique</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">UniqueObj</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">pg</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">UniqueProp</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"n\">n</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">UniqueEq</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"n\">Zero</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pg</span> <span class=\"n\">Zero</span><span class=\"o\">)</span> <span class=\"n\">r0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">UniqueEq</span> <span class=\"o\">(</span><span class=\"n\">hu</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">pg</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">r1</span> <span class=\"o\">(</span><span class=\"n\">pg</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"o\">},</span>\n  <span class=\"n\">refine</span> <span class=\"n\">AxiomNat3</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">r0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">by_contradiction</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b_ne_a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Zero</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">r'</span> <span class=\"n\">Zero</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">this.2</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"n\">h</span> <span class=\"n\">r'</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">r0</span><span class=\"o\">,</span> <span class=\"n\">or.inr</span> <span class=\"n\">b_ne_a</span><span class=\"o\">⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">⟨</span><span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">r1</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"o\">(</span><span class=\"n\">AxiomNat1</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">⟩</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">UniqueObj</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">px</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"n\">n</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">UniqueProp</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">UniqueIntro</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r1</span> <span class=\"n\">px</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">pb</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">apply</span> <span class=\"n\">by_contradiction</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">b_ne_x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n    <span class=\"k\">let</span> <span class=\"n\">r'</span> <span class=\"o\">:</span> <span class=\"n\">Nat</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">n'</span> <span class=\"n\">x'</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"n\">n'</span> <span class=\"n\">x'</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"n\">n'</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"n\">x'</span><span class=\"o\">),</span>\n    <span class=\"k\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">r'</span> <span class=\"o\">(</span><span class=\"n\">Succ</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">obtain</span> <span class=\"n\">f</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"o\">:=</span> <span class=\"n\">this.2</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">f</span> <span class=\"n\">rfl</span> <span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"n\">pb</span> <span class=\"n\">r'</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"o\">⟨</span><span class=\"n\">r0</span><span class=\"o\">,</span> <span class=\"n\">or.inl</span> <span class=\"o\">(</span><span class=\"n\">AxiomNat1</span> <span class=\"n\">n</span><span class=\"o\">)⟩</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"n\">n'</span> <span class=\"n\">x'</span> <span class=\"o\">⟨</span><span class=\"n\">px'</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">⟩,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">by_contradiction</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">hh</span><span class=\"o\">,</span> <span class=\"n\">b_ne_x</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n      <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">not_and_distrib.1</span> <span class=\"n\">hh</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">neg_resolve_left</span> <span class=\"o\">(</span><span class=\"n\">r1</span> <span class=\"n\">px'</span><span class=\"o\">),</span>\n      <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">not_or_distrib.1</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">AxiomNat2</span> <span class=\"o\">(</span><span class=\"n\">not_not.1</span> <span class=\"n\">h3</span><span class=\"o\">),</span>\n      <span class=\"n\">cases</span> <span class=\"n\">not_not.1</span> <span class=\"n\">h4</span><span class=\"o\">,</span>\n      <span class=\"n\">congr</span><span class=\"o\">,</span>\n      <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">UniqueEq</span> <span class=\"n\">h</span> <span class=\"n\">px</span> <span class=\"n\">px'</span><span class=\"o\">,</span>\n      <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 216820894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605483331
    },
    {
        "content": "<p>(Isn't <code>obtain rfl := ...</code> a fancy tactic?)</p>",
        "id": 216820979,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1605483443
    },
    {
        "content": "<p>as in it keeps to axiomatically basic tactics</p>",
        "id": 216820983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605483465
    },
    {
        "content": "<p><code>obtain rfl</code> is a way to write <code>subst h</code>, a.k.a <code>eq.rec</code></p>",
        "id": 216821026,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605483504
    },
    {
        "content": "<p>but I think proper use of <code>obtain</code> or <code>cases</code> is important for writing tactic proofs</p>",
        "id": 216821041,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605483556
    },
    {
        "content": "<p>I think <code>obtain</code> is relatively new (compared to <code>intro</code>), but I wouldn't say it's \"fancy\".</p>",
        "id": 216838060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605510239
    },
    {
        "content": "<p>If <code>rw</code> is being considered fancy I'd probably consider <code>obtain</code> fancy too</p>",
        "id": 216867575,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605531894
    },
    {
        "content": "<p><code>obtain</code> is just syntax sugar for <code>cases</code>, right? <code>rw</code> is a non-trivial extension of <code>eq.rec</code>.</p>",
        "id": 216872028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605534338
    },
    {
        "content": "<p>I think <code>obtain</code>+<code>rfl</code> is actually <code>subst</code> which is somehow different from <code>cases</code>, but I still wouldn't count it as fancy</p>",
        "id": 216873163,
        "sender_full_name": "Reid Barton",
        "timestamp": 1605534879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thank you for the proof! Will try using this style some time!</p>",
        "id": 216919717,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605555014
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Is there a reason to prefer <code>have</code> over <code>let</code>? I saw in your proof you got several places using <code>have</code> instead of <code>let</code></p>",
        "id": 217080610,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605658089
    },
    {
        "content": "<p>Use <code>have</code> for proofs and <code>let</code> only if you want to unfold the definition in subsequent reasoning</p>",
        "id": 217080643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605658132
    },
    {
        "content": "<p>it is similar to the difference between <code>def</code> and <code>theorem</code></p>",
        "id": 217080661,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605658161
    },
    {
        "content": "<p>Really you don't need <code>let</code> at all in the proof, you could just construct and then destruct an existential statement</p>",
        "id": 217080772,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605658227
    },
    {
        "content": "<p>as far as I understand, <code>let</code> is a more general version of <code>have</code>, since in the places we want to unfold body only <code>let</code> works? Any reason for not always using <code>let</code>? </p>\n<p>what's the difference between <code>def</code> and <code>theorem</code>?</p>\n<blockquote>\n<p>Really you don't need let at all in the proof, you could just construct and then destruct an existential statement</p>\n</blockquote>\n<p>Are you talking about this particular proof? or something in general?</p>",
        "id": 217080940,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605658354
    },
    {
        "content": "<p>in this particular proof</p>",
        "id": 217081088,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605658468
    },
    {
        "content": "<p>Using <code>let</code> clutters up the context with <code>:= ...</code> because it has to retain the definition, and ultimately it boils down to a substitution anyway so it's not really using the cut rule in the way <code>have</code> does</p>",
        "id": 217081194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605658561
    },
    {
        "content": "<p><code>let x := e in a</code> becomes <code>a [e / x]</code> while <code>have x := e, a</code> becomes <code>(\\lam x, a) e</code></p>",
        "id": 217081289,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605658616
    },
    {
        "content": "<p>so the reason for preferring <code>have</code> is <code>let</code> is not needed?</p>",
        "id": 217081931,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605659092
    },
    {
        "content": "<p>oh I see, so by \"clutters up the context\", you mean it will create a lot more entries in the context which makes it harder to look at the hypothesis</p>",
        "id": 217082051,
        "sender_full_name": "Rui Liu",
        "timestamp": 1605659205
    },
    {
        "content": "<p>This is less true of the widget view because it hides <code>:= ...</code> in the context, unlike the plain text view, but I'm worried about an explosion of type checking cost in some cases</p>",
        "id": 217083086,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605660080
    },
    {
        "content": "<p>generally, it is useful information for lean to know that a definition will not be used later except via its type</p>",
        "id": 217083108,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605660114
    }
]