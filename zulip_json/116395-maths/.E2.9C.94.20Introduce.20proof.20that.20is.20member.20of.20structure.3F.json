[
    {
        "content": "<p>I am using LEAN3 and want to define a function on the <code>fin</code> type. I intend to implement it by raising to <code>nat</code> and thus need to take as a given <code>x.property</code> so that I can use it to prove the <code>.property</code> of the result. I don't seem to have access to it by name from within the lambda expression. How do I properly introduce it?</p>",
        "id": 301604035,
        "sender_full_name": "Quarrie",
        "timestamp": 1664530236
    },
    {
        "content": "<p>You mean something like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x.1</span>\n</code></pre></div>\n<p>? This function takes <code>x : fin n</code>, so <code>x.1 : ℕ</code>, and sends it to <code>2 * x.1</code>.</p>",
        "id": 301604479,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664530411
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> The function takes and returns <code>fin</code>s of different sizes, so using the predefined operations is not enough.</p>",
        "id": 301604667,
        "sender_full_name": "Quarrie",
        "timestamp": 1664530489
    },
    {
        "content": "<p>I need to extract the underlying nat directly, mess with that, and prove it satisfies the new inequality.</p>",
        "id": 301604729,
        "sender_full_name": "Quarrie",
        "timestamp": 1664530515
    },
    {
        "content": "<p>Well, than you have to prove that the result satisfies the required property. If <code>h</code> is such a proof, you can write <code>⟨..., h⟩</code> to define the element of <code>fin</code>.</p>",
        "id": 301604917,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664530566
    },
    {
        "content": "<p>I am aware of that. My problem is that said proof depends on the fact that <code>x</code>, as a member of <code>fin n</code>, satisfies <code>x &lt; n</code>.</p>",
        "id": 301605111,
        "sender_full_name": "Quarrie",
        "timestamp": 1664530633
    },
    {
        "content": "<p>For some reason I don't seem to be able to access <code>x.property</code> directly so I can't introduce it.</p>",
        "id": 301605163,
        "sender_full_name": "Quarrie",
        "timestamp": 1664530653
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin.basic</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x.1</span><span class=\"o\">,</span> <span class=\"n\">mul_lt_mul'</span> <span class=\"n\">rfl.le</span> <span class=\"n\">x.2</span> <span class=\"o\">(</span><span class=\"n\">zero_le</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">zero_lt_two</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>Does this help? Otherwise just post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a></p>",
        "id": 301605585,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664530813
    },
    {
        "content": "<p>Something like this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">⟩,</span> <span class=\"o\">⟨</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">linarith</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 301605617,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1664530831
    },
    {
        "content": "<p>One sec, let me confirm this works</p>",
        "id": 301605698,
        "sender_full_name": "Quarrie",
        "timestamp": 1664530877
    },
    {
        "content": "<p>Works, thank you!</p>",
        "id": 301605879,
        "sender_full_name": "Quarrie",
        "timestamp": 1664530939
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"448090\">Quarrie</span> has marked this topic as resolved.</p>",
        "id": 301605883,
        "sender_full_name": "Notification Bot",
        "timestamp": 1664530941
    },
    {
        "content": "<p>The magic here is done by <code>⟨_, _⟩</code>. Since Lean know that the type of the result is <code>fin (2 * n)</code>, it can deduce that two things are needed, a natural number, <code>2 * x.1</code> (in Vincent's example Lean is smart enough to automatically insert a coercion), and then a proof that <code>2 * x.1 &lt; 2 * n</code>.</p>",
        "id": 301606352,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664531145
    },
    {
        "content": "<p>Actually there is no coercion in my example, I deconstruct the initial <code>fin n</code> into a nat <code>x</code> and a proof <code>hx : x &lt; n</code> as the argument of the lambda. Like <code>rintro ⟨x, hx⟩</code>.</p>",
        "id": 301606636,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1664531271
    },
    {
        "content": "<p>Ops, sorry, I didn't notice the <code>λ ⟨x, hx⟩</code>.</p>",
        "id": 301606994,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664531415
    },
    {
        "content": "<p>(I was indeed pleased that <code>linarith</code> were smart enough to find <code>x.2</code>, but it probably isn't.)</p>",
        "id": 301607092,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664531472
    },
    {
        "content": "<blockquote>\n<p>For some reason I don't seem to be able to access <code>x.property</code> directly so I can't introduce it.</p>\n</blockquote>\n<p>I'm still puzzled about this. Why couldn't they access the <code>property</code> field on <code>fin</code>? I don't think that question was answered.</p>\n<p>I'm wondering if the problem was that they were trying to use <code>x.property</code> with <code>x</code> when it actually applies to <code>x.val</code>. So it wasn't that <code>x.property</code> was inaccessible... it was just misapplied. If that's what happened here, I think it would be useful to clarify that.</p>",
        "id": 301711152,
        "sender_full_name": "Matt Diamond",
        "timestamp": 1664563074
    },
    {
        "content": "<p>We need an explicit example to answer the precise question.</p>",
        "id": 301717497,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1664565199
    },
    {
        "content": "<p>I assume there was an issue of elaboration, where the lambda didn't have the type of x specified, and so they were hitting a syntax error on doing <a href=\"http://x.property\">x.property</a> before x was elaborated</p>",
        "id": 301738905,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1664574466
    }
]