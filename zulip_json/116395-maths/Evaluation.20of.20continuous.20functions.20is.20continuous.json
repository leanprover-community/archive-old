[
    {
        "content": "<p>Is there a generalization that unifies the typeclass assumptions of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.continuous_ev\">docs#continuous_map.continuous_ev</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.continuous_eval\">docs#continuous_map.continuous_eval</a>?</p>",
        "id": 275502201,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647433096
    },
    {
        "content": "<p>Isn’t the first one strictly stronger than the second one ?</p>",
        "id": 275503143,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1647433615
    },
    {
        "content": "<p>If it is then mathlib doesn't know</p>",
        "id": 275503469,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647433835
    },
    {
        "content": "<p>Apparently compact spaces are not always locally compact (<a href=\"https://math.stackexchange.com/q/1632637/1896\">https://math.stackexchange.com/q/1632637/1896</a>)</p>",
        "id": 275503505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647433861
    },
    {
        "content": "<p>Indeed, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_compact_of_compact\">docs#locally_compact_of_compact</a> says they're only locally compact in the presence of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/t2_space\">docs#t2_space</a>, which seems to match that question</p>",
        "id": 275503536,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647433891
    },
    {
        "content": "<p>Yes I just realized that</p>",
        "id": 275503695,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1647433983
    },
    {
        "content": "<p>Although it does seem strange that the former wouldn't cover the latter, given the docstring for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/locally_compact_space\">docs#locally_compact_space</a>:</p>\n<blockquote>\n<p>There are various definitions of \"locally compact space\" in the literature, which agree for<br>\nHausdorff spaces but not in general. This one is the precise condition on X needed for the<br>\nevaluation <code>map C(X, Y) × X → Y</code> to be continuous for all <code>Y</code> when <code>C(X, Y)</code> is given the<br>\ncompact-open topology.</p>\n</blockquote>",
        "id": 275503720,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647433999
    },
    {
        "content": "<p>Is <code>C(X, Y)</code> getting a different topology in the two statements?</p>",
        "id": 275503759,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647434032
    },
    {
        "content": "<p>Then the question becomes : is the metric_space assumption in the compact case really necessary</p>",
        "id": 275505318,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1647434960
    },
    {
        "content": "<p>I'm very out of my depth here; so for now I've just PR'd <a href=\"https://github.com/leanprover-community/mathlib/pull/12738\">#12738</a> which makes the duplication obvious in the docstrings</p>",
        "id": 275505574,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647435103
    },
    {
        "content": "<p>These are good questions. I would be prepared to believe that if <code>X</code> is compact but not Hausdorff, then since maps into a Hausdorff space (e.g. metric space) <code>Y</code> factor through the maximal Hausdorff quotient <code>X -&gt; X'</code> of <code>X</code>, then maybe the induced map <code>C(X', Y) -&gt; C(X, Y)</code> is a homeomorphism--though it's not obvious to me. Here I'm always giving <code>C(-, -)</code> the compact-open topology. If this is right then it would explain why there are these two theorems with conclusions of the same form.</p>\n<p>Math-wise there is another question of whether the compact-open topology on <code>C(X, Y)</code> is the same as something coming from a metric when <code>X</code> is compact and <code>Y</code> a metric space. Based on a brief inspection, it looks like mathlib knows this is the case, but I don't have time to look at it further--I vaguely recall <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> proving some statement like this, maybe this one?</p>",
        "id": 275513566,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647439087
    },
    {
        "content": "<p>OK now I think that what I said in the first paragraph probably is in fact easy (compact subsets of <code>X'</code> are sufficiently closely related to compact subsets of <code>X</code> to see that the topologies are the same).</p>",
        "id": 275514062,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647439267
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Evaluation.20of.20continuous.20functions.20is.20continuous/near/275503759\">said</a>:</p>\n<blockquote>\n<p>Is <code>C(X, Y)</code> getting a different topology in the two statements?</p>\n</blockquote>\n<p>This is also a good question--I hope the answer is yes</p>",
        "id": 275514387,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647439429
    },
    {
        "content": "<blockquote>\n<p>This is also a good question--I hope the answer is yes</p>\n</blockquote>\n<p>I somewhat hope the answer is no, because otherwise there's probably a diamond at play here and we need some type aliases.</p>",
        "id": 275515444,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647439860
    },
    {
        "content": "<p>No it is the same topology (provably, but I think it has been setup carefully so it is definitional). Compact open topology is a generalization of the usual uniform convergence topology</p>",
        "id": 275523991,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1647443115
    },
    {
        "content": "<p>Oh whoops you said \"different\"! I meant I hope it has the same topology.</p>",
        "id": 275530832,
        "sender_full_name": "Reid Barton",
        "timestamp": 1647445764
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Evaluation.20of.20continuous.20functions.20is.20continuous/near/275513566\">said</a>:</p>\n<blockquote>\n<p>Based on a brief inspection, it looks like mathlib knows this is the case, but I don't have time to look at it further--I vaguely recall <span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> proving some statement like this, maybe this one?</p>\n</blockquote>\n<p>Yes, that's right. For the sake of definiteness, the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology.continuous_function.compact</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">compact_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">metric_space.to_uniform_space'.to_topological_space</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">continuous_map.compact_open</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 275630979,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1647512424
    },
    {
        "content": "<p>The actual math content is expressed in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.compact_open_eq_compact_convergence\">docs#continuous_map.compact_open_eq_compact_convergence</a> and IIRC it was <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span> who hooked this up to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.metric_space\">docs#continuous_map.metric_space</a></p>",
        "id": 275631425,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1647512674
    },
    {
        "content": "<blockquote>\n<p>This one is the precise condition on X needed for the<br>\nevaluation <code>map C(X, Y) × X → Y</code> to be continuous for all <code>Y</code> when <code>C(X, Y)</code> is given the<br>\ncompact-open topology.</p>\n</blockquote>\n<p>Perhaps the way to understand this quote from the docs in the context of this topic is \"in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/continuous_map.continuous_eval\">docs#continuous_map.continuous_eval</a> we know more about <code>Y</code> so can get away with weaker assumptions on <code>X</code>\".</p>",
        "id": 275636766,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647515723
    },
    {
        "content": "<p>The reason I started this topic is that I wonder which of the two lemmas <a href=\"https://github.com/leanprover-community/mathlib/pull/11261\">#11261</a> should be using</p>",
        "id": 275637339,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1647516026
    }
]