[
    {
        "content": "<p>Hi, many simplification lemmas about filters can be formulated in terms of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">has_base</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"n\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">{{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}},</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">f</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"err\">⊆</span> <span class=\"n\">t</span>\n</pre></div>\n\n\n<p>I use <code>s : ι → set α</code> instead of <code>set (set α)</code> because usually this base is a range of a function. This property is stronger than <code>f = infi (principal ∘ s)</code>, and immediately implies statements like <code>tendsto m f f' → f.has_base s → ∀ t ∈ f', ∃ i, s i ⊆ m ⁻¹' t</code>, and similarly for <code>f'</code>.<br>\nWhat do you think about adding it to <code>mathlib</code>?</p>",
        "id": 185623997,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579026343
    },
    {
        "content": "<p>A possible application: we can prove that various families (open balls, closed balls, same with rational <code>r</code>, same with <code>r=n⁻¹</code>) form bases of <code>nhds x</code> in an <code>emetric/metric</code> space, then use these lemmas in rewrites without proving <code>N²</code> helper lemmas.</p>",
        "id": 185625003,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579026936
    },
    {
        "content": "<p>We already had this need in the perfectoid project, but it's among the many things that should be PRed but are not. We also tried several implementations and I'm super happy with the one we currently have. See <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/filter.lean#L82\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/filter.lean#L82\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/filter.lean#L82</a> and the rest of that file, as well as <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/topological_groups.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/topological_groups.lean\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/topological_groups.lean</a>, <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/topological_rings.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/topological_rings.lean\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/topological_rings.lean</a> etc. One difficulty is to make something that we can easily use in more specialized situation without rewriting all lemmas to make them really usable.</p>",
        "id": 185639304,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579035413
    },
    {
        "content": "<p>Why did you choose to have a separate type instead of a predicate? I think that usually we already have a filter and want to rewrite some <code>tendsto</code> in a more reasonable way.</p>",
        "id": 185645617,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1579039443
    },
    {
        "content": "<p>That's not the case in the perfectoid project. The filter base comes first, then the filter and then the topology.</p>",
        "id": 185646072,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579039724
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuation/topology.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuation/topology.lean\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/valuation/topology.lean</a></p>",
        "id": 185646120,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579039765
    },
    {
        "content": "<p>But I didn't find a nice way to cover all use cases.</p>",
        "id": 185646140,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1579039783
    },
    {
        "content": "<p>Isn't there already a <code>filter.generate</code> function for generating a filter from a filter (sub)base?</p>",
        "id": 185650787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579042742
    },
    {
        "content": "<p>I can certainly see the use in a <code>has_base</code> predicate for saying that a filter is generated by a base other than the one used in its definition though</p>",
        "id": 185650824,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1579042781
    }
]