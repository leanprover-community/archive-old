[
    {
        "content": "<p>Currently, <code>measure.map f μ</code> is defined to be <code>0</code> if <code>f</code> is not measurable (in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/measure_theory.measure.map\">docs#measure_theory.measure.map</a>). This global measurability assumption is nice as it ensures that this operation is linear on measures, from which a bunch of nice properties follow automatically. However, it is creating difficulties to me in a probability theory context: if I have two integrable random variables <code>X</code> and <code>Y</code> and I want to say that they have the same distribution, the natural formulation would be to require that <code>measure.map X ℙ = measure.map Y ℙ</code>, however this fails if <code>X</code> or <code>Y</code> is not measurable (note that they are ae measurable by the integrability assumption). So I am considering refactoring <code>measure.map</code> to allow ae measurable functions, but I'd like to check here for thoughts before -- it's probably gonna be a bit of work, so if it doesn't look like a good idea I'd rather not start on it. Thoughts, anyone?</p>",
        "id": 278169998,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1649340903
    },
    {
        "content": "<p>I thought we had decided to only care about measurable functions in probability theory. Is this not the case anymore?</p>",
        "id": 278176183,
        "sender_full_name": "Jason KY.",
        "timestamp": 1649343400
    },
    {
        "content": "<p>So you want <code>measure.map f μ</code> to be well-defined (and not 0) if <code>f</code> is <code>μ</code>-ae-measurable? That sound like a natural thing to do.</p>",
        "id": 278176314,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649343458
    },
    {
        "content": "<p>But indeed losing linearity means that you would have to rewrite many things ... would it make sense to have two versions?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">measure.map'</span> <span class=\"n\">f</span> <span class=\"n\">μ</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ae_measurable</span> <span class=\"n\">f</span> <span class=\"n\">μ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">measure.map</span> <span class=\"o\">(</span><span class=\"n\">h.mk</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">μ</span>\n</code></pre></div>",
        "id": 278176896,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649343639
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243312\">Jason KY.</span> <a href=\"#narrow/stream/116395-maths/topic/Refactoring.20measure.2Emap/near/278176183\">said</a>:</p>\n<blockquote>\n<p>I thought we had decided to only care about measurable functions in probability theory. Is this not the case anymore?</p>\n</blockquote>\n<p>Yes, in most situations. But if a theorem is true assuming only <code>integrable X</code>, it would be a shame to prove it assuming <code>measurable X</code> and <code>integrable X</code>.</p>",
        "id": 278177283,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1649343770
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"242586\">Vincent Beffara</span> <a href=\"#narrow/stream/116395-maths/topic/Refactoring.20measure.2Emap/near/278176896\">said</a>:</p>\n<blockquote>\n<p>But indeed losing linearity means that you would have to rewrite many things.</p>\n</blockquote>\n<p>I am not sure it will be that painful. But I won't know before I try!</p>",
        "id": 278177367,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1649343805
    },
    {
        "content": "<p>Losing linearity should not be a big issue for probability as long as you still preserve convex combinations?</p>",
        "id": 278178013,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649344013
    },
    {
        "content": "<p>Ah but you wouldn't either ...</p>",
        "id": 278179334,
        "sender_full_name": "Vincent Beffara",
        "timestamp": 1649344546
    },
    {
        "content": "<p>Whenever the function is measurable this would coincide with the previous definition, so you would keep all the nice properties.</p>",
        "id": 278179519,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1649344590
    },
    {
        "content": "<p>I think as long as we have the same APIs for measurable functions it will work fine so I'm in favour of the refactor</p>",
        "id": 278179799,
        "sender_full_name": "Jason KY.",
        "timestamp": 1649344687
    },
    {
        "content": "<p>That's now <a href=\"https://github.com/leanprover-community/mathlib/pull/13241\">#13241</a></p>",
        "id": 278428651,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1649535704
    }
]