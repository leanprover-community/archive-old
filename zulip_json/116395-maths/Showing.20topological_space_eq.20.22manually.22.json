[
    {
        "content": "<p>This is the definition of a topological space.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[protect_proj]</span> <span class=\"kd\">structure</span> <span class=\"n\">topological_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_open</span>        <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_open_univ</span>   <span class=\"o\">:</span> <span class=\"n\">is_open</span> <span class=\"n\">univ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_open_inter</span>  <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">s</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">is_open_sUnion</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">t</span><span class=\"bp\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"bp\">⋃₀</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n</code></pre></div>\n\n<p>I want to show the following lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">topological_space_eq</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X.is_open</span> <span class=\"bp\">=</span> <span class=\"n\">Y.is_open</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span>\n</code></pre></div>\n\n<p>by explicitly constructing a proof of X = Y, not just typing refl and letting lean do it.<br>\nTo do this I want to show that <code>X.is_open_inter = Y.is_open_inter</code>,<code> X.is_open_sUnion = Y.is_open_sUnion</code> and <code>X.is_open_univ = Y.is_open_univ</code>. Then I can apply <code>topological_space.mk</code> and since I have proofs that all the arguments are equal, as well as that X is the result of applying the constructor, I should be able to get a proof (using eq.rec_on a bit).<br>\nMy problem is that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X.is_open</span> <span class=\"bp\">=</span> <span class=\"n\">Y.is_open</span><span class=\"o\">)</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">X.is_open_univ</span> <span class=\"bp\">=</span> <span class=\"n\">Y.is_open_univ</span>\n</code></pre></div>\n\n<p>does not typecheck since lean says that the two types at the end are different.<br>\nHow could I get around this?</p>",
        "id": 213713804,
        "sender_full_name": "Golol",
        "timestamp": 1603038450
    },
    {
        "content": "<p>note that <code>refl</code> is not a magic tool, it proves a very particular set of things. In particular, when <code>refl</code> is the proof, the proof is literally <code>rfl</code>, or <code>eq.refl _</code> - there is no lower level proof</p>",
        "id": 213714165,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603038944
    },
    {
        "content": "<p>In fact <code>refl</code> will not prove this goal</p>",
        "id": 213714170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603038955
    },
    {
        "content": "<p>The proof of this theorem is actually <code>intro h; cases X; cases Y; cases h; refl</code>, which should give you a hint as to how to proceed</p>",
        "id": 213714227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603039031
    },
    {
        "content": "<p>Could you then explain how this proof works?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">topological_space_eq</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">f.is_open</span> <span class=\"bp\">=</span> <span class=\"n\">g.is_open</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span>\n<span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"n\">rfl</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n\n<p>We start by using recursion on topological space to assume that f and g are outputs of the constructor for certain inputs. But what does the first rfl do, and why is it trivial to Lean that all the arguments are identical?</p>",
        "id": 213714874,
        "sender_full_name": "Golol",
        "timestamp": 1603040020
    },
    {
        "content": "<p>that's the same proof as I just described, but written with the equation compiler</p>",
        "id": 213715018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603040243
    },
    {
        "content": "<p>the first two tuples are doing <code>cases X; cases Y</code> and the <code>rfl</code> on the left is doing <code>cases h</code>, and the <code>rfl</code> on the right is the finishing <code>refl</code></p>",
        "id": 213715064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603040288
    },
    {
        "content": "<p>Once you have done cases on everything, all the props become definitionally equal by proof irrelevance</p>",
        "id": 213715078,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603040340
    },
    {
        "content": "<p>Thanks a lot, I did the tactics proof and looked at the proof term:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">topological_space_eq2</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">X.is_open</span> <span class=\"bp\">=</span> <span class=\"n\">Y.is_open</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">=</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">X.is_open</span> <span class=\"bp\">=</span> <span class=\"n\">Y.is_open</span><span class=\"o\">),</span>\n  <span class=\"n\">X.cases_on</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">X_is_open</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X_is_open_univ</span> <span class=\"o\">:</span> <span class=\"n\">X_is_open</span> <span class=\"n\">univ</span><span class=\"o\">)</span>\n     <span class=\"o\">(</span><span class=\"n\">X_is_open_inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">X_is_open</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">X_is_open</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">X_is_open</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n     <span class=\"o\">(</span><span class=\"n\">X_is_open_sUnion</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">X_is_open</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X_is_open</span> <span class=\"o\">(</span><span class=\"bp\">⋃₀</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n     <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span>\n       <span class=\"o\">{</span><span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open</span><span class=\"o\">,</span>\n          <span class=\"n\">is_open_univ</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open_univ</span><span class=\"o\">,</span>\n          <span class=\"n\">is_open_inter</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open_inter</span><span class=\"o\">,</span>\n          <span class=\"n\">is_open_sUnion</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open_sUnion</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">is_open</span> <span class=\"bp\">=</span>\n         <span class=\"n\">Y.is_open</span><span class=\"o\">),</span>\n       <span class=\"n\">Y.cases_on</span>\n         <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">Y_is_open</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y_is_open_univ</span> <span class=\"o\">:</span> <span class=\"n\">Y_is_open</span> <span class=\"n\">univ</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"n\">Y_is_open_inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">Y_is_open</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Y_is_open</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">Y_is_open</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"n\">Y_is_open_sUnion</span> <span class=\"o\">:</span>\n            <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">Y_is_open</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Y_is_open</span> <span class=\"o\">(</span><span class=\"bp\">⋃₀</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n          <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span>\n            <span class=\"o\">{</span><span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open</span><span class=\"o\">,</span>\n               <span class=\"n\">is_open_univ</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open_univ</span><span class=\"o\">,</span>\n               <span class=\"n\">is_open_inter</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open_inter</span><span class=\"o\">,</span>\n               <span class=\"n\">is_open_sUnion</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open_sUnion</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">is_open</span> <span class=\"bp\">=</span>\n              <span class=\"o\">{</span><span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"n\">Y_is_open</span><span class=\"o\">,</span>\n               <span class=\"n\">is_open_univ</span> <span class=\"o\">:=</span> <span class=\"n\">Y_is_open_univ</span><span class=\"o\">,</span>\n               <span class=\"n\">is_open_inter</span> <span class=\"o\">:=</span> <span class=\"n\">Y_is_open_inter</span><span class=\"o\">,</span>\n               <span class=\"n\">is_open_sUnion</span> <span class=\"o\">:=</span> <span class=\"n\">Y_is_open_sUnion</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">is_open</span><span class=\"o\">),</span>\n            <span class=\"n\">h.dcases_on</span>\n              <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Y_is_open</span> <span class=\"bp\">=</span> <span class=\"n\">X_is_open</span><span class=\"o\">),</span>\n                 <span class=\"n\">eq.rec</span>\n                   <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">Y_is_open_univ</span> <span class=\"o\">:</span> <span class=\"n\">X_is_open</span> <span class=\"n\">univ</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"n\">Y_is_open_inter</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">X_is_open</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">X_is_open</span> <span class=\"n\">t</span> <span class=\"bp\">→</span> <span class=\"n\">X_is_open</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"n\">Y_is_open_sUnion</span> <span class=\"o\">:</span>\n                      <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">t</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"n\">X_is_open</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">X_is_open</span> <span class=\"o\">(</span><span class=\"bp\">⋃₀</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n                    <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span>\n                      <span class=\"o\">{</span><span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open</span><span class=\"o\">,</span>\n                         <span class=\"n\">is_open_univ</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open_univ</span><span class=\"o\">,</span>\n                         <span class=\"n\">is_open_inter</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open_inter</span><span class=\"o\">,</span>\n                         <span class=\"n\">is_open_sUnion</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open_sUnion</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">is_open</span> <span class=\"bp\">=</span>\n                        <span class=\"o\">{</span><span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open</span><span class=\"o\">,</span>\n                         <span class=\"n\">is_open_univ</span> <span class=\"o\">:=</span> <span class=\"n\">Y_is_open_univ</span><span class=\"o\">,</span>\n                         <span class=\"n\">is_open_inter</span> <span class=\"o\">:=</span> <span class=\"n\">Y_is_open_inter</span><span class=\"o\">,</span>\n                         <span class=\"n\">is_open_sUnion</span> <span class=\"o\">:=</span> <span class=\"n\">Y_is_open_sUnion</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">is_open</span><span class=\"o\">)</span>\n                    <span class=\"o\">(</span><span class=\"n\">H_2</span> <span class=\"o\">:</span>\n                      <span class=\"n\">h</span> <span class=\"bp\">==</span>\n                        <span class=\"n\">eq.refl</span>\n                          <span class=\"o\">{</span><span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open</span><span class=\"o\">,</span>\n                           <span class=\"n\">is_open_univ</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open_univ</span><span class=\"o\">,</span>\n                           <span class=\"n\">is_open_inter</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open_inter</span><span class=\"o\">,</span>\n                           <span class=\"n\">is_open_sUnion</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open_sUnion</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">is_open</span><span class=\"o\">),</span>\n                      <span class=\"n\">eq.refl</span>\n                        <span class=\"o\">{</span><span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open</span><span class=\"o\">,</span>\n                         <span class=\"n\">is_open_univ</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open_univ</span><span class=\"o\">,</span>\n                         <span class=\"n\">is_open_inter</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open_inter</span><span class=\"o\">,</span>\n                         <span class=\"n\">is_open_sUnion</span> <span class=\"o\">:=</span> <span class=\"n\">X_is_open_sUnion</span><span class=\"o\">})</span>\n                   <span class=\"n\">a.symm</span>\n                   <span class=\"n\">Y_is_open_univ</span>\n                   <span class=\"n\">Y_is_open_inter</span>\n                   <span class=\"n\">Y_is_open_sUnion</span>\n                   <span class=\"n\">h</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"n\">eq.refl</span>\n                 <span class=\"o\">{</span><span class=\"n\">is_open</span> <span class=\"o\">:=</span> <span class=\"n\">Y_is_open</span><span class=\"o\">,</span>\n                  <span class=\"n\">is_open_univ</span> <span class=\"o\">:=</span> <span class=\"n\">Y_is_open_univ</span><span class=\"o\">,</span>\n                  <span class=\"n\">is_open_inter</span> <span class=\"o\">:=</span> <span class=\"n\">Y_is_open_inter</span><span class=\"o\">,</span>\n                  <span class=\"n\">is_open_sUnion</span> <span class=\"o\">:=</span> <span class=\"n\">Y_is_open_sUnion</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">is_open</span><span class=\"o\">)</span>\n              <span class=\"o\">(</span><span class=\"n\">heq.refl</span> <span class=\"n\">h</span><span class=\"o\">))</span>\n         <span class=\"n\">h</span><span class=\"o\">)</span>\n    <span class=\"n\">h</span>\n</code></pre></div>\n\n<p>I basically spent all day trying to find this proof lol. There are surely shorter term-style proofs but now I see why tactics are important...</p>",
        "id": 213722664,
        "sender_full_name": "Golol",
        "timestamp": 1603051064
    },
    {
        "content": "<blockquote>\n<p>There are surely shorter term-style proofs</p>\n</blockquote>\n<p>well yes, the first proof you posted is term-style</p>",
        "id": 213724750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603053622
    },
    {
        "content": "<p>but here's a shorter term mode proof using only <code>rec_on</code>s</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">topological_space_eq'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">},</span> <span class=\"n\">f.is_open</span> <span class=\"bp\">=</span> <span class=\"n\">g.is_open</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">topological_space.cases_on</span> <span class=\"n\">f</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">a₃</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">topological_space.cases_on</span> <span class=\"n\">g</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">b</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"n\">b₃</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">eq.rec_on</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"n\">b₃</span>\n</code></pre></div>",
        "id": 213725003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1603054058
    }
]