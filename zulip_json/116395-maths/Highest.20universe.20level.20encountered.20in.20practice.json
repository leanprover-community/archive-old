[
    {
        "content": "<p>What's the highest universe level you can think of that is necessary to formalize some non-artificial mathematical statement?</p>",
        "id": 228350307,
        "sender_full_name": "Roman Bars",
        "timestamp": 1614658206
    },
    {
        "content": "<p>Type 1 is the highest I have ever seen for non-artificial things</p>",
        "id": 228350419,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614658316
    },
    {
        "content": "<p>Specifically, <code>ordinal</code>,<code>cardinal</code>, <code>pSet</code> and <code>Set</code> all live in <code>Type 1</code></p>",
        "id": 228350491,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614658350
    },
    {
        "content": "<p>I think it is best to think in ZFC terms, with things in Type 0 being \"small\" and things in Type 1 being \"large\", and don't even contemplate going higher</p>",
        "id": 228350569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614658430
    },
    {
        "content": "<p>It's generally a bad idea to use universe bumping constructions because they can't be iterated, so we do a fair bit of work to keep things \"small\", resulting in size considerations not unlike those you find in ZFC formalization</p>",
        "id": 228350718,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614658545
    },
    {
        "content": "<p>The biggest blocker to formalizing cardinals without type 1 is that you have to take a quotient, so you really have to apply <code>quotient.{1}</code> unless you want setoid hell. But if you are okay with this, then cardinals are just types with an equivalence relation on them (and actually we already have such a thing, it's what <code>data.equiv</code> does), and you can construct ordinals in a similar way as an equivalence relation on bundled well orders, and then you don't need to leave Type 0 to do ordinals and cardinals</p>",
        "id": 228351103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614658852
    },
    {
        "content": "<p>The story with <code>Set</code> is similar, it's a quotient of <code>pSet</code> so maybe you can just live without it. But <code>pSet</code> is really a higher universe inductive:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The type of pre-sets in universe `u`. A pre-set</span>\n<span class=\"sd\">  is a family of pre-sets indexed by a type in `Type u`.</span>\n<span class=\"sd\">  The ZFC universe is defined as a quotient of this</span>\n<span class=\"sd\">  to ensure extensionality. -/</span>\n<span class=\"kd\">inductive</span> <span class=\"n\">pSet</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">pSet</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pSet</span>\n</code></pre></div>\n<p>This quantifies over all types in the universe in order to populate the inductive, which gives it a lot of unique properties (like having an inaccessible cardinality), so I'm pretty sure you can't do this in Type 0 (not least because this inductive can be turned into a model of ZFC).</p>",
        "id": 228351295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614659033
    },
    {
        "content": "<p>I would be curious to see how large universes <em>actually</em> get in mathlib though, with a definition like \"what is the highest substitution of a concrete universe level to a universe variable\", and I wouldn't be too surprised if the answer is 2 or 3</p>",
        "id": 228351600,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614659233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387766\">@Roman Bars</span> We haven't yet formalised etale cohomology. Once we do that, we'll have to decide whether we want it to be elegant or ugly. The elegant definition bumps universes up by 1.</p>",
        "id": 228357786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614664510
    },
    {
        "content": "<p>That would still only be Type 1 though, right?</p>",
        "id": 228357964,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614664682
    },
    {
        "content": "<p>Unless you start with an algebro-geometric object in <code>Type 1</code>.</p>",
        "id": 228358383,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614664956
    },
    {
        "content": "<p>I don't know whether these cohomology constructions are ever iterated...</p>",
        "id": 228358429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614665007
    },
    {
        "content": "<p>As I mention above, if the answer is \"yes\" then you will have to go with the ugly definition</p>",
        "id": 228358446,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614665032
    },
    {
        "content": "<p>Maybe in things like the minimal model program? Where you iterate things like taking canonical models, resolution of singularities, blow-ups, etc...</p>",
        "id": 228358448,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614665033
    },
    {
        "content": "<p>Some of those steps make use of cohomology to create a new ring/variety.</p>",
        "id": 228358517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614665063
    },
    {
        "content": "<p>The ability to iterate a construction a fixed finite number of times is almost useless for most mathematical applications</p>",
        "id": 228358528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614665098
    },
    {
        "content": "<p>if you want to iterate enough to eliminate all singularities, even if you know that finitely many iterations suffice, that's not good enough unless you know that e.g. 4 iterations suffice</p>",
        "id": 228358575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614665141
    },
    {
        "content": "<p>because the number of iterations here isn't a <code>nat</code>, it's encoded in universe level arithmetic</p>",
        "id": 228358650,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614665197
    },
    {
        "content": "<p>and it would be inconsistent to reflect it as a <code>nat</code></p>",
        "id": 228358672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614665223
    },
    {
        "content": "<p>In fact, when resolving singularities by blow-ups, you can run into a situation where you do one blow up and then you can get any finite number of isolated singularities in the resulting blow up.  Of course, on any given example you can then resolve each by a finite number of blow ups, but there is no a priori upper bound on the number.</p>\n<p>However, if you have a bounded family of varieties, then I think that there is a bound on the number of blow ups, as a function of the family.  These bounds tend to be gigantic, though.</p>",
        "id": 228360135,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614666326
    },
    {
        "content": "<p>This, however, does not necessarily mean that to \"resolve singularities\" you <em>need</em> to have these unbounded construction.  It is simply saying that it is <em>sufficient</em> to do this!  It is possible that there are different strategies for resolution that do not depend on doing blow ups...</p>",
        "id": 228360236,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614666405
    },
    {
        "content": "<blockquote>\n<p>However, if you have a bounded family of varieties, then I think that there is a bound on the number of blow ups, as a function of the family. These bounds tend to be gigantic, though.</p>\n</blockquote>\n<p>Right, this is the kind of not-useful bound I mean. If you translate this to a lean proof, the proof itself is required to be at least as large as the bound you want, meaning that if the bound depends on the instance itself then a finite fragment of mathlib is only going to be able to prove properties about a small fraction of all varieties and only with stupidly long proofs</p>",
        "id": 228360472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1614666607
    },
    {
        "content": "<p>What this means is that at some point we might want to do some careful universe lowering for some cohomology theories, because we might actually need it. But for now I wouldn't worry about this, because it's quite far down the road.</p>",
        "id": 228361043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1614667069
    },
    {
        "content": "<p>Somehow, in my mind, statements about \"universe issues\" are classified as \"if you have them, you are not thinking about the right question\".  It would be great if there were a tactic for alerting you of this fact!  <span aria-label=\"upside down\" class=\"emoji emoji-1f643\" role=\"img\" title=\"upside down\">:upside_down:</span></p>",
        "id": 228368490,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614672019
    },
    {
        "content": "<p>What do you think about the definition of the Picard group of a scheme as the units in the \"Picard monoid\" of isomorphism classes of quasicoherent sheaves under \\tensor ?</p>",
        "id": 228368740,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614672157
    },
    {
        "content": "<p>Even adding in some finiteness condition on the scheme and sheaves still doesn't stop you temporarily popping into a higher universe</p>",
        "id": 228368918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614672258
    },
    {
        "content": "<p>We ran into this sort of thing in the perfectoid project when defining the adic space as equivalence classes of valuations</p>",
        "id": 228369012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614672328
    },
    {
        "content": "<p>I like the definition of Picard group!  As I am learning Lean, I also realize that what is more important is how to relate it to other equivalent versions.  In the case of Picard groups, the \"divisors up to linear equivalence\" point of view is also very useful.</p>",
        "id": 228370184,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614672941
    },
    {
        "content": "<p>This other approach might involve fewer universe jumps, but I do not really have a feeling for these universe issues.</p>",
        "id": 228370255,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614672970
    },
    {
        "content": "<p>So ring-theoretically the divisor rather than sheaf approach is of course like using ideals rather than modules</p>",
        "id": 228371627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614673638
    },
    {
        "content": "<p>Yes, it is more \"intrinsic\", since you can work inside the ring itself, rather than \"moving out\" to modules.  Honestly, my intuition for universes is closer to how I would think about first- and second- order sentences and range of quantification.  Maybe this is not the right perspective.</p>",
        "id": 228373408,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1614674692
    },
    {
        "content": "<p>Ideals do seem like a natural concept though. With valuations one seemed to have to move to some rather strange preorder -- two valuations v and w on a ring R are equivalent iff v(r)&lt;=v(s) &lt;-&gt; w(r)&lt;=w(s).</p>",
        "id": 228373637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1614674818
    }
]