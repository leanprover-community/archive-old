[
    {
        "content": "<p>I need some standard topological space arguments. Do we have homeomorphisms and/or open immersions in mathlib yet, and if not then where should I put them? Should a homeomorphism be an equiv or a bijection? (i.e. should I demand a map in the other direction?). I need that something homeomorphic to a compact space is compact -- another thing which a mathematician would not need to supply a proof of because \"it's obvious\".</p>",
        "id": 126462782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526133728
    },
    {
        "content": "<p>I think Patrick has a definition of <code>homeo</code>. It extended <code>equiv</code></p>",
        "id": 126463028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526134348
    },
    {
        "content": "<p>of course homeos are isos in the category of top spaces so you are going to find many of the same parametricity things there as with your group iso stuff</p>",
        "id": 126463040,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526134394
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> See <a href=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/homeos.lean\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/homeos.lean\">https://github.com/PatrickMassot/lean-scratchpad/blob/master/src/homeos.lean</a></p>",
        "id": 126464136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526137035
    },
    {
        "content": "<p>It's focused on the group structure on self-homeomorphisms</p>",
        "id": 126464137,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526137061
    },
    {
        "content": "<p>But mathlib has induced topologies</p>",
        "id": 126464138,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526137076
    },
    {
        "content": "<p>So I would try to prove that an equiv is a homeo iff both maps induce the same topology on their source as the original one</p>",
        "id": 126464184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526137121
    },
    {
        "content": "<p>and then deduce something homeo to a compact space is compact</p>",
        "id": 126464187,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1526137138
    },
    {
        "content": "<p>I have a proof of <code>compact s ↔ compact (univ : set (subtype s))</code> lying around if you need that</p>",
        "id": 126465041,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526139151
    },
    {
        "content": "<p>Does <code>open_immersion</code> go in the root namespace?</p>",
        "id": 126467384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526144431
    },
    {
        "content": "<p>actually, I basically proved that something homeomorphic to a compact space is compact along the way</p>",
        "id": 126467549,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526144827
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">compact2</span> <span class=\"o\">[</span><span class=\"n\">tβ</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">y</span><span class=\"err\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">∃</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">compact</span> <span class=\"n\">s</span> <span class=\"bp\">→</span> <span class=\"bp\">@</span><span class=\"n\">compact</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">induced</span> <span class=\"n\">f</span> <span class=\"n\">tβ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 126467553,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526144880
    },
    {
        "content": "<p>Currently almost everything related to topological spaces is in the root namespace, which doesn't seem ideal, but surely it would be no worse than having <code>embedding</code> there which it is already.</p>",
        "id": 126467594,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526144939
    },
    {
        "content": "<p>Um, it also just follows from <code>compact_image</code>. <span class=\"emoji emoji-1f643\" title=\"upside down face\">:upside_down_face:</span></p>",
        "id": 126467700,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526145208
    },
    {
        "content": "<p>I have never really engaged with namespaces until recently; I had other things to worry about. I never used the namespace command and never opened anything. But it's all dawning on me now about how it might all work. I am surprised this stuff is piling up in the root namespace, and the longer it's there the more it will hurt when someone decides that <code>compact</code> doesn't apply to all types and hence should be moved to somewhere more topological-spacey.</p>",
        "id": 126467747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526145314
    },
    {
        "content": "<p>Yes, continuous image of compact is compact will do and probably I will just cheat and use that :-)</p>",
        "id": 126467751,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526145356
    },
    {
        "content": "<p><code>embedding</code> seems even more dubious</p>",
        "id": 126467791,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526145373
    },
    {
        "content": "<p>That's in mathlib now, right?</p>",
        "id": 126467792,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526145373
    },
    {
        "content": "<p>Yep</p>",
        "id": 126467793,
        "sender_full_name": "Reid Barton",
        "timestamp": 1526145375
    },
    {
        "content": "<p>Is there <code>is_finite</code> somewhere, a prop saying that a type is finite?</p>",
        "id": 126467999,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1526145852
    },
    {
        "content": "<p>There is <code>finite</code>, but that applies to sets</p>",
        "id": 126470976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526152753
    },
    {
        "content": "<p><code>open_immersion</code> sounds suitably unambiguously topological that it can go in the root namespace</p>",
        "id": 126470981,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526152780
    },
    {
        "content": "<blockquote>\n<p>Is there <code>is_finite</code> somewhere, a prop saying that a type is finite?</p>\n</blockquote>\n<p>there's <code>fintype</code> which isn't a prop</p>",
        "id": 126471039,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526152863
    },
    {
        "content": "<p>the prop is <code>nonempty (fintype \\a)</code></p>",
        "id": 126471044,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1526152876
    },
    {
        "content": "<p>For <code>compact2</code>, I would recommend against theorems that have \"weird\" topologies inserted in the top space component. It makes them very hard to use. Instead, I would want a hypothesis that says that the topology on <code>A</code> is induced from <code>f</code> by the topology on <code>B</code> (i.e. <code>topA = induced f topB</code>, and then you can just use regular typeclass inference to state <code>compact</code> on each side</p>",
        "id": 126471048,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1526152904
    },
    {
        "content": "<blockquote>\n<p><code>open_immersion</code> sounds suitably unambiguously topological that it can go in the root namespace</p>\n</blockquote>\n<p>But there are also <em>open immersions</em> in other categories (manifolds, schemes, etc). Wouldn't that create confusion?</p>",
        "id": 126471234,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1526153286
    },
    {
        "content": "<p>I have to make a design decision.</p>",
        "id": 126932789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527008284
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">open_immersion</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Tα</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Tβ</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">fcont</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">finj</span> <span class=\"o\">:</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">fopens</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">↔</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 126932818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527008328
    },
    {
        "content": "<p>I don't care either way</p>",
        "id": 126932819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527008328
    },
    {
        "content": "<p>or</p>",
        "id": 126932820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527008328
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">topological_space</span><span class=\"bp\">.</span><span class=\"n\">open_immersion</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">tX</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">tY</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">continuous</span> <span class=\"n\">φ</span> <span class=\"bp\">∧</span>\n  <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">injective</span> <span class=\"n\">φ</span> <span class=\"bp\">∧</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">tX</span><span class=\"bp\">.</span><span class=\"n\">is_open</span> <span class=\"n\">U</span> <span class=\"bp\">→</span> <span class=\"n\">tY</span><span class=\"bp\">.</span><span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">φ</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 126932821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527008328
    },
    {
        "content": "<p>and don't know enough about how things work to know which choice is best</p>",
        "id": 126932822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527008328
    },
    {
        "content": "<p>There's already <code>embedding</code>, by the way. So you could also just add <code>is_open (range f)</code> to that and use <code>embedding_open</code>.</p>",
        "id": 126933209,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527008782
    },
    {
        "content": "<p>I doubt it matters much which exact definition you take, as you can write lemmas to prove that other definitions are equivalent. Whether to use a <code>structure</code> or not is probably more important, but depends on what you want to do with it.</p>",
        "id": 126933294,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527008929
    },
    {
        "content": "<p>Oh, your structure is indexed on <code>f</code> also; then it's just a matter of taste I think.</p>",
        "id": 126933483,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527009163
    },
    {
        "content": "<p>I like structures for organizing things that are linked by and statements, I prefer giving names to the hypotheses rather than referring to them as <code>and.left and.left ...</code> etc</p>",
        "id": 126939770,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527017005
    },
    {
        "content": "<p>One thing to consider is how you use <code>simp</code> and <code>@[simp]</code> theorems. With a structure, you have control over what is simplified by carefully choosing where you place your <code>@[simp]</code>s. With nested conjunctions, you are at the mercy of the existing <code>@[simp]</code> theorems. (Of course, you can “work around” this; it's just a matter of how simple your proofs will be.) On the other hand, with conjunctions, you may find that it's easier to work with simplified proofs, given how much already exists to simplify them. (Of course, you can recover this ease by writing <code>@[simp]</code> theorems to do the conversion from the structure to conjunctions. But there goes your control, too.)</p>",
        "id": 126962847,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527057305
    },
    {
        "content": "<p>Another advantage of giving the fields names is that if for some reason you want to change the underlying definition, you can do it in a way that's somewhat transparent by making functions with the names of the old fields.</p>",
        "id": 126969745,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527069816
    },
    {
        "content": "<p>Though this doesn't help if you tend to use pattern matching / implicit constructor syntax</p>",
        "id": 126969806,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527069892
    }
]