[
    {
        "content": "<p>I think the time has come that I really want to have notation for <code>linear_pmap R E F</code>, but I have no good idea. The natural choices would be <code>E →ₗₚ[R] F</code> or <code>E →ₚₗ[R] F</code>, but <code>lp</code> feels very wrong and I am not convinced about <code>pl</code> either. Are there maybe some good-looking arrows that could be used in conjunction with <code>l</code>?</p>",
        "id": 291240636,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659036733
    },
    {
        "content": "<p>A dashed arrow, to illustrate that it's partial?</p>",
        "id": 291240857,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659036829
    },
    {
        "content": "<p><code>⇢</code> this one would be nice, but in VSCode it looks almost identical to the usual arrow.</p>",
        "id": 291241252,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659037046
    },
    {
        "content": "<p>or am I just blind?</p>",
        "id": 291241265,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659037060
    },
    {
        "content": "<p>I guess this one is used already <code>⇀</code></p>",
        "id": 291241575,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659037205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/116395-maths/topic/Notation.20for.20.60linear_pmap.60/near/291241252\">said</a>:</p>\n<blockquote>\n<p><code>⇢</code> this one would be nice, but in VSCode it looks almost identical to the usual arrow.</p>\n</blockquote>\n<p>Actually I find them more different in VScode than on Zulip.</p>",
        "id": 291241935,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659037399
    },
    {
        "content": "<p>Why not stick with the <code>→.</code> notation from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pfun\">docs#pfun</a> ? So something like <code>→ₗ.</code> ? Or is it too subtle ?</p>",
        "id": 291252374,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659042555
    },
    {
        "content": "<p>because I did not know that that exists <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 291254738,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659043953
    },
    {
        "content": "<p>Is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_pfun\">docs#linear_pfun</a> actually implemented with <code>pfun</code>?</p>",
        "id": 291255585,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659044405
    },
    {
        "content": "<p>No (<a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_pmap\">docs#linear_pmap</a>)</p>",
        "id": 291255677,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1659044458
    },
    {
        "content": "<p>Sorry, I am writing this from a brick (aka my phone).</p>",
        "id": 291255746,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659044504
    },
    {
        "content": "<p>Then that sounds like a semidangerous association of symbols.</p>",
        "id": 291255807,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659044525
    },
    {
        "content": "<p>Why do you think this is semidangerous? I don't think the two definitions will ever be used in the same file</p>",
        "id": 291257405,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659045424
    },
    {
        "content": "<p>Semidangerous is not dangerous! Otherwise it wouldn't be called semidangerous.</p>",
        "id": 291309143,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659093603
    },
    {
        "content": "<p>but I've asked why it is semidangerous. and could you define that?</p>",
        "id": 291310511,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659094684
    },
    {
        "content": "<p>Because I can see people finding both and assuming <code>linear_pmap</code> is implemented using <code>pfun</code>, but it's a mild concern, really.</p>",
        "id": 291310613,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1659094795
    },
    {
        "content": "<p>I don't think we should worry about this, you should never assume anything about implementation details from notation anyway.</p>",
        "id": 291314807,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1659097847
    },
    {
        "content": "<p>fyi the PR is here <a href=\"https://github.com/leanprover-community/mathlib/pull/15751\">#15751</a></p>",
        "id": 291324939,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1659100384
    },
    {
        "content": "<p>I don't think it's all that misleading to associate this with <code>pfun</code>. It very naturally induces one</p>",
        "id": 291366337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659120722
    },
    {
        "content": "<p>I would argue this is the \"natural generalization\" of <code>pfun</code> to linear maps</p>",
        "id": 291366583,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1659120833
    }
]