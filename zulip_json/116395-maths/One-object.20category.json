[
    {
        "content": "<p>Hi, do we have a way to turn any monoid into <code>End</code> of a one-object category? I want to prove some facts for categories, then transfer them to monoids. It shouldn't be hard to define such thing (e.g., using a type tag on <code>unit</code>) but I'd prefer not to reinvent the wheel.<br>\nBTW, if this type tag does not exist yet, what would be a good name for it?</p>",
        "id": 169727432,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562351136
    },
    {
        "content": "<p>Is there standard notation for this in maths?</p>",
        "id": 169727730,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562351449
    },
    {
        "content": "<p>I know <code>BG</code> for groups...</p>",
        "id": 169727739,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562351459
    },
    {
        "content": "<p>Maybe <code>monoid.categorify</code>?</p>",
        "id": 169727859,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562351619
    },
    {
        "content": "<p>Algebra is not my field of study, and I failed to find standard notation.</p>",
        "id": 169727966,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562351746
    },
    {
        "content": "<p>Let it be <code>monoid.categorify</code></p>",
        "id": 169728022,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562351769
    },
    {
        "content": "<p>I'm not sure what exactly you're proposing here, so I can't help with the name.</p>",
        "id": 169733248,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1562357578
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>  I want to have <code>def my_type_tag : Type u → Type := λ _, unit</code> with <code>instance : category_theory.has_hom (my_type_tag α) := { hom : λ _ _, α }</code> and <code>instance : category_theory.category_struct {α} [monoid α] (my_type_tag α) := { id := λ _, 1, comp := λ _ _ _ x y, x * y }</code> (probably with some changes to make this code work).</p>",
        "id": 169734129,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562358530
    },
    {
        "content": "<p>oh! I see.</p>",
        "id": 169734158,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1562358589
    },
    {
        "content": "<p>I would call it <code>turtle</code>, but that is very idiosyncratic. (Say a \"k-boring n-category\" is an n-category such that there is a unique j-morphism for j &lt;= k. As examples, monoids are 1-boring 1-categories, monoidal categories are 1-boring 2-categories, and braided monoidal categories are 2-boring 3-categories, and symmetric monoidal categories are k-boring (k+1)-categories for any k &gt;= 3. Whenever I need to name these otherwise nameless unique morphisms, I call them \"turtle\", because \"it's turtles all the way down\".)</p>",
        "id": 169734349,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1562358793
    },
    {
        "content": "<p>Sorry, I know nothing about n-categories. After reading an intro part of the Wikipedia page, it seems that 1-categories are just categories. Then 1-boring 1-categories are categories such that there is a unique morphism (same as 1-morphism?). But I need one object, not one morphism. Do I miss something?</p>",
        "id": 169734954,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562359491
    },
    {
        "content": "<p>Ah: \"0-morphisms\" just means \"objects\", so a 1-boring 1-category is exactly a monoid.</p>",
        "id": 169735557,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1562360330
    },
    {
        "content": "<p>Then you probably mean \"for j &lt; k\", not \"for j ≤ k\".<br>\nThe main issue with the name \"turtle\" is that it seems to be neither a standard term in math, nor a descriptive word. May be, \"categorify\" is better.</p>",
        "id": 169735718,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562360537
    },
    {
        "content": "<p>Yes, you're right, &lt;, not &lt;=.</p>",
        "id": 169735994,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1562360975
    },
    {
        "content": "<p>The problem is that \"categorify\" means something specific, and it isn't this.</p>",
        "id": 169736005,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1562360999
    },
    {
        "content": "<p>X, an n-category, is a categorification of Y, an (n-1)-category, if when you throw out the n-morphisms in X, and replace the n-1 morphisms with isomorphism classes, you get Y.</p>",
        "id": 169736226,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1562361267
    },
    {
        "content": "<p>So for example the monoidal category <code>Vec</code> is a categorification of the monoid <code>nat</code> under multiplication.</p>",
        "id": 169736267,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1562361356
    },
    {
        "content": "<p>OK, then <code>one_obj_category</code>.</p>",
        "id": 169736337,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562361437
    },
    {
        "content": "<p>I've just realized that the \"public\" function will turn <code>α</code> into <code>α</code> interpreted as <code>End unit.star</code> in this category. Probably, it should be called <code>as_End</code> or <code>to_End</code>.</p>",
        "id": 169736573,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1562361811
    },
    {
        "content": "<p>The delooping of a monoid is a one-object category (because the 'loops' in the category are exactly the elements of the monoid)</p>",
        "id": 170830282,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1563103656
    },
    {
        "content": "<p>What is delooping? Is it already in mathlib?</p>",
        "id": 170832033,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563106904
    },
    {
        "content": "<p>see section 6 of this nLab <a href=\"https://ncatlab.org/nlab/show/delooping\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/delooping\">article</a> (it means what you think it means)</p>",
        "id": 170832358,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1563107504
    },
    {
        "content": "<p>or as some people are fond of saying, \"a category is just a monoidoid!\"</p>",
        "id": 170832398,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1563107523
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> I'm lost after a few lines (have to lookup the meaning of every other word). I think, I'll define the single object category in a straightforward manner; if someone will define delooping in a general context later, it would be easy to prove equivalence in this particular case, or even replace my definition.</p>",
        "id": 170834260,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1563111166
    },
    {
        "content": "<p>yeah that should be fine; for the case of monoid -&gt; one object category, it's hard to go wrong</p>",
        "id": 170835326,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1563113030
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> What do you think about composition getting all messed up now that we try to mix category theory and the rest of the library?</p>",
        "id": 171396149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563758801
    },
    {
        "content": "<p>I know that there is only one right way to do compositions, and it is the one that is used in the category theory library.</p>",
        "id": 171396158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563758838
    },
    {
        "content": "<p>However, if I had to choose between converting the world to \"the one right composition\" or \"formalisation of maths\", then I would choose the latter.</p>",
        "id": 171396164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563758874
    },
    {
        "content": "<p>At the moment, I think this is actively confusing for people.</p>",
        "id": 171396207,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563758889
    },
    {
        "content": "<p>Is the composition order in <code>category_theory</code> open for debate?</p>",
        "id": 171396209,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563758907
    },
    {
        "content": "<p>Sure, of course.</p>",
        "id": 171396464,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563759437
    },
    {
        "content": "<p>My suggestion would be to not change anything, just chose a new unicode symbol for morphism-composition that looks not entirely unlike \\circ, and define two notations.</p>",
        "id": 171396507,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563759491
    },
    {
        "content": "<p>One could later rip out use of the \\gg notation if desired, but I don't think there's any need to change the underlying form of <code>category.comp</code>. Or is there?</p>",
        "id": 171396518,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563759533
    },
    {
        "content": "<p>As far as I'm aware, this is purely a notational mismatch.</p>",
        "id": 171396526,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563759543
    },
    {
        "content": "<p>I think technically it is a notational mismatch. But there is also a psychological component. Several people (mathematicians working in algebra/geometry) whom I've showed Lean/mathlib were quite confused by the convention.</p>",
        "id": 171396665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563759732
    },
    {
        "content": "<p>But have some circ-like symbol might be a good start.</p>",
        "id": 171396671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563759752
    },
    {
        "content": "<p>There's the degree symbol, which is typeset a bit higher than the usual <code>\\circ</code>, e.g. as <code>f ° g</code>.</p>",
        "id": 171397790,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563761492
    },
    {
        "content": "<p>Or there's <code>⊚</code></p>",
        "id": 171397820,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563761522
    },
    {
        "content": "<p>which you can already type as <code>\\oo</code></p>",
        "id": 171397856,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563761623
    }
]