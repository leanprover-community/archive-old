[
    {
        "content": "<p>I noticed that there are two ways to extend a permutation from a subtype to the ambient type, either via <code>.of_subtype</code>, or via <code>.extend_domain</code>. <br>\n For both of them, there are some lemmas that compare properties of the subpermutation with those of the larger one, but not all. Also, the two different definitions are not compared.</p>\n<p>I needed this lemma :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">equiv.perm.of_subtype_eq_extend_domain</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)}</span> <span class=\"o\">:</span> <span class=\"n\">g.of_subtype</span> <span class=\"bp\">=</span> <span class=\"n\">g.extend_domain</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">dec_em</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">equiv.perm.extend_domain_apply_subtype</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">equiv.perm.of_subtype_apply_of_mem</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">equiv.perm.extend_domain_apply_not_subtype</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">))</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">equiv.perm.of_subtype_apply_of_not_mem</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>In particular, because I needed that one : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">equiv.perm.of_subtype.cycle_type</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">p</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">equiv.perm</span> <span class=\"o\">(</span><span class=\"n\">subtype</span> <span class=\"n\">p</span><span class=\"o\">)}</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"n\">g.of_subtype</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cycle_type</span> <span class=\"bp\">=</span> <span class=\"n\">g.cycle_type</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">equiv.perm.of_subtype_eq_extend_domain</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">equiv.perm.cycle_type_extend_domain</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>Did I miss something ?</p>",
        "id": 298180355,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1662845707
    },
    {
        "content": "<p>Probably the best thing to do would be to redefine <code>of_subtype</code> in terms of <code>extend_domain</code>?</p>",
        "id": 298204123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1662873409
    },
    {
        "content": "<p>(for reference: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.of_subtype\">docs#equiv.perm.of_subtype</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.perm.extend_domain\">docs#equiv.perm.extend_domain</a>)</p>",
        "id": 298237506,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1662895102
    },
    {
        "content": "<p>Ok! I'll do that…</p>",
        "id": 298318506,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1662963471
    },
    {
        "content": "<p>This is PR <a href=\"https://github.com/leanprover-community/mathlib/pull/16484\">#16484</a></p>",
        "id": 298427469,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1663003485
    }
]