[
    {
        "content": "<p>I'd like to implement conjugation as a <code>mul_action</code> (so that, among other things, we can use orbit-stabilizer theory to study centralizers) and there are a few ideas which come to mind as to how to do this:</p>",
        "id": 238691910,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620945638
    },
    {
        "content": "<ul>\n<li>Define a type synonym</li>\n<li>Have this be the default instance of <code>mul_action (units M) M</code> for any monoid <code>M</code>.</li>\n</ul>",
        "id": 238691978,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620945705
    },
    {
        "content": "<p>The second seems ideal to me, but I fear that I'll run into trouble. It seems that there isn't a global instance already of the form <code>mul_action (units M) M</code>, but are there any special cases where that does pop up?</p>",
        "id": 238692087,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620945765
    },
    {
        "content": "<p>Will the coercion of <code>units M</code> to <code>M</code> make this intractible?</p>",
        "id": 238692156,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620945833
    },
    {
        "content": "<p>So you want <code>a • b</code> to mean \"conjugate b by a\"? This feels really confusing to me, purely from a notation point of view.</p>",
        "id": 238692313,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620945931
    },
    {
        "content": "<p>Only if <code>a</code> is a <code>units M</code>... otherwise we will have something like <code>a • conj_action b</code></p>",
        "id": 238692521,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620946064
    },
    {
        "content": "<p>But still, I would tend to think that <code>a • b</code> should mean <code>↑a * b</code> when <code>a : units M</code> and <code>b : M</code>.</p>",
        "id": 238692666,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620946132
    },
    {
        "content": "<p>Perhaps it can be a local instance throughout a particular file?</p>",
        "id": 238692675,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620946139
    },
    {
        "content": "<p>I've seen some notation like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mrow></mrow><mi>a</mi></msup><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">{}^a b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">b</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo>⋅</mo><mi>b</mi><mo>⋅</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding=\"application/x-tex\">a \\cdot b \\cdot a^{-1}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 238692728,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620946186
    },
    {
        "content": "<p>And similarly <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>b</mi><mi>a</mi></msup><mo>=</mo><msup><mi>a</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>⋅</mo><mi>b</mi><mo>⋅</mo><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">b^a = a^{-1} \\cdot b \\cdot a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">a</span></span></span></span>.</p>",
        "id": 238692793,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620946207
    },
    {
        "content": "<p>Can we try to emulate something like that?</p>",
        "id": 238692804,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620946217
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>b</mi><mi>a</mi></msup></mrow><annotation encoding=\"application/x-tex\">b^a</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span></span></span></span> is nice because it's a right action so you have the nice formula <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msup><mi>b</mi><mi>a</mi></msup><msup><mo stretchy=\"false\">)</mo><mi>c</mi></msup><mo>=</mo><msup><mi>b</mi><mrow><mi>a</mi><mi>c</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">(b^a)^c = b^{ac}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">a</span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">c</span></span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 238692909,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620946305
    },
    {
        "content": "<p>If someone knows how to make a <code>mul_action</code> have that notation, I can work with it. But if I want to, say, refer to a <code>stabilizer</code> in a given group action, I'm pretty sure I need at least a local <code>mul_action</code> instance, in which the action is denoted with <code>•</code></p>",
        "id": 238693163,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620946499
    },
    {
        "content": "<p>Yeah, I understand, that's a fair point.</p>",
        "id": 238693348,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620946608
    },
    {
        "content": "<p>Maybe a general approach is to define a mul_action as a def whenever you have a morphism of monoids from a monoid <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> to the endomorphism monoid of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>, in the usual way. This would be a special case of that, and you can make it a local instance when needed.</p>",
        "id": 238693429,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620946678
    },
    {
        "content": "<p>Unfortunately....</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>",
        "id": 238693527,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620946726
    },
    {
        "content": "<p>I have an open PR that chooses a different default <code>mul_action (units M)</code> ...</p>",
        "id": 238693548,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620946743
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Conjugation.20Action/near/238693548\">said</a>:</p>\n<blockquote>\n<p>I have an open PR that chooses a different default <code>mul_action (units M)</code> ...</p>\n</blockquote>\n<p>oooof</p>",
        "id": 238693573,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620946762
    },
    {
        "content": "<p>Is it the multiplication of the coercion?</p>",
        "id": 238693578,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620946764
    },
    {
        "content": "<p>Mainly because we already have lots of lemmas about it</p>",
        "id": 238693588,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620946768
    },
    {
        "content": "<p>Yes</p>",
        "id": 238693592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620946770
    },
    {
        "content": "<p>back to type-synonym land I crawl</p>",
        "id": 238693695,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1620946818
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/7438\">#7438</a></p>",
        "id": 238693700,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620946820
    },
    {
        "content": "<p>Strictly it's the action of the coercion, not the multiplication</p>",
        "id": 238693855,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620946914
    },
    {
        "content": "<p>gotcha</p>",
        "id": 238693908,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620946932
    },
    {
        "content": "<p>Eg <code>units rat</code> has the \"obvious\" action on <code>fin 3 -&gt; rat</code></p>",
        "id": 238694020,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620946984
    },
    {
        "content": "<p>That's great.</p>",
        "id": 238694055,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620946998
    },
    {
        "content": "<p>Next you should define projective spaces!</p>",
        "id": 238694096,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620947033
    },
    {
        "content": "<p>Responding to an earlier message:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">monoid.End</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- works?</span>\n</code></pre></div>",
        "id": 238694512,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620947303
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid.End.monoid\">docs#monoid.End.monoid</a></p>",
        "id": 238694554,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620947324
    },
    {
        "content": "<p>Hence</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">show</span> <span class=\"n\">monoid</span> <span class=\"o\">(</span><span class=\"n\">monoid.End</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"kd\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- works :)</span>\n</code></pre></div>",
        "id": 238694635,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620947388
    },
    {
        "content": "<p>(I know...)</p>",
        "id": 238694758,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620947442
    },
    {
        "content": "<p>(for anyone who doesn't know, that conflicts with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.comm_monoid\">docs#monoid_hom.comm_monoid</a>)</p>",
        "id": 238694816,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1620947488
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Conjugation.20Action/near/238694816\">said</a>:</p>\n<blockquote>\n<p>(for anyone who doesn't, that conflicts with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.comm_monoid\">docs#monoid_hom.comm_monoid</a>)</p>\n</blockquote>\n<p>aka the \"pointwise\" structure</p>",
        "id": 238694901,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1620947534
    }
]