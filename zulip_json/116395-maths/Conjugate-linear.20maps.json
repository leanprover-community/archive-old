[
    {
        "content": "<p>How should conjugate-linear maps be implemented?</p>\n<ul>\n<li>Does it need to be more general than just for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span>, like maybe some finite extensions of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span>?  At the moment in the related <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sesq_form\">docs#sesq_form</a>, there is a one-off definition using a ring isomorphism <code>I : R ≃+* Rᵒᵖ</code>.  Is this the right setting in general? <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> </li>\n<li>Does the entire API of linear maps need to be duplicated?  Or is there a trick to borrow the lemmas without re-proving them?</li>\n</ul>\n<p>Question motivated by <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> 's new PR <a href=\"https://github.com/leanprover-community/mathlib/issues/4379\">#4379</a>, although the PR shouldn't be delayed for this.</p>",
        "id": 212314258,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601911042
    },
    {
        "content": "<p>In number theory we encounter Frobenius linear maps... but Frobenius rarely has order two.</p>",
        "id": 212319033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601913141
    },
    {
        "content": "<p>I don't think you should wait with this definition till we have a complete semi-linear algebra library.</p>",
        "id": 212319074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601913169
    },
    {
        "content": "<p>We also work a lot with CM fields, which behave very similar to the pair <code>(real, complex)</code>, but I wouldn't wait for those either.</p>",
        "id": 212319124,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1601913202
    },
    {
        "content": "<p>You can certainly define maps which are semilinear with respect to any morphism of (semi)rings. I think this covers all cases, right?</p>",
        "id": 212319797,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601913491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/Conjugate-linear.20maps/near/212319797\">said</a>:</p>\n<blockquote>\n<p>You can certainly define maps which are semilinear with respect to any morphism of (semi)rings. I think this covers all cases, right?</p>\n</blockquote>\n<p>Would this be the first definition, and then the existing linear algebra library be derived from it as a special case?  I will not sign up to do that refactor myself :)</p>",
        "id": 212320290,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601913672
    },
    {
        "content": "<p>There's also a trick that's fairly common in number theory where you consider a semilinear map as a linear map using the base-change.</p>",
        "id": 212320321,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601913683
    },
    {
        "content": "<p>But would be happy enough for someone else to do it.</p>",
        "id": 212320335,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601913686
    },
    {
        "content": "<p>I think it might make sense to have a general version and a continuous version, mirroring <code>linear_map</code> and <code>continuous_linear_map</code>.</p>",
        "id": 212320352,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1601913692
    },
    {
        "content": "<p>Another trick: conjugate-linear is linear to the<br>\n<a href=\"https://en.wikipedia.org/wiki/Complex_conjugate_vector_space\">https://en.wikipedia.org/wiki/Complex_conjugate_vector_space</a></p>",
        "id": 212320389,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601913706
    },
    {
        "content": "<p>That might be fastest.</p>",
        "id": 212320480,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601913726
    },
    {
        "content": "<p>Yeah, that's exactly the base-change trick :)</p>",
        "id": 212320501,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1601913733
    },
    {
        "content": "<p>Are complex conjugate vector spaces defined yet?</p>",
        "id": 212320530,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1601913747
    },
    {
        "content": "<p>I don't think so.  But probably not too hard?</p>",
        "id": 212320594,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1601913782
    },
    {
        "content": "<p>Right. Yeah that's probably the best way to do it.</p>",
        "id": 212320638,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1601913805
    }
]