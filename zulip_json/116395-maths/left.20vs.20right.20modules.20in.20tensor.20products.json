[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> What's your proposal then? \"Use left modules everywhere, except if you intend to use it on the left side of a tensor product, then use symmetric ones\" still sounds weird to me</p>",
        "id": 262056350,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637322422
    },
    {
        "content": "<p>I'm afraid that the length of this thread has gotten to the point where I'm no longer certain which problem we're trying to solve any more</p>",
        "id": 262056935,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637322899
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 262056965,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637322917
    },
    {
        "content": "<p>Oh, you mean \"using a <em>type</em> <code>M</code> on the left side of a tensor product means it needs a right-action by <code>R</code>\"?</p>",
        "id": 262057029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637322963
    },
    {
        "content": "<p>The underlying problem is that we don't have a good theory of non-commutative algebra, and it's getting to the point where we are really going to need this (e.g. we want to do some representation theory), and I would actively encourage <span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> to work on this important problem and thank them for initiating the discussion! Maybe Reid's suggestion about just going with <code>left_module</code> and <code>right_module</code> is worth trying?</p>",
        "id": 262057217,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637323115
    },
    {
        "content": "<p>I agree, it's great that <span class=\"user-mention\" data-user-id=\"110789\">@Jakob von Raumer</span> is thinking hard about this</p>",
        "id": 262057439,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637323233
    },
    {
        "content": "<p>(Oh, also I remembered the other place where I wanted symmetric actions; I wanted to generalize <a href=\"https://leanprover-community.github.io/mathlib_docs/find/derivation\">docs#derivation</a> so that I could use it on square matrices, without breaking all the existing commutative uses)</p>",
        "id": 262057483,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637323278
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/116395-maths/topic/ideals.20in.20non-comm.20rings/near/261998082\">said</a>:</p>\n<blockquote>\n<p>But I'd be happy for you to PR it, happy for everything that breaks my PR into smaller pieces ^^</p>\n</blockquote>\n<p>I plan to do this once <a href=\"https://github.com/leanprover-community/mathlib/issues/10302\">#10302</a> has gone through</p>",
        "id": 262057580,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637323326
    },
    {
        "content": "<p>And then we can use the current <code>module</code> + the  <code>is_symmetric_smul</code> from that future PR to compare the other proposals in this thread against.</p>",
        "id": 262057641,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637323382
    },
    {
        "content": "<p>Yes, let me recap the problem again, how do I move a huge chunk of messages to a new topic? This is still called \"ideals in non-comm rings\" which is a bit misleading ^^'</p>",
        "id": 262058009,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637323577
    },
    {
        "content": "<p>If you can find the message that you think changed the topic, you can edit the topic for that message, and every message after it will change too</p>",
        "id": 262058266,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637323744
    },
    {
        "content": "<p>If there are individual message that end up in the wrong place after that, you can PM me or another maintainer to move them using our zulip powers</p>",
        "id": 262058295,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637323772
    },
    {
        "content": "<p>I think the discussions never went back to being about ideals :D</p>",
        "id": 262058429,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637323848
    },
    {
        "content": "<p>Ideal</p>",
        "id": 262058495,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637323882
    },
    {
        "content": "<p>So to recap: </p>\n<ul>\n<li>Commutative algebraists want to have \"If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-modules, so is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M \\otimes_R N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>, also <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mi>m</mi><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>n</mi><mo>=</mo><mi>m</mi><mo>⊗</mo><mo stretchy=\"false\">(</mo><mi>r</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(rm) \\otimes n = m \\otimes (rn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> is part of the definition of the tensor product\".</li>\n<li>On the other hand non-commutative algebraists want \"If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>-<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-bimodule and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is a left <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M \\otimes_R N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>-module and the defn of the tensor product includes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>m</mi><mi>r</mi><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>n</mi><mo>=</mo><mi>m</mi><mo>⊗</mo><mi>r</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">(mr) \\otimes n = m \\otimes rn</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">n</span></span></span></span>.</li>\n<li>The current implementation satisfies the first version, but not the second one. One way to change this is to remove the commutativity requirement and (to get) the equation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mi>m</mi><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>n</mi><mo>=</mo><mi>m</mi><mo>⊗</mo><mo stretchy=\"false\">(</mo><mi>r</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(rm) \\otimes n = m \\otimes (rn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>, which is used a lot all over mathlib, require that in many cases <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is not just an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module but a symmetric <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-bimodule. But this means we have to add an instance of <code>module (opposite R) M</code> whenever we want to talk about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M \\otimes_R N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> as an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> module. Which is quite often.</li>\n<li>As <span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> mentions, the whole dilemma doubles pretty analogously in with the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-linear maps <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><mo>→</mo><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M \\to N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span>.</li>\n<li>Several people now have told me that it's more common to use the term \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-module\" meaning \"symmetric <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-bimodule\" in general, even if we only write the $$r$$s on the left. It's definitely more intuitive than needing to provide two extra instances whenever we want to plug in a module in a tensor product.</li>\n</ul>",
        "id": 262059841,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637324833
    },
    {
        "content": "<p>To give another good example: We get the category of <code>Module R</code>s but can't get the <em>monoidal</em> category of <code>Module R</code>s even if <code>R</code> is commutative.</p>",
        "id": 262062265,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637326443
    },
    {
        "content": "<p>How far does the following get us:</p>\n<ul>\n<li>Rename <code>module</code> to <code>left_module</code></li>\n<li>Define <code>abbreviation right_module := left_module (Rᵒᵖ) M</code>. We won't make any instances of this (beyond <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semiring.to_opposite_module\">docs#semiring.to_opposite_module</a>), but it's good for a human reader</li>\n<li>Do the above for the other typeclasses like <code>mul_action</code> too</li>\n<li>Define <code>class module (R M) extends left_module R M, right_module R M, is_symmetric_smul R Rᵒᵖ M</code></li>\n</ul>",
        "id": 262062767,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637326762
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262059841\">said</a>:</p>\n<blockquote>\n<p>\"[...] also <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mi>m</mi><mo stretchy=\"false\">)</mo><mo>⊗</mo><mi>n</mi><mo>=</mo><mi>m</mi><mo>⊗</mo><mo stretchy=\"false\">(</mo><mi>r</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(rm) \\otimes n = m \\otimes (rn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> is part of the definition of the tensor product\"</p>\n</blockquote>\n<p>I use this formula all the time. But I've never considered it <em>part of the definition</em>. The definition uses <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>r</mi><mo>⊗</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">mr ⊗ n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>. And the formula is obtained in the special case that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is a symmetric <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-bimodule.</p>",
        "id": 262062791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637326776
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> If there are no instances of <code>right_module</code>, how would notation for right actions work?</p>",
        "id": 262063202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637326956
    },
    {
        "content": "<p>Well it just finds instances of <code>left_module (opposite R) M</code> because it's an abbreviation</p>",
        "id": 262063238,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637326989
    },
    {
        "content": "<p>And <code>m &lt;• r</code> would be notation for <code>(to_opposite r) • m</code>, or something like that?</p>",
        "id": 262063344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637327045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262062791\">said</a>:</p>\n<blockquote>\n<p>I use this formula all the time. But I've never considered it <em>part of the definition</em>. The definition uses <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>r</mi><mo>⊗</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">mr ⊗ n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>. And the formula is obtained in the special case that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is a symmetric <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-bimodule.</p>\n</blockquote>\n<p>Okay, thanks. That's in line with my PR then. <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> Unfortunately it's at odds with a good chunk of mathlib.</p>",
        "id": 262063544,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637327184
    },
    {
        "content": "<p>Yes, so I would assume symm R-R-bimod everywhere, in a first refactor PR.</p>",
        "id": 262063786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637327328
    },
    {
        "content": "<p>Later PRs can then weaken those assumptions, by flipping the sides of some actions.</p>",
        "id": 262063817,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637327354
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262062767\">said</a>:</p>\n<blockquote>\n<p>How far does the following get us:</p>\n<ul>\n<li>Rename <code>module</code> to <code>left_module</code></li>\n<li>Define <code>abbreviation right_module := left_module (Rᵒᵖ) M</code>. We won't make any instances of this (beyond <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semiring.to_opposite_module\">docs#semiring.to_opposite_module</a>), but it's good for a human reader</li>\n<li>Do the above for the other typeclasses like <code>mul_action</code> too</li>\n<li>Define <code>class module (R M) extends left_module R M, right_module R M, is_symmetric_smul R Rᵒᵖ M</code></li>\n</ul>\n</blockquote>\n<p>That's roughly what Reid suggested. IIRC the issue you mentioned is that we will have lots of lemmas/construction about <code>left_module R M</code> which will not automatically carry over to <code>module R M</code> in the case where <code>R</code> is commutative, do you think that's a problem?</p>",
        "id": 262063992,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637327472
    },
    {
        "content": "<p>Why wouldn't they carry over?</p>",
        "id": 262064014,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637327488
    },
    {
        "content": "<p>There'd be a <code>module.to_left_module</code> instance</p>",
        "id": 262064034,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637327501
    },
    {
        "content": "<p><code>[module R M]</code> would be nothing but a shorthand for <code>[left_module R M] [left_module (opposite R) M] [is_symmetric_smul R M]</code></p>",
        "id": 262064113,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637327530
    },
    {
        "content": "<p>Oh right, yes. Thanks. I flipped the directions around in my head. So we will make sure we prove as little as possible about <code>module</code> and as much as possible about <code>left_module</code>...</p>",
        "id": 262064148,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637327554
    },
    {
        "content": "<p>Yes, exactly; it's the same as <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_domain\">docs#is_domain</a> vs <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nontrivial\">docs#nontrivial</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/no_zero_divisors\">docs#no_zero_divisors</a></p>",
        "id": 262064184,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637327576
    },
    {
        "content": "<p>Where the former exists only because the latter is an annoying spelling</p>",
        "id": 262064224,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637327603
    },
    {
        "content": "<p>I would probably recommend doing the rename separately from the tensor product refactor</p>",
        "id": 262064258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637327625
    },
    {
        "content": "<p>Perhaps afterwards</p>",
        "id": 262064267,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637327635
    },
    {
        "content": "<p>Doing it afterwards has the advantage of knowing exactly where we have to assume the symmetry. So I'll just continue and add <code>module (opposite R) M</code> and <code>is_symmetric_smul R M</code> where needed, ok?</p>",
        "id": 262064413,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637327713
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262062767\">said</a>:</p>\n<blockquote>\n<p>How far does the following get us:</p>\n<ul>\n<li>Define <code>abbreviation right_module := left_module (Rᵒᵖ) M</code>. We won't make any instances of this (beyond <a href=\"https://leanprover-community.github.io/mathlib_docs/find/semiring.to_opposite_module\">docs#semiring.to_opposite_module</a>), but it's good for a human reader</li>\n</ul>\n</blockquote>\n<p>So the advantage of using this encoding is we don't have to duplicate a lot of definitions/lemmas, but I suspect we would need to do some work anyways to make sure the encoding does not \"leak\", e.g., we will need a lemma that says <code>(m &lt;• r) &lt;• s = m &lt;• (r * s)</code> without any mention of <code>opposite</code>.</p>\n<p>Though I can't think of any examples where this would happen, there's also the possibility that someone might want to consider an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mrow><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">R^{\\mathrm{op}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">op</span></span></span></span></span></span></span></span></span></span></span></span></span>-<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-bimodule, which seems very difficult with this encoding. That's why I would tend to prefer a more \"nominal\" distinction between left and right actions.</p>",
        "id": 262067704,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637329627
    },
    {
        "content": "<p>I guess it will happen, but maybe not often. E.g., at some point you want to relate K-theory of <code>Rᵒᵖ</code> with K-theory of <code>R</code>. Things like that.</p>",
        "id": 262067964,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637329766
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262067704\">said</a>:</p>\n<blockquote>\n<p>which seems very difficult with this encoding</p>\n</blockquote>\n<p>Why?</p>",
        "id": 262068520,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637330047
    },
    {
        "content": "<p>Because it means you have to reason about two different instances of <code>left_module (Rᵒᵖ) M</code> at once, right?</p>",
        "id": 262068592,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637330100
    },
    {
        "content": "<p>Ah right, it might work to make an irreducible definition for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>:</mo><mo>=</mo><msup><mi>R</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">R&#x27; := R^{op}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7519em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7519em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> in this case</p>",
        "id": 262068864,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637330229
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262067704\">said</a>:</p>\n<blockquote>\n<p>we will need a lemma that says <code>(m &lt;• r) &lt;• s = m &lt;• (r * s)</code> without any mention of <code>opposite</code></p>\n</blockquote>\n<p><code>smul_smul</code> would still be the right lemma, it might just be that the naming for some lemmas is off because they don't read from left to right anymore.</p>",
        "id": 262069052,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637330312
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262068592\">said</a>:</p>\n<blockquote>\n<p>Because it means you have to reason about two different instances of <code>left_module (Rᵒᵖ) M</code> at once, right?</p>\n</blockquote>\n<p>Sounds like a job for another type synonym.</p>",
        "id": 262069154,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637330385
    },
    {
        "content": "<p>But that's not really satisfactory because <code>Rᵒᵖ</code> was something that already existed and we might want to prove things about. e.g. continuing Johan's suggestion, two rings <code>R</code> and <code>S</code> are Morita equivalent if there is an <code>R</code>-<code>S</code>-bimodule and an <code>S</code>-<code>R</code>-bimodule such that tensoring them together yields <code>R</code> or <code>S</code> (depending on the order). Now <code>Rᵒᵖ</code> sometimes is Morita equivalent to <code>R</code> (e.g. for <code>R</code> commutative) and sometimes isn't; for example I randomly found <a href=\"https://arxiv.org/abs/1305.5139\">https://arxiv.org/abs/1305.5139</a> which is about this question.</p>\n<p><strong>If</strong> it's impractical to talk about Morita equivalence of <code>Rᵒᵖ</code> and <code>R</code> (because <code>Rᵒᵖ</code> was \"used up\" by <code>right_module</code>; I am not sure whether this would really be a problem in practice), then it's not really satisfactory to say \"welp, let's just phrase this theorem in terms of <code>Rᵒᵖ'</code> instead\".</p>",
        "id": 262070238,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637330890
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262070238\">said</a>:</p>\n<blockquote>\n<p>two rings <code>R</code> and <code>S</code> are Morita equivalent if there is an <code>R</code>-<code>S</code>-bimodule and an <code>S</code>-<code>R</code>-bimodule such that tensoring them together yields <code>R</code> or <code>S</code> (depending on the order).</p>\n</blockquote>\n<p>Are we anywhere close to being able to state this anyway? Does \"yields\" mean \"isomorphic as a module\"?</p>",
        "id": 262070568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637331030
    },
    {
        "content": "<p>And what if<code>right_module</code> is the one consuming the new <code>op</code>-like type synonym?</p>",
        "id": 262070583,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637331037
    },
    {
        "content": "<p>I would lean towards just going ahead with \"using up\" opposite in this way, for the sake of:</p>\n<blockquote>\n<p>So the advantage of using this encoding is we don't have to duplicate a lot of definitions/lemmas</p>\n</blockquote>\n<p>and then revaluate once we have a working implementation to see what the problems look like</p>",
        "id": 262071074,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637331275
    },
    {
        "content": "<p>I think that once we have a definition of the tensor product in the non-commutative setting, then defining Morita equivalence is easy.<br>\nSo in that sense, we are just as close to stating Morita equivalence as to solving the problems in this thread <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 262071075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637331275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262070583\">said</a>:</p>\n<blockquote>\n<p>And what if<code>right_module</code> is the one consuming the new <code>op</code>-like type synonym?</p>\n</blockquote>\n<p>Then you don't have this problem, but you might have to do more work to relate right modules over <code>R</code> to left modules over <code>Rᵒᵖ</code> instead, I guess?</p>",
        "id": 262071170,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637331340
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262070568\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262070238\">said</a>:</p>\n<blockquote>\n<p>two rings <code>R</code> and <code>S</code> are Morita equivalent if there is an <code>R</code>-<code>S</code>-bimodule and an <code>S</code>-<code>R</code>-bimodule such that tensoring them together yields <code>R</code> or <code>S</code> (depending on the order).</p>\n</blockquote>\n<p>Are we anywhere close to being able to state this anyway? Does \"yields\" mean \"isomorphic as a module\"?</p>\n</blockquote>\n<p>e.g. \"yields <code>R</code>\" means \"is isomorphic to <code>R</code> as an <code>R</code>-<code>R</code>-bimodule\"</p>",
        "id": 262071205,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637331360
    },
    {
        "content": "<p>\"<code>N</code> is isomorphic to <code>M</code> as an <code>R</code>-<code>S</code>-bimodule\" feels like something we're quite a way from being able to state</p>",
        "id": 262071308,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637331404
    },
    {
        "content": "<p>We'd need maps that are linear over multiple rings</p>",
        "id": 262071331,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637331417
    },
    {
        "content": "<p>Unless we phrase it as \"<code>N</code> is isomorphic to <code>M</code> as an <code>R ⊗[nat] S</code>-module\", assuming that makes any sense</p>",
        "id": 262071505,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637331491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262071331\">said</a>:</p>\n<blockquote>\n<p>We'd need maps that are linear over multiple rings</p>\n</blockquote>\n<p>Not \"multiple\" rings. Two rings! There are only two places where a ring can act, the left and the right</p>",
        "id": 262071942,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637331702
    },
    {
        "content": "<p>Nevertheless. We just had a pretty impressive refactor that gave us semi-linear maps. I don't know what Lean will think of us if we start explaining it about bi-semi-linear maps. If we want to keep it readable, we'll put quite some strain on the system, I fear.</p>",
        "id": 262072135,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637331789
    },
    {
        "content": "<p>Anyways I think the more important question is whether it actually helps to use this encoding of right modules as left modules over the opposite ring at all</p>",
        "id": 262072353,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637331901
    },
    {
        "content": "<p>I guess it only solves part of the problem anyways because right modules over <code>Rᵒᵖ</code> will be left modules over<code>(Rᵒᵖ)ᵒᵖ</code> which is not what we want</p>",
        "id": 262072545,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637331982
    },
    {
        "content": "<p>I don't know what's best, but the point I wanted to make is it's not a \"free win\" to use the encoding with <code>opposite</code></p>",
        "id": 262073058,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637332241
    },
    {
        "content": "<p>Dumb question, why \"left and \"right\"? Does it never happen to consider more than two actions?</p>",
        "id": 262073799,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637332631
    },
    {
        "content": "<p>Either its <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>r</mi><mi>s</mi><mo stretchy=\"false\">)</mo><mi>m</mi><mo>=</mo><mi>r</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(rs)m=r(sm)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">rs</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span> or it's <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mi>s</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>m</mi><mi>r</mi><mo stretchy=\"false\">)</mo><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">m(rs)=(mr)s</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">rs</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">s</span></span></span></span>, so there are only two ways mulitplication and action can associate.</p>",
        "id": 262074275,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637332823
    },
    {
        "content": "<p>Number theorists love count the number of embeddings of a number field into the real / complex numbers so this gives multiple (left) actions of the same ring on the same target but I can't think of a situation where we'd want to regard anything like this as a module.</p>",
        "id": 262074731,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1637333045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262072353\">said</a>:</p>\n<blockquote>\n<p>Anyways I think the more important question is whether it actually helps to use this encoding of right modules as left modules over the opposite ring at all</p>\n</blockquote>\n<p>We should keep in mind that in Lean 4</p>\n<ul>\n<li>We can write the feature providing <code>to_additive</code> in a more general way which could auto-generate <code>rsmul</code>-lemmas from <code>smul</code>-lemmas.</li>\n<li>We can have cycles in the type class system, so we <em>will</em> be able to have <code>instance [comm_ring R] [left_module R M] : symmetric_module R M</code>.</li>\n</ul>",
        "id": 262074738,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637333048
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>  It's like how the ring of a x a matrices acts on the left on the vector space of a x b matrices, and the ring of b x b matrices acts on the right.</p>",
        "id": 262074863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1637333106
    },
    {
        "content": "<blockquote>\n<p>We can have cycles in the type class system, so we will be able to have <code>instance [comm_ring R] [left_module R M] : symmetric_module R M</code>.</p>\n</blockquote>\n<p>This isn't true, that instance constructs data in a way that will almost certainly create diamonds</p>",
        "id": 262074880,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637333115
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262074863\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span>  It's like how the ring of a x a matrices acts on the left on the vector space of a x b matrices, and the ring of b x b matrices acts on the right.</p>\n</blockquote>\n<p>Do we have that instance? If not, that sounds like an easy undergrad warmup project</p>",
        "id": 262074941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637333147
    },
    {
        "content": "<p>Ah so it's stemming the fact that multplication is binary?</p>",
        "id": 262075024,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637333169
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262074880\">said</a>:</p>\n<blockquote>\n<p>This isn't true, that instance constructs data in a way that will almost certainly create diamonds</p>\n</blockquote>\n<p>Well, diamonds would appear exactly in the cases where we had a <code>right_module R M</code> beforehand?</p>",
        "id": 262075112,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637333227
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262075024\">said</a>:</p>\n<blockquote>\n<p>Ah so it's stemming the fact that multplication is binary?</p>\n</blockquote>\n<p>Fundamentally there are four types of instance in mathlib:</p>\n<ul>\n<li>Instances that derive from left-multiplication, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_mul.to_has_scalar\">docs#has_mul.to_has_scalar</a></li>\n<li>Instances that derive from right-multiplication, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_mul.to_has_opposite_scalar\">docs#has_mul.to_has_opposite_scalar</a></li>\n<li>Instances that derive from application, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/function.End.apply_mul_action\">docs#function.End.apply_mul_action</a></li>\n<li>weird special cases that don't really fit with the rest of the picture</li>\n</ul>\n<p>By \"derive\" I mean \"products get this elementwise, polynomials get this coefficient-wise, functions get this codomain-wise, ...\"</p>",
        "id": 262075154,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637333267
    },
    {
        "content": "<p>What I meant is that there are exactly two <em>ways</em> in which a (noncommutative) ring can act, from the left or from the right. I guess you could also consider something with multiple compatible left actions (presumably by different rings to avoid confusion).</p>",
        "id": 262075233,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637333295
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262075024\">said</a>:</p>\n<blockquote>\n<p>Ah so it's stemming the fact that multplication is binary?</p>\n</blockquote>\n<p>It's ultimately because multiplication in a noncommutative ring is multiplication of a sequence of elements <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>b</mi><mi>c</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi>x</mi><mi>y</mi><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">abc...xyz</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">ab</span><span class=\"mord mathnormal\">c</span><span class=\"mord\">...</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">yz</span></span></span></span>, and this sequence has two ends (a left end and a right end) where you could put a module instead.</p>",
        "id": 262075349,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637333356
    },
    {
        "content": "<p>In the commutative case you just multiply an unordered collection of elements together and so there's only one \"place\" to put an element of a module, so there is only one kind of module over a commutative ring</p>",
        "id": 262075480,
        "sender_full_name": "Reid Barton",
        "timestamp": 1637333404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262075112\">said</a>:</p>\n<blockquote>\n<p>Well, diamonds would appear exactly in the cases where we had a <code>right_module R M</code> beforehand?</p>\n</blockquote>\n<p>Yes, but for any sort of composite type there will likely always be a <code>right_module R M</code> instance available; If <code>M</code> is a product type, the instance will exist that derives the instance from a right action on each half of the product.</p>\n<p>That instance will be incompatible with the instance that derives a <code>right_module</code> from a <code>symm_module</code>, and derives a <code>symm_module</code> from each half, because even in a commutative ring <code>a * b = b * a</code> is not defeq</p>",
        "id": 262075589,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637333460
    },
    {
        "content": "<p>Thanks, good point.</p>",
        "id": 262075902,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637333612
    },
    {
        "content": "<p>Usually the way to avoid this type of diamond is to avoid ever constructing new data when inferring <code>foo A</code> from <code>bar A</code></p>",
        "id": 262076058,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637333669
    },
    {
        "content": "<p>I was just fixing a file which requires a symmetric version of <code>[algebra R A]</code>. It's probably sufficient to do it with <code>[algebra R A] [has_scalar (opposite R) A] [is_symmetric_smul R A]</code>  and derive an instance <code>[algebra (opposite R) A]</code> instead of creating a new class for the symmetry of algebras...</p>",
        "id": 262332281,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637594234
    },
    {
        "content": "<blockquote>\n<p>and derive an instance <code>[algebra (opposite R) A]</code> </p>\n</blockquote>\n<p>This instance should already exist in the places you need it</p>",
        "id": 262333216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637594643
    },
    {
        "content": "<p>That is, you should be using <code>[algebra R A] [algebra (opposite R) A] [is_symmetric_smul R A]</code></p>",
        "id": 262333293,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637594665
    },
    {
        "content": "<p>But doesn't that introduce maps <code>f : R →+* A</code> and <code>g : (opposite R) →+* A</code> which have no connection with each other?</p>",
        "id": 262333595,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637594820
    },
    {
        "content": "<p><code>is_symmetric_smul</code> only matches up the scalar part, not the ring hom</p>",
        "id": 262333658,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637594847
    },
    {
        "content": "<p>Sure, but you can prove the ring_homs are equal via <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra.smul_def\">docs#algebra.smul_def</a>; it already is fully defined by the scalar part</p>",
        "id": 262335124,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637595437
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">monoid</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid</span> <span class=\"n\">N</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">distrib_mul_action</span> <span class=\"n\">R</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">N</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">distrib_mul_action</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">N</span>\n</code></pre></div>\n<p>Any ideas on this? Probably worth first tranferring various classes of actions along equivalences...</p>",
        "id": 262594488,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637763663
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/units.distrib_mul_action\">docs#units.distrib_mul_action</a>?</p>",
        "id": 262597186,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637764983
    },
    {
        "content": "<p>Combined with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_opposite.distrib_mul_action\">docs#mul_opposite.distrib_mul_action</a></p>",
        "id": 262597253,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637765024
    },
    {
        "content": "<p>Are you missing an import of <code>group_theory.group_action.opposite</code>?</p>",
        "id": 262597325,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637765045
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262597253\">said</a>:</p>\n<blockquote>\n<p>Combined with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_opposite.distrib_mul_action\">docs#mul_opposite.distrib_mul_action</a></p>\n</blockquote>\n<p>That's taking the opposite on the type that's operated on.</p>",
        "id": 262597856,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637765285
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262597325\">said</a>:</p>\n<blockquote>\n<p>Are you missing an import of <code>group_theory.group_action.opposite</code>?</p>\n</blockquote>\n<p>Do you mean <code>algebra.opposites</code>? That's the file I'm working in</p>",
        "id": 262597910,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637765312
    },
    {
        "content": "<p><code>algebra.opposites</code> was split in <del>two</del> three, you must be behind master</p>",
        "id": 262597957,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637765340
    },
    {
        "content": "<p>Ouch, okay, I'll rebase</p>",
        "id": 262597983,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637765354
    },
    {
        "content": "<p>(Though the question still stands)</p>",
        "id": 262598036,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637765384
    },
    {
        "content": "<p>I assume <code>distrib_mul_action (units Rᵒᵖ) N</code> works fine?</p>",
        "id": 262598049,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637765392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262598049\">said</a>:</p>\n<blockquote>\n<p>I assume <code>distrib_mul_action (units Rᵒᵖ) N</code> works fine?</p>\n</blockquote>\n<p>Yes, and we have an equivalence between <code>units Rᵒᵖ</code> and <code>(units R)ᵒᵖ</code>...</p>",
        "id": 262598133,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637765421
    },
    {
        "content": "<p>Yeah, I think the instance is missing and needs to be added manually, and can't be reasonably inferred transitively</p>",
        "id": 262598185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637765451
    },
    {
        "content": "<p>There are probably quite some of these that might pop up...</p>",
        "id": 262598245,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637765480
    },
    {
        "content": "<p>I think I have a local unsaved buffer with the relevant code in it...</p>",
        "id": 262598288,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637765504
    },
    {
        "content": "<p>Yep</p>",
        "id": 262598397,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637765529
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.units</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.opposites</span>\n\n<span class=\"c1\">-- turn off the bad instance we're tring to fix</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">units.mul_action'</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">units</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! Right actions on units - I can't think if a good way to inherit these from anything we already</span>\n<span class=\"cm\">have -/</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">units.op_has_scalar</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_scalar</span> <span class=\"n\">M</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">um</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">um.unop</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">a</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">units.op_mul_action</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">M</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">um</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">um.unop</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">one_smul</span> <span class=\"n\">M</span><span class=\"bp\">ᵒᵖ</span> <span class=\"o\">:</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">um</span> <span class=\"n\">un</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">um.unop</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">un.unop</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)),</span> <span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">! Notation just to make the intent behind the sorried lemma clear. -/</span>\n\n<span class=\"kd\">notation</span> <span class=\"n\">g</span><span class=\"bp\">`</span> <span class=\"bp\">•&gt;</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"n\">m</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"o\">:=</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">m</span>\n<span class=\"kd\">notation</span> <span class=\"n\">m</span><span class=\"bp\">`</span> <span class=\"bp\">&lt;•</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">73</span> <span class=\"n\">g</span><span class=\"o\">:</span><span class=\"mi\">72</span> <span class=\"o\">:=</span> <span class=\"n\">opposite.op</span> <span class=\"n\">g</span> <span class=\"bp\">•</span> <span class=\"n\">m</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">smul_mul_inv_smul</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span>\n    <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">smul_assoc</span><span class=\"o\">]</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">((</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">))</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"o\">{</span>\n    <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">op_smul_eq_mul</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">op_smul_eq_mul</span><span class=\"o\">],</span>\n    <span class=\"gr\">sorry</span> <span class=\"c1\">-- we need `is_scalar_tower` for right actions</span>\n    <span class=\"o\">}</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">units.mul_inv</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">•&gt;</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"gr\">sorry</span>  <span class=\"c1\">-- `smul_comm_class` is too strong here</span>\n<span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_right_inv</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span>\n\n<span class=\"k\">#print</span> <span class=\"n\">group</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">inv_smul_mul_smul</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">G</span> <span class=\"n\">M</span><span class=\"bp\">ᵒᵖ</span> <span class=\"n\">M</span><span class=\"bp\">ᵒᵖ</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">opposite.op_injective</span> <span class=\"bp\">$</span> <span class=\"n\">smul_mul_inv_smul</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">units.op_equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">m</span><span class=\"o\">))</span>\n\n<span class=\"sd\">/-- A fixed version of `units.mul_action'`. -/</span>\n<span class=\"kd\">instance</span> <span class=\"n\">better_mul_action'</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">G</span> <span class=\"n\">M</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"o\">⟨</span><span class=\"n\">g</span> <span class=\"bp\">•&gt;</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">⁻¹</span><span class=\"o\">)</span> <span class=\"bp\">&lt;•</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">smul_mul_inv_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">inv_smul_mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">units.ext</span> <span class=\"bp\">$</span> <span class=\"n\">one_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">units.ext</span> <span class=\"bp\">$</span> <span class=\"n\">mul_smul</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- note: now only needs monoid not comm_monoid!</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">units.better_mul_action'</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">α</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">monoid.to_mul_action</span> <span class=\"n\">_</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span> <span class=\"c1\">-- ok, no diamond any more</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">units</span>\n</code></pre></div>",
        "id": 262598408,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637765533
    },
    {
        "content": "<p>I guess that was in response to some thread about <code>units.mul_action'</code> being bad</p>",
        "id": 262598491,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637765580
    },
    {
        "content": "<p>Ah, okay, <code>units.mul_action'</code> should not interfere with the PR</p>",
        "id": 262598672,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637765667
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262597983\">said</a>:</p>\n<blockquote>\n<p>Ouch, okay, I'll rebase</p>\n</blockquote>\n<p>That's one messy rebase <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 262612313,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637772017
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/10345/files\">https://github.com/leanprover-community/mathlib/pull/10345/files</a> Why is this showing a real diff for <code>algebra.opposites</code> if that file doesn't exist anymore in <code>master</code>?</p>",
        "id": 262617076,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637774176
    },
    {
        "content": "<p>A merge would likely be a lot easier</p>",
        "id": 262635983,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637785110
    },
    {
        "content": "<p>If you rebase n commits you can end up solving n conflicts, with a merge there's just one conflict.</p>",
        "id": 262636050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637785154
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262635983\">said</a>:</p>\n<blockquote>\n<p>A merge would likely be a lot easier</p>\n</blockquote>\n<p>I don't think it made a difference, it's mostly the renamings from <code>opposite</code> to <code>mul_opposite</code>...</p>",
        "id": 262679132,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637829890
    },
    {
        "content": "<p>Made some progress today, but <code>linear_algebra.alternating</code> is still a bit stubborn. There is something wrong with a type class in there, but the issue seems so just have been patched over before. <a href=\"https://github.com/leanprover-community/mathlib/blob/noncomm_tensor_product/src/linear_algebra/alternating.lean#L594\">Here</a> is one of the problematic lines, the other is were it fails at the bottom of the file...</p>",
        "id": 262712406,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637850810
    },
    {
        "content": "<p>FWIW the trace of the problematic search is <a href=\"https://gist.github.com/javra/9f5f8b3f3b255fd00d72f00c22759db4\">here</a></p>",
        "id": 262716429,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637852785
    },
    {
        "content": "<p>The message at the bottom looks more like a diamond, but I'm not sure what's going on there either</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">tensor_product.tmul_smul</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">units.is_symmetric_smul</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">is_symmetric_smul</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.monoid</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units.has_scalar</span> <span class=\"n\">ℤ</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">int.monoid</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units.op_has_scalar</span> <span class=\"n\">ℤ</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"n\">int.monoid</span> <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">is_symmetric_smul</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.monoid</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_action.to_has_scalar</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.monoid</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">div_inv_monoid.to_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.monoid</span><span class=\"o\">)</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">group.to_div_inv_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.monoid</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units.group</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.monoid</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib_mul_action.to_mul_action</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.monoid</span><span class=\"o\">)</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">div_inv_monoid.to_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.monoid</span><span class=\"o\">)</span>\n             <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">group.to_div_inv_monoid</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.monoid</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">units.group</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.monoid</span><span class=\"o\">)))</span>\n          <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_monoid.to_add_monoid</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span><span class=\"o\">)</span>\n          <span class=\"bp\">?</span><span class=\"n\">m_3</span><span class=\"o\">))</span>\n    <span class=\"bp\">?</span><span class=\"n\">m_4</span>\n</code></pre></div>",
        "id": 262718604,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637853906
    },
    {
        "content": "<p>These are the typeclasses need for <code>algebra_tensor_module.assoc</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">_inst_1</span><span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">R</span>\n<span class=\"n\">_inst_2</span><span class=\"o\">:</span> <span class=\"n\">comm_semiring</span> <span class=\"n\">A</span>\n<span class=\"n\">_inst_3</span><span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span>\n<span class=\"n\">_inst_4</span><span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">A</span>\n<span class=\"n\">_inst_5</span><span class=\"o\">:</span> <span class=\"n\">is_symmetric_smul</span> <span class=\"n\">R</span> <span class=\"n\">A</span>\n<span class=\"n\">_inst_6</span><span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">M</span>\n<span class=\"n\">_inst_7</span><span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n<span class=\"n\">_inst_8</span><span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span>\n<span class=\"n\">_inst_9</span><span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n<span class=\"n\">_inst_10</span><span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"n\">M</span>\n<span class=\"n\">_inst_11</span><span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span>\n<span class=\"n\">_inst_12</span><span class=\"o\">:</span> <span class=\"n\">is_symmetric_smul</span> <span class=\"n\">A</span> <span class=\"n\">M</span>\n<span class=\"n\">_inst_13</span><span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">M</span>\n<span class=\"n\">_inst_14</span><span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">A</span> <span class=\"n\">M</span>\n<span class=\"n\">_inst_15</span><span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span>\n<span class=\"n\">_inst_16</span><span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">N</span>\n<span class=\"n\">_inst_17</span><span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">N</span>\n<span class=\"n\">_inst_18</span><span class=\"o\">:</span> <span class=\"n\">is_symmetric_smul</span> <span class=\"n\">R</span> <span class=\"n\">N</span>\n<span class=\"n\">_inst_19</span><span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">P</span>\n<span class=\"n\">_inst_20</span><span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">P</span>\n<span class=\"n\">_inst_21</span><span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">A</span> <span class=\"n\">P</span>\n<span class=\"n\">_inst_22</span><span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"n\">P</span>\n<span class=\"n\">_inst_23</span><span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">P</span>\n<span class=\"n\">_inst_24</span><span class=\"o\">:</span> <span class=\"n\">is_symmetric_smul</span> <span class=\"n\">R</span> <span class=\"n\">P</span>\n<span class=\"n\">_inst_25</span><span class=\"o\">:</span> <span class=\"n\">smul_comm_class</span> <span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span>\n<span class=\"n\">_inst_26</span><span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">A</span> <span class=\"n\">P</span>\n<span class=\"n\">_inst_27</span><span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">P</span>\n<span class=\"n\">_inst_28</span><span class=\"o\">:</span> <span class=\"n\">is_symmetric_smul</span> <span class=\"n\">A</span> <span class=\"n\">P</span>\n<span class=\"n\">_inst_29</span><span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">R</span> <span class=\"n\">P</span>\n<span class=\"n\">_inst_30</span><span class=\"o\">:</span> <span class=\"n\">smul_comm_class</span> <span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n</code></pre></div>",
        "id": 262804509,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637937835
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 262804924,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637938079
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra_tensor_module.assoc\">docs#algebra_tensor_module.assoc</a></p>",
        "id": 262805089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1637938196
    },
    {
        "content": "<p>Some of these might be made into instances, certain combination if <code>is_scalar_tower</code> and <code>is_symmetric_smul</code> especially.</p>",
        "id": 262805141,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637938205
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262805089\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra_tensor_module.assoc\">docs#algebra_tensor_module.assoc</a></p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/tensor_product.algebra_tensor_module.assoc\">docs#tensor_product.algebra_tensor_module.assoc</a></p>",
        "id": 262805228,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637938256
    },
    {
        "content": "<p>I think we need <a href=\"https://github.com/javra/mathlib/blob/noncomm_tensor_product/src/linear_algebra/tensor_product/left_action.lean\">tensor_product.left_action</a> to be accompanied by a second file about the respective right action. <code>ring_theory.tensor_product</code> is missing this at some points</p>",
        "id": 262806578,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1637939015
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/262806578\">said</a>:</p>\n<blockquote>\n<p>I think we need <a href=\"https://github.com/javra/mathlib/blob/noncomm_tensor_product/src/linear_algebra/tensor_product/left_action.lean\">tensor_product.left_action</a> to be accompanied by a second file about the respective right action. <code>ring_theory.tensor_product</code> is missing this at some points</p>\n</blockquote>\n<p>Okay, the next issue is that these things overlap: We want the right action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M \\otimes_R N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> to come from a right action on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> and the left action of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span> on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi><msub><mo>⊗</mo><mi>R</mi></msub><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">M \\otimes_R N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\"><span class=\"mbin\">⊗</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span> to come from a left action on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span>. But if for example <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> is an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>-<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span>-bimodule, there's already the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">S^{op}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> action on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">M</span></span></span></span> that induces an action on the tensor product, that is because right actions are defined as a special case of left actions.</p>\n<p>Any ideas on how to deal with this?</p>",
        "id": 262997768,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1638186673
    },
    {
        "content": "<p>Yes, this was the problem I was describing much earlier, and I'm not sure how to solve it</p>",
        "id": 263006547,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638191864
    },
    {
        "content": "<p>Having separate <code>right_mul R</code> and <code>left_mul R</code> types instead of <code>opposite R</code> and <code>R</code> would work, but I suspect that would be very painful</p>",
        "id": 263006739,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638191946
    },
    {
        "content": "<p>My suspicion is that when such a case arises in practice the two actions are equal anyway propositionally, and to just accept the definitional typeclass diamond for now</p>",
        "id": 263006905,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638192009
    },
    {
        "content": "<p>We only have an instance <code>algebra R (A ⊗[R] B)</code> but need one for the \"right algebra\" (do people actually consider those?), too. So I guess we should find a good generalisation of <code>algebra.tensor_product.tensor_product.algebra</code> (that name...) that captures both</p>",
        "id": 263009733,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1638193505
    },
    {
        "content": "<p>I guess the problem would be solved if we completely uncouple left and right actions. But that would mean a lot of duplication.</p>",
        "id": 263010966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638194207
    },
    {
        "content": "<p>AFAIK \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra\" only ever makes sense when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is commutative</p>",
        "id": 263010992,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638194230
    },
    {
        "content": "<p>To comment on Reid's point: \"R-algebra\" indeed requires R to be commutative and furthermore that the action of R is central in the algebra, i.e. the image of R is in the center of the algebra. There is the more general notion, sometimes called an R-ring, where R can be non-commutative (a reformulation is that an R-ring is a monoid object in the category of R-R-bimodules.</p>",
        "id": 263012457,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1638194882
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/263010992\">said</a>:</p>\n<blockquote>\n<p>AFAIK \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra\" only ever makes sense when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is commutative</p>\n</blockquote>\n<p>Sure, but right now that's decoupled from the question of whether the scalar can act on the right. So with the current approach of my PR, we need <code>algebra Rᵐᵒᵖ (A ⊗[R] B)</code></p>",
        "id": 263012611,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1638194946
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/263010966\">said</a>:</p>\n<blockquote>\n<p>I guess the problem would be solved if we completely uncouple left and right actions. But that would mean a lot of duplication.</p>\n</blockquote>\n<p>Hm, I'm not sure if I should continue the current PR until there's a decision on this :(</p>",
        "id": 263012736,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1638195015
    },
    {
        "content": "<p>(The tensor product algebra issue is an issue dependent on this, though, sorry for brining both points up at once ^^)</p>",
        "id": 263012857,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1638195083
    },
    {
        "content": "<p>Completely uncoupling only seems feasible if there is a tactic <code>@[to_right_action]</code> that autogenerates all the duplicate lemmas.</p>",
        "id": 263013130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638195238
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/263012611\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/263010992\">said</a>:</p>\n<blockquote>\n<p>AFAIK \"<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-algebra\" only ever makes sense when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is commutative</p>\n</blockquote>\n<p>Sure, but right now that's decoupled from the question of whether the scalar can act on the right. So with the current approach of my PR, we need <code>algebra Rᵐᵒᵖ (A ⊗[R] B)</code></p>\n</blockquote>\n<p>It always acts on the right too, by the same action (because R is central).</p>",
        "id": 263014447,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638195860
    },
    {
        "content": "<p>So, generally speaking, <code>algebra R A</code> should induce <code>algebra Rᵐᵒᵖ A</code>, even if <code>A</code> is not commutative?</p>",
        "id": 263018345,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1638197657
    },
    {
        "content": "<p>Ah, I guess that makes sense if the action is central...</p>",
        "id": 263018499,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1638197744
    },
    {
        "content": "<p>An R-algebra is a monoid in R-modules taken in the commutative sense, where there is no \"left\" or \"right\".</p>",
        "id": 263020025,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638198395
    },
    {
        "content": "<p>In the current hierarchy where it extends <code>module</code>,  it inherits a sense of \"left\" and \"right\"</p>",
        "id": 263022542,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1638199526
    },
    {
        "content": "<p>But yea, if there's no conceivable scenario where there's a distinction, we should just have an instance adding the symmetric action</p>",
        "id": 263022986,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1638199715
    },
    {
        "content": "<p>It's not safe today to add that instance, we already discussed why much earlier in the thread</p>",
        "id": 263027035,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638201368
    },
    {
        "content": "<p>Probably the way to go here is to add an <code>op_smul_def</code> and <code>op_smul</code> field to algebras, so that they can decay to either left or right modules with the right definitional equality</p>",
        "id": 263027189,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638201441
    },
    {
        "content": "<p>How many <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebra\">docs#algebra</a> instances would that mean we have to fix?</p>",
        "id": 263028123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638201768
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/263027035\">said</a>:</p>\n<blockquote>\n<p>It's not safe today to add that instance, we already discussed why much earlier in the thread</p>\n</blockquote>\n<p>Sorry, I keep forgetting about that issue...</p>",
        "id": 263030105,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1638202555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/263027189\">said</a>:</p>\n<blockquote>\n<p>Probably the way to go here is to add an <code>op_smul_def</code> and <code>op_smul</code> field to algebras, so that they can decay to either left or right modules with the right definitional equality</p>\n</blockquote>\n<p>That would mean that <code>algebra R A</code> implies an instance of both <code>module R A</code>, <code>module (opposite R) A</code> and <code>is_symmetric_smul R A</code>, right?</p>",
        "id": 263030608,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1638202767
    },
    {
        "content": "<p>Yes, exactly</p>",
        "id": 263031771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638203185
    },
    {
        "content": "<p>And <code>smul_comm_class R Rᵒᵖ A</code> too</p>",
        "id": 263031906,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638203238
    },
    {
        "content": "<p>It probably being enough to constitute another PR, I'll nevertheless go ahead and just add an  instance for <code>algebra Rᵐᵒᵖ (A ⊗[R] B)</code> as a workaround until then...</p>",
        "id": 263071693,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1638222198
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/263013130\">said</a>:</p>\n<blockquote>\n<p>Completely uncoupling only seems feasible if there is a tactic <code>@[to_right_action]</code> that autogenerates all the duplicate lemmas.</p>\n</blockquote>\n<p>Uncoupling would also solve the issue about \"usability\". The way it is now, we have variables <code>r : opposite R</code>, which we have to rewrite backwards <code>op_unop</code> to really get the notation on the right side we'd expect....</p>",
        "id": 263080502,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1638227334
    },
    {
        "content": "<p>I just made a spinoff PR (<a href=\"https://github.com/leanprover-community/mathlib/issues/10543\">#10543</a>) that defines <code>is_symmetric_smul</code>, but with all the instances as early as possible instead of all in one place</p>",
        "id": 263082026,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638228338
    },
    {
        "content": "<p>Just fixed to spots where <code>apply @tensor_product.ext_threefold R</code> gave a timeout but <code>apply @tensor_product.ext_threefold R _</code> works fine <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 263141470,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1638277973
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> Thanks for that PR. I guess there is no harm in merging it, even if we later decide that completely uncoupling left and right actions is the way to go. Right?</p>",
        "id": 263544323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638516990
    },
    {
        "content": "<p>Even if we uncouple we'll still want a class for that compatibility</p>",
        "id": 263544477,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638517143
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/263027189\">said</a>:</p>\n<blockquote>\n<p>Probably the way to go here is to add an <code>op_smul_def</code> and <code>op_smul</code> field to algebras, so that they can decay to either left or right modules with the right definitional equality</p>\n</blockquote>\n<p>I started having a go at this in <a href=\"https://github.com/leanprover-community/mathlib/pull/10716\">#10716</a></p>",
        "id": 264561819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639227930
    },
    {
        "content": "<p>Did the search and replace now, but I guess for everything else, <a href=\"https://github.com/leanprover-community/mathlib/pull/10716\">#10716</a> should be merged first</p>",
        "id": 265569885,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1640010442
    },
    {
        "content": "<p>The diamonds from <a href=\"https://github.com/leanprover-community/mathlib/pull/10716\">#10716</a> probably will not be a problem for the time being.</p>",
        "id": 265570088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640010580
    },
    {
        "content": "<p>Still, I wonder if we should find a once-and-for-all solution to these problems. Making <code>add_comm_monoid</code> bigger and bigger all the time doesn't seem like the correct solution to me.</p>",
        "id": 265570194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640010622
    },
    {
        "content": "<p>Or maybe it is?</p>",
        "id": 265570205,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640010631
    },
    {
        "content": "<p>I showed one of my kids the definition yesterday and they said \"oh cool you can override powers, you can use that to make exponentiation more computationally efficient\"</p>",
        "id": 265571619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640011421
    },
    {
        "content": "<p>And you replied: \"but we want it to be more efficient for <em>proving</em>!\" <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span></p>",
        "id": 265571744,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1640011489
    },
    {
        "content": "<p>but we have the API for that!</p>",
        "id": 265572228,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640011722
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/265570088\">said</a>:</p>\n<blockquote>\n<p>The diamonds from <a href=\"https://github.com/leanprover-community/mathlib/pull/10716\">#10716</a> probably will not be a problem for the time being.</p>\n</blockquote>\n<p>Yes, but all algebras being central will save me lots of edits...</p>",
        "id": 265572519,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1640011857
    },
    {
        "content": "<p>Maybe now is a good time to define central simple algebras?</p>",
        "id": 265572680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640011931
    },
    {
        "content": "<p>I would be very happy to see these generalisations merged. I think they are very important to get (different flavours of) non-commutative algebra going.</p>",
        "id": 265572911,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1640012047
    },
    {
        "content": "<p>I don't know what's the status of <a href=\"https://github.com/leanprover-community/mathlib/pull/10716\">#10716</a>. <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> ?</p>",
        "id": 265573604,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1640012364
    },
    {
        "content": "<p>It needed a few other dependent PRs first I think</p>",
        "id": 265576254,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640013513
    },
    {
        "content": "<p>And generally working through all 70 instances of <code>algebra</code></p>",
        "id": 265576287,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640013535
    },
    {
        "content": "<p>I think I'm through about 25 of them</p>",
        "id": 265576302,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640013544
    },
    {
        "content": "<p>The most annoying part of the change seems to be that <code>module.End R M</code> is now only an algebra when <code>M</code> is a bimodule</p>",
        "id": 265576465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640013613
    },
    {
        "content": "<p>But mathematically the distinction is meaningless given R is commutative anyway, so it's nothing more than an annoyance</p>",
        "id": 265576914,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640013811
    },
    {
        "content": "<p>I share Johan's view that the new diamonds are unlikely to cause any trouble any time soon.</p>",
        "id": 265577237,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640013940
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/265576465\">said</a>:</p>\n<blockquote>\n<p>The most annoying part of the change seems to be that <code>module.End R M</code> is now only an algebra when <code>M</code> is a bimodule</p>\n</blockquote>\n<p>This makes sense to me as Hom_R(M,N) has the structure of an S-T-bimodule if M is an R-S-bimodule and N is an R-T-bimodule. You should have to assume an instance <code>is_central_scalar</code> to get an algebra structure on End R M.</p>",
        "id": 265579253,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1640014913
    },
    {
        "content": "<p>That comment worries me, as it seems to describe a <code>S</code> action on <code>f : M →ₗ[R] N</code> that comes from <code>M</code> alone. Is that action<code>(s • f) m = f (s • m)</code>? We don't have any actions like that in mathlib right now, and if we did we'd have some troubling diamonds</p>",
        "id": 265682437,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640091758
    },
    {
        "content": "<p>That is the action, but it is a right action. Why it is a problem for Hom and not for the tensor product? There the analogue is that if M is an R-S-bimodule and N is an S-T-bimodule, then M\\otimes N is an R-T-bimodule. (The standard convention is that when saying R-S-bimodule, the R-action is from the left while the S-action is from the right.)</p>",
        "id": 265683251,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1640092332
    },
    {
        "content": "<p>We have a lot of precedent for function-like types that says \"actions operate on the codomain\", where actions includes left and right actions. We don't have much precedent for tensor products to worry about in comparison.</p>",
        "id": 265684093,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640092961
    },
    {
        "content": "<p>(I tried to edit the above to reflect the correct right/left-ness of the actions)</p>",
        "id": 265684384,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640093176
    },
    {
        "content": "<p>Do you have some proposal what to do about that? Non-commutative algebraists definitely want to take about both actions, an action on Hom_R(M,N) induced by a right action on M as well as an action induced by a left action on N. And in general they are different.</p>",
        "id": 265686567,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1640094524
    },
    {
        "content": "<p>The only suggestion I can think of is a <code>dom_act</code> type alias to force the action to apply to the domain</p>",
        "id": 265687624,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640095095
    },
    {
        "content": "<p>But even that doesn't work very well if we want to apply to the second argument of a bilinear function, unless we also have <code>cod_act</code></p>",
        "id": 265687682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640095130
    },
    {
        "content": "<p>If we go down that route, then scaling of <code>fin 3 -&gt; R</code> ends up being written as <code>cod_act r • v</code> which is pretty unpleasant</p>",
        "id": 265687746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640095179
    },
    {
        "content": "<p>There is an important difference between the arrows here (again informally speaking, I don't know how easy it would be for lean to figure out the difference): If you talk about the undecorated arrow <code>fin 3 -&gt; R</code>, then the (left) action on <code>R</code> should come from a (left) action on <code>R</code>. On the other hand, when talking about an action on the decorated arrow <code>M \\to_l [R] N</code>, then the (left) <code>R</code>-action is, loosely speaking, already used, so any left action on this space should come from a right action on <code>M</code> whereas any right action should come from a right action on <code>N</code>.</p>",
        "id": 265695953,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1640099810
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317890\">@Julian Külshammer</span> is right of course: in the special case of linear maps (between compatible bimodules) all is well, at least mathematically, because the space of maps carries just one left action and one right action.</p>",
        "id": 265950524,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640291157
    },
    {
        "content": "<p>But we still have the problem that Mathlib cannot talk about the scalar actions (contravariantly) induced from actions on the domain for general classes of functions. To take a concrete example, I might well want to formalise something about the regular representation of a finite subgroup of non-zero complex numbers.</p>",
        "id": 265950620,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640291250
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.units</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"o\">(</span><span class=\"n\">units</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"> OK so now what does `z • f` mean?</span>\n\n<span class=\"cm\">Informally I might be talking about the (left) regular representation or</span>\n<span class=\"cm\">I might be talking about a pi action, regarding `z` as an element of `ℂ`.</span>\n\n<span class=\"cm\">Because we have so many diamonds (all fortunately defeq) it's not even easy</span>\n<span class=\"cm\">to \"switch off\" the unwanted action locally. E.g., uncomment any one of these</span>\n<span class=\"cm\">`local attribute [-instance]` statements and the `example` below succeeds. -/</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">pi.has_scalar</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">pi.mul_action</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">pi.mul_action_with_zero</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">pi.module</span>\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">pi.algebra</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">•</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 265950742,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640291366
    },
    {
        "content": "<p>Of course what we really have above is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>×</mo><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G × G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> action on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>→</mo><mi mathvariant=\"normal\">C</mi></mrow><annotation encoding=\"application/x-tex\">G \\to ℂ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord amsrm\">C</span></span></span></span> and in Mathlib we single out the first (covariant) factor for priority. More generally:</p>",
        "id": 265950907,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640291501
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.pi</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mul_opposite</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Give M left `A` and right `B` action, aka (A, B)-biaction</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">A</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">B</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- Give N left `C` and right `D` action, aka (C, D)-biaction</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">C</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">D</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- What we really have is a (B × C, A × D)-biaction.</span>\n<span class=\"kd\">instance</span> <span class=\"n\">pi.mul_action_prod</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"bp\">×</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span>     <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">bc</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">bc.snd</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"o\">((</span><span class=\"n\">op</span> <span class=\"n\">bc.fst</span><span class=\"o\">)</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">b₁</span> <span class=\"n\">b₂</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_smul</span><span class=\"o\">],</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- needed because `Aᵐᵒᵖᵐᵒᵖ ≠ A` so have missing `[mul_action Aᵐᵒᵖᵐᵒᵖ M]` issue</span>\n<span class=\"kd\">instance</span> <span class=\"n\">pi.mul_action_prod_op</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"bp\">×</span> <span class=\"n\">D</span><span class=\"bp\">ᵐᵒᵖ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">→</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span>     <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">ad</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ad.snd</span> <span class=\"bp\">•</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ad.fst.unop</span> <span class=\"bp\">•</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"n\">one_smul</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a₁</span> <span class=\"n\">a₂</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">mul_smul</span><span class=\"o\">],</span> <span class=\"o\">},</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 265950920,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640291512
    },
    {
        "content": "<p>I also cannot think of a way to solve this problem except by means of a type synonym for the contravariantly-induced actions.</p>",
        "id": 265951011,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640291568
    },
    {
        "content": "<p>I think we can avoid facing up to this for bimodules but we'll have to confront it eventually.</p>",
        "id": 265951174,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640291668
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> Just to have an example in this conversation: In what area of maths is your more general situation needed?</p>",
        "id": 265961217,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1640300604
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"317890\">@Julian Külshammer</span> how about the example I gave above of the regular representation of a finite group, or more generally the permutation representation associated to the action of a group <code>G</code> on a set <code>X</code>? Given this data one can pick some scalars <code>k</code> and study the representation of <code>G</code> induced on <code>X → k</code>.</p>",
        "id": 266120746,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640542883
    },
    {
        "content": "<p>I gave the example where <code>G</code> is a finite subgroup of <code>ℂ*</code> acting on itself by multiplication and the scalars <code>ℂ</code>  above to show that even informally there can be ambiguity.</p>",
        "id": 266120834,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640542975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span>  Thanks for the examples, but as far as I understand, this seems to be a general pattern for group actions: That there is often more than one you can consider. I remember there being an extensive discussion whether the regular action of a group on itself should be an instance in light of there also being the conjugation action, etc. Do you see an issue with going ahead with the bimodule case?</p>",
        "id": 266249492,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1640688772
    },
    {
        "content": "<p>I don't see an issue with bimodules for the reason you highlighted: restricting to the left/right-linear  maps cuts out two of the group actions so the ambiguity vanishes on these maps.</p>",
        "id": 266249559,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640688840
    },
    {
        "content": "<p>We'll probably just keep putting off issues like this until we are forced to solve / work around them.</p>",
        "id": 266249681,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640688935
    },
    {
        "content": "<p>As I said above, there is even ambiguity when working informally. If <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>:</mo><msup><mi mathvariant=\"normal\">C</mi><mo>∗</mo></msup><mo>→</mo><mi mathvariant=\"normal\">C</mi></mrow><annotation encoding=\"application/x-tex\">f : ℂ^* → ℂ</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord amsrm\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord amsrm\">C</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mo>∈</mo><msup><mi mathvariant=\"normal\">C</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">z ∈ ℂ^*</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6889em;\"></span><span class=\"mord\"><span class=\"mord amsrm\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6887em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span> then what do I mean by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi><mtext>•</mtext><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">z • f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord\">•</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span>?</p>",
        "id": 266249887,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640689081
    },
    {
        "content": "<p>Certainly if G acts on A and B and we have f:A-&gt;B then sometimes (gf)(a) means  g(f(a)) and sometimes g(f(g^{-1}a)). Empirically I think that the former is common when f is known to be G-equivariant (because then the latter action is trivial) and conversely the latter is common when f is just an abelian group homomorphism (in which case the G-equivariant homs are the fixed points under the latter action)</p>",
        "id": 266260253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1640699114
    },
    {
        "content": "<p>So it seems that there is agreement that no action should be preferred for maps f:A-&gt;B but that there is no harm registering an action on f:M-&gt;[R] N for bimodules M and N.</p>",
        "id": 266264596,
        "sender_full_name": "Julian Külshammer",
        "timestamp": 1640702574
    },
    {
        "content": "<p>Yes, to the second clause (about registering an action on linear maps between bimodules) but no to the first clause since we already have a preferred action registered, namely <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_scalar\">docs#pi.has_scalar</a></p>",
        "id": 266264701,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1640702673
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110789\">Jakob von Raumer</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/265573604\">said</a>:</p>\n<blockquote>\n<p>I don't know what's the status of <a href=\"https://github.com/leanprover-community/mathlib/pull/10716\">#10716</a>. <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> ?</p>\n</blockquote>\n<p>I made some more progress, but am now concluding that <code>normed_space</code> and <code>seminormed_space</code> probably want to be two-sided too. That refactor would be twice as easy if <a href=\"https://github.com/leanprover-community/mathlib/pull/8218\">#8218</a> weren't hitting problems</p>",
        "id": 267768742,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1642013312
    },
    {
        "content": "<p>A status update on <a href=\"https://github.com/leanprover-community/mathlib/pull/10716\">#10716</a>: I was able to get past the <code>normed_space</code> and <code>seminormed_space</code> problems, and am back to finding random types that are missing <code>is_central_scalar</code> instances (next up: <code>continuous_linear_map</code>,<code>affine_map</code>, <code>continuous_map</code>)</p>",
        "id": 271591736,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1644593050
    },
    {
        "content": "<p>Next up is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smooth_map.algebra\">docs#smooth_map.algebra</a> (<code>: algebra 𝕜 C^∞⟮I, N; 𝓘(𝕜, A), A⟯</code>), which is well beyond my paygrade. What's missing is the fact that this currently requires <code>𝕜</code>-multiplication to be smooth in values of <code>k</code>, even though that's obviously not necessary as the smooth functions are a <code>nat</code>-algebra (and I assume this doesn't count as smooth).</p>\n<p>To express that, I'd need a <code>smooth_const_smul</code> variant of <code>smooth_smul</code> with much weaker requirements on <code>𝕜</code>.</p>",
        "id": 272747746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645489544
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> I can try to help here but I don't understand what you're asking -- what do you mean by \"the smooth functions are a <code>nat</code>-algebra\"?</p>",
        "id": 272760434,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1645505628
    },
    {
        "content": "<p>Sorry, my statement was a little murky and <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a>'d there. The actual missing piece is a <code>module 𝕜ᵐᵒᵖ C^∞⟮I, N; 𝓘(𝕜, A), A⟯</code> instance. It's easy to write that instance specifically, but it would be nice if it fell out as a specialization of a more general <a href=\"https://leanprover-community.github.io/mathlib_docs/find/smooth_map.has_scalar\">docs#smooth_map.has_scalar</a> like it does on most other types.</p>",
        "id": 272779498,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645522820
    },
    {
        "content": "<p>The nat comment was simply a remark that \"the generalized version would optimistically work for nat-actions too\"</p>",
        "id": 272779702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645522939
    },
    {
        "content": "<p>Update: <a href=\"https://github.com/leanprover-community/mathlib/pull/10716\">#10716</a> now builds! Unfortunately the <code>fails_quickly</code> linter is unhappy, but I suspect that's just because a bunch of typeclass searches got longer.</p>",
        "id": 273260841,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645811139
    },
    {
        "content": "<p>(I've got it building again and resolved conflicts, but the <code>fails_quickly</code> problem remains)</p>",
        "id": 280210515,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1650980160
    },
    {
        "content": "<p>CI is fully green <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 281470628,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651858537
    },
    {
        "content": "<p>Thanks for that massive effort. I would be happy to merge this asap. But it would be good if some others also take a look.</p>",
        "id": 281471907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651859156
    },
    {
        "content": "<p>From the PR message:</p>\n<blockquote>\n<p>This changes the definition of <code>algebra</code> to include a right action, such that <code>algebra R A</code> automatically implies a compatible left- and right- R-module structure.</p>\n<p>The <code>module ℕᵐᵒᵖ R</code> and <code>module ℤᵐᵒᵖ R</code> instances this introduces create diamonds when <code>R=ℕ</code> and <code>R=ℤ</code> with <code>semiring.to_opposite_module</code> (since <code>mul_comm</code> is not true definitionally), but fixing those would require adding an <code>op_nsmul</code> field to <code>add_comm_monoid</code> which would make this PR huge!</p>\n<p>The same change that is made to <code>algebra R A</code> also ends up being made to <code>lie_algebra R L</code>, although this is less in the way since <code>lie_algebra R L</code> already extends <code>module R L</code>, unlike <code>algebra R A</code> which does not directly extend <code>module R A</code>.</p>\n<p>Most of the extra typeclass arguments that are needed in various places stem from <code>module.End R M</code> now only being an <code>R</code>-algebra if <code>M</code> is an <code>R</code>-bimodule.</p>\n</blockquote>",
        "id": 281471948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1651859166
    },
    {
        "content": "<p>Having a look.</p>",
        "id": 281473948,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1651860116
    },
    {
        "content": "<p>I am only a little bit worried that now we often have to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_central_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>to mean that <code>M</code> is a <code>R</code> module (even if <code>R</code> is commutative), but I don't see a simpler way of avoiding this.</p>",
        "id": 281475390,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1651860787
    },
    {
        "content": "<p>I'm happy to split the PR into two if necessary - the merge conflicts are usually straightforward, and I don't envisage any similar timeouts</p>",
        "id": 281476704,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651861475
    },
    {
        "content": "<p>(the split would be; add random missing right actions, then do the actual titular change)</p>",
        "id": 281476730,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651861491
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"130384\">Riccardo Brasca</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/281475390\">said</a>:</p>\n<blockquote>\n<p>I am only a little bit worried that now we often have to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_central_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>to mean that <code>M</code> is a <code>R</code> module (even if <code>R</code> is commutative), but I don't see a simpler way of avoiding this.</p>\n</blockquote>\n<p>In lean4 we can have <code>class really_a_module extends module R M, module Rᵐᵒᵖ M, is_central_scalar R M</code> and things should work out ok</p>",
        "id": 281476814,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651861551
    },
    {
        "content": "<p>(c.f.<code>my_sql_real_escape_string</code>, the version of <code>my_sql_escape_string</code> that ... actually escapes the string. /s)</p>",
        "id": 281476918,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651861595
    },
    {
        "content": "<p>In lean 3 if we want to do that we have to add a new (trivial) instance next to every <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module\">docs#module</a> instance (there are 133 of them); which is certainly doable, but annoying.</p>",
        "id": 281477029,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651861659
    },
    {
        "content": "<p>(I guess in practice it would just be next to the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_central_scalar\">docs#is_central_scalar</a> instances, of which there are only 52)</p>",
        "id": 281477158,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651861720
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/281476704\">said</a>:</p>\n<blockquote>\n<p>I'm happy to split the PR into two if necessary - the merge conflicts are usually straightforward, and I don't envisage any similar timeouts</p>\n</blockquote>\n<p>Two easy splits: <a href=\"https://github.com/leanprover-community/mathlib/pull/13995\">#13995</a> and <a href=\"https://github.com/leanprover-community/mathlib/pull/13996\">#13996</a></p>",
        "id": 281483307,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1651865105
    },
    {
        "content": "<p>The first of those is merged, but <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> expressed some hesitation on the second</p>",
        "id": 282033518,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652306319
    },
    {
        "content": "<p>Okay, re: <a href=\"https://github.com/leanprover-community/mathlib/pull/13996\">#13996</a>, I think that if M has commuting actions of <code>L</code> and <code>R</code> (maybe you can think of these as left and right actions, so R is syntactically Bᵒᵖ for some B, but it should really matter), and <code>L</code> is an <code>A</code> algebra, then <code>restrict_scalars A L M</code> should have an action of <code>A</code> and an action of <code>R</code>, and an instance saying these commute.</p>",
        "id": 282045994,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652316029
    },
    {
        "content": "<p>(It should not have an action of <code>L</code> anymore.)</p>",
        "id": 282046008,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652316051
    },
    {
        "content": "<p>In particular, for the instance I complained about in the PR, the docstring says:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">When `M` is a right-module over a ring `S`, and `S` is an algebra over `R`, then `M` inherits a</span>\n<span class=\"sd\">right-module structure over `R`.</span>\n<span class=\"sd\">The preferred way of setting this up is</span>\n<span class=\"sd\">`[module Rᵐᵒᵖ M] [module Sᵐᵒᵖ M] [is_scalar_tower Rᵐᵒᵖ Sᵐᵒᵖ M]`.</span>\n<span class=\"sd\">-/</span>\n</code></pre></div>\n<p>and I agree with that doc-string completely.</p>\n<p>However the instance we need in this situation is <code>module Rᵐᵒᵖ (restrict_scalars Rᵐᵒᵖ Sᵐᵒᵖ M)</code>, and <em>this already exists</em>, by ignoring the presence of all the <code>ᵐᵒᵖ</code>s.</p>",
        "id": 282046228,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652316282
    },
    {
        "content": "<p>In the situation (not mentioned in the doc-string, but in the comment) where you have something that is an <code>R</code> and <code>Rᵐᵒᵖ</code> module with commuting actions (i.e. in normal language an <code>R</code>-<code>R</code>-bimodule), and <code>R</code> is an <code>S</code>-algebra and you want to obtain the resulting <code>S</code>-<code>S</code>-bimodule, then I think you either need to say</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">restrict_scalars</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">S</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>or invent a new type synonym (or abbreviation?) for this situation.</p>",
        "id": 282046431,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652316480
    },
    {
        "content": "<p>The problem is just that we are going to have <code>L</code>-<code>R</code> bimodules, and subalgebras <code>A</code> in <code>L</code> and <code>B</code> in <code>R</code>, and we want to restrict an <code>L-R</code> bimodule <code>M</code> to obtain the <code>A-B</code> bimodule. We have to have a way to express this. And then, in the special case that <code>L = R</code>, we need to make sure we use the same language.</p>",
        "id": 282046526,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652316576
    },
    {
        "content": "<blockquote>\n<p><code>restrict_scalars A L M</code> should have an action of <code>A</code> and an action of <code>R</code>, and an instance saying these commute.</p>\n</blockquote>\n<p>Putting aside the actual contents of my PR, I don't think it is even possible to define this <code>R</code> action without adding back the <code>L</code> action (that you wanted to get rid of) by accident</p>",
        "id": 282062638,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652335961
    },
    {
        "content": "<p>Perhaps it helps to remember that <code>restrict_scalars</code> is really just a hack to avoid writing out annoying <code>is_scalar_tower</code> arguments; the latter spelling already works for considering the L-R bimodule as an A-B bimodule.</p>",
        "id": 282062913,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652336217
    },
    {
        "content": "<p>The option of defining a new type synonym <code>restrict_scalars₂ A B L R M</code> is at least a viable one, but I'd be hesitant to add it until we actually need it.</p>",
        "id": 282063117,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652336420
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/282062638\">said</a>:</p>\n<blockquote>\n<p>Putting aside the actual contents of my PR, I don't think it is even possible to define this <code>R</code> action without adding back the <code>L</code> action (that you wanted to get rid of) by accident</p>\n</blockquote>\n<p>Oh you mean that (maybe only for a commutative L?) the original L action would commute with itself, so if we wanted to carry along the <code>R</code> action on the <code>restrict_scalars</code> synonym, the same mechanism would bring along the <code>L</code> action as well.</p>",
        "id": 282076167,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652345438
    },
    {
        "content": "<p>Hmmm</p>",
        "id": 282076179,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652345444
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/282062913\">said</a>:</p>\n<blockquote>\n<p>Perhaps it helps to remember that <code>restrict_scalars</code> is really just a hack to avoid writing out annoying <code>is_scalar_tower</code> arguments</p>\n</blockquote>\n<p>I said this before and I didn't convince anyone but FWIW I think our <code>restrict_scalars</code> is a misnomer and would be better called <code>enrich_scalars</code>. True restriction of scalars happens invisibly for us via the forgetful functors that the typeclass mechanism constantly applies. Also, although it can be incorrectly used as a hack to avoid writing out <code>is_scalar_tower</code> arguments, <code>restrict_scalars</code> is a necessary tool in some situations (e.g., if one has a vector space<br>\nover a field of characteristic zero and wishes to make use of the <code>ℚ</code>-algebra structure).</p>\n<p>Anyway I don't want to derail this thread.</p>",
        "id": 282076430,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1652345604
    },
    {
        "content": "<p>Okay, so I guess I want to retract the statement that you quoted, <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>. Instead we should look at the syntactic form of the rings acting, and only \"carrying along\" an <code>Rᵐᵒᵖ</code> action on a generic <code>restrict_scalars A L M</code>, but additionally carrying along any <code>L</code> action on <code>restrict_scalars Bᵐᵒᵖ Rᵐᵒᵖ M</code>.</p>",
        "id": 282076657,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652345728
    },
    {
        "content": "<p>I think then <code>restrict_scalars A L M</code> will then correctly be an <code>A-R</code> bimodule (ie commuting actions of <code>A</code> and <code>Rᵐᵒᵖ</code>), and nothing else,</p>",
        "id": 282076703,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652345758
    },
    {
        "content": "<p>while <code>restrict_scalars Bᵐᵒᵖ Rᵐᵒᵖ M</code> will be an <code>L-B</code> bimodule (ie commuting actions of <code>L</code> and <code>Bᵐᵒᵖ</code>).</p>",
        "id": 282076772,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652345778
    },
    {
        "content": "<p>Doesn't this suggestion mean we need a different spelling of restricting the scalars of an algebra to an algebra over a smaller ring?</p>",
        "id": 282083221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652349681
    },
    {
        "content": "<p>Namely, we have to use <code>restrict_scalars S R (restrict_scalars Sᵐᵒᵖ Rᵐᵒᵖ A)</code> for that case, which is rather annoying</p>",
        "id": 282086043,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652351470
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/282076657\">said</a>:</p>\n<blockquote>\n<p>but additionally carrying along any <code>L</code> action on <code>restrict_scalars Bᵐᵒᵖ Rᵐᵒᵖ M</code>.</p>\n</blockquote>\n<p>furthermore this isn't actually possible, since <code>L</code> has nothing to match syntactically against</p>",
        "id": 282086079,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652351499
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"240862\">Oliver Nash</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/282076430\">said</a>:</p>\n<blockquote>\n<p>Also, although it can be incorrectly used as a hack to avoid writing out <code>is_scalar_tower</code> arguments, <code>restrict_scalars</code> is a necessary tool in some situations (e.g., if one has a vector space<br>\nover a field of characteristic zero and wishes to make use of the <code>ℚ</code>-algebra structure).</p>\n</blockquote>\n<p>(this could be framed as a hack to avoid writing out the \"nonsense\" <code>[algebra ℚ A] [is_scalar_tower ℚ K A]</code>)</p>",
        "id": 282086630,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652351825
    },
    {
        "content": "<p>Okay, I think I am retreating to the position that <code>restrict_scalars A L M</code> should carry no additional instances (beyond <code>module A ...</code>).</p>",
        "id": 282088086,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652352797
    },
    {
        "content": "<p>and if you need additional instances for a commuting right action, we ought to have a different type synonym...</p>",
        "id": 282088120,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652352822
    },
    {
        "content": "<p>So <code>[algebra S R] [algebra R A] : algebra S (restrict_scalars S R A)</code> should no longer be true?</p>",
        "id": 282088200,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652352855
    },
    {
        "content": "<p>I think it's innocuous enough to copy across the right action just so that for the two frequence cases (restricting a left module and restricting a bimodule over a commutative ring), it does the sensible thing.</p>",
        "id": 282088315,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652352942
    },
    {
        "content": "<p>Note in particular that <a href=\"https://leanprover-community.github.io/mathlib_docs/find/restrict_scalars.lsmul\">docs#restrict_scalars.lsmul</a> only makes sense if <code>restrict_scalar R S M</code> is a bimodule over R, otherwise <code>module.End R (restrict_scalars R S M)</code> isn't actually an algebra.</p>",
        "id": 282088504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652353051
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/282088200\">said</a>:</p>\n<blockquote>\n<p>So <code>[algebra S R] [algebra R A] : algebra S (restrict_scalars S R A)</code> should no longer be true?</p>\n</blockquote>\n<p>Sorry, I'm being slow. Why couldn't we have this?</p>",
        "id": 282089213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1652353394
    },
    {
        "content": "<p>In the wider context of this thread, the proposed change is that <code>algebra R A</code> induces <code>module Rᵐᵒᵖ A</code></p>",
        "id": 282089485,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652353570
    },
    {
        "content": "<p>So to produce <code>algebra S (restrict_scalars S R A)</code>, we need to produce a <code>module Sᵐᵒᵖ (restrict_scalars S R A)</code> along the way</p>",
        "id": 282089509,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652353593
    },
    {
        "content": "<p>We can't get away with only doing it when <code>A</code> is an algebra though (which is what I initially tried); we also need this instance if we want</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">S</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span><span class=\"bp\">ᵐᵒᵖ</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_central_scalar</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">algebra</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">module.End</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">restrict_scalars</span> <span class=\"n\">S</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">))</span>\n</code></pre></div>\n<p>to be allowed, which we need for what I described in <a href=\"#narrow/stream/116395-maths/topic/left.20vs.20right.20modules.20in.20tensor.20products/near/282088504\">this message</a></p>",
        "id": 282089746,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652353790
    },
    {
        "content": "<p>27 messages were moved from this topic to <a class=\"stream-topic\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews/topic/.2313996.20right.20actions.20on.20restrict_scalars\">#PR reviews &gt; #13996 right actions on restrict_scalars</a> by <span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span>.</p>",
        "id": 282433832,
        "sender_full_name": "Notification Bot",
        "timestamp": 1652656251
    },
    {
        "content": "<p>Both are now merged and <a href=\"https://github.com/leanprover-community/mathlib/pull/10716\">#10716</a> is green again; I'd appreciate any suggestions for further splits</p>",
        "id": 284812076,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1654208048
    },
    {
        "content": "<p>Wow, happy to see this finally done <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 285026067,
        "sender_full_name": "Jakob von Raumer",
        "timestamp": 1654419343
    },
    {
        "content": "<p>Ok, I was perhaps wrong about it being easy to keep up to date with master. It's green once more</p>",
        "id": 289842707,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657998260
    }
]