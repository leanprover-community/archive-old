[
    {
        "content": "<p>There is a group of students at my university studying Lean, with the final goal being some contribution to mathlib. Our supervisor offered to prove the structure theorem for finitely generated abelian groups (or even the structure theorem for f.g. modules over PIDs). <br>\nWe found out that the first half was already <a href=\"https://github.com/leanprover-community/mathlib/pull/6178\">proved</a> by <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>. <a href=\"https://github.com/leanprover-community/mathlib/pull/7341\">This</a> also looks relevant. </p>\n<p>Were there any other results in this direction? Maybe someone works on the second part of the theorem right now?</p>",
        "id": 237315637,
        "sender_full_name": "Alexey S. Vasilev",
        "timestamp": 1620131853
    },
    {
        "content": "<p><del>Right now we have f.g. + torsion-free implies free (for modules over a PID) but we don't have the full theorem.</del> (oh sorry, you already spotted this!). <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> are you planning on proving the structure theorem for f.g. modules over a PID?</p>",
        "id": 237315741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620131884
    },
    {
        "content": "<p>I think the only part that is missing is the \"nasty\" part that classifies f.g. torsion modules.</p>",
        "id": 237316043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620132009
    },
    {
        "content": "<p>I've seen a proof which involves a lot of manipulation of matrices :-/ That won't be much fun to do formally. Is the structure theorem for finite abelian groups any easier?</p>",
        "id": 237316200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620132078
    },
    {
        "content": "<p>Yes, the remaining part is classification of f.g. torsion modules, even in the abelian group case. Yes the classical proof involves a lot of matrix manipulations, but it's not the only possible proof. The matrix proof can probably give you a computable classification, but this is not what we usually care about in mathlib.</p>",
        "id": 237316746,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620132292
    },
    {
        "content": "<p>And yes , there are shortcuts for abelian groups.</p>",
        "id": 237316797,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620132313
    },
    {
        "content": "<p>For abelian groups it is easy to setup an induction process using the group exponent.</p>",
        "id": 237316959,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620132371
    },
    {
        "content": "<p>And I don't plan to work on this at all. I did <a href=\"https://github.com/leanprover-community/mathlib/issues/7341\">#7341</a> because it was potentially useful for LTE and low hanging.</p>",
        "id": 237317027,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620132404
    },
    {
        "content": "<p>Alexey, who is your advisor? What is your university?</p>",
        "id": 237317235,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1620132491
    },
    {
        "content": "<p>My university is Novosibirsk State University, Russia, and the advisor is Evgeny Vdovin. He does not specialize in formalizing mathematics, and in fact our Lean group is quite new. Perhaps the theorem we chose is too complicated (for example, we thought that the matrix proof is the easiest to formalize). We will be glad to hear any advice or suggestions.</p>",
        "id": 237319930,
        "sender_full_name": "Alexey S. Vasilev",
        "timestamp": 1620133581
    },
    {
        "content": "<p>Typically, the more abstract the easier it is to formalize. Explicitly manipulating matrices can quickly become quite dirty.</p>",
        "id": 237320893,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620133952
    },
    {
        "content": "<p>Am I right in saying we also don't have the infinitary version of Dedekind's theorem \"submodule of free module over PID is free\"? I don't think this one should be too hard using well-ordering principle</p>",
        "id": 237321033,
        "sender_full_name": "David Wärn",
        "timestamp": 1620134021
    },
    {
        "content": "<p>Right, I don't think that's in mathlib</p>",
        "id": 237321174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1620134069
    },
    {
        "content": "<p>That might be a more accessible challenge for beginners (if you know the maths, that is)</p>",
        "id": 237321298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1620134132
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"475844\">@Pierre-Alexandre Bazin</span> is currently thinking about this. Did anything come of <span class=\"user-mention\" data-user-id=\"399281\">@Alexey S. Vasilev</span> 's project?</p>",
        "id": 271808462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644834804
    },
    {
        "content": "<p>What about projective modules over local rings ?</p>",
        "id": 271818197,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1644840963
    },
    {
        "content": "<p>That would be another good project. The proof in Matsumura uses transfinite induction! I once noted to Conrad that it was the only time I'd ever seen ordinals used in \"regular math\" and he pointed out that he knew a proof which didn't use transfinite induction.</p>",
        "id": 271872324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1644865326
    },
    {
        "content": "<p>I may have commented this to you before but I think as a rule, arguments with Zorn's lemma tend to be more transparent with transfinite induction (e.g. every vector space has a basis: well-order the elements of the vector space arbitrarily and keep whatever vectors are not in the span of the preceding ones).</p>",
        "id": 271872964,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644865564
    },
    {
        "content": "<p>It's just Gaussian elimination that takes a bit longer.</p>",
        "id": 271873399,
        "sender_full_name": "Reid Barton",
        "timestamp": 1644865740
    },
    {
        "content": "<p>I'm glad to announce the structure theorem for f.g. modules over a PID is now proved in mathlib ! (<a href=\"https://github.com/leanprover-community/mathlib/pull/13524\">#13524</a>)</p>",
        "id": 286041592,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1655197424
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.equiv_free_prod_direct_sum\">docs#module.equiv_free_prod_direct_sum</a></p>",
        "id": 286042336,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1655197898
    },
    {
        "content": "<p>It's been a long time coming. Thank you very much <span class=\"user-mention\" data-user-id=\"475844\">@Pierre-Alexandre Bazin</span> for making it happen!</p>",
        "id": 286042656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655198083
    },
    {
        "content": "<p>We still need a little bit of glue to get the statement for finite abelian groups, but nothing special I think. </p>\n<p>Are we ready for Jordan normal form?</p>",
        "id": 286043090,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1655198362
    },
    {
        "content": "<p>For Jordan normal form I'll at least need the stuff at <a href=\"https://github.com/leanprover-community/mathlib/pull/14666\">#14666</a> + defining what a Jordan block is (I don't think we have it) and show it's multiplication by <code>X</code>in <code>R[X] ⧸ ((X - a) ^ n)</code> (with the right basis) so that's still quite some work remaining</p>",
        "id": 286044005,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1655198869
    },
    {
        "content": "<p>It's great that we got this! However isn't a bit exaggerated to  call that \"the structure theorem for f.g. modules over a PID \" if you don't have uniqueness? I thought uniqueness is the tricky part.</p>",
        "id": 286053406,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1655204321
    },
    {
        "content": "<p>What would a statement of uniqueness look like there?</p>",
        "id": 286054657,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655205126
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Structure_theorem_for_finitely_generated_modules_over_a_principal_ideal_domain#Invariant_factor_decomposition\">https://en.wikipedia.org/wiki/Structure_theorem_for_finitely_generated_modules_over_a_principal_ideal_domain#Invariant_factor_decomposition</a></p>",
        "id": 286055205,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1655205373
    },
    {
        "content": "<p>Oh, I guess you mean uniqueness of <code>p</code> and <code>e</code> up to permutation of <code>ι</code>?</p>",
        "id": 286055258,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655205396
    },
    {
        "content": "<p>I don't think uniqueness is too hard; you tensor up to the field of fractions to get uniqueness of rank, and you look at P^i-torsion to get uniqueness of the powers of P. I agree it might be fiddly to do uniqueness in Lean, but existence is hard even on paper.</p>",
        "id": 286055892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655205797
    },
    {
        "content": "<p>Maybe I'm misremembering what is really harder in the general case than in the abelian group case.</p>",
        "id": 286057025,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1655206428
    },
    {
        "content": "<p>I had a go at extracting some constructions from the existentials in <a href=\"https://github.com/leanprover-community/mathlib/pull/14734\">#14734</a>, in case that's helpful for showing uniqueness</p>",
        "id": 286062185,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655209233
    },
    {
        "content": "<p>Indeed, uniqueness is missing. By the way, I just opened <a href=\"https://github.com/leanprover-community/mathlib/pull/14736\">#14736</a> for the case of abelian groups</p>",
        "id": 286075584,
        "sender_full_name": "Pierre-Alexandre Bazin",
        "timestamp": 1655215111
    }
]