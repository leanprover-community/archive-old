[
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/144837-PR-reviews/topic/.2315326.20Renaming.20is_self_adjoint/near/293440613\">said</a>:</p>\n<blockquote>\n<p>Note: before we dive headlong into making that <code>linear_pmap_class</code> (which we should definitely do!), we should have a discussion about how to implement it, because I'm reasonably sure it won't be able to extend <code>fun_like</code> in any nice way. </p>\n<p>So maybe we want to have a <code>pfun_,like</code> class hierarchy. Perhaps we don't, but I think we should outline the various partial function situations that commonly arise and see if there is any shot at unifying them, or if it isn't worth the effort to make a general framework.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> let's move here.</p>",
        "id": 293441815,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660510698
    },
    {
        "content": "<p>The issue with <code>pfun</code> is that it is implemented differently than <code>linear_pmap</code>, even if it were implemented as a pair of domain and total function, I guess we might run into stupid coercion issues because <code>linear_pmap</code>'s domain is a <code>submodule</code> and not a set.</p>",
        "id": 293441940,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660510828
    },
    {
        "content": "<p>My thought was that <code>linear_pmap_class</code> does not extend anything, but probably is extended by <code>linear_map_class</code> (taking top as domain), this has the annoying issue that there are two different coercions, the usual one and the one from the top-submodule to the codomain.</p>",
        "id": 293442097,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660511022
    },
    {
        "content": "<p>the <code>linear_map_class</code> would of course get a field that knows that these two coercions are equal and that should make it possible to transfer definitions for <code>linear_pmap_class</code> to <code>linear_map_class</code>. The downside is that there is some boilerplate involved, but I am afraid we cannot avoid that</p>",
        "id": 293442523,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660511423
    },
    {
        "content": "<p>My idea for <code>pfun_like</code> was that one of the arguments would be a <code>set_like</code>, which might address the fact that they aren't actually sets, but I haven't actually checked whether or not this idea works.</p>",
        "id": 293442667,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660511594
    },
    {
        "content": "<p>This would unify the implementations.</p>",
        "id": 293442680,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660511609
    },
    {
        "content": "<p>that would be great if it works</p>",
        "id": 293442780,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660511701
    },
    {
        "content": "<p>The other option (which works and is maybe the correct approach), is just to ignore the extra structure when creating the <code>pfun_like</code> and just use the bare sets underlying the fancy subobjects.</p>",
        "id": 293443301,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660512298
    },
    {
        "content": "<p>This morning I played around with some of these ideas. Using <code>set_like</code> I think can make this reasonable. However, I ran into some issues unrelated to <code>set_like</code>. Below are two attempts at getting the idea off the ground. Note that I was following the pattern of <code>linear_pmap</code> rather than <code>pfun</code> since the former is our real use case.</p>\n<p>In the first approach, we encounter heterogeneous equality (yuck), and in the second approach, it goes against our current approach to <code>f : linear_pmap R E F</code>, where we only have a function <code>f.to_fun : f.domain → F</code> instead of a function <code>E → F</code> with junk values. Thoughts?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra.linear_pmap</span>\n\n<span class=\"c1\">--------- take 1 -----------</span>\n\n<span class=\"c1\">-- gross, heterogeneous equality is unavoidable if we want to have any sort of \"extensionality\"</span>\n<span class=\"c1\">-- also, unlike `fun_like`, we can't have dependent functions here (i.e., `β : Type*`, not</span>\n<span class=\"c1\">-- `β : α → Type*`)</span>\n<span class=\"kd\">class</span> <span class=\"n\">pfun_like</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">domain</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"bp\">==</span> <span class=\"n\">coe</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pfun_like</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pfun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- gross, we have to pass `[Π (f : F), has_zero ↥(domain f : γ)]` as a parameter and so there is</span>\n<span class=\"c1\">-- no way we can make this extend `pfun_like`. In practice, when creating instances of this class,</span>\n<span class=\"c1\">-- the Π-type instance should be inferred (e.g., if `F` is `linear_pmap_class R E F`, then</span>\n<span class=\"c1\">-- `domain f : submodule R E` which has a `module` instance), so in that case it wouldn't be a</span>\n<span class=\"c1\">-- headache, I guess?</span>\n<span class=\"kd\">class</span> <span class=\"n\">pmap_zero_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pfun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">has_zero</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)),</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- gross, we have to pass `[Π (f : F), has_zero ↥(domain f : γ)]` as a parameter and so there is</span>\n<span class=\"c1\">-- no way we can make this extend `pfun_like`.</span>\n<span class=\"kd\">class</span> <span class=\"n\">pmap_add_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pfun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">has_add</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- note that this approach never really had the changes to make use of the `set_like` instance,</span>\n<span class=\"c1\">-- aside from providing a `coe_to_sort` instance.</span>\n<span class=\"kd\">end</span> <span class=\"n\">pfun_like</span>\n\n<span class=\"c1\">--------- take 2 -----------</span>\n\n<span class=\"c1\">-- in this iteration, we just have a bare function from `α → β` (presumably filled in with junk</span>\n<span class=\"c1\">-- values in practice), so there is no need for heterogeneous equality in our extensionality.</span>\n<span class=\"c1\">-- Also, this *could* support dependent functions, although I didn't set it up that way here.</span>\n<span class=\"kd\">class</span> <span class=\"n\">pfun_like₂</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">domain</span> <span class=\"n\">g</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">coe</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pfun_like₂</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pfun_like₂</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- note: this is weird in a *different* way from `pmap_zero_class`, which is that it doesn't need</span>\n<span class=\"c1\">-- to assume anything about the relationship between `γ` and `0` (e.g., there is no need for</span>\n<span class=\"c1\">-- `zero_mem_class γ α` here).</span>\n<span class=\"kd\">class</span> <span class=\"n\">pmap_zero_class₂</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">pfun_like₂</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- Here we see the key distinction with our normal set up for `linear_pmap`. In particular, we have</span>\n<span class=\"c1\">-- as hypotheses for `foo` that `x y ∈ domain f`, instead of `x y : domain f` because our coercion</span>\n<span class=\"c1\">-- of `f` to a function takes it to `α → β`, not `domain f → β`.</span>\n<span class=\"kd\">class</span> <span class=\"n\">pmap_add_class₂</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_add</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">pfun_like₂</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">∈</span> <span class=\"n\">domain</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pfun_like₂</span>\n</code></pre></div>",
        "id": 293596387,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660587335
    },
    {
        "content": "<p>Note: Moritz, with the second approach, we would definitely not be able to have an instance of <code>linear_pmap_class</code> for <code>linear_map_class</code> because we would end up having two definitionally non-equal <code>has_coe_to_fun</code> instances (at least in practice).</p>",
        "id": 293597000,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660587554
    },
    {
        "content": "<p>Have you also considered copying the design of <code>fun_like</code>, but replacing the coercion to a function by a coercion to a <code>pfun</code>?</p>",
        "id": 293602378,
        "sender_full_name": "Frédéric Dupuis",
        "timestamp": 1660589783
    },
    {
        "content": "<p>Not yet, but I'll play around with that later.</p>",
        "id": 293604592,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660590596
    },
    {
        "content": "<p>I have some variations which seem to be working decently (the ones I posted above can be improved); but also one using <code>pfun</code>. Will update later.</p>",
        "id": 293625830,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660599891
    },
    {
        "content": "<p>Okay, this is the proof of concept. I define a <code>pfun_like</code> class and it's associated <code>has_coe_to_fun</code> instance. I also create a structure <code>pmul_hom</code> of partial <code>mul_hom</code>s defined as a subsemigroup and mul_hom from this subsemigroup into some other semigroup. We extend <code>pfun_like</code> to <code>pmul_hom_class</code> with a new field <code>pmap_mul</code>. This field takes full advantage of the subobject refactor by making use of <code>mul_mem_class.has_mul</code> to make sense of the statement. Then we have a nice <code>ext</code> lemma (without any heterogeneous equality nonsense). In addition, we show that we can get the natural instances.</p>\n<p>(Note: I'm not advocating for defining <code>pmul_hom</code>s unless someone needs them, it's only to show that the idea works.)</p>\n<p>All of this should also work for defining a <code>linear_pmap_class</code> modulo filling in missing stuff for <code>set_like</code> subobjects (e.g., <code>zero_mem_class.has_zero</code> is missing, and there is no <code>smul_mem_class</code> yet).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subsemigroup.operations</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.pfun</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">pfun_like</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">coe_injective</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">domain</span> <span class=\"n\">g</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">g</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">coe</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pfun_like</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pfun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pfun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">domain</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)⦄</span> <span class=\"o\">⦃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)⦄,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">pfun_like.coe_injective</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pfun_like</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">pmul_hom_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_mem_class</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">pfun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">pmap_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">pmul_hom_class</span> <span class=\"o\">(</span><span class=\"n\">pmap_mul</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">pmul_hom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"o\">:</span> <span class=\"n\">subsemigroup</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_mul_hom</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">→.ₙ*</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"n\">pmul_hom</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pmul_hom</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">pmul_hom_class</span> <span class=\"o\">(</span><span class=\"n\">pmul_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">subsemigroup</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">domain</span> <span class=\"o\">:=</span> <span class=\"n\">pmul_hom.domain</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.to_mul_hom</span><span class=\"o\">,</span>\n  <span class=\"n\">coe_injective</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">f_dom</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">g_dom</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">f_dom</span> <span class=\"bp\">=</span> <span class=\"n\">g_dom</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">mul_hom.ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">pmap_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span> <span class=\"n\">f.to_mul_hom</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- this would be our standard `ext` lemma</span>\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.ₙ*</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">domain</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">f</span><span class=\"o\">⦄</span> <span class=\"o\">⦃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">g</span><span class=\"o\">⦄,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">pfun_like.coe_injective</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n\n<span class=\"c1\">-- see? it works!</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.ₙ*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">pmap_mul</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- this instance seems dangerous: all of a sudden `α →ₙ* β` would have *two* `has_coe_to_fun`</span>\n<span class=\"c1\">-- instances, one coercing to `α → β` from the `fun_like` instance and another coercing to</span>\n<span class=\"c1\">-- `λ f, domain f → β` from the `pfun_like` instance, but maybe this isn't so much of a problem.</span>\n<span class=\"c1\">-- even if it is a problem, perhaps we can just solve it by lowering the priority on this one?</span>\n<span class=\"kd\">instance</span> <span class=\"n\">dangerous</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">pmul_hom_class</span> <span class=\"o\">(</span><span class=\"n\">mul_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">subsemigroup</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">β</span>  <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">domain</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">coe_injective</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_hom.ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">true.intro</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">true.intro</span><span class=\"o\">⟩</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"n\">pmap_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">set_like.forall</span><span class=\"o\">],</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">map_mul</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pmul_hom</span>\n</code></pre></div>",
        "id": 293655323,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660625504
    },
    {
        "content": "<p>Another note: I think going through <code>pfun</code> is the wrong way to go. The reason is that you have to go all the way down to a <code>set α</code> instead of staying at the subobject level, which means that you would lose access to <code>mul_mem_class</code>. In a sense, <code>pfun</code> is <em>too unbundled</em>.</p>",
        "id": 293655920,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660626211
    },
    {
        "content": "<p>The instance seems to be too dangerous. I've tried to make a toy model of the kinds of definition I need and it fails because I cannot get the correct coercion, Lean really wants to coerce to <code>pfun</code> now. Lean was also a bit stupid in the second to last lemma, but this no problem because in that case you should not use the definition by hand anyways.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.subsemigroup.operations</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.pfun</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">pfun_like</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"o\">:</span> <span class=\"n\">F</span> <span class=\"bp\">→</span> <span class=\"n\">γ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">coe_injective</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">),</span> <span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">domain</span> <span class=\"n\">g</span> <span class=\"bp\">→</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">g</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">coe</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">coe</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pfun_like</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pfun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_coe_to_fun</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"n\">coe</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pfun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">domain</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)⦄</span> <span class=\"o\">⦃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)⦄,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">pfun_like.coe_injective</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pfun_like</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">pmul_hom_class</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n  <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_mem_class</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">pfun_like</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">pmap_mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">)),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_comm</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">set_like</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">mul_mem_class</span> <span class=\"n\">γ</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">pmul_hom_class</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">pfun_like.domain</span> <span class=\"n\">F</span> <span class=\"n\">α</span> <span class=\"n\">γ</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kn\">export</span> <span class=\"n\">pmul_hom_class</span> <span class=\"o\">(</span><span class=\"n\">pmap_mul</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">pmul_hom</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">domain</span> <span class=\"o\">:</span> <span class=\"n\">subsemigroup</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">to_mul_hom</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"bp\">→ₙ*</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">infixr</span> <span class=\"bp\">`</span> <span class=\"bp\">→.ₙ*</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"o\">:=</span> <span class=\"n\">pmul_hom</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pmul_hom</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">pmul_hom_class</span> <span class=\"o\">(</span><span class=\"n\">pmul_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">subsemigroup</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">domain</span> <span class=\"o\">:=</span> <span class=\"n\">pmul_hom.domain</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f.to_mul_hom</span><span class=\"o\">,</span>\n  <span class=\"n\">coe_injective</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">h'</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">f_dom</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">g_dom</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">f_dom</span> <span class=\"bp\">=</span> <span class=\"n\">g_dom</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">obtain</span> <span class=\"n\">rfl</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span> <span class=\"n\">mul_hom.ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h'</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">pmap_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span> <span class=\"n\">f.to_mul_hom</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- this would be our standard `ext` lemma</span>\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.ₙ*</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">domain</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">f</span><span class=\"o\">⦄</span> <span class=\"o\">⦃</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">g</span><span class=\"o\">⦄,</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"n\">pfun_like.coe_injective</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span> <span class=\"n\">h'</span>\n\n<span class=\"c1\">-- see? it works!</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.ₙ*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">pmap_mul</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- This also works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→.ₙ*</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_comm</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- this instance seems dangerous: all of a sudden `α →ₙ* β` would have *two* `has_coe_to_fun`</span>\n<span class=\"c1\">-- instances, one coercing to `α → β` from the `fun_like` instance and another coercing to</span>\n<span class=\"c1\">-- `λ f, domain f → β` from the `pfun_like` instance, but maybe this isn't so much of a problem.</span>\n<span class=\"c1\">-- even if it is a problem, perhaps we can just solve it by lowering the priority on this one?</span>\n<span class=\"kd\">@[priority 10]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">dangerous</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">pmul_hom_class</span> <span class=\"o\">(</span><span class=\"n\">mul_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">subsemigroup</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">β</span>  <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">domain</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">⊤</span><span class=\"o\">,</span>\n  <span class=\"n\">coe</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">match</span> <span class=\"n\">x</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">coe_injective</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_hom.ext</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">true.intro</span><span class=\"o\">⟩</span> <span class=\"o\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">true.intro</span><span class=\"o\">⟩</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n  <span class=\"n\">pmap_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">set_like.forall</span><span class=\"o\">],</span>\n    <span class=\"n\">rintros</span> <span class=\"n\">x</span> <span class=\"n\">_</span> <span class=\"n\">y</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">map_mul</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- This also works</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mul_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_comm</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">pfun_like.domain</span> <span class=\"o\">(</span><span class=\"n\">mul_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">subsemigroup</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">β</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"c1\">-- This does not</span>\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mul_hom</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_comm</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_comm</span> <span class=\"n\">f</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">pmul_hom</span>\n</code></pre></div>",
        "id": 294175865,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660859479
    },
    {
        "content": "<p>yeah, that's what I was afraid of. I think Lean 3 is too dumb about how it handles coercion to functions (I <em>think</em> it literally picks the most recent instance). I also believe this might be something Lean 4 can handle, but I'm not sure.</p>",
        "id": 294176149,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1660859638
    },
    {
        "content": "<p>If that is the case, then there would be a really nasty hack: just define the <code>linear_pmap_class</code> instance before the <code>linear_map_class</code> <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>",
        "id": 294176647,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660859897
    },
    {
        "content": "<p>I would really hope that Lean 4 is better in that regard</p>",
        "id": 294176751,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660859964
    },
    {
        "content": "<p>and thanks Jireh for taking the time to try out whether this is possible</p>",
        "id": 294177162,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1660860177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz Doll</span> <a href=\"#narrow/stream/116395-maths/topic/linear_pmap_class/near/294176647\">said</a>:</p>\n<blockquote>\n<p>If that is the case, then there would be a really nasty hack: just define the <code>linear_pmap_class</code> instance before the <code>linear_map_class</code> <span aria-label=\"scream\" class=\"emoji emoji-1f631\" role=\"img\" title=\"scream\">:scream:</span></p>\n</blockquote>\n<p>for some weird reason this does not work in Lean 3, in Lean 4 it does. I really don't understand how Lean 3 finds instances.<br>\nLean 4 seems to be able to deal with multiple <code>CoeFun</code>, but one actually has to be careful with the order they are defined in to get the default instance correct and changing the priority seems to have no effect on that (at least setting one to <code>@[defaultInstance low]</code> and the other to <code>@[defaultInstance high]</code>)</p>",
        "id": 294788156,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1661215192
    }
]