[
    {
        "content": "<p>I'm trying to obtain the equivalence in the following, <code>(Π₀ (ij : ii × jj), β ij.1 ij.2) ≃ (Π₀ i j, β i j)</code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">dfinsupp</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"c1\">-- requirements of Π₀</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">ii</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">jj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ii</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">jj</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ii</span> <span class=\"bp\">→</span> <span class=\"n\">jj</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"err\">₀</span> <span class=\"o\">(</span><span class=\"n\">ij</span> <span class=\"o\">:</span> <span class=\"n\">ii</span> <span class=\"bp\">×</span> <span class=\"n\">jj</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"bp\">Π</span><span class=\"err\">₀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>I initially posted this over at <a href=\"#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/dfinsupp.20of.20product.20is.20dfinsupp.20of.20dfinsupp/near/204537032\">https://leanprover.zulipchat.com/#narrow/stream/217875-Is-there.20code.20for.20X.3F/topic/dfinsupp.20of.20product.20is.20dfinsupp.20of.20dfinsupp/near/204537032</a>.</p>\n<p>Over there, you can see a definition of the forward transformation, <code>(Π₀ (ij : ii × jj), β ij.1 ij.2)) → (Π₀ i, Π₀ j, β i j)</code>, but I'm struggling to de-sorry the reverse transformation.</p>\n<p>I suspect my issue here is a lack of familiarity with quotient types in lean.</p>\n<p>Help finishing those definitions would be greatly appreciated!</p>",
        "id": 204655886,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595419024
    },
    {
        "content": "<p>do you need this for a random <code>β</code>, or are they actually at least <code>add_comm_monoid</code>?</p>",
        "id": 204656025,
        "sender_full_name": "Reid Barton",
        "timestamp": 1595419109
    },
    {
        "content": "<p>Ideally a random <code>β</code></p>",
        "id": 204656089,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595419162
    },
    {
        "content": "<p>I think the add_comm_monoid version probably applies better to <code>direct_sum</code> than to <code>dfinsupp</code></p>",
        "id": 204656141,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595419197
    },
    {
        "content": "<p>I was also trying to avoid needing the decidability of <code>{f : β i j}, f = 0</code>, which is required if I try to use <code>.support</code></p>",
        "id": 204656304,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595419302
    },
    {
        "content": "<p>(hence my attempts to go through <code>pre_support</code> instead.)</p>",
        "id": 204656387,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595419348
    },
    {
        "content": "<p>I've made a PR at <a href=\"https://github.com/leanprover-community/mathlib/pull/3515\">https://github.com/leanprover-community/mathlib/pull/3515</a> which contains the bits of the proof I was able to put together, so that it's not completely lost to zulip streams.</p>",
        "id": 204675296,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595429146
    },
    {
        "content": "<p>I don't understand why there would be \"goals accomplished\" and </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">result</span> <span class=\"n\">contains</span> <span class=\"n\">meta</span><span class=\"bp\">-</span><span class=\"kn\">variables</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">no</span> <span class=\"n\">goals</span>\n</code></pre></div>\n\n\n<p>at the same time for the following <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> related to this PR:</p>",
        "id": 204787141,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595505698
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">dfinsupp</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">dfinsupp</span><span class=\"bp\">.</span><span class=\"n\">prod</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">ii</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">jj</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ii</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">jj</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"n\">ii</span> <span class=\"bp\">→</span> <span class=\"n\">jj</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">has_zero</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">)]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">prod_to_nested</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"err\">₀</span> <span class=\"o\">(</span><span class=\"n\">ij</span> <span class=\"o\">:</span> <span class=\"n\">ii</span> <span class=\"bp\">×</span> <span class=\"n\">jj</span><span class=\"o\">),</span> <span class=\"n\">β</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">ij</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span><span class=\"err\">₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">Π</span><span class=\"err\">₀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">β</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">has_equiv</span><span class=\"bp\">.</span><span class=\"n\">equiv</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span>  <span class=\"c1\">-- goals accomplished</span>\n<span class=\"kn\">end</span> <span class=\"c1\">-- result contains meta-variables</span>\n</code></pre></div>",
        "id": 204787279,
        "sender_full_name": "Utensil Song",
        "timestamp": 1595505758
    },
    {
        "content": "<p>This happens when tactics claim to have solved all the metavariables (i.e. there are no more goals), but there are still metavariables that need to be filled out. You can use the <code>recover</code> tactic to get the missing goal.</p>",
        "id": 204787473,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595505892
    },
    {
        "content": "<p>More specifically, the line <code>apply quotient.sound,</code> causes a goal to be hidden, I guess because the tactic expects that it will be filled by unification. If you write <code>refine quotient.sound _,</code> instead, the goal will still be around.</p>",
        "id": 204787811,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1595506132
    },
    {
        "content": "<p>I did manage to prove this, but it's not pretty (<a href=\"https://gist.github.com/ChrisHughes24/73d40b1b31f07b81cbec47ef88700a7c\">link</a>). I think this might be a case of the <a href=\"https://en.wikipedia.org/wiki/XY_problem\">#xy</a> problem. <code>dfinsupp</code> is not really intended to be used unless the <code>β i</code> are <code>add_comm_monoid</code>s, in fact it shouldn't really be used directly as <code>dfinsupp</code>, but you should use <code>direct_sum</code> instead most of the time for the interface. It is strange to want to use it with just <code>has_zero</code>, and the library really isn't set up for that usage.</p>",
        "id": 204815530,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1595519551
    },
    {
        "content": "<p>This is just an x problem, I decided it was more challenging than my original y problem</p>",
        "id": 204858379,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595541584
    },
    {
        "content": "<p>Although I think if you're willing to assume<code>[Π i j, decidable_eq (β i j)]</code>, there are some shorter solutions - my difficulty was trying to avoid that assumption</p>",
        "id": 204887291,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1595576536
    }
]