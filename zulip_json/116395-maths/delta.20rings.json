[
    {
        "content": "<p>Fix a prime <code>p</code>.</p>",
        "id": 129993188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532089066
    },
    {
        "content": "<p>57</p>",
        "id": 129993189,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532089072
    },
    {
        "content": "<p>Consider the following attempt at a definition:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">delta_ring</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_ring</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_prop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">δ</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 129993230,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532089085
    },
    {
        "content": "<p>How should one explain to Lean that <code>(a^p + b^p - (a+b)^p)/p</code> in fact makes sense?</p>",
        "id": 129993244,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532089113
    },
    {
        "content": "<p>must that expression have a unique value?</p>",
        "id": 129993254,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532089129
    },
    {
        "content": "<p>yes</p>",
        "id": 129993256,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532089136
    },
    {
        "content": "<p>you can define a function that spits out that value?</p>",
        "id": 129993260,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532089145
    },
    {
        "content": "<p>Yes, you can. But doesn't that make the definition extremely convoluted?</p>",
        "id": 129993265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532089162
    },
    {
        "content": "<p>delta_ring.aux : A \\to A \\to prime \\to A</p>",
        "id": 129993273,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532089180
    },
    {
        "content": "<p>And I guess Lean gets happier if I give an explicit definition? Instead of just claiming that the value exists because certain binomial coefficients will always have a factor <code>p</code>?</p>",
        "id": 129993326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532089261
    },
    {
        "content": "<p>at least I would be happier</p>",
        "id": 129993331,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532089272
    },
    {
        "content": "<p>Here is the full \"definition\":</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">delta_ring</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_ring</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">zero_prop</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one_prop</span> <span class=\"o\">:</span> <span class=\"n\">δ</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add_prop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">δ</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">δ</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">δ</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">p</span><span class=\"o\">)</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul_prop</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">},</span> <span class=\"n\">δ</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"err\">^</span><span class=\"n\">p</span><span class=\"bp\">*</span><span class=\"n\">δ</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"err\">^</span><span class=\"n\">p</span><span class=\"bp\">*</span><span class=\"n\">δ</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">p</span><span class=\"bp\">*</span><span class=\"n\">δ</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"n\">δ</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 129993446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532089470
    },
    {
        "content": "<p>would you say that including <code>^</code> make the definition more convoluted?</p>",
        "id": 129993460,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532089514
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 129993517,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532089576
    },
    {
        "content": "<p>Ok, I see what you are getting at...</p>",
        "id": 129993524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532089590
    },
    {
        "content": "<p><code>^</code> is also an auxiliary function that doesn't follow from the ring axioms</p>",
        "id": 129993526,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532089594
    },
    {
        "content": "<p>Well, as a mathematician, I am used to the notation <code>^</code>, but not to the function <code>delta_ring.aux</code>.</p>",
        "id": 129993538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532089613
    },
    {
        "content": "<p>that's an arbitrary distinction</p>",
        "id": 129993539,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532089622
    },
    {
        "content": "<p>By that logic every definition in maths is arbitrary.</p>",
        "id": 129993552,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532089641
    },
    {
        "content": "<p>alright</p>",
        "id": 129993609,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532089732
    },
    {
        "content": "<p>Anyway, do you think it is easy to define <code>aux</code> constructively?</p>",
        "id": 129993628,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532089768
    },
    {
        "content": "<p>I think the function ((a+b)^p-a^p-b^p)/p might be useful more generally</p>",
        "id": 129993631,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532089772
    },
    {
        "content": "<p>hmm, let me think about that</p>",
        "id": 129993686,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532089804
    },
    {
        "content": "<p>I guess I first need to prove that <code>binom p i</code> is divisible by <code>p</code> for <code>0 &lt; i &lt; p</code>.</p>",
        "id": 129993702,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532089816
    },
    {
        "content": "<p>can we somehow extend that definition to all natural numbers?</p>",
        "id": 129993748,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532089890
    },
    {
        "content": "<p>no, p has to be prime (if you are working over an arbitrary ring)</p>",
        "id": 129993814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532089959
    },
    {
        "content": "<p>Kenny didn't you already write this function somehow?</p>",
        "id": 129993818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532089967
    },
    {
        "content": "<p>I think Chris did some binomial / factorial things</p>",
        "id": 129993832,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532089990
    },
    {
        "content": "<p>f(a,b,2) = ab<br>\nf(a,b,3) = aab+abb<br>\nf(a,b,5) = aaaab+2aaabb+2aabbb+abbbb<br>\nf(a,b,7) = aaaaaab+3aaaaabb+5aaaabbb+5aaabbbb+3aabbbbb+abbbbbb</p>",
        "id": 129993835,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532089996
    },
    {
        "content": "<p>there's nothing that can go between the lines?</p>",
        "id": 129993838,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090008
    },
    {
        "content": "<p>hmm</p>",
        "id": 129993841,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090011
    },
    {
        "content": "<p>no</p>",
        "id": 129993843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532090012
    },
    {
        "content": "<p>what does a mathematician think about this function?</p>",
        "id": 129993849,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090033
    },
    {
        "content": "<p>If Chris proved that binom p i * i! * (p-i)! = p! then proving it's a multiple of p is fine as long as you know that if p divides ab then p divides a or b.</p>",
        "id": 129993887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532090046
    },
    {
        "content": "<p>You then prove that p doesn't divide i! for i&lt;p and you're done</p>",
        "id": 129993894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532090055
    },
    {
        "content": "<p>I know that \"pCa is divisible by p for all a\" iff p is a prime</p>",
        "id": 129993914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090085
    },
    {
        "content": "<p>i'm asking whether that function can be extended</p>",
        "id": 129993918,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090093
    },
    {
        "content": "<p>sure it can be extended -- just define it to be 37 for n not prime</p>",
        "id": 129993933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532090108
    },
    {
        "content": "<p>well</p>",
        "id": 129993941,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090118
    },
    {
        "content": "<p>I think the GPOV is to define the relevant elements of Z[X,Y] first</p>",
        "id": 129994038,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090236
    },
    {
        "content": "<p>You're inventing Witt vectors</p>",
        "id": 129994048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532090255
    },
    {
        "content": "<p>you can do stuff for prime powers somehow</p>",
        "id": 129994051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532090261
    },
    {
        "content": "<p>indeed</p>",
        "id": 129994052,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090262
    },
    {
        "content": "<p>Alternatively, Kenny puts Witt vectors into mathlib (-;</p>",
        "id": 129994100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532090291
    },
    {
        "content": "<p>I mean, we are doing this perfectoid stuff. But the mathematicians are already moving on...</p>",
        "id": 129994126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532090333
    },
    {
        "content": "<p>The trendy way to do Witt vectors nowadays is to note that if k is a perfect field of char p and R is a k-algebra then the cotangent complex vanishes</p>",
        "id": 129994127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532090337
    },
    {
        "content": "<p>a la Scholze perfectoid spaces paper</p>",
        "id": 129994138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532090349
    },
    {
        "content": "<p>Nowadays you're only hot if you're doing diamonds or prisms...</p>",
        "id": 129994141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532090352
    },
    {
        "content": "<p>Let's try perfectoid spaces first...</p>",
        "id": 129994229,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532090435
    },
    {
        "content": "<p>(Kevin, I think the perfectoid project is really cool. So I'm just trying to do some related things to the side, while you are wrapping up <code>Cont</code> et al.)</p>",
        "id": 129994239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532090462
    },
    {
        "content": "<p>where are the prism emojis when I need them</p>",
        "id": 129994278,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090520
    },
    {
        "content": "<p>do we have valuations of integers at a prime?</p>",
        "id": 129994432,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090669
    },
    {
        "content": "<p>I think Alexandria has that</p>",
        "id": 129994437,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090677
    },
    {
        "content": "<p>Ok, mathlib knows how to raise ring elements to <code>nat</code>-powers, right? Why is this failing?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">Frob</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"err\">^</span><span class=\"n\">p</span>\n</pre></div>\n\n\n<p>Error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">Prime</span><span class=\"o\">,</span>\n<span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">A</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_pow</span> <span class=\"n\">A</span> <span class=\"bp\">ℕ</span>\n</pre></div>",
        "id": 129994447,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532090700
    },
    {
        "content": "<p>did you import the right things?</p>",
        "id": 129994461,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090720
    },
    {
        "content": "<p>No</p>",
        "id": 129994463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532090730
    },
    {
        "content": "<p>that's why</p>",
        "id": 129994465,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090739
    },
    {
        "content": "<p>Hmmm, I want Lean to tell me what to import...</p>",
        "id": 129994467,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532090744
    },
    {
        "content": "<p>Johan, if you don't know what to do for the perfectoid project, you can do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">complete_space</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">instance</span> <span class=\"n\">separated</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">[</span><span class=\"n\">separated</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">separated</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">separated</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>which is on my TODO list</p>",
        "id": 129994468,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532090749
    },
    {
        "content": "<p>imports? <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 129994510,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090763
    },
    {
        "content": "<p>and is that MWE?</p>",
        "id": 129994523,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090782
    },
    {
        "content": "<p>never mind</p>",
        "id": 129994564,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090858
    },
    {
        "content": "<p><code>import analysis.topology.uniform_space</code></p>",
        "id": 129994623,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532090889
    },
    {
        "content": "<p>and then you get a MWE</p>",
        "id": 129994632,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532090905
    },
    {
        "content": "<p>hmm</p>",
        "id": 129994637,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532090914
    },
    {
        "content": "<p>I'm not saying this is difficult</p>",
        "id": 129994640,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532090920
    },
    {
        "content": "<p>I see Johan is blocked because he waits for Kevin</p>",
        "id": 129994650,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532090930
    },
    {
        "content": "<p>I am dealing with universe issues raised by Mario. I have defined an \"equivalence class of valuations\" on (R : Type u) to be a pre-order on R which is induced from a valuation v : R -&gt; M with M a certain kind of totally ordered monoid, with (M : Type u). I now have to prove that if M had type v then actually there's M' of type u inducing the same pre-order. I dug and dug, and I am now having to define universal properties of quotient groups. But I've screwed up:</p>\n<p><a href=\"https://github.com/kbuzzard/lean-perfectoid-spaces/blob/a0d3bd5de20ed91d2e318914bac742c073b3c4f7/src/for_mathlib/quotient_group.lean#L48\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-perfectoid-spaces/blob/a0d3bd5de20ed91d2e318914bac742c073b3c4f7/src/for_mathlib/quotient_group.lean#L48\">https://github.com/kbuzzard/lean-perfectoid-spaces/blob/a0d3bd5de20ed91d2e318914bac742c073b3c4f7/src/for_mathlib/quotient_group.lean#L48</a></p>\n<p>I need to prove that if G is commutative then so is G/N but I think I managed to define multiplication on G in two different ways. I'm spending all day dealing with admin though. If anyone wants to fix up my easy group theory stuff then feel free!</p>",
        "id": 129995452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532091731
    },
    {
        "content": "<p>I will get back to all this this evening hopefully</p>",
        "id": 129995483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532091796
    },
    {
        "content": "<p>Ok, I started doing this because I was watching Bhargav Bhatt's talk from the Gabber birthday conference.</p>",
        "id": 129995722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532092079
    },
    {
        "content": "<p>It's quite fun! So far I've got: <a href=\"https://gist.github.com/jcommelin/b09dcc1c3494e123e84afc96a91fd61c\" target=\"_blank\" title=\"https://gist.github.com/jcommelin/b09dcc1c3494e123e84afc96a91fd61c\">https://gist.github.com/jcommelin/b09dcc1c3494e123e84afc96a91fd61c</a></p>",
        "id": 129995792,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532092128
    },
    {
        "content": "<p>Making good use of <code>tactic.ring</code>!</p>",
        "id": 129995813,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532092147
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">wtf</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"n\">S</span> <span class=\"n\">T</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">inter</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 129995924,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532092249
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">uniform_space</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">uniform_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">complete_space</span><span class=\"bp\">.</span><span class=\"n\">prod</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">complete_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">×</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">complete</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">hx1</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">complete_space</span><span class=\"bp\">.</span><span class=\"n\">complete</span> <span class=\"err\">$</span> <span class=\"n\">cauchy_map</span> <span class=\"n\">uniform_continuous_fst</span> <span class=\"n\">hf</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"bp\">⟨</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">hx2</span><span class=\"bp\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">complete_space</span><span class=\"bp\">.</span><span class=\"n\">complete</span> <span class=\"err\">$</span> <span class=\"n\">cauchy_map</span> <span class=\"n\">uniform_continuous_snd</span> <span class=\"n\">hf</span> <span class=\"k\">in</span>\n    <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"n\">x2</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nhds_prod_eq</span><span class=\"o\">,</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">prod_def</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n      <span class=\"k\">from</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">le_lift</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">le_lift&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"o\">:=</span> <span class=\"n\">hx1</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">prod</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">sets</span> <span class=\"o\">:=</span> <span class=\"n\">hx2</span> <span class=\"n\">ht</span><span class=\"o\">,</span>\n        <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">inter_mem_sets</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 129995932,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532092264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span></p>",
        "id": 129995939,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532092273
    },
    {
        "content": "<p>26 minutes</p>",
        "id": 129995948,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532092285
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 129996119,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532092462
    },
    {
        "content": "<p>I still don't really know how to go about defining</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">delta_ring</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"c1\">-- λ a b, (a^p + b^p - (a+b)^p)/p</span>\n</pre></div>\n\n\n<p>I know how to do this in maths, but I don't know how to go forward in Lean.</p>",
        "id": 130001219,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532097384
    },
    {
        "content": "<p>I'm not saying it's the best way, but one way would be to define the function from fin (p-1) to nat sending i to (p choose i) / p, and then do a finset.sum [I guess you need p as an input for this function].</p>",
        "id": 130001353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532097564
    },
    {
        "content": "<p>Presumably at some point though you'll need that p times your function is what you want it to be, and there you'll need the binomial theorem, which <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> has done I believe. Looking at what he did might help.</p>",
        "id": 130001422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532097608
    },
    {
        "content": "<p>Ok, I already have that property stated (and sorried). So I'm able to prove properties of delta rings already (-;</p>",
        "id": 130001461,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532097664
    },
    {
        "content": "<p>I'll take a look at what Chris did.</p>",
        "id": 130001483,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532097703
    },
    {
        "content": "<blockquote>\n<p>Presumably at some point though you'll need that p times your function is what you want it to be, and there you'll need the binomial theorem, which <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> has done I believe. Looking at what he did might help.</p>\n</blockquote>\n<p>I can PR it, but I'm not sure whether to call it <code>binomial</code> or <code>add_pow</code>.</p>",
        "id": 130004696,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532100576
    },
    {
        "content": "<p>I wouldn't mind if well-known theorems with well-known names preserve their well-known names.</p>",
        "id": 130008512,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532104451
    },
    {
        "content": "<p>To me it would increase readability of proofs</p>",
        "id": 130008530,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532104483
    },
    {
        "content": "<p>How do you feel about a random German in 1992 deciding to call his seminorms valuations even though they are seminorms, and now we have this annoying problem that our definition of valuation in the perfectoid project is both standard and non-standard simultaneously? :-/</p>",
        "id": 130008597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532104560
    },
    {
        "content": "<p>If someone told me that we were going to ditch that stupid bracket notation for quadratic residues, I would crack open the champagne.</p>",
        "id": 130008664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532104590
    },
    {
        "content": "<p>Oh -- wait -- for binomial we can just call it both</p>",
        "id": 130008683,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532104621
    },
    {
        "content": "<p>that's what they do with left_distrib, right? That's the formally correct historical name, but add_mul (or mul_add, which ever one left distrib is) is a modern sensible name.</p>",
        "id": 130008712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532104673
    },
    {
        "content": "<p>Chris -- do you prove that <code>binomial(a,b)*b!*(a-b)!=a!</code>?</p>",
        "id": 130008795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532104735
    },
    {
        "content": "<p>do we have valuation of an integer over a prime?</p>",
        "id": 130008811,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532104752
    },
    {
        "content": "<p>It's <code>list.count p (factor n)</code> Kenny</p>",
        "id": 130008820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532104785
    },
    {
        "content": "<p>Kevin, it is <code>choose(a,b)</code>, I think. So we can call the binomial theorem <code>binomial</code>, if we want...</p>",
        "id": 130008827,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532104799
    },
    {
        "content": "<p><code>factors n</code> sorry</p>",
        "id": 130008944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532104890
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/data/nat/prime.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/data/nat/prime.lean\">https://github.com/leanprover/mathlib/blob/master/data/nat/prime.lean</a></p>",
        "id": 130008945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532104891
    },
    {
        "content": "<p>lines 226 and 236 show that that's a list of the primes dividing n with multiplicity</p>",
        "id": 130009004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532104929
    },
    {
        "content": "<p><a href=\"https://github.com/dorhinj/leanstuff/blob/3dbf2626138fa7d4ae8ba6d55529713e2d5acd3a/choose.lean#L55\" target=\"_blank\" title=\"https://github.com/dorhinj/leanstuff/blob/3dbf2626138fa7d4ae8ba6d55529713e2d5acd3a/choose.lean#L55\">https://github.com/dorhinj/leanstuff/blob/3dbf2626138fa7d4ae8ba6d55529713e2d5acd3a/choose.lean#L55</a> -- there's the factorial fact</p>",
        "id": 130009294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532105245
    },
    {
        "content": "<blockquote>\n<p><a href=\"https://github.com/dorhinj/leanstuff/blob/3dbf2626138fa7d4ae8ba6d55529713e2d5acd3a/choose.lean#L55\" target=\"_blank\" title=\"https://github.com/dorhinj/leanstuff/blob/3dbf2626138fa7d4ae8ba6d55529713e2d5acd3a/choose.lean#L55\">https://github.com/dorhinj/leanstuff/blob/3dbf2626138fa7d4ae8ba6d55529713e2d5acd3a/choose.lean#L55</a> -- there's the factorial fact</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> It's also here <a href=\"https://github.com/leanprover/mathlib/blob/master/data/nat/choose.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/data/nat/choose.lean\">https://github.com/leanprover/mathlib/blob/master/data/nat/choose.lean</a></p>",
        "id": 130011551,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532107704
    },
    {
        "content": "<p>I couldn't find the binomial theorem though</p>",
        "id": 130012395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532108653
    },
    {
        "content": "<p>I haven't PRed it yet.</p>",
        "id": 130012405,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532108672
    },
    {
        "content": "<p>I mean I couldn't find it in your github repo</p>",
        "id": 130012416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532108689
    },
    {
        "content": "<p>Question: Why is <code>(a^p + b^p - (a+b)^p)/p</code> uniquely defined? Is division by <code>p</code> always uniquely defined (when applied to multiples of <code>p</code>)? Seems like if the ring has characteristic <code>p</code> this will be a problem...</p>",
        "id": 130014183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532110898
    },
    {
        "content": "<p>it isn't uniquely defined, but there's a canonical choice</p>",
        "id": 130014372,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532111114
    },
    {
        "content": "<p>It's good old informal mathematicians again, meaning \"do it in Q, note the answer is in Z, now map it into any ring\"</p>",
        "id": 130014441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532111190
    },
    {
        "content": "<blockquote>\n<p>it isn't uniquely defined, but there's a canonical choice</p>\n</blockquote>\n<p>Did you just use the word 'choice'?</p>",
        "id": 130014936,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532111866
    },
    {
        "content": "<p>I just realised that I think Witt vectors and Hensel's lemma are two very nice (and manageable, I hope) companions to the perfectoid project. They aren't logically necessary, but I think they might be really helpful if one wants to do some examples...</p>",
        "id": 130015002,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532111947
    },
    {
        "content": "<p>yeah, I chose the word \"choice\"</p>",
        "id": 130015089,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532112029
    },
    {
        "content": "<p>I think it's a shame that you have to write it this roundabout way, since it loses the clarity</p>",
        "id": 130015091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532112035
    },
    {
        "content": "<p>Another way to say what you are trying to say is to form <code>x^p + y^p - (x+y)^p</code> as a multivariate polynomial in Z[x,y], divide by <code>p</code>, and evaluate it at <code>a,b</code></p>",
        "id": 130015112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532112090
    },
    {
        "content": "<p>Yes, I completely agree. But I don't know yet how to convince Lean that I can divide that polynomial by <code>p</code></p>",
        "id": 130015162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532112127
    },
    {
        "content": "<p>As a polynomial in <code>Z[x,y]</code>, you can use <code>int.div</code> on the coefficients</p>",
        "id": 130015179,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532112167
    },
    {
        "content": "<p>Aah, and that is always defined, although it sometimes outputs 57. Is that right?</p>",
        "id": 130015193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532112188
    },
    {
        "content": "<p>Or probably the floor of x / y.</p>",
        "id": 130015200,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532112206
    },
    {
        "content": "<p>yes that</p>",
        "id": 130015202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532112212
    },
    {
        "content": "<p>Ok, so then the definition is not hard.</p>",
        "id": 130015206,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532112228
    },
    {
        "content": "<blockquote>\n<p>Another way to say what you are trying to say is to form <code>x^p + y^p - (x+y)^p</code> as a multivariate polynomial, divide by <code>p</code>, and evaluate it at <code>a,b</code></p>\n</blockquote>\n<p>This is just some standard polynomial which shows up in some graduate commutative algebra thing, so mathematicians abuse notation. It means exactly what you said yes. The polynomials even have names -- they're in Z[x,y] but then they get coerced into R[x,y] for any comm_ring R</p>",
        "id": 130015209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112234
    },
    {
        "content": "<p>by GPOV</p>",
        "id": 130015277,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532112291
    },
    {
        "content": "<p>So then I only need to prove the property that <code>p * aux_poly = x^p + y^p - (x+y)^p</code></p>",
        "id": 130015306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532112320
    },
    {
        "content": "<p>And that requires the binomial theorem</p>",
        "id": 130015318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532112342
    },
    {
        "content": "<p>aux_poly x y p</p>",
        "id": 130015319,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532112342
    },
    {
        "content": "<p>you're going to need the binomial theorem at some point</p>",
        "id": 130015326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112354
    },
    {
        "content": "<p>sure</p>",
        "id": 130015329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532112358
    },
    {
        "content": "<p>It's in your stack project <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 130015370,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1532112368
    },
    {
        "content": "<p>I didn't think to look there</p>",
        "id": 130015374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112378
    },
    {
        "content": "<p>I don't think you actually need the binomial theorem for this, but you mathematicians like your hammers</p>",
        "id": 130015379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532112384
    },
    {
        "content": "<p>Why not?</p>",
        "id": 130015386,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532112405
    },
    {
        "content": "<p>It's an easy proof by induction</p>",
        "id": 130015389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532112414
    },
    {
        "content": "<p>if you define <code>aux_poly</code> to be the explicit <code>(choose p i) / p</code> etc etc then it's the same as the binomial theorem</p>",
        "id": 130015390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112419
    },
    {
        "content": "<p>it isn't because you can't fill in the gap that p causes</p>",
        "id": 130015397,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532112425
    },
    {
        "content": "<p>forget that</p>",
        "id": 130015402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532112429
    },
    {
        "content": "<p>you can't extend the definition of aux_poly to all nat</p>",
        "id": 130015406,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532112433
    },
    {
        "content": "<p>you can, he just did that... but you get nonsense</p>",
        "id": 130015419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532112451
    },
    {
        "content": "<p>I'm trying to figure out what GPOV stand for (I mean understand the acronym, I understand the maths). Google is not very helpful</p>",
        "id": 130015505,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1532112546
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I just realised that trying to convert arithmetic geometers and/or number theorists to Lean is going to be futile. They start every talk with \"For me all rings are commutative.\" If they can't do that at the top of their Lean files, and they really have to type <code>comm_ring</code> instead of <code>ring</code> all the time, they will drop out immediately...</p>",
        "id": 130015601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532112606
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> General Point Of View?</p>",
        "id": 130015614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532112616
    },
    {
        "content": "<p>There is also nPOV = n-categorical POV</p>",
        "id": 130015628,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532112635
    },
    {
        "content": "<p>Grothendieck's point of view</p>",
        "id": 130015638,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532112652
    },
    {
        "content": "<p>you could always fork mathlib</p>",
        "id": 130015717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112734
    },
    {
        "content": "<p><code>comm_ring</code> is in core</p>",
        "id": 130015731,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532112759
    },
    {
        "content": "<p>oh crap</p>",
        "id": 130015735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112766
    },
    {
        "content": "<p><code>comm_ring</code> -&gt; <code>ring</code></p>",
        "id": 130015738,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112772
    },
    {
        "content": "<p><code>ring</code> -&gt; <code>non_comm_ring</code></p>",
        "id": 130015741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112778
    },
    {
        "content": "<p>that's what it should be</p>",
        "id": 130015742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112781
    },
    {
        "content": "<p><code>local notation `ring` := comm_ring</code> should work</p>",
        "id": 130015765,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532112811
    },
    {
        "content": "<p>and then <code>local notation `non_comm_ring` := ring</code>?</p>",
        "id": 130015784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112838
    },
    {
        "content": "<p>do you actually care about that?</p>",
        "id": 130015846,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532112862
    },
    {
        "content": "<p>I will grudgingly confess to occasionally using the ring of 2 x 2 matrices</p>",
        "id": 130015854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1532112891
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> you're lucky all rings have unity</p>",
        "id": 130015863,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532112906
    },
    {
        "content": "<p>maybe don't use stupid overrides in that file</p>",
        "id": 130015872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532112913
    },
    {
        "content": "<p>also, overriding the notation for <code>ring</code> doesn't prevent you from using matrix rings</p>",
        "id": 130015972,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532112991
    },
    {
        "content": "<p>of course typeclass inference doesn't care about your notation</p>",
        "id": 130015986,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532113009
    },
    {
        "content": "<p>Now I am picturing some mathematician starting their talk with \"in this lecture, all rings are commutative\" and proceed to do amazing things by commuting matrices that don't commute</p>",
        "id": 130016100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532113138
    },
    {
        "content": "<blockquote>\n<p>of course typeclass inference doesn't care about your notation</p>\n</blockquote>\n<p>It doesn't? I don't know if I am happy or sad about that...</p>",
        "id": 130018032,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532115346
    },
    {
        "content": "<p>well the alternative is the \"commutative by fiat\" lecture scenario I mentioned</p>",
        "id": 130018603,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532115988
    },
    {
        "content": "<p>Ok, so now I want to define the <code>aux_poly</code> in two variables. What would be the best way to do that? I currently have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">section</span> <span class=\"n\">delta_ring_aux_poly</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"n\">def</span> <span class=\"n\">delta_ring</span><span class=\"bp\">.</span><span class=\"n\">aux_poly1</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">X0</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">zero_lt_succ</span> <span class=\"mi\">1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">X1</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">le_refl</span> <span class=\"mi\">2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">X0</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">+</span> <span class=\"n\">X1</span><span class=\"err\">^</span><span class=\"n\">p</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">X0</span><span class=\"bp\">+</span><span class=\"n\">X1</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">p</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">delta_ring</span><span class=\"bp\">.</span><span class=\"n\">aux_poly2</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"bp\">/</span><span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">zero_div</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"n\">delta_ring</span><span class=\"bp\">.</span><span class=\"n\">aux_poly1</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">delta_ring_aux_poly</span>\n\n<span class=\"n\">def</span> <span class=\"n\">delta_ring</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mv_polynomial</span><span class=\"bp\">.</span><span class=\"n\">functorial</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">cast</span> <span class=\"n\">delta_ring</span><span class=\"bp\">.</span><span class=\"n\">aux_poly2</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"err\">∘</span>\n<span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">fin</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">))</span>\n<span class=\"c1\">--  sorry</span>\n<span class=\"c1\">-- λ a b, (a^p + b^p - (a+b)^p)/p</span>\n</pre></div>",
        "id": 130135388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532333123
    },
    {
        "content": "<p>It it better to use <code>choose</code> here, and explicitly define it as  some <code>finset.sum</code>?</p>",
        "id": 130135453,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532333168
    },
    {
        "content": "<p>I don't really like the <code>finsupp.map_range</code>, but that is just <em>my</em> gut feeling.</p>",
        "id": 130135463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532333209
    },
    {
        "content": "<p>This looks like a pretty faithful rendition of my suggestion</p>",
        "id": 130135543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532333369
    },
    {
        "content": "<p>the last bit looks incomplete though</p>",
        "id": 130135548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532333377
    },
    {
        "content": "<p>It is.</p>",
        "id": 130135588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532333405
    },
    {
        "content": "<p>I don't know how to define functions out of <code>fin n</code>. Do we have to use if-then-else for that?</p>",
        "id": 130135602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532333438
    },
    {
        "content": "<p>there should be a <code>fin.cons</code> function</p>",
        "id": 130135611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532333465
    },
    {
        "content": "<p>you can also use a <code>match</code> block</p>",
        "id": 130135619,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532333480
    },
    {
        "content": "<p>there is <code>fin.cases</code></p>",
        "id": 130135625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532333500
    },
    {
        "content": "<p>Probably it is easier to use <code>bool</code> rather than <code>fin 2</code> here</p>",
        "id": 130135683,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532333591
    },
    {
        "content": "<p>Aah, that is a nice suggestion</p>",
        "id": 130135764,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532333719
    },
    {
        "content": "<p>I'll try that</p>",
        "id": 130135767,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532333725
    },
    {
        "content": "<p>You can use <code>cond</code> to case on <code>bool</code></p>",
        "id": 130135777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532333746
    },
    {
        "content": "<p>Hmm, what exactly do you mean with that?</p>",
        "id": 130135846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532333874
    },
    {
        "content": "<p>Aah</p>",
        "id": 130135892,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532333902
    },
    {
        "content": "<p>So <code>cond</code> is in fact my function. I want to look at <code>cond i a b</code></p>",
        "id": 130135898,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532333932
    },
    {
        "content": "<p>yes</p>",
        "id": 130135907,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1532333944
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Are you planning on PR-ing your binomial theorem sometime soon?</p>",
        "id": 130136703,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532335161
    },
    {
        "content": "<p>So, now I need to sum over <code>fin n</code>. Hooray! I don't even know how to deal with the case <code>n = 1</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">57</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 130144619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532347682
    },
    {
        "content": "<p>I would like to tell Lean that <code>finset.univ</code> is <code>singleton 0</code> in this case.</p>",
        "id": 130144647,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532347705
    },
    {
        "content": "<p>But I don't know how to do that.</p>",
        "id": 130144649,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532347712
    },
    {
        "content": "<p>(Technically <code>singleton \\&lt;0,_\\&gt;</code>...)</p>",
        "id": 130144655,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532347725
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"mi\">57</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)),</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"err\">^</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">))</span> <span class=\"bp\">=</span>\n    <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"err\">$</span> <span class=\"n\">fin</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">singleton</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">ext&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hx</span> <span class=\"k\">with</span> <span class=\"n\">hx</span> <span class=\"n\">hx1</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n    <span class=\"n\">cases</span> <span class=\"n\">hx1</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">H1</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_singleton</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span>\n</pre></div>",
        "id": 130145367,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1532348635
    },
    {
        "content": "<p>You were able to convince Lean that you get a singleton! I couldn't even get it to typecheck the type of H1.</p>",
        "id": 130145441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532348711
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Are you planning on PR-ing your binomial theorem sometime soon?</p>\n</blockquote>\n<p>Thanks! <span class=\"emoji emoji-1f44f\" title=\"clap\">:clap:</span> <span class=\"emoji emoji-1f419\" title=\"octopus\">:octopus:</span></p>",
        "id": 130161570,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1532366706
    }
]