[
    {
        "content": "<p>Hello,  <br>\nDo  you have an idea ?  I think it's because  <code> n : nat </code>  and the bullet <code> n \\bu x </code> is not the same bullet  than the first bullet in <code> a \\bu ( n\\bu x ) </code></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">]</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">erw</span> <span class=\"err\">←</span> <span class=\"n\">mul_smul</span><span class=\"o\">,</span>     <span class=\"c1\">---   :/ :/</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 195609283,
        "sender_full_name": "orlando",
        "timestamp": 1588099679
    },
    {
        "content": "<p>In my experience it's usually better to avoid using this <code>nat</code> <code>•</code> instance at all, by writing <code>(n : R) • x</code></p>",
        "id": 195609754,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588099911
    },
    {
        "content": "<p>I'm ok <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  but this come from lean (<code>finset.sum_const</code>)  not me : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring_exp</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">}[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">cont</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">X</span>  <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"bp\">=</span>  <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_const</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- i can change a • (fintype.card X) • y = y,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The tactic state is : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">1</span> <span class=\"n\">goal</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n<span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">M</span>\n<span class=\"err\">⊢</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"n\">add_monoid</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">y</span>   <span class=\"c1\">--- the same as  a \\bu ( fintype.card X)) \\bu y) = y</span>\n</code></pre></div>",
        "id": 195612394,
        "sender_full_name": "orlando",
        "timestamp": 1588101288
    },
    {
        "content": "<p>That good,  i find the function :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">hyp</span> <span class=\"o\">:</span>  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">•</span> <span class=\"o\">((</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">•</span>  <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"err\">•</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">,</span>   <span class=\"c1\">--- just library_search !</span>\n        <span class=\"n\">exact</span> <span class=\"n\">semimodule</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_smul</span> <span class=\"n\">R</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_smul</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hyp</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">one_smul</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span> <span class=\"bp\">```</span>\n</code></pre></div>",
        "id": 195620694,
        "sender_full_name": "orlando",
        "timestamp": 1588104953
    },
    {
        "content": "<p>Note that <code>R</code> is an explicit argument of <code>smul_eq_smul</code>, so you can do <code>rw [semimodule.smul_eq_smul R, smul_smul, hyp, one_smul]</code> (didn't try but should work)</p>",
        "id": 195642025,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588116723
    }
]