[
    {
        "content": "<p>Should I not be using these functions:</p>",
        "id": 127168435,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527435737
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">plus_to_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"kn\">definition</span> <span class=\"n\">nat_to_plus</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span>\n\n<span class=\"c1\">-- example (n : ℕ+) : nat_to_plus (plus_to_nat n) = n := by simp -- fails</span>\n</pre></div>",
        "id": 127168436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527435742
    },
    {
        "content": "<p>Not only are we no longer refl, we are not even simp apparently</p>",
        "id": 127168437,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527435755
    },
    {
        "content": "<p>Is that because simp won't unfold my definition by default?</p>",
        "id": 127168438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527435774
    },
    {
        "content": "<p>I am trying to make working with pnat easier. Nobody like a subtype.</p>",
        "id": 127168444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527435804
    },
    {
        "content": "<p>But I really want it to be easy to work with</p>",
        "id": 127168445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527435818
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"kn\">definition</span> <span class=\"n\">plus_to_nat</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"kn\">definition</span> <span class=\"n\">nat_to_plus</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ+</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat_to_plus</span> <span class=\"o\">(</span><span class=\"n\">plus_to_nat</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">nat_to_plus</span> <span class=\"n\">plus_to_nat</span><span class=\"o\">,</span> <span class=\"c1\">-- still need to do this</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>What am I doing wrong? Should those functions not have names and I am expected to always use coercion?</p>",
        "id": 127168492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527435929
    },
    {
        "content": "<p>The functions have names</p>",
        "id": 127168493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527435949
    },
    {
        "content": "<p>Have you looked at <code>pnat.lean</code>?</p>",
        "id": 127168494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527435956
    },
    {
        "content": "<p>I have</p>",
        "id": 127168854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436686
    },
    {
        "content": "<p>Oh I see, you're saying don't make new names for old functions</p>",
        "id": 127168860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436721
    },
    {
        "content": "<p>because the old ones will have been made better</p>",
        "id": 127168862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436735
    },
    {
        "content": "<p>By the way I'm revising pnat right now</p>",
        "id": 127168873,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527436784
    },
    {
        "content": "<p>to remove that funny coercion</p>",
        "id": 127168877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527436793
    },
    {
        "content": "<p>So am I supposed to refer to these functions as <code>coe_nat_pnat</code> and <code>coe_pnat_nat</code> if I ever talk about them?</p>",
        "id": 127168938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436831
    },
    {
        "content": "<p>wait those aren't the functions</p>",
        "id": 127168954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436879
    },
    {
        "content": "<p><code>nat.to_pnat'</code> and <code>subtype.val</code> are the rather unsexy  names of the functions</p>",
        "id": 127168998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436926
    },
    {
        "content": "<p>Is the idea behind coercion that I do not ever mention these names?</p>",
        "id": 127169005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436947
    },
    {
        "content": "<p>yes</p>",
        "id": 127169006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527436951
    },
    {
        "content": "<p><code>nat.to_pnat'</code> is going to be used instead of the coercion</p>",
        "id": 127169012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527436967
    },
    {
        "content": "<p>but the other coercion will stay</p>",
        "id": 127169014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527436975
    },
    {
        "content": "<p>and what happens when I end up with <code>↑↑↑↑↑n</code>?</p>",
        "id": 127169016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527436981
    },
    {
        "content": "<p>what are those coercions?</p>",
        "id": 127169024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527436997
    },
    {
        "content": "<p>Oh -- you're removing the instance?</p>",
        "id": 127169025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437000
    },
    {
        "content": "<p>the coercion from nat to pnat?</p>",
        "id": 127169029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437016
    },
    {
        "content": "<p>yes</p>",
        "id": 127169032,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437019
    },
    {
        "content": "<p>Oh great</p>",
        "id": 127169033,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437022
    },
    {
        "content": "<p>you will really break Reid's code which I'm trying to maintain :-)</p>",
        "id": 127169080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437059
    },
    {
        "content": "<p>I can't help but think that this is good though</p>",
        "id": 127169084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437076
    },
    {
        "content": "<p>So you'll replace it with a dependent coercion which typechecks but when it actually runs it will ask the type class resolution system for a proof that n &gt; 0?</p>",
        "id": 127169093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437123
    },
    {
        "content": "<p>and then the coercion from pnat to nat to pnat will become refl</p>",
        "id": 127169136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437174
    },
    {
        "content": "<p>or some other cool new system</p>",
        "id": 127169140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437207
    },
    {
        "content": "<p>I don't know if the typeclass resolution system will be the right thing</p>",
        "id": 127169144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437224
    },
    {
        "content": "<p>I want it to check the properties of all the pnats it can see :-)</p>",
        "id": 127169149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437243
    },
    {
        "content": "<p>and then use known lemmas like a&gt;0 and b&gt;0 implies a+b&gt;0</p>",
        "id": 127169152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437270
    },
    {
        "content": "<p>Can it work like that? That's how it works in a mathematician's head</p>",
        "id": 127169187,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437283
    },
    {
        "content": "<p>that is not at all what I'm suggesting :)</p>",
        "id": 127169193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437302
    },
    {
        "content": "<p>thought not</p>",
        "id": 127169194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437313
    },
    {
        "content": "<p>I'm just removing the nat_pnat coercion, that's it</p>",
        "id": 127169195,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437319
    },
    {
        "content": "<p>less ambitious</p>",
        "id": 127169196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437326
    },
    {
        "content": "<p>there is a coercion that asks dec_trivial for the positivity proof</p>",
        "id": 127169204,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437350
    },
    {
        "content": "<p>What is stopping my idea above being built into Lean 7?</p>",
        "id": 127169205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437354
    },
    {
        "content": "<p>that's <code>nat.to_pnat</code></p>",
        "id": 127169206,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437357
    },
    {
        "content": "<p>Oh yeah I saw that</p>",
        "id": 127169207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437361
    },
    {
        "content": "<p>you fill in the hole with a tactic</p>",
        "id": 127169208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437367
    },
    {
        "content": "<p>I see</p>",
        "id": 127169209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437371
    },
    {
        "content": "<p>it could ask some other tactic, like simp</p>",
        "id": 127169211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437380
    },
    {
        "content": "<p>so at some point you might want to get hold of a proof</p>",
        "id": 127169213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437383
    },
    {
        "content": "<p>and you have loads of options</p>",
        "id": 127169215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437389
    },
    {
        "content": "<p>and then it would do some kind of a+b&gt;0 thing</p>",
        "id": 127169217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437396
    },
    {
        "content": "<p>you could ask the type class dude</p>",
        "id": 127169218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437397
    },
    {
        "content": "<p>or a tactic</p>",
        "id": 127169258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437404
    },
    {
        "content": "<p>or you could pester the user</p>",
        "id": 127169264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437417
    },
    {
        "content": "<p>But I'm a busy guy and I don't want to be pestered</p>",
        "id": 127169267,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437425
    },
    {
        "content": "<p>But I hope that people provide a positivity proof of a+b just by adding a b : pnat</p>",
        "id": 127169268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437437
    },
    {
        "content": "<p>Yes</p>",
        "id": 127169272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437444
    },
    {
        "content": "<p>so in some sense my example was not good</p>",
        "id": 127169274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437450
    },
    {
        "content": "<p>as long as you stay in pnat world it's all good</p>",
        "id": 127169276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437460
    },
    {
        "content": "<p>but how about \"n^2 + 1 : pnat\"</p>",
        "id": 127169277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437462
    },
    {
        "content": "<p>if n is a nat</p>",
        "id": 127169280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437466
    },
    {
        "content": "<p>A mathematician would be able to do that</p>",
        "id": 127169283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437474
    },
    {
        "content": "<p>that's <code>succ_pnat</code></p>",
        "id": 127169284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437475
    },
    {
        "content": "<p>damn you</p>",
        "id": 127169286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437481
    },
    {
        "content": "<p>What about (n + 4 + n : pnat)</p>",
        "id": 127169288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437519
    },
    {
        "content": "<p>but I think there is space for add_pnat_left : N -&gt; N+ -&gt; N+</p>",
        "id": 127169326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437524
    },
    {
        "content": "<p>A mathematician could do that</p>",
        "id": 127169327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437526
    },
    {
        "content": "<p>what about (4 + n : pnat)</p>",
        "id": 127169331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437535
    },
    {
        "content": "<p>that would cover your example</p>",
        "id": 127169333,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437536
    },
    {
        "content": "<p>I see</p>",
        "id": 127169334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437542
    },
    {
        "content": "<p>But can we get the coercion to do it?</p>",
        "id": 127169335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437552
    },
    {
        "content": "<p>Why is the coercion system part of type class resolution?</p>",
        "id": 127169337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437560
    },
    {
        "content": "<p>could it be its own system?</p>",
        "id": 127169339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437566
    },
    {
        "content": "<p>no, the old coercion did that by cheating</p>",
        "id": 127169341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437578
    },
    {
        "content": "<p>you can still use <code>nat.to_pnat'</code> if you don't want to be bothered</p>",
        "id": 127169346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437605
    },
    {
        "content": "<p>So how do I get (4 + n : pnat) to work?</p>",
        "id": 127169347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437611
    },
    {
        "content": "<p>(4+n).to_pnat'</p>",
        "id": 127169349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437617
    },
    {
        "content": "<p>But that's bad</p>",
        "id": 127169395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437704
    },
    {
        "content": "<p>because the value is now not defeq to 4+n</p>",
        "id": 127169398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437713
    },
    {
        "content": "<p>Really there's no need to use <code>to_pnat</code> unless you care that the nat component is defeq to the given arg</p>",
        "id": 127169400,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437715
    },
    {
        "content": "<p>`to_pnat' is not the function I had in mind</p>",
        "id": 127169401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437728
    },
    {
        "content": "<p>the point is that it works when the input made sense</p>",
        "id": 127169403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437745
    },
    {
        "content": "<p>The function I had in mind sends <code>4 + n</code> to a pnat whose value is 4 + n</p>",
        "id": 127169405,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437749
    },
    {
        "content": "<p>it's like nat.sub</p>",
        "id": 127169406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437752
    },
    {
        "content": "<p>We are missing a function</p>",
        "id": 127169408,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437760
    },
    {
        "content": "<p>That's what causes the problem</p>",
        "id": 127169448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437777
    },
    {
        "content": "<p>Definitional equality is so important to you guys</p>",
        "id": 127169449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437788
    },
    {
        "content": "<p>and I don't want to throw it away here</p>",
        "id": 127169451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437794
    },
    {
        "content": "<p>that function exists too</p>",
        "id": 127169453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437800
    },
    {
        "content": "<p>that's <code>nat.to_pnat</code></p>",
        "id": 127169454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437804
    },
    {
        "content": "<p>that's why there's two versions</p>",
        "id": 127169457,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437812
    },
    {
        "content": "<p>or just <code>pnat.mk</code></p>",
        "id": 127169463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437840
    },
    {
        "content": "<p>i.e. the constructor</p>",
        "id": 127169464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437848
    },
    {
        "content": "<p><code>example (n : ℕ) : ℕ+ := nat.to_pnat (4 + n)</code></p>",
        "id": 127169466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437859
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">exact</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">given</span> <span class=\"n\">expression</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">true</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">as_true</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">as_true</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">4</span> <span class=\"bp\">+</span> <span class=\"n\">n</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 127169467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437874
    },
    {
        "content": "<p>but that one gives you a proof obligation</p>",
        "id": 127169471,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437878
    },
    {
        "content": "<p>But 4 + n &gt; 0 is true by schookid</p>",
        "id": 127169472,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437881
    },
    {
        "content": "<p>and you'd better prove it</p>",
        "id": 127169510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437884
    },
    {
        "content": "<p>It's true by schoolkid</p>",
        "id": 127169513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437890
    },
    {
        "content": "<p><code>nat.to_pnat (4 + n) (by schoolkid)</code></p>",
        "id": 127169514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437897
    },
    {
        "content": "<p>I really want this schoolkid tactic</p>",
        "id": 127169516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437916
    },
    {
        "content": "<p>Mathematicians want to pass over schoolkid stuff without any comment</p>",
        "id": 127169517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437928
    },
    {
        "content": "<p>I see</p>",
        "id": 127169518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527437941
    },
    {
        "content": "<p>the scope of things you could write there is unbounded</p>",
        "id": 127169524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437968
    },
    {
        "content": "<p>At some point you have to actually prove things</p>",
        "id": 127169527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527437989
    },
    {
        "content": "<p>If you don't care to prove that statement, you can use <code>(4+n).to_pnat'</code></p>",
        "id": 127169572,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438018
    },
    {
        "content": "<p>rofl</p>",
        "id": 127169574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438038
    },
    {
        "content": "<p>unless it's an important definition you are going to unfold later, I doubt you will even notice the difference</p>",
        "id": 127169575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438041
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">pnat</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">to_pnat</span> <span class=\"c1\">-- chaos ensues</span>\n</pre></div>",
        "id": 127169576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438042
    },
    {
        "content": "<p>I think #check might have dealt with that one better</p>",
        "id": 127169578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438054
    },
    {
        "content": "<p>Is that a bug?</p>",
        "id": 127169586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438085
    },
    {
        "content": "<p><code>#check @nat.to_pnat</code> works fine</p>",
        "id": 127169587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438100
    },
    {
        "content": "<p>you went for exact_dec_trivial??</p>",
        "id": 127169627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438139
    },
    {
        "content": "<p>Not even simp?</p>",
        "id": 127169628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438147
    },
    {
        "content": "<p><code>def to_pnat (n : ℕ) (h : n &gt; 0 . tactic.exact_dec_trivial) : ℕ+ := ⟨n, h⟩</code></p>",
        "id": 127169631,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438162
    },
    {
        "content": "<p>Those are incomparable tactics</p>",
        "id": 127169632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438165
    },
    {
        "content": "<p>I think you should use sledgehammer</p>",
        "id": 127169634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438181
    },
    {
        "content": "<p>We want this coercion to <em>work</em>!</p>",
        "id": 127169639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438189
    },
    {
        "content": "<p><code>to_pnat</code> : 3/10. Must try harder to coerce.</p>",
        "id": 127169644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438217
    },
    {
        "content": "<p>this is a basic function, it's not my job to select my favorite finishing tactic and introduce dependencies early in the development</p>",
        "id": 127169645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438220
    },
    {
        "content": "<p>Dependencies?!</p>",
        "id": 127169689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438257
    },
    {
        "content": "<p>We want it to <em>work</em>!</p>",
        "id": 127169692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438274
    },
    {
        "content": "<p>So in fact you are suggesting that I should write \"mathematicians mode\"</p>",
        "id": 127169695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438291
    },
    {
        "content": "<p>where we put the coercion back but we use by schoolkid</p>",
        "id": 127169700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438308
    },
    {
        "content": "<p>The thing about auto params is that they can't be changed later</p>",
        "id": 127169703,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438311
    },
    {
        "content": "<p>right</p>",
        "id": 127169704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438315
    },
    {
        "content": "<p>I am seriously suggesting a \"mathematicians overlay\"</p>",
        "id": 127169706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438326
    },
    {
        "content": "<p>I was thinking about this earlier when chatting to Kenny and Chris</p>",
        "id": 127169707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438334
    },
    {
        "content": "<p>So there's a coercion from nat to pnat</p>",
        "id": 127169708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438354
    },
    {
        "content": "<p>(although it might not last long)</p>",
        "id": 127169709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438357
    },
    {
        "content": "<p>and so of course my first question is \"what the hell are you going to do with zero\"</p>",
        "id": 127169748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438373
    },
    {
        "content": "<p>because of course you can use nat.rec to define it, and succ n goes to succ n together with the proof that succ n &gt; 0</p>",
        "id": 127169749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438419
    },
    {
        "content": "<p>and 0 goes to...this is just stupid</p>",
        "id": 127169752,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438426
    },
    {
        "content": "<p>So I think you should send 0 to 37</p>",
        "id": 127169755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438443
    },
    {
        "content": "<p><code>nat -&gt; option pnat</code> problem solved</p>",
        "id": 127169756,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527438455
    },
    {
        "content": "<p>I think that that's a much better instance for the coercion because I think it better represents what is happening</p>",
        "id": 127169757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438460
    },
    {
        "content": "<p>At the places it was supposed to be defined, it does what it is supposed to do</p>",
        "id": 127169797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438495
    },
    {
        "content": "<p>and it sends everything else to 37</p>",
        "id": 127169800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438502
    },
    {
        "content": "<p>That's a weird option for a <em>coercion</em></p>",
        "id": 127169803,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438505
    },
    {
        "content": "<p>I don't see why it's any weirder than 1</p>",
        "id": 127169807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438517
    },
    {
        "content": "<p>It's not even making a pnat?</p>",
        "id": 127169808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438529
    },
    {
        "content": "<p>how often do you move between nat and pnat? I feel like most people, once working with pnats, will continue to deal only in pnats</p>",
        "id": 127169809,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527438533
    },
    {
        "content": "<p>Oh sorry</p>",
        "id": 127169812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438536
    },
    {
        "content": "<p>I'll make it a pnat, sure</p>",
        "id": 127169814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438540
    },
    {
        "content": "<p>in that case explicitly providing the proof obligation <code>n &gt; 0</code> is not such a burden</p>",
        "id": 127169819,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527438562
    },
    {
        "content": "<p>Of course pnat is inhabited, so we can use iget on that...</p>",
        "id": 127169820,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438563
    },
    {
        "content": "<p>but I just want to make the point that if you're coercing then you'd better realise that if you do this on 0 then you just did something stupid</p>",
        "id": 127169821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438568
    },
    {
        "content": "<p>OF COURSE</p>",
        "id": 127169822,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438575
    },
    {
        "content": "<p>But I think that if the coercion did that</p>",
        "id": 127169824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438585
    },
    {
        "content": "<p>then I think it would force people to write better code</p>",
        "id": 127169825,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438591
    },
    {
        "content": "<p>because they wouldn't do the lazy junk theorem thing which you do</p>",
        "id": 127169828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438600
    },
    {
        "content": "<p>coercions don't have that luxury</p>",
        "id": 127169833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438603
    },
    {
        "content": "<p>oh really</p>",
        "id": 127169872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438619
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def coe (n):\n  assert (n &gt; 0)\n  return [code]\n</pre></div>",
        "id": 127169873,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527438621
    },
    {
        "content": "<p>They are functions A -&gt; B, where the user gets to pick A and B</p>",
        "id": 127169874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438623
    },
    {
        "content": "<p>Python style</p>",
        "id": 127169875,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527438624
    },
    {
        "content": "<p>we should have errors in Lean</p>",
        "id": 127169878,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527438641
    },
    {
        "content": "<p>That's called monadic programming</p>",
        "id": 127169882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438651
    },
    {
        "content": "<p>mathematicians don't want to deal with that</p>",
        "id": 127169885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438665
    },
    {
        "content": "<p>so I'm sending nat to pnat, where everything positive goes to the correct thing (including defeq) and 0 goes to 37</p>",
        "id": 127169889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438671
    },
    {
        "content": "<p>sure</p>",
        "id": 127169891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438677
    },
    {
        "content": "<p>because then <em>none</em> of the junk theorems would work</p>",
        "id": 127169892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think you want something like <code>nat.rec 37 id</code> where you replace <code>id</code> with the appropriate thing so it works <code>defeq</code></p>",
        "id": 127169893,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527438709
    },
    {
        "content": "<p>and you would be forced to carry around the proof that n &gt; 0 properly</p>",
        "id": 127169894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438711
    },
    {
        "content": "<p>I don't think I prove any junk theorems about to_pnat'</p>",
        "id": 127169895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438721
    },
    {
        "content": "<p>no but that's why you computer scientists tell us that functions should be total</p>",
        "id": 127169935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438741
    },
    {
        "content": "<p>but I think you are making an issue where none exists here</p>",
        "id": 127169936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438747
    },
    {
        "content": "<p>I am suggesting that real.sqrt should send all negative reals to 37</p>",
        "id": 127169938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438755
    },
    {
        "content": "<p>There are options available, pick your favorite</p>",
        "id": 127169939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438765
    },
    {
        "content": "<p>I think that 0 is the worst option</p>",
        "id": 127169940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438772
    },
    {
        "content": "<blockquote>\n<p>because then <em>none</em> of the junk theorems would work</p>\n</blockquote>\n<p>except the one which says <code>(0 : pnat) = 37</code> :P</p>",
        "id": 127169946,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527438789
    },
    {
        "content": "<p>because it maximises the chance that the human prover doesn't spot their error</p>",
        "id": 127169948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438809
    },
    {
        "content": "<p>Don't worry, they will notice</p>",
        "id": 127169950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438825
    },
    {
        "content": "<p>you can't finish the proof if your model is wrong</p>",
        "id": 127169952,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438836
    },
    {
        "content": "<p>That one time you take a square root and you forget to check the argument was non-negative</p>",
        "id": 127169989,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438844
    },
    {
        "content": "<p>then your theorem fails</p>",
        "id": 127169992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438852
    },
    {
        "content": "<p>you will discover this the very next time you try and use the square root</p>",
        "id": 127169993,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438854
    },
    {
        "content": "<p>that's the point</p>",
        "id": 127169995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438859
    },
    {
        "content": "<p>it fails earlier</p>",
        "id": 127169997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438862
    },
    {
        "content": "<p>and you come here and ask about it</p>",
        "id": 127169998,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438862
    },
    {
        "content": "<p>which is a good thing</p>",
        "id": 127170001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438864
    },
    {
        "content": "<p>not me asking :-)</p>",
        "id": 127170002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438887
    },
    {
        "content": "<p>the failure</p>",
        "id": 127170003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438889
    },
    {
        "content": "<p>but composition is a really nice way to write expressions, and I don't want to lose it</p>",
        "id": 127170004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438893
    },
    {
        "content": "<p>because the error says \"x isn't 37\" and I look at it and think \"37? What the...Oh! I didn't check it wasn't negative!\"</p>",
        "id": 127170011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438911
    },
    {
        "content": "<p>lol 37</p>",
        "id": 127170012,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527438927
    },
    {
        "content": "<p>Obviously removing the coercion solves all these problems</p>",
        "id": 127170013,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438932
    },
    {
        "content": "<p>as if x&lt;0 is decidable</p>",
        "id": 127170014,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527438933
    },
    {
        "content": "<p>It _has_ to be 37</p>",
        "id": 127170015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438935
    },
    {
        "content": "<p>they won't ever give 37 to you</p>",
        "id": 127170016,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527438940
    },
    {
        "content": "<p>x&lt;0 is not decidable</p>",
        "id": 127170017,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527438943
    },
    {
        "content": "<p>yes it is, it's false</p>",
        "id": 127170018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527438950
    },
    {
        "content": "<p>rofl you should have seen the original version of complex.lean</p>",
        "id": 127170019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438953
    },
    {
        "content": "<p>I had to prove it was inhabited</p>",
        "id": 127170048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438963
    },
    {
        "content": "<p>but I changed it before I made the PR</p>",
        "id": 127170060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438980
    },
    {
        "content": "<p>You're right, I'd never have got away with it</p>",
        "id": 127170061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527438998
    },
    {
        "content": "<p>When I removed the coercion, there was one place where it appeared in mathlib</p>",
        "id": 127170069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527439059
    },
    {
        "content": "<p>I had to define a positive sequence that converged to zero, and used (n:ℕ+)⁻¹</p>",
        "id": 127170119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527439116
    },
    {
        "content": "<p>I think that's a good example of use, since it doesn't matter what the value is at zero, it's just a value</p>",
        "id": 127170127,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527439155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I'm a bit confused. With division by zero, or subtraction of nat's you say \"just get over it, there is a footnote explaining some edge cases\". Why isn't that enough here? Why don't you want to define <code>x / 0</code> as 37? (I actually prefer 57, since that is Grothendieck's prime...)</p>",
        "id": 127172155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527443637
    },
    {
        "content": "<p>Or similarly <code>(3 : nat) - (5 : nat)</code>. That should also be <code>57</code>, I think...</p>",
        "id": 127172198,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527443666
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/blob/master/data/pnat.lean\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/data/pnat.lean\">https://github.com/leanprover/mathlib/blob/master/data/pnat.lean</a></p>",
        "id": 127180246,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527462858
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> congratulations, it has been removed</p>",
        "id": 127180248,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527462867
    },
    {
        "content": "<p>Maybe one day it will come back with super powers</p>",
        "id": 127188139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527481168
    }
]