[
    {
        "content": "<p>I've been trying for a while and did not figure it out. Please help find the next step in <code>ruesDiffIteratedDeriv</code>, applying <code>deriv</code> to both sides of the equation <code>K_ih</code>.<br>\n<a href=\"/user_uploads/3121/8A084bX2AklWDurG_PXSI5AZ/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/8A084bX2AklWDurG_PXSI5AZ/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/8A084bX2AklWDurG_PXSI5AZ/image.png\"></a></div><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.deriv</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.calculus.iterated_deriv</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">ruesDiff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffHasDeriv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">has_deriv_at</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"n\">z</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">-- already proved elsewhere</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffDeriv</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">deriv</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">deriv_eq</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ruesDiffHasDeriv</span> <span class=\"n\">n</span> <span class=\"n\">m</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">ruesDiffIteratedDeriv</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">iterated_deriv</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ruesDiff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">k</span> <span class=\"k\">with</span> <span class=\"n\">K</span> <span class=\"n\">K_ih</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">iterated_deriv_zero</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- -- the following 4 attemps all failed.</span>\n\n  <span class=\"c1\">-- {</span>\n  <span class=\"c1\">--   have h0 : deriv (iterated_deriv K (ruesDiff n m)) = deriv (ruesDiff n ((K:ℤ) + m)),</span>\n  <span class=\"c1\">--   exact congr_arg deriv,</span>\n  <span class=\"c1\">-- },</span>\n\n  <span class=\"c1\">-- simp_rw congr_arg deriv at K_ih,</span>\n\n  <span class=\"c1\">-- simp_rw congr_arg (deriv:(ℂ → ℂ) → (ℂ → ℂ)) at K_ih,</span>\n\n  <span class=\"c1\">-- simp_rw (congr_arg (λ (f : (ℂ → ℂ)), deriv f)) at K_ih,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 303020962,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1665236779
    },
    {
        "content": "<p>Without actual looking in an IDE, I would guess <code>congr_arg deriv K_ih</code> works.</p>",
        "id": 303021801,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1665237192
    },
    {
        "content": "<p>You won't get anywhere without explicitly invoking <code>ruesDiffDeriv</code></p>",
        "id": 303022647,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1665237637
    },
    {
        "content": "<p>These two lines close the goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code>  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">iterated_deriv_succ</span><span class=\"o\">,</span> <span class=\"n\">K_ih</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">ruesDiffDeriv</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n</code></pre></div>",
        "id": 303022701,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1665237692
    },
    {
        "content": "<p>Stay with <code>rw [iterated_deriv_succ, K_ih],</code>, I think</p>",
        "id": 303022728,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1665237710
    },
    {
        "content": "<p>Ha, not as fast as Damiano</p>",
        "id": 303022811,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1665237739
    }
]