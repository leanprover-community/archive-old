[
    {
        "content": "<p>Are ideals in Lean defined only for commutative rings?</p>",
        "id": 201530869,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592739834
    },
    {
        "content": "<p>Yes <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 201530973,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1592740034
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 201531036,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592740151
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/116395-maths/topic/Ideal/near/201530973\">said</a>:</p>\n<blockquote>\n<p>Yes <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>\n</blockquote>\n<p>Ahh alright.</p>",
        "id": 201531041,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592740173
    },
    {
        "content": "<p>I am trying to prove that the valuation ring corresponding to a discrete valuation field is a discrete valuation ring(defined to be a pid with a unique nonzero prime ideal).</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">has_discrete_valuation</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n<span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The 3rd last line of the proof gives me an error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">↥</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">S</span>\n<span class=\"err\">⊢</span> <span class=\"n\">comm_ring</span> <span class=\"n\">S</span>\n</code></pre></div>\n\n\n<p>I don't know how to input the info that S is commutative. Any help is appreciated. Thank you!</p>",
        "id": 201531643,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592741230
    },
    {
        "content": "<p>What did you already prove about <code>{x : K | val(x) ≥ 0}</code>?</p>",
        "id": 201531939,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592741861
    },
    {
        "content": "<p><code>comm_ring S</code> is in some sense not a good goal, because it's not (at least as far as Lean is concerned) a true/false statement.</p>",
        "id": 201531941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592741871
    },
    {
        "content": "<p>This setup with <code>h : S = {x : K | val(x) ≥ 0}</code> looks awkward. Better define <code>def valuation_ring (K:Type*) [field K] [discrete_valuation_field K] := {x : K | val(x) ≥ 0}</code> and then write a bunch of <code>instance</code>s about it.</p>",
        "id": 201531988,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592741912
    },
    {
        "content": "<p>Lean likes things best when they're broken up into coherent chunks which are as small as possible, so rather than launching straight into a proof that the valuation ring is a DVR, you want to first prove simpler things about it, like Reid is hinting. Ten small lemmas is better than one big lemma with lots of sublemmas.</p>",
        "id": 201531995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592741948
    }
]