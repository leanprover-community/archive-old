[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">continuity</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"n\">t</span>\n\n<span class=\"n\">def</span> <span class=\"n\">Hausdorffification</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">r</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">t2_space</span> <span class=\"o\">(</span><span class=\"n\">quotient</span> <span class=\"n\">s</span><span class=\"o\">)],</span> <span class=\"bp\">@</span><span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"n\">α</span> <span class=\"n\">s</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">iseqv</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">_</span> <span class=\"n\">s</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H</span> <span class=\"n\">s</span> <span class=\"n\">ht2</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">H</span> <span class=\"n\">s</span> <span class=\"n\">ht2</span><span class=\"o\">),</span>\n    <span class=\"bp\">λ</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">H1</span> <span class=\"n\">H2</span> <span class=\"n\">s</span> <span class=\"n\">ht2</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">H1</span> <span class=\"n\">s</span> <span class=\"n\">ht2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">H2</span> <span class=\"n\">s</span> <span class=\"n\">ht2</span><span class=\"o\">)</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">Hausdorffification</span><span class=\"bp\">.</span><span class=\"n\">setoid</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Hausdorffification</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">Hausdorffification</span><span class=\"bp\">.</span><span class=\"n\">setoid</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">Hausdorffification</span><span class=\"bp\">.</span><span class=\"n\">t2_space</span> <span class=\"o\">:</span>\n  <span class=\"n\">t2_space</span> <span class=\"o\">(</span><span class=\"n\">Hausdorffification</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">t2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">induction_on₂</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">prop_decidable</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">eq</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">≈</span><span class=\"o\">),</span> <span class=\"n\">setoid</span><span class=\"bp\">.</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">not_forall</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">ht2</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">resetI</span><span class=\"o\">,</span>\n      <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">Hausdorffification</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">quotient</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">lift_on&#39;</span> <span class=\"n\">e</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n        <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">sound</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">H</span> <span class=\"o\">},</span>\n      <span class=\"k\">have</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n        <span class=\"n\">change</span> <span class=\"n\">is_open</span> <span class=\"o\">(</span><span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n        <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">preimage_comp</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">hs</span> <span class=\"o\">},</span>\n      <span class=\"n\">rcases</span> <span class=\"n\">t2_separation</span> <span class=\"o\">(</span><span class=\"n\">mt</span> <span class=\"n\">quotient</span><span class=\"bp\">.</span><span class=\"n\">exact</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"n\">h5</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"bp\">_</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"bp\">_</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"o\">,</span> <span class=\"n\">h4</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_of_subset_empty</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_empty_iff_forall_not_mem</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h5</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">H</span>\n    <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 136026443,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539849232
    },
    {
        "content": "<p>Is there any way to do this constructively?</p>",
        "id": 136026483,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539849245
    },
    {
        "content": "<p>usually the relation is defined as \"define $a \\sim b$ if any open set containing $a$ intersects any open set containing $b$\". maybe this works constructively?</p>",
        "id": 136026590,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1539849404
    },
    {
        "content": "<p>you need to iterate that transfinitely many times to have a T2 space</p>",
        "id": 136026600,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539849445
    },
    {
        "content": "<p>and that would involve induction-recursion (is the name right?) which is stronger than Lean</p>",
        "id": 136026609,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539849471
    },
    {
        "content": "<p>Why? What is the idea behind this definition</p>",
        "id": 136026660,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539849502
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/Hausdorff+space#in_constructive_mathematics\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/Hausdorff+space#in_constructive_mathematics\">https://ncatlab.org/nlab/show/Hausdorff+space#in_constructive_mathematics</a></p>",
        "id": 136026664,
        "sender_full_name": "David Michael Roberts",
        "timestamp": 1539849525
    },
    {
        "content": "<p>by the way, I think that the definition of T2 in mathlib is contrapositive of the right one</p>",
        "id": 136026689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539849565
    },
    {
        "content": "<p>which apparently nLab calls \"weakly Hausdorff\"</p>",
        "id": 136026771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539849652
    },
    {
        "content": "<p>also, I don't see any nonconstructivity in that proof</p>",
        "id": 136026901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539849793
    },
    {
        "content": "<p>I used not_forall</p>",
        "id": 136042314,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539868835
    },
    {
        "content": "<blockquote>\n<p>Why? What is the idea behind this definition</p>\n</blockquote>\n<p>quotient a lot until you get a T2 space, but don't quotient more than necessary</p>",
        "id": 136049981,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539875693
    },
    {
        "content": "<p>what's the problem with Johannes's definition</p>",
        "id": 136049993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539875710
    },
    {
        "content": "<p>that it doesn't produce a T2 space</p>",
        "id": 136050007,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539875742
    },
    {
        "content": "<p>why</p>",
        "id": 136050017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539875754
    },
    {
        "content": "<p>like where does the proof break down</p>",
        "id": 136050064,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539875768
    },
    {
        "content": "<p><a href=\"https://topospaces.subwiki.org/wiki/Hausdorffization#Example_to_illustrate_why_one_step_isn.27t_enough\" target=\"_blank\" title=\"https://topospaces.subwiki.org/wiki/Hausdorffization#Example_to_illustrate_why_one_step_isn.27t_enough\">https://topospaces.subwiki.org/wiki/Hausdorffization#Example_to_illustrate_why_one_step_isn.27t_enough</a></p>",
        "id": 136050068,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539875775
    },
    {
        "content": "<blockquote>\n<p>you need to iterate that transfinitely many times to have a T2 space<br>\nand that would involve induction-recursion (is the name right?) which is stronger than Lean</p>\n</blockquote>\n<p>You don't need proof principles stronger than lean. You just need to know that the process stops eventually, by bounding the space of possible relations</p>",
        "id": 136061666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539886690
    },
    {
        "content": "<p>although topospaces wiki is shamefully cavalier about defining an ordinal indexed sequence of topological spaces with direct limits and then just saying \"take <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>h</mi><mi mathvariant=\"normal\">∞</mi></msup></mrow><annotation encoding=\"application/x-tex\">h^\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">h</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">∞</span></span></span></span></span></span></span></span></span></span></span>\" as if that were well defined</p>",
        "id": 136061871,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539886903
    },
    {
        "content": "<p>In lean, it is an interesting example of an inductive predicate that is positive but not strictly positive</p>",
        "id": 136061992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539887036
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>inductive hausify : α → α → Prop\n| refl : ∀ x, hausify x x\n| trans : ∀ x y z, hausify x y → hausify y z → hausify x z\n| haus : ∀x y, (∀ u v : set α, is_open u → is_open v →\n   x ∈ u → y ∈ v → ∃ z w, z ∈ u ∧ w ∈ v ∧ hausify z w) → hausify x y\n</pre></div>\n\n\n<p>This definition is monotone but not syntactically</p>",
        "id": 136062288,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539887344
    },
    {
        "content": "<p>So here's how you can do the transfinite induction construction:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">hausify1</span> <span class=\"o\">(</span><span class=\"n\">haus</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">trans</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hausify1</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">hausify1</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">hausify1</span> <span class=\"n\">x</span> <span class=\"n\">z</span>\n<span class=\"bp\">|</span> <span class=\"n\">haus</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_open</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">is_open</span> <span class=\"n\">v</span> <span class=\"bp\">→</span>\n   <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">→</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">v</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">u</span> <span class=\"bp\">∧</span> <span class=\"n\">w</span> <span class=\"err\">∈</span> <span class=\"n\">v</span> <span class=\"bp\">∧</span> <span class=\"n\">haus</span> <span class=\"n\">z</span> <span class=\"n\">w</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">hausify1</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">hausify_transfinite</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">hausify_transfinite</span> <span class=\"n\">eq</span>\n<span class=\"bp\">|</span> <span class=\"n\">succ</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hausify_transfinite</span> <span class=\"n\">r</span> <span class=\"bp\">→</span> <span class=\"n\">hausify_transfinite</span> <span class=\"o\">(</span><span class=\"n\">hausify1</span> <span class=\"n\">r</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">lim</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">hausify_transfinite</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"bp\">→</span>\n  <span class=\"n\">hausify_transfinite</span> <span class=\"o\">(</span><span class=\"n\">hausify1</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"n\">def</span> <span class=\"n\">hausify</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"n\">hausify_transfinite</span> <span class=\"n\">r</span> <span class=\"bp\">∧</span> <span class=\"n\">r</span> <span class=\"n\">x</span> <span class=\"n\">y</span>\n</pre></div>\n\n\n<p>Needless to say I prefer your definition</p>",
        "id": 136062874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539887994
    },
    {
        "content": "<p>I prefer yours</p>",
        "id": 136066103,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539891033
    },
    {
        "content": "<p>this whole construction is doing something similar to yours, quotienting by all relations that are hausdorffish</p>",
        "id": 136066687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539891637
    },
    {
        "content": "<p>it's easier to say <code>t2_space (quotient r)</code> than all this</p>",
        "id": 136066706,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539891660
    },
    {
        "content": "<p>can you define ε_0 using that?</p>",
        "id": 136074995,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539900269
    },
    {
        "content": "<p>oh wait you already defined ordinal notations inductively</p>",
        "id": 136075001,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539900285
    },
    {
        "content": "<p>wait no I'm confused</p>",
        "id": 136075035,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539900350
    },
    {
        "content": "<p>This allows you to do transfinite iteration over a fixed type</p>",
        "id": 136075791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539901351
    },
    {
        "content": "<p>the key is the fact that it is all taking place in one complete lattice</p>",
        "id": 136075805,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539901392
    },
    {
        "content": "<p>I see</p>",
        "id": 136075818,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539901430
    },
    {
        "content": "<p>So you can't define ordinals using this zero-lim-succ</p>",
        "id": 136075820,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1539901436
    },
    {
        "content": "<p>You have to build an inductive <code>Type</code> to do that</p>",
        "id": 136075869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539901461
    },
    {
        "content": "<p>by the way epsilon_0 is the supremum of all ordinals with <code>ordinal_notation</code></p>",
        "id": 136075877,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539901486
    },
    {
        "content": "<p>in case you wanted to define it</p>",
        "id": 136075881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539901496
    },
    {
        "content": "<p>It is possible to extend ordinal notations to epsilon_0 and beyond using the veblen hierarchy, but I don't think anyone around here cares about large countable ordinals</p>",
        "id": 136075909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539901553
    },
    {
        "content": "<p>I think we also have what we need to define omega_1^CK using computable functions</p>",
        "id": 136075974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539901631
    },
    {
        "content": "<p>Is this a reflection?</p>",
        "id": 136093605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539932310
    }
]