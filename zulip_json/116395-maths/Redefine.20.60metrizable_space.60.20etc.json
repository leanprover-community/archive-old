[
    {
        "content": "<p>Hi, I suggest the following refactor (depends on <a href=\"https://github.com/leanprover-community/mathlib/pull/14052\">#14052</a>).</p>\n<ol>\n<li>Redefine <code>pseudo_metrizable_space</code> as \"there exists a uniform space structure with countably generated uniformity that is compatible with the topology\".</li>\n<li>Redefine <code>metrizable_space</code> as <code>pseudo_metrizable_space</code> + <code>t0_space</code>. To avoid loops, the constructor will not be an instance.</li>\n<li>Upgrade the instance <code>[metrizable_space X] : t2_space X</code> to <code>[metrizable_space X] : regular_space X</code>.</li>\n<li>Define the instance <code>[uniform_space X] [is_countably_generated (uniformity X)] : pseudo_metrizable_space X</code>; it automatically covers <code>pseudo_emetric_space</code>s.</li>\n<li>Define the instance <code>[uniform_space X] [is_countably_generated (uniformity X)] [separated_space X] : metrizable_space X</code>. It automatically covers <code>emetric_space</code>s. Note that we require <code>[separated_space X]</code> instead of <code>[t0_space X]</code> to avoid a loop.</li>\n<li>Add a trivial definition <code>pseudo_metrizable_space.to_uniform_space</code> and lemmas <code>pseudo_metrizable_space.is_countably_generated</code>, <code>pseudo_metrizable_space.separated_space</code>.</li>\n<li>If a lemma assumes that <code>X</code> is a uniform space with countably generated uniformity, then uses only the topological space structure, make it assume <code>[pseudo_metrizable_space X]</code> instead.</li>\n<li>Move definitions of <code>(pseudo_)(e)metric_space</code>s to a new file <code>topology.metric_space.defs</code>.</li>\n<li>Put the contents of <a href=\"https://github.com/leanprover-community/mathlib/pull/14052\">#14052</a> (reformulated to define <code>pseudo_metrizable_space_pseudo_metric</code> and <code>metrizable_space_metric</code>) between <code>topology.metric_space.defs</code> and <code>topology.metric_space.emetric_space</code>.</li>\n<li>Similar to 7, but for <code>(pseudo_)(e)metric_space</code>s.</li>\n</ol>\n<p>What do you think?</p>",
        "id": 287265716,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656022588
    },
    {
        "content": "<p>I had the impression that the point you had set up things before is that, when you have a uniform structure with countably generated uniformity, then you could generate a pseudometric whose uniformity was defeq to the original one. Isn't it something you would lose with this new implementation? (Personally I wouldn't really mind, because I never use the uniform structures -- maybe it would be enough to have this as a specific constructor, but not as an instance).</p>\n<p>Setting this aside, I like the refactor you suggest, because I found it weird before that <code>pseudo_metrizable_space</code> only made sense for uniform spaces.</p>",
        "id": 287303162,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1656058899
    },
    {
        "content": "<p>I'm going to leave <code>uniform_space.to_pseudo_metric_space</code> and <code>uniform_space.to_metric_space</code>. Then I'll define, e.g., <code>pseudo_metrizable_space_pseudo_metric</code> as <code>@uniform_space.to_pseudo_metric_space _ pseudo_metrizable_space.to_uniform_space pseudo_metrizable_space.is_countably_generated_uniformity</code></p>",
        "id": 287366832,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656095031
    },
    {
        "content": "<p>This way all these definitions will be compatible with each other.</p>",
        "id": 287366957,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656095105
    },
    {
        "content": "<p>Once this refactor is done, I'm going to do a similar change to Polish spaces.</p>",
        "id": 287372818,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656098000
    }
]