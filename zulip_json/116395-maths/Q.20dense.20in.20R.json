[
    {
        "content": "<p><code>theorem rationals_dense (x y : ℝ) (H : x &lt; y) : ∃ q : ℚ, x &lt; q ∧ (q : ℝ) &lt; y :=</code> Where is this now? I think it was explicitly there before the reals were refactored. Now there is <code>dense_embedding_of_rat</code> but then I have to work to get the statement I want.</p>",
        "id": 152627608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1545956158
    },
    {
        "content": "<p><code>algebra.archimedean</code> has some similar things</p>",
        "id": 152627809,
        "sender_full_name": "Reid Barton",
        "timestamp": 1545956440
    },
    {
        "content": "<p>the rationals are archimedean, so <code>exists_rat_btwn</code> will work. Also the rationals are dense, so <code>dense</code> will work</p>",
        "id": 152634813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545970168
    },
    {
        "content": "<p>oh wait that last one is just rationals between rationals, with no casting</p>",
        "id": 152634858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1545970231
    },
    {
        "content": "<p>Aah, thanks to both of you. I'm looking in the wrong places. That was silly of me -- I even lectured this term on the fact that unboundedness of Z in R implied this fact.</p>",
        "id": 152655840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546006878
    },
    {
        "content": "<p>I want the coercion from Q to R to be different somehow. Look at this question the first years will be asked next term: \"Let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span></span></span></span> be a non-empty bounded above set of reals. True or false: if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>⊆</mo><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow></mrow><annotation encoding=\"application/x-tex\">S\\subseteq\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68889em;\"></span><span class=\"strut bottom\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span><span class=\"mrel\">⊆</span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>u</mi><mi>p</mi><mo>(</mo><mi>S</mi><mo>)</mo><mo>∈</mo><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow></mrow><annotation encoding=\"application/x-tex\">sup(S)\\in\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\">s</span><span class=\"mord mathit\">u</span><span class=\"mord mathit\">p</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mrel\">∈</span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span>. How do I make the Lean formalisation of this question less ugly? [added later: this is just one part of a multi-part question about a non-empty bounded-above set of reals <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span></span></span></span> so we don't really want to change the definition of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span></span></span></span> itself]</p>",
        "id": 152666498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546022496
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"c1\">-- structure or class?</span>\n<span class=\"kn\">structure</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rat1</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pf</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">q</span><span class=\"o\">)</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">rat2</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∃</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">ℚ</span><span class=\"o\">,</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">q</span>\n</pre></div>\n\n\n<p>Are these functions in Lean already? What are they / should they be called?</p>",
        "id": 152666549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546022535
    },
    {
        "content": "<p>As usual, this is nonidiomatic lean and so it's less than nice to say. It is equivalent to talk about the supremum of a family <code>f : I -&gt; Q</code></p>",
        "id": 152672823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546030730
    },
    {
        "content": "<p>alternatively, you can let <code>S : set Q</code> and have its interpretation in <code>R</code> be <code>(coe '' S)</code></p>",
        "id": 152672849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546030775
    },
    {
        "content": "<p>alternatively <code>S : set R</code> and <code>S \\sub range coe</code></p>",
        "id": 152672917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546030823
    },
    {
        "content": "<p>Oh that's better</p>",
        "id": 152672923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546030841
    },
    {
        "content": "<p>if I wasn't constrained by aiming for a direct translation I would certainly go for the first option</p>",
        "id": 152672949,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546030888
    },
    {
        "content": "<p>I think we could define <code>real.rats, real.nats : set R</code> in the obvious way and use that</p>",
        "id": 152673077,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546031062
    },
    {
        "content": "<p>and now I have to reprove things like <code>real.rats x -&gt; real.rats y -&gt; real.rats (x + y)</code>?</p>",
        "id": 152675391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546034384
    },
    {
        "content": "<p>I am not 100% clear on what needs proving actually. There's a lemma which says that + on Q and R coincide, and that's kind of why I need to prove the thing above. But there's another lemma which says that &lt; on Q and R coincide, and that doesn't seem to correspond to something I need to prove here.</p>",
        "id": 152675592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1546034648
    },
    {
        "content": "<p>well, it's a set so you would want to write that <code>x \\in rats -&gt; y \\in rats -&gt; x + y \\in rats</code>, but yes, and it follows from <code>rat.cast_add</code></p>",
        "id": 152696668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546071897
    },
    {
        "content": "<p>and you are right, there isn't really an analogue for <code>rat.cast_le</code></p>",
        "id": 152696679,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546071945
    },
    {
        "content": "<p>it's just the set of rational numbers, as a subset of R</p>",
        "id": 152696719,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546071977
    },
    {
        "content": "<p>all the operations are real operations</p>",
        "id": 152696720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546071986
    },
    {
        "content": "<p>you can do many things with such a set, the idea is when you need a set and not a type. For example <code>closure rats = univ</code> is hard to state otherwise</p>",
        "id": 152696726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1546072049
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 152699297,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1546077709
    }
]