[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">div_pos_iff_mul_pos</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"n\">mul_self_pos</span> <span class=\"n\">Hy</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">div_eq_div_iff</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">Hy</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">H2</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">div_pos</span> <span class=\"n\">H1</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">div_mul_eq_mul_div_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_div_cancel</span> <span class=\"bp\">_</span> <span class=\"n\">Hy</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">H2</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">mul_pos</span> <span class=\"n\">H1</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I was surprised this wasn't already in, for preordered semimonoids with bot or whatever</p>",
        "id": 147700596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542230815
    },
    {
        "content": "<p>I'm not, that's a weird theorem</p>",
        "id": 147700710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542230901
    },
    {
        "content": "<p>what about <code>0 &lt; x * y iff (x &lt; 0 and y &lt; 0) or (x &gt; 0 and y &gt; 0)</code>?</p>",
        "id": 147700874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542231044
    },
    {
        "content": "<p>and similarly for <code>0 &lt; x / y</code></p>",
        "id": 147700885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542231054
    },
    {
        "content": "<p><code>pos_and_pos_or_neg_and_neg_of_mul_pos</code>?</p>",
        "id": 147700919,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542231075
    },
    {
        "content": "<p>Oh, you found it?</p>",
        "id": 147700945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542231098
    },
    {
        "content": "<p>I found x*y&gt;0 implies x,y&gt;0 or x,y&lt;0</p>",
        "id": 147701006,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542231126
    },
    {
        "content": "<p>I guess the best decomposition of it is something like</p>\n<div class=\"codehilite\"><pre><span></span>0 &lt; x * y\n    ↔ (0 &lt; x ∧ 0 &lt; y ∨ x &lt; 0 ∧ y &lt; 0)\n... ↔ (0 &lt; x ∧ 0 &lt; y⁻¹ ∨ x &lt; 0 ∧ y⁻¹ &lt; 0)\n... ↔ 0 &lt; x * y⁻¹\n... ↔ 0 &lt; x / y\n</pre></div>",
        "id": 147701014,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542231132
    },
    {
        "content": "<p>ha ha it's in core</p>",
        "id": 147701017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542231133
    },
    {
        "content": "<p>I think you should use <code>pos_and_pos_or_neg_and_neg_of_mul_pos</code></p>",
        "id": 147701044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542231161
    },
    {
        "content": "<p>just for the name</p>",
        "id": 147701046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542231167
    },
    {
        "content": "<p>whenever the name gets that long my eyes cross trying to read it</p>",
        "id": 147701071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542231185
    },
    {
        "content": "<p>we should think of a more rigorous encrypted way to name lemmas</p>",
        "id": 147701091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542231212
    },
    {
        "content": "<p>to keep them shorter</p>",
        "id": 147701096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542231218
    },
    {
        "content": "<p>have you seen metamath naming conventions? :D</p>",
        "id": 147701110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542231227
    },
    {
        "content": "<p>it would probably be called <code>mulanor</code> or the like</p>",
        "id": 147701173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542231259
    },
    {
        "content": "<p>that's a cool name</p>",
        "id": 147701204,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542231281
    },
    {
        "content": "<p>the md5sum of <code>pos_and_pos_or_neg_and_neg_of_mul_pos</code> is shorter, maybe we should use that</p>",
        "id": 147701205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542231283
    },
    {
        "content": "<p>lol that's a bad sign</p>",
        "id": 147701225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542231297
    },
    {
        "content": "<p>probably gzip can do better</p>",
        "id": 147701257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542231310
    },
    {
        "content": "<blockquote>\n<p>I'm not, that's a weird theorem</p>\n</blockquote>\n<p>How would you do</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Q4</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"o\">}</span> <span class=\"bp\">=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>? I used this along the way to clear denominators but it was still an annoying case bash</p>",
        "id": 147702518,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542232308
    },
    {
        "content": "<p>oh god</p>",
        "id": 147702583,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542232334
    },
    {
        "content": "<p>yes it's M1F sheet 3</p>",
        "id": 147702659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542232424
    },
    {
        "content": "<p>you should have seen my proof last year!</p>",
        "id": 147702670,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542232438
    },
    {
        "content": "<p>It took me 25 lines to get to <code>⊢ 0 &lt; (1 - x) * x * (3 * x - 1) ↔ x &lt; 0 ∨ 1 / 3 &lt; x ∧ x &lt; 1</code></p>",
        "id": 147702771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542232491
    },
    {
        "content": "<p>and now the case bash is much easier</p>",
        "id": 147702785,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542232503
    },
    {
        "content": "<p>but I had to clear denominators along the way</p>",
        "id": 147702799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542232510
    },
    {
        "content": "<p>how about no</p>",
        "id": 147702914,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542232627
    },
    {
        "content": "<p>If it's a reasonable M1F question and if you want formal proof verification systems to be taken seriously by mathematicians, this has to be relatively straightforward</p>",
        "id": 147702958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542232677
    },
    {
        "content": "<p>Someone want to implement a cylindrical algebraic decomposition tactic?</p>",
        "id": 147703048,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542232738
    },
    {
        "content": "<p>Is that what's necessary?</p>",
        "id": 147703084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542232756
    },
    {
        "content": "<p>it's a case bash</p>",
        "id": 147703089,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542232766
    },
    {
        "content": "<p>Can we make it an issue or is this unreasonable?</p>",
        "id": 147703092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542232767
    },
    {
        "content": "<p>It's a cylindrical algebraic decomposition Mario</p>",
        "id": 147703100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542232779
    },
    {
        "content": "<p>the generalization of this to more vars is CAD</p>",
        "id": 147703112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542232798
    },
    {
        "content": "<p>Yeah you don't really need it for one variable &amp; rational roots.</p>",
        "id": 147703177,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542232815
    },
    {
        "content": "<p><code>theorem Q4 : { x : ℝ | x ≠ 0 ∧ 3 * x + 1 / x &lt; 4 } =\n  {y : ℝ | y &lt; 0 ∨ ((1 : ℝ) / 3 &lt; y ∧ y &lt; 1)}</code> you mean like this?</p>",
        "id": 147703194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542232833
    },
    {
        "content": "<p>It's still a pain to prove that if <code>1/3 &lt; x</code> and <code>x &lt; 1</code> then <code>3 * x + 1 / x &lt; 4</code></p>",
        "id": 147703243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542232890
    },
    {
        "content": "<p>My reworking to <code>⊢ 0 &lt; (1 - x) * x * (3 * x - 1) ↔ x &lt; 0 ∨ 1 / 3 &lt; x ∧ x &lt; 1</code> is definitely paying dividends</p>",
        "id": 147703262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542232910
    },
    {
        "content": "<p>I think you should just let the IC gang prove that</p>",
        "id": 147703268,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542232920
    },
    {
        "content": "<p>in general you have to figure out ordering of real algebraic numbers which is a pain</p>",
        "id": 147703323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542232942
    },
    {
        "content": "<p>and the best known algorithm is double exponential, a great <em>improvement</em> over the previous algorithm</p>",
        "id": 147703366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542233029
    },
    {
        "content": "<p>what a pity, I was going to use it in my next gce exam</p>",
        "id": 147703451,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542233104
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Q4</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"o\">}</span> <span class=\"bp\">=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">em</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">H0</span> <span class=\"n\">Hn0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- junk case x = 0</span>\n    <span class=\"n\">rw</span> <span class=\"n\">H0</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Hn0</span><span class=\"o\">]),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">true_and</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n    <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">sub_pos</span> <span class=\"n\">ℝ</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"mi\">3</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">sub_sub</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">mul_one</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- annoying rewrite</span>\n  <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">div_self</span> <span class=\"n\">Hn0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">mul_div_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">sub_div</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span><span class=\"n\">mul_pos_iff_div_pos</span> <span class=\"n\">Hn0</span><span class=\"o\">,</span>\n  <span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">mul_self_pos</span> <span class=\"n\">Hn0</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"mi\">4</span> <span class=\"bp\">-</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- goal now</span>\n  <span class=\"c1\">-- ⊢ 0 &lt; (1 - x) * x * (3 * x - 1) ↔ x &lt; 0 ∨ 1 / 3 &lt; x ∧ x &lt; 1</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_ge</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">h</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- x &lt; 0</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">true</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">true_or</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">iff_true</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_pos_of_neg_of_neg</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">mul_neg_of_pos_of_neg</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">sub_pos_of_lt</span><span class=\"o\">,</span>\n      <span class=\"n\">apply</span> <span class=\"n\">lt_trans</span> <span class=\"n\">h</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">sub_neg_of_lt</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">lt_trans</span> <span class=\"bp\">_</span> <span class=\"n\">zero_lt_one</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_neg_of_pos_of_neg</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">iff_false</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">not_lt_of_ge</span> <span class=\"n\">h1</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">false_or</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">le_or_gt</span> <span class=\"n\">x</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h2</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">iff_false</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">not_lt_of_ge</span> <span class=\"n\">h2</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">false_and</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">iff_false</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">not_lt_of_ge</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mul_nonpos_of_nonneg_of_nonpos</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">mul_nonneg</span> <span class=\"bp\">_</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">sub_nonneg</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"n\">h2</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">sub_nonpos</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">mul_le_of_le_div</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">lt_or_ge</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">iff_true</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"n\">iff_true</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">true_and</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">iff_true</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mul_pos</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">mul_pos</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n        <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n        <span class=\"n\">rwa</span> <span class=\"n\">sub_pos</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">lt_trans</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">sub_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">rwa</span> <span class=\"err\">←</span><span class=\"n\">div_lt_iff&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span> <span class=\"bp\">↔</span> <span class=\"n\">false</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">iff_false</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">not_lt_of_ge</span> <span class=\"n\">h</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">and_false</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">iff_false</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">not_lt_of_ge</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"n\">mul_nonpos_of_nonpos_of_nonneg</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">mul_nonpos_of_nonpos_of_nonneg</span> <span class=\"bp\">_</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">sub_nonneg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_mul_of_div_le</span><span class=\"o\">,</span>\n    <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_trans</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Much better than last year's effort</p>",
        "id": 147704530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542234258
    },
    {
        "content": "<p>\"much better\"</p>",
        "id": 147704744,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542234490
    },
    {
        "content": "<p>thanks</p>",
        "id": 147704761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542234510
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">Q4</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"o\">}</span> <span class=\"bp\">=</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">hxneg</span> <span class=\"bp\">|</span> <span class=\"n\">hx0</span> <span class=\"bp\">|</span> <span class=\"n\">hxpos</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">iff_of_true</span> <span class=\"bp\">⟨</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">hxneg</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">hxneg</span><span class=\"o\">),</span>\n    <span class=\"n\">refine</span> <span class=\"n\">lt_trans</span> <span class=\"o\">(</span><span class=\"n\">add_neg</span> <span class=\"o\">(</span><span class=\"n\">mul_neg_of_pos_of_neg</span> <span class=\"bp\">_</span> <span class=\"n\">hxneg</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">one_div_neg_of_neg</span> <span class=\"n\">hxneg</span><span class=\"o\">))</span> <span class=\"bp\">_;</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_true_intro</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">hxpos</span><span class=\"o\">)],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">true_and</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">eq_false_intro</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_gt</span> <span class=\"n\">hxpos</span><span class=\"o\">)],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">false_or</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_lt_mul_right</span> <span class=\"n\">hxpos</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">one_div_mul_cancel</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">hxpos</span><span class=\"o\">)],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">div_lt_iff</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">sub_neg_of_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">lt_of_not_ge</span><span class=\"o\">,</span>\n      <span class=\"k\">assume</span> <span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">≤</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">neg_of_mul_neg_left</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">sub_nonneg_of_le</span> <span class=\"n\">h2</span><span class=\"o\">),</span>\n      <span class=\"n\">refine</span> <span class=\"n\">not_lt_of_le</span> <span class=\"n\">h2</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">lt_trans</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">lt_of_sub_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_lt_mul_right</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">)]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">lt_of_sub_pos</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_of_not_ge</span><span class=\"o\">,</span>\n    <span class=\"k\">assume</span> <span class=\"n\">h3</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">≤</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">not_le_of_lt</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_nonneg_of_nonpos_of_nonpos</span> <span class=\"o\">(</span><span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">sub_neg_of_lt</span> <span class=\"n\">this</span><span class=\"o\">))</span> <span class=\"n\">h3</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">lt_of_sub_neg</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"k\">show</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"mi\">4</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">mul_neg_of_neg_of_pos</span> <span class=\"o\">(</span><span class=\"n\">sub_neg_of_lt</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">sub_pos_of_lt</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 147706417,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542236564
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 147706420,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542236565
    },
    {
        "content": "<p>half your size</p>",
        "id": 147706433,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542236589
    },
    {
        "content": "<p>It's still a lot longer than what most of the first years produce with pen and paper though isn't it :-/</p>",
        "id": 147706502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542236696
    },
    {
        "content": "<p>you did the case split at the start. I worked on the goal first. Is your way better or would you have written half as much as me if you'd used my strategy too?</p>",
        "id": 147706584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542236807
    },
    {
        "content": "<p>btw:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">div_pos_iff_mul_pos</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">mul_self_pos</span> <span class=\"n\">Hy</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"bp\">@</span><span class=\"n\">mul_lt_mul_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">/</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">div_mul_cancel</span> <span class=\"bp\">_</span> <span class=\"n\">Hy</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 147706587,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542236810
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">div_pos_iff_mul_pos</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"bp\">@</span><span class=\"n\">mul_lt_mul_right</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">/</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">mul_self_pos</span> <span class=\"n\">Hy</span><span class=\"o\">)]</span><span class=\"bp\">;</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">zero_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">div_mul_cancel</span> <span class=\"bp\">_</span> <span class=\"n\">Hy</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 147706603,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542236856
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">div_pos_iff_mul_pos</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"bp\">/</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">div_lt_div_right</span> <span class=\"o\">(</span><span class=\"n\">mul_self_pos</span> <span class=\"n\">Hy</span><span class=\"o\">),</span> <span class=\"n\">zero_div</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">div_div_eq_div_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel</span> <span class=\"bp\">_</span> <span class=\"n\">Hy</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 147706702,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542236997
    },
    {
        "content": "<p>(98 characters!)</p>",
        "id": 147706705,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542237001
    },
    {
        "content": "<blockquote>\n<p>you did the case split at the start. I worked on the goal first. Is your way better or would you have written half as much as me if you'd used my strategy too?</p>\n</blockquote>\n<p>I mean, you also did case split at the start</p>",
        "id": 147706769,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542237054
    },
    {
        "content": "<p>Isn't that <code>Hy</code> hypothesis actually unneeded?</p>",
        "id": 147706788,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542237085
    },
    {
        "content": "<p>If <code>y = 0</code> then both things are 0</p>",
        "id": 147706795,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542237101
    },
    {
        "content": "<p>great</p>",
        "id": 147706981,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542237260
    },
    {
        "content": "<p>\"Lean helps me understand maths better\"</p>",
        "id": 147707018,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542237297
    },
    {
        "content": "<p>\"<code>y</code> doesn't need to be nonzero\"</p>",
        "id": 147707033,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542237311
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">intervals</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">mul_pos_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_ring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">∧</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"n\">pos_and_pos_or_neg_and_neg_of_mul_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"n\">mul_pos</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">exact</span> <span class=\"n\">mul_pos_of_neg_of_neg</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">or_iff_left</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">or_iff_left_of_imp</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">or_iff_right</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"n\">b</span> <span class=\"o\">:=</span>\n<span class=\"n\">or_iff_right_of_imp</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">elim</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">Q4</span> <span class=\"o\">:</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">|</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">4</span> <span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">Iio</span> <span class=\"mi\">0</span> <span class=\"err\">∪</span> <span class=\"n\">Ioo</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"n\">x</span> <span class=\"mi\">0</span> <span class=\"k\">with</span> <span class=\"n\">x0</span><span class=\"bp\">|</span><span class=\"n\">x0</span><span class=\"bp\">|</span><span class=\"n\">x0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"n\">iff_of_true</span> <span class=\"bp\">⟨</span><span class=\"n\">ne_of_lt</span> <span class=\"n\">x0</span><span class=\"o\">,</span>\n      <span class=\"n\">lt_trans</span> <span class=\"o\">(</span><span class=\"n\">add_neg</span>\n        <span class=\"o\">(</span><span class=\"n\">mul_neg_of_pos_of_neg</span> <span class=\"bp\">_</span> <span class=\"n\">x0</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">one_div_neg_of_neg</span> <span class=\"n\">x0</span><span class=\"o\">))</span> <span class=\"bp\">_⟩</span> <span class=\"o\">(</span><span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"n\">x0</span><span class=\"o\">)</span><span class=\"bp\">;</span>\n    <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">norm_num</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">Iio</span><span class=\"o\">,</span> <span class=\"n\">Ioo</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">and_iff_right</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">x0</span><span class=\"o\">),</span> <span class=\"n\">or_iff_right</span> <span class=\"o\">(</span><span class=\"n\">not_lt_of_gt</span> <span class=\"n\">x0</span><span class=\"o\">),</span>\n      <span class=\"n\">add_div_eq_mul_add_div</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">ne_of_gt</span> <span class=\"n\">x0</span><span class=\"o\">),</span>\n      <span class=\"n\">div_lt_iff</span> <span class=\"n\">x0</span><span class=\"o\">,</span> <span class=\"n\">div_lt_iff&#39;</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">norm_num</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)),</span> <span class=\"err\">←</span> <span class=\"n\">sub_pos</span><span class=\"o\">,</span>\n      <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">ring</span> <span class=\"o\">:</span> <span class=\"mi\">4</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">x</span><span class=\"o\">)),</span>\n      <span class=\"n\">mul_pos_iff</span><span class=\"o\">,</span> <span class=\"n\">sub_pos</span><span class=\"o\">,</span> <span class=\"n\">sub_pos</span><span class=\"o\">,</span> <span class=\"n\">sub_lt_zero</span><span class=\"o\">,</span> <span class=\"n\">sub_lt_zero</span><span class=\"o\">,</span>\n      <span class=\"n\">or_iff_left</span><span class=\"o\">],</span>\n    <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">h₂</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">absurd</span> <span class=\"o\">(</span><span class=\"n\">lt_trans</span> <span class=\"n\">h₂</span> <span class=\"o\">((</span><span class=\"n\">lt_div_iff&#39;</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">h₁</span><span class=\"o\">))</span> <span class=\"bp\">_;</span> <span class=\"n\">norm_num</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 147713393,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542246002
    },
    {
        "content": "<p>I shall explode this proof tomorrow</p>",
        "id": 147716871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542250502
    },
    {
        "content": "<p>Mario, why do you need to explicitly invoke all those <code>and_iff_right</code>, <code>or_iff_right</code>, <code>or_iff_left</code>? Isn't it something that the simplifier should do (using hypothesis <code>x0</code>)?</p>",
        "id": 147728220,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542271046
    },
    {
        "content": "<p>Makes me think: <span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> what happened to your monotonicity tactic?</p>",
        "id": 147728438,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542271407
    },
    {
        "content": "<p>Mario is still unhappy with it.</p>",
        "id": 147754940,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1542299959
    }
]