[
    {
        "content": "<p>Where do we find <code>lemma zero_of_abs_lt_all (x : ℝ) (h : ∀ ε, ε &gt; 0 → |x| &lt; ε) : x = 0</code>?</p>",
        "id": 156453113,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547934273
    },
    {
        "content": "<p>I think something like <code>eq_of_forall_abs_sub_lt</code> is in there.</p>",
        "id": 156453250,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1547934499
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/search?q=eq_of_forall_abs_sub_lt&amp;unscoped_q=eq_of_forall_abs_sub_lt\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/search?q=eq_of_forall_abs_sub_lt&amp;unscoped_q=eq_of_forall_abs_sub_lt\">https://github.com/leanprover/mathlib/search?q=eq_of_forall_abs_sub_lt&amp;unscoped_q=eq_of_forall_abs_sub_lt</a> <span class=\"emoji emoji-2639\" title=\"sad\">:sad:</span></p>",
        "id": 156453442,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547934843
    },
    {
        "content": "<p>Do you have any idea where something like this could be?</p>",
        "id": 156453462,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547934862
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">zero_of_abs_lt_all</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">eq_zero_of_abs_eq_zero</span> <span class=\"err\">$</span> <span class=\"n\">eq_of_le_of_forall_le_of_dense</span> <span class=\"o\">(</span><span class=\"n\">abs_nonneg</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 156454123,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547936083
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  Should I PR that, or is it already in?</p>",
        "id": 156454138,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547936128
    },
    {
        "content": "<p>with weaker assumptions of course</p>",
        "id": 156454184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547936194
    },
    {
        "content": "<p>(I mean replacing real numbers with something more general)</p>",
        "id": 156454188,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547936223
    },
    {
        "content": "<p>is this a theorem of normed groups or do you want a different abstraction</p>",
        "id": 156454377,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547936592
    },
    {
        "content": "<p>I think normed groups is enough for me, but <code>eq_of_le_of_forall_le_of_dense</code> has more exotic type classes</p>",
        "id": 156454434,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547936699
    },
    {
        "content": "<p>But I don't want you to think too hard about this when you could be hitting that merge button on <a href=\"https://github.com/leanprover/mathlib/pull/610\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/610\">https://github.com/leanprover/mathlib/pull/610</a></p>",
        "id": 156454452,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547936761
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">zero_of_norm_lt_all</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"err\">∥</span><span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">norm_eq_zero</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">$</span> <span class=\"n\">eq_of_le_of_forall_le_of_dense</span> <span class=\"o\">(</span><span class=\"n\">norm_nonneg</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span> <span class=\"n\">le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">zero_of_abs_lt_all</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span> <span class=\"bp\">→</span> <span class=\"bp\">|</span><span class=\"n\">x</span><span class=\"bp\">|</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">zero_of_norm_lt_all</span> <span class=\"n\">x</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>does work</p>",
        "id": 156454640,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547937090
    },
    {
        "content": "<p>of course we could also prove them the other way around</p>",
        "id": 156454642,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1547937119
    }
]