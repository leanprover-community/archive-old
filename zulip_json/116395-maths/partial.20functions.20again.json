[
    {
        "content": "<p>With the recent merges from my so-called differential topology repository to mathlib, the next target in this direction is the definition of derivatives (Fréchet derivative if you insist on this terminology). It is very easy to say that a function defined on a whole normed vector space is differentiable at some point a: <a href=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/calculus.lean#L17\" target=\"_blank\" title=\"https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/calculus.lean#L17\">https://github.com/PatrickMassot/lean-differential-topology/blob/master/src/calculus.lean#L17</a> But of course we want derivatives of functions defined on a subset of a normed space, at least allowing an open set. I can clearly try to adapt the definition, but I'd be happy to read any advice.</p>",
        "id": 133331307,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536089461
    },
    {
        "content": "<p>For instance, <a href=\"https://github.com/thalesant/formalabstracts/blob/riemann_hypothesis/folklore/complex.lean#L227\" target=\"_blank\" title=\"https://github.com/thalesant/formalabstracts/blob/riemann_hypothesis/folklore/complex.lean#L227\">https://github.com/thalesant/formalabstracts/blob/riemann_hypothesis/folklore/complex.lean#L227</a> (in the holomorphic case, but this doesn't matter) define a function from a subset of a normed space to be differentiable at x if the subset is open and the extension by zero (which is defined everywhere) is differentiable at x. This is one option</p>",
        "id": 133331524,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536089755
    },
    {
        "content": "<p>I ran a quick sanity check on the definition from FAbstract (I wanted to see with my own eyes that division by zero works as intended).</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">complex</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span> <span class=\"n\">complex</span>\n\n<span class=\"n\">def</span> <span class=\"n\">has_complex_derivative_at</span>\n<span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span> <span class=\"bp\">→</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">f&#39;z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">error_term</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"o\">:=</span>\n    <span class=\"n\">abs</span><span class=\"o\">((</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"n\">f&#39;z</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n<span class=\"o\">(</span><span class=\"n\">tendsto</span> <span class=\"n\">error_term</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">ℝ</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">has_complex_derivative_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">has_complex_derivative_at</span><span class=\"o\">],</span>\n\n  <span class=\"k\">have</span> <span class=\"o\">:</span>  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">))</span><span class=\"bp\">/</span><span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">abs</span><span class=\"o\">(</span><span class=\"n\">h</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"bp\">/</span><span class=\"n\">h</span><span class=\"o\">)),</span>\n  <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n\n  <span class=\"n\">rw</span> <span class=\"n\">tendsto_nhds_of_metric</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">[</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">ε_pos</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">dx</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ε_pos</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">],</span>\n    <span class=\"n\">dsimp</span><span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">dx</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">dx</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 133333155,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536091413
    },
    {
        "content": "<p>First I'm both amazed and ashamed that I wrote that so quickly without insulting my computer. But of course I'd be very happy to read a simpler proof. <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> please feel free to explain that your Lean/Sage bridge allows to do this limit computation in one line.</p>",
        "id": 133333260,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536091519
    },
    {
        "content": "<p>I can merge the last two lines in <code>simpa [dist] using dx</code></p>",
        "id": 133333813,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536092082
    },
    {
        "content": "<p>Anyway, this great success of division by zero makes me wonder whether I should define differentiability using  <code>∥f (a + h) - f a - L h∥/ ∥h∥</code></p>",
        "id": 133333948,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536092274
    },
    {
        "content": "<p>Golfed as requested</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">has_complex_derivative_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(((</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">-</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">/</span> <span class=\"n\">h</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"err\">^</span> <span class=\"mi\">2</span> <span class=\"bp\">/</span> <span class=\"n\">h</span><span class=\"o\">)),</span>\n  <span class=\"k\">by</span> <span class=\"n\">ext</span><span class=\"bp\">;</span> <span class=\"n\">congr</span><span class=\"bp\">;</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">has_complex_derivative_at</span><span class=\"o\">,</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">tendsto_nhds_of_metric</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">ε0</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">ε0</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">dx</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ε0</span><span class=\"o\">]</span>\n  <span class=\"k\">else</span> <span class=\"k\">by</span> <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel</span> <span class=\"n\">x</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">dx</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 133334379,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536092680
    },
    {
        "content": "<p>So 0/0 isn't 1? ;-)</p>",
        "id": 133334501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536092785
    },
    {
        "content": "<p>The applied mathematicians were lying to me</p>",
        "id": 133334514,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536092804
    },
    {
        "content": "<p>0/0 = 0 is actually really convenient for stating the definition of the derivative</p>",
        "id": 133334544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536092846
    },
    {
        "content": "<p>PS are we witnessing the first time Lean has ever differentiated a function here?</p>",
        "id": 133334553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536092858
    },
    {
        "content": "<p>well, the chain rule was a derivative</p>",
        "id": 133334564,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536092882
    },
    {
        "content": "<p>0/0 -- you got lucky :-)</p>",
        "id": 133334572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536092882
    },
    {
        "content": "<p>Chris -- with the binomial theorem you can differentiate x^n and with Patrick's knowledge of filters he can prove differentiation is linear, and then we can differentiate polynomials!</p>",
        "id": 133334645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536092969
    },
    {
        "content": "<p>we can differentiate polynomials just fine</p>",
        "id": 133334654,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536092987
    },
    {
        "content": "<p>(hey, you teach Galois theory)</p>",
        "id": 133334657,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536092994
    },
    {
        "content": "<p>not formal derivatives, real derivatives</p>",
        "id": 133334701,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536093004
    },
    {
        "content": "<p>But of course we need to differentiate <code>cos</code> too :-)</p>",
        "id": 133334735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536093050
    },
    {
        "content": "<p>That will follow from C-linearity if someone can differentiate exp. Mario did you say there was a dirty trick for that?</p>",
        "id": 133334784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536093110
    },
    {
        "content": "<p>I guess step one is to get exp in mathlib...</p>",
        "id": 133334838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536093131
    },
    {
        "content": "<p>yes, <code>1 + x &lt;= exp x &lt;= 1/(1-x)</code> proves <code>exp' 0 = 1</code> and then it's easy</p>",
        "id": 133334847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536093157
    },
    {
        "content": "<p>Thanks Chris. I think it's exactly the same proof though.</p>",
        "id": 133335121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536093495
    },
    {
        "content": "<p>That is correct</p>",
        "id": 133335145,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536093538
    },
    {
        "content": "<p>It's easy if you have the product rule, but Patrick doesn't believe in the product rule</p>",
        "id": 133335163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536093577
    },
    {
        "content": "<p>What?</p>",
        "id": 133335170,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1536093593
    },
    {
        "content": "<p>The product rule is a low-dimensional coincidence</p>",
        "id": 133335226,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536093618
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">has_complex_derivative_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">tendsto_nhds_of_metric</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">else</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">two_mul</span><span class=\"o\">,</span> <span class=\"n\">dist</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n<span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">abs_mul</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">abs_div</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n<span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hz</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 133335251,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536093665
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">has_complex_derivative_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n  <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"n\">tendsto_nhds_of_metric</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">else</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">abs_div</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n<span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hz</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 133335477,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536093920
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">has_complex_derivative_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">tendsto_nhds_of_metric</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span>\n<span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">add_mul</span><span class=\"o\">,</span> <span class=\"n\">two_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"bp\">-</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">abs_div</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hz</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 133335582,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536094037
    },
    {
        "content": "<p>finally 4 lines</p>",
        "id": 133335588,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536094044
    },
    {
        "content": "<p>I think you broke the style guidelines with the last one.</p>",
        "id": 133335659,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1536094097
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">has_complex_derivative_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">tendsto_nhds_of_metric</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">else</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">add_mul_self_eq</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">abs_div</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n<span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hz</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 133335813,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536094290
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">has_complex_derivative_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">tendsto_nhds_of_metric</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">else</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">add_mul_self_eq</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">abs_div</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n<span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">mul_div_cancel</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">dist</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hz</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 133335883,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536094353
    },
    {
        "content": "<p>Kenny this reminds me of Chris Ford's question \"differentiate x^10*sin(x) five times\"</p>",
        "id": 133335938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536094440
    },
    {
        "content": "<p>for which my answer was \"10 x^9*sin(x) + x^10*cos(x) every time\"</p>",
        "id": 133335986,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536094460
    },
    {
        "content": "<p>Why don't you prove the product rule one time instead?</p>",
        "id": 133336000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536094489
    },
    {
        "content": "<p>or prove that the derivative of <code>x^2</code> is <code>2x</code> and then prove <code>2*1=2</code></p>",
        "id": 133336022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1536094535
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">has_complex_derivative_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">tendsto_nhds_of_metric</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"n\">trans_rel_right</span> <span class=\"bp\">_</span>\n<span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">,</span> <span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">add_mul_self_eq</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">abs_div</span><span class=\"o\">])</span> <span class=\"n\">hz</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 133336364,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536094869
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">has_complex_derivative_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">tendsto_nhds_of_metric</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n<span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"k\">then</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"k\">else</span> <span class=\"k\">by</span> <span class=\"n\">dsimp</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">]</span><span class=\"bp\">;</span>\n<span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">dist</span><span class=\"o\">,</span> <span class=\"n\">add_mul_self_eq</span><span class=\"o\">,</span> <span class=\"n\">mul_div_cancel</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">abs_div</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hz</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 133336621,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536095151
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"n\">has_complex_derivative_at</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">z</span><span class=\"err\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"mi\">2</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"n\">tendsto_nhds_of_metric</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">hε</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span> <span class=\"n\">hz</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">pow_two</span><span class=\"o\">,</span> <span class=\"n\">add_mul_self_eq</span><span class=\"o\">,</span> <span class=\"n\">dist</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">complex</span><span class=\"bp\">.</span><span class=\"n\">abs_div</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*;</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"o\">[</span><span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">],</span> <span class=\"n\">rwa</span> <span class=\"n\">mul_div_cancel</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 133337102,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536095629
    },
    {
        "content": "<p>one of those proofs actually conformed to the guidelines!</p>",
        "id": 133338281,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536096865
    },
    {
        "content": "<p>I don't understand the last one. What is this <code>[simpa [h], rwa mul_div_cancel _ h]</code>?</p>",
        "id": 133338317,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536096934
    },
    {
        "content": "<p>I mean, why is there a list of tactics?</p>",
        "id": 133338330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536096953
    },
    {
        "content": "<p>because there are two goals</p>",
        "id": 133338383,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536096978
    },
    {
        "content": "<p>oh! The n'th term in the list acts on the n'th goal?</p>",
        "id": 133338398,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536097000
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hp</span> <span class=\"o\">:</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hq</span> <span class=\"o\">:</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">∧</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"bp\">;</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"n\">hp</span><span class=\"o\">,</span><span class=\"n\">exact</span> <span class=\"n\">hq</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>woo!</p>",
        "id": 133338498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536097095
    },
    {
        "content": "<p>If you want to define differentiability in a rather broad setting, you certainly want it to contain differentiability on the left and on the right for 1-dimensional functions, and differentiability on manifolds with boundaries. The best setting for this is probably differentiability in the sense of Whitney, i.e., <code>f</code> is differentiable at <code>x</code> on <code>S</code> if there is a linear operator such that <code>f(y)-f(x) -L (y-x)/ ||y-x||</code> tends to <code>0</code> when <code>y</code>tends to <code>x</code>while remaining in <code>S</code>. This is certainly easy to define if you have a filter like <code>nhbds_within</code> (defined using <code>nhbds x</code> and <code>principal S</code> and the good filter operation (I never know in which direction they go)). This filter would also be useful to define continuity within <code>S</code>, as far as I can tell this is not in Lean?. </p>\n<p>With the big warning that the differential is not unique in general, if the tangent directions of <code>S</code> at <code>x</code> do not span the whole subspace. For uniquenss statement, you would probably want that <code>S</code> is a neighborhood of <code>x</code>, say.</p>",
        "id": 133359026,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1536130940
    },
    {
        "content": "<p>the good filter operation is infimum: <code>nhds_within a s := nhds a ⊓ principal s</code></p>",
        "id": 133359631,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1536132005
    }
]