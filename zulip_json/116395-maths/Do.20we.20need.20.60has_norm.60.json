[
    {
        "content": "<p>Is there any example where we can't use <code>has_nnnorm</code> instead?</p>",
        "id": 269056434,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642994835
    },
    {
        "content": "<p>I mean, should we force the norm to be nonnegative by definition?</p>",
        "id": 269056449,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642994877
    },
    {
        "content": "<p>(same question for <code>dist</code>/<code>nndist</code>).</p>",
        "id": 269056488,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642994889
    },
    {
        "content": "<p>we might want <code>norm</code> to have a separate defeq from <code>nnnorm</code></p>",
        "id": 269056499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642994916
    },
    {
        "content": "<p>When we don't want defeq <code>norm x = (nnnorm x : real)</code>?</p>",
        "id": 269056515,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642994952
    },
    {
        "content": "<p>because <code>norm x</code> might have a natural expression of its own which just happens to be always nonnegative and is not defeq to coercing that real to a <code>nnreal</code> and then back to a real</p>",
        "id": 269056585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642995007
    },
    {
        "content": "<p>(note: this came up because some lemmas about <code>is_o</code> assume <code>normed_group</code> just to have a nonnegative norm)</p>",
        "id": 269056601,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642995041
    },
    {
        "content": "<p>For example <code>abs (x - y) : real</code> has this property</p>",
        "id": 269056602,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642995042
    },
    {
        "content": "<p><code>((⟨x, hx : 0 ≤ x⟩ : nnreal) : real) = x</code> is always defeq</p>",
        "id": 269056608,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642995075
    },
    {
        "content": "<p>Maybe to turn it around then: why is <code>nnnorm</code> a field, when it could just be a definition combining the <code>x</code> and <code>hx</code> from a real-valued norm?</p>",
        "id": 269056688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642995196
    },
    {
        "content": "<p>E.g., the norm on <code>α → β</code> is defined using <code>finset.sup</code></p>",
        "id": 269056846,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642995480
    },
    {
        "content": "<p>So, we can have a nice defeq for <code>nnnorm</code> on a pi type (though it seems that we don't have it).</p>",
        "id": 269056892,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642995521
    },
    {
        "content": "<p>AFAIR, <code>has_nnnorm</code> was introduced not long ago.</p>",
        "id": 269056899,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642995554
    },
    {
        "content": "<p>/me is running <code>git log -S has_nnnorm</code></p>",
        "id": 269056906,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642995576
    },
    {
        "content": "<p>I think it is reasonable to just have one class here which adds both fields</p>",
        "id": 269056911,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642995586
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> added <code>has_nnnorm</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/7986\">#7986</a>. The commit message says that <code>has_nnnorm</code> is useful in LTE.</p>",
        "id": 269056970,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642995648
    },
    {
        "content": "<p>So, I suggest that we wait for comments from LTE people.</p>",
        "id": 269056988,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642995675
    },
    {
        "content": "<p>unless for some reason you want a norm that isn't nonnegative? Looking at you, <a href=\"https://en.wikipedia.org/wiki/Field_norm\">field norm</a></p>",
        "id": 269057049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1642995736
    },
    {
        "content": "<p>But if it also doesn't take values in <code>real</code></p>",
        "id": 269057823,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642996912
    },
    {
        "content": "<p>(at least not necessarily)</p>",
        "id": 269057894,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1642996966
    },
    {
        "content": "<p>I don't remember exactly why LTE was full of non negative norm, maybe <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> can say more.<br>\nI just realized we were using it a lot and so it was reasonable to have it in mathlib, where almost everything is done using <code>has_norm</code>.</p>",
        "id": 269074573,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643014409
    },
    {
        "content": "<p>At the end of the day the two notion are equivalent, and I don't have a strong preference over one or the other, but it would be nice to only have one norm. <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> Is this relevant for the refactor you are doing?</p>",
        "id": 269074707,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1643014498
    },
    {
        "content": "<p>Which one? <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 269074751,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643014518
    },
    {
        "content": "<p>It took care of plenty of <code>nonneg</code> hypotheses for us. You can just take products, and don't have to prove they stay nonneg, etc...</p>",
        "id": 269074774,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643014537
    },
    {
        "content": "<p>We almost never use honest <code>ℝ</code> in LTE. So it was really nice to be able to just stay in the <code>ℝ≥0</code> realm.</p>",
        "id": 269074848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1643014565
    },
    {
        "content": "<p>Either way shouldn't affect any of my refactors.</p>",
        "id": 269074906,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643014601
    },
    {
        "content": "<p>The question is not to get rid of <code>nnnorm</code>, however, right? It's about making it nonprimitive.</p>",
        "id": 269074979,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643014648
    },
    {
        "content": "<p>I suggested to put <code>norm x = (nnnorm x : real)</code> by definition.</p>",
        "id": 269097736,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643027275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Do.20we.20need.20.60has_norm.60/near/269074848\">said</a>:</p>\n<blockquote>\n<p>We almost never use honest <code>ℝ</code> in LTE. So it was really nice to be able to just stay in the <code>ℝ≥0</code> realm.</p>\n</blockquote>\n<p>My experience is that I hated <code>ℝ≥0</code> every single second I used it in LTE, mostly because it's less tactic friendly.</p>",
        "id": 269110498,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643033347
    },
    {
        "content": "<p>So one fix for this is to make better tactics I guess.</p>",
        "id": 269118793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1643036928
    }
]