[
    {
        "content": "<p>Suppose I used compactness to show that </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">finite</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"err\">∪</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">ball</span> <span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span>\n</pre></div>\n\n\n<p>How can I construct a function A -&gt; X which assigns to every x in X an a in A such that d(x,a) &lt; 0.5 ?</p>",
        "id": 180533239,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1573575597
    },
    {
        "content": "<p>Something like <code>classical.some</code> or <code>classical.axiom_of_choice</code> should be useful.</p>",
        "id": 180534926,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573576529
    },
    {
        "content": "<p>Also the <code>choose</code> tactic.</p>",
        "id": 180535788,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573577039
    },
    {
        "content": "<p>(You might not think you need choice because A is finite, but <code>finite A</code> is not a constructively useful form of finiteness so you need what Lean calls \"choice\" anyways. It's easier to just use choice, and not use the <code>finite A</code> hypothesis.)</p>",
        "id": 180536505,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573577453
    },
    {
        "content": "<p>In particular you should first transform the other hypothesis into \"for all x, there exists a in A, such that ...\"</p>",
        "id": 180536561,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573577487
    },
    {
        "content": "<p>The <code>choose</code> tactic is just designed for this. Here is a possible proof:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">[</span><span class=\"n\">metric_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hX</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"err\">⋃</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">ball</span> <span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span><span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">ball</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">∃</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">∧</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">ball</span> <span class=\"n\">a</span> <span class=\"mi\">0</span><span class=\"bp\">.</span><span class=\"mi\">5</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"k\">assume</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hX</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">]</span><span class=\"bp\">⟩</span> <span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">choose</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">hf</span> <span class=\"n\">x</span><span class=\"bp\">⟩</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Note that in the way I have formalised the statement, the fact that <code>A</code> is nonempty needs to be an assumption, as otherwise the statement is not true (if <code>A</code> and <code>X</code> are empty but the whole type is not). If you formalize it slightly differently (requesting only that <code>f x</code> belongs to <code>A</code> when <code>x</code> is in <code>X</code>, for instance), this will not be necessary any more. It could be a good exercise for you to try to prove this modified statement following the same lines.</p>",
        "id": 180537325,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1573577973
    },
    {
        "content": "<p>You should also be able to construct <code>f : A -&gt; X</code> (meaning a function from the subtype defined by A to the subtype defined by X). That should avoid these classical, by_cases steps. On the other hand you have to pay careful attention to the difference between <code>∀ a ∈ A</code> and <code>∀ a : A</code> and you might need to do some packing and unpacking of subtypes.</p>",
        "id": 180538141,
        "sender_full_name": "Reid Barton",
        "timestamp": 1573578482
    }
]