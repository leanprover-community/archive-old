[
    {
        "content": "<p>Today I tried to setup transport of structure along equiv, since <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> wanted to see (part of) what we would like to be automated. It can be seen at <a href=\"https://gist.github.com/PatrickMassot/9c5246efe8d1fd4f26c21cbf2ac99ff8\" target=\"_blank\" title=\"https://gist.github.com/PatrickMassot/9c5246efe8d1fd4f26c21cbf2ac99ff8\">https://gist.github.com/PatrickMassot/9c5246efe8d1fd4f26c21cbf2ac99ff8</a> First I'd like to know if the beginning looks reasonnable. The answer is almost certainly not since I'm stuck when I try to go to rings at the bottom. This file is autonomous, it should fail reliably with any recentish version of mathlib.</p>",
        "id": 135547994,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539184246
    },
    {
        "content": "<p>Of course this is needed for the ring completions project, which is needed for the perfectoid project</p>",
        "id": 135548014,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539184279
    },
    {
        "content": "<p>I should say why this is only part of what Kevin always asks for. Here we start with some structure on a type and want to transport it along a given equiv, so that the equiv becomes an isomorphism in the relevant category. The next step is to assume we have an isomorphism in a category and transport various statements (like Kevin's exact sequences).</p>",
        "id": 135548345,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539184611
    },
    {
        "content": "<p>Let me recall the context of the ring completion project. We start with a topological ring <code>α</code>. We get a topological ring structure on <code>separation_quotient α</code> in <a href=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L279\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L279\">https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L279</a>. We get a topological ring structure on the completion of a separated topological ring at <a href=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L1205\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L1205\">https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L1205</a> (oops, this is only a <code>comm_ring</code> instance, but the topological axioms should be easy). And  we have <a href=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L747\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L747\">https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L747</a> : <code>completion (separation_quotient α) ≃ completion α</code> along which we want to transport the topological ring structure.</p>",
        "id": 135548838,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539185063
    },
    {
        "content": "<p>Nice start <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>! It's also a bit sad that it is breaking down for rings.</p>",
        "id": 135556061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539192843
    },
    {
        "content": "<p>Don't loose hope Johan, Mario will save us.</p>",
        "id": 135561185,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539197910
    },
    {
        "content": "<p>As you point out, there are two slightly different senses of \"transport of structure\" being used here. One, which seemed to be Kevin's main point, is a theorem such as \"if R ~= S are isomorphic rings and R is artinian then S is artinian\", and this has a possibility of being addressed by <code>transfer</code>. The other has the form \"Given an equiv A ~= B of sets, and a ring structure on A, there is an induced ring structure on B\" which is what you seem to be demonstrating in the gist.</p>",
        "id": 135561760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539198423
    },
    {
        "content": "<p>yes</p>",
        "id": 135561778,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539198450
    },
    {
        "content": "<p>In my use case I first want to transport the structure over an equiv and then transport properties</p>",
        "id": 135561836,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539198486
    },
    {
        "content": "<p>One reason I wouldn't want to just jump in with that kind of tactic is that most of those theorems generalize to a weaker structure than equiv</p>",
        "id": 135561849,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539198501
    },
    {
        "content": "<p>And my equiv is actually a uniform space equiv so completeness would be transported for instance</p>",
        "id": 135561854,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539198523
    },
    {
        "content": "<p>For example you might just have an injection into a subring of a ring</p>",
        "id": 135561875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539198546
    },
    {
        "content": "<p>or it might not even be an injection but there is a coherence property</p>",
        "id": 135561899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539198591
    },
    {
        "content": "<p>Maybe it's too early for a tactic here. As you wrote, we first need to see a couple of handcrafted examples in order to understand what we want</p>",
        "id": 135561902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539198597
    },
    {
        "content": "<p>Do you think the ring thing can be done with that starting point? I'm not sure whether I should try to have local instances, or maybe use <code>haveI</code> in the constructions...</p>",
        "id": 135561982,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539198654
    },
    {
        "content": "<p>I also have no applications of your kind of transport of structure</p>",
        "id": 135562025,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539198691
    },
    {
        "content": "<p>what?</p>",
        "id": 135562043,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539198717
    },
    {
        "content": "<p>the \"A is a ring so B is a ring\" kind</p>",
        "id": 135562090,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539198729
    },
    {
        "content": "<p>I wrote very precisely what immediate application I have</p>",
        "id": 135562094,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539198739
    },
    {
        "content": "<p>In this thread, right before Johan's message</p>",
        "id": 135562106,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539198758
    },
    {
        "content": "<p>the problem is that just transporting the whole structure won't work</p>",
        "id": 135562141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539198798
    },
    {
        "content": "<p>you will end up with yet another copy of the uniform structure</p>",
        "id": 135562155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539198820
    },
    {
        "content": "<p>A uniform structure <em>and</em> a compatible ring structure, and a universal property, that's exactly what I want</p>",
        "id": 135562236,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539198877
    },
    {
        "content": "<p>So what is the setting exactly for this theorem? <code>completion (separation_quotient α) ≃ completion α</code></p>",
        "id": 135562282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539198946
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L747\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L747\">https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L747</a></p>",
        "id": 135562344,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539198979
    },
    {
        "content": "<p>any uniform space structure on any type</p>",
        "id": 135562349,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539198991
    },
    {
        "content": "<p>so where are the rings coming from</p>",
        "id": 135562378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539199031
    },
    {
        "content": "<p>I don't know what to write that is not copy-pasting my message before Johan's message</p>",
        "id": 135562459,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539199103
    },
    {
        "content": "<blockquote>\n<p>Let me recall the context of the ring completion project. We start with a topological ring <code>α</code>. We get a topological ring structure on <code>separation_quotient α</code> in <a href=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L279\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L279\">https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L279</a>. We get a topological ring structure on the completion of a separated topological ring at <a href=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L1205\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L1205\">https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L1205</a> (oops, this is only a <code>comm_ring</code> instance, but the topological axioms should be easy). And  we have <a href=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L747\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L747\">https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L747</a> : <code>completion (separation_quotient α) ≃ completion α</code> along which we want to transport the topological ring structure.</p>\n</blockquote>\n<p>Voila. I did it.</p>",
        "id": 135562511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1539199178
    },
    {
        "content": "<p>explain the last sentence. Which side has the ring, and why doesn't the other side have one?</p>",
        "id": 135562576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539199208
    },
    {
        "content": "<p>Left hand side has the ring</p>",
        "id": 135562604,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539199239
    },
    {
        "content": "<p>Because <code>separation_quotient α</code> is separated</p>",
        "id": 135562615,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539199254
    },
    {
        "content": "<p>This is the content of the second sentence</p>",
        "id": 135562634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539199276
    },
    {
        "content": "<p>I don't get it. Is this <code>completion (separation_quotient α) ≃ completion α</code> in fact (in math) a uniform ring isomorphism?</p>",
        "id": 135562813,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539199449
    },
    {
        "content": "<p>If so, why isn't <code>completion α</code> already separated?</p>",
        "id": 135562826,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539199483
    },
    {
        "content": "<p>A posteriori yes</p>",
        "id": 135562828,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539199483
    },
    {
        "content": "<p><code>completion α</code> is separated, but <code>α</code> isn't</p>",
        "id": 135562856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539199523
    },
    {
        "content": "<p>what goes wrong in the <code>ring (completion α)</code> instance if you drop the <code>separated α</code> property?</p>",
        "id": 135562875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539199557
    },
    {
        "content": "<p>The map <code>coe : α -&gt; completion α</code> is no longer injective</p>",
        "id": 135563061,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539199736
    },
    {
        "content": "<p>does injectivity get used somewhere?</p>",
        "id": 135563201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539199865
    },
    {
        "content": "<p>It is currently used in the proof everywhere, but maybe there is another proof. Johannes wrote that proof.</p>",
        "id": 135563225,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539199913
    },
    {
        "content": "<p>So I didn't think hard about it</p>",
        "id": 135563266,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539199926
    },
    {
        "content": "<p>but again a posteriori it seems like it is actually injective</p>",
        "id": 135563276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539199940
    },
    {
        "content": "<p>or else you wouldn't have that equiv</p>",
        "id": 135563283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539199950
    },
    {
        "content": "<p>No</p>",
        "id": 135563284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539199951
    },
    {
        "content": "<p>it's not injective</p>",
        "id": 135563289,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539199961
    },
    {
        "content": "<p><code>coe : α -&gt; completion α</code> is injective if and only if <code>α</code> is separated</p>",
        "id": 135563305,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539199991
    },
    {
        "content": "<p><code>separation_quotient α -&gt; completion (separation_quotient α)</code> is injective</p>",
        "id": 135563316,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539200014
    },
    {
        "content": "<p>ah, ok</p>",
        "id": 135563320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539200028
    },
    {
        "content": "<p>because <code>separation_quotient α</code> is separated</p>",
        "id": 135563321,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539200032
    },
    {
        "content": "<p>Do the definitions of <code>has_one</code> and <code>has_mul</code> at least work without <code>separated</code>?</p>",
        "id": 135563370,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539200066
    },
    {
        "content": "<p>Probably</p>",
        "id": 135563397,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539200109
    },
    {
        "content": "<p>maybe not actually</p>",
        "id": 135563402,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539200120
    },
    {
        "content": "<p>sorry</p>",
        "id": 135563424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539200157
    },
    {
        "content": "<p>You can define mul</p>",
        "id": 135563463,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539200166
    },
    {
        "content": "<p>the issue is continuity</p>",
        "id": 135563466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539200171
    },
    {
        "content": "<p>I'm checking this branch out, 1 sec</p>",
        "id": 135563544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539200292
    },
    {
        "content": "<p>anyway, my intuition is that you don't want to use transfer of structure like this. You should already be able to define the structure a priori, and you want to show that the equivalence respects the structure that is already there</p>",
        "id": 135563584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539200392
    },
    {
        "content": "<p>In need to transport something along this equiv though</p>",
        "id": 135563659,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539200459
    },
    {
        "content": "<p>In particular, if we did transfer of structure your way, we would end up with two ring structures on <code>completion (separation_quotient A)</code></p>",
        "id": 135563662,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539200461
    },
    {
        "content": "<p>I'm ready to trow away any ring structure which is not compatible with the uniform structure</p>",
        "id": 135563689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539200511
    },
    {
        "content": "<p>I would guess the two ring structures are equal, but as we know that's not good enough for lean</p>",
        "id": 135563749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539200547
    },
    {
        "content": "<p>maths on a computer are so complicated...</p>",
        "id": 135563873,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539200732
    },
    {
        "content": "<p>Oh, this is evil: <a href=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L263-L273\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L263-L273\">https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L263-L273</a></p>",
        "id": 135565503,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539202502
    },
    {
        "content": "<p>I'm starting to see why you get heq goals</p>",
        "id": 135565530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539202538
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/subject/heq.20hell.20again/near/135479776\" title=\"#narrow/stream/113488-general/subject/heq.20hell.20again/near/135479776\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/subject/heq.20hell.20again/near/135479776</a></p>",
        "id": 135565593,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539202584
    },
    {
        "content": "<p>I already confessed</p>",
        "id": 135565596,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539202599
    },
    {
        "content": "<p>And I blame Danish thefts</p>",
        "id": 135565687,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539202688
    },
    {
        "content": "<p>I think we need to be less constructive with our quotient constructions</p>",
        "id": 135565707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539202722
    },
    {
        "content": "<p>the quotient ring construction for example should apply to any quotient map, not just the canonical one</p>",
        "id": 135565730,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539202746
    },
    {
        "content": "<p>What's evil about it?</p>",
        "id": 135565737,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539202751
    },
    {
        "content": "<p>constructive is evil</p>",
        "id": 135565743,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539202761
    },
    {
        "content": "<p>Type equality is evil</p>",
        "id": 135565745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539202764
    },
    {
        "content": "<p>Actually I tried to redeem with the next lemma</p>",
        "id": 135565830,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539202815
    },
    {
        "content": "<p><code>eq_mpr_heq</code>?</p>",
        "id": 135565858,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539202839
    },
    {
        "content": "<p>or previous lemma</p>",
        "id": 135565859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539202840
    },
    {
        "content": "<p>the instance?</p>",
        "id": 135565876,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539202848
    },
    {
        "content": "<p>I have one lemma saying the quotients are equal but the other one says the setoids are equal</p>",
        "id": 135565889,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539202869
    },
    {
        "content": "<blockquote>\n<p>the quotient ring construction for example should apply to any quotient map, not just the canonical one</p>\n</blockquote>\n<p>Do you mean so it would be easy to prove things about quotient rings that aren't constructed using <code>quotient</code>, like <code>zmod</code>, or <code>complex</code> using theorems about quotient rings?</p>",
        "id": 135565899,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1539202891
    },
    {
        "content": "<p>I mean <a href=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L255-L261\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L255-L261\">https://github.com/leanprover-community/mathlib/blob/completions/analysis/topology/completion.lean#L255-L261</a></p>",
        "id": 135565949,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539202928
    },
    {
        "content": "<p>right</p>",
        "id": 135565965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539202965
    },
    {
        "content": "<p>as long as it acts like a quotient you should have quotient ring construction, quotient topology, etc</p>",
        "id": 135565991,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539202998
    },
    {
        "content": "<blockquote>\n<p>as long as it acts like a quotient you should have quotient ring construction, quotient topology, etc</p>\n</blockquote>\n<p>Is this something I'm meant to understand and convert into action, or was this you thinking aloud?</p>",
        "id": 135566883,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539204198
    },
    {
        "content": "<p>I don't really expect you to do anything on that front, it's mostly the fault of <code>quotient_ring</code> and such</p>",
        "id": 135566901,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539204237
    },
    {
        "content": "<p>in the short term you might try to avoid casting between types but still unfold the fact that it is a quotient</p>",
        "id": 135566962,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539204272
    },
    {
        "content": "<p>This quotient ring stuff seems tricky to get right. I was already refactored once</p>",
        "id": 135566972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539204289
    },
    {
        "content": "<p>indeed it's been refactored again</p>",
        "id": 135566984,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539204305
    },
    {
        "content": "<p>(module refactor touched this too)</p>",
        "id": 135566993,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1539204315
    },
    {
        "content": "<p>I hope this completion stuff will help you get the refactor right</p>",
        "id": 135567002,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539204335
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> this conversation suggests that the perfectoid project is waiting for module refactor also on the ring completion side</p>",
        "id": 135567198,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539204546
    },
    {
        "content": "<p>unless we find a way to finish that ring completion thing using evil lemmas and fake transport of structure</p>",
        "id": 135567217,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539204589
    },
    {
        "content": "<p>One thing that really spurs me on with this whole thing is that as we try to do a different kind of mathematics to the kind that is typically done in a theorem prover, we run into issues which computer scientists seem to be able to solve. I am constantly feeling like both sides somehow benefit.</p>",
        "id": 135567220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539204593
    },
    {
        "content": "<p>I did this once (cutting corners) with schemes, and now look at that project.</p>",
        "id": 135567284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539204618
    },
    {
        "content": "<p>I say we do it right this time, however long it takes.</p>",
        "id": 135567295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539204631
    },
    {
        "content": "<p>Yes, this is exactly what I was thinking</p>",
        "id": 135567303,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539204643
    },
    {
        "content": "<p>I'm not that busy in January...</p>",
        "id": 135567311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1539204649
    },
    {
        "content": "<p>Yeah, too bad we have orthogonal teaching schedules this year</p>",
        "id": 135567348,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539204712
    },
    {
        "content": "<p>Mario, could we still have <code>congr'</code> trying to discharge goals using <code>proof_irrel</code> and <code>proof_irrel_heq</code> in order to cover my evil actions?</p>",
        "id": 135567464,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539204822
    },
    {
        "content": "<p>About transport of structure, Assia pointed out to me <a href=\"https://hal.inria.fr/hal-01559073\" target=\"_blank\" title=\"https://hal.inria.fr/hal-01559073\">https://hal.inria.fr/hal-01559073</a> It seems it's actually relevant, despite the univalent stuff</p>",
        "id": 136137596,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539981850
    },
    {
        "content": "<p>I notice that it helps publishing CS papers to promise stuff for free. It seems most papers titles in this area contain this promise.</p>",
        "id": 136137628,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1539981903
    },
    {
        "content": "<p>Everybody loves free things! This is a good paper, I linked it previously in the \"hott for newbies\" thread, and Mario made a few comments.</p>",
        "id": 136138635,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1539983042
    },
    {
        "content": "<p>Where is this thread? The search is failing me.</p>",
        "id": 136146880,
        "sender_full_name": "Rudi Grinberg",
        "timestamp": 1539994696
    },
    {
        "content": "<p>It's <a href=\"#narrow/stream/113488-general/subject/what.20is.20wrong.20with.20HoTT/near/135265404\" title=\"#narrow/stream/113488-general/subject/what.20is.20wrong.20with.20HoTT/near/135265404\">here</a>.</p>",
        "id": 136146954,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1539994839
    },
    {
        "content": "<p>As a side note, I've found that by default, searching Zulip doesn't turn up results from before I joined the server. However, it does if I additionally include \"stream:general\" or \"stream:maths\", etc.</p>",
        "id": 136147013,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1539994938
    },
    {
        "content": "<blockquote>\n<p>Everybody loves free things! This is a good paper, I linked it previously in the \"hott for newbies\" thread, and Mario made a few comments.</p>\n</blockquote>\n<p>Thanks! I was sure it had been mentioned, I even told <span class=\"user-mention\" data-user-id=\"110172\">@Assia Mahboubi</span> but I couldn't find it.</p>",
        "id": 136162441,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1540028870
    }
]