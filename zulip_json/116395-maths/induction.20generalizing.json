[
    {
        "content": "<p><code>induction</code> isn't documented in the tactics doc as far as I can see, and I think I need to use it in a slightly fancy way (is it <code>generalizing</code> I want here?). I have some slightly messy goal involving quantifying over all finite subsets of a type <code>K</code>. I want to prove the goal by induction on the size of the subset. In particular the inductive hypotheses in <code>data.set.finite</code> are not right for me -- they involve hypotheses of the form \"if it's true for S then it's true for S union {x}\" but what I can prove is that it's true for the empty subset, and if n&gt;=1 is the size of non-empty S, and if it's true for all subsets of S of size n-1, then it's true for S. </p>\n<p>I can probably do this by explicitly copying my messy goal (which will mention typeclasses) and putting a \"forall n\" in front of it and an assumption which says n is the size of S, proving that this suffices, and then doing induction on n  -- but is there some cheap way to do this just using the <code>induction</code> tactic?</p>",
        "id": 186805835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580232920
    },
    {
        "content": "<p>dammit</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">Zariskis_lemma</span>\n  <span class=\"c1\">-- let k be a field</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- and let k ⊆ K be another field</span>\n  <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- Assume that there&#39;s a finite subset S of K</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfs</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- which generates K as a k-algebra</span>\n  <span class=\"c1\">-- (note: `⊤` is &quot;the largest k-subalgebra of K&quot;, i.e., K)</span>\n  <span class=\"o\">(</span><span class=\"n\">hsgen</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">adjoin</span> <span class=\"n\">k</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- Then</span>\n  <span class=\"o\">:</span>\n  <span class=\"c1\">-- K is finitely-generated as a k-vector space</span>\n<span class=\"o\">(</span><span class=\"err\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fg</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfreezeI</span><span class=\"o\">,</span> <span class=\"c1\">-- to get next line to work; I need to quantify over k</span>\n  <span class=\"n\">revert</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">set</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"n\">hfs</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  induction tactic failed, failed to create new goal</span>\n<span class=\"cm\">  -/</span>\n</pre></div>\n\n\n<p>this is more annoying than I realised. This works:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">unfreezeI</span><span class=\"o\">,</span> <span class=\"c1\">-- to get next line to work; I need to quantify over k</span>\n  <span class=\"n\">revert</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n    <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfs</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"n\">hfs</span><span class=\"o\">))</span>\n    <span class=\"o\">(</span><span class=\"n\">hsgen</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">adjoin</span> <span class=\"n\">k</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span><span class=\"o\">),</span>  <span class=\"o\">(</span><span class=\"err\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fg</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">this</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">S</span> <span class=\"n\">hfs</span> <span class=\"n\">rfl</span> <span class=\"n\">hsgen</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>but I feel like I'm missing a trick (the <code>rfl</code> is <code>hn</code>).</p>\n<div class=\"codehilite\"><pre><span></span>\n</pre></div>",
        "id": 186811567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580236045
    },
    {
        "content": "<p>The problem is that <code>n</code> is a let-expression.</p>",
        "id": 186812959,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580236775
    },
    {
        "content": "<p>This works, but is still ugly:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">all</span>\n\n<span class=\"kn\">universe</span> <span class=\"kn\">variables</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">Zariskis_lemma</span>\n  <span class=\"c1\">-- let k be a field</span>\n  <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">k</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- and let k ⊆ K be another field</span>\n  <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n  <span class=\"c1\">-- Assume that there&#39;s a finite subset S of K</span>\n  <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hfs</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- which generates K as a k-algebra</span>\n  <span class=\"c1\">-- (note: `⊤` is &quot;the largest k-subalgebra of K&quot;, i.e., K)</span>\n  <span class=\"o\">(</span><span class=\"n\">hsgen</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">adjoin</span> <span class=\"n\">k</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span><span class=\"o\">)</span>\n  <span class=\"c1\">-- Then</span>\n  <span class=\"o\">:</span>\n  <span class=\"c1\">-- K is finitely-generated as a k-vector space</span>\n<span class=\"o\">(</span><span class=\"err\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fg</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfreezeI</span><span class=\"o\">,</span> <span class=\"c1\">-- to get next line to work; I need to quantify over k</span>\n  <span class=\"n\">revert</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"bp\">@</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">fintype</span> <span class=\"n\">hfs</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">d</span> <span class=\"n\">hd</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 186812995,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580236801
    },
    {
        "content": "<ul>\n<li>Is there a tactic that forgets the body of a local hypothesis (in Coq this is <code>clearbody n</code>)?</li>\n<li>Is there a tactic that does the same as <code>set x := t with hx</code>, but makes <code>x</code> a normal variable, instead of a let-expression?</li>\n</ul>\n<p>We should add both these tactics if they don't already exist.</p>",
        "id": 186813156,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580236893
    },
    {
        "content": "<p>Yes, I used <code>set</code> instead of <code>let</code> to try and somehow get around this but clearly it didn't work (because <code>set</code> uses <code>let</code>). Your method is better than mine because you didn't have to rewrite the goal. Thanks!</p>",
        "id": 186813259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580236927
    },
    {
        "content": "<p>nice use of <code>obtain</code> there ;-)</p>",
        "id": 186813351,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580236971
    },
    {
        "content": "<p>I updated it to use <code>obtain</code> instead of <code>have</code>.</p>",
        "id": 186813363,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580236978
    },
    {
        "content": "<p>Oh, you saw it :)</p>",
        "id": 186813378,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580236983
    },
    {
        "content": "<p>I was trying to understand it when it changed in front of me :-)</p>",
        "id": 186813417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580237004
    },
    {
        "content": "<p>Another shortening, now there is just <code>O(1)</code> extra stuff you have to type compared to a dedicated tactic for this purpose.</p>",
        "id": 186813516,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580237052
    },
    {
        "content": "<p>So am I wrong in thinking that there is some option to <code>induction</code> which does this for me automatically?</p>",
        "id": 186813535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580237062
    },
    {
        "content": "<p>I don't think such option currently exist. But we could let <code>induction</code> call <code>clearbody</code> on its argument if the <code>clearbody</code> tactic exists.</p>",
        "id": 186813605,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580237102
    },
    {
        "content": "<p>which turns a let-expression into a normal variable.</p>",
        "id": 186813670,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580237128
    },
    {
        "content": "<p>This is actually a tricky commutative algebra lemma, but I had no idea that this part was the tricky part :-/</p>",
        "id": 186813707,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580237152
    },
    {
        "content": "<p>:)</p>",
        "id": 186813718,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580237161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>  what do you mean by \"forgets the body of a local hypothesis\"? Do you want to replace a let bound <code>x : A := t</code> in the context with <code>x : A</code>?</p>",
        "id": 186827391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1580244626
    },
    {
        "content": "<p>I think that this was precisely what stopped my induction tactic from working</p>",
        "id": 186829923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580246192
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Exactly.</p>",
        "id": 186831805,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1580247460
    },
    {
        "content": "<p>No doubt this is called upsilon reduction or something</p>",
        "id": 186833827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1580248814
    }
]