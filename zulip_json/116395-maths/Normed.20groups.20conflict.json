[
    {
        "content": "<p>Now that we have both additive and multiplicative normed groups and that they both use the same notation and naming convention, what do people think of adding something like the following?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">prenormed_space</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">pseudo_metric_space</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">has_norm</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_dist_eq_norm</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">dist</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"bp\">∥</span><span class=\"n\">b</span><span class=\"bp\">∥</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>with of course <code>a := 0</code> for additive normed groups and <code>a := 1</code> for multiplicative ones.</p>",
        "id": 304350569,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665953379
    },
    {
        "content": "<p>This gives us that the norm is nonnegative, and hopefully all other lemmas that are currently duplicated.</p>",
        "id": 304350650,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665953445
    },
    {
        "content": "<p>This of course is mathematically uninteresting. It's just to avoid duplication in the parts of the API that transfers <code>dist</code> results to <code>norm</code> ones.</p>",
        "id": 304350847,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665953650
    },
    {
        "content": "<p>Isn't <code>@[to_additive]</code> taking care of (most of) this duplication?</p>",
        "id": 304406944,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1665995775
    },
    {
        "content": "<p>Yes of course. But the lemma names are primed because the statement doesn't contain anything additive/multiplicative</p>",
        "id": 304410182,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1665996938
    },
    {
        "content": "<p>I see. And what kind of primed lemmas can you generalize to <code>prenormed_space</code>? Most lemmas I see refer to <code>sub</code>/<code>zero</code> (or <code>div</code>/<code>one</code>) explicitly</p>",
        "id": 304502991,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1666023571
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/norm_nonneg\">docs#norm_nonneg</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bounded_iff_forall_norm_le\">docs#bounded_iff_forall_norm_le</a>, ...</p>",
        "id": 304517694,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666027995
    },
    {
        "content": "<p>It won't be a lot, I must say.</p>",
        "id": 304517774,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1666028024
    },
    {
        "content": "<p>In that case I would say let's not overburden type class inference by adding another intermediary.</p>",
        "id": 304524453,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1666029863
    },
    {
        "content": "<p>It wouldn't need to be a true intermediary; typeclass inference ought only to be burdened by it for the lemmas Yaël has in mind. I'd hope for more than two though...</p>",
        "id": 304569280,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1666045010
    }
]