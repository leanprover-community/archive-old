[
    {
        "content": "<p>I am working on defining basic properties of Bernoulli polynomials, and am currently trying to prove that  <code>  ∑ k in finset.range (n + 1), ((n + 1).choose k : ℚ) * bernoulli_poly k X = (n + 1) * X^n </code> . I am at this stage of the proof :</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">X</span><span class=\"o\">:</span> <span class=\"n\">ℚ</span>\n<span class=\"n\">n</span><span class=\"o\">:</span> <span class=\"n\">ℕ</span>\n<span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.Ico</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">n.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">s</span> <span class=\"bp\">*</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.Ico</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">n.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">bernoulli_neg</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n.succ</span>\n<span class=\"bp\">⊢</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.Ico</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">∑</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"k\">in</span> <span class=\"n\">finset.Ico</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">n.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"o\">((</span><span class=\"n\">n.succ</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">bernoulli_neg</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">-</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">j.choose</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">n.succ</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">X</span> <span class=\"bp\">^</span> <span class=\"n\">n.succ</span>\n</code></pre></div>\n<p>I want to use the lemma <code>finset.sum_Ico_add</code> in order to change the bounds of the inner sum from <code>i</code> to <code>n.succ + 1</code>,to <code>0</code> to <code>n.succ + 1 - i</code>. In general, I am having issues dealing with computations within double sums. I tried to use <code>conv_lhs</code>, however, I am losing the data that <code>i in finset.Ico 0 (n.succ + 1)</code> (This information is needed so I can use <code>nat.sub_add_cancel</code>).</p>\n<p>Any help is appreciated, thank you!</p>",
        "id": 219807482,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1607930908
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/d47e1b70d9e9407b1ac7f0785958ed0bbe071523/src/number_theory/bernoulli%20polynomials.lean#L135\">https://github.com/leanprover-community/mathlib/blob/d47e1b70d9e9407b1ac7f0785958ed0bbe071523/src/number_theory/bernoulli%20polynomials.lean#L135</a></p>\n<p>Here is my code.</p>",
        "id": 219807667,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1607931162
    },
    {
        "content": "<p>Inside conv mode you can use <code>funext</code> I think, to retain some of the data. But I agree that this is not as smooth as we would like</p>",
        "id": 219807986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607931524
    },
    {
        "content": "<p>Does it make sense to take smaller steps? Write a helper lemma that manipulates the inner sum for you.</p>",
        "id": 219808009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607931555
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/computations.20in.20double.20sum/near/219807986\">said</a>:</p>\n<blockquote>\n<p>Inside conv mode you can use <code>funext</code> I think, to retain some of the data. But I agree that this is not as smooth as we would like</p>\n</blockquote>\n<p>I tried that, but I lost the info that <code>i ≤ (n.succ + 1)</code>(which I do need). Would it be wise to use <code>convert_to</code>?</p>",
        "id": 219808365,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1607931865
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/computations.20in.20double.20sum/near/219808009\">said</a>:</p>\n<blockquote>\n<p>Does it make sense to take smaller steps? Write a helper lemma that manipulates the inner sum for you.</p>\n</blockquote>\n<p>I will try this.</p>",
        "id": 219808380,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1607931879
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> What if you start your <code>conv</code> block with <code>apply_congr, skip,</code>?</p>",
        "id": 219810454,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1607933810
    },
    {
        "content": "<p>Yes, that works! Thank you! </p>\n<p>I also found a lemma <code>finset.sum_Ico_eq_sum_range</code> which directly gives me the required result.</p>",
        "id": 219810793,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1607934042
    },
    {
        "content": "<p>ooh, sorry, I said <code>funext</code> but I actually meant <code>apply_congr</code>.</p>",
        "id": 219810966,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1607934198
    },
    {
        "content": "<p>That <code>apply_congr</code> tactic (which is a <code>conv</code> mode tactic) was written exactly for this purpose of rewriting under big ops.</p>",
        "id": 219811573,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1607934662
    },
    {
        "content": "<p>I see, thank you!</p>",
        "id": 219817874,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1607938741
    }
]