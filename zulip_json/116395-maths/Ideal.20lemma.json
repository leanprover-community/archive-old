[
    {
        "content": "<p>Hello, <br>\nI have a little problem ! </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">Test_2</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"o\">)[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">][</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">][</span><span class=\"n\">comm_ring</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">)(</span><span class=\"n\">f</span><span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span>  <span class=\"n\">C</span><span class=\"o\">)[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">][</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">g</span><span class=\"o\">]:</span>\n   <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n   <span class=\"n\">sorry</span><span class=\"o\">,</span>\n <span class=\"kn\">end</span>\n</pre></div>",
        "id": 192114027,
        "sender_full_name": "orlando",
        "timestamp": 1585386971
    },
    {
        "content": "<p>There is map_comp for module but not for ideal ! I don't understand how to deal !!!</p>",
        "id": 192114040,
        "sender_full_name": "orlando",
        "timestamp": 1585387026
    },
    {
        "content": "<p>I think <code>ideal.map</code> is just sugar over <code>module.map</code>, so you may be able to prove this by just applying <code>module.map_comp</code></p>",
        "id": 192114210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585387278
    },
    {
        "content": "<p>Ok, but the little problem  is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">g</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span></span></span></span> is not <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span> module morphism </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">map_comp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">M₂</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M₃</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"bp\">```</span>\n</pre></div>",
        "id": 192114564,
        "sender_full_name": "orlando",
        "timestamp": 1585387883
    },
    {
        "content": "<p>welp, I guess you will have to prove it ;)</p>",
        "id": 192114674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585388055
    },
    {
        "content": "<p><code>is_ring_hom</code> is deprecated right? <span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> you should stop using it and use <code>ring_hom</code></p>",
        "id": 192114745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585388225
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideal_operations</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">Test_2</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"bp\">→</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_ring_hom</span> <span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_antisymm</span>\n  <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map_le_iff_le_comap</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hxI</span><span class=\"o\">,</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_map_of_mem</span> <span class=\"err\">$</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_map_of_mem</span> <span class=\"n\">hxI</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map_le_iff_le_comap</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map_le_iff_le_comap</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hxI</span><span class=\"o\">,</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_map_of_mem</span> <span class=\"n\">hxI</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 192114748,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585388234
    },
    {
        "content": "<p>Kenny can you do this with ring_hom?</p>",
        "id": 192114750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585388257
    },
    {
        "content": "<p>Just to show Orlando the bundled approach?</p>",
        "id": 192114758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585388278
    },
    {
        "content": "<p>what was that galois connection emoji again</p>",
        "id": 192114759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585388279
    },
    {
        "content": "<p><code>ideal.map</code> takes <code>is_ring_hom</code></p>",
        "id": 192114811,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585388319
    },
    {
        "content": "<p>:-/</p>",
        "id": 192114833,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585388364
    },
    {
        "content": "<p>refactor time</p>",
        "id": 192114842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585388385
    },
    {
        "content": "<p>It's submodule.map we should be talking about not module.map</p>",
        "id": 192114918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585388502
    },
    {
        "content": "<p>Ideals are submodules not modules</p>",
        "id": 192114960,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585388548
    },
    {
        "content": "<p>zulip needs autocompletion</p>",
        "id": 192114961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585388550
    },
    {
        "content": "<p>And easy ability to input Unicode on phones</p>",
        "id": 192114967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585388574
    },
    {
        "content": "<p>I don't understand anything Mario ! But it's work <span aria-label=\"tada\" class=\"emoji emoji-1f389\" role=\"img\" title=\"tada\">:tada:</span></p>",
        "id": 192115168,
        "sender_full_name": "orlando",
        "timestamp": 1585388937
    },
    {
        "content": "<p>What is the  $ ???</p>",
        "id": 192115267,
        "sender_full_name": "orlando",
        "timestamp": 1585389063
    },
    {
        "content": "<p><code>a $ b c d</code> is just <code>a (b c d)</code></p>",
        "id": 192115272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585389096
    },
    {
        "content": "<p><code>$</code> is notation (anything which is not letters and <code>_</code> is usually notation) and you can see what it does with <code>#print notation $</code></p>",
        "id": 192115313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585389129
    },
    {
        "content": "<p>we should put that in the faq</p>",
        "id": 192115325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585389143
    },
    {
        "content": "<p>The output is <code>_ `$`:1 _:0 := #1 #0</code> which means <code>a $ b := a b</code> and make it right associative and have \"power\" 1 (which is low). <a href=\"https://xenaproject.wordpress.com/2019/01/20/a-word-on-bidmas/\" title=\"https://xenaproject.wordpress.com/2019/01/20/a-word-on-bidmas/\">Here's more information written for mathematicians</a></p>",
        "id": 192115342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585389228
    },
    {
        "content": "<p>It's too bad that looking up info on one piece of unfamimiar notation shows a whole bunch of unfamiliar notation</p>",
        "id": 192115411,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585389320
    },
    {
        "content": "<p><code>$</code> is particularly bad in this regard</p>",
        "id": 192115414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585389335
    },
    {
        "content": "<p>because the binding powers are 1 and 0, and the missing variables are <code>#1</code> and <code>#0</code></p>",
        "id": 192115417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585389361
    },
    {
        "content": "<p>and they are numbered in reverse order because de bruijn thought it would be a good idea</p>",
        "id": 192115468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585389410
    },
    {
        "content": "<p>Yes, I'm still wondering why he didn't use negative integers, so that they would be ordered the right way <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 192115485,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585389455
    },
    {
        "content": "<p>You might naively think he'd want to use non-positive ones, but the negative integers are the inbuilt constructor</p>",
        "id": 192115545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585389556
    },
    {
        "content": "<p>I make Ideals into a functor <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span> </p>\n<p>For the moment and don't understand really the difference between  ring_hom and  <code>(ψ : A ⟶ B)</code></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideal_operations</span>\n<span class=\"n\">universes</span>  <span class=\"n\">u</span>\n\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Ring</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Set</span><span class=\"bp\">`</span> <span class=\"o\">:=</span>  <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">ideal</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">ideal_id</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">I</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_id</span> <span class=\"err\">↑</span><span class=\"n\">I</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span_eq</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">ideal_comp</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"o\">)(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span>  <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">B</span> <span class=\"err\">⟶</span>  <span class=\"n\">C</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n  <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">I</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_antisymm</span>\n  <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map_le_iff_le_comap</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hxI</span><span class=\"o\">,</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_map_of_mem</span> <span class=\"err\">$</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_map_of_mem</span> <span class=\"n\">hxI</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map_le_iff_le_comap</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map_le_iff_le_comap</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hxI</span><span class=\"o\">,</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mem_map_of_mem</span> <span class=\"n\">hxI</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span> <span class=\"n\">ideal</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Omega</span>\n<span class=\"n\">def</span> <span class=\"err\">Ω</span><span class=\"bp\">_</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"o\">):=</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span>\n<span class=\"n\">def</span> <span class=\"err\">Ω</span><span class=\"bp\">_</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span><span class=\"n\">Ring</span><span class=\"o\">)(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span><span class=\"bp\">_</span><span class=\"n\">obj</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"err\">Ω</span><span class=\"bp\">_</span><span class=\"n\">obj</span> <span class=\"n\">B</span><span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">I</span><span class=\"o\">,</span><span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">ψ</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"n\">def</span> <span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"err\">⥤</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"err\">Ω</span><span class=\"bp\">_</span><span class=\"n\">obj</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"err\">Ω</span><span class=\"bp\">_</span><span class=\"n\">map</span><span class=\"o\">,</span>\n  <span class=\"n\">map_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">funext</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types_id</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">ideal_id</span> <span class=\"n\">A</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rintros</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types_comp</span><span class=\"o\">,</span>\n    <span class=\"n\">funext</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">ideal_comp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">I</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span> <span class=\"n\">Omega</span>\n</pre></div>",
        "id": 192135913,
        "sender_full_name": "orlando",
        "timestamp": 1585420551
    },
    {
        "content": "<p>The difference between <code>ring_hom</code> and <code>is_ring_hom</code> is the same as the difference between <code>CommRing</code> and <code>comm_ring</code>. With <code>ring_hom</code>, the function is \"bundled\" as part of the structure. With <code>is_ring_hom</code> it is an input. Similarly <code>comm_ring</code> takes an input <code>R</code> but <code>CommRing</code> does not.</p>",
        "id": 192136341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585421198
    },
    {
        "content": "<p>There isn't really a difference between those two types of homs. The difference is in what kind of objects you can stick at the end of the arrow (-;<br>\nIf you use <code>ring_hom</code> you give it two types <code>R</code> and <code>S</code>, and make sure that there are instances of <code>ring R</code> or <code>comm_semiring S</code> etc floating around.<br>\nIf you use the category theory arrow, then you have to provide objects of the category <code>Ring</code> or <code>CommRing</code>, and those objects are types + a suitable instance, packaged together.</p>",
        "id": 192136358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585421231
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> you can replace</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">λ</span> <span class=\"n\">I</span><span class=\"o\">,</span><span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">ψ</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>with <code>exact ideal.map ψ</code>. You don't even need to enter tactic mode.</p>",
        "id": 192136421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585421286
    },
    {
        "content": "<p>Oh! You're talking about the <code>\\hom</code> arrow? Right, the only difference is that for one the inputs are unbundled and for the other the inputs are bundled.</p>",
        "id": 192136427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585421323
    },
    {
        "content": "<p>Did you see the definition of functor in mathlib?</p>",
        "id": 192136442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585421363
    },
    {
        "content": "<p>An exemple : </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">V_obj</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">ζ</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">ζ</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n<span class=\"c1\">--- if i use ζ : R ⟶ A i can&#39;t use ζ x = 0 ! Is it normal ?</span>\n</pre></div>",
        "id": 192136453,
        "sender_full_name": "orlando",
        "timestamp": 1585421384
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">functor</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">obj</span>       <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">→</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map</span>       <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">((</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"err\">⟶</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">Y</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">map_id&#39;</span>   <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">𝟙</span> <span class=\"o\">(</span><span class=\"n\">obj</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_comp&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">⟶</span> <span class=\"n\">Z</span><span class=\"o\">),</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">≫</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"err\">≫</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>The last two structure fields -- <code>map_id'</code> and <code>map_comp'</code> have <code>. obviously</code> at the end, which means \"if the user does not prove them, try proving them yourself with the <code>obviously</code> tactic\".</p>",
        "id": 192136511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585421435
    },
    {
        "content": "<p>I think it is possible to somehow train <code>obviously</code> to be able to solve these things.</p>",
        "id": 192136519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585421462
    },
    {
        "content": "<p>Hum the definition of functor yes but i don't understand  <code> obiously </code> In my case of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\">\\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span>, without map_id' this doesn't works !</p>",
        "id": 192136528,
        "sender_full_name": "orlando",
        "timestamp": 1585421486
    },
    {
        "content": "<p>I don't understand it either. <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> where do we learn about how to train <code>obviously</code> to solve these cases of <code>map_id'</code> and <code>map_comp'</code>? Does it work like that?</p>",
        "id": 192136580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585421524
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Ideal.20lemma/near/192136519\" title=\"#narrow/stream/116395-maths/topic/Ideal.20lemma/near/192136519\">said</a>:</p>\n<blockquote>\n<p>I think it is possible to somehow train <code>obviously</code> to be able to solve these things.</p>\n</blockquote>\n<p>The training is mostly done by proving the right simp-lemmas before you define the functor.</p>",
        "id": 192136610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585421604
    },
    {
        "content": "<p>Currently <code>obviously</code> cannot do <code>rw</code></p>",
        "id": 192136656,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585421646
    },
    {
        "content": "<p>So if your proof really needs to do a <code>rw</code>, then you have to do it your self.</p>",
        "id": 192136659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585421664
    },
    {
        "content": "<p>But if the proof is something like <code>intros, ext, simp, assumption</code>, then <code>obviously</code> will fill in the proof for you.</p>",
        "id": 192136670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585421693
    },
    {
        "content": "<p>So we need to make it a confluent rewrite situation</p>",
        "id": 192136675,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585421725
    },
    {
        "content": "<p>I mean, you already did the work manually by proving <code>ideal_id</code> and <code>ideal_comp</code>, it just wasn't quite the right work</p>",
        "id": 192136815,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585421886
    },
    {
        "content": "<p>So we should be tagging these with <code>simp</code> and also proving something about \\Omega_map \\b1 or something.</p>",
        "id": 192136831,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585421934
    },
    {
        "content": "<p>The rewrites in <code>Ω</code> are definitional equalities anyways. You could omit them and write the whole proof in term mode and it would be very short.</p>",
        "id": 192136899,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585422013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"270476\">@orlando</span> you should try and make the following proofs work:</p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">map_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">funext</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n   <span class=\"n\">simp</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rintros</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">funext</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 192136901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585422014
    },
    {
        "content": "<p>Like, shorter than those proofs.</p>",
        "id": 192136912,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585422038
    },
    {
        "content": "<p>(Although I guess the point is that you won't have to write those proofs because of <code>obviously</code>)</p>",
        "id": 192136920,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585422061
    },
    {
        "content": "<p>See how far they get, and then if they don't finish the job, look at where they are stuck and add some simp lemmas to unstick them. Or is Reid saying that there's another way?</p>",
        "id": 192136921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585422061
    },
    {
        "content": "<p>Isn't <code>map_id' := \\lam A, funext (\\lam I, ideal.ideal_id A I)</code></p>",
        "id": 192136930,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585422083
    },
    {
        "content": "<p><code>attribute [simp] ideal.ideal_id</code> I already got</p>",
        "id": 192136935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585422113
    },
    {
        "content": "<p>but now I have</p>\n<div class=\"codehilite\"><pre><span></span>a : x_1 ∈ Ω_map X X (𝟙 X) x\n⊢ x_1 ∈ x\n</pre></div>",
        "id": 192136980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585422135
    },
    {
        "content": "<p>It's better to \"inline\" <code>Ω_obj</code> <code>Ω_map</code> anyways</p>",
        "id": 192136995,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585422164
    },
    {
        "content": "<p>i.e.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"err\">⥤</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"o\">,</span>\n   <span class=\"bp\">...</span>\n</pre></div>",
        "id": 192137017,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585422196
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>I can't get rid of A or psi</p>",
        "id": 192137030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585422239
    },
    {
        "content": "<p>Yeah, Lean is sometimes dumb <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span></p>",
        "id": 192137074,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585422259
    },
    {
        "content": "<p>The rw  <code>   rw category_theory.types_id, </code> in <code> map_id ' </code> is not necesarry</p>",
        "id": 192137093,
        "sender_full_name": "orlando",
        "timestamp": 1585422288
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">ideal_id</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">Omega</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map_id</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"mi\">𝟙</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">J</span> <span class=\"bp\">=</span> <span class=\"n\">J</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"err\">⥤</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rintros</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types_comp</span><span class=\"o\">,</span>\n    <span class=\"n\">funext</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">ideal_comp</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">I</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span> <span class=\"n\">Omega</span>\n</pre></div>\n\n\n<p>I now just get a (deterministic) timeout :-/</p>",
        "id": 192137261,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585422544
    },
    {
        "content": "<p>(having removed <code>map_id'</code>)</p>",
        "id": 192137263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585422556
    },
    {
        "content": "<p>wait what? <code>map_id' := begin intros, ext, simp end</code> works fine, but <code>obviously</code> just gets stuck in a loop :-(</p>",
        "id": 192137349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585422682
    },
    {
        "content": "<p>No, I tell a lie!</p>",
        "id": 192137399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585422734
    },
    {
        "content": "<p>I had assumed that this was going to end badly, but in fact it compiles fine!</p>\n<div class=\"codehilite\"><pre><span></span>elaboration of Ω took 75.4s\n</pre></div>",
        "id": 192137438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585422835
    },
    {
        "content": "<p>Scott -- is this a new record?</p>",
        "id": 192137482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585422851
    },
    {
        "content": "<p>can you have <code>tidy</code> print a trace, then?</p>",
        "id": 192137490,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585422873
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>elaboration: tactic execution took 69.8s\nnum. allocated objects:  1711\nnum. allocated closures: 1503\nnum. allocated big nums: 4\n69848ms   100.0%   tactic.replacer\n69848ms   100.0%   interaction_monad_orelse\n69848ms   100.0%   tactic.istep\n69848ms   100.0%   tactic.chain_core\n69848ms   100.0%   tactic.chain_many\n69848ms   100.0%   tactic.tidy.core\n69848ms   100.0%   tactic.step\n69848ms   100.0%   tactic.chain_many._main._lambda_1\n69848ms   100.0%   _interaction._lambda_2\n69848ms   100.0%   tactic.istep._lambda_1\n69848ms   100.0%   tactic.tidy\n69848ms   100.0%   tactic.first\n69848ms   100.0%   tactic.chain_single\n69848ms   100.0%   tactic.chain\n69848ms   100.0%   _interaction\n69848ms   100.0%   tactic.replacer_core\n69848ms   100.0%   scope_trace\n69848ms   100.0%   tactic.replacer_core._main._lambda_4\n69800ms    99.9%   tactic.tidy.default_tactics._lambda_3\n68698ms    98.4%   tactic.to_expr\n68698ms    98.4%   tactic.tidy.default_tactics._lambda_4\n68698ms    98.4%   tactic.interactive.exact\n 1014ms     1.5%   tactic.tidy.default_tactics._lambda_8\n 1013ms     1.5%   tactic.interactive.dsimp\n...\n</pre></div>",
        "id": 192137495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585422885
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Ideal.20lemma/near/192137490\" title=\"#narrow/stream/116395-maths/topic/Ideal.20lemma/near/192137490\">said</a>:</p>\n<blockquote>\n<p>can you have <code>tidy</code> print a trace, then?</p>\n</blockquote>\n<p>just a minute</p>",
        "id": 192137521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585422943
    },
    {
        "content": "<p>Oh I just changed <code>obviously</code> to <code>tidy</code> assuming that this was what you meant, and it's no different. How do I get tidy to print a trace?</p>",
        "id": 192137585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585423010
    },
    {
        "content": "<p><code>tidy?</code> I think?</p>",
        "id": 192137592,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585423024
    },
    {
        "content": "<p>just a minute</p>",
        "id": 192137600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585423041
    },
    {
        "content": "<p>or slightly longer in this case</p>",
        "id": 192137682,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585423109
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>Try this: intros X, dsimp at *, ext1, dsimp at *, simp at *\n</pre></div>",
        "id": 192137689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585423125
    },
    {
        "content": "<p>sometimes it is better to write the 1-line term mode proof and move on</p>",
        "id": 192137714,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585423190
    },
    {
        "content": "<p>Oh but that compiles in a reasonable time -- elaboration takes 1 second</p>",
        "id": 192137718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585423194
    },
    {
        "content": "<p>I guess it could be trying other things that fail</p>",
        "id": 192137765,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585423224
    },
    {
        "content": "<p>So every time there's an <code>obviously</code> used in the library, we might be losing up to a minute of compile time when we could just go through them all and replace them with the one-liners which obviously finds, thus speeding up compile time but making the code look uglier.</p>",
        "id": 192137778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585423259
    },
    {
        "content": "<p>(<a href=\"https://github.com/leanprover-community/mathlib/pull/1204\" title=\"https://github.com/leanprover-community/mathlib/pull/1204\">https://github.com/leanprover-community/mathlib/pull/1204</a>)</p>",
        "id": 192137794,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1585423304
    },
    {
        "content": "<p>It might be fun to count how many times there is a transparent call to <code>obviously</code> in the library. Probably a lot.</p>",
        "id": 192137851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585423364
    },
    {
        "content": "<p><code>obviously</code> should learn to tidy up after itself: it found <code>intros X, dsimp at *, ext1, dsimp at *, simp at *</code> but <code>intros X, ext1, simp</code> also works and is in some sense a strict subset of the proof originally found.</p>",
        "id": 192137853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585423364
    },
    {
        "content": "<p>Yes I remember some discussion about this sort of thing when we were doing the T5000 challenge or whatever it was called. But I didn't understand things so well then -- I was more concerned with learning how to do mathematics in Lean at that time rather than learning how it all actually worked.</p>",
        "id": 192137938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585423498
    },
    {
        "content": "<p>Hey many thanks for that link Rob -- there's a link to the T50000 thread and for me it's well worth a re-read. In particular Floris' comment to me near the top used to say (to me) \"blah blah blah, it's like proving 1000+1000=2000 by rfl\" which showed me what the problem basically was, but now I can understand what the problem actually was. At the time \\ggg terrified me.</p>",
        "id": 192138010,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585423654
    },
    {
        "content": "<p>I read slowly, </p>\n<p>So Kevin this work ! </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">ideal_id</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">ideal_comp</span>\n<span class=\"kn\">namespace</span> <span class=\"n\">Omega</span>\n<span class=\"n\">def</span> <span class=\"err\">Ω</span><span class=\"bp\">_</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"o\">):=</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span>\n<span class=\"n\">def</span> <span class=\"err\">Ω</span><span class=\"bp\">_</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span><span class=\"n\">Ring</span><span class=\"o\">)(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">Ω</span><span class=\"bp\">_</span><span class=\"n\">obj</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"err\">Ω</span><span class=\"bp\">_</span><span class=\"n\">obj</span> <span class=\"n\">B</span><span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">I</span><span class=\"o\">,</span><span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">ψ</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"n\">def</span> <span class=\"err\">Ω</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"err\">⥤</span> <span class=\"n\">Set</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">ψ</span><span class=\"o\">,</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">ψ</span><span class=\"o\">,</span>\n\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span> <span class=\"n\">Omega</span>\n</pre></div>",
        "id": 192138822,
        "sender_full_name": "orlando",
        "timestamp": 1585425090
    },
    {
        "content": "<p>it's your code !</p>",
        "id": 192138823,
        "sender_full_name": "orlando",
        "timestamp": 1585425102
    },
    {
        "content": "<p>You can delete <code>\\Omega_obj</code> and <code>Omega_map</code> -- Reid says it's better to just define them directly in the structure (like you are doing now)</p>",
        "id": 192138892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585425233
    },
    {
        "content": "<p>yes !</p>",
        "id": 192138931,
        "sender_full_name": "orlando",
        "timestamp": 1585425255
    },
    {
        "content": "<p>Does your code now take 10 minutes to compile though? :-/</p>",
        "id": 192139875,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585426797
    },
    {
        "content": "<p>20 seconde with simp and   1 seconde with the first code !</p>",
        "id": 192140401,
        "sender_full_name": "orlando",
        "timestamp": 1585427543
    },
    {
        "content": "<p>I will make a natural transformation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Ω</mi><mo>→</mo><mi mathvariant=\"normal\">Ω</mi></mrow><annotation encoding=\"application/x-tex\"> \\Omega \\to \\Omega</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Ω</span></span></span></span> given by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>I</mi><mo>↦</mo><msup><mi>I</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">I  \\mapsto I^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69433em;vertical-align:-0.011em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">↦</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> , that's fun  <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 192140475,
        "sender_full_name": "orlando",
        "timestamp": 1585427680
    },
    {
        "content": "<p>Well you can either prove the missing lemmas with <code>tidy</code> and then click on \"try this\" (and then it will be quick again) or you can finish this file now, compile it into an olean file, and then import it :-)</p>",
        "id": 192140834,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585428303
    },
    {
        "content": "<p>hum what is olean ?</p>",
        "id": 192140888,
        "sender_full_name": "orlando",
        "timestamp": 1585428384
    },
    {
        "content": "<p>perhaps i don't understand \"compile\"</p>",
        "id": 192140892,
        "sender_full_name": "orlando",
        "timestamp": 1585428403
    },
    {
        "content": "<p>Are you making these files in a lean project? I hope so. You can just stop editing this file now and start a new file and import this file</p>",
        "id": 192140902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585428446
    },
    {
        "content": "<p>Because this file takes 20 seconds to compile now (the orange bars) but if you import it then it will just compile once and then never compile again until you restart VS code or lean</p>",
        "id": 192140957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585428510
    },
    {
        "content": "<p>Yes yes in a lean project, ok</p>",
        "id": 192140964,
        "sender_full_name": "orlando",
        "timestamp": 1585428525
    },
    {
        "content": "<p>i understand</p>",
        "id": 192140967,
        "sender_full_name": "orlando",
        "timestamp": 1585428534
    },
    {
        "content": "<p>Or alternatively you can write <code>lean --make path/to/file.lean</code> and then you will have a compiled olean file on your computer</p>",
        "id": 192140990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585428567
    },
    {
        "content": "<p>And then even after you restart lean and Vs code it will still be quick because the olean file stores the 20 seconds</p>",
        "id": 192141041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585428607
    },
    {
        "content": "<p>The reason you don't get orange bars for one hour when you start to use mathlib is because all the oleans are on your computer thanks to leanproject</p>",
        "id": 192141051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585428642
    },
    {
        "content": "<p>ohhh ok !!!</p>",
        "id": 192141064,
        "sender_full_name": "orlando",
        "timestamp": 1585428686
    },
    {
        "content": "<p>But in your project there are probably no olean files</p>",
        "id": 192141072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585428709
    },
    {
        "content": "<p>So every time you open the project it has to compile all the files you made which you use or import</p>",
        "id": 192141116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585428742
    },
    {
        "content": "<p>And if one of them takes 20 seconds then this is a pain</p>",
        "id": 192141130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585428801
    },
    {
        "content": "<p>hum i do lean --make but i don't see olean file !</p>",
        "id": 192141248,
        "sender_full_name": "orlando",
        "timestamp": 1585429071
    },
    {
        "content": "<p>Do lean --make src/file.lean and it will make file.olean in src</p>",
        "id": 192141546,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585429548
    },
    {
        "content": "<p>is <code>leanpkg build</code> no longer a cool thing to do?</p>",
        "id": 192141615,
        "sender_full_name": "Reid Barton",
        "timestamp": 1585429678
    },
    {
        "content": "<p>Leanproject build ftw</p>",
        "id": 192144348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585434183
    },
    {
        "content": "<p>Hello,  just a question <br>\n0/  Omega is the previous files. <br>\n1/ In square_ideal_naturality : is it possible to simplify the construction without using the line <code> have H : (Ω.map ψ ∘ square_ideal_app A) I = ideal.map ψ (I * I) </code> and do the <code>rw H </code> directly ?  </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">Omega</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span><span class=\"n\">Ring</span><span class=\"o\">)</span>\n<span class=\"n\">def</span> <span class=\"n\">square_ideal_app</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">ideal</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">I</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n<span class=\"n\">def</span> <span class=\"n\">square_ideal_naturality</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span><span class=\"n\">Ring</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span>  <span class=\"o\">:</span>\n    <span class=\"err\">Ω</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">ψ</span> <span class=\"err\">≫</span> <span class=\"n\">square_ideal_app</span> <span class=\"n\">B</span> <span class=\"bp\">=</span> <span class=\"n\">square_ideal_app</span> <span class=\"n\">A</span> <span class=\"err\">≫</span> <span class=\"err\">Ω</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">ψ</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types_comp</span><span class=\"o\">,</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types_comp</span><span class=\"o\">],</span>\n    <span class=\"n\">funext</span>  <span class=\"n\">I</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">Ω</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">ψ</span> <span class=\"err\">∘</span> <span class=\"n\">square_ideal_app</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">ψ</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"bp\">*</span> <span class=\"n\">I</span><span class=\"o\">),</span>\n      <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"n\">ψ</span> <span class=\"n\">I</span> <span class=\"n\">I</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n<span class=\"n\">def</span> <span class=\"n\">square_ideal</span> <span class=\"o\">:</span>  <span class=\"err\">Ω</span>  <span class=\"err\">⟶</span> <span class=\"err\">Ω</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n    <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"o\">,</span> <span class=\"n\">square_ideal_app</span> <span class=\"n\">A</span><span class=\"o\">,</span>\n    <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">square_ideal_naturality</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span> <span class=\"n\">Omega_2</span>\n</pre></div>",
        "id": 192223860,
        "sender_full_name": "orlando",
        "timestamp": 1585556126
    },
    {
        "content": "<p><code>rw [show _ = _, from rfl]</code></p>",
        "id": 192224693,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585556705
    },
    {
        "content": "<p>Ok, thx Kenny,</p>",
        "id": 192225486,
        "sender_full_name": "orlando",
        "timestamp": 1585557236
    },
    {
        "content": "<p>Hello,</p>\n<p>Another problem with Ideal <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span>   </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideal_operations</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Ring</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Set</span><span class=\"bp\">`</span> <span class=\"o\">:=</span>  <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">set_image_S_subset_set_image_span_S</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">S</span> <span class=\"err\">⊆</span>  <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_subset</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map_span_eq_span_image</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">):</span>\n    <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span_mono</span> <span class=\"o\">(</span><span class=\"n\">set_image_S_subset_set_image_span_S</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">f</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">ccl</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n        <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"c1\">---- HERE !!!!</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span_le</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ccl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193238019,
        "sender_full_name": "orlando",
        "timestamp": 1586288639
    },
    {
        "content": "<p>Here is the proof for <code>submonoid</code>s:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">closure_preimage_le</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">closure_le</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">mem_coe</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">mem_comap</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">subset_closure</span> <span class=\"n\">hx</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">map_mclosure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_antisymm</span>\n  <span class=\"o\">(</span><span class=\"n\">map_le_iff_le_comap</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">closure_mono</span> <span class=\"err\">$</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">subset_preimage_image</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">closure_preimage_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">closure_le</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_subset</span> <span class=\"bp\">_</span> <span class=\"n\">subset_closure</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 193238577,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586288912
    },
    {
        "content": "<p>I think that something similar can be done for ideals as well.</p>",
        "id": 193238671,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586288962
    },
    {
        "content": "<p>ok  i thinck <code> (closure_le.2 $ set.image_subset _ subset_closure) </code>  is the same than my  <code> exact ideal.span_mono (set_image_S_subset_set_image_span_S A B f S), </code> </p>\n<p>So if i understand, i have to deal with <code> comap </code>  ...  ahah Kenny play also with comap at the beginning of the topic  <a href=\"#narrow/stream/116395-maths/topic/Ideal.20lemma/near/192114748\" title=\"#narrow/stream/116395-maths/topic/Ideal.20lemma/near/192114748\">here</a></p>",
        "id": 193239543,
        "sender_full_name": "orlando",
        "timestamp": 1586289364
    },
    {
        "content": "<p><code>comap</code> is the preimage</p>",
        "id": 193239634,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586289421
    },
    {
        "content": "<p><code>map</code> = image = pushforward, <code>comap</code> = pullback = preimage</p>",
        "id": 193241873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586290597
    },
    {
        "content": "<p>Ok perhaps it's not the shortest proof <span aria-label=\"joy\" class=\"emoji emoji-1f602\" role=\"img\" title=\"joy\">:joy:</span></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideal_operations</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Ring</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">CommRing</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Set</span><span class=\"bp\">`</span> <span class=\"o\">:=</span>  <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">set_image_S_subset_set_image_span_S</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">S</span> <span class=\"err\">⊆</span>  <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_subset</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map_span_eq_span_image</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">):</span>\n    <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"c1\">-- unfold ideal.map,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span_mono</span> <span class=\"o\">(</span><span class=\"n\">set_image_S_subset_set_image_span_S</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">f</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">ccl3</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">S</span><span class=\"o\">)),</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">comap</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"err\">⊆</span> <span class=\"err\">⇑</span><span class=\"n\">f</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">S</span><span class=\"o\">)),</span>\n            <span class=\"k\">have</span> <span class=\"n\">T&#39;</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">S</span> <span class=\"err\">⊆</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"err\">⇑</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">S</span><span class=\"o\">)),</span>\n                <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span><span class=\"o\">,</span>\n            <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_subset_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">T&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">T</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ccl2</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">S</span> <span class=\"bp\">≤</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">S</span><span class=\"o\">)),</span>\n           <span class=\"n\">apply</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span_le</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ccl3</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">ccl</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">≤</span>  <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n        <span class=\"n\">apply</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map_le_iff_le_comap</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ccl2</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ccl</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193242963,
        "sender_full_name": "orlando",
        "timestamp": 1586291229
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">set_image_S_subset_set_image_span_S</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">S</span> <span class=\"err\">⊆</span>  <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_subset</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map_span_eq_span_image</span><span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span> <span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">):</span>\n    <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"n\">f</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span_mono</span> <span class=\"o\">(</span><span class=\"n\">set_image_S_subset_set_image_span_S</span> <span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"n\">f</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">map_le_iff_le_comap</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span_le</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_subset_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span><span class=\"o\">))),</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 193244039,
        "sender_full_name": "orlando",
        "timestamp": 1586291746
    },
    {
        "content": "<p>shorter <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 193244114,
        "sender_full_name": "orlando",
        "timestamp": 1586291765
    },
    {
        "content": "<p>I wonder what is the general statement here. Probably it should involve four <code>galois_insertion</code>s (two closure/coe, image/preimage, and map/comap).</p>",
        "id": 193244938,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586292254
    },
    {
        "content": "<p>Hey @orlando it's great that your proofs got shorter -- now can you write them in term mode? That way they will compile quicker</p>",
        "id": 193246609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586292873
    },
    {
        "content": "<p>I'm not sure this is true.</p>",
        "id": 193246689,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586292908
    },
    {
        "content": "<p>Opening up tactic mode has a cost, no?</p>",
        "id": 193246705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586292917
    },
    {
        "content": "<p>For short proofs this should be true but for longer proofs elaborating parts one after another may help Lean. At least I remember some proofs that were failing in term mode because Lean wanted to elaborate arguments left to right. Rewriting using <code>refine; exact</code> made them work. I suspect that it's possible to make an example where \"fails\" will be replaced by \"slow\".</p>",
        "id": 193247166,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586293178
    },
    {
        "content": "<p>without Begin end ??? Kevin ?</p>",
        "id": 193247185,
        "sender_full_name": "orlando",
        "timestamp": 1586293193
    },
    {
        "content": "<p>BTW, you can use <code>#print</code> to see the term mode proof generated by your tactic mode proof.</p>",
        "id": 193247930,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586293500
    },
    {
        "content": "<p>It can be much longer than the tactic proof.</p>",
        "id": 193248009,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1586293528
    },
    {
        "content": "<p>hum another problem i don't know how to do this without the description in term of linear combinaison <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">CommRing</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideal_operations</span>\n<span class=\"n\">local</span> <span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">Ring</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">CommRing</span><span class=\"bp\">.</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">inverse_image_ideal</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">Ring</span><span class=\"o\">)(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"err\">⟶</span> <span class=\"n\">B</span><span class=\"o\">)(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">preimage</span> <span class=\"n\">f</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>  <span class=\"c1\">-- double inclusion</span>\n        <span class=\"n\">rw</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span_le</span><span class=\"o\">,</span>   <span class=\"c1\">-- span S \\leq I ↔  S ≤ I</span>\n        <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">preimage_mono</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span><span class=\"o\">,</span>\n        <span class=\"n\">sorry</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span>\n</pre></div>",
        "id": 193467032,
        "sender_full_name": "orlando",
        "timestamp": 1586446496
    },
    {
        "content": "<p>Is this true?</p>",
        "id": 193468172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586447012
    },
    {
        "content": "<p>What about <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>=</mo><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">A=\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>=</mo><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">B=\\mathbb{C}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">C</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mo stretchy=\"false\">{</mo><mi>π</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">S=\\{\\pi\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">π</span><span class=\"mclose\">}</span></span></span></span>?</p>",
        "id": 193468273,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586447045
    },
    {
        "content": "<p>You have access to \"proof using linear combination\" with things like <code>submodule.span_induction</code></p>",
        "id": 193468627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586447205
    },
    {
        "content": "<p><span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span> <span aria-label=\"face palm\" class=\"emoji emoji-1f926\" role=\"img\" title=\"face palm\">:face_palm:</span></p>",
        "id": 193471124,
        "sender_full_name": "orlando",
        "timestamp": 1586448188
    }
]