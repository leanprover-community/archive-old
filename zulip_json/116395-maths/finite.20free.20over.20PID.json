[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> your PR about submodules of finite free modules over a PID came just at the right time. We need that kind of stuff (over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\Z</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span>) for the liquid project. How hard do you think it is to lean the fact that over a PID <code>exists_finite_basis</code> is equivalent to <code>fg + torsion_free</code>?</p>",
        "id": 229794344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615438850
    },
    {
        "content": "<p>Hmm, it wouldn't surprise me if it isn't too hard actually, depending on how much we already have about f.g. for modules (rather than vector spaces). The direction <code>∃ b, is_basis b → fg ∧ torsion_free</code> should be no problem, the other way might be a bit trickier but you can probably go a long way with induction on the generating set? I'll have to see the state of the library to be sure.</p>",
        "id": 229839026,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615465135
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> Note that there isn't a definition of <code>torsion_free</code> yet, afaik</p>",
        "id": 229842069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615466778
    },
    {
        "content": "<p>Isn't <a href=\"https://leanprover-community.github.io/mathlib_docs/find/no_zero_smul_divisors\">docs#no_zero_smul_divisors</a> equivalent to torsion-free over a domain?</p>",
        "id": 229842235,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615466875
    },
    {
        "content": "<p>Ooh, probably yes</p>",
        "id": 229842523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615467017
    },
    {
        "content": "<p>Still, it would be worth it to have the \"real\" torsion-free definition as well, and prove the equivalence (presumably as a set of typeclass instances?)</p>",
        "id": 229842681,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1615467120
    },
    {
        "content": "<p>we probably can't have instances in every direction, but yes we should certainly have the definition.</p>",
        "id": 229842857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615467208
    },
    {
        "content": "<p>Isn't the proof of this quite messy involving explicit matrix calculations and grotty normal forms?</p>",
        "id": 229985725,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1615532637
    },
    {
        "content": "<p>yes, I think it's somewhat ugly</p>",
        "id": 230660170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615972956
    },
    {
        "content": "<p>For our application in LTE we might just want to construct a basis of a quotient directly, although that will require doing the grotty normal forms manually in that specific case</p>",
        "id": 230660297,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1615973037
    }
]