[
    {
        "content": "<p>I don't think this is anywhere in the library (note this is inspired by the complex inner product issue), but I want to add for a bunch of the algebraic structures (monoid,  group, ring, field) that the fixed points of an endomorphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span></span></span></span>, form a sub-x (where x is monoid, group, ring, field resp). Here's the one for monoid:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- The set of fixed points of an endomorphism `f` of a monoid `M` is a submonoid of `M`. -/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">is_add_submonoid_fixed</span> <span class=\"s2\">&quot;The set of fixed points of an endomorphism `f` of an `add_monoid` `M` is a `add_submonoid` of `M`. &quot;</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">is_submonoid_fixed</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_submonoid</span> <span class=\"o\">(</span><span class=\"n\">fixed_points</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">exact</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"n\">f</span><span class=\"o\">},</span>\n  <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a_def</span> <span class=\"n\">b_def</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">a_def</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">b_def</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"bp\">*</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>It is in the file group_theory/submonoid.lean and is right under this lemma (on which the formatting was based):</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\">- The union of an indexed, directed, nonempty set of submonoids of a monoid `M` is a submonoid</span>\n<span class=\"cm\">    of `M`. -/</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span> <span class=\"n\">is_add_submonoid_Union_of_directed</span> <span class=\"s2\">&quot;The union of an indexed, directed, nonempty set of `add_submonoid`s of an `add_monoid` `M` is an `add_submonoid` of `M`. &quot;</span><span class=\"o\">]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">is_submonoid_Union_of_directed</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hι</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_submonoid</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)]</span>\n  <span class=\"o\">(</span><span class=\"n\">directed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"n\">j</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_submonoid</span> <span class=\"o\">(</span><span class=\"err\">⋃</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>Is this all good?</p>",
        "id": 198895434,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590588497
    },
    {
        "content": "<p>I think <code>is_submonoid</code> is deprecated</p>",
        "id": 198895767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590588622
    },
    {
        "content": "<p>you want to use <code>submonoid</code></p>",
        "id": 198895904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590588681
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">submonoid</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">fixed_points</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">order</span>\n\n<span class=\"n\">def</span> <span class=\"n\">submonoid_fixed</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→*</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">submonoid</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"n\">fixed_points</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">map_one</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">a_def</span> <span class=\"n\">b_def</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">monoid_hom</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">a_def</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"n\">at</span> <span class=\"n\">b_def</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"bp\">*</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>Same proof, different implementation</p>",
        "id": 198896285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590588826
    },
    {
        "content": "<p>Someone better than me at automation will probably be able to make <code>simp</code> do the tactic proof all in one go</p>",
        "id": 198896934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590589030
    },
    {
        "content": "<p>Cool, thanks. I was wondering how to state it in the bundled case.</p>",
        "id": 198897101,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590589084
    },
    {
        "content": "<p>Note that it's a definition, not a theorem, because of the <code>carrier</code></p>",
        "id": 198897156,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590589102
    },
    {
        "content": "<p>Yeah, that's why I couldn't figure out the correct statement at first, but it makes sense when you show it like that.</p>",
        "id": 198897585,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590589237
    },
    {
        "content": "<p>For subgroups, subrings, and subfields, it's still all unbundled, right?</p>",
        "id": 198897625,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590589256
    },
    {
        "content": "<p>I think subgroups are bundled now. For the others, if you could bundle them first then that would be great :-) Bundling PR's are really good fun. Both Jason KY and Amelia Livingston (UG Imperial mathematicians) had early PR's which were just bundling unbundled structures and they both learnt a lot.</p>",
        "id": 198897836,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590589330
    },
    {
        "content": "<p>I'll be bundling normal subgroups in June and then attempting to refactor quotient groups based on them</p>",
        "id": 198897947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590589376
    },
    {
        "content": "<p>Looking at the <code>group_theory/subgroups.lean</code>, I don't see any bundled subgroup. Is there anywhere else worth looking? On a different branch?</p>",
        "id": 198898033,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590589416
    },
    {
        "content": "<p>For some reason Jason (aka Kexing Yang) made a new file bundled_subgroup and the PR police let him do it</p>",
        "id": 198898193,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590589454
    },
    {
        "content": "<p>I see that. I guess to avoid breaking all the dependencies? How should one go about bundling? Replace the unbundled definition, redo all the theorems, and fix all broken dependencies?</p>",
        "id": 198898401,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590589525
    },
    {
        "content": "<p>Is there a good way to find all broken dependencies?</p>",
        "id": 198898433,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590589535
    },
    {
        "content": "<p>Removing the unbundled definition is the hard part</p>",
        "id": 198898448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590589539
    },
    {
        "content": "<p>I do not encourage learner undergraduates to do that. Basically what is going on is that for months people were saying \"uuh, the correct thing to do is to bundle submodules, subgroups, group homs, ring homs etc, all at once, and to remove the unbundled ones, and it will be a monster PR\" and of course nobody would do it</p>",
        "id": 198898663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590589611
    },
    {
        "content": "<p>What would you recommend doing?</p>",
        "id": 198898756,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590589659
    },
    {
        "content": "<p>but then I began to need it, so I started encouraging people to do the bundling but leave the unbundling alone, because then there will be a far more inefficient process involving much smaller PR's but at least I'd be able to use bundled group homs for the stuff I wanted to do with them</p>",
        "id": 198898760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590589662
    },
    {
        "content": "<p>Well, first talk to <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> and <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> because they know the state of the art better than me. The question is what is next on the list of unbundled things which should be bundled, and the next question is whether bundling them is a good idea (for which I vote yes, but it would be interesting to have a poll)</p>",
        "id": 198899021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590589769
    },
    {
        "content": "<p>PS I think you're also running into <a href=\"https://github.com/leanprover-community/lean/issues/197\">lean#197</a> , your goals shouldn't mention set.mem and this is hurting automation I think</p>",
        "id": 198900086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1590590165
    },
    {
        "content": "<p>Question 1) What are the advantages of bundling that makes it worthwhile do all the work to change to library?<br>\nQuestion 2) How does one track all the dependencies without opening every file in Mathlib?</p>",
        "id": 198902443,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590591033
    },
    {
        "content": "<p>Without bundling, you need to find type classes all the time. And this didn't always work as expected.</p>",
        "id": 198903072,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1590591254
    },
    {
        "content": "<p>We have <code>meq_locus</code></p>",
        "id": 198911782,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590594612
    },
    {
        "content": "<p>So what's the deal with fixing bundling? Is that something worth working on? Right now we have bundled and unbundled for both monoids and subgroups. Is the goal to kill off the unbundled?</p>",
        "id": 198914637,
        "sender_full_name": "Keefer Rowan",
        "timestamp": 1590595891
    },
    {
        "content": "<p>As far as I understand, the goal is to kill unbundled homs and substructures.</p>",
        "id": 198917496,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590597161
    },
    {
        "content": "<p>Because in many cases we can construct bundled objects right away instead of relying on classes. At the same time <code>[monoid M]</code> etc are not deprecated because we don't want to write <code>nat.monoid --&gt; M</code></p>",
        "id": 198917732,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1590597275
    }
]