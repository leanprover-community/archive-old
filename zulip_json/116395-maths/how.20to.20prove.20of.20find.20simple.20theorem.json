[
    {
        "content": "<p>Hi everyone, I am a new user, my question is maybe too simple. Please make it lear for me.<br>\nCan you tell me how to find in the library or prove the simple theorem like:</p>\n<p>theorem ttt1 (n m: ℕ ) : n &lt;= m → n &lt; m ∨ n = m :=<br>\nsorry</p>",
        "id": 131837673,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1533923678
    },
    {
        "content": "<p>the <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/naming.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/naming.md\">naming convention</a> would call that <code>lt_or_eq_of_le</code></p>",
        "id": 131837777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1533923775
    },
    {
        "content": "<p>Thank you, but can you tell me how can find the stuffs like this one?</p>\n<p>Is there a “search” command to find a theorem in the library?<br>\nI am working in some proof, sometime, it looks me quite a lot of time to find simple theorem to use.<br>\nFor example, I need this one:</p>\n<p>theorem tq (a b: ℕ ): ¬ a ≤ b ↔ b &lt; a :=<br>\nsorry</p>\n<p>Is there a way that I can find or prove it easily? I think it should be easy.<br>\nThank you,<br>\nTruong</p>",
        "id": 131849186,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1533938659
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">find</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">ring</span>\n\n<span class=\"n\">run_cmd</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">skip</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"bp\">¬</span> <span class=\"bp\">_</span> <span class=\"bp\">≤</span> <span class=\"bp\">_</span> <span class=\"bp\">↔</span> <span class=\"bp\">_</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">_</span>\n<span class=\"c1\">-- not_le: ∀ {α : Type u} [_inst_1 : linear_order α] {a b : α}, ¬a ≤ b ↔ b &lt; a</span>\n</pre></div>",
        "id": 131849401,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1533939018
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"125610\">@Truong Nguyen</span> Mario already explained how to find stuff like this -- learn the naming convention :-) Follow the link!</p>",
        "id": 131849545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1533939268
    },
    {
        "content": "<p>Oh, thank you</p>",
        "id": 131932809,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1533953252
    },
    {
        "content": "<p>Dear Kenny Lau,<br>\nCan you give some instruction for how to use the \"#find\" command?</p>",
        "id": 133143211,
        "sender_full_name": "Truong Nguyen",
        "timestamp": 1535743244
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">find</span>\n\n<span class=\"n\">def</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span> <span class=\"c1\">-- or anything -- for some reason you can&#39;t use #find immediately</span>\n\n<span class=\"bp\">#</span><span class=\"n\">find</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span> <span class=\"bp\">≤</span> <span class=\"bp\">_</span> <span class=\"bp\">+</span> <span class=\"bp\">_</span>\n</pre></div>",
        "id": 133147051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535747715
    }
]