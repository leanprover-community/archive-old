[
    {
        "content": "<p>Now that <code>is_scalar_tower</code> is there could it be a good idea to remove <code>module.restrict_scalars</code> from mathlib by substituting it with <code>is_scalar_tower</code>? In abstract lemmas it should be no problem to require two additional instances (one of <code>semimodule</code> and one of <code>is_scalar_tower</code>) and in practical cases, it should be always possible to define such instances: I mean manually defining restrict_scalars and proving there is an instance of <code>is_scalar_tower</code></p>",
        "id": 207076901,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1597593395
    },
    {
        "content": "<p>That sounds like a good idea! I can't think of any disadvantages really: adding one pair of <code>semimodule</code> and <code>is_scalar_tower</code> instances per definition seems less painful than writing out <code>restrict_scalars R A M</code> potentially many times.</p>",
        "id": 207077253,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1597594080
    },
    {
        "content": "<p>Yes I completely agree! I believe <code>restrict_scalars</code> is very painful</p>",
        "id": 207077304,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1597594133
    },
    {
        "content": "<p>In any case I uploaded a compromise of the two things in the derivations PR, and I'd do it as a refactor in another PR in case</p>",
        "id": 207077320,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1597594195
    },
    {
        "content": "<p>Wouldn't the construction of the restriction of scalars <em>functor</em> be more annoying without <code>restrict_scalars</code>?</p>",
        "id": 207077877,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597595121
    },
    {
        "content": "<p>In this case we could probably leave just the definition of it and the bare minimum needed for the functor</p>",
        "id": 207078050,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1597595402
    },
    {
        "content": "<p>I don't have any actual opinions on this, but, playing devil's advocate, it might be worthwhile to have some consistency in the API for left/right adjoins in algebra. So while in this case the restriction of scalars functor is just the identity on the underlying type, this will not be the case in all situations. On the other hand, maybe it makes sense to make/use analogues of <code>is_scalar_tower</code> for <em>all</em> forgetful functors.</p>",
        "id": 207078578,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1597596174
    },
    {
        "content": "<p>No! <code>module.restrict_scalars</code> is how you make the instance <code>module R M</code> given <code>algebra R S</code> and <code>module S M</code>, and <code>is_scalar_tower R S M</code> is how you prove theorems.</p>",
        "id": 207186426,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597692278
    },
    {
        "content": "<p>cf. the same situation with <code>algebra.comap</code> and <code>is_algebra_tower</code> (now <code>is_scalar_tower</code>)</p>",
        "id": 207186470,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597692301
    },
    {
        "content": "<p>Sorry can you elaborate further? I am not sure I understand what you support. The point I was trying to make above is that until now, <code>is_scalar_tower</code> was not there and <code>restrict_scalars</code> was used for everything so also \"to prove theorems\" as you say. The idea is to leave just the definition of restrict scalars so to use it to help making instances but removing any lemma that has to do with it and using <code>is_scalar_tower</code> instead</p>",
        "id": 207200803,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1597700824
    },
    {
        "content": "<p>I mean similar to what I did in the first draft of derivations here in Zulip</p>",
        "id": 207200917,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1597700900
    },
    {
        "content": "<p>I think you both agree with each other (-;</p>",
        "id": 207220661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1597722050
    },
    {
        "content": "<p>Yes this what I also thought but I was confused from the \"No!\"</p>",
        "id": 207237077,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1597740795
    },
    {
        "content": "<p>I was saying \"No!\" to \"remove <code>module.restrict_scalars</code> from mathlib\"</p>",
        "id": 207238073,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597741598
    },
    {
        "content": "<p>I guess I was taking it out of context</p>",
        "id": 207238082,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597741609
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/semimodule.restrict_scalars\">docs#semimodule.restrict_scalars</a> because I'm lazy and someone else might be too</p>",
        "id": 207238552,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1597742020
    }
]