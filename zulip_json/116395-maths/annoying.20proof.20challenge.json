[
    {
        "content": "<p>Is there a nice way to prove this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</pre></div>",
        "id": 150698181,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1543700988
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_group</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">add_eq_zero_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_inj</span> <span class=\"err\">$</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">H</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span>\n</pre></div>",
        "id": 150698441,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543701492
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span></p>",
        "id": 150698444,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543701497
    },
    {
        "content": "<p>Didn't your mother tell you never to end a sentence with a <code>▸</code>?</p>",
        "id": 150698524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543701698
    },
    {
        "content": "<p>Maybe it's some super duper eta reduction.</p>",
        "id": 150698586,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1543701818
    },
    {
        "content": "<p>oops it's supposed to end in <code>rfl</code></p>",
        "id": 150698638,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543701888
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_group</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">add_eq_zero_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_inj</span> <span class=\"err\">$</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">H</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span>\n</pre></div>",
        "id": 150698639,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543701896
    },
    {
        "content": "<p>oh that works better :-)</p>",
        "id": 150698647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543701917
    },
    {
        "content": "<p>What does the equation compiler actually <em>do</em> to decide that it can ignore the <code>none</code> cases? I mean, what does it try?</p>",
        "id": 150698701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543702008
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">ordered_group</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">test</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">with_bot</span> <span class=\"bp\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"bp\">→</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inr</span> <span class=\"n\">rfl</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"n\">or</span><span class=\"bp\">.</span><span class=\"n\">inl</span> <span class=\"err\">$</span> <span class=\"o\">(</span><span class=\"n\">add_eq_zero_iff</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">succ_inj</span> <span class=\"err\">$</span> <span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">some</span><span class=\"bp\">.</span><span class=\"n\">inj</span> <span class=\"n\">H</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">test</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">theorem test : ∀ {a b : with_bot ℕ}, a + b = 1 → a = 0 ∨ b = 0 :=</span>\n<span class=\"cm\">λ {a b : with_bot ℕ} (a_1 : a + b = 1),</span>\n<span class=\"cm\">  option.cases_on a</span>\n<span class=\"cm\">    (λ (a : none + b = 1),</span>\n<span class=\"cm\">       option.cases_on b</span>\n<span class=\"cm\">         (λ (a : none + none = 1),</span>\n<span class=\"cm\">            eq.dcases_on a (λ (a_1 : some 1 = none), option.no_confusion a_1) (eq.refl 1) (heq.refl a))</span>\n<span class=\"cm\">         (λ (b : ℕ) (a : none + some b = 1),</span>\n<span class=\"cm\">            eq.dcases_on a (λ (a_1 : some 1 = none), option.no_confusion a_1) (eq.refl 1) (heq.refl a))</span>\n<span class=\"cm\">         a)</span>\n<span class=\"cm\">    (λ (a : ℕ) (a_1 : some a + b = 1),</span>\n<span class=\"cm\">       option.cases_on b</span>\n<span class=\"cm\">         (λ (a_1 : some a + none = 1),</span>\n<span class=\"cm\">            eq.dcases_on a_1 (λ (a_2 : some 1 = none), option.no_confusion a_2) (eq.refl 1) (heq.refl a_1))</span>\n<span class=\"cm\">         (λ (b : ℕ) (a_1 : some a + some b = 1),</span>\n<span class=\"cm\">            nat.cases_on b (λ (a_1 : some a + some 0 = 1), id_rhs (some a = 0 ∨ some 0 = 0) (or.inr rfl))</span>\n<span class=\"cm\">              (λ (b : ℕ) (a_1 : some a + some (nat.succ b) = 1),</span>\n<span class=\"cm\">                 id_rhs (some a = 0 ∨ some (b + 1) = 0)</span>\n<span class=\"cm\">                   (or.inl (eq.symm ((add_eq_zero_iff.mp (nat.succ_inj (option.some.inj a_1))).left) ▸ rfl)))</span>\n<span class=\"cm\">              a_1)</span>\n<span class=\"cm\">         a_1)</span>\n<span class=\"cm\">    a_1</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 150698712,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543702059
    },
    {
        "content": "<p>it does <code>option.no_confusion</code></p>",
        "id": 150698713,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1543702069
    },
    {
        "content": "<p><code>option.no_confusion</code> is such a great name for a function. I might get it on a t-shirt.</p>",
        "id": 150698763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1543702172
    }
]