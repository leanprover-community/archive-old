[
    {
        "content": "<p>Currently the type of <code>finset.sup</code> is </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">semilattice_sup_bot</span> <span class=\"n\">α</span><span class=\"o\">],</span> <span class=\"n\">finset</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">α</span>\n</pre></div>\n\n\n<p>I think it would make more sense to return a <code>β</code>. There's no function that does this at the moment, and it would be useful.</p>",
        "id": 169221397,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561725987
    },
    {
        "content": "<p>I guess the <code>β</code> is not unique though. In my application the function is injective.</p>",
        "id": 169221520,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561726158
    },
    {
        "content": "<p>The ordering on <code>\\a</code> might not be total, in which there is no \"corresponding\" value of <code>\\b</code> to return, if I understand what you want to do</p>",
        "id": 169221617,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561726265
    },
    {
        "content": "<p>You could write a trunc of a value that maps to the sup</p>",
        "id": 169221649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561726314
    },
    {
        "content": "<p>and in the case where the function is injective you can get the value out</p>",
        "id": 169221696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561726337
    },
    {
        "content": "<p>What you're looking for is usually called \"argmax\"</p>",
        "id": 169221702,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561726342
    },
    {
        "content": "<p>Okay, so I'm going to have to write this <code>argmax</code> function. We're kind of inconsistent at the moment with how we handle empty lists on the variants of <code>max</code> <code>list.maximum, finset.sup, finset.max</code>. What should argmax do?</p>",
        "id": 169222461,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1561726990
    },
    {
        "content": "<p>If it has a complex type like I suggested, then it's basically a proof procedure, so I think it should be fine to assume the input is nonempty</p>",
        "id": 169222655,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561727148
    },
    {
        "content": "<p>We could also have a more weakly typed version that has some default behavior in that case</p>",
        "id": 169222792,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561727248
    },
    {
        "content": "<p>just so you can write <code>argmax_(x \\in S) f x</code> as a term in reasonable conditions</p>",
        "id": 169222861,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561727285
    }
]