[
    {
        "content": "<p>I'm trying to move the sensitivity formalization to mathlib and need to locate one or two lemmas.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_ite&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"n\">a</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"err\">∩</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>feels like it belongs in <code>algebra.big_operators</code> but also needs a <code>data.fintype</code> import. Also, I'm not at all sure that this is the ideal way to state this. Opinions?</p>",
        "id": 178107936,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571063392
    },
    {
        "content": "<p>Why do you need the fintype? Can't we filter <code>s</code> by <code>P</code>?</p>",
        "id": 178108100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571063516
    },
    {
        "content": "<p>This statement doesn't really seem to know whether it wants to treat <code>P</code> as a set or as a predicate.</p>",
        "id": 178108376,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571063701
    },
    {
        "content": "<p>I think this is so easy to prove with <code>sum_subset</code> that it might not be worth stating.</p>",
        "id": 178108536,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1571063800
    },
    {
        "content": "<p>I would prefer <code>if P a then f a else 0</code> in the statement of this theorem, with another lemma expressing <code>a * boole p = (if p then a else 0)</code></p>",
        "id": 178108550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571063815
    },
    {
        "content": "<p>FYI: there is already <a href=\"https://github.com/leanprover-community/mathlib/blob/494132e1ebdba300a43d66e19ddc5b724fd20129/src/algebra/big_operators.lean#L453\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/494132e1ebdba300a43d66e19ddc5b724fd20129/src/algebra/big_operators.lean#L453\">https://github.com/leanprover-community/mathlib/blob/494132e1ebdba300a43d66e19ddc5b724fd20129/src/algebra/big_operators.lean#L453</a></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">sum_mul_boole</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"mi\">1</span> <span class=\"mi\">0</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 178109163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571064301
    },
    {
        "content": "<p>It isn't a direct application of <code>sum_subset</code>, is it? <code>f</code> changes. <code>sum_mul_boole</code> might be helpful.</p>",
        "id": 178109224,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571064361
    },
    {
        "content": "<p>Well, it's a bit restrictive. I would want <code>sum_mul_boole</code> to use a more general predicate than <code>a = _</code></p>",
        "id": 178109333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571064433
    },
    {
        "content": "<p>Aha. Here's the missing lemma. With this, <code>finset.sum_ite'</code> is unnecessary.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">mul_ite</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"mi\">1</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"k\">if</span> <span class=\"n\">P</span> <span class=\"k\">then</span> <span class=\"n\">a</span> <span class=\"k\">else</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 178112587,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571066640
    },
    {
        "content": "<p>Does this exist already/where does it belong?</p>",
        "id": 178112671,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571066678
    },
    {
        "content": "<p>An issue with another lemma from the sensitivity project.</p>\n<p>This has come up a few times (<a href=\"#narrow/stream/113488-general/topic/fintype.2Ecard\" title=\"#narrow/stream/113488-general/topic/fintype.2Ecard\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/fintype.2Ecard</a>, <a href=\"#narrow/stream/116395-maths/topic/.60decidable_mem_of_fintype.60.20problem\" title=\"#narrow/stream/116395-maths/topic/.60decidable_mem_of_fintype.60.20problem\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/.60decidable_mem_of_fintype.60.20problem</a>): there's a type class loop. With <code>A : Type, fintype A, s : set A</code>, a search for <code>fintype ↥s</code> loops. <code>subtype.fintype</code> directs it to find <code>decidable_pred s</code>, and then <code>decidable_mem_of_fintype</code> directs it to find <code>fintype ↥s</code>.</p>",
        "id": 178114163,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571067791
    },
    {
        "content": "<p>That one drove me crazy last summer.</p>",
        "id": 178116384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571069462
    },
    {
        "content": "<p>About <code>mul_ite</code>: <code>library_search</code> doesn't find it before timing out.</p>",
        "id": 178116533,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571069575
    },
    {
        "content": "<p>I think <code>decidable_mem_of_fintype</code> should go</p>",
        "id": 178125392,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571076958
    },
    {
        "content": "<blockquote>\n<p>I think <code>decidable_mem_of_fintype</code> should go</p>\n</blockquote>\n<p>It does seem like the less essential of the two, but it doesn't look inherently bad.</p>",
        "id": 178129246,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571079818
    },
    {
        "content": "<p>My reasoning is that it is a rather expensive way to decide a predicate, so it should be opt in</p>",
        "id": 178129533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571080053
    },
    {
        "content": "<p>it can of course stick around as a def</p>",
        "id": 178129553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1571080079
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Thanks a lot for your efforts in \"archiving\" this project.</p>",
        "id": 178186309,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571141465
    }
]