[
    {
        "content": "<p>I'm trying to catch up with this thread. I am confused by this doesn't work:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">tactic</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basis</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">direct_sum_module</span>\n\n<span class=\"kn\">variable</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"c1\">--noncomputable instance foo : module R (direct_sum ι (λ _:ι, R)) := by apply_instance</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">direct_sum</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">direct_sum</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>If I comment out the instance, which apparently is already there, it works.</p>",
        "id": 199358168,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591011135
    },
    {
        "content": "<p>I didn’t know I could fix this error by writing “noncomputable” before example</p>",
        "id": 199359297,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591012061
    },
    {
        "content": "<p>You still get the error with the smul, but if I comment out the instance it fixes it</p>",
        "id": 199359916,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591012572
    },
    {
        "content": "<p>OK so I'm catching up with the issues raised in this thread. <code>direct_sum</code> is for an arbitrary direct sum of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-modules (and in particular is a dependent finsupp). This specific case of free <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>-modules is somehow easier because it's not dependent, but there is a cost to introducing a new definition like <code>free</code>: Kenny's suggestion of just using <code>ι →₀ R</code> has advantages and disadvantages. On the other hand the concept of a free module is so ubiquitous that probably one has to make the definition. </p>\n<p>The second point is that I suspect there's no coercion from <code>finset</code> to <code>Type</code> :-( </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_coe_to_sort</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n\n\n<p>There's a coercion from <code>finset X</code> to <code>set X</code> and then from there to <code>Type*</code>, but I don't seem to be able to get there directly.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Should there be a coercion from <code>finset X</code> to <code>Type</code> directly?</p>",
        "id": 199363492,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591015175
    },
    {
        "content": "<p>We could define <code>free</code> in terms of <code>ι →₀ R</code></p>",
        "id": 199363632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591015275
    },
    {
        "content": "<p>I often write <code>{ x // x \\in s }</code>. But of course that's a very roundabout way to make a Type out of a finset</p>",
        "id": 199363665,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591015309
    },
    {
        "content": "<p>Kevin, how should I think about the \"cost\" of introducing a new definition? Is the point that this is just one more thing that needs to be unfolded, so it introduces some fixed amount of overhead for <code>simp</code> etc in all downstream code?</p>",
        "id": 199366220,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591016940
    },
    {
        "content": "<p>I guess another question I had was whether all the free constructions in algebra.* should be special cases of a general definition (involving adjoints to forgetful functors), and their concrete descriptions (e.g. free module = direct sum or finitely supported functions or whatever) should be lemmas rather than definitions</p>",
        "id": 199366747,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591017255
    },
    {
        "content": "<p>Why is this conversation in \"new members\" rather than maths? It seems to be far beyond the newbie  question about proving <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>P</mi><mo>∧</mo><mi>Q</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>Q</mi><mo>∧</mo><mi>P</mi></mrow><annotation encoding=\"application/x-tex\">P \\wedge Q \\implies Q \\wedge P</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟹</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">Q</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span></span></span></span>.</p>",
        "id": 199371940,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591019683
    },
    {
        "content": "<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/f.2Eg.2E.20free.20modules\">#new members &gt; f.g. free modules</a> by <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span></p>",
        "id": 199372241,
        "sender_full_name": "Notification Bot",
        "timestamp": 1591019875
    },
    {
        "content": "<p>Another thing about introducing a terminology for <code>ι →₀ R</code> is that Lean will then have to be told that it's e.g. a module.</p>",
        "id": 199372420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591019966
    },
    {
        "content": "<p>I think we already have a characteristic predicate for \"M is the free R-module on a set S\", only we call it instead \"S is an R-basis of the R-module M\".</p>",
        "id": 199372799,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591020200
    },
    {
        "content": "<p>@_<strong>Notification Bot|100006</strong> <a href=\"#narrow/stream/116395-maths/topic/f.2Eg.2E.20free.20modules/near/199372241\">said</a>:</p>\n<blockquote>\n<p>This topic was moved here from <a class=\"stream-topic\" data-stream-id=\"113489\" href=\"/#narrow/stream/113489-new-members/topic/f.2Eg.2E.20free.20modules\">#new members &gt; f.g. free modules</a> by <span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span></p>\n</blockquote>\n<p>hey we can do that??!!</p>",
        "id": 199372826,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591020220
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/f.2Eg.2E.20free.20modules/near/199372799\">said</a>:</p>\n<blockquote>\n<p>I think we already have a characteristic predicate for \"M is the free R-module on a set S\", only we call it instead \"S is an R-basis of the R-module M\".</p>\n</blockquote>\n<p>My understanding of the original question is that basically it is how to prove that if M is a finitely-generated (so in particular there's some <code>S : finset M</code> which is known to span) then it admits a surjection from an f.g. free module. One issue is that S here has type <code>finset M</code>, so you do need to build some kind of free module with something resembling S as a basis, and then it will all be easy. The question is how to build this free module in an idiomatic way.</p>",
        "id": 199373175,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591020395
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> yes, I agree with that. but then when you use the \"object\" that is the free module on <code>ι</code>, it should be convenient to get your hands on:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">std_basis</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"mi\">1</span> <span class=\"c1\">-- this is the std basis if we are working with direct_sum ι (λ _:ι, R)) as the free R-module on ι</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_basis_std_basis</span> <span class=\"o\">:</span> <span class=\"n\">is_basis</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>(I know that lemma is not so hard to prove, but the proof doesn't seem to be as easy as <code>simp</code> given the lemma of the same name in linear_algebra/basis.lean.)</p>",
        "id": 199373552,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591020610
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/f142b4208bee350d00931b9fa38069cc740c83ef/src/linear_algebra/finsupp_vector_space.lean#L52-L54\">https://github.com/leanprover-community/mathlib/blob/f142b4208bee350d00931b9fa38069cc740c83ef/src/linear_algebra/finsupp_vector_space.lean#L52-L54</a></p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">is_basis_single</span> <span class=\"o\">{</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">is_basis</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_basis</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ix</span> <span class=\"o\">:</span> <span class=\"err\">Σ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">φ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">single</span> <span class=\"n\">ix</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">ix</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">ix</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 199373841,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1591020778
    },
    {
        "content": "<p>Doesn't seem like that lemma should need <code>[field K]</code>, right?</p>",
        "id": 199374369,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591021032
    },
    {
        "content": "<p>Right, so while the characterization of being a free module is more or less under control, the construction of free modules is lacking, at a minimum, a coherent API. \"The free R-module on a set\" is far too important a notion to give the cryptic notation <code>ι →₀ R</code>, in my opinion.</p>",
        "id": 199374762,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591021254
    },
    {
        "content": "<p>I don't suppose the parser could handle the notation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⨁</mo><mi>ι</mi></msub><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">\\bigoplus_\\iota R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0497100000000001em;vertical-align:-0.29971000000000003em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⨁</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.0016819999999999613em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">ι</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span></span></span></span>, assuming we could type that in Unicode easily?</p>",
        "id": 199375639,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591021758
    },
    {
        "content": "<p>or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mrow><mo>⊕</mo><mi>ι</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">R^{\\oplus \\iota}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊕</span><span class=\"mord mathdefault mtight\">ι</span></span></span></span></span></span></span></span></span></span></span></span> I suppose</p>",
        "id": 199375684,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591021788
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246647\">@Sam Lichtenstein</span> That first suggestion shouldn't be a problem</p>",
        "id": 199389033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591028194
    },
    {
        "content": "<p>It would basically be</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">\\</span><span class=\"n\">bigoplus</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">direct_sum</span>\n</code></pre></div>",
        "id": 199389092,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591028230
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246647\">@Sam Lichtenstein</span> Concerning your question about the cost of adding a <code>def</code>.</p>\n<ol>\n<li>\n<p>You certainly don't have to worry about what <code>lean</code> the program thinks about a new def. It sees thousands of them every day, and it won't loose any sleep over seeing yet another one.</p>\n</li>\n<li>\n<p>You might worry about the 'social contract' that comes with add a <code>def</code> to mathlib. Namely, that you should also provide a (bare minimum) API. You'll have to sit down, and think of all the stupid, silly, trivial statements that a mathematician would <em>not</em> write down in a textbook chapter on that new definition. And then state and prove all those stupid, silly, trivial lemmas.</p>\n</li>\n</ol>\n<p>As Reid said above: <code>free</code> is certainly so fundamental that it deserves being a definition.</p>",
        "id": 199389538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591028433
    },
    {
        "content": "<p>apparently \\bigoplus is not in the unicode character set. what about ∐ (as distinct from the infix operator ⨿ for binary coproducts)</p>",
        "id": 199390838,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591029056
    },
    {
        "content": "<p>Hmmm... maybe we should just implement LaTeX mode for lean</p>",
        "id": 199391423,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591029305
    },
    {
        "content": "<p><span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span> burn unicode to the ground <span aria-label=\"fire\" class=\"emoji emoji-1f525\" role=\"img\" title=\"fire\">:fire:</span></p>",
        "id": 199391468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591029326
    },
    {
        "content": "<p>Is Tom Hales's CNL already usable is input language for lean?</p>",
        "id": 199391510,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591029353
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"116045\">@Jesse Michael Han</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> do you have any news from the front?</p>",
        "id": 199391588,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591029369
    },
    {
        "content": "<p>I found ⨁ U+2A01 N-ARY CIRCLED PLUS OPERATOR (not to be confused with ⊕ U+2295 CIRCLED PLUS)</p>",
        "id": 199394089,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591030681
    },
    {
        "content": "<p>In case of emergency there's also ⴲ U+2D32 TIFINAGH LETTER YABH</p>",
        "id": 199394186,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591030717
    },
    {
        "content": "<p>That's <code>\\slightlybiggerthannormaloplus</code></p>",
        "id": 199394194,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591030721
    },
    {
        "content": "<p>ah I see --- it lives in 'Supplemental Mathematical Operators\"</p>",
        "id": 199396441,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591031798
    },
    {
        "content": "<p>⨁ U+2A01 N-ARY CIRCLED PLUS OPERATOR <a href=\"https://github.com/leanprover/vscode-lean/blob/master/translations.json#L781\">should be <code>\\O+</code></a> in vscode-lean.</p>",
        "id": 199398459,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1591032696
    },
    {
        "content": "<p>OK i took a stab at coming up with an API for free modules. It's mostly just specializing Kenny's direct_sum API to the non-dependent case. (I am sure there are things I could improve upon stylistically...)</p>\n<p>However, the \"punchline\" lemma <code>free.surj_of_fg</code> still seems surprisingly hard to prove, because of the difficulties Kevin noted regarding coercion between various subset types. I have an outline of the proof at the bottom below. Unfortunately, at the key moment, the <code>transitivity</code> tactic fails to work for reasons that are mysterious to me.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n       <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">direct_sum_module</span>\n       <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basis</span>\n       <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">finsupp_vector_space</span>\n       <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">noetherian</span>\n       <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n       <span class=\"n\">tactic</span>\n\n<span class=\"kn\">section</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"n\">def</span> <span class=\"n\">free</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">direct_sum</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">u₁</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">500</span> <span class=\"n\">ι</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">free</span> <span class=\"n\">R</span> <span class=\"n\">ι</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span>  <span class=\"o\">:=</span> <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n<span class=\"kn\">instance</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">ι</span><span class=\"o\">}</span>\n\n<span class=\"kn\">abbreviation</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">to_module</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n   <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">))</span>  <span class=\"bp\">→</span>  <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n   <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">to_module</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span>\n<span class=\"kn\">abbreviation</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">component</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n     <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">component</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">component</span> <span class=\"n\">i</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">component</span> <span class=\"n\">i</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">component</span> <span class=\"n\">i</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">component</span> <span class=\"n\">i</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">abbreviation</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">lof</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">lof</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">to_finsupp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">support</span> <span class=\"o\">:=</span> <span class=\"n\">dfinsupp</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">to_fun</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">component</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">mem_support_to_fun</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">finish</span><span class=\"o\">}}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">of_finsupp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">(</span>\n    <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"err\">•</span> <span class=\"bp\">@</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"n\">i</span>\n<span class=\"o\">)</span>\n\n<span class=\"c1\">-- kronecker delta on ι with values in R</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">apply_eq_component</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">to_finsupp</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">component</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">comp_std_basis</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">component</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">δ</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n <span class=\"k\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span><span class=\"o\">,</span> <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">component</span><span class=\"bp\">.</span><span class=\"n\">lof_self</span><span class=\"o\">]},</span>\n<span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">component</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_rec_constant</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">component</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">component</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span><span class=\"o\">,</span>\n <span class=\"n\">replace</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">lof</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">lemma</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">equiv_finsupp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_fun</span>  <span class=\"o\">:=</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">to_finsupp</span><span class=\"o\">,</span>\n    <span class=\"n\">add</span>     <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">}},</span>\n    <span class=\"n\">smul</span>    <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">}},</span>\n    <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">of_finsupp</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span>  <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">of_finsupp</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_sum</span> <span class=\"o\">(</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">component</span> <span class=\"n\">i</span><span class=\"o\">)],</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">comp_std_basis</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n                   <span class=\"n\">mul_boole</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_ite_eq&#39;</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">],</span>\n        <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n        <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">component</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">of_finsupp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">tauto</span><span class=\"o\">},</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">of_finsupp</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_sum</span> <span class=\"o\">(</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">component</span> <span class=\"n\">i</span><span class=\"o\">)],</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_boole</span><span class=\"o\">,</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_ite_eq&#39;</span><span class=\"o\">,</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n            <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">comp_std_basis</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span>\n            <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">],</span>\n        <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">finish</span> <span class=\"kn\">end</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_basis_std_basis</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_basis</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">is_basis</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"c1\">-- linear independence</span>\n<span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">linear_independent_iff&#39;</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">comp_std_basis</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_sum</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">},</span>\n<span class=\"c1\">-- span</span>\n<span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Inf_eq_top</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n<span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span>\n        <span class=\"o\">{</span><span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">fconstructor</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n<span class=\"n\">apply</span> <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">finish</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">Hi</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">lof</span> <span class=\"n\">i</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">tauto</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_one</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">],</span>\n    <span class=\"k\">from</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">smul_mem</span> <span class=\"n\">r</span> <span class=\"n\">Hi</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span><span class=\"o\">}}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">lmap_of_elt</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">):</span>\n     <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"kn\">end</span>\n<span class=\"n\">def</span> <span class=\"n\">lmap_of_elt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">):</span> <span class=\"n\">R</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n    <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">r</span><span class=\"err\">•</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lmap_of_elt</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"n\">R</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">elt_of_lmap_of_elt_of_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">lmap_of_elt</span> <span class=\"n\">R</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">lmap_of_elt</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span> <span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lmap_of_elts</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">to_module</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">lmap_of_elt</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">lmap_of_elts</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"n\">M</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">lmap_of_elts</span> <span class=\"n\">R</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">needs_a_name</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">lmap_of_elts</span> <span class=\"n\">R</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">lmap_of_elts</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">to_module_lof</span><span class=\"o\">],</span>\n<span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">elt_of_lmap_of_elt_of_one</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span>\n<span class=\"c1\">-- set_option trace.simplify.rewrite true</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">surj_of_fg</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fg</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">],</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">surjective</span> <span class=\"n\">π</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">hfg</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">ι₀</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"err\">↑</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">ι</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"err\">↥</span><span class=\"n\">ι₀</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">fconstructor</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">},</span>\n<span class=\"k\">let</span> <span class=\"n\">π₀</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"n\">lmap_of_elts</span> <span class=\"n\">R</span> <span class=\"n\">π₀</span><span class=\"o\">,</span>\n<span class=\"n\">fconstructor</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">use</span> <span class=\"n\">π</span><span class=\"o\">},</span>\n<span class=\"o\">{</span><span class=\"k\">let</span> <span class=\"n\">πι</span> <span class=\"o\">:=</span> <span class=\"n\">π</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n<span class=\"k\">have</span> <span class=\"n\">Rπι_eq_πRι</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">@</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span_image</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span><span class=\"o\">)</span> <span class=\"n\">π</span><span class=\"o\">,</span>\n<span class=\"n\">replace</span>  <span class=\"n\">Rπι_eq_πRι</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">πι</span> <span class=\"bp\">=</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">π</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span> <span class=\"k\">by</span>\n    <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_basis_std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">Rπι_eq_πRι</span><span class=\"o\">},</span>\n<span class=\"n\">intro</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">tauto</span><span class=\"o\">},</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hs</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">mem_span</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">πι</span><span class=\"o\">),</span>\n <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">πι</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"n\">s_le_πι</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">πι</span> <span class=\"o\">:=</span>\n <span class=\"k\">begin</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">πι</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">tauto</span><span class=\"o\">},</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i₀</span> <span class=\"n\">hi₀</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">fconstructor</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">i₀</span><span class=\"o\">,</span> <span class=\"n\">tauto</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">πi</span> <span class=\"o\">:=</span> <span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">)),</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">i₀</span> <span class=\"bp\">=</span> <span class=\"n\">πi</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"n\">replace</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_eq_range</span> <span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span><span class=\"o\">),</span>\n\n        <span class=\"k\">have</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span><span class=\"o\">)),</span> <span class=\"n\">π</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">πi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n\n        <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">))),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">))),</span> <span class=\"n\">π</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">πi</span><span class=\"o\">),</span>\n            <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">},</span>\n        <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">i</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">πi</span> <span class=\"bp\">=</span> <span class=\"n\">π₀</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n        <span class=\"k\">begin</span>\n            <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">needs_a_name</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"n\">M</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">,</span>\n        <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">π₀</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n <span class=\"kn\">end</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">πι</span> <span class=\"o\">:=</span>\n <span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"c1\">-- transitivity, -- does not work for some reason</span>\n    <span class=\"n\">sorry</span>\n <span class=\"kn\">end</span><span class=\"o\">,</span>\n <span class=\"c1\">-- should be easy to finish from here</span>\n <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199447862,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591069680
    },
    {
        "content": "<p>I got the proof of the last lemma to work by manually doing the <code>transitivity</code>. I also put all the <code>free.*</code> lemmas/definitions inside a <code>namespace</code>, which I assume is the right thing to do. See below for the version with these corrections. The proof of <code>surj_of_fg</code> is still way too painful for what it is, though, so I welcome suggestions if anyone has some.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n       <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">direct_sum_module</span>\n       <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basis</span>\n       <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">finsupp_vector_space</span>\n       <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">noetherian</span>\n       <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n       <span class=\"n\">tactic</span>\n\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"n\">def</span> <span class=\"n\">free</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ι</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">][</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">direct_sum</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">free</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">u₁</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">ι</span><span class=\"o\">]</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">500</span> <span class=\"n\">ι</span><span class=\"o\">:</span><span class=\"mi\">25</span> <span class=\"bp\">`</span><span class=\"o\">]</span> <span class=\"bp\">`</span><span class=\"o\">:</span><span class=\"mi\">0</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">free</span> <span class=\"n\">R</span> <span class=\"n\">ι</span>\n\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span>  <span class=\"o\">:=</span> <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">add_comm_group</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">ι</span><span class=\"o\">}</span>\n\n<span class=\"kn\">abbreviation</span> <span class=\"n\">to_module</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n   <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">))</span>  <span class=\"bp\">→</span>  <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n   <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">to_module</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"n\">M</span>\n<span class=\"kn\">abbreviation</span> <span class=\"n\">component</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n     <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">component</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">ext</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">component</span> <span class=\"n\">i</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">component</span> <span class=\"n\">i</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ext_iff</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"bp\">↔</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">component</span> <span class=\"n\">i</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">component</span> <span class=\"n\">i</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">abbreviation</span> <span class=\"n\">lof</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">R</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"n\">def</span> <span class=\"n\">std_basis</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">lof</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">to_finsupp</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">support</span> <span class=\"o\">:=</span> <span class=\"n\">dfinsupp</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">to_fun</span>  <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">component</span> <span class=\"n\">i</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">mem_support_to_fun</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">finish</span><span class=\"o\">}}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">of_finsupp</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">(</span>\n    <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"err\">•</span> <span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"n\">i</span>\n<span class=\"o\">)</span>\n\n<span class=\"c1\">-- kronecker delta on ι with values in R</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">ite</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"mi\">0</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">apply_eq_component</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"n\">to_finsupp</span> <span class=\"n\">x</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">component</span> <span class=\"n\">i</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">comp_std_basis</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n <span class=\"o\">(</span><span class=\"n\">component</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">std_basis</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">δ</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:=</span>\n <span class=\"k\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">std_basis</span><span class=\"o\">,</span> <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">component</span><span class=\"bp\">.</span><span class=\"n\">lof_self</span><span class=\"o\">]},</span>\n<span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"n\">H</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">component</span><span class=\"bp\">.</span><span class=\"n\">of</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">eq_rec_constant</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">component</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">component</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">std_basis</span><span class=\"o\">,</span>\n <span class=\"n\">replace</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">lof</span> <span class=\"n\">R</span> <span class=\"n\">ι</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">lof</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">this</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">lemma</span> <span class=\"n\">equiv_finsupp</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"err\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">to_fun</span>  <span class=\"o\">:=</span> <span class=\"n\">to_finsupp</span><span class=\"o\">,</span>\n    <span class=\"n\">add</span>     <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">}},</span>\n    <span class=\"n\">smul</span>    <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"bp\">_</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">all_goals</span> <span class=\"o\">{</span><span class=\"n\">refl</span><span class=\"o\">}},</span>\n    <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">of_finsupp</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span>  <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">ext_iff</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">of_finsupp</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_sum</span> <span class=\"o\">(</span><span class=\"n\">component</span> <span class=\"n\">i</span><span class=\"o\">)],</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">comp_std_basis</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n                   <span class=\"n\">mul_boole</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_ite_eq&#39;</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">],</span>\n        <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">tauto</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intro</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">ext</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n        <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">component</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">of_finsupp</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">tauto</span><span class=\"o\">},</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">of_finsupp</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_sum</span> <span class=\"o\">(</span><span class=\"n\">component</span> <span class=\"n\">i</span><span class=\"o\">)],</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_boole</span><span class=\"o\">,</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_ite_eq&#39;</span><span class=\"o\">,</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n            <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_support_iff</span><span class=\"o\">,</span> <span class=\"n\">comp_std_basis</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span>\n            <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">],</span>\n        <span class=\"n\">split_ifs</span><span class=\"bp\">;</span> <span class=\"n\">finish</span> <span class=\"kn\">end</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_basis_std_basis</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">is_basis</span> <span class=\"n\">ι</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">std_basis</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">is_basis</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"c1\">-- linear independence</span>\n<span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">linear_independent_iff&#39;</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">ext_iff</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"n\">a</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_zero</span><span class=\"o\">,</span> <span class=\"n\">comp_std_basis</span><span class=\"o\">,</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_sum</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">},</span>\n<span class=\"c1\">-- span</span>\n<span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">Inf_eq_top</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_set_of_eq</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span>\n<span class=\"n\">ext1</span><span class=\"o\">,</span> <span class=\"n\">split</span><span class=\"o\">,</span> <span class=\"n\">tauto</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"n\">replace</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">std_basis</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">a</span> <span class=\"o\">:=</span> <span class=\"k\">by</span>\n        <span class=\"o\">{</span><span class=\"n\">intro</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">fconstructor</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">},</span>\n<span class=\"n\">apply</span> <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">finish</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">Hi</span> <span class=\"o\">:=</span> <span class=\"n\">H</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">lof</span> <span class=\"n\">i</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">tauto</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_one</span> <span class=\"n\">r</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">],</span>\n    <span class=\"k\">from</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">smul_mem</span> <span class=\"n\">r</span> <span class=\"n\">Hi</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span><span class=\"n\">intros</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">add_mem</span><span class=\"o\">}}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">lmap_of_elt</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">):</span>\n     <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">c</span> <span class=\"err\">•</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">r</span> <span class=\"err\">•</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">intros</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"n\">smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_smul</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span> <span class=\"kn\">end</span>\n<span class=\"n\">def</span> <span class=\"n\">lmap_of_elt</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">):</span> <span class=\"n\">R</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n    <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">r</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">r</span><span class=\"err\">•</span><span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">add_smul</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">lmap_of_elt</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"n\">R</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">elt_of_lmap_of_elt_of_one</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">lmap_of_elt</span> <span class=\"n\">R</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span> <span class=\"n\">rw</span> <span class=\"n\">lmap_of_elt</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span><span class=\"o\">]</span> <span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lmap_of_elts</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"n\">to_module</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"n\">lmap_of_elt</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">))</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">needs_a_name</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"o\">(</span><span class=\"n\">lmap_of_elts</span> <span class=\"n\">R</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">std_basis</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"n\">i</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">lmap_of_elts</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">std_basis</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">to_module_lof</span><span class=\"o\">],</span>\n<span class=\"k\">from</span> <span class=\"o\">(</span><span class=\"n\">elt_of_lmap_of_elt_of_one</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">M</span><span class=\"o\">)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">}</span>\n<span class=\"c1\">-- set_option trace.simplify.rewrite true</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">surj_of_fg</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fg</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">],</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">surjective</span> <span class=\"n\">π</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">hfg</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">ι₀</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"err\">↑</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">ι</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"err\">↥</span><span class=\"n\">ι₀</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">fconstructor</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">},</span>\n<span class=\"k\">let</span> <span class=\"n\">π₀</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"n\">lmap_of_elts</span> <span class=\"n\">R</span> <span class=\"n\">π₀</span><span class=\"o\">,</span>\n<span class=\"n\">fconstructor</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">use</span> <span class=\"n\">π</span><span class=\"o\">},</span>\n<span class=\"o\">{</span><span class=\"k\">let</span> <span class=\"n\">πι</span> <span class=\"o\">:=</span> <span class=\"n\">π</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n <span class=\"k\">have</span> <span class=\"n\">πι&#39;</span> <span class=\"o\">:</span>\n     <span class=\"n\">πι</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">))),</span> <span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n    <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_eq_range</span> <span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">)),</span>\n<span class=\"k\">have</span> <span class=\"n\">Rπι_eq_πRι</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">@</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span_image</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">std_basis</span><span class=\"o\">)</span> <span class=\"n\">π</span><span class=\"o\">,</span>\n<span class=\"n\">replace</span>  <span class=\"n\">Rπι_eq_πRι</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">πι</span> <span class=\"bp\">=</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">π</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span> <span class=\"k\">by</span>\n    <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_basis_std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">Rπι_eq_πRι</span><span class=\"o\">},</span>\n<span class=\"n\">intro</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">tauto</span><span class=\"o\">},</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hs</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">mem_span</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">πι</span><span class=\"o\">),</span>\n <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">πι</span><span class=\"o\">,</span>\n <span class=\"n\">replace</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"err\">∈</span> <span class=\"n\">πι</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">πι</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">tauto</span><span class=\"o\">},</span>\n <span class=\"k\">have</span> <span class=\"n\">s_le_πι</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">s</span> <span class=\"err\">⊆</span> <span class=\"n\">πι</span> <span class=\"o\">:=</span>\n <span class=\"k\">begin</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">πι</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">tauto</span><span class=\"o\">},</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i₀</span> <span class=\"n\">hi₀</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">fconstructor</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">i₀</span><span class=\"o\">,</span> <span class=\"n\">tauto</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">πi</span> <span class=\"o\">:=</span> <span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">)),</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">i₀</span> <span class=\"bp\">=</span> <span class=\"n\">πi</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">std_basis</span><span class=\"o\">)),</span> <span class=\"n\">π</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">πi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n\n        <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">))),</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">))),</span> <span class=\"n\">π</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">πi</span><span class=\"o\">),</span>\n            <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">πι&#39;</span><span class=\"o\">,</span><span class=\"n\">apply</span> <span class=\"n\">baz</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">this</span><span class=\"o\">},</span>\n        <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">i</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">πi</span> <span class=\"bp\">=</span> <span class=\"n\">π₀</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">needs_a_name</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"n\">M</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">π₀</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n <span class=\"kn\">end</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">πι</span> <span class=\"o\">:=</span>\n <span class=\"k\">begin</span>\n    <span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">πι</span><span class=\"o\">),</span>\n        <span class=\"n\">tauto</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">s_le_πι</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">πι</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">tauto</span><span class=\"o\">},</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">foo</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">s_le_πι</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">),</span>\n <span class=\"kn\">end</span><span class=\"o\">,</span>\n <span class=\"c1\">--  easy to finish from here</span>\n <span class=\"n\">rw</span> <span class=\"n\">Rπι_eq_πRι</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">ha</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">free</span>\n</code></pre></div>",
        "id": 199450038,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591072926
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246647\">@Sam Lichtenstein</span> Wow, nice work. I encourage you to also look at the API for finsupp. For example, there is <code>finsupp.single</code> which is almost the Kronecker delta (except that it takes any scalar, instead of fixing on <code>1</code>). It would be good to do the same thing here, as it is predictable.<br>\nI'll now load the code into VScode.</p>",
        "id": 199450349,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591073366
    },
    {
        "content": "<p>I'll take a look at <code>single</code> tomorrow. Here is a slightly improved version of <code>surj_of_fg</code> removing some back-and-forth nonsense:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">surj_of_fg</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fg</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">],</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">surjective</span> <span class=\"n\">π</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">cases</span> <span class=\"n\">hfg</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">ι₀</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"err\">↑</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">ι</span>  <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span> <span class=\"o\">:=</span> <span class=\"err\">↥</span><span class=\"n\">ι₀</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">fconstructor</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">apply_instance</span><span class=\"o\">},</span>\n<span class=\"k\">let</span> <span class=\"n\">π₀</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n<span class=\"k\">let</span> <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"n\">lmap_of_elts</span> <span class=\"n\">R</span> <span class=\"n\">π₀</span><span class=\"o\">,</span>\n<span class=\"n\">fconstructor</span><span class=\"o\">,</span> <span class=\"o\">{</span><span class=\"n\">use</span> <span class=\"n\">π</span><span class=\"o\">},</span>\n<span class=\"o\">{</span><span class=\"k\">let</span> <span class=\"n\">πι</span> <span class=\"o\">:=</span> <span class=\"n\">π</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n <span class=\"k\">have</span> <span class=\"n\">πι&#39;</span> <span class=\"o\">:</span>\n     <span class=\"n\">πι</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">))),</span> <span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n    <span class=\"o\">:=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_eq_range</span> <span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">)),</span>\n<span class=\"k\">have</span> <span class=\"n\">Rπι_eq_πRι</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">@</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span_image</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">M</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">std_basis</span><span class=\"o\">)</span> <span class=\"n\">π</span><span class=\"o\">,</span>\n<span class=\"n\">replace</span>  <span class=\"n\">Rπι_eq_πRι</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">πι</span> <span class=\"bp\">=</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">π</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span> <span class=\"k\">by</span>\n    <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">is_basis_std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">Rπι_eq_πRι</span><span class=\"o\">},</span>\n<span class=\"n\">intro</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"err\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">tauto</span><span class=\"o\">},</span> <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hs</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n <span class=\"n\">rw</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">mem_span</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">replace</span> <span class=\"n\">this</span> <span class=\"o\">:=</span> <span class=\"n\">this</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">πι</span><span class=\"o\">),</span>\n <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">subset_span</span> <span class=\"n\">R</span> <span class=\"n\">M</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">πι</span><span class=\"o\">,</span>\n <span class=\"n\">replace</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"err\">∈</span> <span class=\"n\">πι</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">πι</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">tauto</span><span class=\"o\">},</span>\n <span class=\"k\">have</span> <span class=\"n\">s_le_πι</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">),</span> <span class=\"n\">i</span> <span class=\"err\">∈</span> <span class=\"n\">πι</span> <span class=\"o\">:=</span>\n <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span> <span class=\"n\">i₀</span> <span class=\"n\">hi₀</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span> <span class=\"n\">fconstructor</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">i₀</span><span class=\"o\">,</span> <span class=\"n\">tauto</span> <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">πi</span> <span class=\"o\">:=</span> <span class=\"n\">π</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">)),</span>\n    <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">i₀</span> <span class=\"bp\">=</span> <span class=\"n\">πi</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">baz</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">std_basis</span><span class=\"o\">)),</span> <span class=\"n\">π</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">πi</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n\n        <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">))),</span>\n            <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span><span class=\"o\">))),</span> <span class=\"n\">π</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"n\">πi</span><span class=\"o\">),</span>\n            <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">πι&#39;</span><span class=\"o\">,</span><span class=\"n\">apply</span> <span class=\"n\">baz</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">this</span><span class=\"o\">},</span>\n        <span class=\"k\">let</span> <span class=\"n\">y</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">std_basis</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_range</span><span class=\"o\">,</span> <span class=\"n\">use</span> <span class=\"n\">i</span><span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">πi</span> <span class=\"bp\">=</span> <span class=\"n\">π₀</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">needs_a_name</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"n\">ι</span> <span class=\"bp\">_</span> <span class=\"n\">M</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">π₀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">finish</span><span class=\"o\">},</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">replace</span> <span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"n\">π₀</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n <span class=\"kn\">end</span><span class=\"o\">,</span>\n <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">πι</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">,</span>\n                                       <span class=\"n\">exact</span> <span class=\"n\">foo</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">s_le_πι</span> <span class=\"n\">i</span> <span class=\"n\">hi</span><span class=\"o\">)},</span>\n <span class=\"c1\">-- easy to finish from here</span>\n <span class=\"n\">rw</span> <span class=\"n\">Rπι_eq_πRι</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">this</span> <span class=\"k\">with</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">ha</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199450408,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591073427
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246647\">@Sam Lichtenstein</span> Concerning the notation: what do you think of</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">⨁</span><span class=\"bp\">`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">direct_sum</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"err\">⨁</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 199450562,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591073747
    },
    {
        "content": "<p>That way, you generalise the notation to arbitrary direct sums.</p>",
        "id": 199450618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591073764
    },
    {
        "content": "<p>It does mean that you wouldn't have explicit notation for <code>free</code></p>",
        "id": 199450625,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591073781
    },
    {
        "content": "<p>So that's a downside</p>",
        "id": 199450631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591073795
    },
    {
        "content": "<p>hrm I need to think about it. I think the point of the API I made is that the non-dependent case should be simpler to work with. But I agree that it doesn't really make sense to restrict ⨁ to non-dependent direct sums!</p>",
        "id": 199450645,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591073871
    },
    {
        "content": "<p>API design is hard...</p>",
        "id": 199450686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591073905
    },
    {
        "content": "<p>If the parser can handle superscripts, there's still the idea of using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mrow><mo>⊕</mo><mi>ι</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">R^{\\oplus \\iota}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊕</span><span class=\"mord mathdefault mtight\">ι</span></span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 199450689,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591073918
    },
    {
        "content": "<p>When I copy paste your code into a new file, I get errors on this line</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">module</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">module</span>\n</code></pre></div>\n\n\n<p>It says it doesn't know about <code>direct_sum.module</code></p>",
        "id": 199450696,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591073952
    },
    {
        "content": "<p>Or more generally <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mrow><mo>⊕</mo><mi>ι</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">M^{\\oplus \\iota}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊕</span><span class=\"mord mathdefault mtight\">ι</span></span></span></span></span></span></span></span></span></span></span></span> -- that should always refer toa non-dependent sum!</p>",
        "id": 199450702,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591073965
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246647\">Sam Lichtenstein</span> <a href=\"#narrow/stream/116395-maths/topic/f.2Eg.2E.20free.20modules/near/199450689\">said</a>:</p>\n<blockquote>\n<p>If the parser can handle superscripts, there's still the idea of using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mrow><mo>⊕</mo><mi>ι</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">R^{\\oplus \\iota}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊕</span><span class=\"mord mathdefault mtight\">ι</span></span></span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<p>Well... we can only do unicode <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 199450714,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591073995
    },
    {
        "content": "<p>Can you use the second version I posted at 12:42?</p>",
        "id": 199450763,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591074021
    },
    {
        "content": "<p>I switched to using a <code>namespace</code> and the <code>instance</code>s are anonymous now</p>",
        "id": 199450773,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591074049
    },
    {
        "content": "<p>Aah.. you are using an old mathlib, I guess</p>",
        "id": 199450775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591074053
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">package</span><span class=\"o\">]</span>\n<span class=\"n\">name</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;pid&quot;</span>\n<span class=\"n\">version</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;0.1&quot;</span>\n<span class=\"n\">lean_version</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;leanprover-community/lean:3.14.0&quot;</span>\n<span class=\"n\">path</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;src&quot;</span>\n\n<span class=\"o\">[</span><span class=\"n\">dependencies</span><span class=\"o\">]</span>\n<span class=\"n\">mathlib</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">git</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;https://github.com/leanprover-community/mathlib&quot;</span><span class=\"o\">,</span> <span class=\"n\">rev</span> <span class=\"bp\">=</span> <span class=\"s2\">&quot;cc06d538378b040fcd60c80412cf6e5cecf93ff7&quot;</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 199450781,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591074085
    },
    {
        "content": "<p>probably a few days old at least</p>",
        "id": 199450783,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591074101
    },
    {
        "content": "<p>Yup</p>",
        "id": 199450786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591074106
    },
    {
        "content": "<p>Since then modules have been generalised to \"semimodules\" over semirings</p>",
        "id": 199450789,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591074121
    },
    {
        "content": "<p>So it's <code>direct_sum.semimodule</code> now</p>",
        "id": 199450829,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591074131
    },
    {
        "content": "<p>anyways bed time for me. I can try to merge with the upstream changes later this week</p>",
        "id": 199450831,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591074132
    },
    {
        "content": "<p>Sure</p>",
        "id": 199450833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591074136
    },
    {
        "content": "<p>Also, when you post several screens of code, would you please put a copy on <code>gist.github</code> (or some other pastebin)?</p>",
        "id": 199450844,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591074164
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/f.2Eg.2E.20free.20modules/near/199450714\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246647\">Sam Lichtenstein</span> <a href=\"#narrow/stream/116395-maths/topic/f.2Eg.2E.20free.20modules/near/199450689\">said</a>:</p>\n<blockquote>\n<p>If the parser can handle superscripts, there's still the idea of using <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mrow><mo>⊕</mo><mi>ι</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">R^{\\oplus \\iota}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">⊕</span><span class=\"mord mathdefault mtight\">ι</span></span></span></span></span></span></span></span></span></span></span></span>.</p>\n</blockquote>\n<p>Well... we can only do unicode <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>\n<p>You can always use <code>^⨁</code></p>",
        "id": 199450847,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591074173
    },
    {
        "content": "<p>It's useful to see the code on zulip. But copy-pasting is hard</p>",
        "id": 199450848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591074175
    },
    {
        "content": "<p>At least, I haven't figured out a trick to copy an entire code block from zulip. (They should offer a \"copy this\" link)</p>",
        "id": 199450860,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591074218
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246647\">@Sam Lichtenstein</span> Sleep well!</p>",
        "id": 199450862,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591074223
    },
    {
        "content": "<p><a href=\"https://gist.github.com/sflicht/53bdcdb1e3536e668736f7b4eb63cd79\">https://gist.github.com/sflicht/53bdcdb1e3536e668736f7b4eb63cd79</a></p>",
        "id": 199450926,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591074317
    },
    {
        "content": "<blockquote>\n<p><code>instance : module R ⨁[ι] R := direct_sum.module</code></p>\n</blockquote>\n<p>The precedence here looks a little odd. It should probably be around 40, not 500</p>",
        "id": 199451156,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591074719
    },
    {
        "content": "<blockquote>\n<p><code>   (ι → (R →ₗ[R] M))  →  (⨁[ι] R) →ₗ[R] M :=</code></p>\n</blockquote>\n<p>The trailing precedence should also be higher than 0 so that the parentheses are not necessary here</p>",
        "id": 199451213,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1591074838
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246647\">@Sam Lichtenstein</span> I've sent you an invitation for write access to non-master branches on the mathlib repo. You can put your code in a branch there. That way, others can easily take a look, and using <code>leanproject</code> we'll never have to worry about which version of <code>lean</code> or mathlib that's being used.</p>",
        "id": 199451337,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591075013
    },
    {
        "content": "<p>One problem with the library is that a <em>lot</em> of linear algebra is developed in terms of finsupp, and not direct_sum.</p>",
        "id": 199451522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591075401
    },
    {
        "content": "<p>Ouch, <code>direct_sum</code> clearly hasn't been used a lot. There are names like <code>direct_sum.to_module</code> that do what a <em>mathematician</em> think they should do <span aria-label=\"shock\" class=\"emoji emoji-1f628\" role=\"img\" title=\"shock\">:shock:</span> <br>\n(Instead of being some typeclass instance thingy, it's actually a linear map to a module. In mathlib parlance, that map would be called <code>lift</code>, blehh.)</p>",
        "id": 199451671,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591075641
    },
    {
        "content": "<p>A reminder also that <code>has_finite_biproducts</code> landed in mathlib not so long ago, so there is a uniform API for talking about direct sums available in any category. We even use <code>⨁</code> as a notation for indexed biproducts.</p>",
        "id": 199451993,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591076202
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246647\">@Sam Lichtenstein</span> Here's my first attempt:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">surj_of_fg</span> <span class=\"o\">(</span><span class=\"n\">hfg</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">fg</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">ι</span><span class=\"o\">],</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">⨁</span><span class=\"o\">[</span><span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">surjective</span> <span class=\"n\">π</span>  <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">hfg</span> <span class=\"k\">with</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">ι</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">//</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">},</span>\n  <span class=\"k\">let</span> <span class=\"n\">π₀</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">π</span> <span class=\"o\">:=</span> <span class=\"n\">lmap_of_elts</span> <span class=\"n\">R</span> <span class=\"n\">π₀</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">ι</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span> <span class=\"n\">π</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"err\">∈</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ι</span><span class=\"o\">)),</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">mem_span_iff_total</span> <span class=\"n\">at</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">hm</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"o\">,</span> <span class=\"n\">hlm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">of_finsupp</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">hlm</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">of_finsupp</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_sum</span><span class=\"o\">],</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">rintro</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span> <span class=\"n\">hil</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">π</span><span class=\"o\">,</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">std_basis</span><span class=\"o\">,</span> <span class=\"n\">lmap_of_elts</span><span class=\"o\">,</span> <span class=\"n\">π₀</span><span class=\"o\">],</span>\n  <span class=\"n\">delta</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">to_module</span> <span class=\"n\">free</span><span class=\"bp\">.</span><span class=\"n\">lof</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">,</span> <span class=\"n\">direct_sum</span><span class=\"bp\">.</span><span class=\"n\">to_module_lof</span><span class=\"o\">],</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">map_smul</span><span class=\"o\">],</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">lmap_of_elt</span><span class=\"o\">],</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 199452609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591077205
    },
    {
        "content": "<p>I also kicked out al the <code>decidable_eq \\io</code> from the file, and added <code>noncomputable theory</code> to the top of the file.</p>",
        "id": 199452624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591077233
    },
    {
        "content": "<p>One thing to be said for <code>single</code> rather than the mathematician's more instinctive basis defined by the delta function is that the free module is the abelian group generated by <code>single i r</code> but it's only the R-module generated by the basis. This sounds like a minor point but actually in the theory of derivations of multivariable polynomials this was a decisive simplification. An induction procedure of the form \"check on singles and on sums\" is easier to use than \"check on a basis and on sums and on R-multiples\" because then you have to deal with multiplying a general element of the module by an element of R, and there are times when this is much harder to deal with than multiplying a basis element by R.</p>",
        "id": 199454358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591079693
    },
    {
        "content": "<p>In summary, <code>single</code> makes sure you make module elements in the simplest possible way</p>",
        "id": 199455271,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591080620
    },
    {
        "content": "<p>there seems to be a bit of a tradeoff: using \"good\" API design (e.g. building linear algebra in terms of <code>finsupp</code> rather than <code>direct_sum</code>, favoring <code>single</code> rather than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>δ</mi><mrow><mi>i</mi><mi>j</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\delta_{ij}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.980548em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03785em;\">δ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03785em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span></span></span></span> , and calling the universal mapping-out property of the module co-product <code>lift</code> instead of <code>to_module</code>) actually makes the API more impenetrable for newer users like me (at least those coming from a more math rather than CS perspective)...</p>",
        "id": 199484385,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591101529
    },
    {
        "content": "<p>I completely agree that <code>lift</code> is a bad name</p>",
        "id": 199484947,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591101829
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246647\">@Sam Lichtenstein</span> On the other hand, if you have <code>group.to_monoid</code> and <code>ring.to_add_group</code> etc... as standard names for \"forgetful functors\" then you get caught of guard when <code>direct_sum.to_module</code> is something completely different.</p>",
        "id": 199485080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591101886
    },
    {
        "content": "<p>I don't think developping lin.alg in terms of <code>finsupp</code> instead of <code>direct_sum</code> is \"good\" API design.</p>",
        "id": 199485126,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591101919
    },
    {
        "content": "<p>It just so happened. But certainly we need a good API for <code>direct_sum</code>. I was just observing that it isn't there yet.</p>",
        "id": 199485165,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591101945
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I can't quite tell whether you would actually recommend using the high level category-theoretic direct sum API. AFAICT, it looks like algebra/category/Group/* shows that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">A</mi><mi mathvariant=\"normal\">b</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Ab}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">A</span><span class=\"mord mathrm\">b</span></span></span></span></span> is a preadditive category with all colimits and  finite direct sums are biproducts. (Does it actually show that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">A</mi><mi mathvariant=\"normal\">b</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Ab}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">A</span><span class=\"mord mathrm\">b</span></span></span></span></span> is an abelian category, or maybe this follows from the above?) But there are comments pointing out that the colimit construction used there is at least not definitionally equal to the <code>finsupp</code> version used for linear algebra over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">Z</span></span></span></span></span> elsewhere in mathlib. And it seems like there is much less done for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi mathvariant=\"normal\">M</mi><mi mathvariant=\"normal\">o</mi><mi mathvariant=\"normal\">d</mi></mrow><mrow><mi mathvariant=\"normal\">/</mi><mi>R</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Mod}_{/R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.04964em;vertical-align:-0.3551999999999999em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathrm\">M</span><span class=\"mord mathrm\">o</span><span class=\"mord mathrm\">d</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.34480000000000005em;\"><span style=\"top:-2.5198em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">/</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.00773em;\">R</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3551999999999999em;\"><span></span></span></span></span></span></span></span></span></span> than for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">A</mi><mi mathvariant=\"normal\">b</mi></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Ab}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">A</span><span class=\"mord mathrm\">b</span></span></span></span></span> in algebra/category/Module/*.</p>",
        "id": 199492079,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591105264
    },
    {
        "content": "<p>Abelian categories were added somewhere the last 10? days... so I wouldn't expect there to be very much...</p>",
        "id": 199493289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591105797
    },
    {
        "content": "<p>Well, the brief version is that the category_theory/ directory remains largely disconnected from the rest of the library. There are some good reasons for this (one should use only as much category theory as one needs...). The most important one is that people have found it hard to use, in large part because of universe polymorphism issues. This has got better recently, however.</p>",
        "id": 199493374,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591105819
    },
    {
        "content": "<p>But I think overall we should be trying to use it more.</p>",
        "id": 199493428,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591105849
    },
    {
        "content": "<p>I think the main reasons it is hard to use is that it has not been used, and it has not been designed with use in mind.</p>",
        "id": 199493466,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591105864
    },
    {
        "content": "<p>At least, not the special shapes of limits stuff (which would include <code>direct_sum</code>). The rest is mostly fine I think.</p>",
        "id": 199493561,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591105901
    },
    {
        "content": "<p>I don't think \"it has not been designed with use in mind\"</p>",
        "id": 199493589,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591105913
    },
    {
        "content": "<p>I mostly got started on it because I wanted to play with automation, but then got sucked in to trying to provide things that it seemed people wanted...</p>",
        "id": 199493646,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591105923
    },
    {
        "content": "<p>but, as Reid says, the special shapes of limits stuff has never been particularly satisfactory.</p>",
        "id": 199493681,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591105941
    },
    {
        "content": "<p>But it would certainly help if people who wrote that part of the library could show us how to <em>use</em> it.</p>",
        "id": 199493700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591105947
    },
    {
        "content": "<p>I do think the special shapes of limits stuff is just really hard. In the rest of the library we just ignore this issue completely.</p>",
        "id": 199493845,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591105999
    },
    {
        "content": "<p>e.g. I spent quite a while trying to define <code>homeomorph.sum_prod_distrib : (α ⊕ β) × γ ≃ₜ α × γ ⊕ β × γ</code> in terms of <code>homeomorph.sigma_prod_distrib : ((Σ i, σ i) × β) ≃ₜ (Σ i, (σ i × β))</code>, and eventually I just gave up and copied the proof</p>",
        "id": 199493988,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591106059
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/f.2Eg.2E.20free.20modules/near/199493700\">said</a>:</p>\n<blockquote>\n<p>But it would certainly help if people who wrote that part of the library could show us how to <em>use</em> it.</p>\n</blockquote>\n<p>Is there anything in particular you think would be helpful? Personally I found it reasonably easy to get my head around when I first tried, and it's been getting gradually better (although I agree it's not particularly nice to use)</p>",
        "id": 199494314,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591106199
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 199494464,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591106256
    },
    {
        "content": "<p>In terms of using it, I hope that we've now laid good foundations for doing homological algebra, which should come quickly now.</p>",
        "id": 199494643,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591106313
    },
    {
        "content": "<p>Similarly with abelian categories and semisimplicity around the corner, I think it will be useful in the near future as we start doing some representation theory.</p>",
        "id": 199494783,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1591106376
    },
    {
        "content": "<p>I think the thing for me is that map_cone and relatives can be pretty annoying to use, especially when related to limits of special shapes but I have <em>no idea</em> how one would do it better</p>",
        "id": 199495156,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591106518
    },
    {
        "content": "<p>Having usable homological algebra using category theory would be awesome. Of course the other big test is sheaf theory.</p>",
        "id": 199496042,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591106848
    },
    {
        "content": "<p>So you could try to do sheaf cohomology, and check all boxes.</p>",
        "id": 199496120,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591106880
    },
    {
        "content": "<p>Sheaf theory should be coming soon!</p>",
        "id": 199496186,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1591106893
    },
    {
        "content": "<p>Testing the interface with the concrete world could be something like relating sheaf cohomology with a low tech definition of Cech cohomology for instance (when it makes sense).</p>",
        "id": 199496332,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591106955
    },
    {
        "content": "<p>What I would love to see is the fact that, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span></span></span></span> are two <em>homeomorphic</em> compact subsets of the sphere <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">S^n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mi>n</mi></msup><mo>−</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">S^n - K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mi>n</mi></msup><mo>−</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">S^n - L</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span></span></span></span> have the same number of connected components (which contains Jordan curve theorem as a trivial case). A.k.a. Alexander duality. I have just seen on Wikipedia that this follows from a more general theorem of completely abstract flavor <a href=\"https://en.wikipedia.org/wiki/Spanier%E2%80%93Whitehead_duality\">https://en.wikipedia.org/wiki/Spanier%E2%80%93Whitehead_duality</a>, for which I can't parse the statement :)</p>",
        "id": 199500329,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591108264
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Are your <code>K</code> and <code>L</code> homeomorphic?</p>",
        "id": 199501470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591108529
    },
    {
        "content": "<p>Otherwise I don't see how to believe your claim</p>",
        "id": 199501500,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591108542
    },
    {
        "content": "<p>Yes, obviously. That's what the original message says now :)</p>",
        "id": 199502507,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591108954
    },
    {
        "content": "<p>is there really a non-circular proof of the Jordan curve theorem along such lines?</p>",
        "id": 199502871,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591109128
    },
    {
        "content": "<p>Yes</p>",
        "id": 199503123,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1591109239
    },
    {
        "content": "<p>cool</p>",
        "id": 199503141,
        "sender_full_name": "Sam Lichtenstein",
        "timestamp": 1591109252
    },
    {
        "content": "<p>In fact I think the Jordan curve theorem is proved in this way in HOL Light, and maybe also Isabelle</p>",
        "id": 199507668,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591111053
    },
    {
        "content": "<p>oh, actually I see not using Alexander duality, but still using homology<br>\n<a href=\"https://www.mathematics.pitt.edu/hales60/pdf/Harrison-John.pdf\">https://www.mathematics.pitt.edu/hales60/pdf/Harrison-John.pdf</a></p>",
        "id": 199508811,
        "sender_full_name": "Reid Barton",
        "timestamp": 1591111404
    },
    {
        "content": "<p>The original proofs in HOL Light and Isabelle were naive proofs, without homology. It was refactored in HOL Light to use homology, but the Isabelle one is still the original one, with bare hands.</p>",
        "id": 199509635,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1591111685
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> we will get there in the end. Every time I've used the category theory library it's got easier. It's still really hard to use though. About a month ago I spent over an hour trying to do a trivial-on-paper codewars category theory question and then gave up. Every single new concept (natural transformations, pushouts/pullbacks, products, general limits, concrete categories, ...) comes with its own API and for some reason I find it much harder to extract the API from the source lean files than I do with something like an algebra file written by Kenny, where I just read it and then know what I'm doing immediately. I find it hard to believe that my understanding of pushouts is somehow deficient compared to my understanding of R-algebras, but somehow I still find pushouts harder to use than R-algebras. Writing those basic docs on natural transformations etc helped me, but I feel like I need to write basic docs on all the other things too before I can use it. I don't know why this is -- genuinely. There is some measure of \"hard for Kevin to work with\" which I can't quantify -- I really want to believe that category theory at the level I want to use it should be completely content-free (I only ever use very basic stuff about pullbacks and Yoneda etc in reality) whereas I feel that I'm doing harder stuff with algebra, but somehow I find algebra easier to formalise, in the sense that I can do it slowly, whereas with category theory sometimes I just can't do it at all. This is most definitely not a criticism of your work! It's just a frustrated brain-dump on my part.</p>",
        "id": 199513142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591113174
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/f.2Eg.2E.20free.20modules/near/199450860\">said</a>:</p>\n<blockquote>\n<p>At least, I haven't figured out a trick to copy an entire code block from zulip. (They should offer a \"copy this\" link)</p>\n</blockquote>\n<p>There's a \"view source button\". After I click that, I click inside of the box that the text comes in, press cmd-a. Then all of the text is highlighted and i can copy it. I'm on macOS + chrome (but i'd guess that your setup has some similar functionality)</p>",
        "id": 199672956,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591216353
    },
    {
        "content": "<p>Don't you then have to delete the <code> ``` </code>s?</p>",
        "id": 199676334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1591218154
    },
    {
        "content": "<p>yes, I suppose so. I think it's lower friction to delete one line of text than to click an external link from zulip, but I can imagine someone else feeling differently</p>",
        "id": 199678912,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1591219592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252300\">@Jalex Stark</span> Thanks, that works. (Though I would still like a little 'copy-to-clipboard' button. I guess I should start an issue over at zulip's github.)</p>",
        "id": 199705164,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591246381
    }
]