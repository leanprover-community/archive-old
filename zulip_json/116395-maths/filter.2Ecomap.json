[
    {
        "content": "<p>Hi, I'm going to redefine <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.comap\">docs#filter.comap</a> this way:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">comap</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">sets</span>             <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">|</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"bp\">|</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span><span class=\"o\">⦄,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span><span class=\"o\">},</span>\n  <span class=\"n\">univ_sets</span>        <span class=\"o\">:=</span> <span class=\"n\">univ_mem'</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">sets_of_superset</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">Hs</span> <span class=\"n\">Hst</span><span class=\"o\">,</span> <span class=\"n\">mem_of_superset</span> <span class=\"n\">Hs</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">Hst</span> <span class=\"bp\">$</span> <span class=\"n\">hy</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">inter_sets</span>       <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"n\">Hs</span> <span class=\"n\">Ht</span><span class=\"o\">,</span> <span class=\"n\">mem_of_superset</span> <span class=\"o\">(</span><span class=\"n\">inter_mem</span> <span class=\"n\">Hs</span> <span class=\"n\">Ht</span><span class=\"o\">)</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">hy</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"o\">⟨</span><span class=\"n\">hy.1</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy.2</span> <span class=\"n\">hx</span><span class=\"o\">⟩</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>Are there any objections?</p>",
        "id": 279739581,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1650574942
    },
    {
        "content": "<p>What is the motivation?</p>",
        "id": 279740049,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1650575211
    },
    {
        "content": "<p>My main motivation is to have <code>s ∈ comap f l</code> unfold to <code>something ∈ l</code>.</p>",
        "id": 279740124,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1650575273
    },
    {
        "content": "<p>(though I can add lemmas instead)</p>",
        "id": 279740194,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1650575292
    },
    {
        "content": "<p>Does it make a lot of proofs simpler? It's certainly harder to read when people jump to the definition.</p>",
        "id": 279740284,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1650575359
    },
    {
        "content": "<p>I'll try. If it doesn't, then I'll revert to adding lemmas instead.</p>",
        "id": 279740544,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1650575517
    },
    {
        "content": "<p>I definitely want to have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">compl_mem_comap</span> <span class=\"o\">:</span> <span class=\"n\">s</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∈</span> <span class=\"n\">comap</span> <span class=\"n\">f</span> <span class=\"n\">l</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">ᶜ</span> <span class=\"bp\">∈</span> <span class=\"n\">l</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 279741224,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1650575897
    },
    {
        "content": "<p>I'm going to add lemmas instead of changing the definition.</p>",
        "id": 279747822,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1650579990
    }
]