[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/3525d212e3b3166b2f3cf1a5dc89114962630168/src/algebra/ordered_group.lean#L17-L20\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/3525d212e3b3166b2f3cf1a5dc89114962630168/src/algebra/ordered_group.lean#L17-L20\">https://github.com/leanprover-community/mathlib/blob/3525d212e3b3166b2f3cf1a5dc89114962630168/src/algebra/ordered_group.lean#L17-L20</a>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- An ordered (additive) commutative monoid is a commutative monoid</span>\n<span class=\"cm\">  with a partial order such that addition is an order embedding, i.e.</span>\n<span class=\"cm\">  `a + b ≤ a + c ↔ b ≤ c`. These monoids are automatically cancellative. -/</span>\n<span class=\"n\">class</span> <span class=\"n\">ordered_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>Why?!? Why isn't it called <code>ordered_add_comm_monoid</code>, and where are the actual <code>ordered_comm_monoid</code>?</p>",
        "id": 162642592,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554485416
    },
    {
        "content": "<p>And another thing <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>  -- are you sure the <code>a + b ≤ a + c ↔ b ≤ c</code> claim follows from the axioms you give to this structure? I'm thinking about <code>with_bot int</code> with addition defined by -infty + x = -infty.</p>",
        "id": 162703583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1554559847
    },
    {
        "content": "<p>Yeah, this comment is actually false</p>",
        "id": 162703599,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554559878
    },
    {
        "content": "<p>That comment should be about <code>ordered_cancel_comm_monoid</code>, where <code>a + b ≤ a + c → b ≤ c</code>implies cancellation</p>",
        "id": 162704566,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1554561651
    },
    {
        "content": "<p>This area of mathlib is really a mess anyway. If you feel like cleaning it up then you can take whatever you want from <a href=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/linear_ordered_comm_group.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/linear_ordered_comm_group.lean\">https://github.com/leanprover-community/lean-perfectoid-spaces/blob/master/src/for_mathlib/linear_ordered_comm_group.lean</a> In particular I did a <code>to_multiplicative</code> by hand (search and replace) in order to get back my lemmas for actual commutative monoid (ie. with multiplicative notation) but of course the correct way is to patch mathlib to use multiplication and decorate everything with <code>to_additive</code></p>",
        "id": 162705157,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1554562616
    }
]