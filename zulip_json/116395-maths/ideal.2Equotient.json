[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> or someone else who's paying attention, is <code>ideal.quotient</code> supposed to be not there any more in master? I have some ring which has an extremely long name, and I have <code>Q := (ideal.span {a | ∃ b, a = f b}).quotient</code> and this doesn't work any more. Do I now have to write down the full name of the ring?</p>",
        "id": 263921741,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638823349
    },
    {
        "content": "<p>Does <code>_ / (ideal.span ...)</code> work?</p>",
        "id": 263921871,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638823438
    },
    {
        "content": "<p>Yes! :D I just had that idea as you posted</p>",
        "id": 263921947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638823476
    },
    {
        "content": "<p>It's now an instance <code>ideal.has_quotient</code> of <code>has_quotient</code>.</p>",
        "id": 263921952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638823481
    },
    {
        "content": "<p>Type <code>\\bigsolidus</code> or <code>\\quot</code> or <code>\\/</code> to type that <code>/</code> (and make sure you have an up-to-date VScode extension)</p>",
        "id": 263921982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638823504
    },
    {
        "content": "<p>Right, but do you think <code>I.quotient</code> is better than <code>_ / I</code>? Anyway. Oh, I used <code>\\quot</code> for the quotient symbol ;-)</p>",
        "id": 263922035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638823531
    },
    {
        "content": "<p><code>I,quotient</code>??</p>",
        "id": 263922155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638823582
    },
    {
        "content": "<p>Sorry, mistyped. <code>I.quotient</code>.</p>",
        "id": 263922201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638823608
    },
    {
        "content": "<p><code>R / I</code> looks way better to me</p>",
        "id": 263922214,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638823610
    },
    {
        "content": "<p>But in this situation I'm in (trying to debug this blasted timeout which the Imperial algebraic number theorists are running into) I am never ever going to be mentioning any of the explicit R's showing up ;-)</p>",
        "id": 263922308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638823670
    },
    {
        "content": "<p>Kevin have you tried the following approach?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.is_alg_closed.algebraic_closure</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n<span class=\"kd\">theorem</span> <span class=\"n\">exists_algebraic_closure</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">resetI</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"bp\">∃</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">],</span> <span class=\"kd\">by</span> <span class=\"n\">resetI</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">is_alg_closure</span> <span class=\"n\">K</span> <span class=\"n\">L</span>  <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span> <span class=\"n\">infer_instance</span><span class=\"o\">],</span>\n  <span class=\"n\">exact</span> <span class=\"n\">algebraic_closure.is_alg_closure</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">algebraic_closure'</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure'</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some_spec.some</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure'</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some_spec.some_spec.some</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_alg_closure</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">algebraic_closure'</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">exists_algebraic_closure</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">some_spec.some_spec.some_spec</span>\n</code></pre></div>",
        "id": 263922453,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638823769
    },
    {
        "content": "<p>I assume your timeouts are with algebraic closures again?</p>",
        "id": 263922478,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638823781
    },
    {
        "content": "<p>The issue isn't finding the workarounds, it's finding the underlying problem.</p>",
        "id": 263922562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638823807
    },
    {
        "content": "<p>Oh, I thought that we realized the issue is that lean thinks something is computable when it's not....</p>",
        "id": 263922615,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638823836
    },
    {
        "content": "<p>Right, but if I want to get Gabriel to fix it then I need to get an example which doesn't depend on mathlib.</p>",
        "id": 263922660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638823865
    },
    {
        "content": "<p>fair point</p>",
        "id": 263922676,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638823874
    },
    {
        "content": "<p>But I've passed the trick onto Amelia anyway :-) I guess what I am slightly worried about is that these workarounds are just kicking the problem down the road and it'll be back to bite us later.</p>",
        "id": 263924354,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638824640
    },
    {
        "content": "<p>I think the above is how <code>algebraic_closure</code> should be defined anyway.</p>",
        "id": 263924468,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638824686
    },
    {
        "content": "<p>I was hoping </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">nonempty.has_zero</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_zero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_zero.mk</span> <span class=\"bp\">$</span> <span class=\"n\">classical.choice</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">nonempty.has_one</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_one</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_one.mk</span> <span class=\"bp\">$</span> <span class=\"n\">classical.choice</span> <span class=\"o\">‹</span><span class=\"n\">_</span><span class=\"o\">›</span>\n\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">instance</span> <span class=\"n\">nonempty.has_add</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">has_add</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">has_add.mk</span> <span class=\"bp\">$</span> <span class=\"n\">classical.choice</span> <span class=\"bp\">$</span> <span class=\"n\">infer_instance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">//</span> <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"mi\">10</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">baz</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">bar</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">t.1</span>\n</code></pre></div>\n<p>would reproduce the timeout, but, alas, this just works.</p>",
        "id": 263924529,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638824726
    },
    {
        "content": "<p>The noncomputable issue that I remember is when an equation compiler has two match statements, and only the latter one of them is noncomputable. The compiler doesn't know that it itself is noncomputable until the whole term is compiled, and checking whether any of the terms it uses are noncomputable might lead to a deep check that times out. I might remember wrong.</p>",
        "id": 263926003,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638825507
    }
]