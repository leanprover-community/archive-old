[
    {
        "content": "<p>Transpositions are easy: <code>is_swap</code></p>\n<p>What's the best way to talk about adjacent transpositions? (context: we want to prove that S_n is generated by adjacent transpositions, which I don't think is in mathlib yet).</p>\n<p>One consideration is that you might want to talk about adjacent transpositions in S_N or S_Z (or maybe not?)</p>\n<p>If you do, then one option would be to define an instance extending <code>linear_order</code> stating that every element has a unique element directly below it and a unique element directly above it. Is this notion in mathlib anywere?</p>",
        "id": 220900648,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608862301
    },
    {
        "content": "<p>Or maybe in general an adjacent transposition is a swap between two elements with no element between them?</p>",
        "id": 220900694,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1608862387
    },
    {
        "content": "<p>It's not true that every element has a unique element directly below it of course, I guess the theorem is that you have a unique element directly below you iff you're not bot, and you have a subsingleton of things directly below you in general</p>",
        "id": 220901253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1608863740
    },
    {
        "content": "<p>Adjacent swaps on <code>fin n</code> are in <a href=\"https://github.com/leanprover-community/mathlib/issues/3770\">#3770</a></p>",
        "id": 220911216,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608884734
    },
    {
        "content": "<p>And on <code>nat</code> in <a href=\"https://github.com/leanprover-community/mathlib/issues/4739\">#4739</a></p>",
        "id": 220911265,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608884779
    },
    {
        "content": "<p>But your point about wanting a typeclass is salient</p>",
        "id": 220911282,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1608884825
    }
]