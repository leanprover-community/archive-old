[
    {
        "content": "<p>Since there seems to be a decent number of people working on this, I thought it might be worthwhile to get a thread going (and a stream might be good as well).</p>\n<p>One of the main things is that there are quite a few definitions to choose from, and two good candidates is based off of discrete valuation rings, and the other is that of being an integrally closed domain. In Cassels-Frochlich, there is also a third, but I haven't had much luck with proving any of the implications.</p>\n<p>Currently, I'm trying to work through Marcus's Number Fields and formalize stuff (dependent on <a href=\"https://github.com/leanprover-community/mathlib/issues/3846\">#3846</a>) using the integrally closed domain definition. So far, I've proved that any ideal contains some product of primes (and currently, the proof is massive), and the next proof (involving multiplying to get a principal ideal) requires the fact that it's integrally closed, whereas before it has just been Noetherian and non-field. (I'll try to clean and then link/push some code to a branch by tomorrow)</p>",
        "id": 207710221,
        "sender_full_name": "Kenji Nakagawa",
        "timestamp": 1598077059
    },
    {
        "content": "<p>I think the definition shouldn't really matter once you prove that a bunch of definitions are equivalent</p>",
        "id": 207711784,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598080106
    },
    {
        "content": "<p>(Also, re stream: I think this thread should suffice.)</p>",
        "id": 207711786,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598080120
    },
    {
        "content": "<p>You can see my work using the \"noetherian + each prime ideal is maximal + integral closure is itself\" definition <a href=\"https://github.com/leanprover-community/mathlib/blob/Vierkantor-dedekind-domain/src/ring_theory/dedekind_domain.lean\">here</a>. I was sidetracked a bit on defining and proving some basic properties of the trace form, but should be able to finish that off in a couple of days.</p>",
        "id": 207745716,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598137102
    },
    {
        "content": "<p>Are you proving Krull-Akizuki? If I remember correctly, that's the hard part about proving that the integral closure of a Dedekind domain is a Dedekind domain.</p>",
        "id": 207745893,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598137477
    },
    {
        "content": "<p>I'm using some shortcuts, basically this: <a href=\"https://math.stackexchange.com/questions/50332/the-integral-closure-of-a-finite-separable-field-extension-of-the-fraction-field\">https://math.stackexchange.com/questions/50332/the-integral-closure-of-a-finite-separable-field-extension-of-the-fraction-field</a> plus that you can factor a field extension in a separable part and a purely inseparable part</p>",
        "id": 207746015,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598137747
    },
    {
        "content": "<p>I know about the separable shortcut, but how do you handle the purely inseparable case?</p>",
        "id": 207746021,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598137791
    },
    {
        "content": "<p>But yes, the Noetherian condition is definitely the one that needs the most machinery</p>",
        "id": 207746023,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598137795
    },
    {
        "content": "<p>I use a trick found here: <a href=\"http://www.math.uchicago.edu/~may/MISC/Dedekind.pdf\">http://www.math.uchicago.edu/~may/MISC/Dedekind.pdf</a> that uses the \"Dedekind iff all ideals are invertible\".</p>",
        "id": 207746148,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598137950
    },
    {
        "content": "<p>(Theorem 2.4, page 3.)</p>",
        "id": 207746158,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598137988
    },
    {
        "content": "<p>oh neat, I'll take a look</p>",
        "id": 207746170,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598138040
    },
    {
        "content": "<p>By the way, I'm mostly interested in the separable case, so when (if?) I finally make a PR, I will probably leave the inseparable case for later. If you would like to do it, you're welcome to of course :)</p>",
        "id": 207746488,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598138579
    },
    {
        "content": "<p>I believe that in most of the literature, it is implicitly implied that dedekind domains are non-fields, and I'm not sure if I saw something along those lines in your code <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> (although I don't think this has been relevant so far, or it might be more of a number theory/field theory thing).</p>\n<p>Also, in my code I'm not sure if the morally correct way is to create a bunch of definitions like <code>dedekind_id</code>, <code>dedekind_inv</code> and <code>dedekind_dvr</code> and (hopefully) prove equivalences, or just select one for implementation and then write a bunch of <code>iff</code> lemmas. Another question was about how easy/hard it would be to reason about things like k(a) = (b) as ideals of R for some k in the field of fractions (and what the implementation might look like, K-modules(?)). Also, I've noticed that splitting <code>&lt;</code> with ideals tends to have coercions that are annoying to deal with (and make suggest/library_search fail), as well as the fact that sometimes you have to <code>unfold ideal</code> in order to apply a lemma about <code>submodules</code>.</p>",
        "id": 207758770,
        "sender_full_name": "Kenji Nakagawa",
        "timestamp": 1598163494
    },
    {
        "content": "<p>you compare them as fractional ideals</p>",
        "id": 207759030,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598164132
    },
    {
        "content": "<p>Ah, I suppose the most natural way to talk about fractional ideals is with them <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span></p>",
        "id": 207759137,
        "sender_full_name": "Kenji Nakagawa",
        "timestamp": 1598164372
    },
    {
        "content": "<p>(We have a new linkfier that lets us refer to mathlib branches by writing e.g. <a href=\"https://github.com/leanprover-community/mathlib/tree/mushokunosora-dedekind\">branch#mushokunosora-dedekind</a> and <a href=\"https://github.com/leanprover-community/mathlib/tree/Vierkantor-dedekind-domain\">branch#Vierkantor-dedekind-domain</a>)</p>",
        "id": 207780280,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1598199824
    },
    {
        "content": "<p>So we have two competing Dedekind domain branches? :-/</p>",
        "id": 207857726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598282988
    },
    {
        "content": "<p>I think the divergence is not so bad, at least in a social sense. Kenji sliced a PR off of their branch and Anne gave useful review comments. Hopefully Kenji and Anne have exchanged some PMs to collaborate and avoid duplicate work.</p>",
        "id": 207967262,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1598364583
    },
    {
        "content": "<p>I've been PR'ing quite a bit of the \"finished pieces\" of my branch, so apart from the line defining <code>dedekind_domain</code> itself, there is very little new stuff on my branch.</p>",
        "id": 207972360,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598366910
    },
    {
        "content": "<p>Unfortunately, I hadn't head of Kenji's project before this thread. I'm open to share work, of course.</p>",
        "id": 207972518,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598366971
    },
    {
        "content": "<p>I want to work on the Vierkantor branch. Can anyone tell me what is the best way to get involved with the branch? Also, where would I find information on what everyone working on it is up to? I wouldn't want to begin working on something only to find out that someone was already doing that specific part and was already far into it.</p>",
        "id": 208584671,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1598892294
    },
    {
        "content": "<p>Apart from a definition of Dedekind domain (integrally closed, noetherian, Krull dimension 1) and some work on the trace form, I don't have too much on the branch that is not already in mathlib.</p>\n<p>The goal of my branch at the moment is to show that the ring of integers in a number field is Dedekind (assuming that the ring of integers is defined as a suitable integral closure, showing). I already merged a lot of this in mathlib, the remaining part is showing the closure is Noetherian (for now assuming everything is separable). The last week and a bit, I did some work on the trace form, which I want to PR soon, and then I will be ready for concluding Noetherianness. <span class=\"user-mention\" data-user-id=\"319839\">@Kenji Nakagawa</span> has (as I understand it) been focussing on showing the equivalence between various definitions of Dedekind domain. And the plan is to make a PR soon with only the definition, so we can work on a shared base.</p>\n<p>To work on a branch that has been pushed to mathlib, it should be enough to run <code>git fetch</code> to get the latest version of all branches and then <code>git checkout -t origin/Vierkantor-dedekind-domain</code> to switch to working on a local copy of the branch. I believe the latest commit builds except for <code>sorry</code>.</p>",
        "id": 208587446,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598893615
    },
    {
        "content": "<p>I'm going for dinner now, but I'm sure other people on Zulip can help you if you get stuck.</p>",
        "id": 208587523,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598893674
    },
    {
        "content": "<p>Thanks for this update Anne! In arithmetic we have the concept of a local field and a global field, and to a certain extent these theories are developed in parallel. The algebraic analogue would be be a discrete valuation ring and a Dedekind domain. I've been working on discrete valuation rings this summer but I got tied up in knots because of some missing API for has_zero which I only resolved recently. I still need to make an API for with_zero (multiplicative int) (the main hold-up being that I think it deserves a name, or at least notation, but I can't think of a good one). Once we have this then I'll be able to prove that a discrete valuation ring has a valuation! This will hopefully be of some use. Some of the definitions of DVR in the literature use Dedekind domains. Some of the definitions of Dedekind domain in the literature use DVRs. Mathematicians! Doncha just love 'em?</p>",
        "id": 208591620,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598895939
    },
    {
        "content": "<p>Getting the definition in mathlib is really key. There are plenty of mathematicians who want to do stuff but don't know the ins and outs of <code>extend</code> and Prop-valued classes etc. Once the definition is there, these people can get involved</p>",
        "id": 208591850,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598896053
    },
    {
        "content": "<p>It's a bit like schemes. Now we have a definition, more mathematicians will be able to ask meaningful questions such as \"do we have theorem X about schemes\"? The answer now might be \"we can state it, feel free to try and prove it in a begin end block\" which is the part that more mathematicians understand well</p>",
        "id": 208592054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598896155
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>, I know it’s mostly a matter of type tags, but why do valuations use multiplicative groups? I thought additive was standard, and that sounds more sensible when our go-to example is integers</p>",
        "id": 208593840,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598897064
    },
    {
        "content": "<p>Aaron, it depens on which field of maths you are in. Also... the go-to example is <code>with_top int</code>, which is slightly annoyingly different from <code>int</code>.</p>",
        "id": 208594937,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598897603
    },
    {
        "content": "<p>I think this was discussed recently in another thread, but a valuation is a morphism of (multiplicative) monoids_with_zero which satisfies some additional condition. (I personally also like writing value groups additively, but it's a matter of taste and I guess passing between addition/multiplication in lean can get tedious).</p>",
        "id": 208594942,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598897605
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> note that a very common other example is the multiplicative <code>nnreal</code></p>",
        "id": 208594990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598897636
    },
    {
        "content": "<p>I'm actually working on formalizing some stuff about general valuation rings right now. The \"easy\" way to define the value group is to mod out <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> (the field) as a multiplicative monoid_with_zero by the equivalence relation induced by multiplication by units from the valuation ring. This is then naturally a multiplicative object :)</p>",
        "id": 208595465,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598897865
    },
    {
        "content": "<p>Yup, that's what we did when constructing the canonical valuation in the perfectoid project.</p>",
        "id": 208595593,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598897942
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 208595770,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1598898032
    },
    {
        "content": "<p>Dedekind domains make us hit a new milestone: <a href=\"https://github.com/leanprover-community/mathlib/issues/4000\">#4000</a></p>",
        "id": 208604375,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1598902129
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Dedekind.20domains/near/208591620\">said</a>:</p>\n<blockquote>\n<p>Mathematicians! Doncha just love 'em?</p>\n</blockquote>\n<p>No, I don't. Oh, wait, was this a rherotical question? ;)</p>",
        "id": 208652970,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1598945529
    },
    {
        "content": "<p>Trust us -- we know it's not circular! You guys are just paranoid :-)</p>",
        "id": 208656107,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598947501
    },
    {
        "content": "<p>Here's some text I wrote just yesterday in a forthcoming CPP submission:</p>\n<blockquote>\n<p>What is particularly remarkable about this circularity is that it had escaped<br>\nthe attention of the main author among ***., working in \\LaTeX. The<br>\nissue was noticed only as we formalized ***. Fortunately, this was still<br>\nearly enough to prevent public embarrassment.</p>\n</blockquote>\n<p>Regrettably, *** is a computer scientist resp. some C.S. stuff.</p>",
        "id": 208660509,
        "sender_full_name": "Jasmin Blanchette",
        "timestamp": 1598950471
    },
    {
        "content": "<p>Was it fixable?</p>",
        "id": 208662199,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1598951496
    },
    {
        "content": "<p>How am I supposed to use <code>git fetch</code>? I am using git bash and I tried it using it plainly in a new folder and on a new leanproject, but it gives me an error: <code>fatal: not a git repository (or any of the parent directories): .git</code></p>",
        "id": 208667456,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1598954943
    },
    {
        "content": "<p>You have to enter the repo first</p>",
        "id": 208667489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598954984
    },
    {
        "content": "<p><code>cd my_lean_project</code></p>",
        "id": 208667498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598954991
    },
    {
        "content": "<p>That is what I did. I made a new leanproject and then while I was in that project I tried <code>git fetch</code> and I got that error.</p>",
        "id": 208667938,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1598955252
    },
    {
        "content": "<p>Did you use <code>leanproject get mathlib</code>, to make a copy of mathlib as a new project, or just <code>leanproject new</code>? If you use <code>leanproject new</code>, then git will not know that you want to make a copy of mathlib.</p>",
        "id": 208669492,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598956465
    },
    {
        "content": "<p>I initially tried <code>leanproject new</code> and it didn't work, but now I tried <code>leanproject get mathlib</code> and I still get the same error when trying <code>git fetch</code></p>",
        "id": 208671065,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1598957683
    },
    {
        "content": "<p>Then I suspect you are not in the correct directory. Can you run <code>pwd</code> in your terminal and copy the output here?</p>",
        "id": 208671103,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598957725
    },
    {
        "content": "<p>And also <code>ls -a</code>?</p>",
        "id": 208671122,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598957741
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131875\">@Alexandru-Andrei Bosinta</span> <code>leanproject get mathlib</code> will create a directory <code>mathlib</code> inside the directory where you currently are. You need to enter that directory before doing anything else.</p>",
        "id": 208671258,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598957873
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>. Now it worked.</p>",
        "id": 208672613,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1598958993
    },
    {
        "content": "<p>Well now I ran into another problem: I used leanproject build (because visual studio code was having excessive memory usage errors when I tried to look over a file normally) to compile it, but I got a ton of errors. Some were sorrys, but a lot were just errors. So many errors that if I try to post them all here I will run out of writing space. I am assuming I did something wrong, but I need some help figuring it out. Well, here are the first few errors. I can put more if needed. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">C</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">alexa</span><span class=\"err\">\\</span><span class=\"n\">OneDrive</span><span class=\"err\">\\</span><span class=\"n\">Desktop</span><span class=\"err\">\\</span><span class=\"n\">vierkantor</span><span class=\"err\">\\</span><span class=\"n\">mathlib</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">ring_theory</span><span class=\"err\">\\</span><span class=\"n\">noetherian</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">416</span><span class=\"o\">:</span><span class=\"mi\">47</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unexpected</span> <span class=\"n\">token</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">alexa</span><span class=\"err\">\\</span><span class=\"n\">OneDrive</span><span class=\"err\">\\</span><span class=\"n\">Desktop</span><span class=\"err\">\\</span><span class=\"n\">vierkantor</span><span class=\"err\">\\</span><span class=\"n\">mathlib</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">ring_theory</span><span class=\"err\">\\</span><span class=\"n\">noetherian</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">425</span><span class=\"o\">:</span><span class=\"mi\">47</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unexpected</span> <span class=\"n\">token</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">alexa</span><span class=\"err\">\\</span><span class=\"n\">OneDrive</span><span class=\"err\">\\</span><span class=\"n\">Desktop</span><span class=\"err\">\\</span><span class=\"n\">vierkantor</span><span class=\"err\">\\</span><span class=\"n\">mathlib</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">ring_theory</span><span class=\"err\">\\</span><span class=\"n\">noetherian</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">430</span><span class=\"o\">:</span><span class=\"mi\">24</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"err\">&#39;</span><span class=\"n\">module</span><span class=\"bp\">.</span><span class=\"n\">restrict_scalars&#39;</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">alexa</span><span class=\"err\">\\</span><span class=\"n\">OneDrive</span><span class=\"err\">\\</span><span class=\"n\">Desktop</span><span class=\"err\">\\</span><span class=\"n\">vierkantor</span><span class=\"err\">\\</span><span class=\"n\">mathlib</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">ring_theory</span><span class=\"err\">\\</span><span class=\"n\">noetherian</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">437</span><span class=\"o\">:</span><span class=\"mi\">6</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">definition</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"n\">declaration</span> <span class=\"n\">named</span> <span class=\"err\">&#39;</span><span class=\"n\">is_noetherian_ring_of_is_noetherian_coe_submodule&#39;</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">alexa</span><span class=\"err\">\\</span><span class=\"n\">OneDrive</span><span class=\"err\">\\</span><span class=\"n\">Desktop</span><span class=\"err\">\\</span><span class=\"n\">vierkantor</span><span class=\"err\">\\</span><span class=\"n\">mathlib</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">ring_theory</span><span class=\"err\">\\</span><span class=\"n\">noetherian</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">433</span><span class=\"o\">:</span><span class=\"mi\">38</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"err\">&#39;</span><span class=\"n\">order_embedding</span><span class=\"bp\">.</span><span class=\"n\">rsymm&#39;</span>\n<span class=\"n\">Additional</span> <span class=\"n\">information</span><span class=\"o\">:</span>\n<span class=\"n\">C</span><span class=\"o\">:</span><span class=\"err\">\\</span><span class=\"n\">Users</span><span class=\"err\">\\</span><span class=\"n\">alexa</span><span class=\"err\">\\</span><span class=\"n\">OneDrive</span><span class=\"err\">\\</span><span class=\"n\">Desktop</span><span class=\"err\">\\</span><span class=\"n\">vierkantor</span><span class=\"err\">\\</span><span class=\"n\">mathlib</span><span class=\"err\">\\</span><span class=\"n\">src</span><span class=\"err\">\\</span><span class=\"n\">ring_theory</span><span class=\"err\">\\</span><span class=\"n\">noetherian</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">433</span><span class=\"o\">:</span><span class=\"mi\">8</span><span class=\"o\">:</span> <span class=\"kn\">context</span><span class=\"o\">:</span> <span class=\"n\">switched</span> <span class=\"n\">to</span> <span class=\"n\">simple</span> <span class=\"n\">application</span> <span class=\"n\">elaboration</span> <span class=\"n\">procedure</span> <span class=\"n\">because</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">use</span> <span class=\"n\">expected</span> <span class=\"n\">type</span> <span class=\"n\">to</span> <span class=\"n\">elaborate</span> <span class=\"n\">it</span><span class=\"o\">,</span> <span class=\"n\">error</span> <span class=\"n\">message</span>\n  <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n    <span class=\"err\">?</span><span class=\"n\">m_5</span><span class=\"bp\">.</span><span class=\"n\">well_founded</span> <span class=\"err\">?</span><span class=\"n\">m_6</span>\n  <span class=\"n\">has</span> <span class=\"n\">type</span>\n    <span class=\"n\">well_founded</span> <span class=\"n\">has_lt</span><span class=\"bp\">.</span><span class=\"n\">lt</span>\n  <span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n    <span class=\"n\">well_founded</span> <span class=\"n\">gt</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">,</span>\n<span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_3</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_3</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">S</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">well_founded</span> <span class=\"n\">gt</span>\n<span class=\"err\">?</span> <span class=\"n\">well_founded</span> <span class=\"n\">gt</span>\n</code></pre></div>",
        "id": 208686693,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1598967027
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131875\">@Alexandru-Andrei Bosinta</span> Could you please post the output of <code>git log --oneline | head -20</code>?</p>",
        "id": 208687414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598967290
    },
    {
        "content": "<p>You should be able to get mathlib caches for free</p>",
        "id": 208687440,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598967302
    },
    {
        "content": "<p><code>leanproject build</code> is not something that one runs on a daily basis</p>",
        "id": 208687478,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598967321
    },
    {
        "content": "<p>The issue is that the last commit is broken. Let me fix it...</p>",
        "id": 208690325,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598968654
    },
    {
        "content": "<p>OK, pushed a fix for <code>noetherian.lean</code>.</p>",
        "id": 208690882,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598968873
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> This was the output: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">0</span><span class=\"n\">d833b6dd</span> <span class=\"n\">Merge</span> <span class=\"n\">branch</span> <span class=\"err\">&#39;</span><span class=\"n\">Vierkantor</span><span class=\"bp\">-</span><span class=\"n\">dedekind</span><span class=\"bp\">-</span><span class=\"n\">domain&#39;</span> <span class=\"n\">of</span> <span class=\"n\">https</span><span class=\"o\">:</span><span class=\"bp\">//</span><span class=\"n\">github</span><span class=\"bp\">.</span><span class=\"n\">com</span><span class=\"bp\">/</span><span class=\"n\">leanprover</span><span class=\"bp\">-</span><span class=\"n\">community</span><span class=\"bp\">/</span><span class=\"n\">mathlib</span> <span class=\"n\">into</span> <span class=\"n\">Vierkantor</span><span class=\"bp\">-</span><span class=\"n\">dedekind</span><span class=\"bp\">-</span><span class=\"n\">domain</span>\n<span class=\"n\">bffc04e65</span> <span class=\"n\">Trace</span> <span class=\"k\">in</span> <span class=\"n\">a</span> <span class=\"n\">simple</span> <span class=\"n\">field</span> <span class=\"n\">extension</span>\n<span class=\"mi\">55</span><span class=\"n\">c82b690</span> <span class=\"n\">Small</span> <span class=\"n\">fixes</span>\n<span class=\"mi\">712529538</span> <span class=\"n\">Finish</span> <span class=\"n\">primitive</span> <span class=\"n\">element</span> <span class=\"kn\">theorem</span>\n<span class=\"mi\">9</span><span class=\"n\">d4714fcd</span> <span class=\"n\">More</span> <span class=\"n\">progress</span> <span class=\"n\">on</span> <span class=\"n\">simple</span> <span class=\"n\">extensions</span>\n<span class=\"mi\">22</span><span class=\"n\">f533c5e</span> <span class=\"n\">A</span> <span class=\"n\">lot</span> <span class=\"n\">of</span> <span class=\"n\">progress</span> <span class=\"n\">toward</span> <span class=\"n\">primitive</span> <span class=\"n\">element</span> <span class=\"kn\">theorem</span>\n<span class=\"n\">b1b316693</span> <span class=\"n\">Don&#39;t</span> <span class=\"n\">depend</span> <span class=\"n\">on</span> <span class=\"bp\">`</span><span class=\"n\">adjoin</span><span class=\"bp\">`</span> <span class=\"k\">in</span> <span class=\"bp\">`</span><span class=\"n\">algebra_tower</span><span class=\"bp\">`</span>\n<span class=\"n\">a9445f8dc</span> <span class=\"n\">A</span> <span class=\"n\">lot</span> <span class=\"n\">of</span> <span class=\"n\">progess</span> <span class=\"n\">on</span> <span class=\"n\">simple</span> <span class=\"n\">field</span> <span class=\"n\">extensions</span>\n<span class=\"mi\">5</span><span class=\"n\">cf74fed8</span> <span class=\"bp\">`</span><span class=\"n\">is_noetherian_of_is_noetherian_top</span><span class=\"bp\">`</span>\n<span class=\"n\">dc7da7402</span> <span class=\"bp\">`</span><span class=\"n\">bilinear_form</span> <span class=\"bp\">&lt;-&gt;</span> <span class=\"n\">matrix</span><span class=\"bp\">`</span> <span class=\"n\">now</span> <span class=\"k\">with</span> <span class=\"n\">arbitrary</span> <span class=\"n\">basis</span>\n<span class=\"n\">d933856b6</span> <span class=\"n\">Clean</span> <span class=\"n\">up</span> <span class=\"k\">proof</span>\n<span class=\"mi\">918984910</span> <span class=\"n\">Some</span> <span class=\"n\">unfinished</span> <span class=\"n\">work</span> <span class=\"n\">on</span> <span class=\"n\">the</span> <span class=\"n\">trace</span>\n<span class=\"mi\">0</span><span class=\"n\">e6c2a641</span> <span class=\"n\">A</span> <span class=\"n\">set</span> <span class=\"n\">that</span> <span class=\"n\">spans</span> <span class=\"n\">the</span> <span class=\"n\">whole</span> <span class=\"n\">space</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">basis</span> <span class=\"k\">if</span> <span class=\"n\">it&#39;s</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">appropriate</span> <span class=\"n\">size</span>\n<span class=\"n\">ca88b16a8</span> <span class=\"n\">Aug5th</span> <span class=\"n\">End_of_Day</span>\n<span class=\"n\">beb519810</span> <span class=\"n\">Aug5</span>\n<span class=\"mi\">47</span><span class=\"n\">e72ada8</span> <span class=\"n\">Aug5</span>\n<span class=\"mi\">063</span><span class=\"n\">e3d4ed</span> <span class=\"n\">Aug4th</span>\n<span class=\"mi\">7</span><span class=\"n\">c3fe2b8d</span> <span class=\"n\">Some</span> <span class=\"n\">helper</span> <span class=\"n\">lemmas</span> <span class=\"n\">for</span> <span class=\"n\">showing</span> <span class=\"n\">the</span> <span class=\"n\">integral</span> <span class=\"n\">closure</span> <span class=\"n\">is</span> <span class=\"n\">noetherian</span>\n<span class=\"n\">f31eae314</span> <span class=\"n\">Update</span> <span class=\"n\">mathlib</span>\n<span class=\"n\">a91192155</span> <span class=\"n\">refactor</span><span class=\"o\">(</span><span class=\"n\">linear_algebra</span><span class=\"bp\">/*</span><span class=\"o\">):</span> <span class=\"n\">postpone</span> <span class=\"n\">importing</span> <span class=\"n\">material</span> <span class=\"n\">on</span> <span class=\"n\">direct</span> <span class=\"n\">sums</span> <span class=\"o\">(</span><span class=\"bp\">#</span><span class=\"mi\">3484</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I only ran <code>leanproject build</code> because it seemed like my only option to get it to work. I tried to look over trace.lean (didn't modify anything) and after a long wait I got like 600 errors which all seemed to be related to excessive memory usage. Then I used <code>leanproject build</code> and my comment from before is what I got from it. <br>\nThank you <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> for your fix. I got the new commit and I am hoping it will work this time, but it is taking its time to compile.</p>",
        "id": 208693244,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1598969959
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"131875\">@Alexandru-Andrei Bosinta</span> I don't know how much <code>git</code> you know, so you should tell me if I'm boring you.</p>",
        "id": 208693797,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598970193
    },
    {
        "content": "<p><code>leanproject get-cache</code> will use the top-most commit number to check whether there is a precompiled version of mathlib available.</p>",
        "id": 208693885,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598970237
    },
    {
        "content": "<p>I know pretty much nothing about <code>git</code>, so you won't be able to bore me</p>",
        "id": 208693901,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1598970241
    },
    {
        "content": "<p>But if that commit exists only on your computer, than of course you are stuck</p>",
        "id": 208693971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598970258
    },
    {
        "content": "<p>In your case, you the top-most commit is the result of you trying to pull commits from github and merge them into what you have locally</p>",
        "id": 208694049,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598970295
    },
    {
        "content": "<p>So, if you make sure you <code>get-cache</code> before you do that git pull, than you will have a decently recent set of olean files.</p>",
        "id": 208694170,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598970335
    },
    {
        "content": "<p>You could do</p>\n<div class=\"codehilite\"><pre><span></span><code>git checkout bffc04e65 <span class=\"c1\"># change to the previous commit</span>\nleanproject get-cache\ngit checkout 0d833b6dd <span class=\"c1\"># go back to the top of the log</span>\n</code></pre></div>",
        "id": 208694351,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598970403
    },
    {
        "content": "<p>There are still some errors, let's see if I can fix them. I must have updated to a newer mathlib without updating some definitions...</p>",
        "id": 208695625,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598970918
    },
    {
        "content": "<p>OK, I think now everything builds up to some <code>sorry</code>s in <code>dedekind_domain.lean</code> itself.</p>",
        "id": 208696215,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1598971161
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I did the commands you said (in the folder with the branch I got earlier) and then I tried again to look over a file and again I got like 200 errors similar to:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">option</span><span class=\"bp\">.</span><span class=\"n\">defs</span>\n<span class=\"n\">excessive</span> <span class=\"n\">memory</span> <span class=\"n\">consumption</span> <span class=\"n\">detected</span> <span class=\"n\">at</span> <span class=\"err\">&#39;</span><span class=\"n\">expression</span> <span class=\"n\">traversal&#39;</span> <span class=\"o\">(</span><span class=\"n\">potential</span> <span class=\"n\">solution</span><span class=\"o\">:</span> <span class=\"n\">increase</span> <span class=\"n\">memory</span> <span class=\"n\">consumption</span> <span class=\"n\">threshold</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Though I did not get the new commit with the new fixes, but I imagine the same thing will happen even if I do get it. Is there a solution to this, or do I just have to do <code>leanproject build</code> and hope it works?</p>",
        "id": 208699445,
        "sender_full_name": "Alexandru-Andrei Bosinta",
        "timestamp": 1598972413
    },
    {
        "content": "<p>Just close VS code and open it again, or restart lean with ctrl-,shift p lean: restart</p>",
        "id": 208748903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598994536
    },
    {
        "content": "<p>Hi there! I am a number theorist and I am interested in working with Lean. I would like to contribute to the part about Dedekind domain: do you have some small lemma  I can try to prove? I mean, some <code>sorry</code> that I can complete without too much effort (I am still a beginner)? Thank you!</p>",
        "id": 209364380,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1599557832
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> What is the current story with Dedekind domains? I would really like a definition in mathlib -- I don't even care about the API. Do we have a definition yet? I am edgy about sorrying data and I don't want to build on a definition which might change in the PR process or whatever</p>",
        "id": 209364677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599558040
    },
    {
        "content": "<p>There are a bunch of extremely competent mathematicians appearing here like Riccardo and <span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> , who know this material back to front and it would be interesting to see if they can learn Lean by proving theorems at this level of abstraction -- it will provide a good test for our API to see if Lean can model how they're thinking.</p>",
        "id": 209364808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599558123
    },
    {
        "content": "<p>But definitions are hard. I am still struggling with the definition of the valuation on a DVR because of stupid design decisions -- the issues are not mathematical, they are simply that I am not good at definitions. I guess what I'm saying is the sooner we get the definition established, the sooner we can start building the API.</p>",
        "id": 209364933,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599558201
    },
    {
        "content": "<p>I was just about to ping <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> to ask for a new review of the PR, since it's looking good to me.</p>",
        "id": 209365058,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599558282
    },
    {
        "content": "<p>There are also students at Imperial who would be interested in this stuff. I think that you can go a long way with DVRs and Dedekind Domains, there is a big API which as a graduate student I once worked through -- see the first two chapters of Cassels--Froehlich.</p>",
        "id": 209365061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599558285
    },
    {
        "content": "<p>(<span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , could you please review <a href=\"https://github.com/leanprover-community/mathlib/issues/4000\">#4000</a> again? :)</p>",
        "id": 209365137,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599558343
    },
    {
        "content": "<p>I can take a look too</p>",
        "id": 209365196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599558366
    },
    {
        "content": "<p>I'll do it now.</p>",
        "id": 209365210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599558376
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 209365220,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599558384
    },
    {
        "content": "<p>NB I'm slow :-) I'm reading it now.</p>",
        "id": 209365388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599558507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> Done</p>",
        "id": 209366818,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599559411
    },
    {
        "content": "<p>I'll wait a bit to see if Kevin has comments. After that, we can merge this.</p>",
        "id": 209368183,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599560359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Fixed.</p>",
        "id": 209368185,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599560360
    },
    {
        "content": "<p>yes please wait, I'm about half way through</p>",
        "id": 209368197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599560372
    },
    {
        "content": "<p>I'm having to read a bunch of stuff I've not looked at before, like fractional_ideal.lean</p>",
        "id": 209368214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599560395
    },
    {
        "content": "<p>So the big theorem should be that for a Dedekind domain, the monoid of fractional ideals is a group with zero?</p>",
        "id": 209368296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599560453
    },
    {
        "content": "<p>because apparently 0 is a fractional ideal</p>",
        "id": 209368331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599560495
    },
    {
        "content": "<p>I was never sure but I'm happy with the decision</p>",
        "id": 209368340,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599560506
    },
    {
        "content": "<p>All the others are locally free of rank 1, and this has rank 0</p>",
        "id": 209368382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599560523
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Dedekind.20domains/near/209368296\">said</a>:</p>\n<blockquote>\n<p>So the big theorem should be that for a Dedekind domain, the monoid of fractional ideals is a group with zero?</p>\n</blockquote>\n<p>Yes, <code>is_dedekind_domain_inv</code> is the definition using this condition. The additions in <code>fractional_ideal</code> allow us to transfer this condition from one choice of field of fractions to another (<code>is_dedekind_domain_iff</code>).</p>",
        "id": 209368914,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599560988
    },
    {
        "content": "<p>why are you making all these other structures?</p>\n<p>I'm nearly done by the way.</p>",
        "id": 209370951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599562655
    },
    {
        "content": "<p>OK I reviewed.</p>",
        "id": 209371096,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599562794
    },
    {
        "content": "<p>I don't have time to read Zulip for the next few hours but if you ping me I'll maybe spot the notification</p>",
        "id": 209371209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599562869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Dedekind.20domains/near/209371096\">said</a>:</p>\n<blockquote>\n<p>OK I reviewed.</p>\n</blockquote>\n<p>Thank you.</p>\n<p>My expectation is that two of the structures are temporary. The advantage of making this PR packing each definition in a structure is to agree on the types of constructors/destructors, which were already diverging between me and <span class=\"user-mention\" data-user-id=\"319839\">@Kenji Nakagawa</span>. Defining the API with only the <code>is_dedekind_domain</code> structure requires the use of <code>sorry</code>. It would be possible, but definitely not in mathlib master and so it will be liable to diverge again. Once the implications are there, to delete the structures, we should just be able to fix existing code by removing the <code>_dvr</code> and <code>_inv</code> parts of the names.</p>",
        "id": 209379006,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1599568243
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> There were a couple of more replies to your questions. Could you please take a look. If you are happy with how things are (for this PR), please let me know.</p>",
        "id": 209471157,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1599626061
    },
    {
        "content": "<p>I'll look within a few hours</p>",
        "id": 209472471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599628200
    },
    {
        "content": "<p>I think roughly in order to prove at least one side of the <code>_dvr \\iff is_dedekind_domain</code> it would be nice to have R is a DVR iff local <code>is_dedekind_domain</code>. And I suppose this also suggests that we should have a PID <code>is_dedekind_domain</code>. If anyone has progress towards this, that would be of great help.</p>",
        "id": 209738724,
        "sender_full_name": "Kenji Nakagawa",
        "timestamp": 1599796566
    },
    {
        "content": "<p>What is the status of Dedekind domains now? We have the definition but are there any other PRs or branches working on stuff?</p>",
        "id": 209745244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599806073
    },
    {
        "content": "<p>I am having real problems with making the valuation on a DVR for completely stupid non-mathematical reasons (see the multiplicity thread)</p>",
        "id": 209745278,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599806134
    },
    {
        "content": "<p>I'm currently looking at proving the DVR and integrally closed definitions are equivalent. I believe that currently <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> is working on prime factorization, and <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> is working towards proving that the ring of integers of a number field is a dedekind domain. As for where this is happening, the github project page is up to date, and the two branches <a href=\"https://github.com/leanprover-community/mathlib/tree/mushokunosora-dedekind\">branch#mushokunosora-dedekind</a> and <a href=\"https://github.com/leanprover-community/mathlib/tree/Vierkantor-dedekind-domain\">branch#Vierkantor-dedekind-domain</a> don't have overlapping work or divergence.</p>\n<p>I believe awhile ago someone had mentioned progress on something about the class group, but that's about as much as I know.</p>",
        "id": 209749478,
        "sender_full_name": "Kenji Nakagawa",
        "timestamp": 1599809872
    },
    {
        "content": "<p>Thanks for the update. In future I'll just look at the project page</p>",
        "id": 209753943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1599813470
    },
    {
        "content": "<p>May I revive this chat to ask what the current status of proving equivalences between the several definitions of dvrs and Dedekind domains is? I'm interested in writing some of these lemmas but not sure which branch to checkout.</p>",
        "id": 221462997,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1609696846
    },
    {
        "content": "<p>I think everything I did, I PR'ed.</p>",
        "id": 221464337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609698798
    },
    {
        "content": "<p>I have been working on changing the definition of a valuation, a recent PR I wrote about ordered monoids got merged so I think I can go ahead and change this now</p>",
        "id": 221464397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1609698873
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"248716\">Lambert A'Campo</span> <a href=\"#narrow/stream/116395-maths/topic/Dedekind.20domains/near/221462997\">said</a>:</p>\n<blockquote>\n<p>May I revive this chat to ask what the current status of proving equivalences between the several definitions of dvrs and Dedekind domains is? I'm interested in writing some of these lemmas but not sure which branch to checkout.</p>\n</blockquote>\n<p>I think <span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span>  and <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span>  might be able to tell you more. I am yet to PR what I did, which is on the <code>dd-iff</code> branch.</p>",
        "id": 221493060,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1609741904
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"248716\">@Lambert A'Campo</span> If you leave us a couple of days, we should be able to clarify all the situation and let you know what is still to be done!</p>",
        "id": 221500081,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1609749793
    },
    {
        "content": "<p>Ok as practice I spent the afternoon writing a proof for the following lemma: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/--</span>\n<span class=\"sd\">A local noetherian integral domain `R` such that the maximal ideal of `R` is principal</span>\n<span class=\"sd\">and the unique non-zero prime ideal (i.e. `R` has Krull dimension 1)</span>\n<span class=\"sd\">is a discrete valuation ring.</span>\n<span class=\"sd\">-/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">of_principal_unique_prime_ideal</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">local_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Inoetherian</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">Hprincipal</span> <span class=\"o\">:</span> <span class=\"n\">maximal_ideal</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">ideal.span</span> <span class=\"o\">{</span><span class=\"n\">p</span><span class=\"o\">})</span>\n  <span class=\"o\">(</span><span class=\"n\">Hunique</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">I</span> <span class=\"bp\">≠</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">I.is_prime</span> <span class=\"bp\">→</span> <span class=\"n\">I</span> <span class=\"bp\">=</span> <span class=\"n\">maximal_ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">Hnon_zero</span> <span class=\"o\">:</span> <span class=\"n\">maximal_ideal</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span>\n</code></pre></div>\n<p>My code compiles but is very ugly, should I push it to the <code>dd-iff</code> branch?</p>",
        "id": 221547121,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1609778438
    },
    {
        "content": "<p>sure</p>",
        "id": 221548506,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1609779050
    },
    {
        "content": "<p>ok I just saw I don't have permission to do that anyways</p>",
        "id": 221550773,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1609779969
    },
    {
        "content": "<p>could push it now</p>",
        "id": 221557538,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1609783108
    }
]