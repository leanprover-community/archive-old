[
    {
        "content": "<p>The following code defines an equivalence :<br>\n<code>fin_oplus_fin_equiv_fin {m n a : ℕ} (ham : a ≤ m): (fin m) ⊕ (fin n) ≃ fin (m + n) </code><br>\nthat inserts the <code>fin n</code> after place <code>a</code> of the given <code>fin m</code>.<br>\nHowever, to prove the <code>right_inv</code> property, I was forced to define the <code>to_fun </code> and <code>inv_fun</code> parts<br>\noutside of the definition of the <code>equiv</code>, because otherwise, Lean wouldn't <code>simp</code> the inner argument.<br>\nI tried some other ways, but this is the only thing I could do…</p>\n<p>Any advice ?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">aux_i</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ham</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">xy</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xy</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">fin.cast_le</span> <span class=\"o\">(</span><span class=\"n\">le_self_add</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">fin.add_nat</span> <span class=\"n\">n</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">fin.cast_le</span> <span class=\"o\">(</span><span class=\"n\">add_le_add_right</span> <span class=\"n\">ham</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">fin.nat_add</span> <span class=\"n\">a</span> <span class=\"n\">y</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">aux_j</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ham</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">):</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sum.inl</span> <span class=\"o\">(</span><span class=\"n\">fin.cast_le</span> <span class=\"n\">ham</span> <span class=\"o\">⟨</span><span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">⟩),</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hz'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sum.inr</span> <span class=\"o\">(⟨</span><span class=\"n\">z</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lt_iff_not_le</span><span class=\"o\">,</span> <span class=\"n\">nat.le_sub_iff_right</span> <span class=\"o\">(</span><span class=\"n\">not_lt.mp</span> <span class=\"n\">hz</span><span class=\"o\">),</span> <span class=\"bp\">←</span> <span class=\"n\">lt_iff_not_le</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">n</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hz'</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">⟩),</span>\n  <span class=\"n\">exact</span> <span class=\"n\">sum.inl</span> <span class=\"o\">(⟨(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">lt_iff_not_le</span><span class=\"o\">,</span> <span class=\"n\">nat.le_sub_iff_right</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_add_self</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">not_lt.mp</span> <span class=\"n\">hz'</span><span class=\"o\">)),</span> <span class=\"bp\">←</span> <span class=\"n\">lt_iff_not_le</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">z.prop</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">⟩),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fin_oplus_fin_equiv_fin</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ham</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n<span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">aux_i</span> <span class=\"n\">ham</span><span class=\"o\">,</span>\n<span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">aux_j</span> <span class=\"n\">ham</span><span class=\"o\">,</span>\n<span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">xy</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">aux_j</span><span class=\"o\">,</span> <span class=\"n\">aux_i</span><span class=\"o\">],</span>\n  <span class=\"n\">induction</span> <span class=\"n\">xy</span> <span class=\"k\">with</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_lt</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_ite</span><span class=\"o\">,</span> <span class=\"n\">fin.cast_le_mk</span><span class=\"o\">],</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.insert_fin</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"o\">],</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_lt</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_cast_le</span><span class=\"o\">,</span> <span class=\"n\">fin.eta</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_left_iff</span><span class=\"o\">],</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">not_le.mpr</span> <span class=\"n\">hx</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">if_false</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_add_nat</span><span class=\"o\">,</span> <span class=\"n\">add_lt_add_iff_right</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span>\n      <span class=\"n\">add_tsub_cancel_right</span><span class=\"o\">,</span> <span class=\"n\">fin.eta</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_right_iff</span><span class=\"o\">],</span>\n      <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">lt_of_le_of_lt</span> <span class=\"o\">(</span><span class=\"n\">le_self_add</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_nat_add</span><span class=\"o\">,</span> <span class=\"n\">fin.cast_le_mk</span><span class=\"o\">],</span>\n    <span class=\"n\">split_ifs</span> <span class=\"k\">with</span> <span class=\"n\">hy</span> <span class=\"n\">hy'</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">not_le.mpr</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">le_self_add</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_cast_le</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_nat_add</span><span class=\"o\">,</span> <span class=\"n\">add_tsub_cancel_left</span><span class=\"o\">,</span> <span class=\"n\">fin.eta</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">fin.coe_cast_le</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_nat_add</span><span class=\"o\">,</span> <span class=\"n\">add_lt_add_iff_left</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hy'</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">hy'</span> <span class=\"n\">y.prop</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">aux_j</span><span class=\"o\">],</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hz</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">fin.cast_le_mk</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span><span class=\"o\">],</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">aux_i</span><span class=\"o\">,</span> <span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">fin.cast_le_mk</span><span class=\"o\">,</span> <span class=\"n\">fin.eta</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_ite</span><span class=\"o\">,</span> <span class=\"n\">if_true</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">hz'</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">subtype.coe_inj</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">hz'</span><span class=\"o\">,</span> <span class=\"n\">aux_i</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">fin.cast_le_mk</span><span class=\"o\">,</span> <span class=\"n\">dif_pos</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span><span class=\"o\">,</span> <span class=\"n\">fin.nat_add_mk</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_mk</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">add_comm</span> <span class=\"n\">a</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n      <span class=\"n\">refine</span> <span class=\"n\">nat.sub_add_cancel</span> <span class=\"o\">(</span><span class=\"n\">not_lt.mp</span> <span class=\"n\">hz</span><span class=\"o\">),</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">subtype.coe_inj</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hz</span><span class=\"o\">,</span> <span class=\"n\">hz'</span><span class=\"o\">,</span> <span class=\"n\">aux_i</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">fin.cast_le_mk</span><span class=\"o\">,</span> <span class=\"n\">dif_neg</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_mk</span><span class=\"o\">,</span> <span class=\"n\">fin.add_nat_mk</span><span class=\"o\">,</span> <span class=\"n\">dite_eq_ite</span><span class=\"o\">],</span>\n      <span class=\"k\">suffices</span> <span class=\"n\">hz''</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"o\">((</span><span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">),</span>\n      <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hz''</span><span class=\"o\">,</span> <span class=\"n\">if_false</span><span class=\"o\">,</span> <span class=\"n\">fin.coe_mk</span><span class=\"o\">],</span>\n      <span class=\"n\">apply</span> <span class=\"n\">nat.sub_add_cancel</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">le_add_self</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">not_lt.mp</span> <span class=\"n\">hz'</span><span class=\"o\">),</span>\n      <span class=\"n\">intro</span> <span class=\"n\">hz''</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">hz'</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">lt_add_of_tsub_lt_right</span> <span class=\"n\">hz''</span><span class=\"o\">,</span> <span class=\"o\">},</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 300693929,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1664142835
    },
    {
        "content": "<p>(A related question would be how, in the definition of a structure, to access some already defined fields.)</p>",
        "id": 300693983,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1664142898
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 300694501,
        "sender_full_name": "Bob Bass",
        "timestamp": 1664143372
    },
    {
        "content": "<p>Found the mathlib definition, if you want to take a look how it was done: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_sum_fin_equiv\">docs#fin_sum_fin_equiv</a></p>",
        "id": 300694845,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664143653
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_sum_fin_equiv\">docs#fin_sum_fin_equiv</a> doesn't have the flexibility of inserting at any place though. If you inline aux_i and aux_j, you just need a <code>dsimp only</code> to achieve (almost) the same effect as <code>simp only [aux_i, aux_j]</code>. I think you may also consider using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.split_at\">docs#list.split_at</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.append\">docs#list.append</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/list.nth_le\">docs#list.nth_le</a> to construct the backward direction.</p>",
        "id": 300695804,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664144494
    },
    {
        "content": "<p>Inserting at any place can be achieved by composing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/equiv.add_left\">docs#equiv.add_left</a> on the input and output appropriately, right?</p>",
        "id": 300696438,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1664145069
    },
    {
        "content": "<p>rather, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin_rotate\">docs#fin_rotate</a> should work better (no need of abusing defeq between zmod and fin, and works for n=0)</p>",
        "id": 300696868,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1664145487
    },
    {
        "content": "<p>Ah, I didn't read what the description of the needed equivalence well enough.</p>",
        "id": 300705257,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664154258
    },
    {
        "content": "<p>There are enough equivalences in mathlib to create this equivalence without needing to descend to terms:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.equiv.fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.zify</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic.ring</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fin_oplus_fin_equiv_fin</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ham</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">⊕</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">calc</span> <span class=\"n\">fin</span> <span class=\"n\">m</span> <span class=\"bp\">⊕</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">⊕</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:</span>\n    <span class=\"n\">equiv.sum_congr</span> <span class=\"o\">(</span><span class=\"n\">fin.cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"n\">ham</span><span class=\"o\">],</span> <span class=\"n\">ring</span><span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">a</span> <span class=\"bp\">⊕</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">⊕</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"o\">:</span>\n    <span class=\"n\">equiv.sum_congr</span> <span class=\"n\">fin_sum_fin_equiv.symm</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">a</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">equiv.sum_assoc</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">a</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">⊕</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">equiv.sum_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">equiv.sum_comm</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"n\">a</span> <span class=\"bp\">⊕</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n    <span class=\"n\">equiv.sum_congr</span> <span class=\"o\">(</span><span class=\"n\">equiv.refl</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">fin_sum_fin_equiv</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)))</span> <span class=\"o\">:</span> <span class=\"n\">fin_sum_fin_equiv</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin.cast</span> <span class=\"o\">(</span><span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">zify</span> <span class=\"o\">[</span><span class=\"n\">ham</span><span class=\"o\">],</span> <span class=\"n\">ring</span> <span class=\"o\">}))</span><span class=\"bp\">.</span><span class=\"n\">to_equiv</span>\n</code></pre></div>",
        "id": 300705264,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1664154281
    },
    {
        "content": "<p>Neat. Do you also have a proof that it is the equivalence Antoine was looking for? :)</p>",
        "id": 300720991,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664170915
    },
    {
        "content": "<p>I am impressed by Kyle's alternative definition (in fact, <code>calc</code> is a tactic I'm not enough used to),.</p>\n<p>But this does not really answer my question which was that without an external definition of <code>aux_i</code>, everything was expanded too soon and the compiler wasn't able to rewrite something at the required depth.<br>\nSomething I would like to be able to do is to rewrite <code>right_inv</code> as having to prove<code>λ z, to_fun (inv_fun z) = z</code>, and then expanding <code>inv_fun</code>, etc.</p>",
        "id": 300752542,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1664185608
    },
    {
        "content": "<p>You can do something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">logic.equiv.fin</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">fin_oplus_fin_equiv_fin</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ham</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">≃</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">let</span> <span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">xy</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span> <span class=\"k\">in</span>\n<span class=\"k\">let</span> <span class=\"n\">inv_fun</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"bp\">⊕</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span> <span class=\"k\">in</span>\n<span class=\"o\">{</span>\n<span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">to_fun</span><span class=\"o\">,</span>\n<span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"n\">inv_fun</span><span class=\"o\">,</span>\n<span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">xy</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span> <span class=\"c1\">-- inv_fun (to_fun xy) = xy</span>\n<span class=\"kd\">end</span><span class=\"o\">,</span>\n<span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- to_fun (inv_fun z) = z</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">inv_fun</span><span class=\"o\">],</span>\n  <span class=\"c1\">-- to_fun (expanded version) = z</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 300764507,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1664190486
    },
    {
        "content": "<p>I nerd-sniped myself and got lost in a maze of <code>fin</code> casting functions, but came out with a proof that Kyle's construction works: <a href=\"https://gist.github.com/Ruben-VandeVelde/9af0d23e0909719f7247e740bf3efbdf\">https://gist.github.com/Ruben-VandeVelde/9af0d23e0909719f7247e740bf3efbdf</a></p>",
        "id": 300816060,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1664199492
    }
]