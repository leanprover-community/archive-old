[
    {
        "content": "<p>Seeing as the representation theory of groups is being built, would it be worth defining subrepresentations and representation homomorphisms, copying a lot of lemmas over from submodules and linear maps?</p>",
        "id": 287510722,
        "sender_full_name": "Winston Yin",
        "timestamp": 1656273026
    },
    {
        "content": "<p>They would be defined as:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">subrepresentation</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">submodule</span> <span class=\"n\">k</span> <span class=\"n\">V</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smulG_mem'</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span> <span class=\"bp\">→</span> <span class=\"n\">ρ</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">carrier</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">rep_hom</span>\n  <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span> <span class=\"n\">V'</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">monoid</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">V'</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">k</span> <span class=\"n\">V'</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"o\">:</span> <span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ρ'</span> <span class=\"o\">:</span> <span class=\"n\">representation</span> <span class=\"n\">k</span> <span class=\"n\">G</span> <span class=\"n\">V'</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">k</span><span class=\"o\">]</span> <span class=\"n\">V'</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">smul_comm</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">),</span> <span class=\"n\">ρ'</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">ρ</span> <span class=\"n\">g</span> <span class=\"n\">x</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 287510737,
        "sender_full_name": "Winston Yin",
        "timestamp": 1656273050
    },
    {
        "content": "<p>My immediate instinct is \"yes\"! But perhaps others should weigh in. Is there some trick where you deduce everything from <code>submodule</code> and the fact that it's a k[G]-module?</p>",
        "id": 287511687,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656274299
    },
    {
        "content": "<p>I actually did most of the work for this about a year ago but that was before <code>Rep</code> and <code>representation</code> were defined the way they are now. I essentially copy-pasted the lemmas from <code>submodule</code> and <code>linear_map</code> (before the semilinear map rewrite) with minimal modification</p>",
        "id": 287511825,
        "sender_full_name": "Winston Yin",
        "timestamp": 1656274456
    },
    {
        "content": "<p>I also made a <a href=\"https://github.com/leanprover-community/mathlib/tree/representation_theory_winstonyin\">branch</a> containing some other lemmas for the direct sum of <code>fdRep</code>s. Would very much welcome suggestions towards a PR.</p>",
        "id": 287511933,
        "sender_full_name": "Winston Yin",
        "timestamp": 1656274584
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"416472\">@Winston Yin</span> I would also say, yes we want these definitions. Indeed they are exactly analogous to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_submodule\">docs#lie_submodule</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/lie_module_hom\">docs#lie_module_hom</a> which we have had for some time and which seem to work well.</p>",
        "id": 287513987,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1656277410
    },
    {
        "content": "<p>I would add that at some point we should probably start leaning on our powerful category theory library for things like this though. For example I note that we have an open PR (which I hope to see merged soon) <a href=\"https://github.com/leanprover-community/mathlib/pull/14308\">#14308</a> in which certain maps are shown to be morphisms of G-modules using our category theory library.</p>",
        "id": 287514135,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1656277575
    },
    {
        "content": "<p>This latter approach is less well explored though. In the case of <a href=\"https://github.com/leanprover-community/mathlib/pull/14308\">#14308</a> it is likely a win because I believe our category theory is likely to be very valuable when working with cohomology.</p>",
        "id": 287514222,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1656277700
    },
    {
        "content": "<p>So far I've been doing a little experiment to try to work as much as possible with the category theory library while developping representation theory, which is why we don't have things like <code>rep_hom</code> or <code>rep_equiv</code>. I still think it's good eventually to have both, so feel free to add these things!</p>",
        "id": 287516974,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1656281794
    },
    {
        "content": "<p>Also I noticed on your branch that you go through matrices to prove the formula for the trace of a direct sum. It's ok but you can probably get a much neater proof by using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.trace_eq_contract\">docs#linear_map.trace_eq_contract</a> (see the proof of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.trace_prod_map\">docs#linear_map.trace_prod_map</a> for an example).</p>",
        "id": 287517131,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1656282068
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> With the current approach this seems complicated to do because representations don't come with an instance of <code>module (monoid_algebra k G)</code>, due to possibke diamonds in the case of different representations on the same vector space.</p>",
        "id": 287517373,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1656282386
    },
    {
        "content": "<p>What I did last year was to define representation to extent the module class together with a smul commutation condition. I realised that this makes it tricky to compare different representations of the same vector space.</p>\n<p>I'll look into simplifying the direct sum proofs with your suggestions <span class=\"user-mention\" data-user-id=\"329754\">@Antoine Labelle</span>, thank you. I find that I am not so good at writing concise proofs but rely much on Lean's automation magic.</p>\n<p>I especially find that <code>direct_sum</code>, <code>dfinsupp</code>, etc are quite tricky to use in proofs. Lean frequently has trouble inferring type classes. Variable declarations are generally verbose. <code>rw</code> and <code>subst</code> often don't work because expressions are tucked behind a <code>λ i : ι</code>.  Maybe there's some trick I'm missing.</p>\n<p>As for proofs generalised by category theory, I wish I knew enough category theory to help.</p>",
        "id": 287522043,
        "sender_full_name": "Winston Yin",
        "timestamp": 1656289817
    },
    {
        "content": "<p>If <code>rw</code> doesn't work for this kind of reason I think <code>simp only</code> often work</p>",
        "id": 287524194,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1656293160
    },
    {
        "content": "<p>In this <a href=\"https://github.com/leanprover-community/mathlib/tree/representation_theory_winstonyin\">branch</a> are the following things: homomorphisms and equivalences between representations, subrepresentation, lattice of subreps, irreducibility and Schur’s Lemma, direct sum representation</p>",
        "id": 288888404,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657246050
    },
    {
        "content": "<p>A lot of these are directly copied and modified from linear_map, linear_equiv, submodule, submodule.lattice. Not sure if all of the duplication is necessary</p>",
        "id": 288888565,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657246258
    },
    {
        "content": "<p>Need some advice on which parts could be turned into a PR</p>",
        "id": 288888592,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657246297
    },
    {
        "content": "<p>Wow that all looks really cool! You should probably break this down into a bunch of separate PRs by themes.<br>\nI'll try to look more closely later, for now just a quick comment, the <code>average</code> map you defined already exists, see the <code>representation_theory/invariants</code> file.</p>",
        "id": 288893304,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657251591
    },
    {
        "content": "<p>Oh that’s cool! I’ll look at it. Who is developing representation theory currently? I should talk to them and try not to step on their toes</p>",
        "id": 288900215,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657258478
    },
    {
        "content": "<p>Specifically, it would be nice to discuss when to use the category theory definitions <code>Rep</code> and <code>fdRep</code> and when to use the explicit <code>representation</code></p>",
        "id": 288901025,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657259512
    },
    {
        "content": "<p>For example, currently to specify the character of a representation ρ, one needs to say <code>(fdRep.of ρ).character</code>, when it would be more straightforward to define <code>ρ.character</code> directly</p>",
        "id": 288901581,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657260170
    },
    {
        "content": "<p>Yes, so far representation theory has been develloped mostly by me and <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span>. I would be happy to discuss any questions you have regarding the approach to take.</p>",
        "id": 288933918,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657283784
    },
    {
        "content": "<p>About the <code>representation</code> v.s. <code>Rep</code>/<code>fdRep</code> question, as I mentioned somewhere above I am doing a kind of experiment to see if most of the theory can be developed using the category theory library, which is why <code>character</code> is only defined for <code>fdRep</code>. The idea is that when talking about characters the variables should always be of type <code>fdRep</code> and the construction of new representations should occur as much as possible within <code>fdRep</code>, so that you don't have to do things like <code>(fdRep.of ρ).character</code>. You can look at <a href=\"#narrow/stream/116395-maths/topic/Representation.20Theory/near/286095492\">this thread</a> for some discussion about that.</p>",
        "id": 288936392,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657285160
    },
    {
        "content": "<p>Now, what I've observed is that this works fairly well as long as we can indeed do everything internal to <code>fdRep</code>, but since the API for <code>Rep</code>/<code>fdRep</code>is still something in progress and not fully developed, it's not always possible and sometimes annoying back-and-forth between the categorical and non-categorical libraries is needed. For example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/representation.lin_hom\">docs#representation.lin_hom</a> in categorical language should be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.ihom\">docs#category_theory.ihom</a>, but since we don't have yet that <code>Rep</code> and <code>fdRep</code> are closed categories (i.e. <code>ihom</code> is always defined) the statement of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fdRep.char_lin_hom\">docs#fdRep.char_lin_hom</a> requires <code>fdRep.of</code> (I do plan on adding the closed structure and fixing that in the future though).</p>",
        "id": 288938998,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657286447
    },
    {
        "content": "<p>But this is really an experiment, so if you want to develop the API for representations in a more classical way, replicating all the <code>linear_map</code> API you're also welcome to do it.</p>",
        "id": 288939932,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657286885
    },
    {
        "content": "<p>Let me know if you have any other questions.</p>",
        "id": 288940221,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657287044
    },
    {
        "content": "<p>Replicating the <code>linear_map</code> API is not ideal but it’s the most straightforward thing I could do. However, I would also like to understand the benefits of the categorical approach. Is the main idea that the restrictions on V are now contained as a field in the fdRep structure rather than using type class in the hypotheses? How would one express additional conditions on V, say, <code>smul_comm_class k’ k V</code> for some other <code>k’</code>?</p>",
        "id": 288980924,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657307193
    },
    {
        "content": "<p>I think the main benefit of the categorical approach is precisely to avoid replicating all the API for morphisms, equivalences, subobjects, products, etc. whenever we want to define a new kind of structure. Instead of repeatedly proving the same things in different contexts, it's nice to prove them once and for all for general categories (with suitable extra structure; monoidal, braided, closed, etc.) and then to apply them in various contexts.</p>",
        "id": 288983252,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657308461
    },
    {
        "content": "<p>If we want to look at representations with additional structure or conditions, we can simply define a new category for these and possibly some forgetful functor that relate it to <code>fdRep</code>.</p>",
        "id": 288983601,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657308680
    },
    {
        "content": "<p>Made a PR <a href=\"https://github.com/leanprover-community/mathlib/pull/15196\">#15196</a> for <code>rep_hom</code> and <code>rep_equiv</code>. I figured I should push these while I try to understand how it works in category theory</p>",
        "id": 289006916,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657325129
    },
    {
        "content": "<p>I left a few comments. You have a weird linting error that you should try to fix by the way, you can ask for help in another thread if you can't fix it.</p>",
        "id": 289271570,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657592246
    },
    {
        "content": "<p>Thanks, Antoine!</p>",
        "id": 289292461,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657614358
    },
    {
        "content": "<p>I also finally spent some time learning category theory, with the hope that I'll start to understand some of your and Scott's work</p>",
        "id": 289292567,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657614431
    },
    {
        "content": "<blockquote>\n<p>For example <a href=\"https://leanprover-community.github.io/mathlib_docs/find/representation.lin_hom\">docs#representation.lin_hom</a> in categorical language should be <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.ihom\">docs#category_theory.ihom</a>, but since we don't have yet that Rep and fdRep are closed categories</p>\n</blockquote>\n<p>It seems to me that <code>lin_hom</code> is not exactly <code>ihom</code> on <code>Rep k G</code>, but rather <code>ihom</code> on <code>Module k</code> that has a G-action. If <code>lin_hom</code> is restricted to linear maps that commute with the G-action, it becomes trivial. Am I missing something?</p>",
        "id": 289657892,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657837425
    },
    {
        "content": "<p>You're confusing the internal hom <code>ihom</code> with the hom-sets. A priori the internal hom does not need to have anything to do with the hom-sets, and you can check that for the category <code>Rep k G</code> the internal hom is indeed <code>linhom</code> using the definition of <code>ihom</code> as the adjoint of tensor product.</p>",
        "id": 289659260,
        "sender_full_name": "Antoine Labelle",
        "timestamp": 1657838292
    },
    {
        "content": "<p>Ah this make sense after I read the definition again. Thanks!</p>",
        "id": 289659776,
        "sender_full_name": "Winston Yin",
        "timestamp": 1657838603
    },
    {
        "content": "<p>I would be excited to see if we can avoid all this. It's a lot of boilerplate, and perhaps we can just use the category theoretic interface.</p>",
        "id": 290868885,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1658828388
    }
]