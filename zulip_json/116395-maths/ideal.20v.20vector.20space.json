[
    {
        "content": "<p><code>ideal</code> is a reducible def...</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">R</span>\n</code></pre></div>\n\n\n<p>and <code>vector_space</code> is an abbreviation.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">abbreviation</span> <span class=\"n\">vector_space</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span>\n</code></pre></div>\n\n\n<p>Is there any reason why one should prefer one over the other?</p>",
        "id": 203928595,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594802016
    },
    {
        "content": "<p>PS I'm learning a lot from rewriting the algebra hierarchy from scratch :-)</p>",
        "id": 203928643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594802043
    },
    {
        "content": "<p><code>unfold</code> works with <code>def</code> but not with <code>abbreviation</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">geometry</span><span class=\"bp\">.</span><span class=\"n\">manifold</span><span class=\"bp\">.</span><span class=\"n\">times_cont_mdiff</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">ùïú</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"err\">ùïú</span> <span class=\"n\">E</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">H</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">Is</span> <span class=\"o\">:</span> <span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">E&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">ùïú</span> <span class=\"n\">E&#39;</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">H&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">H&#39;</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">I&#39;</span> <span class=\"o\">:</span> <span class=\"n\">model_with_corners</span> <span class=\"err\">ùïú</span> <span class=\"n\">E&#39;</span> <span class=\"n\">H&#39;</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"n\">M&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">charted_space</span> <span class=\"n\">H&#39;</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">I&#39;s</span> <span class=\"o\">:</span> <span class=\"n\">smooth_manifold_with_corners</span> <span class=\"n\">I&#39;</span> <span class=\"n\">M&#39;</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"n\">f‚ÇÅ</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M&#39;</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"n\">s‚ÇÅ</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">}</span>\n<span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">smooth</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">M&#39;</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">times_cont_mdiff</span> <span class=\"n\">I</span> <span class=\"n\">I&#39;</span> <span class=\"err\">‚ä§</span> <span class=\"n\">f</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tangent_bundle_proj_smooth</span> <span class=\"o\">:</span> <span class=\"n\">smooth</span> <span class=\"n\">I</span><span class=\"bp\">.</span><span class=\"n\">tangent</span> <span class=\"n\">I</span> <span class=\"o\">(</span><span class=\"n\">tangent_bundle</span><span class=\"bp\">.</span><span class=\"n\">proj</span> <span class=\"n\">I</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">smooth</span><span class=\"o\">,</span> <span class=\"c1\">-- error if smooth is defined with abbreviation</span>\n  <span class=\"n\">rw</span> <span class=\"n\">times_cont_mdiff_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>If I have to be sincere I did not really understand how am I supposed to work with abbreviations in a case like this one</p>",
        "id": 203973085,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1594828019
    },
    {
        "content": "<p>With an abbreviation you can do <code>delta smooth</code>.</p>",
        "id": 203973945,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594828372
    },
    {
        "content": "<p>What should it be then in a situation like this one?</p>",
        "id": 203977344,
        "sender_full_name": "Nicol√≤ Cavalleri",
        "timestamp": 1594829843
    },
    {
        "content": "<p>I don't know what are the pros and cons of one and the other. To me, they are essentially equivalent.</p>",
        "id": 203978371,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1594830301
    },
    {
        "content": "<p>I also don't understand why <code>vector_space</code> is defined to be an abbreviation. <a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#module%20definition\">https://leanprover-community.github.io/mathlib_docs/notes.html#module%20definition</a> described pros and cons, but is sacrificing the cons the only way to gain the pros?</p>",
        "id": 204060297,
        "sender_full_name": "Utensil Song",
        "timestamp": 1594890162
    },
    {
        "content": "<p>I thought <code>abbreviation</code> would be handled before tactics, but apparently not:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">abbreviation</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">zero&#39;</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">zero</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">md</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">}</span> <span class=\"c1\">-- error, could not find `x + 0`</span>\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"bp\">‚Ñï</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">zero&#39;</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">add_zero</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">md</span> <span class=\"o\">:=</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">transparency</span><span class=\"bp\">.</span><span class=\"n\">none</span><span class=\"o\">}</span> <span class=\"c1\">-- success</span>\n</code></pre></div>",
        "id": 204061006,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594890713
    },
    {
        "content": "<p>abbreviation is not a parsing thing, it is a kind of definition</p>",
        "id": 204061071,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594890750
    },
    {
        "content": "<p>I guess it makes sense, because you need somewhere to hang the extra typeclass arguments that <code>module</code> and <code>vector_space</code> require</p>",
        "id": 204061104,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594890785
    },
    {
        "content": "<p>I generally don't recommend using <code>abbreviation</code> at all. I haven't seen a use for it that isn't better served by another lean feature</p>",
        "id": 204061148,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594890837
    },
    {
        "content": "<p>So we should make <code>module</code> a <code>@[reducible] def</code>?</p>",
        "id": 204061276,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594890962
    },
    {
        "content": "<p>I thought the plan was to delete it?</p>",
        "id": 204061339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594890982
    },
    {
        "content": "<p>Sure, I guess they don't add much. <del>But if that is the case, I cannot find any evidence on Zulip or in the docstrings.</del></p>",
        "id": 204061601,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594891208
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"238446\">Anne Baanen</span> <a href=\"#narrow/stream/116395-maths/topic/ideal.20v.20vector.20space/near/204061276\">said</a>:</p>\n<blockquote>\n<p>So we should make <code>module</code> a <code>@[reducible] def</code>?</p>\n</blockquote>\n<p>As far as I can tell (on an older version of mathlib), switching modules and vector spaces from <code>abbreviation</code> to <code>@[reducible] def</code> does not break any proofs.</p>",
        "id": 204061669,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1594891275
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/ideal.20v.20vector.20space/near/204061339\">said</a>:</p>\n<blockquote>\n<p>I thought the plan was to delete it?</p>\n</blockquote>\n<p>Why delete <code>module</code>? Any related discussions?</p>",
        "id": 204061787,
        "sender_full_name": "Utensil Song",
        "timestamp": 1594891363
    },
    {
        "content": "<p>The idea was to rename <code>semimodule</code> to <code>module</code> and delete <code>module</code>, which adds nothing to the structure (it is simply making one of the parameters stricter, which does not necessitate a new class)</p>",
        "id": 204061843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594891418
    },
    {
        "content": "<p>The story is pretty similar with <code>vector_space</code></p>",
        "id": 204061859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594891433
    },
    {
        "content": "<p>I think the most recent discussion on this was here <a href=\"#narrow/stream/113489-new-members/topic/Semialgebra\">https://leanprover.zulipchat.com/#narrow/stream/113489-new-members/topic/Semialgebra</a></p>",
        "id": 204061909,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1594891451
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/ideal.20v.20vector.20space/near/204061859\">said</a>:</p>\n<blockquote>\n<p>The story is pretty similar with <code>vector_space</code></p>\n</blockquote>\n<p>I get the story for module but not how it applies to <code>vector_space</code>. Which to rename and which to delete?</p>",
        "id": 204062219,
        "sender_full_name": "Utensil Song",
        "timestamp": 1594891664
    },
    {
        "content": "<p>I mean that <code>semimodule</code>, <code>module</code>, and <code>vector_space</code> are three names for the same data. The only difference is whether the scalar ring is a <code>semiring</code>, <code>ring</code>, or <code>field</code></p>",
        "id": 204062459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594891805
    },
    {
        "content": "<p>I think that <code>@[reducible] def</code> is better than <code>abbreviation</code>, but I know few good applications. One famous use of <code>@[reducible] def</code> is <code>ge</code> and this is almost completely banned in mathlib because the veneer is not perfectly transparent</p>",
        "id": 204062647,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594891983
    },
    {
        "content": "<p>Yes, but don't we need to refer by different names to distinguish the different constraints on the scalar ring?</p>",
        "id": 204062648,
        "sender_full_name": "Utensil Song",
        "timestamp": 1594891983
    },
    {
        "content": "<p>no, because the ring comes separately anyway</p>",
        "id": 204062696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594892011
    },
    {
        "content": "<p>you write <code>[ring R] [add_comm_group V] [module R V]</code></p>",
        "id": 204062726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594892032
    },
    {
        "content": "<p>I see</p>",
        "id": 204062730,
        "sender_full_name": "Utensil Song",
        "timestamp": 1594892038
    },
    {
        "content": "<p>This solves the technical problem but leaves the cognitive problem.</p>",
        "id": 204063344,
        "sender_full_name": "Utensil Song",
        "timestamp": 1594892474
    },
    {
        "content": "<p><code>@[reducible] def</code> also can't be extended</p>",
        "id": 204063438,
        "sender_full_name": "Utensil Song",
        "timestamp": 1594892533
    },
    {
        "content": "<p>extended?</p>",
        "id": 204065049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594893782
    },
    {
        "content": "<blockquote>\n<p>A cosmetic disadvantage is that one can not extend vector spaces as such, in definitions such as normed_space. The solution is to extend semimodule instead.</p>\n</blockquote>",
        "id": 204074290,
        "sender_full_name": "Utensil Song",
        "timestamp": 1594901316
    }
]