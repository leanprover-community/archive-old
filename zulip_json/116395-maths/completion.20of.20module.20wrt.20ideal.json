[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> what do we know about completion of module wrt ideal?</p>",
        "id": 203801746,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594707143
    },
    {
        "content": "<p>I guess we know that you get a topological add group... but the module structure is probably missing</p>",
        "id": 203801770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594707214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> what's the command to get the completion?</p>",
        "id": 203802256,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594708040
    },
    {
        "content": "<p><code>/topology/algebra/group_completion.lean:instance [has_zero α] : has_zero (completion α) := ⟨(0 : α)⟩</code></p>",
        "id": 203802323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594708127
    },
    {
        "content": "<p>Things like that?</p>",
        "id": 203802326,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594708133
    },
    {
        "content": "<p>how do I supply the ideal?</p>",
        "id": 203802331,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594708141
    },
    {
        "content": "<p>Aha, you need to turn it into a uniform structure first.</p>",
        "id": 203802353,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594708171
    },
    {
        "content": "<p>We had that stuff in the perfectoid project. not sure if it is already in mathlib</p>",
        "id": 203802361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594708188
    },
    {
        "content": "<p>I'm trying to find it in the perfectoid project also</p>",
        "id": 203802363,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594708198
    },
    {
        "content": "<p>Is <code>for_mathlib/nonarchimedean/adic_topology.lean</code> helpful?</p>",
        "id": 203802442,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594708287
    },
    {
        "content": "<p>Hmmm... maybe we don't actually have it on the nose. But we are epsilon away from it. There should be some way of turning an ideal into a filter basis. I really thought we had it.</p>",
        "id": 203802498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594708349
    },
    {
        "content": "<p>aha it isn't general enough</p>",
        "id": 203802499,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594708350
    },
    {
        "content": "<p>that file is for the I-adic topology on the ring</p>",
        "id": 203802508,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594708365
    },
    {
        "content": "<p>instead of any module</p>",
        "id": 203802511,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594708370
    },
    {
        "content": "<p>also I think we might need a newtype?</p>",
        "id": 203802514,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594708376
    },
    {
        "content": "<p>or just jump straight to the completion</p>",
        "id": 203802524,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594708387
    },
    {
        "content": "<p>No, I would rather have a property</p>",
        "id": 203802525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594708393
    },
    {
        "content": "<p>Is <code>Z_p</code> the adic completion of <code>Z</code>? It won't fit your newtype...</p>",
        "id": 203802535,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594708412
    },
    {
        "content": "<p>as in, the I-adic topology on M cannot be an instance</p>",
        "id": 203802539,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594708416
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"c1\">-- Note: making the following an instance is useless, instance resolution would never guess I</span>\n<span class=\"n\">def</span> <span class=\"n\">adic_basis</span> <span class=\"o\">(</span><span class=\"n\">I</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">subgroups_basis</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n</code></pre></div>",
        "id": 203802588,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594708451
    },
    {
        "content": "<p><code>{M : Type*} [add_group M] [topological_space M] [topological_module R M] [is_adic_topology I M]</code></p>",
        "id": 203802594,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594708474
    },
    {
        "content": "<p>you know what, I much prefer construct the direct limit directly</p>",
        "id": 203802596,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594708483
    },
    {
        "content": "<p>lim M/I^nM</p>",
        "id": 203802598,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594708490
    },
    {
        "content": "<p>We need that construction, of course.</p>",
        "id": 203802602,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594708500
    },
    {
        "content": "<p>But it shouldn't be the only way to talk about things being adically complete</p>",
        "id": 203802611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594708525
    },
    {
        "content": "<p>oh I'll have the predicate for sure</p>",
        "id": 203802685,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594708587
    },
    {
        "content": "<p>What we actually need, is to show that the two ways of completing (algebraic and topological) give \"the same\" result.</p>",
        "id": 203802688,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594708591
    },
    {
        "content": "<p>I'll leave that for later</p>",
        "id": 203802738,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594708677
    },
    {
        "content": "<p>I'm sorry Kenny, I'm fully focused on my talk that will start in one hour so I won't elaborate. We don't have what you want out of the box but it's very close.</p>",
        "id": 203803680,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1594709723
    }
]