[
    {
        "content": "<p>I see that the birthday problem is listed at <a href=\"https://leanprover-community.github.io/100.html#93\">https://leanprover-community.github.io/100.html#93</a> but the theorem statement is a far cry from it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">fintype.card_embedding_eq</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)]</span> <span class=\"o\">:</span>\n  <span class=\"n\">fintype.card</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">↪</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">β</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">desc_factorial</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I would expect the full problem to include not just this fact but also the total number of functions from A to B, and then some numerical computation to show that fewer than half of the functions from <code>fin 23</code> to <code>fin 365</code> are injective.</p>",
        "id": 298913096,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663225455
    },
    {
        "content": "<p>cc: <span class=\"user-mention\" data-user-id=\"284160\">@Eric Rodriguez</span></p>",
        "id": 298913111,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663225463
    },
    {
        "content": "<p>That's in <code>archive/100-theorems-list/93_birthday_problem.lean</code></p>",
        "id": 298913380,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1663225616
    },
    {
        "content": "<p>Freek is pretty lenient about what counts :-) Last time I looked, one of the \"proofs of Pythagoras' theorem\" was a definition of the distance on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">\\R^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> for example.</p>",
        "id": 298913495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663225672
    },
    {
        "content": "<p>But I agree we could do better :-)</p>",
        "id": 298913513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663225681
    },
    {
        "content": "<p>I know that, but that doesn't mean we should be too</p>",
        "id": 298913544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663225684
    },
    {
        "content": "<p>indeed the archive version is much better:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">theorem</span> <span class=\"n\">birthday</span> <span class=\"o\">:</span>\n  <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"n\">fin</span> <span class=\"mi\">23</span> <span class=\"bp\">↪</span> <span class=\"n\">fin</span> <span class=\"mi\">365</span><span class=\"bp\">‖</span> <span class=\"bp\">&lt;</span> <span class=\"bp\">‖</span><span class=\"n\">fin</span> <span class=\"mi\">23</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">365</span><span class=\"bp\">‖</span> <span class=\"bp\">∧</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"bp\">‖</span><span class=\"n\">fin</span> <span class=\"mi\">22</span> <span class=\"bp\">↪</span> <span class=\"n\">fin</span> <span class=\"mi\">365</span><span class=\"bp\">‖</span> <span class=\"bp\">&gt;</span> <span class=\"bp\">‖</span><span class=\"n\">fin</span> <span class=\"mi\">22</span> <span class=\"bp\">→</span> <span class=\"n\">fin</span> <span class=\"mi\">365</span><span class=\"bp\">‖</span>\n</code></pre></div>\n<p>that should be on the web page</p>",
        "id": 298913635,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663225717
    },
    {
        "content": "<p>Also a bunch of them have links but no statements on the page, what's up with that?</p>",
        "id": 298913872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663225833
    },
    {
        "content": "<p>In a similar vein we have \"the Pell equation\" but only for d that are one less than a square. It would be a really nice project for someone to solve the full Pell equation sometime</p>",
        "id": 298925683,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663231185
    },
    {
        "content": "<p>Wasn't this done on Xena this summer?</p>",
        "id": 298925920,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663231283
    },
    {
        "content": "<p>The archive version was actually a bit more work, as I had to develop the theory of the desc_factorial in order to even get Lean to be able to evaluate the numbers</p>",
        "id": 298926308,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663231469
    },
    {
        "content": "<p>I was hoping to state in terms of probability theory at some point, too, should be relatively easy with the counting measure. I'll update the yaml file when I can sit down at a computer</p>",
        "id": 298926381,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663231511
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"265538\">@Harun Khan</span> was working on Pell. I think he got everything: the fundamental unit and a proof that all solutions were up to sign a power of the fundamental unit. Unfortunately he's graduated from Imperial now and is at Stanford doing machine learning :-) I'll see if I can get in touch with him and find out the status of the project.</p>",
        "id": 298933771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663234718
    },
    {
        "content": "<p>He says it's not public yet but he hopes to make it public within the next couple of weeks</p>",
        "id": 298934918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1663235211
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Birthday.20problem/near/298913872\">said</a>:</p>\n<blockquote>\n<p>Also a bunch of them have links but no statements on the page, what's up with that?</p>\n</blockquote>\n<p>I think this is to do with the fact <code>archive</code> is separate, sadly</p>",
        "id": 299160839,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663335006
    },
    {
        "content": "<p>Is this file automatically generated? I wouldn't expect it to be</p>",
        "id": 299161707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663335276
    },
    {
        "content": "<p>I've removed the misleading decl and added some more stuff at <a href=\"https://github.com/leanprover-community/mathlib/pull/16528\">#16528</a></p>",
        "id": 299161721,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663335279
    },
    {
        "content": "<p>Yes, it's generated automatically from 100.yaml</p>",
        "id": 299161730,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663335285
    },
    {
        "content": "<p>I think maybe a manual override to provide some lean code and a link for the cases  where it doesn't work would be nice, though</p>",
        "id": 299162545,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663335544
    },
    {
        "content": "<p>yeah, I'm thinking to add another key containing markdown to inject in the document</p>",
        "id": 299162691,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663335590
    },
    {
        "content": "<p>where's the generator script?</p>",
        "id": 299162725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1663335599
    },
    {
        "content": "<p>they seem to be <code>yaml_check.py/.lean</code>, but they seem a bit small for doing the job they do</p>",
        "id": 299165733,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1663336589
    }
]