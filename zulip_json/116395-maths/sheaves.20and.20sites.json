[
    {
        "content": "<p>Lol, I'm quite sure that the definition of <code>coverage</code> is wrong. I should demand that the collection of covers contains the singletons <code>{id : U ‚ü∂ U}</code> for every <code>U : X</code>.</p>",
        "id": 147299236,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541684088
    },
    {
        "content": "<p>If I'm right, this is also missing on nLab.</p>",
        "id": 147299259,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1541684108
    },
    {
        "content": "<p>I retract this. There is a comment on nLab pointing out that you don't need to demand that identity morphisms cover. It doesn't change your category of sheaves.</p>",
        "id": 147532006,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542036486
    },
    {
        "content": "<p>did you say nlab...</p>",
        "id": 147532080,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542036580
    },
    {
        "content": "<p>man you've gone too far...</p>",
        "id": 147532144,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542036605
    },
    {
        "content": "<p><code>opens X</code> is now a site!<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/sheaf.lean#L245\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/sheaf.lean#L245\">https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/sheaf.lean#L245</a></p>",
        "id": 147545193,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542049902
    },
    {
        "content": "<p>This is one of the ugliest proofs I've written in a long time.</p>",
        "id": 147545202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542049915
    },
    {
        "content": "<p>Also, I would like to get some feedback on the definition of the <code>covers</code> for <code>opens X</code>. This is the actual data that goes into a <code>site</code>. The rest doesn't matter, because it's only proofs. (They should of course be faster then what I have now.)<br>\nBasically, there are at least three (equivalent) ways to specify the data of <code>covers</code>:<br>\n1) <code>covers := Œª U Us, U.val = ‚®Üu‚ààUs, (u:over _).left.val</code> ‚Äî take the union in <code>set X</code><br>\n2) <code>covers := Œª U Us, U = ‚®Üu‚ààUs, (u:over _).left</code> ‚Äî take the \"union\" in <code>opens X</code><br>\n3) <code>covers := Œª U Us, U = limits.sigma (Œª u‚ààUs, (u:over _))</code> ‚Äî take the \"union\" as a colimit in the category <code>over U</code><br>\nDo people already see reasons to choose/discard one of these options?</p>",
        "id": 147545468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542050231
    },
    {
        "content": "<p>I currently have option (2). But maybe option (3) is actually better, even though it is high-brow; because it would tie in better to all the facts that we (will) have about functors/limits/etc...</p>",
        "id": 147545537,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542050289
    },
    {
        "content": "<p>I wonder whether using actual families (instead of <code>set</code> everywhere) would make your life easier</p>",
        "id": 147547765,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542052666
    },
    {
        "content": "<p>Maybe this isn't actually causing any difficulty</p>",
        "id": 147547907,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542052803
    },
    {
        "content": "<p>Hmm, I had that before, and it actually became harder... also, you run into more universe issues, I think.</p>",
        "id": 147548610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542053659
    },
    {
        "content": "<p><code>sheaf.lean</code> is now <code>sorry</code>-free. In particular, I have defined the site on a basis of a topology.</p>",
        "id": 147576521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542096559
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> you might be interested in this. <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> where is this work? Is it on github?</p>",
        "id": 147576576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542096610
    },
    {
        "content": "<p>My todo-list:</p>\n<ul>\n<li>Clean up the proofs</li>\n<li>Prove that continuous functions to some space <code>T</code> form a sheaf on <code>X</code></li>\n<li>Generalise to sheaves with values in <code>C</code> (e.g., <code>C = CommRing</code> or <code>Ab</code>)</li>\n<li>Define stalks</li>\n<li>Build an API around everything</li>\n</ul>",
        "id": 147576586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542096649
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/sheaf.lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/sheaf.lean\">https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/sheaf.lean</a></p>",
        "id": 147576593,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542096664
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Would you mind testing your most powerful version of <code>obviously</code> on (parts) of the proofs at the bottom of <code>sheaf.lean</code>? As you can see I'm mostly doing what <code>tidy</code> would do, except that I sprinkle an occasional <code>rw</code> into the mix.</p>",
        "id": 147576745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542096928
    },
    {
        "content": "<p>(If you have time for this...)</p>",
        "id": 147576748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542096941
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , we should combine/adapt the stuff I wrote on bundled presheaves at some point, with a category structure based on:</p>\n<div class=\"codehilite\"><pre><span></span>structure Presheaf :=\n(X : Top.{v})\n(ùí™ : (opens X)·µí·µñ ‚•§ C)\n\nstructure Presheaf_hom (F G : Presheaf.{u v} C) :=\n(f : F.X ‚ü∂ G.X)\n(c : G.ùí™ ‚üπ ((opens.map f).op ‚ãô F.ùí™))\n</pre></div>",
        "id": 147576890,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542097144
    },
    {
        "content": "<p>Am I right that you haven't got this yet?</p>",
        "id": 147576895,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542097157
    },
    {
        "content": "<p>I think most of the other stuff I'd done previously on sheaves is all obsolete by your recent progress.</p>",
        "id": 147576897,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542097175
    },
    {
        "content": "<p>(I don't have stalks yet <span class=\"emoji emoji-1f606\" title=\"lol\">:lol:</span>)</p>",
        "id": 147577022,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542097362
    },
    {
        "content": "<p>Why would you want the bundled presheaves?</p>",
        "id": 147577025,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542097378
    },
    {
        "content": "<p>To define morphisms of ringed spaces?</p>",
        "id": 147577047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542097409
    },
    {
        "content": "<p>I think I would first do that unbundled.</p>",
        "id": 147577051,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542097436
    },
    {
        "content": "<p>Hmmm, I just realised that I don't even know what it means to be a sheaf with values in <code>C</code> when working on an arbitrary site.<br>\nI can make sense of it</p>\n<ul>\n<li>if the site has pullbacks, or</li>\n<li>if <code>C</code> is <em>concrete</em> in the sense that it comes with a forgetful functor to <code>Type</code>.</li>\n</ul>",
        "id": 147577899,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542098881
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you have any tips on what the right \"go-for-it\" route would be in this case?</p>",
        "id": 147578584,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542099818
    },
    {
        "content": "<p>We want sheaves of rings.<br>\nThere are 23 definitions that are all math-equivalent.</p>",
        "id": 147578592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542099839
    },
    {
        "content": "<p>There's no way to do it as a ring object in sheaves?</p>",
        "id": 147580288,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542102411
    },
    {
        "content": "<p>That is one of the 23 possibilities (-;</p>",
        "id": 147580305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542102448
    },
    {
        "content": "<p>But then you need to connect it to all the useful things that we know already about rings.</p>",
        "id": 147580313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542102464
    },
    {
        "content": "<p>This is math-trivial, of course</p>",
        "id": 147580320,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542102476
    },
    {
        "content": "<p>A lot of them aren't true for sheafy rings</p>",
        "id": 147580363,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542102485
    },
    {
        "content": "<p>But now you actually need to justify it to a computer.</p>",
        "id": 147580367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542102490
    },
    {
        "content": "<p>Sure, but there is an extremely large bunch of trivialities that are true</p>",
        "id": 147580381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542102525
    },
    {
        "content": "<p>Is there any way to work with sheaves directly as nonclassical types?</p>",
        "id": 147580399,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542102578
    },
    {
        "content": "<p>so that all of the theorems for rings that don't use classical assertions hold?</p>",
        "id": 147580463,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542102638
    },
    {
        "content": "<p>What exactly do you mean?</p>",
        "id": 147580575,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542102761
    },
    {
        "content": "<p>Working internally in some topos?</p>",
        "id": 147580580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542102772
    },
    {
        "content": "<p>Or you want to lift all constructive results into every topos?</p>",
        "id": 147580598,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542102798
    },
    {
        "content": "<p>Nothing like that currently exists. And pulling it off would be quite a non-trivial project.</p>",
        "id": 147580615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542102826
    },
    {
        "content": "<p>Yeah, I agree</p>",
        "id": 147580710,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542102939
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Do you think the current definition of <code>sheaf</code> is ok?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">sheaf</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"err\">ùí≥</span> <span class=\"o\">:</span> <span class=\"n\">site</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">site</span><span class=\"bp\">.</span><span class=\"n\">sheaf_condition</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I need the ugly <code>nonempty</code> because <code>is.iso</code> is not a <code>Prop</code>. What is the correct Lean-idiom for this?</p>",
        "id": 147580756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542102973
    },
    {
        "content": "<p>Why not just use a sigma type?</p>",
        "id": 147580770,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542103022
    },
    {
        "content": "<p>The category of presheaves will not care about the evidence you provide</p>",
        "id": 147580779,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542103041
    },
    {
        "content": "<p>I want to use <code>full_subcategory</code></p>",
        "id": 147580780,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542103042
    },
    {
        "content": "<p>But maybe I shouldn't?</p>",
        "id": 147580787,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542103056
    },
    {
        "content": "<p>so use <code>sigma_category</code>, which I think hasn't landed in mathlib</p>",
        "id": 147580792,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542103060
    },
    {
        "content": "<p>but is the same idea, it just ignores the extra data</p>",
        "id": 147580795,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542103069
    },
    {
        "content": "<p>If you think about it, this is a perfectly sensible thing to do categorically:</p>",
        "id": 147580839,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542103085
    },
    {
        "content": "<p>Ok... I see. Which branch do I need to merge into <code>sheaf</code> to do that?</p>",
        "id": 147580842,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542103097
    },
    {
        "content": "<p>Yeah, the idea is obvious. I just didn't want to roll my own tooling.</p>",
        "id": 147580848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542103115
    },
    {
        "content": "<p>you can have something that acts as a full subcategory, but actually makes many copies of the objects that you're keeping, according to the different ways to witness that you want them ...</p>",
        "id": 147580850,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542103121
    },
    {
        "content": "<p>/me is lazy...</p>",
        "id": 147580854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542103130
    },
    {
        "content": "<p>I think it's only in <code>lean-category-theory</code></p>",
        "id": 147580860,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542103136
    },
    {
        "content": "<p>so it's not just merging a branch</p>",
        "id": 147580862,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542103141
    },
    {
        "content": "<p>Aaah, then I'll leave a TODO above the current definition.</p>",
        "id": 147580876,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542103154
    },
    {
        "content": "<p>Is there documentation for what a sigma-category is?</p>",
        "id": 147580886,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542103176
    },
    {
        "content": "<p>Copy and paste</p>\n<div class=\"codehilite\"><pre><span></span>instance sigma_category (Z : C ‚Üí Type w‚ÇÅ) : category.{(max u‚ÇÅ w‚ÇÅ) v‚ÇÅ} (Œ£ X : C, Z X) :=\n{ hom  := Œª X Y, X.1 ‚ü∂ Y.1,\n  id   := Œª X, ùüô X.1,\n  comp := Œª _ _ _ f g, f ‚â´ g }\n\ndef sigma_category_inclusion (Z : C ‚Üí Type u‚ÇÅ) : (Œ£ X : C, Z X) ‚•§ C :=\n{ obj := Œª X, X.1,\n  map&#39; := Œª _ _ f, f }\n\ninstance full_œÉ        (Z : C ‚Üí Type u‚ÇÅ) : full    (sigma_category_inclusion Z)    := by obviously\ninstance faithful_œÉ    (Z : C ‚Üí Type u‚ÇÅ) : faithful (sigma_category_inclusion Z)   := by obviously\n</pre></div>",
        "id": 147580896,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542103198
    },
    {
        "content": "<p>into full_subcategory.lean?</p>",
        "id": 147580925,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542103203
    },
    {
        "content": "<p>does it have a non-type-theoretic analogue?</p>",
        "id": 147580958,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542103216
    },
    {
        "content": "<p>Sure, but I don't know if it actually occurs.</p>",
        "id": 147581050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542103319
    },
    {
        "content": "<p>Sure. Say you have a set of objects C, and a function f : C \\to Set. Make a new category with objects (X, Y), where Y is in f(X), and whose morphisms (X, Y) to (X', Y') are just the C-morphisms from X to X'.</p>",
        "id": 147581091,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542103328
    },
    {
        "content": "<p>It would be like taking the category of groups with all functions as morphisms</p>",
        "id": 147581094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542103335
    },
    {
        "content": "<p>Does it have a name?</p>",
        "id": 147581095,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542103337
    },
    {
        "content": "<p>It just makes f(X) many copies of the object X.</p>",
        "id": 147581105,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542103368
    },
    {
        "content": "<p>it looks like it's related to the 'anafunctor' version of a subcategory?</p>",
        "id": 147581171,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542103453
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137844\">@Harry Gindi</span> Here is a math question that I don't know the answer to. In what generality do people speak of sheaves on a site <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span> with values in a category <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">C</span></span></span></span>?<br>\nWhat assumptions do I need to make on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and/or <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">C</span></span></span></span>? Is there some grand theory that unifies everything?</p>",
        "id": 147581204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542103512
    },
    {
        "content": "<p>people sometimes say \"sheaves of X\" in all kinds of cases, but it only makes sense when X is a subcategory of algebras for some algebraic theory rel set</p>",
        "id": 147581290,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542103628
    },
    {
        "content": "<p>Well, if the site <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span> has pullbacks, then I guess the sheaf condition makes sense in every category <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">C</span></span></span></span> with equalizers, right?</p>",
        "id": 147581304,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542103677
    },
    {
        "content": "<p>yes, but it is usually the wrong thing</p>",
        "id": 147581351,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542103710
    },
    {
        "content": "<p>Ok, so it works but is useless.</p>",
        "id": 147581356,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542103731
    },
    {
        "content": "<p>I think so, yes</p>",
        "id": 147581368,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542103756
    },
    {
        "content": "<p>Ok, I'll have to think a bit about how to move this forward. I'm not sure if I'm ready for defining all the stuff related to algebraic theories.</p>",
        "id": 147581438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542103852
    },
    {
        "content": "<p>It might make more sense if you could relativize algebraic stuff to like parameterized types?</p>",
        "id": 147581522,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542103929
    },
    {
        "content": "<p>I don't know, it's really alien to me</p>",
        "id": 147581530,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542103953
    },
    {
        "content": "<p>probably the easiest way is as you said</p>",
        "id": 147581550,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542104013
    },
    {
        "content": "<p>when the category is concrete, being a sheaf with values in C is the same thing as asking that the underlying sheaf of sets is a sheaf</p>",
        "id": 147581604,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542104052
    },
    {
        "content": "<p>I don't know how well that works with e.g. a sheaf of complexes</p>",
        "id": 147581646,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542104122
    },
    {
        "content": "<p>which is like the most important application of sheafy stuff in alg. geom, I think</p>",
        "id": 147581741,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542104211
    },
    {
        "content": "<p>You have to be pretty careful with this statement. It's not just \"concrete\" (e.g. topological rings have a faithful functor to Set) You also need that the forgetful functor is continuous and reflects isos.</p>",
        "id": 147581744,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542104218
    },
    {
        "content": "<p>At some point I wrote down the statement, but never attempted to prove it:</p>\n<div class=\"codehilite\"><pre><span></span>variables {V : Type (u+1)} [ùí± : large_category V] [has_products.{u+1 u} V] (‚Ñ± : V ‚•§ (Type u))\n          [faithful ‚Ñ±] [category_theory.limits.preserves_limits ‚Ñ±] [reflects_isos ‚Ñ±]\ninclude ùí±\n\n-- This is a good project!\ndef sheaf.of_sheaf_of_types\n  (presheaf : (opens X)·µí·µñ ‚•§ V)\n  (underlying_is_sheaf : is_sheaf (presheaf ‚ãô ‚Ñ±)) : is_sheaf presheaf := sorry\n</pre></div>",
        "id": 147581830,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542104286
    },
    {
        "content": "<p>(This won't be compatible with Johan's version of presheaves and sheaves, of course.)</p>",
        "id": 147581858,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542104340
    },
    {
        "content": "<p>I wonder if a good way to do this is with internal objects in a topos after all</p>",
        "id": 147581877,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542104374
    },
    {
        "content": "<p>then you could try to follow Hakim's thesis</p>",
        "id": 147581886,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542104391
    },
    {
        "content": "<p>I challenge you to try it <span class=\"emoji emoji-1f603\" title=\"smiley\">:smiley:</span></p>",
        "id": 147581986,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542104507
    },
    {
        "content": "<p>I don't understand how you can say something like categories of nonclassical types satisfyinf Giraud's axioms are categories of sheaves on a site</p>",
        "id": 147581991,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542104517
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 147582038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542104545
    },
    {
        "content": "<p>like, we might want to work internally to some Grothendieck topos</p>",
        "id": 147582050,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542104571
    },
    {
        "content": "<p>and the objects there would hopefully be of type \"type\"</p>",
        "id": 147582065,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542104603
    },
    {
        "content": "<p>Sure. And <code>Type</code> is equivalent to sheaves on <code>unit</code></p>",
        "id": 147582066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542104603
    },
    {
        "content": "<p>No, for an arbitrary topos the type of the objects wouldn't be <code>Type</code></p>",
        "id": 147582076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542104636
    },
    {
        "content": "<p>They would be of type <code>X</code>, where <code>X</code> is your topos.</p>",
        "id": 147582123,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542104662
    },
    {
        "content": "<p>then how can you transfer results from type type to type sheafy type</p>",
        "id": 147582126,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542104669
    },
    {
        "content": "<p>And so you have to develop all of type theory internal to topoi. And this hasn't been done yet in Lean. And I don't think it has been done in any theorem prover.</p>",
        "id": 147582129,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542104691
    },
    {
        "content": "<p>To do that \"transfer\" you would have to build quite a bit of machinery.</p>",
        "id": 147582142,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542104714
    },
    {
        "content": "<p>exactly, it looks daunting</p>",
        "id": 147582145,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542104724
    },
    {
        "content": "<p>Very daunting</p>",
        "id": 147582151,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542104733
    },
    {
        "content": "<p>It would take Mario a whole summer, I'm afraid.</p>",
        "id": 147582160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542104748
    },
    {
        "content": "<p>one way to do it, maybe, would be to try to prove that any nonclassical theorem in type type holds when you substitute type X for type type when X is a topos?</p>",
        "id": 147582218,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542104810
    },
    {
        "content": "<p>it's not easy</p>",
        "id": 147582233,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542104846
    },
    {
        "content": "<p>It would probably be highly rewarding in terms of work saved</p>",
        "id": 147582320,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542104974
    },
    {
        "content": "<p>I should probably look in e.g. the elephant to see if there is a statement of such a theorem</p>",
        "id": 147582598,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542105291
    },
    {
        "content": "<p>I'm afraid I have no idea about the math in this area</p>",
        "id": 147583484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542106260
    },
    {
        "content": "<p>I'm not sure how much of it is important to the modeling question</p>",
        "id": 147583499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542106288
    },
    {
        "content": "<blockquote>\n<p>Hmmm, I just realised that I don't even know what it means to be a sheaf with values in <code>C</code> when working on an arbitrary site.<br>\nI can make sense of it<br>\n* if the site has pullbacks, or<br>\n* if <code>C</code> is <em>concrete</em> in the sense that it comes with a forgetful functor to <code>Type</code>.</p>\n</blockquote>\n<p>Are these two definitions related to each other? Harry says this is not the right notion in some categories?</p>",
        "id": 147583644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542106474
    },
    {
        "content": "<p>If there is a reasonable categorical interpretation of the sheaf operations or what not then that seems like a good place to start</p>",
        "id": 147583678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542106555
    },
    {
        "content": "<p>but it sounds like a \"sheaf of rings\" is not a sheaf over <code>Ring</code> as I would hope, but rather a ring object in sheaves... unfortunately I don't know any way of relating rings and ring objects in a suitably algorithmic way</p>",
        "id": 147583745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542106616
    },
    {
        "content": "<p>that is, you can define a group object, ring object etc but nothing about these definitions will connect them to the usual algebraic classes, and there won't be a general procedure for inputting a universal algebra and getting a predicate in category theory language</p>",
        "id": 147583842,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542106730
    },
    {
        "content": "<p>and \"internalization\" is not something we can currently do in a nice way, although maybe a tactic could do it in the future</p>",
        "id": 147583872,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542106796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Thanks for your input. I think Harry is saying that it would be best to go for the option with <em>concrete</em> categories, and Scott already gave a mockup of the statement.</p>",
        "id": 147585448,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542109015
    },
    {
        "content": "<p>You are right that a sheaf of rings is a ring object in sheaves. (At least that is one way to define it.)</p>",
        "id": 147585465,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542109040
    },
    {
        "content": "<p>I asked a colleague of mine who specializes in topos theory (and has lots of experience with Lean, but the HOTT branch)</p>",
        "id": 147585780,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542109533
    },
    {
        "content": "<p>oh yeah, he's here, Jonas</p>",
        "id": 147585838,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542109581
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"114636\">@Jonas Frey</span></p>",
        "id": 147585865,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542109640
    },
    {
        "content": "<p>I imagine that a bunch of these problems would go away when using HoTT + univalence</p>",
        "id": 147586499,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542110466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I was saying that the notion of a sheaf with values in a category that isn't 'algebraic' in some sense is bad</p>",
        "id": 147589162,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542114020
    },
    {
        "content": "<p>so what does \"algebraic\" mean here?</p>",
        "id": 147589170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542114044
    },
    {
        "content": "<p>admits a finite limit sketch over set, I believe</p>",
        "id": 147589185,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542114070
    },
    {
        "content": "<p>like what are some simple examples?</p>",
        "id": 147589194,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542114088
    },
    {
        "content": "<p>sheaves of categories are bad, for example</p>",
        "id": 147589196,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542114089
    },
    {
        "content": "<p>I'm not really sure what the applications are here, what kinds of sheaves are good?</p>",
        "id": 147589202,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542114113
    },
    {
        "content": "<p>the right notion for a sheaf of categories has additional coherence conditions (cocycle conditions) that make them stacks</p>",
        "id": 147589247,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542114141
    },
    {
        "content": "<p>but I presume these don't come up in the usual cases for some reason?</p>",
        "id": 147589258,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542114169
    },
    {
        "content": "<p>good categories for sheaves: groups, rings, abgroups, things of that nature</p>",
        "id": 147589259,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542114170
    },
    {
        "content": "<p>yeah, basically</p>",
        "id": 147589270,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542114193
    },
    {
        "content": "<p>So is the \"data\" of a sheaf all present in an arbitrary category?</p>",
        "id": 147589330,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542114248
    },
    {
        "content": "<p>or does pullbacks suffice?</p>",
        "id": 147589340,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542114270
    },
    {
        "content": "<p>and somehow in a \"good\" category these operations have additional properties that make it work</p>",
        "id": 147589364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542114335
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 147589374,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542114353
    },
    {
        "content": "<p>sorry, all products</p>",
        "id": 147589430,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542114401
    },
    {
        "content": "<p>because you can have infinite covering families</p>",
        "id": 147589438,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542114426
    },
    {
        "content": "<p>I think the easy route would be to define what a sheaf is in an arbitrary category with the constructions needed in the definition itself, and then add appropriate regularity conditions for the theorems (or just prove the theorems in particular categories when needed)</p>",
        "id": 147589448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542114457
    },
    {
        "content": "<p>I would imagine that it will be easy to retrofit the theorems with more generality as needed</p>",
        "id": 147589497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542114494
    },
    {
        "content": "<p>Scott's version works better than that</p>",
        "id": 147589498,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542114497
    },
    {
        "content": "<p>it hits all of the ones we care about</p>",
        "id": 147589514,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542114535
    },
    {
        "content": "<p>I'm not sure how well \"concrete categories\" in the literal sense of functors to Type work in lean</p>",
        "id": 147589516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542114539
    },
    {
        "content": "<p>Scott can say better than me</p>",
        "id": 147589536,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542114570
    },
    {
        "content": "<p>the key feature of sheaves and presheaves is exactly that they are set-valued and the sheaf condition says something about sets</p>",
        "id": 147589604,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542114656
    },
    {
        "content": "<p>having a continuous conservative functor to sets is always satisfied when the category is monadic over sets</p>",
        "id": 147589691,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542114734
    },
    {
        "content": "<p>In the perfectoid project we need sheaves of topological rings</p>",
        "id": 147589726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542114803
    },
    {
        "content": "<p>hmm, how are those even defined?</p>",
        "id": 147589741,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542114828
    },
    {
        "content": "<p>that was exactly the example Scott said would be problematic (topological groups)</p>",
        "id": 147589793,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542114855
    },
    {
        "content": "<p>well we only need them on topological spaces, so I think there are no technical issues...</p>",
        "id": 147589800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542114869
    },
    {
        "content": "<p>Are they pro-rings like completions?</p>",
        "id": 147589829,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542114917
    },
    {
        "content": "<p>Can I see where these are defined in ordinary mathematical language?</p>",
        "id": 147589933,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542115039
    },
    {
        "content": "<p>Actually there might be some topological issue. Wait a minute, I'll dig up a reference</p>",
        "id": 147589942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542115057
    },
    {
        "content": "<p><a href=\"https://www2.math.uni-paderborn.de/fileadmin/Mathematik/People/wedhorn/Lehre/AdicSpaces.pdf\" target=\"_blank\" title=\"https://www2.math.uni-paderborn.de/fileadmin/Mathematik/People/wedhorn/Lehre/AdicSpaces.pdf\">https://www2.math.uni-paderborn.de/fileadmin/Mathematik/People/wedhorn/Lehre/AdicSpaces.pdf</a>  remark 8.19 on p80</p>",
        "id": 147590004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542115128
    },
    {
        "content": "<p>The map from F(U) to the stuff in prod_i F(U_i) which agree on overlaps needs to be a homeo rather than just continuous</p>",
        "id": 147590030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542115188
    },
    {
        "content": "<p>I think that this is probably exactly the sheaf axiom for top rings</p>",
        "id": 147590087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542115220
    },
    {
        "content": "<p>Yeah, I think you could get away with this because they're adic rings</p>",
        "id": 147590088,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542115233
    },
    {
        "content": "<p>I am not sure this has anything to do with it</p>",
        "id": 147590092,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542115242
    },
    {
        "content": "<p>I think that the point is that to check that a presheaf of top rings is a sheaf, it does not suffice to check that the underlying presheaf of rings is a sheaf</p>",
        "id": 147590112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542115273
    },
    {
        "content": "<p>there is epsilon more to it than this.</p>",
        "id": 147590123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542115304
    },
    {
        "content": "<p>well, continuous maps between adic rings are the natural transformations between pro-objects</p>",
        "id": 147590125,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542115307
    },
    {
        "content": "<p>These rings are not adic rings in general</p>",
        "id": 147590130,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542115320
    },
    {
        "content": "<p>ah</p>",
        "id": 147590170,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542115325
    },
    {
        "content": "<p>They are what used to be called \"f-adic\", which is _not_ \"adic + ...\", it's \"has a subring which is adic + ...\"</p>",
        "id": 147590189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542115361
    },
    {
        "content": "<p>mhm</p>",
        "id": 147590197,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542115373
    },
    {
        "content": "<p>They're now called Huber rings</p>",
        "id": 147590202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542115382
    },
    {
        "content": "<p>(terminology due to Scholze)</p>",
        "id": 147590220,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542115396
    },
    {
        "content": "<p>When I said concrete categories in the literal sense I was comparing to categories that are built on actual sets and functions</p>",
        "id": 147590238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542115421
    },
    {
        "content": "<p>yeah, this looks like a special situation that isn't usually covered in the classical theory, I think</p>",
        "id": 147590242,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542115432
    },
    {
        "content": "<p>in which case the forgetful functor is implicit</p>",
        "id": 147590282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542115443
    },
    {
        "content": "<p>there is quite a lot you can do with concrete categories built like this</p>",
        "id": 147590317,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542115480
    },
    {
        "content": "<p>in that case, Kevin, maybe the answer is to do a common generalization that covers the usual situation and the one for perfectoid spaces.</p>",
        "id": 147590355,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542115541
    },
    {
        "content": "<p>There are also simplicial sheaves, which have a separate homotopy-theoretic component</p>",
        "id": 147590421,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542115599
    },
    {
        "content": "<p>but that way lies madness</p>",
        "id": 147590456,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542115655
    },
    {
        "content": "<p>and you'd end up trying to do everything in this article: <a href=\"https://ncatlab.org/nlab/show/model+structure+on+simplicial+presheaves#injectiveprojective__localglobal__presheavessheaves\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/model+structure+on+simplicial+presheaves#injectiveprojective__localglobal__presheavessheaves\">https://ncatlab.org/nlab/show/model+structure+on+simplicial+presheaves#injectiveprojective__localglobal__presheavessheaves</a></p>",
        "id": 147590545,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542115754
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I hope the following code is parseable</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">Top</span><span class=\"o\">,</span>\n<span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">Us</span> <span class=\"o\">:</span> <span class=\"n\">covering_family</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">this</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"n\">u</span> <span class=\"err\">‚àà</span> <span class=\"n\">Us</span> <span class=\"bp\">‚Üí</span> <span class=\"o\">(</span><span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"n\">to_Top</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">T</span><span class=\"o\">)</span>\n<span class=\"err\">‚ä¢</span> <span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"n\">to_Top</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">(</span><span class=\"err\">‚®Ü</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"err\">‚àà</span> <span class=\"n\">Us</span><span class=\"o\">),</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">T</span>\n</pre></div>\n\n\n<p>Do you know if we have any stuff in topology that would help here?</p>",
        "id": 147591580,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542116990
    },
    {
        "content": "<p>What this is saying is: I have a bunch of functions to <code>T</code> defined on <code>u</code>s that cover <code>U</code>. Now I want to build a function <code>U</code> to <code>T</code>.</p>",
        "id": 147591673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542117050
    },
    {
        "content": "<p>Of course we need that they agree on overlaps. This is hidden in my context, but it looks ugly, so I didn't paste it.</p>",
        "id": 147591691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542117072
    },
    {
        "content": "<p>Ok, so here is a more precise question: how do I check continuity locally?</p>",
        "id": 147591712,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542117101
    },
    {
        "content": "<p>as with opens, I think you want a covering_family U to be a type</p>",
        "id": 147591776,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542117143
    },
    {
        "content": "<p>Can sieves make life easier?</p>",
        "id": 147591791,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542117173
    },
    {
        "content": "<p>because then you might just prove that every covering family determines a sieve</p>",
        "id": 147591847,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542117241
    },
    {
        "content": "<p>why do sheaf and sieve and stack and site all sound so similar? the alliteration is killing me</p>",
        "id": 147591941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542117330
    },
    {
        "content": "<blockquote>\n<p>because then you might just prove that every covering family determines a sieve</p>\n</blockquote>\n<p>I am already using sieves.</p>",
        "id": 147591998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542117365
    },
    {
        "content": "<p>ah, I see, that's good. Much easier to state the sheaf condition that way!</p>",
        "id": 147592041,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542117428
    },
    {
        "content": "<p>Mario, I was quite happy with <code>covering_family</code> being a set. But maybe it should be a type.</p>",
        "id": 147592046,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542117432
    },
    {
        "content": "<blockquote>\n<p>ah, I see, that's good. Much easier to state the sheaf condition that way!</p>\n</blockquote>\n<p>Sure, but now I need to actually prove that something is a sheaf <span class=\"emoji emoji-1f631\" title=\"scream\">:scream:</span></p>",
        "id": 147592069,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542117455
    },
    {
        "content": "<p>that statement parses, but it isn't provable without stuff about compatibility</p>",
        "id": 147592196,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542117569
    },
    {
        "content": "<p>test case: Every representable is a sheaf wrt the topology generated by universal epimorphic families?</p>",
        "id": 147592207,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542117593
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Hence my more precise question...</p>",
        "id": 147592302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542117649
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"137844\">@Harry Gindi</span> Indeed. I'm proving that continuous functions <code>X ‚Üí T</code> form a sheaf on <code>X</code>, for a given <code>T</code>.</p>",
        "id": 147592369,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542117690
    },
    {
        "content": "<p>So it is not as general as your test case.</p>",
        "id": 147592388,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542117709
    },
    {
        "content": "<p>I guess then you'd first have to define universal epimorphic families <span class=\"emoji emoji-1f61b\" title=\"mischievous\">:mischievous:</span></p>",
        "id": 147592452,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542117753
    },
    {
        "content": "<p>Feel free to join in <span class=\"emoji emoji-1f639\" title=\"joy cat\">:joy_cat:</span></p>",
        "id": 147592469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542117781
    },
    {
        "content": "<p>Talk is cheap, that's why I do it so often</p>",
        "id": 147592486,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542117800
    },
    {
        "content": "<p>let's just define the spectrum of a ring fist</p>",
        "id": 147592586,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542117891
    },
    {
        "content": "<p>(sorry, I'm a more concrete guy)</p>",
        "id": 147592590,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542117898
    },
    {
        "content": "<p>I'm working on it Kenny. I'm trying to define ringed spaces.</p>",
        "id": 147592607,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542117924
    },
    {
        "content": "<p>Hom_CRing(R, -): Ring-&gt;Set; where's my big novelty check</p>",
        "id": 147592667,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542117967
    },
    {
        "content": "<p>Harry, one of the first things you learn when working with provers is that there are lots of definitions that are math-trivially equivalent. But proving that they are equivalent in Lean is often very hard.</p>",
        "id": 147592724,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542118045
    },
    {
        "content": "<p>I'm quite sure that there is value in defining a functor from <code>Ring^op</code> to <code>LRS</code>.</p>",
        "id": 147592742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542118076
    },
    {
        "content": "<p>I know, I'm being silly. This definition I just gave is meaningless even outside a theorem prover</p>",
        "id": 147592797,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542118096
    },
    {
        "content": "<p>Just saw this on MathOverflow, could be a useful guide: <a href=\"https://rawgit.com/iblech/internal-methods/master/notes.pdf\" target=\"_blank\" title=\"https://rawgit.com/iblech/internal-methods/master/notes.pdf\">https://rawgit.com/iblech/internal-methods/master/notes.pdf</a></p>",
        "id": 147593491,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542118684
    },
    {
        "content": "<p>especially if you decide to go down the internal logic route</p>",
        "id": 147593526,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542118727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, not sure how much progress you made on your gluing continuous functions question, but step 1 is to just construct the glued function even as a function, i.e., disregarding the topology of X, and then check that the glued function actually restricts to the original guys</p>",
        "id": 147594050,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542119159
    },
    {
        "content": "<p>then step 2 would be to check continuity, possibly you can use <code>continuous_subtype_nhds_cover</code> for this</p>",
        "id": 147594103,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542119184
    },
    {
        "content": "<p>You might find <a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.1/src/homotopy_theory/topological_spaces/inter_union.lean\" target=\"_blank\" title=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.1/src/homotopy_theory/topological_spaces/inter_union.lean\">https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.1/src/homotopy_theory/topological_spaces/inter_union.lean</a> a useful guide though there I was only interested in the case of two (closed) subsets</p>",
        "id": 147594119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542119212
    },
    {
        "content": "<p>Ok, thanks for the tips.</p>",
        "id": 147594216,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542119284
    },
    {
        "content": "<p>Step 1 will require <code>choice</code></p>",
        "id": 147594217,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542119286
    },
    {
        "content": "<p>I'm currently trying to build a function.</p>",
        "id": 147594225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542119294
    },
    {
        "content": "<p>And I haven't come to the point yet where I need choice. But I think I'm close</p>",
        "id": 147594238,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542119311
    },
    {
        "content": "<p>I think this was already discussed here, with a student of Kevin</p>",
        "id": 147594245,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542119315
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/subject/Topology.20-.20Beginner/near/130051069\" title=\"#narrow/stream/116395-maths/subject/Topology.20-.20Beginner/near/130051069\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/subject/Topology.20-.20Beginner/near/130051069</a></p>",
        "id": 147594486,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542119515
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120726\">@Luca Gerolla</span>  wanted to define a continuous function on a closed interval [0,1] by glueing continuous functions on [0,1/2] and [1/2,1]</p>",
        "id": 147594545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542119537
    },
    {
        "content": "<p>exactly</p>",
        "id": 147594557,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542119548
    },
    {
        "content": "<p>hopefully this is what I linked to</p>",
        "id": 147594564,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542119554
    },
    {
        "content": "<p>I can't get that link to work on mobile</p>",
        "id": 147594583,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542119577
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, your memory is better than mine.</p>",
        "id": 147594681,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542119655
    },
    {
        "content": "<p>I realize that maybe it's not very obvious what the module I linked to is doing--it's showing that for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">A_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">0</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">A_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> closed subsets of a space X, there is a pushout square in Top involving <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub><mo>‚à©</mo><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">A_0 \\cap A_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">0</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mbin\">‚à©</span><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">A_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">0</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">A_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub><mo>‚à™</mo><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">A_0 \\cup A_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">0</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mbin\">‚à™</span><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>. For open subsets you would use the other lemma from topology I mentioned, and then it's the same as checking the sheaf condition I guess.</p>",
        "id": 147594772,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542119725
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> you have to use AC to construct glued maps?</p>",
        "id": 147594850,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542119763
    },
    {
        "content": "<p>that's surprising to me</p>",
        "id": 147594873,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542119788
    },
    {
        "content": "<p>or is this \"choice\" different from the axiom of choice?</p>",
        "id": 147594918,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542119845
    },
    {
        "content": "<p>You could construct a glued map on the quotient type (the disjoint union of the subsets) modulo (points with the same image in X) without choice</p>",
        "id": 147594921,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542119850
    },
    {
        "content": "<p>Ah, it is a bit different from the axiom of choice</p>",
        "id": 147594980,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542119884
    },
    {
        "content": "<p>In Lean, basically, <code>choice</code> = nonconstructive</p>",
        "id": 147594988,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542119901
    },
    {
        "content": "<p>so how do intuitionists glue maps?</p>",
        "id": 147595010,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542119931
    },
    {
        "content": "<p>You need <code>choice</code> to go from \"for each x there exists a y such that ...\" to a function mapping x to the corresponding y, even if you know that the corresponding y is also unique. So in that sense it's not exactly analogous to the axiom of choice in ZFC</p>",
        "id": 147595116,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542120022
    },
    {
        "content": "<p>I don't know. I guess you could try to replace \"subset of X\" by \"map to X whose fibers are subsingletons\", but I don't know how far you would get with that.</p>",
        "id": 147595178,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542120104
    },
    {
        "content": "<p>I think I want my covers to be defined as <code>U = colimit u \\in Us</code>. Then this sort of problems would go away.</p>",
        "id": 147595313,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542120214
    },
    {
        "content": "<p>I have this picture in my mind of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub><mo>√ó</mo><mo>{</mo><mn>0</mn><mo>}</mo><mo>‚à™</mo><mo>(</mo><msub><mi>A</mi><mn>0</mn></msub><mo>‚à©</mo><msub><mi>A</mi><mn>1</mn></msub><mo>)</mo><mo>√ó</mo><mo>[</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo>]</mo><mo>‚à™</mo><msub><mi>A</mi><mn>1</mn></msub><mo>√ó</mo><mo>{</mo><mn>1</mn><mo>}</mo></mrow><annotation encoding=\"application/x-tex\">A_0 \\times \\{0\\} \\cup (A_0 \\cap A_1) \\times [0, 1] \\cup A_1 \\times \\{1\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">0</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mbin\">√ó</span><span class=\"mopen\">{</span><span class=\"mord mathrm\">0</span><span class=\"mclose\">}</span><span class=\"mbin\">‚à™</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">0</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mbin\">‚à©</span><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mbin\">√ó</span><span class=\"mopen\">[</span><span class=\"mord mathrm\">0</span><span class=\"mpunct\">,</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">]</span><span class=\"mbin\">‚à™</span><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mbin\">√ó</span><span class=\"mopen\">{</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">}</span></span></span></span> projecting to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub><mo>‚à™</mo><msub><mi>A</mi><mn>1</mn></msub><mo>‚äÇ</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">A_0 \\cup A_1 \\subset X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">0</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mbin\">‚à™</span><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mrel\">‚äÇ</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span>, and not admitting a continuous section over <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>A</mi><mn>0</mn></msub><mo>‚à™</mo><msub><mi>A</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">A_0 \\cup A_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">0</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mbin\">‚à™</span><span class=\"mord\"><span class=\"mord mathit\">A</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">1</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>. Don't know if it means anything though.</p>",
        "id": 147595319,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542120218
    },
    {
        "content": "<p>I think I gave a proof that gluing in arbitrary topological spaces requires choice using roughly that example</p>",
        "id": 147595430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542120295
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> had a nice example arguing that you really need something noncomputable to glue functions which is ... right.</p>",
        "id": 147595436,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542120300
    },
    {
        "content": "<p>where by \"choice\" I mean unique choice</p>",
        "id": 147595494,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542120349
    },
    {
        "content": "<p>lean doesn't really distinguish between AC, unique choice and LEM</p>",
        "id": 147595558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542120376
    },
    {
        "content": "<p>they all follow from the same axiom</p>",
        "id": 147595575,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542120393
    },
    {
        "content": "<p>Can you glue maps of locales without choice?</p>",
        "id": 147595737,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542120556
    },
    {
        "content": "<p>I've actually been looking into it. It's in the sheaf branch on the community mathlib.</p>",
        "id": 147596063,
        "sender_full_name": "Ramon Fernandez Mir",
        "timestamp": 1542120878
    },
    {
        "content": "<p>So now I have this goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">(</span><span class=\"err\">‚®Ü</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">Us</span><span class=\"o\">}),</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">‚®Ü</span> <span class=\"o\">(</span><span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"err\">‚àà</span> <span class=\"n\">Us</span><span class=\"o\">),</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> will say: \"I told you that <code>covering_family U</code> should be a type.\" But it's not (at the moment). How do I solve silly goals like this?</p>",
        "id": 147596097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542120906
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> Good to see you!</p>",
        "id": 147596117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542120926
    },
    {
        "content": "<p>There is a rewrite rule for this</p>",
        "id": 147596119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542120927
    },
    {
        "content": "<p>I want <code>rewrite_search</code>...</p>",
        "id": 147596132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542120940
    },
    {
        "content": "<p><code>supr_subtype</code></p>",
        "id": 147596236,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542121028
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"120726\">@Luca Gerolla</span>  wanted to define a continuous function on a closed interval [0,1] by glueing continuous functions on [0,1/2] and [1/2,1]</p>\n</blockquote>\n<p>Indeed, I was dealing with continuous functions on two closed sets <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>V</mi><mo separator=\"true\">,</mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\"> V, U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span></span></span></span> (where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi><mo separator=\"true\">,</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">U, V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">V</span></span></span></span> cover the overall domain <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span>) agreeing on their intersection <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi><mo>‚à©</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\"> U \\cap  V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"mbin\">‚à©</span><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">V</span></span></span></span>  and I needed to construct a continuous function <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>X</mi><mo>‚Üí</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\"> X \\to Y </annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"mrel\">‚Üí</span><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">Y</span></span></span></span>. The code (mainly done by Mario and Kevin) is at <a href=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/Topology/Material/pasting_lemma.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/Topology/Material/pasting_lemma.lean\">https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/Topology/Material/pasting_lemma.lean</a>. <br>\nAlthough dealing with a general covering I don't know if it can be of any help.</p>",
        "id": 147596268,
        "sender_full_name": "Luca Gerolla",
        "timestamp": 1542121067
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"120726\">@Luca Gerolla</span> wrong thread?</p>",
        "id": 147596340,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542121112
    },
    {
        "content": "<p>I don't think so</p>",
        "id": 147596355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542121133
    },
    {
        "content": "<p>what's Luca doing on an nlab thread...</p>",
        "id": 147596373,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542121155
    },
    {
        "content": "<p>He's on a thread about gluing functions.</p>",
        "id": 147596381,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542121168
    },
    {
        "content": "<p><code>\\cap</code> <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>‚à©</mo></mrow><annotation encoding=\"application/x-tex\">\\cap</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.55556em;\"></span><span class=\"strut bottom\" style=\"height:0.55556em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\">‚à©</span></span></span></span></p>",
        "id": 147596382,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1542121169
    },
    {
        "content": "<p>His post is about gluing functions.</p>",
        "id": 147596387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542121175
    },
    {
        "content": "<p>Also continous_if (from mathlib - topology.continuity) turned out  very useful when I had just and ite function. <br>\nLook forward to seeing the solution to this more general pasting :)</p>",
        "id": 147596829,
        "sender_full_name": "Luca Gerolla",
        "timestamp": 1542121507
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Here is something that I find a bit annoying to do. I'm trying to prove that the following functor preserves colimits:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_Top</span> <span class=\"o\">:</span> <span class=\"n\">opens</span> <span class=\"n\">X</span> <span class=\"err\">‚•§</span> <span class=\"n\">Top</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n          <span class=\"o\">{</span> <span class=\"n\">Œ±</span> <span class=\"o\">:=</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">,</span>\n            <span class=\"n\">str</span> <span class=\"o\">:=</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">topological_space</span> <span class=\"o\">},</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®Œª</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">plift</span><span class=\"bp\">.</span><span class=\"n\">down</span> <span class=\"o\">(</span><span class=\"n\">ulift</span><span class=\"bp\">.</span><span class=\"n\">down</span> <span class=\"n\">i</span><span class=\"o\">))</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n    <span class=\"o\">(</span><span class=\"n\">embedding</span><span class=\"bp\">.</span><span class=\"n\">continuous_iff</span> <span class=\"n\">embedding_subtype_val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"n\">continuous_subtype_val</span> <span class=\"bp\">‚ü©</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Here is what I have so far:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_Top</span><span class=\"bp\">.</span><span class=\"n\">preserves_colimits</span> <span class=\"o\">:</span> <span class=\"n\">preserves_colimits</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_Top</span> <span class=\"n\">X</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">preserves</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">J</span> <span class=\"bp\">_</span> <span class=\"n\">K</span> <span class=\"n\">c</span> <span class=\"n\">hc</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">desc</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"bp\">_</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>The local context is now:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">J</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">small_category</span> <span class=\"n\">J</span><span class=\"o\">,</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">J</span> <span class=\"err\">‚•§</span> <span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">cocone</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">hc</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">is_colimit</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">cocone</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"err\">‚ãô</span> <span class=\"n\">to_Top</span><span class=\"o\">)</span>\n<span class=\"err\">‚ä¢</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">map_cocone</span> <span class=\"n\">to_Top</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">X</span>\n</pre></div>\n\n\n<p>The annoying thing is the pair <code>c, hc</code>. I would much rather work with <code>hc : has_colimit K</code> and <code>c : colimit K</code>. Because then I can use facts about how this colimit is defined. Of course I can build a unique isomorphism between the <code>c</code> that I got from Lean and the one that I'm interested in. But I wonder if it would make sense to change the setup a bit...</p>",
        "id": 147598973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542123580
    },
    {
        "content": "<p>I've pushed all that I have so far. Now I need to start packing to catch a train.</p>",
        "id": 147599173,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542123735
    },
    {
        "content": "<p>If anyone has good ideas, or wants to refactor this, please go ahead!</p>",
        "id": 147599192,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542123766
    },
    {
        "content": "<p>I'm just trying to push this category stuff to the limit (no pun intended)</p>",
        "id": 147599215,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542123790
    },
    {
        "content": "<p>I think we can just add a lemma for that.<br>\nYou're saying you want to prove: if F : C -&gt; D and C already <code>has_colimits</code>, then to prove F preserves colimits it suffices to consider the ones provided by the <code>has_colimits</code> instance.</p>",
        "id": 147599555,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542124060
    },
    {
        "content": "<p>Yes, but why not just always condider the one provided by <code>has_colimit K</code>, where <code>K</code> is a diagram.</p>",
        "id": 147599626,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542124115
    },
    {
        "content": "<blockquote>\n<p>I'm just trying to push this category stuff to the limit (no pun intended)</p>\n</blockquote>\n<p>When we'll have that <code>to_dual</code> tactic, you'll be able to pull this category stuff to the colimit without any extra effort!</p>",
        "id": 147599634,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542124133
    },
    {
        "content": "<p>Because the concept of preserving colimits doesn't depend on a choice of colimits</p>",
        "id": 147599670,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542124157
    },
    {
        "content": "<p>I see... you're probably right. I don't yet fully grasp the details of the API</p>",
        "id": 147599690,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542124192
    },
    {
        "content": "<p>But your suggested lemma would also fix this problem.</p>",
        "id": 147599771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542124235
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> -- <span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> asks me exactly what you are going to be doing regarding Spec of a ring. Ramon is supposed to be completely refactoring the scheme project as part of his MSc thesis; I got him to look at locally ringed spaces but now these are done modulo the assertion that the category of rings has all colimits. Then Kenny mentioned Spec -- I think it would just be less nervy for us if we knew exactly what you guys were planning on doing and what Ramon can do (he has written thousands of lines of Coq code but is new to Lean). Currently we need that colimits exist in the category of commutative rings, and that the spectrum of a ring is a locally ringed space (which of course is a lot of work, even though it's in some sense done already). The first step towards this is that the spectrum of a ring has a presheaf of rings on the basis of open sets <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mo>(</mo><mi>f</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">D(f)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span>. Shall I tell him to do this or will someone else do it by the weekend? It would be good if we could work together on this (although of course there is plenty plenty to do -- e.g. this Gamma Spec adjointness is a goal I have in mind for Ramon, something Johan suggested months ago -- and products of schemes is another thing).</p>",
        "id": 147601888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542126107
    },
    {
        "content": "<p>Of course I know all of this is already done in the schemes project -- the point is that we want to do it as a test of the category theory stuff; in the past we did it all \"by hand\".</p>",
        "id": 147602049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542126254
    },
    {
        "content": "<p>I think I know how to prove that colimits exist in the category of commutative rings -- can I get Ramon to do this or <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> are you likely do just randomly do this at some point in the next few days?</p>",
        "id": 147604152,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542128069
    },
    {
        "content": "<p>It will be quite a good stress test of Johannes' multivariable polynomial work I think.</p>",
        "id": 147604211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542128125
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes, collaboration is good. I have no intention to \"mow away the grass\" before Ramon's feet.<br>\nHere is a question for you: do you intend to make things mathlib-ready? Is the endgoal a PR to mathlib?</p>\n<p>My goal is to get a theory of sheaves that is ready for the perfectoid project.</p>",
        "id": 147611121,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542130654
    },
    {
        "content": "<p>Concerning colimits in CommRing: do all of them exist? Or only the directed ones?</p>",
        "id": 147611202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542130683
    },
    {
        "content": "<p>I convinced myself this afternoon that they all existed</p>",
        "id": 147611234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542130697
    },
    {
        "content": "<p>Sheaves of rings seems to be a bit of an issue. I'm not yet sure how to define them. Once we have those, I'll leave it up to Ramon to define LRS. I will not touch <code>Spec</code> or anything close to it (-;</p>",
        "id": 147611284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542130743
    },
    {
        "content": "<p>They do all exist</p>",
        "id": 147611297,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542130754
    },
    {
        "content": "<p>I do intend to define stalks. So I might get close to LRS...</p>",
        "id": 147611305,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542130765
    },
    {
        "content": "<p>via some big standard universal construction -- given a diagram in CommRing, let T0 be the polynomial ring over Z with variables the disjoint union of all the rings in the diagram, and then quotient out by the relations making all of the canonical maps ring homs</p>",
        "id": 147611313,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542130771
    },
    {
        "content": "<p>I would not mind at all if Ramon works on a branch of community mathlib and regularly pull and pushes to the <code>sheaf</code> branch.</p>",
        "id": 147611342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542130801
    },
    {
        "content": "<p>The \"bad\" news is that this all seems to be some special case of some big theory due to Lawvere and we could spend forever formalising that instead</p>",
        "id": 147611388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542130806
    },
    {
        "content": "<p>(existence of limits and colimits in some big gneerality for some algebraic categories or something)</p>",
        "id": 147611425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542130852
    },
    {
        "content": "<p>Right. So we just do rings by hand first. Like you did schemes by hand first. This seems to be what Mario would tell us to do anyway.</p>",
        "id": 147611521,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542130927
    },
    {
        "content": "<p>Right -- so <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> are you happy if <span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> proves existence of colimits in the category of commutative rings?</p>",
        "id": 147611540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542130961
    },
    {
        "content": "<p>In a relatively \"hands-on\" way, not using Lawvere anything</p>",
        "id": 147611550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542130976
    },
    {
        "content": "<p>Be aware that Scott already has some general machinery in this direction. I guess you only need coproducts and coequalisers.</p>",
        "id": 147611586,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542131031
    },
    {
        "content": "<p>I am not 100% sure whether this makes life any easier in this case</p>",
        "id": 147611712,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542131142
    },
    {
        "content": "<p>in the sense that now instead of making one gigantic commutative polynomial ring in a huge set of variables and quotienting out by an ideal generated by terms of two types and then proving something about it, you'll have to build two such rings and prove something about each of them.</p>",
        "id": 147611817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542131218
    },
    {
        "content": "<p>It would be useful to know that coproducts are defeq to tensor products, I assume...</p>",
        "id": 147611967,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542131373
    },
    {
        "content": "<p>funny isn't it. For products and subobjects you feel like you've made progress. But colimits are quotients so it's always going to be a pain I think. I don't even really understand what the coproduct of an arbitrary set of rings looks like -- it seems to be some sort of direct limit of finite tensor products -- but of course we haven't built direct limits yet so there's a danger of going round in circles here.</p>",
        "id": 147612367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542131747
    },
    {
        "content": "<blockquote>\n<p>Here is a question for you: do you intend to make things mathlib-ready? Is the endgoal a PR to mathlib?</p>\n</blockquote>\n<p>I don't even know if Mario would be interested in hosting schemes (and I've not asked) -- my goal is to take the crappy code which I wrote so I could learn how to write Lean code, and replace it with code which is sufficiently respectable to get a publication. I've not thought about mathlib at all.</p>",
        "id": 147612491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542131871
    },
    {
        "content": "<p>I think there are two options:</p>\n<ul>\n<li>either stuff like this goes into mathlib,</li>\n<li>or the Lean community comes up with a good strategy to have decentralised libraries that work together nicely as dependencies of other projects.</li>\n</ul>",
        "id": 147613037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542132320
    },
    {
        "content": "<p>The construction you sketched is clearly a composition of two constructions, why not formalize that?</p>",
        "id": 147613059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542132360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Do you want schemes in mathlib?</p>",
        "id": 147613110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542132383
    },
    {
        "content": "<p>I want polished code in mathlib</p>",
        "id": 147613114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542132401
    },
    {
        "content": "<p>Do you want polished schemes in mathlib?</p>",
        "id": 147613127,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542132415
    },
    {
        "content": "<p>sure, if that interests yous</p>",
        "id": 147613141,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542132434
    },
    {
        "content": "<p>there seem to be a lot of intermediate steps though</p>",
        "id": 147613160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542132465
    },
    {
        "content": "<p>It interests mes and about 65% of all Field medalists.</p>",
        "id": 147613162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542132468
    },
    {
        "content": "<p>There's a lot of intermediate steps because I'm trying to write reusable code.</p>",
        "id": 147613239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542132564
    },
    {
        "content": "<p>I'm not sure which construction Mario is referring to</p>",
        "id": 147613596,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542132862
    },
    {
        "content": "<blockquote>\n<p>via some big standard universal construction -- given a diagram in CommRing, let T0 be the polynomial ring over Z with variables the disjoint union of all the rings in the diagram, and then quotient out by the relations making all of the canonical maps ring homs</p>\n</blockquote>",
        "id": 147615817,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542134684
    },
    {
        "content": "<p>we already have the first part, and the second part should generalize to \"given a bunch of functions(?) make them all ring homs\"</p>",
        "id": 147615855,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542134720
    },
    {
        "content": "<p>I think, unfortunately, that eventually we will want to do all the varieties of colimits in CommRing separately.</p>",
        "id": 147624123,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542142050
    },
    {
        "content": "<p>We should do the general colimit, we should also do the filtered colimit (which is much easier), we should do coproducts, we should do binary coproducts. General nonsense says you don't need to prove any comparison theorems relating these, happily.</p>",
        "id": 147624194,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542142105
    },
    {
        "content": "<p>Later, various bits of general machinery about algebraic categories will give us the filtered colimits \"for free\"</p>",
        "id": 147624227,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542142160
    },
    {
        "content": "<p>but someone should do the construction in CommRing first as a warmup.</p>",
        "id": 147624240,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542142179
    },
    {
        "content": "<p>I don't know the Lawvere stuff; maybe later there's some generality that gives us all colimits in CommRing too?</p>",
        "id": 147624259,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542142196
    },
    {
        "content": "<p>Ok so Ramon and I will take on the task of general colimits. I'm a bit unsure about whether working in this generality will actually cause problems when we want to prove that the stalks for an affine scheme are local, but let's wait and see!</p>",
        "id": 147625299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542143141
    },
    {
        "content": "<p>Are you sure you don't want to do filtered colimits first, <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>? They are both easier to construct, and more useful! (Because they're all that's needed for stalks, and will make arguments about stalks easier.)</p>",
        "id": 147629404,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542147164
    },
    {
        "content": "<p>The way Johan or you had set up locally ringed spaces relied on the fact that CommRing had colimits</p>",
        "id": 147630367,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542148300
    },
    {
        "content": "<p>I don't know what a filtered colimit is. I know what a directed set is. Is it sort-of the same thing?</p>",
        "id": 147630421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542148338
    },
    {
        "content": "<p>aah I now know that a filtered colimit is a categorification of a directed set</p>",
        "id": 147630462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542148405
    },
    {
        "content": "<p>So I guess I don't know where to stop here. Why not just do colimits over a directed partial order? They are both easier to construct, and more useful! (Because they're all that's needed for stalks, and will make arguments about stalks easier.)</p>",
        "id": 147630538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542148487
    },
    {
        "content": "<p>And Kenny did them already :P</p>",
        "id": 147630555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542148507
    },
    {
        "content": "<p>Well, filtered is the right level of generality for the fact that you can compute the colimit in Set</p>",
        "id": 147630640,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542148611
    },
    {
        "content": "<p>but colimits in Set are completely different to colimits in CommRing</p>",
        "id": 147630661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542148643
    },
    {
        "content": "<p>or am I misunderstanding? (presumably)</p>",
        "id": 147630669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542148656
    },
    {
        "content": "<p>General ones are, but filtered ones are not</p>",
        "id": 147630680,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542148673
    },
    {
        "content": "<p>Oh I see!</p>",
        "id": 147630685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542148680
    },
    {
        "content": "<p>I will add filtered colimits (in the simplest sense, not Reid's kappa-filtered ones) to the limits branch shortly. (Just the definition!)</p>",
        "id": 147630803,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542148800
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>, Johannes asked me to rebase the limits branch; prepare for trouble. :-)</p>",
        "id": 147630858,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542148827
    },
    {
        "content": "<p>So <span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> would be interested in this. People seem to be suggesting that the definition here <a href=\"https://github.com/semorrison/lean-category-theory/blob/master/src/category_theory/presheaves/locally_ringed.lean\" target=\"_blank\" title=\"https://github.com/semorrison/lean-category-theory/blob/master/src/category_theory/presheaves/locally_ringed.lean\">https://github.com/semorrison/lean-category-theory/blob/master/src/category_theory/presheaves/locally_ringed.lean</a> which uses arbitrary colimits is not wise?</p>",
        "id": 147630866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542148842
    },
    {
        "content": "<p>Yes</p>",
        "id": 147630872,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542148853
    },
    {
        "content": "<p>That isn't wise. :-)</p>",
        "id": 147630878,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542148859
    },
    {
        "content": "<p>and instead of <code>stalk_at</code> one should use something else?</p>",
        "id": 147630892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542148883
    },
    {
        "content": "<p>I think <code>stalk_at</code> will be exactly the same</p>",
        "id": 147630907,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542148909
    },
    {
        "content": "<p>We'll just change the typeclass provided, from <code>has_colimits</code> to <code>has_filtered_colimits</code></p>",
        "id": 147630960,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542148925
    },
    {
        "content": "<p>I see. And that doesn't break anything else?</p>",
        "id": 147630966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542148937
    },
    {
        "content": "<p>When teaching is finished I'm going to be cloning this repo finally</p>",
        "id": 147630973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542148952
    },
    {
        "content": "<p>Magic will then notice that the category of open sets containing x is filtered, and so use the <code>has_filtered_colimits</code> instance,</p>",
        "id": 147630980,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542148959
    },
    {
        "content": "<p>at the minute cloning it would lead me astray</p>",
        "id": 147630984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542148963
    },
    {
        "content": "<p>which will provide an nice construction of the colimit (as a quotient of a disjoint union, just like in Set), rather than the huge one in terms of tensor products.</p>",
        "id": 147631004,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542148989
    },
    {
        "content": "<p>Would magic work for sheaves on a basis? For sheaves on a site?</p>",
        "id": 147631007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542148991
    },
    {
        "content": "<p>That I don't know.</p>",
        "id": 147631014,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542149001
    },
    {
        "content": "<p>I had never seen the construction of a colimit in CommRing until today, when I figured it out for myself. I did not use tensor products. What trick did I miss?</p>",
        "id": 147631032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542149021
    },
    {
        "content": "<p>I just made a polynomial ring over Z with variables the disjoint union of all the rings in the diagram</p>",
        "id": 147631053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542149038
    },
    {
        "content": "<p>and then quotiented</p>",
        "id": 147631056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542149040
    },
    {
        "content": "<p>I understand that for two rings a coproduct is the tensor product</p>",
        "id": 147631112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542149068
    },
    {
        "content": "<p>but I couldn't see how this generalised to infinitely many rings</p>",
        "id": 147631119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542149077
    },
    {
        "content": "<p>it seemed to be a direct limit of tensor produts, but to make direct limits you  want to take coproducts again</p>",
        "id": 147631132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542149100
    },
    {
        "content": "<p>oh, okay, maybe I didn't think very hard about the infinite diagram case, either :-)</p>",
        "id": 147631157,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542149119
    },
    {
        "content": "<p>(I had never thought about any of this (nor knew what a site was, etc) until Lean came along. :-)</p>",
        "id": 147631173,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542149145
    },
    {
        "content": "<p>Well... it's the filtered colimit of all the ways to take a coproduct of finitely many of the rings</p>",
        "id": 147631237,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542149184
    },
    {
        "content": "<p>and filtered colimits are easy</p>",
        "id": 147631238,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542149194
    },
    {
        "content": "<p>Is there a general story?</p>",
        "id": 147631245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542149211
    },
    {
        "content": "<p>That said, the construction you gave is the simplest one and it has essentially nothing to do with rings in particular</p>",
        "id": 147631246,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542149214
    },
    {
        "content": "<p>Reducing a general colimit to a filtered colimit?</p>",
        "id": 147631256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542149226
    },
    {
        "content": "<p>I still don't know whether we should just stick to filtered (0,1)-categories</p>",
        "id": 147631348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542149358
    },
    {
        "content": "<p>i.e. directed sets (I should stop looking at nlab)</p>",
        "id": 147631363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542149384
    },
    {
        "content": "<p>Oh, Reid's argument perhaps resolves this -- if it works over set then take it</p>",
        "id": 147631372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542149396
    },
    {
        "content": "<p>Directed colimits will be somewhat easier notationally and you don't need them unless you want stalks for some site which is not itself a poset. I think.</p>",
        "id": 147631433,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542149426
    },
    {
        "content": "<p>I think the etale site is the simplest example of this that I know</p>",
        "id": 147631440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542149453
    },
    {
        "content": "<p>Er, don't need filtered colimits unless ..., of course.</p>",
        "id": 147631441,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542149455
    },
    {
        "content": "<p>and next year when we're doing etale cohomology we'll need etale sites</p>",
        "id": 147631458,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542149469
    },
    {
        "content": "<p>I think it is safe to assume that by the time we want to do etale cohomology we will have filtered colimits of rings</p>",
        "id": 147631469,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542149494
    },
    {
        "content": "<p>You can actually build filtered colimits from directed ones, so it doesn't lose any great generality to work with directed ones for some purposes</p>",
        "id": 147631531,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542149565
    },
    {
        "content": "<blockquote>\n<p>Magic will then notice that the category of open sets containing x is filtered, and so use the <code>has_filtered_colimits</code> instance,</p>\n</blockquote>\n<p>There's something I can't get to add up here. Say there's a <code>has_colimits</code> instance and also a simpler <code>has_filtered_colimits</code> instance. Now let's say I'm trying to take a colimit and it happens to be filtered. If Lean uses the <code>has_colimits</code> instance then the colimit will be constructed in one way, but if Magic notices that the colimit is filtered then it could construct it using the simpler filtered colimit construction. The two constructions will give canonically isomorphic, but probably not defeq, objects, and doesn't this give rise to a diamond?</p>",
        "id": 147633659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542152056
    },
    {
        "content": "<p>I have to admit I don't know how bad a problem this is going to be!</p>",
        "id": 147638007,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1542157838
    },
    {
        "content": "<p>You also don't necessarily <em>have</em> to put your filtered colimits into the type class system. You can just define and use them directly.</p>",
        "id": 147638987,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542159274
    },
    {
        "content": "<p>the general statement comes from the theory of locally presentable categories</p>",
        "id": 147640447,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542161326
    },
    {
        "content": "<p>every object can be given as a filtered colimit of finite pushouts of compact (i.e. finitely (resp Kappa)-presentable) objects, iirc the statement correctly</p>",
        "id": 147640571,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542161524
    },
    {
        "content": "<p>and iirc CRing has only a single generator, Z[x]</p>",
        "id": 147640591,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542161572
    },
    {
        "content": "<p>You don't need to work with Lawvere theories to do this stuff, you might be fine doing the locPres machinery and then proving algebraic categories you care about are LocPres</p>",
        "id": 147640677,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542161737
    },
    {
        "content": "<p>standard reference is Adamek-Rosicky</p>",
        "id": 147640684,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542161757
    },
    {
        "content": "<p>It seems a lot less complicated than doing Lawvere theories generally</p>",
        "id": 147640760,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542161831
    },
    {
        "content": "<p>The general argument is useful in other places, iirc. Grothendieck first used this style of argument in the Tohoku paper</p>",
        "id": 147640896,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542162061
    },
    {
        "content": "<p>proving that the category of abelian sheaves has enough injectives, but I forget the details</p>",
        "id": 147640956,
        "sender_full_name": "Harry Gindi",
        "timestamp": 1542162137
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Maybe we should change the definition of <code>stalk</code> a tiny little bit, and write <code>filtered_colimit</code> instead of <code>colimit</code>. That would take care of your issue, I think.</p>",
        "id": 147649975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542177481
    },
    {
        "content": "<p>This is a diamond-like issue but one level up. With diamonds you might end up with two objects which are equal but the proof isn't rfl. Here the objects are not even equal, merely canonically isomorphic</p>",
        "id": 147650968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542179174
    },
    {
        "content": "<p>I see what you mean. And I think this is showing that the current type class system might not be a good fit for categorical stuff (wait till we want to do higher-categorical stuff...). But maybe we can just ignore the issue for now, and hope  that Lean 4 will solve this issue before we hit serious problems.</p>",
        "id": 147652970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542182747
    },
    {
        "content": "<p>This is pretty ugly:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">extend</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">limit</span> <span class=\"o\">((</span><span class=\"n\">comma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"n\">full_subcategory_inclusion</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_obj</span> <span class=\"n\">U</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">comma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"n\">full_subcategory_inclusion</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_obj</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">‚ü∂</span>\n        <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">limit</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"o\">(</span><span class=\"n\">comma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"n\">full_subcategory_inclusion</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_obj</span> <span class=\"n\">V</span><span class=\"o\">))</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)),</span>\n    <span class=\"k\">begin</span>\n      <span class=\"k\">have</span> <span class=\"n\">foo</span> <span class=\"o\">:=</span> <span class=\"n\">limit</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"o\">((</span><span class=\"n\">comma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">(</span><span class=\"n\">full_subcategory_inclusion</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_obj</span> <span class=\"n\">U</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">extend</span><span class=\"bp\">.</span><span class=\"n\">aux</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n      <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">extend</span><span class=\"bp\">.</span><span class=\"n\">aux</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n      <span class=\"n\">convert</span> <span class=\"n\">foo</span><span class=\"o\">,</span>\n      <span class=\"n\">swap</span> <span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"n\">assumption</span>\n    <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 147739873,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542287509
    },
    {
        "content": "<p>Why isn't the <code>map</code> field just an application of <code>limit.pre</code>?</p>",
        "id": 147740652,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542288280
    },
    {
        "content": "<p>what goal is the last line solving?</p>",
        "id": 147740706,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542288334
    },
    {
        "content": "<p>My guess is that representing slice categories as comma categories is actually not a good idea in Lean, because the isomorphism (punit -&gt; a) = a is not enough of an equality</p>",
        "id": 147741081,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542288709
    },
    {
        "content": "<p>Did you actually manage to prove the map_id and map_comp fields?</p>",
        "id": 147741481,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542289179
    },
    {
        "content": "<p>Not yet, still working on it.</p>",
        "id": 147741721,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542289454
    },
    {
        "content": "<p>Note that I'm not taking a slice category, although it almost is.</p>",
        "id": 147741761,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542289512
    },
    {
        "content": "<p>This is opens in <code>B</code> that are contained in <code>U</code>, but <code>U</code> is not in <code>B</code>.</p>",
        "id": 147741857,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542289576
    },
    {
        "content": "<p>Oh, I see</p>",
        "id": 147742182,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542289938
    },
    {
        "content": "<p>If these are presheaves of sets, then there's an easier way to write the formula</p>",
        "id": 147742355,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542290123
    },
    {
        "content": "<p>it's the same as the right Kan extension, right?</p>",
        "id": 147742375,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542290154
    },
    {
        "content": "<p>Hmmm... I think so.</p>",
        "id": 147742424,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542290178
    },
    {
        "content": "<p>If you want to help, please do so.</p>",
        "id": 147742430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542290186
    },
    {
        "content": "<p>Lean is fighting back hard (-;</p>",
        "id": 147742437,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542290199
    },
    {
        "content": "<p>Maybe we should do it for a general map between sites, in that case.</p>",
        "id": 147742454,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542290224
    },
    {
        "content": "<p>If E is the extended presheaf then we should have E(U) = Hom(yU, E) = Hom(R(yU), F) where R is the restriction of a presheaf on C to a presheaf on B</p>",
        "id": 147742530,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542290287
    },
    {
        "content": "<p>so E is the composition y, then R, then Hom(-, F)</p>",
        "id": 147742547,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542290310
    },
    {
        "content": "<p>Yes, that might help as well... at least for clarity</p>",
        "id": 147742567,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542290346
    },
    {
        "content": "<p>Ok, I think this is a nice way to do it!</p>",
        "id": 147742652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542290419
    },
    {
        "content": "<p>I don't yet see why it is the same thing as in my special case</p>",
        "id": 147742680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542290453
    },
    {
        "content": "<p>Aah, <code>U</code> is the colimit of all the <code>Ui ‚àà B</code> that are contained in <code>U</code>. Now pull this through <code>Hom(_, F)</code> and you get a limit.</p>",
        "id": 147742806,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542290528
    },
    {
        "content": "<p>You might find it useful to borrow <a href=\"https://github.com/leanprover-community/mathlib/blob/adjunctions/category_theory/presheaf.lean#L85\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/adjunctions/category_theory/presheaf.lean#L85\">https://github.com/leanprover-community/mathlib/blob/adjunctions/category_theory/presheaf.lean#L85</a></p>",
        "id": 147743096,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542290784
    },
    {
        "content": "<p>I think you will want to apply it twice</p>",
        "id": 147743119,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542290804
    },
    {
        "content": "<p>In your setup you have a functor B -&gt; C, right?</p>",
        "id": 147743129,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542290811
    },
    {
        "content": "<p>What do you mean?</p>",
        "id": 147743202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542290870
    },
    {
        "content": "<p><code>B</code> is a basis, and it has an inclusion into <code>opens X</code>.</p>",
        "id": 147743262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542290884
    },
    {
        "content": "<p>I have a presheaf on <code>B</code></p>",
        "id": 147743276,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542290889
    },
    {
        "content": "<p>Okay so let's call <code>opens X</code> <code>C</code> for now</p>",
        "id": 147743300,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542290910
    },
    {
        "content": "<p>Aaah, <code>C</code> was my category of coefficients so far</p>",
        "id": 147743339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542290949
    },
    {
        "content": "<p>ah</p>",
        "id": 147743342,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542290953
    },
    {
        "content": "<p>But maybe I should stop worrying about coefficients, and only focus on <code>Type</code>.</p>",
        "id": 147743355,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542290964
    },
    {
        "content": "<p>Well this formula won't work unless the values are in Type</p>",
        "id": 147743373,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542290984
    },
    {
        "content": "<p>Right, so I should forget about <code>C</code></p>",
        "id": 147743496,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542291039
    },
    {
        "content": "<p>And sheaves of rings will require some extra thought</p>",
        "id": 147743523,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542291058
    },
    {
        "content": "<p>Okay, in that case let me just use the names from the thing I linked above, so you have a functor C -&gt; D</p>",
        "id": 147743525,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542291059
    },
    {
        "content": "<p>If you apply <code>restricted_yoneda</code> to it, you get a functor D -&gt; Set^C^op</p>",
        "id": 147743544,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542291075
    },
    {
        "content": "<p>and if you apply <code>restricted_yoneda</code> to that, you get a functor Set^C^op -&gt; Set^D^op</p>",
        "id": 147743555,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542291090
    },
    {
        "content": "<p>and that should be the right Kan extension along the original functor</p>",
        "id": 147743559,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542291097
    },
    {
        "content": "<p>the thing I called \"Ry\" earlier is another, possibly better way to write <code>restricted_yoneda</code></p>",
        "id": 147743982,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542291434
    },
    {
        "content": "<p>Sorry, as student entered my office. So I have to wait a while with this thing.</p>",
        "id": 147743992,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542291446
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Hmmm... morphisms of sites seem to be non-trivial. I don't think I want to do them now, unless you want to join in. We would need to explain Lean this definition <a href=\"https://ncatlab.org/nlab/show/flat+functor#SiteValuedFunctors\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/flat+functor#SiteValuedFunctors\">https://ncatlab.org/nlab/show/flat+functor#SiteValuedFunctors</a></p>",
        "id": 147746533,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542293516
    },
    {
        "content": "<p>Right... so concretely I guess your actual goal is to show that the extended presheaf is actually a sheaf?</p>",
        "id": 147747568,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542294172
    },
    {
        "content": "<p>You might want to pick a fact to prove, and work backwards from there</p>",
        "id": 147747732,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542294282
    },
    {
        "content": "<p>Otherwise you can enter a swamp of things you could formalize and choices of definitions you could make</p>",
        "id": 147747750,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542294299
    },
    {
        "content": "<p>Right. I want to get an equivalence of categories between <code>sheaf B</code> and <code>sheaf X</code>. That is a concrete goal that I definitely want to reach.</p>",
        "id": 147751358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542297152
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> So which approach would you suggest now? Maybe the one with Kan extensions is best? Because it will generalise later on?</p>",
        "id": 147753284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542298564
    },
    {
        "content": "<p>Hmmm, I'm being called for an early dinner. See you later.</p>",
        "id": 147753315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542298597
    },
    {
        "content": "<p><span class=\"emoji emoji-1f923\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span> This error is hilarious:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">over</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">U</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n</pre></div>",
        "id": 147762987,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542307307
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> How does this look?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">restrict</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span> <span class=\"err\">‚•§</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">full_subcategory_inclusion</span> <span class=\"n\">B</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">whisker_left</span> <span class=\"bp\">_</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">extend</span> <span class=\"o\">:</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">presheaf</span> <span class=\"n\">B</span> <span class=\"err\">‚•§</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"err\">‚ãô</span> <span class=\"n\">restrict</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"err\">‚ãô</span> <span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">whisker_left</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">whisker_left</span> <span class=\"bp\">_</span> <span class=\"err\">$</span> <span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>I think you gave a very good suggestion!</p>",
        "id": 147767061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542310402
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> I think it makes sense to merge your <code>presheaf.lean</code> with parts of my <code>sheaf.lean</code>. What would be the best approach? Should I merge your branch into mine?</p>",
        "id": 147767734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542310921
    },
    {
        "content": "<p>I would like to prove that <code>restrict</code> and <code>extend</code> form an adjunction anyway.</p>",
        "id": 147767788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542310940
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Feel free to merge my branch into yours of course, though I will note that I intend to try out a redesign of adjunctions at some point</p>",
        "id": 147783569,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542326141
    },
    {
        "content": "<p>I'm not sure if I'm using things in the right way. I'm trying to write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"k\">let</span> <span class=\"n\">G1</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">equiv_of_iso</span> <span class=\"n\">D</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">subtype_equiv_of_subtype</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)}</span> <span class=\"n\">Eeq</span><span class=\"o\">),</span>\n</pre></div>\n\n\n<p>where <code>D : F.obj ‚âÖ {p // horrible p}</code> is isomorphisms between a type and a subtype in the category <code>Type u</code> which I turn into an equiv.<br>\nI then want to replace the horrible right hand side with a subtype of something else, so I thought, lets use transitivity of <code>equiv</code> and feed it <code>Eeq</code>, which is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">Eeq</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">Ui</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span><span class=\"o\">}),</span> <span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">((</span><span class=\"n\">Ui</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">))</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">‚âÉ</span>\n  <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span><span class=\"o\">}),</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">trans</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">equiv_of_iso</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">Pi_congr_right</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span>\n       <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">Ui</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span><span class=\"o\">}),</span>\n          <span class=\"n\">equiv_of_iso</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span>\n            <span class=\"o\">(</span><span class=\"n\">nat_iso</span><span class=\"bp\">.</span><span class=\"n\">app</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">yoneda_lemma</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">Ui</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">‚â™‚â´</span>\n               <span class=\"n\">ulift_trivial</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">((</span><span class=\"n\">evaluation_uncurried</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"err\">·µí·µñ</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">((</span><span class=\"n\">Ui</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span> <span class=\"n\">F</span><span class=\"o\">))))),</span>\n</pre></div>\n\n\n<p>The left hand side of <code>Eeq</code> should be exactly the type of the <code>p</code> in <code>{p // horrible p}</code>.</p>\n<p>I get the following error:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">subtype_equiv_of_subtype</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">Eeq</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">Eeq</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">Ui</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span><span class=\"o\">}),</span> <span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">((</span><span class=\"n\">Ui</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">))</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">‚âÉ</span>\n    <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span><span class=\"o\">}),</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"o\">(</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"o\">(</span><span class=\"n\">Ui</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span><span class=\"o\">}),</span> <span class=\"n\">yoneda</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"o\">((</span><span class=\"n\">Ui</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">))</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">‚âÉ</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</pre></div>\n\n\n<p>I have tried looking at universes. I have enable <code>pp.all</code>. And I'm clueless. Any suggestions?</p>",
        "id": 148024110,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542702082
    },
    {
        "content": "<p>Is it a typeclass issue? That sometimes causes errors that look like that. Lean can't infer a typeclass and so gives up and prints an unhelpful error message</p>",
        "id": 148024274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542702291
    },
    {
        "content": "<p>I mean equiv.subtype_equiv_of_subtype -- does it have some secret inputs that it can't find?</p>",
        "id": 148024298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542702359
    },
    {
        "content": "<p>Also, why is <code>p</code> not an explicit argument in</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">subtype_equiv_of_subtype</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"err\">‚âÉ</span> <span class=\"n\">Œ≤</span><span class=\"o\">),</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"err\">‚âÉ</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">Œ≤</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">b</span><span class=\"o\">)}</span>\n<span class=\"bp\">|</span> <span class=\"bp\">‚ü®</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">‚ü®</span><span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)),</span> <span class=\"k\">by</span> <span class=\"n\">rwa</span> <span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">],</span>\n   <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">g</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n   <span class=\"k\">assume</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_comp</span><span class=\"o\">,</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">comp_eq_id</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_id</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n   <span class=\"k\">assume</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">map_comp</span><span class=\"o\">,</span> <span class=\"n\">r</span><span class=\"bp\">.</span><span class=\"n\">comp_eq_id</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">map_id</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"bp\">‚ü©</span>\n</pre></div>",
        "id": 148024334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542702363
    },
    {
        "content": "<p>Well, in general it can't infer that <code>p</code>.</p>",
        "id": 148024344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542702386
    },
    {
        "content": "<p>I'm explicitly talking about typeclasses</p>",
        "id": 148024349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542702408
    },
    {
        "content": "<p>What universe is <code>?m_1</code> expected to be in?</p>",
        "id": 148024351,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542702410
    },
    {
        "content": "<p><code>Type u</code></p>",
        "id": 148024354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542702417
    },
    {
        "content": "<p>I think Johannes has a bad habit of making lots of things implicit that can't be inferred when used directly</p>",
        "id": 148024361,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542702435
    },
    {
        "content": "<p>I guess that <code>p</code> is inferrable if you use it as a rewrite, or apply it to something</p>",
        "id": 148024384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542702460
    },
    {
        "content": "<p>But in my case a smart elaborator should even be able to infer it, because I'm composing with another equiv.</p>",
        "id": 148024389,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542702470
    },
    {
        "content": "<p>Can I rewrite along <code>equiv</code>s?</p>",
        "id": 148024429,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542702483
    },
    {
        "content": "<p>I think? <code>calc</code> for sure</p>",
        "id": 148024432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542702500
    },
    {
        "content": "<p>Isn't <code>Œ† (a : {x // x ‚àà c}), F.obj ((a.val).left)</code> Type (u + 1). If I'm not mistaken?</p>",
        "id": 148024442,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542702535
    },
    {
        "content": "<p>Hmmm, it says <code>rewrite tactic failed, lemma is not an equality nor a iff</code></p>",
        "id": 148024445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542702538
    },
    {
        "content": "<p>hm, I guess that is probably a <code>// TODO(Leo)</code> somewhere</p>",
        "id": 148024474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542702591
    },
    {
        "content": "<p>obviously it's not high on the list of priorities</p>",
        "id": 148024531,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542702622
    },
    {
        "content": "<p>The <code>F.obj ((a.val).left)</code> is <code>Type u</code>, and the product is over <code>c : set (over U)</code> where <code>U : X</code> and <code>X : Type u</code></p>",
        "id": 148024534,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542702624
    },
    {
        "content": "<p>I hope that doesn't bump up universes...</p>",
        "id": 148024540,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542702644
    },
    {
        "content": "<p>that sounds fine</p>",
        "id": 148024545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542702663
    },
    {
        "content": "<p>you can just check, of course</p>",
        "id": 148024550,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542702672
    },
    {
        "content": "<p>If <code>F.obj ((a.val).left</code> is Type u, then <code>Œ† (a : {x // x ‚àà c}), F.obj ((a.val).left)</code> is Type (u + 1) right?</p>",
        "id": 148024567,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542702713
    },
    {
        "content": "<p>No it isn't</p>",
        "id": 148024608,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1542702741
    },
    {
        "content": "<p>another trick you can try is <code>by convert</code> at the type mismatch</p>",
        "id": 148024687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542702866
    },
    {
        "content": "<p>it should home in on the mismatched part</p>",
        "id": 148024697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542702894
    },
    {
        "content": "<p>How exactly should I do that?</p>",
        "id": 148024711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542702928
    },
    {
        "content": "<p>something like <code>subtype_equiv_of_subtype (by convert Eeq)</code> or <code>refine subtype_equiv_of_subtype _, convert Eeq</code></p>",
        "id": 148024771,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1542702988
    },
    {
        "content": "<p>Cool! That finds the following unsolved goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">‚ä¢</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_coproducts</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">functor_category_has_coproducts</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 148024839,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542703096
    },
    {
        "content": "<p>That's progress at least.</p>",
        "id": 148024841,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542703104
    },
    {
        "content": "<p>I am loving <code>convert</code>. I use it a lot when doing basic UG maths -- \"this is basically the answer, now let's see what pieces we have to pick up\"</p>",
        "id": 148024861,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1542703189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span>  <code>rw</code> only work with <code>=</code> (maybe also <code>==</code>, and <code>&lt;-&gt;</code> only works due to <code>propext</code>). Rewriting with <code>equiv</code> is hard, one needs to prove that the motive (i.e. context in which the right-hand side appears) can be transported along the <code>equiv</code>. Even ignoring dependencies, parametricity is necessary as it shows that there is no <code>choice</code> involved.</p>",
        "id": 148027986,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1542707276
    },
    {
        "content": "<p>Right. That is about what I expected.</p>",
        "id": 148028093,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542707393
    },
    {
        "content": "<p>To rewrite along a <code>equiv</code> we could use the <code>param</code>-branch <a href=\"https://github.com/leanprover-community/mathlib/commits/param\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commits/param\">https://github.com/leanprover-community/mathlib/commits/param</a> and <code>transfer</code>.</p>",
        "id": 148028181,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1542707462
    },
    {
        "content": "<p>One example why it is a problem is:</p>\n<p>We want to rewrite <code>e : Œ± ‚âÉ Œ≤</code> in <code>{a : Œ± // p a}</code>, but what would be the goal? We get something like<code>{b : Œ≤ // p (f‚Åª¬π b)}</code>. But in many cases <code>p</code> itself is also parametric, i.e. we have actually <code>{b : Œ≤ // @p Œ± (f‚Åª¬π b)}</code> (not really, as <code>p</code> is describing a term and not a constant, but I hope you get the idea) Now when we can try to adopt the structure of <code>p</code> s.t. <code>Œ±</code> is completely replaced by <code>Œ≤</code>, and then <code>f</code> isn't occurring anymore</p>",
        "id": 148028325,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1542707666
    },
    {
        "content": "<p>This adoption mechanism is the kind of rewrite <code>transfer</code> is intended to do</p>",
        "id": 148028348,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1542707714
    },
    {
        "content": "<p>and <code>param</code> provides us with the necessary relations</p>",
        "id": 148028353,
        "sender_full_name": "Johannes H√∂lzl",
        "timestamp": 1542707725
    },
    {
        "content": "<p>I see. But I suspect that <code>param</code> isn't yet ready for prime time.</p>",
        "id": 148028487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542707893
    },
    {
        "content": "<p>You need to ask <span class=\"user-mention\" data-user-id=\"110193\">@Cyril Cohen</span> about this</p>",
        "id": 148028596,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1542708086
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes H√∂lzl</span> <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> <code>param</code> is not ready yet, the translation of recursors was not as straightforward as I thought.</p>",
        "id": 148028937,
        "sender_full_name": "Cyril Cohen",
        "timestamp": 1542708564
    },
    {
        "content": "<p>What do you do when Lean doesn't want to plug a morphism in the category <code>C</code> into your contravariant functor <code>F : C·µí·µñ  ‚•§ Type u</code>?<br>\nYou use <code>convert</code>, and let <code>tidy</code> clean up the mess! <span class=\"emoji emoji-1f389\" title=\"tada\">:tada:</span></p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">convert</span> <span class=\"n\">Ui</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"bp\">;</span> <span class=\"n\">tidy</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 148039894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542721653
    },
    {
        "content": "<p>What's up, <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>?</p>",
        "id": 148041125,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542722750
    },
    {
        "content": "<blockquote>\n<p>Cool! That finds the following unsolved goal:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"err\">‚ä¢</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_coproducts</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">functor_category_has_coproducts</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n</pre></div>\n\n\n</blockquote>\n<p>This is probably true by <code>refl</code></p>",
        "id": 148046156,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542727488
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_coproducts</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">functor_category_has_coproducts</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"k\">with</span>\n  <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">=</span> <span class=\"err\">?</span><span class=\"n\">m_3</span>\n</pre></div>",
        "id": 148046302,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542727582
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_coproducts</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_coproducts_of_has_colimits</span>\n</pre></div>",
        "id": 148046325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542727616
    },
    {
        "content": "<p>So, I changed that instance, and now I get</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">there</span> <span class=\"n\">are</span> <span class=\"n\">no</span> <span class=\"n\">goals</span> <span class=\"n\">to</span> <span class=\"n\">be</span> <span class=\"n\">solved</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">no</span> <span class=\"n\">goals</span>\n</pre></div>",
        "id": 148046374,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542727669
    },
    {
        "content": "<p>Aaah, lol, that is because I should now remove the <code>refl</code>.</p>",
        "id": 148046438,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542727705
    },
    {
        "content": "<p>Oh, I didn't notice \"coproducts\" rather than \"colimits\". Still I'm confused. What are the two instances which are not defeq, but equal by tidy?</p>",
        "id": 148046447,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542727715
    },
    {
        "content": "<p>No, they aren't equal by <code>tidy</code> either</p>",
        "id": 148046463,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542727739
    },
    {
        "content": "<p>Or rather, what did you change that instance to?</p>",
        "id": 148046499,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542727792
    },
    {
        "content": "<p>well, the right hand side of that goal I guess</p>",
        "id": 148046576,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542727820
    },
    {
        "content": "<p>Exactly</p>",
        "id": 148046590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542727830
    },
    {
        "content": "<p>But I see</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">functor_category_has_coproducts</span> <span class=\"o\">[</span><span class=\"n\">has_coproducts</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_coproducts</span><span class=\"bp\">.</span><span class=\"o\">{(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_coproducts_of_has_colimits</span>\n</pre></div>",
        "id": 148046604,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542727850
    },
    {
        "content": "<p>... I'm really confused now</p>",
        "id": 148046754,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542727959
    },
    {
        "content": "<p>Ohh, maybe I get what is going on. I think all this duplication between colimit classes is biting you</p>",
        "id": 148046922,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542728110
    },
    {
        "content": "<p>Well, I'm still not sure why that would be a problem either really</p>",
        "id": 148047035,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542728201
    },
    {
        "content": "<p>But I still think the duplication is silly anyways</p>",
        "id": 148047048,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542728219
    },
    {
        "content": "<p>Which duplication do you mean exactly?</p>",
        "id": 148047066,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542728240
    },
    {
        "content": "<p>Good question</p>",
        "id": 148047140,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542728301
    },
    {
        "content": "<p>I was thinking of <code>has_colimits_of_shape</code> and <code>has_colimits</code> being unrelated</p>",
        "id": 148047155,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542728331
    },
    {
        "content": "<p>But now I see there's also <code>has_colimits</code> which is also unrelated</p>",
        "id": 148047165,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542728342
    },
    {
        "content": "<p>Gah, <code>has_coproducts</code></p>",
        "id": 148047176,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542728352
    },
    {
        "content": "<p>Anyways, I'm still confused by the original fact that you replaced an instance by, as far as I can tell, its definition and it changed the behavior of <code>refl</code></p>",
        "id": 148047441,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542728595
    },
    {
        "content": "<p>Well, I didn't even need <code>refl</code> anymore. <code>convert</code> now took care of everything.</p>",
        "id": 148047568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542728683
    },
    {
        "content": "<p>because <code>congr</code>, which <code>convert</code> uses, will try closing goals with <code>refl</code> for you</p>",
        "id": 148047657,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542728753
    },
    {
        "content": "<p>Currently I'm trying to prove the equivalence of different formulations of the sheaf condition. Math-proof: apply Yoneda; QED. Lean-proof: <span class=\"emoji emoji-1f631\" title=\"scream\">:scream:</span> <span class=\"emoji emoji-1f631\" title=\"scream\">:scream:</span> <span class=\"emoji emoji-1f4a5\" title=\"boom\">:boom:</span></p>",
        "id": 148047663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542728757
    },
    {
        "content": "<p><code>by convert x</code> should be the same as <code>by exact x</code></p>",
        "id": 148047717,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542728773
    },
    {
        "content": "<p>which apparently is not the same as <code>x</code></p>",
        "id": 148047745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542728795
    },
    {
        "content": "<p>OK, I got to the same place where you were before changing the instance.</p>",
        "id": 148055915,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542736614
    },
    {
        "content": "<p>It's kind of hard to understand what's going on because all the <code>has_blah</code> things are classes, which means they aren't printed except with <code>pp.implicit</code>, which also prints a bunch of other stuff I don't care about...</p>",
        "id": 148055953,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542736682
    },
    {
        "content": "<p>I wish you could jump from names in the goal window to their definitions...</p>",
        "id": 148056108,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542736836
    },
    {
        "content": "<p>Right, we should but the \"interactive\" back in the goal window <span class=\"emoji emoji-1f600\" title=\"grinning\">:grinning:</span></p>",
        "id": 148056614,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542737468
    },
    {
        "content": "<p>My conclusion is that I don't know what is wrong exactly, but all these different <code>has_*</code> need to be rethought (probably there should be far fewer of them)</p>",
        "id": 148056956,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542737803
    },
    {
        "content": "<p>Apparently your instances which were not the same reduce to something like the following</p>",
        "id": 148057011,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542737871
    },
    {
        "content": "<p>On one side, we have the colimit of a functor on a discrete category defined using the instance that says the category of types has colimits</p>",
        "id": 148057077,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542737921
    },
    {
        "content": "<p>On the other side, we're doing something like building a colimit cone from a coproduct thing, which in turn is built from the original colimit somehow</p>",
        "id": 148057109,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542737975
    },
    {
        "content": "<p>both of these constructions being nontrivial</p>",
        "id": 148057118,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542737992
    },
    {
        "content": "<p>so that they don't just cancel out</p>",
        "id": 148057189,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542738023
    },
    {
        "content": "<p>I haven't even seen this file <code>limits/products.lean</code> before</p>",
        "id": 148057227,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542738100
    },
    {
        "content": "<p>Thanks for looking into this! Apparently it's trickier than I thought...</p>",
        "id": 148065294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1542745514
    },
    {
        "content": "<p>There are so many instances and it's hard to tell which ones are used where.</p>",
        "id": 148065317,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542745534
    },
    {
        "content": "<p>for example, <code>functor_category_has_coproducts</code> uses <code>limits.has_coproducts_of_has_colimits</code> which needs a <code>limits.has_colimits_of_shape.{u v} (discrete Œ≤)</code> instance. Does it come from <code>has_colimits_of_shape_of_has_coproducts_of_shape</code> or <code>functor_category_has_colimits_of_shape</code>?</p>",
        "id": 148065430,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542745610
    },
    {
        "content": "<p>either way, it will eventually end up at <code>has_coproducts_of_shape</code> for the original category which comes from <code>has_coproducts_of_shape_of_has_coproducts</code> which uses <code>has_coproducts</code> which comes from an unnamed instance with definition <code>has_coproducts_of_has_colimits</code> which finally comes from the one true <code>has_colimits</code> instance for Type. I think.</p>",
        "id": 148065635,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542745793
    },
    {
        "content": "<p>So that's how you end up with the <code>has_colimits</code> -&gt; <code>has_coproducts</code> -&gt; <code>has_colimits</code> double translation, which is not <code>refl</code></p>",
        "id": 148065696,
        "sender_full_name": "Reid Barton",
        "timestamp": 1542745817
    },
    {
        "content": "<p>It's really quite stupid, but I only realised yesterday that all the time I've been working with the wrong <code>map f : presheaf X \\functor presheaf Y</code>.</p>",
        "id": 148640522,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543328528
    },
    {
        "content": "<p>We want something like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">map&#39;</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span> <span class=\"err\">‚•§</span> <span class=\"n\">presheaf</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">colimit</span> <span class=\"o\">((</span><span class=\"n\">comma</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_obj</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n    <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">V‚ÇÅ</span> <span class=\"n\">V‚ÇÇ</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">colimit</span><span class=\"bp\">.</span><span class=\"n\">pre</span> <span class=\"o\">((</span><span class=\"n\">comma</span><span class=\"bp\">.</span><span class=\"n\">snd</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_obj</span> <span class=\"n\">V‚ÇÇ</span><span class=\"o\">)</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span> <span class=\"err\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">comma</span><span class=\"bp\">.</span><span class=\"n\">map_left</span> <span class=\"n\">f</span> <span class=\"err\">$</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_map</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">op</span><span class=\"o\">,</span>\n    <span class=\"n\">map_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n    <span class=\"k\">begin</span>\n      <span class=\"n\">erw</span> <span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">of_map_id</span><span class=\"o\">,</span>\n      <span class=\"n\">erw</span> <span class=\"n\">colimit</span><span class=\"bp\">.</span><span class=\"n\">pre_map</span><span class=\"o\">,</span>\n      <span class=\"n\">tidy</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span> <span class=\"o\">},</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>but I find it impossible to get this sorry-free.</p>",
        "id": 148640569,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543328596
    },
    {
        "content": "<p>This is what I implemented in the <code>adjunctions</code> branch, I think?</p>",
        "id": 148640594,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543328630
    },
    {
        "content": "<p>This is what will give us the pullback of (pre)sheaves.</p>",
        "id": 148640600,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543328636
    },
    {
        "content": "<p>Aaah, did you?</p>",
        "id": 148640608,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543328640
    },
    {
        "content": "<p>I didn't look far enough, I'm afraid.</p>",
        "id": 148640664,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543328653
    },
    {
        "content": "<p>I think it is <code>yoneda_extension (F.comp yoneda)</code>?</p>",
        "id": 148640670,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543328658
    },
    {
        "content": "<p>at least, it seems to involve many of the same ingredients :)</p>",
        "id": 148640698,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543328691
    },
    {
        "content": "<p>In which file?</p>",
        "id": 148640743,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543328728
    },
    {
        "content": "<p>another construction which I am not very happy about, though...</p>",
        "id": 148640747,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543328733
    },
    {
        "content": "<p><code>presheaf.lean</code></p>",
        "id": 148640751,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543328736
    },
    {
        "content": "<p>Aaah, I see. Seems pretty non-trivial...</p>",
        "id": 148640850,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543328826
    },
    {
        "content": "<p>Also, why do you work with <code>‚âÉ</code> instead of <code>‚âÖ</code>. Isn't that just as \"bad\"?</p>",
        "id": 148640875,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543328855
    },
    {
        "content": "<p>Yeah, I did it in a round-about way, in retrospect</p>",
        "id": 148640886,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543328873
    },
    {
        "content": "<p>In general I use <code>equiv</code> because it actually has useful lemmas and also it can relate different universes</p>",
        "id": 148640953,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543328917
    },
    {
        "content": "<p>though I added a couple more lemmas for <code>iso</code> in the limits PR</p>",
        "id": 148640961,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543328931
    },
    {
        "content": "<p>Hmm, I feel like we should merge your <code>presheaf.lean</code> and my <code>sheaf.lean</code>. Or at least deduplicate.</p>",
        "id": 148640996,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543328969
    },
    {
        "content": "<p>I intend to take a second stab at all the adjunctions and presheaf stuff at some point, but I'm not actively working on it at the moment</p>",
        "id": 148641237,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543329226
    },
    {
        "content": "<p>Ok, I'll move some stuff from my file to yours. So that <code>sheaf.lean</code> is only about sheaves.</p>",
        "id": 148641294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543329256
    },
    {
        "content": "<p>If you start working on it again, please make sure to take a look at the <code>sheaf</code> branch version of your file.</p>",
        "id": 148641306,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543329282
    },
    {
        "content": "<p>FWIW, my conclusion from my first attempt was that it's probably better to do all the constructions in a manifestly natural way, like Scott did in <code>yoneda.lean</code> for example, even though the result is probably pretty unreadable. Then you can add a simp lemma that explains what is actually happening on the level of objects</p>",
        "id": 148641624,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543329601
    },
    {
        "content": "<p>Or at least, don't have a bunch of isomorphisms with the naturality conditions stated separately. That was a big mess</p>",
        "id": 148642150,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543330068
    },
    {
        "content": "<p>I see. That's what I've been trying to do. But I also got stuck.</p>",
        "id": 148642474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543330394
    },
    {
        "content": "<p>The problem with doing things in a \"manifestly natural way\" is that you get sucked into ever deeper/wider/higher abstractions...</p>",
        "id": 148642576,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543330456
    },
    {
        "content": "<p>it's true</p>",
        "id": 148642695,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543330578
    },
    {
        "content": "<p>And that's sort of why I backed off from my previous comment. It's not obvious how to do this \"category of elements\" construction functorially</p>",
        "id": 148643278,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543331104
    },
    {
        "content": "<p>The key is to somehow give these things usable and complete instances, so that the way to prove things about them is not to <code>dsimp</code> 100 things</p>",
        "id": 148643384,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543331220
    },
    {
        "content": "<p>and that's where my current version of <code>presheaf.lean</code> sort of fell apart</p>",
        "id": 148643417,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543331251
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/adjunctions/category_theory/presheaf.lean#L310\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/adjunctions/category_theory/presheaf.lean#L310\">https://github.com/leanprover-community/mathlib/blob/adjunctions/category_theory/presheaf.lean#L310</a></p>",
        "id": 148643508,
        "sender_full_name": "Reid Barton",
        "timestamp": 1543331308
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Does this mean that you think we should avoid <code>adjunction.left_adjoint_of_equiv</code>?</p>",
        "id": 148644814,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543332352
    },
    {
        "content": "<p>Yuchai! This is now sorry-free: <a href=\"https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/presheaf.lean#L59\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/presheaf.lean#L59\">https://github.com/leanprover-community/mathlib/blob/sheaf/category_theory/presheaf.lean#L59</a><br>\nBut it is slower than slow! Not sure how to speed it up though. I'm chaining a bunch of rewrites. Are there strategies for speeding this up?</p>",
        "id": 148766980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543469965
    },
    {
        "content": "<p>One thing that I find often works is to work out why the <code>erw</code> are necessary. This is sometimes unrewarding, but often it is because hidden inside implicit arguments there are things that should <code>dsimp</code>, but you forgot to write the appropriate <code>rfl</code> lemmas.  Sometimes you get really lucky, and after diagnosing a problem like this you can not only change the <code>erw</code> to <code>rw</code>, but even to <code>dsimp</code>!</p>",
        "id": 148767231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543470459
    },
    {
        "content": "<p>I see. (I've stopped using <code>rw</code>, because <code>erw</code> has more powerful magic (-;)</p>",
        "id": 148767295,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543470566
    },
    {
        "content": "<p>Is <code>dsimp</code> faster than <code>erw</code>?</p>",
        "id": 148767296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543470581
    },
    {
        "content": "<p>Yes.</p>",
        "id": 148767299,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543470585
    },
    {
        "content": "<p>And <code>erw</code> can be slower than <code>rw</code>, in places where either work. (I think?)</p>",
        "id": 148767305,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543470601
    },
    {
        "content": "<p>Well, <code>dsimp</code> can be either faster or slower than <code>erw</code>. :-) But _usually_ it seems to be faster to avoid using <code>erw</code>.</p>",
        "id": 148767352,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543470623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Do you think we could have a <code>[derive rfl-lemmas]</code>?</p>",
        "id": 148767491,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543470960
    },
    {
        "content": "<p>I've just had a quick look at that proof, Johan, and I don't seem to be able to make much improvement. :-( There does seem to be a small problem changing between <code>colimit</code> and <code>colim.obj</code>.</p>",
        "id": 148767960,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543471839
    },
    {
        "content": "<p>So here is what I imagine <code>derive rflsimp</code> (or whatever) should do: it looks at the current definition, and (as far as I thought this through, which is not that far) it does two checks:</p>\n<ul>\n<li>the definition is an \"abbreviation\" (like <code>def presheaf C := C \\functor Type v</code>. In this case it looks up all the rflsimp lemmas that it derived for <code>C \\functor D</code> and defines copies in the <code>presheaf</code> namespace.</li>\n<li>the definition <code>X</code> is a structure. In this case it looks up all the fields. For a field <code>foo</code> it checks whether this is a Pi-type (?) and how many arguments the Pi takes. So if <code>foo := Œª a b c, bar(a,b,c)</code> then it will create the appropriate simp-lemma (proved by <code>rfl</code>) that</li>\n</ul>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"kn\">lemma</span> <span class=\"n\">X</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">some_type</span><span class=\"o\">)</span> <span class=\"o\">:</span>  <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">=</span> <span class=\"n\">bar</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">,</span><span class=\"n\">b</span><span class=\"o\">,</span><span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</pre></div>\n\n\n<p>Of course I don't know how to write <code>meta</code>-code. And of course this is probably a very simplified picture. But I think something like this should be possible, and I think it would result in three things:</p>\n<ul>\n<li>less boilerplate (especially in the category library!)</li>\n<li>less broken proofs, where <code>tidy</code> doesn't work, because somewhere someone forgot to state the obvious <code>rfl</code>-simp-lemma.</li>\n<li>less wasted time in hunting down the brokenness of the preceding point.</li>\n</ul>",
        "id": 148770849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543477359
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Thanks for looking into speeding things up. I added a rflsimp-lemma for <code>colim.obj</code>. Do you have any clue why the first line in that proof (with the comment) didn't simplify?</p>",
        "id": 148771232,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543478125
    },
    {
        "content": "<p>Nope, I couldn't work it out. The next \"usual suspect\" for simp not working is that the thing that needs to be <code>simp</code>ed is inside a function that looks superficially dependent but actually isn't when you think about it a bit. <code>simp</code>, which needs to build congruence lemmas to do \"rewriting\", can't work out what do to, but <code>rw</code> can. This is a \"known problem\" with <code>simp</code>, apparently.</p>",
        "id": 148777570,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543487061
    },
    {
        "content": "<p>You know how to use <code>rewrite_search</code>, don't you? :-)</p>",
        "id": 148777585,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543487079
    },
    {
        "content": "<p>At some point Johan I made a thing which did this<br>\nIt was a command called <code>rfl_lemma</code> I think. If you have access to rewrite_search you have access to it, too</p>",
        "id": 148778422,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543488103
    },
    {
        "content": "<p>It only worked for structures though</p>",
        "id": 148778431,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543488119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> I don't have <code>rewrite_search</code>. Do you think it is ready to be tested by others? If so, what do I need to do to get started?</p>",
        "id": 148779294,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543489152
    },
    {
        "content": "<p>You could always try it out! My understanding is that all you should have to do is add</p>\n<div class=\"codehilite\"><pre><span></span>lean-tidy = {git = &quot;https://github.com/semorrison/lean-tidy&quot;, rev = &quot;3a69d6241207f0c0758468dce666858027c54909&quot;}\n</pre></div>\n\n\n<p>to your <code>leanpkg.toml</code> and run <code>leanpkg configure</code>. (I'm slightly worried though because <code>lean-tidy</code> obviously imports from <code>mathlib</code>, which you are working on... but I suspect it will work find (I think this is what Scott does to get his proofs using it).</p>",
        "id": 148782650,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543493604
    },
    {
        "content": "<p>Then import <code>tactic.rewrite_search</code>. You can try to discharge goals with the <code>rewrite_search</code> tactic, but make sure you tag lemmas it is allowed to use with <code>@[search]</code>. There is much more complicated stuff you can do (including more specific tagging), but that's a start!</p>",
        "id": 148782717,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543493666
    },
    {
        "content": "<p>Thanks for the explanation!</p>",
        "id": 148783201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543494216
    },
    {
        "content": "<p>I've actually never used it inside mathlib, I'm very curious if it works.</p>",
        "id": 148783722,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1543494874
    },
    {
        "content": "<p>ooh<br>\nMaybe it won't then</p>",
        "id": 148783729,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543494898
    },
    {
        "content": "<p>something about \"ambiguous import xxxx\"</p>",
        "id": 148783739,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543494918
    },
    {
        "content": "<p>How far are we from a merge request of a (preliminary) version of <code>rewrite_search</code>?</p>",
        "id": 148784745,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543496357
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I followed the instructions and then ran <code>leanpkg build</code>. I'm getting tons of errors <span class=\"emoji emoji-1f61c\" title=\"stuck out tongue wink\">:stuck_out_tongue_wink:</span></p>",
        "id": 148785350,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543497027
    },
    {
        "content": "<p>:D</p>",
        "id": 148785538,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543497278
    },
    {
        "content": "<p>yeah, sorry<br>\nI think what you actually have to do is copy paste the lean-tidy repo over mathlib<br>\nbut probably don't do that it will mess your history</p>",
        "id": 148785563,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1543497321
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110111\">@Keeley Hoek</span> I can report that adding that Lean <em>does not</em> outright refuse that repo as a dependency of mathlib. However... there's tons and tons of errors. So it's not really usable in a sense.</p>",
        "id": 148857277,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1543579395
    },
    {
        "content": "<p>After a long period of being distracted by other work, I've returned to the sheaves and sites project. Stuff is now happening on the <code>sheaf-2</code> branch, which has less dependencies than <code>sheaf</code>.<br>\nI am currently struggling with defining a pretty non-constructive map. I have a gadget <code>s</code> which comes with a proof that I can perform a certain construction after some choice, and the result of the construction does not depend on the choice. But how do I actually do this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">covering_family</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">matching_sections</span> <span class=\"n\">c</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">matching_sections</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">generate_sieve</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">matching_sections</span> <span class=\"n\">c</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">matching_sections</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">generate_sieve</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">V</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">delta</span> <span class=\"n\">matching_sections</span> <span class=\"n\">at</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">choose</span> <span class=\"n\">Ui</span> <span class=\"n\">H</span> <span class=\"n\">f</span> <span class=\"kn\">using</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Here is what my goal window looks like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">small_category</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">covering_family</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span>\n  <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"bp\">//</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">Ui</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Ui</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Uj</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H_1</span> <span class=\"o\">:</span> <span class=\"n\">Uj</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Ui</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Uj</span><span class=\"o\">),</span>\n     <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">Ui</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">Uj</span> <span class=\"n\">H_1</span><span class=\"o\">)},</span>\n<span class=\"n\">Ui</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">Ui</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">V</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Ui</span><span class=\"o\">)</span>\n<span class=\"err\">‚ä¢</span> <span class=\"n\">Ui</span><span class=\"bp\">.</span><span class=\"n\">left</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"n\">left</span>\n</pre></div>\n\n\n<p>What I need to do is extract some hom <code>f</code> from <code>V</code> to <code>Ui</code> out of the current <code>f : nonempty (_)</code>. I should then be able to close the goal with <code>exact f.left</code>. But I can only eliminate into <code>Prop</code> from <code>nonempty</code>. So how should I set things up?<br>\nAll of this is at <a href=\"https://github.com/leanprover-community/mathlib/blob/sheaf-2/category_theory/sheaf.lean#L190-L199\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/sheaf-2/category_theory/sheaf.lean#L190-L199\">https://github.com/leanprover-community/mathlib/blob/sheaf-2/category_theory/sheaf.lean#L190-L199</a></p>",
        "id": 152638060,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545976521
    },
    {
        "content": "<p>Are you going to need to prove the resulting construction is independent of the choice?</p>",
        "id": 152638676,
        "sender_full_name": "Reid Barton",
        "timestamp": 1545977687
    },
    {
        "content": "<p>The simple answer is to use choice again, in the form of <code>classical.choice</code></p>",
        "id": 152638688,
        "sender_full_name": "Reid Barton",
        "timestamp": 1545977721
    },
    {
        "content": "<p>maybe the <code>choose</code> tactic could do this when the final Prop is a <code>nonempty</code></p>",
        "id": 152638738,
        "sender_full_name": "Reid Barton",
        "timestamp": 1545977778
    },
    {
        "content": "<p>or you could use that <code>\\exists blah, blah, blah, true</code> encoding</p>",
        "id": 152638740,
        "sender_full_name": "Reid Barton",
        "timestamp": 1545977806
    },
    {
        "content": "<p>So <code>nonempty blah</code> is not Lean-equivalent to the <code>\\exists blah, blah, blah, true</code> encoding?</p>",
        "id": 152638796,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545977938
    },
    {
        "content": "<p>The <code>choose</code> tactic doesn't help... <span class=\"emoji emoji-2639\" title=\"sad\">:sad:</span></p>",
        "id": 152638804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545977979
    },
    {
        "content": "<p>it's not definitionally equivalent, much as <code>p /\\ true</code> isn't definitionally equivalent to <code>p</code></p>",
        "id": 152638807,
        "sender_full_name": "Reid Barton",
        "timestamp": 1545977989
    },
    {
        "content": "<p><code>nonempty_of_exists</code> is not an iff...</p>",
        "id": 152638882,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545978090
    },
    {
        "content": "<p>You can just use <code>choice f</code></p>",
        "id": 152638940,
        "sender_full_name": "Reid Barton",
        "timestamp": 1545978149
    },
    {
        "content": "<p>Ok, I'll try that. Too bad that <code>choose f</code> does not work.</p>",
        "id": 152638952,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545978187
    },
    {
        "content": "<p>Sometimes when there is going to be a lot of \"can only eliminate into Prop\" nonsense in a proof, I just put an <code>apply choice</code> at the start</p>",
        "id": 152638953,
        "sender_full_name": "Reid Barton",
        "timestamp": 1545978191
    },
    {
        "content": "<p>or not necessarily at the start of the whole argument, but at the start of some subargument to satisfy some lemma which wants to take an actual map rather than just an existence statement</p>",
        "id": 152639001,
        "sender_full_name": "Reid Barton",
        "timestamp": 1545978286
    },
    {
        "content": "<p>Ok, that worked. But I still wonder why <code>choose f</code> didn't work. <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Any ideas why <code>choose</code> doesn't work on <code>nonempty</code>?<br>\nHere's the proof that I have now</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">covering_family</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">matching_sections</span> <span class=\"n\">c</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">matching_sections</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">generate_sieve</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">matching_sections</span> <span class=\"n\">c</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">matching_sections</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">generate_sieve</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">V</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">delta</span> <span class=\"n\">matching_sections</span> <span class=\"n\">at</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">choose</span> <span class=\"n\">Ui</span> <span class=\"n\">H</span> <span class=\"n\">f</span> <span class=\"kn\">using</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 152642729,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545985369
    },
    {
        "content": "<p>because <code>choose</code> is skolemization?</p>",
        "id": 152642813,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1545985528
    },
    {
        "content": "<p>I don't know what that means.</p>",
        "id": 152643079,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545985979
    },
    {
        "content": "<p>I love the marvellous power of the underscore:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"n\">def</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">covering_family</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"n\">matching_sections</span> <span class=\"n\">c</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"err\">‚ü∂</span> <span class=\"o\">(</span><span class=\"n\">matching_sections</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">generate_sieve</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">matching_sections</span> <span class=\"n\">c</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">matching_sections</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">generate_sieve</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"k\">from</span>\n<span class=\"o\">{</span> <span class=\"n\">val</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">V</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">choose</span> <span class=\"n\">Ui</span> <span class=\"n\">H</span> <span class=\"n\">f</span> <span class=\"kn\">using</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n    <span class=\"n\">refine</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">_</span> <span class=\"n\">H</span><span class=\"o\">),</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">,</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">property</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">_</span> <span class=\"err\">‚â´</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">_</span> <span class=\"err\">‚â´</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"err\">‚Üê</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map_comp</span><span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">property</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"err\">‚â´</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">_</span> <span class=\"err\">‚â´</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 152643597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1545986857
    },
    {
        "content": "<p>I'm hitting a nasty error again (probably I'm being bitten by <code>choice</code>).<br>\nHere is the error (code follows below):</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"bp\">‚ü®</span><span class=\"n\">s_val</span><span class=\"o\">,</span> <span class=\"n\">s_property</span><span class=\"bp\">‚ü©.</span><span class=\"n\">val</span> <span class=\"n\">Ui</span> <span class=\"n\">H</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">H</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">Ui_1</span> <span class=\"err\">‚àà</span> <span class=\"n\">c_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">Ui</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span>\n<span class=\"n\">types</span> <span class=\"n\">contain</span> <span class=\"n\">aliased</span> <span class=\"n\">name</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">):</span> <span class=\"n\">Ui</span> <span class=\"n\">U</span> <span class=\"n\">c</span>\n<span class=\"n\">remark</span><span class=\"o\">:</span> <span class=\"n\">the</span> <span class=\"n\">tactic</span> <span class=\"bp\">`</span><span class=\"n\">dedup</span><span class=\"bp\">`</span> <span class=\"n\">can</span> <span class=\"n\">be</span> <span class=\"n\">used</span> <span class=\"n\">to</span> <span class=\"n\">rename</span> <span class=\"n\">aliases</span>\n</pre></div>\n\n\n<p>Code:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">quux</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">covering_family</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">matching_sections</span> <span class=\"err\">‚âÖ</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">generate_sieve</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"bp\">.</span><span class=\"n\">matching_sections</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">foo</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">bar</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">hom_inv_id&#39;</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">ext1</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n    <span class=\"n\">ext1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n    <span class=\"n\">funext</span><span class=\"o\">,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">property</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n    <span class=\"n\">tidy</span> <span class=\"o\">{</span><span class=\"n\">trace_result</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">}</span>\n  <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_hom_id&#39;</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n    <span class=\"n\">ext1</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n    <span class=\"n\">ext1</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"n\">mpr</span><span class=\"o\">,</span>\n    <span class=\"n\">funext</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">foo</span><span class=\"o\">,</span> <span class=\"n\">bar</span><span class=\"o\">],</span>\n    <span class=\"n\">convert</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">property</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"c1\">-- This line fails</span>\n    <span class=\"n\">tidy</span> <span class=\"o\">{</span><span class=\"n\">trace_result</span> <span class=\"o\">:=</span> <span class=\"n\">tt</span><span class=\"o\">},</span>\n  <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>Context, just before the <code>convert</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">small_category</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">covering_family</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">matching_sections</span> <span class=\"o\">((</span><span class=\"n\">generate_sieve</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">over</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">‚àà</span> <span class=\"o\">(</span><span class=\"n\">generate_sieve</span> <span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n<span class=\"err\">‚ä¢</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"o\">((</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">choice</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">left</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">classical</span><span class=\"bp\">.</span><span class=\"n\">some</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"n\">V</span> <span class=\"n\">H</span>\n</pre></div>",
        "id": 152667001,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546023233
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Replying to <a href=\"#narrow/stream/116395-maths/topic/What's.20new.20in.20Lean.20maths.3F/near/156491890\" title=\"#narrow/stream/116395-maths/topic/What's.20new.20in.20Lean.20maths.3F/near/156491890\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/What's.20new.20in.20Lean.20maths.3F/near/156491890</a> in this thread.<br>\nTo be precise: I have no trouble at all extending a presheaf from a basis to the whole space. The problem is checking that it sends sheaves to sheaves. The difficulty is probably due to the fact that I do not have a usable API around the sheaf condition.<br>\nAnd I guess my sheaf condition is hard to work with right now because I'm trying to be quite general, doing sheaves on an arbitrary site.</p>",
        "id": 156493474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548010966
    },
    {
        "content": "<p>Oh -- the proof involves some argument on stalks which for a general site is complicated? Are there universe issues or do you only work with small sites?</p>",
        "id": 156495585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548014538
    },
    {
        "content": "<p>OK so I just spent 2 hours with Ramon going through this proof (sheaf on a basis extends to sheaf on site) again in the case of topological spaces. The ideas are all fresh in my mind at the minute so let me note them down in case there's anything helpful here.</p>\n<p>Aah -- I now realise that actually I don't know how you're extending the presheaf at all. The way Ramon and I do it is that given a presheaf <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span></span></span></span> on a basis we can define the stalk <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>F</mi><mi>x</mi></msub></mrow><annotation encoding=\"application/x-tex\">F_x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">x</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> at a point <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span></span></span></span> via a direct limit construction, and then we define a presheaf <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>F</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">F^+</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span> on the space by saying that its values on an open <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span></span></span></span> are a subtype of a big Pi type sending <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>‚àà</mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">x\\in U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span><span class=\"mrel\">‚àà</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span></span></span></span> to an element of the stalk <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>F</mi><mi>x</mi></msub></mrow><annotation encoding=\"application/x-tex\">F_x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">x</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>; it's the subtype consisting of functions which are locally a section of the presheaf-on-a-basis.</p>\n<p>What both he and I did next was then immediately embarked on a proof that if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span></span></span></span> is a sheaf on a basis then this extension is a sheaf. This gets really hairy. Say I have a bunch of local sections <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">s_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> on opens <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>, which agree on overlaps. I want to glue them together to get a section <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>F</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">F^+</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span>. Well, a section of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>F</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">F^+</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span> is just a subtype of a pi type, so we know how to define it. But the technicality is that to define this function <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span></span></span></span> we want to say <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><msub><mi>s</mi><mi>i</mi></msub><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">S(x)=s_i(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span> where we choose some <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.65952em;\"></span><span class=\"strut bottom\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">i</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>‚àà</mo><msub><mi>U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x\\in U_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span><span class=\"mrel\">‚àà</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>. As mathematicians we know that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">S(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span> is independent of the choice, but in computer science this is some <code>classical.indefinite_description</code> blah blah noncomputable crap and we're forced to deal with this. Ramon had written 0 API so at the end of it our goals had all these <code>classical.indefinite_description</code> terms in. He was able to battle past the first few, but checking that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span></span></span></span> restricted to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">s_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> was really difficult, for a reason which I am only now beginning to understand properly. </p>\n<p>The issue was that we didn't have the right API for this construction of extending a presheaf-on-a-basis to a presheaf on the space. A general presheaf on a space, when evaluated at some open <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span></span></span></span>, is just some random type. But for a presheaf coming from a presheaf-on-a-basis this is far from being true -- the sections are subtypes of pi types, and the restriction maps are literally restrictions. This is all wrapped up in the definition of the construction of a presheaf from a presheaf-on-a-basis. I realised that if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>F</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">F^+</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span> is a presheaf coming from a presheaf-on-a-basis then for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>‚àà</mo><mi>U</mi><mo>‚äÜ</mo><mi>X</mi></mrow><annotation encoding=\"application/x-tex\">x\\in U\\subseteq X</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span><span class=\"mrel\">‚àà</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"mrel\">‚äÜ</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mo>‚àà</mo><msup><mi>F</mi><mo>+</mo></msup><mo>(</mo><mi>X</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">s\\in F^+(X)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\">s</span><span class=\"mrel\">‚àà</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> a function, the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>r</mi><mi>e</mi><msub><mi>s</mi><mi>U</mi></msub><mi>s</mi><mo>)</mo><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>s</mi><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(res_U s)(x)=s(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\">e</span><span class=\"mord\"><span class=\"mord mathit\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.10903em;\">U</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord mathit\">s</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\">s</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span> seemed to be true by definition, but Lean would not definitionally unfold the restriction map from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>F</mi><mo>+</mo></msup><mo>(</mo><mi>X</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">F^+(X)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>F</mi><mo>+</mo></msup><mo>(</mo><mi>U</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">F^+(U)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span> as a restriction of functions. I had to explicitly push Lean in the right direction with lines like <code>dunfold presheaf_on_basis_to_presheaf, dsimp</code>; I was really surprised that this could make progress when a simple <code>dsimp</code> could not.</p>\n<p>But we shouldn't have been doing this anyway. It seems to me that the correct thing to do is:</p>\n<p>1) Define the construction <code>presheaf_on_basis_to_presheaf</code><br>\n2) Define also the actual noncomputable function space, i.e. given <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi></mrow><annotation encoding=\"application/x-tex\">F</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span></span></span></span> a presheaf on a basis, and an open set $$U$ (not necc in the basis), define the space of functions sending an element <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span></span></span></span> to an element of the stalk <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>F</mi><mi>x</mi></msub></mrow><annotation encoding=\"application/x-tex\">F_x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">x</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>, and have some coercion from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>F</mi><mo>+</mo></msup><mo>(</mo><mi>U</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">F^+(U)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span> to this space of functions.<br>\n3) Crucially, prove (by rfl) that the restriction map on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>F</mi><mo>+</mo></msup></mrow><annotation encoding=\"application/x-tex\">F^+</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span></span></span></span> really is just restriction of functions. This is some key lemma which if you don't explicitly say it, can get buried. Prove it for values too -- prove that if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>‚àà</mo><msup><mi>F</mi><mo>+</mo></msup><mo>(</mo><mi>U</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">S\\in F^+(U)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:1.021331em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span><span class=\"mrel\">‚àà</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">+</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>V</mi><mo>‚äÜ</mo><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">V\\subseteq U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">V</span><span class=\"mrel\">‚äÜ</span><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>‚àà</mo><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">x\\in V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span><span class=\"mrel\">‚àà</span><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">V</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>S</mi><mo>(</mo><mi>x</mi><mo>)</mo><mo>=</mo><mi>r</mi><mi>e</mi><mi>s</mi><mo>(</mo><mi>S</mi><mo>)</mo><mo>(</mo><mi>x</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">S(x)=res(S)(x)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\">e</span><span class=\"mord mathit\">s</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord mathit\">x</span><span class=\"mclose\">)</span></span></span></span>. This is how you will eliminate <code>res</code> in practice. We were having to eliminate it using <code>dunfold</code> and then <code>dsimp</code>.<br>\n4) Also crucially, you should hide the <code>classical.indefinite_description</code>s. Given local sections <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">s_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> which agree on overlaps, there's a non-computable function on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span></span></span></span> which agrees with each <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>s</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">s_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">s</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>, but to define it at <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span></span></span></span> you have to choose <br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.65952em;\"></span><span class=\"strut bottom\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">i</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>‚àà</mo><msub><mi>U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x\\in U_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord mathit\">x</span><span class=\"mrel\">‚àà</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>. It's a theorem that the resulting function is independent of all choices. Define the noncomputable function and prove the theorem -- you will need it later!</p>\n<p>We'd done none of this, and it was only when struggling through the proof that I began to understand what was missing. </p>\n<p>I know you (Johan) are working in a far more complicated situation, but somehow these are the things which seem to me to be necessary to make things work smoothly. Ramon arrived in my office with a goal that had three <code>classical.indefinite_description</code>s on one side of an equality, and these are horrible to work with. The idea which Patrick showed so convincingly in his Nantes talk -- hide the nonconstructive stuff with a <code>choose</code> tactic and immediately go to the noncomputable function and the proof that it has the key property you want -- is a really important trick for getting things to run smoothly.</p>",
        "id": 157127004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548787160
    },
    {
        "content": "<p>Thanks for these detailed comments! They will probably be helpful when I pick up my work on sheaves again in a couple of days!</p>",
        "id": 157127474,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548787504
    },
    {
        "content": "<p>How do you extend the presheaf on a basis in your generality?</p>",
        "id": 157127497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548787523
    },
    {
        "content": "<p>Is it still a stalk-valued function?</p>",
        "id": 157127506,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548787533
    },
    {
        "content": "<p>You can take a limit over all basic opens contained in <code>U</code>.</p>",
        "id": 157127610,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548787623
    },
    {
        "content": "<p>Does that work for sites?</p>",
        "id": 157127633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548787638
    },
    {
        "content": "<p>Yes, extending the presheaf is not too hard. What I'm missing is a good API for the sheaf condition.</p>",
        "id": 157127653,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548787666
    },
    {
        "content": "<p>What I learnt today was that there are special extra lemmas for presheaves which have come from a presheaf-on-a-basis, and those are what we needed to prove that sheaves go to sheaves.</p>",
        "id": 157127736,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548787722
    },
    {
        "content": "<p>Because it needs to work with abstract sites (where you don't know anything about the opens in your category) and then it should also work for concrete things like the open sets in a concrete topological space (and your presheaf has some concrete interpretation as functions)... somehow these two things don't play nicely together yet.</p>",
        "id": 157127754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548787741
    },
    {
        "content": "<p>But your limit is different. You're taking a subset of a product perhaps.</p>",
        "id": 157127787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548787782
    },
    {
        "content": "<p>Hmm. Maybe the ideas are still the same. I'm perhaps suggesting that you spend some time proving lemmas (by rfl) about the function sending an open U to the product of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>F</mi><mo>(</mo><msub><mi>U</mi><mi>i</mi></msub><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">F(U_i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.13889em;\">F</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> where the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> range over the basis elements that are part of a cover. Then prove that if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">V</span></span></span></span> is a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>U</mi></mrow><annotation encoding=\"application/x-tex\">U</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span></span></span></span> then the restriction map is something like \"restrict to the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>U</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">U_i</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">U</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">i</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> which map to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">V</span></span></span></span>\". Or something.</p>",
        "id": 157128038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548787975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> <span class=\"user-mention\" data-user-id=\"132858\">@Ramon Fernandez Mir</span> Does this mean that you are now rapidly approaching a cleaned up version of schemes? When will there be code that we can look at?</p>",
        "id": 157128445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548788329
    },
    {
        "content": "<p>I would also like to see some code, I might be able to give some tips. I think you should define the glue construction  for functions, i.e. if you have a bunch of functions that agree on overlaps then you get a function on the union. You can put your choices here and never see them again</p>",
        "id": 157129667,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548789334
    },
    {
        "content": "<p><a href=\"https://github.com/ramonfmir/lean-scheme\" target=\"_blank\" title=\"https://github.com/ramonfmir/lean-scheme\">https://github.com/ramonfmir/lean-scheme</a></p>",
        "id": 157134234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548792821
    },
    {
        "content": "<p>We've only just started really, but we're moving along nicely.</p>",
        "id": 157134245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548792835
    },
    {
        "content": "<p>do we have sheaves on sites yet? how far are we away from it?</p>",
        "id": 168787052,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561283098
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">limits</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">pullback_diagram</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">base_left</span> <span class=\"bp\">|</span> <span class=\"n\">base_right</span> <span class=\"bp\">|</span> <span class=\"n\">target</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">pullback_diagram</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">pullback_diagram</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">pullback_diagram</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span>\n<span class=\"bp\">|</span> <span class=\"n\">id_base_left</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">base_left</span> <span class=\"n\">base_left</span>\n<span class=\"bp\">|</span> <span class=\"n\">id_base_right</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">base_right</span> <span class=\"n\">base_right</span>\n<span class=\"bp\">|</span> <span class=\"n\">id_target</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">target</span> <span class=\"n\">target</span>\n<span class=\"bp\">|</span> <span class=\"n\">to_target_left</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">base_left</span> <span class=\"n\">target</span>\n<span class=\"bp\">|</span> <span class=\"n\">to_target_right</span> <span class=\"o\">:</span> <span class=\"n\">hom</span> <span class=\"n\">base_right</span> <span class=\"n\">target</span>\n\n<span class=\"n\">def</span> <span class=\"n\">id</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"n\">hom</span> <span class=\"n\">X</span> <span class=\"n\">X</span>\n<span class=\"bp\">|</span> <span class=\"n\">base_left</span>  <span class=\"o\">:=</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">id_base_left</span>\n<span class=\"bp\">|</span> <span class=\"n\">base_right</span> <span class=\"o\">:=</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">id_base_right</span>\n<span class=\"bp\">|</span> <span class=\"n\">target</span>     <span class=\"o\">:=</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">id_target</span>\n\n<span class=\"n\">def</span> <span class=\"n\">comp</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"n\">hom</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">hom</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">hom</span> <span class=\"n\">X</span> <span class=\"n\">Z</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">id_base_left</span>    <span class=\"n\">g</span>             <span class=\"o\">:=</span> <span class=\"n\">g</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">id_base_right</span>   <span class=\"n\">g</span>             <span class=\"o\">:=</span> <span class=\"n\">g</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">id_target</span>       <span class=\"n\">g</span>             <span class=\"o\">:=</span> <span class=\"n\">g</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">to_target_left</span>  <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">id_target</span> <span class=\"o\">:=</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">to_target_left</span>\n<span class=\"bp\">|</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">to_target_right</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">id_target</span> <span class=\"o\">:=</span> <span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">to_target_right</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">small_category</span> <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">hom</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"n\">comp</span><span class=\"o\">,</span>\n  <span class=\"n\">comp_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">id_comp&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">assoc&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_category</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"err\">‚•§</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">p</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">p&#39;</span> <span class=\"n\">q&#39;</span> <span class=\"n\">h&#39;</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">p&#39;</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">q&#39;</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">h</span>\n    <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">map_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">p</span><span class=\"bp\">;</span> <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">r</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">h1</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h2</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category_struct</span><span class=\"bp\">.</span><span class=\"n\">comp</span><span class=\"o\">,</span> <span class=\"n\">comp</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">comp_id</span><span class=\"o\">,</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">id_comp</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n\n<span class=\"n\">def</span> <span class=\"n\">to_category_cone</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g&#39;</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f&#39;</span> <span class=\"err\">‚â´</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g&#39;</span> <span class=\"err\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">cone</span> <span class=\"o\">(</span><span class=\"n\">to_category</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">W</span><span class=\"o\">,</span>\n  <span class=\"n\">œÄ</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">p</span> <span class=\"n\">f&#39;</span> <span class=\"n\">g&#39;</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"err\">‚â´</span> <span class=\"n\">f</span><span class=\"o\">),</span>\n    <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">functor</span><span class=\"bp\">.</span><span class=\"n\">const</span><span class=\"o\">,</span> <span class=\"n\">to_category</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">comp_id</span><span class=\"o\">,</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"n\">id_comp</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">pullback_diagram</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">class</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">has_pullback</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">has_limits_of_shape</span> <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">has_pullback</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"err\">ùíû</span> <span class=\"o\">:</span> <span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">has_pullback</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n<span class=\"n\">include</span> <span class=\"err\">ùíû</span> <span class=\"n\">P</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pullback</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">to_category</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">cone</span><span class=\"bp\">.</span><span class=\"n\">X</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pullback</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">to_category</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">cone</span><span class=\"bp\">.</span><span class=\"n\">œÄ</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">base_left</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">pullback</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Y</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">to_category</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">cone</span><span class=\"bp\">.</span><span class=\"n\">œÄ</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">base_right</span>\n\n<span class=\"n\">def</span> <span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">corec</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">W</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f&#39;</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g&#39;</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f&#39;</span> <span class=\"err\">‚â´</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g&#39;</span> <span class=\"err\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">pullback</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">to_category</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">is_limit</span><span class=\"bp\">.</span><span class=\"n\">lift</span> <span class=\"o\">(</span><span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">to_category_cone</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"n\">W</span> <span class=\"n\">f&#39;</span> <span class=\"n\">g&#39;</span> <span class=\"n\">h</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">has_pullback</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_site</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pullback</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cov</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"err\">Œ£</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">U</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">iso_mem</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">‚âÖ</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"o\">{</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">V</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">}</span> <span class=\"err\">‚àà</span> <span class=\"n\">cov</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">comp_mem</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"err\">Œ£</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">U</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">HS</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"err\">‚àà</span> <span class=\"n\">cov</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"err\">Œ£</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"err\">‚àà</span> <span class=\"n\">S</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"err\">Œ£</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)),</span>\n  <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"n\">m</span> <span class=\"n\">hm</span> <span class=\"err\">‚àà</span> <span class=\"n\">cov</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n  <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">t</span> <span class=\"err\">‚àà</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">u</span> <span class=\"err\">‚àà</span> <span class=\"n\">F</span> <span class=\"n\">t</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">‚ü®</span><span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">u</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">‚â´</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:</span> <span class=\"err\">Œ£</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">}</span> <span class=\"err\">‚àà</span> <span class=\"n\">cov</span> <span class=\"n\">U</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pullback_mem</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">U</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"err\">‚àà</span> <span class=\"n\">cov</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">U</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">t</span> <span class=\"err\">‚àà</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">‚ü®_</span><span class=\"o\">,</span> <span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:</span> <span class=\"err\">Œ£</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">W</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"o\">}</span> <span class=\"err\">‚àà</span> <span class=\"n\">cov</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">lattice</span>\n\n<span class=\"n\">class</span> <span class=\"n\">Sup_lattice</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">lattice</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">has_Sup</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_Sup</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"n\">a</span> <span class=\"err\">‚àà</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Sup_le</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"err\">‚àà</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">Sup_distrib_lattice</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">Sup_lattice</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">inf_Sup_le</span> <span class=\"o\">{}</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">},</span> <span class=\"n\">x</span> <span class=\"err\">‚äì</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"bp\">‚â§</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">Sup</span> <span class=\"o\">((</span><span class=\"err\">‚äì</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Sup_lattice</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">to_Sup_lattice</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_lattice</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Sup_lattice</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"bp\">..</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Sup_lattice</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">le_Sup&#39;</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"err\">‚àà</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">a</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">Sup_lattice</span><span class=\"bp\">.</span><span class=\"n\">le_Sup</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">Sup_le&#39;</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"err\">‚àà</span> <span class=\"n\">s</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">b</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"bp\">‚â§</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"n\">Sup_lattice</span><span class=\"bp\">.</span><span class=\"n\">Sup_le</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">Sup_singleton&#39;</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">Sup</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_antisymm</span> <span class=\"o\">(</span><span class=\"n\">Sup_le&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_of_mem_singleton</span> <span class=\"n\">hb</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span> <span class=\"err\">$</span>\n<span class=\"n\">le_Sup&#39;</span> <span class=\"err\">$</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton</span> <span class=\"n\">x</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">Sup_lattice</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">Sup_discrete_lattice</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">complete_distrib_lattice</span><span class=\"bp\">.</span><span class=\"n\">to_Sup_distrib_lattice</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">complete_distrib_lattice</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">Sup_distrib_lattice</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inf_Sup_le</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">inf_Sup_eq</span><span class=\"o\">,</span> <span class=\"n\">Sup_image</span><span class=\"o\">],</span>\n  <span class=\"bp\">..</span> <span class=\"o\">(</span><span class=\"n\">infer_instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_distrib_lattice</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">Sup_distrib_lattice</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">inf_Sup</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">‚äì</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">Sup</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">Sup</span> <span class=\"o\">((</span><span class=\"err\">‚äì</span><span class=\"o\">)</span> <span class=\"n\">x</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_antisymm</span> <span class=\"n\">Sup_distrib_lattice</span><span class=\"bp\">.</span><span class=\"n\">inf_Sup_le</span> <span class=\"err\">$</span> <span class=\"n\">Sup_le&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">b</span> <span class=\"bp\">‚ü®</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hcs</span><span class=\"o\">,</span> <span class=\"n\">hxcb</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"n\">hxcb</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">inf_le_inf</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_Sup&#39;</span> <span class=\"n\">hcs</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">Sup_discrete_lattice</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n\n<span class=\"n\">class</span> <span class=\"n\">is_univalent</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">univalent</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">‚âÖ</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">eq_of_iso</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_univalent</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">‚âÖ</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_univalent</span><span class=\"bp\">.</span><span class=\"n\">univalent</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">e</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">is_univalent_partial_order</span> <span class=\"o\">[</span><span class=\"n\">partial_order</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_univalent</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"bp\">‚ü®Œª</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">‚ü©</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">semilattice_inf</span><span class=\"bp\">.</span><span class=\"n\">has_pullback</span> <span class=\"o\">[</span><span class=\"n\">semilattice_inf</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_pullback</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">cone</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">base_left</span> <span class=\"err\">‚äì</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">base_right</span><span class=\"o\">,</span>\n    <span class=\"n\">œÄ</span> <span class=\"o\">:=</span>\n    <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">p</span> <span class=\"bp\">‚ü®‚ü®</span><span class=\"n\">inf_le_left</span><span class=\"bp\">‚ü©‚ü©</span> <span class=\"bp\">‚ü®‚ü®</span><span class=\"n\">inf_le_right</span><span class=\"bp\">‚ü©‚ü©</span>\n        <span class=\"bp\">‚ü®‚ü®</span><span class=\"n\">le_trans</span> <span class=\"n\">inf_le_left</span> <span class=\"o\">(</span><span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">hom</span><span class=\"bp\">.</span><span class=\"n\">to_target_left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">down</span><span class=\"bp\">.</span><span class=\"n\">down</span><span class=\"bp\">‚ü©‚ü©</span><span class=\"o\">,</span>\n      <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"n\">is_limit</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">lift</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®‚ü®</span><span class=\"n\">le_inf</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">œÄ</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">base_left</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">down</span><span class=\"bp\">.</span><span class=\"n\">down</span> <span class=\"o\">(</span><span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"n\">œÄ</span><span class=\"bp\">.</span><span class=\"n\">app</span> <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">base_right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">down</span><span class=\"bp\">.</span><span class=\"n\">down</span><span class=\"bp\">‚ü©‚ü©</span><span class=\"o\">,</span>\n    <span class=\"n\">fac&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">ext</span><span class=\"o\">,</span>\n    <span class=\"n\">uniq&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">intros</span><span class=\"bp\">;</span> <span class=\"n\">ext</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">Sup_lattice</span><span class=\"bp\">.</span><span class=\"n\">has_site</span> <span class=\"o\">[</span><span class=\"n\">Sup_distrib_lattice</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_site</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cov</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"bp\">|</span> <span class=\"n\">U</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">iso_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"k\">show</span> <span class=\"n\">U</span> <span class=\"bp\">‚â§</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_singleton</span><span class=\"o\">,</span> <span class=\"n\">Sup_singleton&#39;</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">comp_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">S</span> <span class=\"n\">HS</span> <span class=\"n\">F</span> <span class=\"n\">HF</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"n\">HS</span> <span class=\"err\">$</span> <span class=\"n\">Sup_le&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">‚ü®</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hmS</span><span class=\"o\">,</span> <span class=\"n\">hmx</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span> <span class=\"k\">in</span>\n    <span class=\"n\">hmx</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">HF</span> <span class=\"n\">m</span> <span class=\"n\">hmS</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Sup_le&#39;</span> <span class=\"err\">$</span> <span class=\"bp\">Œª</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">‚ü®</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hnFS</span><span class=\"o\">,</span> <span class=\"n\">hny</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">hy</span> <span class=\"k\">in</span>\n      <span class=\"n\">le_Sup&#39;</span> <span class=\"bp\">‚ü®‚ü®</span><span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®‚ü®</span><span class=\"n\">le_trans</span> <span class=\"n\">n</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">m</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">‚ü©‚ü©‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">hmS</span><span class=\"o\">,</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hnFS</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"n\">hny</span><span class=\"bp\">‚ü©</span><span class=\"o\">),</span>\n  <span class=\"n\">pullback_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">S</span> <span class=\"n\">HS</span> <span class=\"n\">V</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"k\">calc</span>  <span class=\"n\">V</span>\n      <span class=\"bp\">‚â§</span> <span class=\"n\">V</span> <span class=\"err\">‚äì</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">le_inf</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">le_trans</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">HS</span><span class=\"o\">)</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">Sup</span> <span class=\"o\">((</span><span class=\"err\">‚äì</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">(</span><span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">S</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">inf_Sup</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">Sup</span> <span class=\"o\">((</span><span class=\"err\">‚äì</span><span class=\"o\">)</span> <span class=\"n\">V</span> <span class=\"err\">‚àò</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">congr_arg</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_comp</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span>\n  <span class=\"bp\">...</span> <span class=\"bp\">‚â§</span> <span class=\"n\">Sup</span> <span class=\"o\">(</span><span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"err\">&#39;&#39;</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">t</span> <span class=\"err\">‚àà</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"bp\">‚ü®_</span><span class=\"o\">,</span> <span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:</span> <span class=\"err\">Œ£</span> <span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">W</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">m</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n    <span class=\"n\">Sup_le&#39;</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">b</span> <span class=\"bp\">‚ü®</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hcs</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"n\">le_Sup&#39;</span> <span class=\"bp\">‚ü®‚ü®</span><span class=\"n\">V</span> <span class=\"err\">‚äì</span> <span class=\"n\">c</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®‚ü®</span><span class=\"n\">inf_le_left</span><span class=\"bp\">‚ü©‚ü©‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">hcs</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"n\">hb</span><span class=\"bp\">‚ü©</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span>\n</pre></div>",
        "id": 168811346,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561330433
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">limits</span><span class=\"bp\">.</span><span class=\"n\">types</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_pullback_Type</span> <span class=\"o\">:</span> <span class=\"n\">has_pullback</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">Œª</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">has_site_Type</span> <span class=\"o\">:</span> <span class=\"n\">has_site</span> <span class=\"o\">(</span><span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cov</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">S</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">Œ±</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"err\">Œ£</span> <span class=\"n\">Œ≤</span><span class=\"o\">,</span> <span class=\"n\">Œ≤</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">Œ±</span><span class=\"o\">),</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"err\">‚àà</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">},</span>\n  <span class=\"n\">iso_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">Œ±</span> <span class=\"n\">Œ≤</span> <span class=\"n\">e</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®‚ü®</span><span class=\"n\">Œ≤</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">mem_singleton</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">congr_fun</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"mi\">4</span> <span class=\"n\">x</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n  <span class=\"n\">comp_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">Œ±</span> <span class=\"n\">S</span> <span class=\"n\">HS</span> <span class=\"n\">F</span> <span class=\"n\">HF</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">‚ü®</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hfpx</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">HS</span> <span class=\"n\">x</span> <span class=\"k\">in</span>\n    <span class=\"k\">let</span> <span class=\"bp\">‚ü®</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hgqp</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">HF</span> <span class=\"n\">f</span> <span class=\"n\">hf</span> <span class=\"n\">p</span> <span class=\"k\">in</span>\n    <span class=\"bp\">‚ü®‚ü®</span><span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">‚â´</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">hf</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"n\">q</span><span class=\"o\">,</span> <span class=\"n\">hfpx</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">hgqp</span> <span class=\"bp\">‚ñ∏</span> <span class=\"n\">rfl</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n  <span class=\"n\">pullback_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">Œ±</span> <span class=\"n\">S</span> <span class=\"n\">HS</span> <span class=\"n\">Œ≤</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">‚ü®</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">hgpx</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">HS</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n    <span class=\"bp\">‚ü®‚ü®</span><span class=\"n\">pullback</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">hg</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n      <span class=\"bp\">‚ü®Œª</span> <span class=\"n\">v</span><span class=\"o\">,</span> <span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">),</span>\n      <span class=\"k\">by</span> <span class=\"n\">intros</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pullback_diagram</span><span class=\"bp\">.</span><span class=\"n\">to_category</span><span class=\"o\">]</span><span class=\"bp\">;</span> <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">exact</span> <span class=\"n\">hgpx</span> <span class=\"o\">}</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n    <span class=\"n\">rfl</span><span class=\"bp\">‚ü©</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span>\n</pre></div>",
        "id": 168812549,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561332722
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Am I duplicating effort?</p>",
        "id": 168812588,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561332744
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Thanks for looking into this. The idea of the <code>is_univalent</code> class is a nice one! Also, as has been mentioned in the other thread, I agree that refining the lattice hierarchy is probably a good idea. (And I hope it doesn't lead to some exponential blow-up down the road.)<br>\nI don't think you are duplicating effort. Concerning <code>pullback_diagram</code>: there have been long discussions between <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> and myself and I think we are still not completely clear on what the best way to support special shapes is.<br>\nOther thoughts:</p>\n<ul>\n<li>there are different approaches to sites: Grothendieck topologies, coverages, and Grothendieck pretopologies. You have formalised <em>pretopologies</em> but not every site admits a pretopology (e.g. a basis for a topological space can be turned into a site, but doesn't have to be a pretopology).</li>\n<li>When I was working on these things half a year ago, I managed to formalise the definition of a sheaf on site. But I had a hard time actually verifying that certain \"trivial\" examples are sheaves: e.g. (continuous) functions from a topological space <code>X</code> to (a topological space) <code>Y</code>.</li>\n<li>Currently Kevin and you are thinking/working hard on gluing sheaves, which I think is a perfect way to stress-test the definitions. However, I would really want to add two things to that list: sheafification and the adjunction between pushforward and pullback. Without those, we won't have a reasonable API to sheaves.</li>\n</ul>\n<p>In hindsight, I took on a project that was way to big. I'm very excited that there are now more people pouring power into this (-;</p>",
        "id": 168821878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561351428
    },
    {
        "content": "<p>Regarding <code>is_univalent</code> --- usually this is called <code>skeletal</code>.</p>",
        "id": 168822649,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1561352739
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> didn't I formalize sites in terms of coverages?</p>",
        "id": 168830190,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561363776
    },
    {
        "content": "<p>You use pullbacks</p>",
        "id": 168831004,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561364701
    },
    {
        "content": "<p>Coverages allow you to define sites on categories that don't have pullbacks</p>",
        "id": 168831018,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561364722
    },
    {
        "content": "<p>E.g. lattices without infs</p>",
        "id": 168831026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561364736
    },
    {
        "content": "<p>E.g. bases of topologies</p>",
        "id": 168831031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561364746
    },
    {
        "content": "<p>The schemes work that Ramon did about extending sheaves on bases to sheaves was made much easier by the fact that the intersection of two basic open sets was basic open in our situation.</p>",
        "id": 168831090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561364791
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>D</mi><mo>(</mo><mi>f</mi><mo>)</mo><mo>‚à©</mo><mi>D</mi><mo>(</mo><mi>g</mi><mo>)</mo><mo>=</mo><mi>D</mi><mo>(</mo><mi>f</mi><mi>g</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">D(f)\\cap D(g)=D(fg)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mbin\">‚à©</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">D</span><span class=\"mopen\">(</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 168831100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561364802
    },
    {
        "content": "<p>Without that, the construction of the sheaf of rings on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"normal\">S</mi><mi mathvariant=\"normal\">p</mi><mi mathvariant=\"normal\">e</mi><mi mathvariant=\"normal\">c</mi></mrow><mo>(</mo><mi>A</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathrm{Spec}(A)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">S</span><span class=\"mord mathrm\">p</span><span class=\"mord mathrm\">e</span><span class=\"mord mathrm\">c</span></span><span class=\"mopen\">(</span><span class=\"mord mathit\">A</span><span class=\"mclose\">)</span></span></span></span> would have been harder.</p>",
        "id": 168831122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561364834
    },
    {
        "content": "<p>I just followed Stacks project</p>",
        "id": 168831237,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561364961
    },
    {
        "content": "<p><a href=\"https://ncatlab.org/nlab/show/coverage\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/coverage\">https://ncatlab.org/nlab/show/coverage</a></p>",
        "id": 168831354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561365082
    },
    {
        "content": "<p>so I should use that definition instead?</p>",
        "id": 168831373,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561365107
    },
    {
        "content": "<p>also where did the first two axioms go?</p>",
        "id": 168831532,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561365287
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> You don't need the first two axioms.</p>",
        "id": 168832878,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561366752
    },
    {
        "content": "<p>then why did Stacks include them?</p>",
        "id": 168832888,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561366769
    },
    {
        "content": "<p>See also <a href=\"https://ncatlab.org/nlab/show/Grothendieck+topology#Saturation\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/Grothendieck+topology#Saturation\">https://ncatlab.org/nlab/show/Grothendieck+topology#Saturation</a></p>",
        "id": 168832975,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561366841
    },
    {
        "content": "<p>It might make sense to browse through the first half of SGA 4 if you want to seriously attempt to build a library for sites.</p>",
        "id": 168833014,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561366873
    },
    {
        "content": "<p>SGA 4 you mean? Or not</p>",
        "id": 168833024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561366889
    },
    {
        "content": "<p>Fixed <span aria-label=\"smiley\" class=\"emoji emoji-1f603\" role=\"img\" title=\"smiley\">:smiley:</span></p>",
        "id": 168833036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561366905
    },
    {
        "content": "<p>how about no</p>",
        "id": 168833042,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561366921
    },
    {
        "content": "<p>SGA4 is not hard to read</p>",
        "id": 168833087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561366932
    },
    {
        "content": "<p>It's much easier than EGA4</p>",
        "id": 168833099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561366951
    },
    {
        "content": "<p>is there an English translation?</p>",
        "id": 168833139,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561367008
    },
    {
        "content": "<p>I don't know. \"Categorie\" = category, \"morphisme\" = morphism, \"univers\" = universe. Try just taking symmetric difference with {e}.</p>",
        "id": 168833221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561367067
    },
    {
        "content": "<p>so espace etale = spac tal?</p>",
        "id": 168833237,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561367098
    },
    {
        "content": "<p>change e-acute to s</p>",
        "id": 168833259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561367114
    },
    {
        "content": "<p>that sometimes work.</p>",
        "id": 168833264,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561367123
    },
    {
        "content": "<p>fenetre -&gt; fenester</p>",
        "id": 168833266,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561367129
    },
    {
        "content": "<p>surely fenetre -&gt; fnstr</p>",
        "id": 168833274,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561367141
    },
    {
        "content": "<p>Oh it's e-hat goes to s</p>",
        "id": 168833288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561367155
    },
    {
        "content": "<p>Come on Kenny, your French is better than mine... and I can read that...</p>",
        "id": 168833289,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561367157
    },
    {
        "content": "<p>You're missing off the accents. They're not all e's.</p>",
        "id": 168833333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561367166
    },
    {
        "content": "<p>how did Grothendieck call Grothendieck topos/topology/etc?</p>",
        "id": 168833460,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561367347
    },
    {
        "content": "<p>Probably just topos / topology on a category.</p>",
        "id": 168833660,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561367535
    },
    {
        "content": "<p>et d'ailleurs, quelles pages dois-je lire?</p>",
        "id": 168833668,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561367540
    },
    {
        "content": "<p>The definitions are probably only a few pages in.</p>",
        "id": 168833693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561367557
    },
    {
        "content": "<p>il ne definit faisceaux que dans page 223</p>",
        "id": 168833886,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561367737
    },
    {
        "content": "<p>ok tous ce que j'ai besoin de est dans expose II</p>",
        "id": 168834132,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561367920
    },
    {
        "content": "<p>I'm not saying you should formalise SGA 4.1. But I'm saying that it might be good to be aware of what's in there.</p>",
        "id": 168834358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561368202
    },
    {
        "content": "<blockquote>\n<p>Soit C une categorie. On appelle crible de la categorie C une sous-categorie pleine D de C possedant la propriete suivante: tout objet de C tel qu'il existe un morphisme de cet objet dans un objet de D est dans D. Soit X un objet de C; on appelle (par abus de langage) cribles de X les cribles de la categorie C/X.</p>\n</blockquote>",
        "id": 168834432,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561368280
    },
    {
        "content": "<p>seems complicated</p>",
        "id": 168834438,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561368291
    },
    {
        "content": "<p>Right... another option is to forget about sites for the moment.</p>",
        "id": 168834511,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561368380
    },
    {
        "content": "<p>And focus on sheaves on <code>distrib_inf_lattice</code>s or whatever the variant you need.</p>",
        "id": 168834528,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561368407
    },
    {
        "content": "<p>can't I just use some variants of my current definition</p>",
        "id": 168834534,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561368423
    },
    {
        "content": "<p>Sure, you can</p>",
        "id": 168834543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561368432
    },
    {
        "content": "<p>But if you want a basis for a topology to be a site, then you need coverages</p>",
        "id": 168834549,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561368450
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">sheaf</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pullback</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_site</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">w</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_presheaf</span> <span class=\"o\">:</span> <span class=\"n\">presheaf</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">w</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">ext</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">c</span> <span class=\"err\">‚àà</span> <span class=\"n\">has_site</span><span class=\"bp\">.</span><span class=\"n\">cov</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"err\">Œ£</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">‚Üí</span>\n  <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">t</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">glue</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">c</span> <span class=\"err\">‚àà</span> <span class=\"n\">has_site</span><span class=\"bp\">.</span><span class=\"n\">cov</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"err\">Œ£</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">d</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"n\">d1</span> <span class=\"n\">d2</span> <span class=\"o\">:</span> <span class=\"err\">Œ£</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">d1</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">d2</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"o\">(</span><span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">d1</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">d2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">d1</span> <span class=\"n\">H1</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"o\">(</span><span class=\"bp\">@@</span><span class=\"n\">pullback</span><span class=\"bp\">.</span><span class=\"n\">snd</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"n\">d1</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">d2</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">d2</span> <span class=\"n\">H2</span><span class=\"o\">))</span> <span class=\"bp\">‚Üí</span>\n  <span class=\"bp\">‚àÉ</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"kn\">eval</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"err\">Œ£</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">d</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n    <span class=\"n\">to_presheaf</span><span class=\"bp\">.</span><span class=\"n\">res</span> <span class=\"n\">d</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"n\">F</span> <span class=\"n\">d</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 168834604,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561368489
    },
    {
        "content": "<blockquote>\n<p>But if you want a basis for a topology to be a site, then you need coverages</p>\n</blockquote>\n<p>oh that's for extending a sheaf from a sheaf on basis?</p>",
        "id": 168834607,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561368499
    },
    {
        "content": "<p>Yup, if you want to do that using the general framework</p>",
        "id": 168834611,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561368518
    },
    {
        "content": "<p>how do I do that if I have coverages?</p>",
        "id": 168834617,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561368530
    },
    {
        "content": "<p>We could of course do a hands-on extension</p>",
        "id": 168834618,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561368530
    },
    {
        "content": "<blockquote>\n<p>how do I do that if I have coverages?</p>\n</blockquote>\n<p>You need to formalise morphism of sites, and then the <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>i</mi><mi>t</mi><msub><mi>e</mi><mrow><mi>b</mi><mi>a</mi><mi>s</mi><mi>i</mi><mi>s</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">site_{basis}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.65952em;\"></span><span class=\"strut bottom\" style=\"height:0.80952em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord mathit\">s</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">t</span><span class=\"mord\"><span class=\"mord mathit\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">b</span><span class=\"mord mathit mtight\">a</span><span class=\"mord mathit mtight\">s</span><span class=\"mord mathit mtight\">i</span><span class=\"mord mathit mtight\">s</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> comes with a geometric morphism (aka morphism of sites/topoi) to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>s</mi><mi>i</mi><mi>t</mi><msub><mi>e</mi><mrow><mi>t</mi><mi>o</mi><mi>p</mi><mi>o</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>y</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">site_{topology}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.65952em;\"></span><span class=\"strut bottom\" style=\"height:0.9456279999999999em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord mathit\">s</span><span class=\"mord mathit\">i</span><span class=\"mord mathit\">t</span><span class=\"mord\"><span class=\"mord mathit\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361079999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">t</span><span class=\"mord mathit mtight\">o</span><span class=\"mord mathit mtight\">p</span><span class=\"mord mathit mtight\">o</span><span class=\"mord mathit mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathit mtight\">o</span><span class=\"mord mathit mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathit mtight\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span>.</p>",
        "id": 168834644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561368583
    },
    {
        "content": "<p>You pushforward along this morphism.</p>",
        "id": 168834650,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561368589
    },
    {
        "content": "<p>and how do you show that if I restrict a sheaf to a sheaf on basis then extend it again, I get the \"same\" sheaf?</p>",
        "id": 168834720,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561368625
    },
    {
        "content": "<p>That's a theorem. I'm not saying it's easy.</p>",
        "id": 168834737,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561368650
    },
    {
        "content": "<p>(It's math easy, of course)</p>",
        "id": 168834742,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561368658
    },
    {
        "content": "<p>how do you do it in maths?</p>",
        "id": 168834755,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561368675
    },
    {
        "content": "<p>\"Proof. Follows from the sheaf property. QED\" (I guess this is what most people would do...)</p>",
        "id": 168834821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561368749
    },
    {
        "content": "<p>I think there is a proof in the stacks project. The define a notion of \"sheaf on a basis\". But what they do is hands on. If you use coverages, then a \"sheaf on a basis\" is <em>just a sheaf</em>.</p>",
        "id": 168834846,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561368788
    },
    {
        "content": "<p>I don't know if we want to care about sheaves on bases...</p>",
        "id": 168834854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561368806
    },
    {
        "content": "<p>so what I'm wondering is, if you use this wonderful language of coverage, how do you do it?</p>",
        "id": 168834928,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561368869
    },
    {
        "content": "<p>Well, you will still need to use the sheaf property for coverages</p>",
        "id": 168835220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561369253
    },
    {
        "content": "<p>But anyway... do you have a good reason to pursue this?</p>",
        "id": 168835249,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561369289
    },
    {
        "content": "<p>Or should we first try to do the push-pull adjunction for sheaves on topological spaces?</p>",
        "id": 168835263,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561369312
    },
    {
        "content": "<p>I don't know</p>",
        "id": 168835428,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561369451
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">category</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"n\">class</span> <span class=\"n\">has_site</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">cov</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"err\">Œ£</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">U</span><span class=\"o\">)))</span>\n<span class=\"o\">(</span><span class=\"n\">lift</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">c</span> <span class=\"err\">‚àà</span> <span class=\"n\">cov</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">h</span> <span class=\"err\">‚àà</span> <span class=\"n\">cov</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"bp\">‚àÄ</span> <span class=\"n\">j</span> <span class=\"err\">‚àà</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">i</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">j</span> <span class=\"err\">‚ü∂</span> <span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">k</span> <span class=\"err\">‚â´</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span>\n</pre></div>",
        "id": 168836742,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561370855
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> how does this look?</p>",
        "id": 168836746,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561370860
    },
    {
        "content": "<p>is that really the only axiom? I would have expected something like \"{&lt;U, id&gt;} \\in cov U\" and possibly something about covers of covers</p>",
        "id": 168837063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1561371231
    },
    {
        "content": "<p>I'm just using <a href=\"https://ncatlab.org/nlab/show/coverage#Definition\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/coverage#Definition\">https://ncatlab.org/nlab/show/coverage#Definition</a></p>",
        "id": 168837349,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561371548
    },
    {
        "content": "<p>I believe it's like how you can generate an equivalence relation given just any relation</p>",
        "id": 168837365,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561371583
    },
    {
        "content": "<p>and it's also to allow for a basis to be a site</p>",
        "id": 168837414,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561371605
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">sites</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">bases</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">opens</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">v</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"n\">lattice</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">topological_basis</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"o\">(</span><span class=\"n\">opens</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">//</span> <span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"n\">is_basis</span> <span class=\"n\">B</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">basis</span><span class=\"bp\">.</span><span class=\"n\">has_site</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">topological_basis</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_site</span> <span class=\"n\">B</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">cov</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">c</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">U</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">i</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">sigma</span><span class=\"bp\">.</span><span class=\"n\">fst</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"n\">lift</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">c</span> <span class=\"n\">hc</span> <span class=\"n\">V</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"o\">{</span> <span class=\"n\">h</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">i</span> <span class=\"err\">‚àà</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">‚â§</span> <span class=\"n\">V</span> <span class=\"err\">‚äì</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"o\">},</span>\n    <span class=\"bp\">Œª</span> <span class=\"n\">x</span> <span class=\"n\">hxV</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"bp\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hic</span><span class=\"o\">,</span> <span class=\"n\">hxi</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">hc</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">g</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">hxV</span><span class=\"o\">),</span>\n      <span class=\"bp\">‚ü®</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">HWB</span><span class=\"o\">,</span> <span class=\"n\">hxW</span><span class=\"o\">,</span> <span class=\"n\">HWVi</span><span class=\"bp\">‚ü©</span> <span class=\"o\">:=</span> <span class=\"n\">opens</span><span class=\"bp\">.</span><span class=\"n\">is_basis_iff_nbhd</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">B</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">x</span> <span class=\"err\">‚àà</span> <span class=\"n\">V</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">‚äì</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"bp\">‚ü®</span><span class=\"n\">hxV</span><span class=\"o\">,</span> <span class=\"n\">hxi</span><span class=\"bp\">‚ü©</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"bp\">‚ü®‚ü®‚ü®</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">HWB</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®‚ü®Œª</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">HWVi</span> <span class=\"n\">hy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"bp\">‚ü©‚ü©‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hic</span><span class=\"o\">,</span> <span class=\"n\">HWVi</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"n\">hxW</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n    <span class=\"bp\">Œª</span> <span class=\"n\">j</span> <span class=\"bp\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hic</span><span class=\"o\">,</span> <span class=\"n\">hjVi</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">hic</span><span class=\"o\">,</span> <span class=\"bp\">‚ü®‚ü®Œª</span> <span class=\"n\">y</span> <span class=\"n\">hy</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">hjVi</span> <span class=\"n\">hy</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"bp\">‚ü©‚ü©</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">‚ü©‚ü©</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span>\n</pre></div>",
        "id": 168838299,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561372611
    },
    {
        "content": "<p>looks like it's working</p>",
        "id": 168838310,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1561372622
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Cool!</p>",
        "id": 168839312,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561373856
    },
    {
        "content": "<p>So now you can probably also write down the sheaf axiom(s) in this language.</p>",
        "id": 168840462,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561375026
    },
    {
        "content": "<blockquote>\n<p>But anyway... do you have a good reason to pursue this?</p>\n</blockquote>\n<p>Pushforwards and pullbacks are just adjoint functors. Kenny is flagging the situation where we go from a sheaf on a basis to a sheaf, and in that situation both the functors are equivalences. Is this some sort of Galois connection but one level up? </p>\n<p>I guess Grothendieck knew that a top space, and a top-space-with-a-basis, were the same thing as far as sheaf theory goes, so he defined the topos associated to the site to be the category of sheaves on the site, and then we have two different sites with the same topos (and hence the same \"geometry\").</p>\n<blockquote>\n<p>is that really the only axiom? I would have expected something like \"{&lt;U, id&gt;} \\in cov U\" and possibly something about covers of covers</p>\n</blockquote>\n<p>These are definitely axioms in some of these abstrations. What's a Grothendieck topology? Is this the difference between a Groth Top and a coverage?</p>",
        "id": 168840541,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561375110
    },
    {
        "content": "<p>Galois connections are adjunctions one level down, yes.</p>",
        "id": 168840583,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561375163
    },
    {
        "content": "<p>A <code>coverage</code> is the bare minimum that you need. You can use those to generate a Grothendieck topology.</p>",
        "id": 168840601,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561375201
    },
    {
        "content": "<p>Is it a Galois insertion I'm talking about then?</p>",
        "id": 168840650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561375216
    },
    {
        "content": "<p>A Galois insertion is like an adjunction where the left(?) adjoint is fully faithful.</p>",
        "id": 168840670,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561375242
    },
    {
        "content": "<p>Ad <code>coverage</code> and axioms, see <a href=\"https://ncatlab.org/nlab/show/coverage#saturation_conditions\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/coverage#saturation_conditions\">https://ncatlab.org/nlab/show/coverage#saturation_conditions</a></p>",
        "id": 168840686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1561375265
    },
    {
        "content": "<p>I have never used the nlab as a serious reference before (of course this is mostly because I do number theory rather than higher category stuff). I get the impression that there's a small community so probably not much refereeing going on. It would an interesting test for the nlab pages if they were being used as a resource for formalising. How accurate are they? I know that Kenny sees the nlab and can't tell it apart from SGA4, but for me SGA4 is refereed, much used, and trustworthy, whereas nlab is just some random website which might be full of fake news.</p>",
        "id": 168840818,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561375441
    },
    {
        "content": "<p>This was also a problem with Wikipedia in the beginning, when it had some maths pages and the quality was extremely variable.</p>",
        "id": 168840872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561375476
    },
    {
        "content": "<p>I would say nlab in general is somewhat more trustworthy than Wikipedia though of course still less trustworthy than peer-reviewed publications. Compared to Wikipedia, the nlab authors are a lot more likely to know what they're talking about in the first place.</p>",
        "id": 168843850,
        "sender_full_name": "Reid Barton",
        "timestamp": 1561378389
    },
    {
        "content": "<p>Well that's good to know. With Wikipedia there used to be dozens of inaccuracies in some articles, some were very poor initially, but I could never be bothered to learn how to change them (I had three small kids at the time). Sufficiently many people did learn that Wikipedia is much better now, but I just didn't really know about nLab's record for accuracy, and if I don't know then my default opinion is \"do not trust\". What I've seen from it does look good though, when I'm reading about stuff I already understand.</p>",
        "id": 168846247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1561380676
    }
]