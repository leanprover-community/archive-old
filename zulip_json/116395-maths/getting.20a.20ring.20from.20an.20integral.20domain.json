[
    {
        "content": "<p>If I understand correctly the definition</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[protect_proj, ancestor comm_ring domain]</span>\n<span class=\"kd\">class</span> <span class=\"n\">integral_domain</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">domain</span> <span class=\"n\">α</span>\n</code></pre></div>\n<p>of an integral domain, it is something which extends both <code>commutative rings</code> and <code>domains</code>. These two classes both extend <code>rings</code>.</p>\n<p>As far as I understand, constructing an \"extension\"  automatically produces maps from <code>comm_ring</code> to <code>ring</code> and from <code>domain</code> to <code>ring</code> allowing to look at a <code>comm_ring</code> (resp. at a <code>domain</code>) as being a <code>ring</code>. Hence there are a priori two maps taking an <code>integral_domain</code> and producing a <code>ring</code>, according to which path one chooses between <code>integral_domain -&gt; domain -&gt; ring</code> and <code>integral_domain -&gt; comm_ring -&gt; ring</code>. Is it clear that the two results coincide?</p>\n<p>I am asking because I had a nice proof working for commutative rings, and tried to add the assumption <code>hR : integral_domain R</code> in order to strengthen the result. Now the proof does not compile anymore, giving a bunch of coercion issues, like</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_mem.mem</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule.has_mem</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul.mul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib.to_has_mul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_distrib</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"n\">M</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_mem.mem</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">submodule.has_mem</span> <span class=\"n\">R</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_comm_group.to_add_comm_monoid</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_add_comm_group</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_semiring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">))))</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_mul.mul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">distrib.to_has_mul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_distrib</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain.to_ring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">R</span> <span class=\"n\">hR</span><span class=\"o\">))))</span> <span class=\"n\">x</span>\n       <span class=\"n\">y</span><span class=\"o\">)</span>\n    <span class=\"n\">M</span>\n</code></pre></div>\n<p>(the last lines are different: one is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">distrib.to_has_mul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_distrib</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">comm_ring.to_ring</span> <span class=\"n\">R</span> <span class=\"n\">_inst_1</span><span class=\"o\">)))</span>\n</code></pre></div>\n<p>and the other is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">distrib.to_has_mul</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">ring.to_distrib</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">domain.to_ring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain.to_domain</span> <span class=\"n\">R</span> <span class=\"n\">hR</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 216620073,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1605278582
    },
    {
        "content": "<p>Could it be that you have two instances of a commutative ring around? One coming from <code>comm_ring</code> and one from <code>integral_domain</code>?</p>",
        "id": 216621468,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605279137
    },
    {
        "content": "<p>Namely, having both <code>[comm_ring A]</code> and <code>[integral_domain A]</code> would cause issues</p>",
        "id": 216621622,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605279196
    },
    {
        "content": "<p>Oh yes!</p>",
        "id": 216621635,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1605279201
    },
    {
        "content": "<p>Thank you so much! I now realize the problem.</p>",
        "id": 216621658,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1605279213
    },
    {
        "content": "<p>No problem :)</p>",
        "id": 216621691,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605279229
    },
    {
        "content": "<p>Is there a statement <code>is_integral_domain : ring --&gt; Prop</code>?</p>",
        "id": 216621696,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1605279230
    },
    {
        "content": "<p>So that I can add <code>hR : is_integral_domain R</code>?</p>",
        "id": 216621799,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1605279255
    },
    {
        "content": "<p>I'm not sure.</p>",
        "id": 216621841,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605279276
    },
    {
        "content": "<p>I wrote <code>hR : integral_domain R</code> and now you make me realize that I have created a second ring called <code>hR</code> to which I asked to be an int. domain...</p>",
        "id": 216621875,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1605279288
    },
    {
        "content": "<p>Do you really want to say that the integral domain assumption is a separate assumption?</p>",
        "id": 216621913,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605279305
    },
    {
        "content": "<p>Well, that was my idea because in the applications I had in mind I would expect someone to prove that a ring was an int. domain and then give the proof to the lemma</p>",
        "id": 216622024,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1605279356
    },
    {
        "content": "<p>But I can add it in the variables definition.</p>",
        "id": 216622094,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1605279370
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/getting.20a.20ring.20from.20an.20integral.20domain/near/216621913\">said</a>:</p>\n<blockquote>\n<p>Do you really want to say that the integral domain assumption is a separate assumption?</p>\n</blockquote>\n<p>Thanks, it works and the problem was indeed my stupid syntax. At any rate, is the answer to my original question about \"the two paths leading to the same result\" <em>yes</em>?</p>",
        "id": 216624053,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1605280221
    },
    {
        "content": "<p>I think so.</p>",
        "id": 216624865,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605280655
    },
    {
        "content": "<p>You can check... (I'll sketch some code)</p>",
        "id": 216624909,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605280679
    },
    {
        "content": "<p>Here's a roundabout sanity check <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n\n<span class=\"kn\">include</span> <span class=\"n\">h</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo1</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo2</span> <span class=\"o\">:</span> <span class=\"n\">domain</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">h</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">foo3</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">foo1</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n<span class=\"kd\">def</span> <span class=\"n\">foo4</span> <span class=\"o\">:</span> <span class=\"n\">ring</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:=</span> <span class=\"n\">foo2</span><span class=\"bp\">;</span> <span class=\"n\">apply_instance</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">foo3</span> <span class=\"bp\">=</span> <span class=\"n\">foo4</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 216625491,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605280907
    },
    {
        "content": "<p>Very nice!</p>",
        "id": 216625641,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1605280956
    },
    {
        "content": "<p><code>is_integral_domain</code> exists.</p>",
        "id": 216626800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605281485
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 216626858,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1605281520
    },
    {
        "content": "<p>This is somehow a big mess, it trips up a lot of beginners and in some sense I'm not sure we have a good solution for it all yet.</p>",
        "id": 216640588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1605286853
    },
    {
        "content": "<p>I really think the <code>[[...]]</code> idea could be a solution to this issue.</p>",
        "id": 216644251,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605288478
    },
    {
        "content": "<p>In this case, all Prop's defining the axioms for an integral domain would be individual Prop-valued classes (or mixins?, whatever you want to call it), And the \"ring\" class could just be the data associated with the ring, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">raw_ring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">neg</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>And to declare an integral domain you would just write <code>[[integral_domain A]]</code> and lean should automatically add all the data + mixins as assumptions</p>",
        "id": 216644499,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605288597
    },
    {
        "content": "<p>And this way we also wouldn't have to worry about whether <code>PID</code> and/or <code>DVR</code> should be a prop-valued class assuming <code>integral_domain</code> or something which extends <code>integral_domain</code>.</p>",
        "id": 216644747,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605288687
    },
    {
        "content": "<p>I have no idea what amount of work would be needed to get <code>[[...]]</code> working, but it would be awesome if it works!</p>",
        "id": 216649188,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605290654
    },
    {
        "content": "<p>How should lean handle <code>[[foo A]] [[bar A]]</code> if foo requires <code>[monoid_with_zero A]</code> and bar requires <code>[add_monoid A]</code>? It seems it need to be at least aware enough of diamonds (in this case, to <code>has_zero</code>) to reject them</p>",
        "id": 216652402,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605292196
    },
    {
        "content": "<p>Or maybe if we use <code>[[]]</code> widely enough all the diamonds vanish</p>",
        "id": 216652589,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605292265
    },
    {
        "content": "<p>I'm not in any place to make <code>[[]]</code> happen, but if it's something we really want (for Lean 4?), we should write up an issue somewhere (mathlib? community Lean?), since proposals in Zulip are too easily forgotten.</p>",
        "id": 216653420,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1605292579
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> You would need a class like <code>[raw_semiring A]</code> for the data of addition, multiplication, zero, and one</p>",
        "id": 216653689,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605292684
    },
    {
        "content": "<p>there is an issue for this</p>",
        "id": 216653808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605292748
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/lean/issues/1522\">leanprover/lean#1522</a></p>",
        "id": 216654043,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605292839
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span> Why do we want <code>raw_ring</code>. Can't <code>[[ring A]]</code> just be shorthand for<br>\n<code>[has_zero A] .. [has_mul A] [ring_axioms A]</code>?</p>",
        "id": 216654053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605292843
    },
    {
        "content": "<p>Yeah, I guess you're right <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span></p>",
        "id": 216654117,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605292878
    },
    {
        "content": "<p>Except <code>[ring_axioms A]</code> should be <code>[[ring_axioms A]]</code> :)</p>",
        "id": 216654183,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1605292914
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Coq has this. It leads to some big performance problems</p>",
        "id": 216654189,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605292915
    },
    {
        "content": "<p>Why?</p>",
        "id": 216654267,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605292934
    },
    {
        "content": "<p>There would always be a direct path to <code>has_add A</code>, which seems a big win to me.</p>",
        "id": 216654322,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605292958
    },
    {
        "content": "<p><a href=\"https://www.ralfj.de/blog/2019/05/15/typeclasses-exponential-blowup.html\">https://www.ralfj.de/blog/2019/05/15/typeclasses-exponential-blowup.html</a></p>",
        "id": 216654398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605292988
    },
    {
        "content": "<p>The TC-graph would only be about inferring <code>comm_ring</code> from <code>principal_ideal_domain</code> and things like that. Just a bunch of props</p>",
        "id": 216654404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605292991
    },
    {
        "content": "<p>Right - all the <code>to_has_add</code> parts of typeclass search would vanish</p>",
        "id": 216654428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1605293002
    },
    {
        "content": "<p>the problem is that even ignoring the search itself, the <em>result</em> grows exponentially with the depth of the hierarchy</p>",
        "id": 216654604,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605293063
    },
    {
        "content": "<p>Hmm, I'll have to read that blog (again)</p>",
        "id": 216655239,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605293315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> From that blogpost:</p>\n<blockquote>\n<p>Taking the superclasses as indices instead of embedding them as fields simplifies typeclass search and is necessary to support diamonds in the hierarchy; see the original paper for more details.</p>\n</blockquote>\n<p>I propose to only index on data-carrying classes like <code>has_one A</code> and <code>has_add A</code>, but not on Props like <code>is_semigroup A</code> or <code>is_comm_ring A</code>.</p>",
        "id": 216657659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605294377
    },
    {
        "content": "<p>In Lean that doesn't cause diamonds, because of proof irrelevance. And it seems that we won't get exponential blowup either. (Well, we do... but the base would not be as high as with the naive index on everything approach.)</p>",
        "id": 216657728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605294421
    },
    {
        "content": "<p>So <code>is_comm_ring</code> would still extend <code>is_ring</code> and <code>is_comm_monoid</code> as an <code>old_structure</code>.</p>",
        "id": 216657775,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605294453
    },
    {
        "content": "<p>I don't think <code>is_comm_ring</code> could extend <code>is_comm_monoid</code> if we explode the classes like this</p>",
        "id": 216657966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605294547
    },
    {
        "content": "<p>Why not?</p>",
        "id": 216658112,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605294609
    },
    {
        "content": "<p>it means that a search for <code>is_comm_monoid A &lt;one&gt; &lt;add&gt;</code> would have to also search for <code>is_comm_ring A &lt;one&gt; &lt;add&gt; ?</code></p>",
        "id": 216658129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605294621
    },
    {
        "content": "<p>Well, it would have to also search for <code>has_mul A</code> and <code>has_zero A</code> first. And if it found those, it could search for <code>is_comm_ring A &lt;zero&gt; &lt;one&gt; &lt;add&gt; &lt;mul&gt;</code></p>",
        "id": 216658260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605294715
    },
    {
        "content": "<p>But if it doesn't find <code>has_zero A</code>, then it can forget about search for <code>is_comm_ring</code></p>",
        "id": 216658347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605294741
    },
    {
        "content": "<p>That's similar to what we do now already with some mixins, right?</p>",
        "id": 216658387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605294763
    },
    {
        "content": "<p>I think it would still have to try to search for <code>is_comm_ring A &lt;zero'&gt; &lt;one&gt; &lt;add&gt; &lt;mul'&gt;</code> for every solution for <code>zero' : has_zero A</code></p>",
        "id": 216658412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605294781
    },
    {
        "content": "<p>Sure, but search for all <code>zero' : has_zero A</code> will be very fast.</p>",
        "id": 216658457,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605294810
    },
    {
        "content": "<p>which means if there are multiple paths (even if they are defeq) this will result in combinatorial explosion</p>",
        "id": 216658485,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605294831
    },
    {
        "content": "<p>Because in my hypothetical TC graph, there are no paths from <code>some_type_class A</code> to <code>has_zero A</code></p>",
        "id": 216658543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605294845
    },
    {
        "content": "<p>So the search for <code>has_zero A</code> should be instant</p>",
        "id": 216658585,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605294869
    },
    {
        "content": "<p>It will have 0 or 1 solutions</p>",
        "id": 216658603,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605294884
    },
    {
        "content": "<p>And the same for every <code>has_X A</code> constant/unary/binary op.</p>",
        "id": 216658648,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605294911
    },
    {
        "content": "<p>what if the definition of <code>has_zero</code> for one type needs more things on another type? Or worse, a lawful class</p>",
        "id": 216658700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605294951
    },
    {
        "content": "<p>for example the <code>has_one</code> of polynomials needs <code>has_zero</code> and <code>has_one</code> on the base ring</p>",
        "id": 216658759,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605294969
    },
    {
        "content": "<p>Sure, but won't that still be fast? I don't see how it is so different from what we are already doing. It will do structural recursion on the shape of <code>A</code>. If it sees <code>polynomial R</code>, then it searches for <code>has_zero R</code> and <code>has_one R</code>. That should hopefully bottom out pretty fast.</p>",
        "id": 216659091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605295137
    },
    {
        "content": "<p>I understand that it now has to do 2 searches, whereas in the current mathlib it has to do only 1 search.</p>",
        "id": 216659139,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605295165
    },
    {
        "content": "<p>well it seems untenable to get the \"0 or 1\" property in general</p>",
        "id": 216659155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605295173
    },
    {
        "content": "<p>Ok, I see your point, if the <code>has_zero A</code> would depend on some lawful class, then you would get multiple paths again</p>",
        "id": 216659315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605295228
    },
    {
        "content": "<p>This is an annoying issue.</p>",
        "id": 216659543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605295341
    },
    {
        "content": "<p>I should say that I am in favor of the <code>[[foo]]</code> implicit quantification syntax, but I don't think we should overhaul the hierarchy to use it pervasively</p>",
        "id": 216659631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605295397
    },
    {
        "content": "<p>it hides problems, it doesn't solve them</p>",
        "id": 216659711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1605295440
    },
    {
        "content": "<p>This footnote of the blogpost seems to say that my idea isn't as bad as the nesting indices:</p>\n<blockquote>\n<p>Note that the number of indices does not matter, like the fact that Monoid has both an Op and a Unit index. That just affects the constant factor. It’s the nesting of indices that gets us here.</p>\n</blockquote>",
        "id": 216659847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1605295510
    }
]