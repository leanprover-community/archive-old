[
    {
        "content": "<p>I am interested in beefing up equiv but I am only now coming to terms with how universes work and do not yet really understand how they affect the picture if at all</p>",
        "id": 125837442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524963406
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span>\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span> <span class=\"n\">y</span> <span class=\"n\">z</span>\n<span class=\"n\">def</span> <span class=\"n\">αu</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span>\n<span class=\"n\">def</span> <span class=\"n\">αuv</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span>\n<span class=\"n\">def</span> <span class=\"n\">αv</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">u_v</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">αu</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">αv</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">u_uv</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">αu</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">αuv</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span><span class=\"n\">rfl</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">u_uv</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">equiv</span> <span class=\"o\">(</span><span class=\"n\">αu</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"err\">\\</span><span class=\"n\">auv</span> <span class=\"n\">X</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 125837448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524963424
    },
    {
        "content": "<p>the last one isn't a puzzle</p>",
        "id": 125837452,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524963433
    },
    {
        "content": "<p>it unfortunately doesn't typecheck because of universe issues</p>",
        "id": 125837455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524963451
    },
    {
        "content": "<p>Is there any way of somehow forcing it to typecheck with universe coercion or something? And then would equiv still fail?</p>",
        "id": 125837460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524963481
    },
    {
        "content": "<p>I guess the zeroth thing to know about universes is that <code>universe u</code> doesn't mean \"Fix a universe $U$\"; it just makes <code>u</code> a legal thing to put somewhere that a universe is expected.<br>\nIn other words, the <code>u</code> and <code>v</code>s in <code>\\au</code>, <code>\\auv</code>, <code>\\av</code> are unrelated, and definitions <code>\\au</code> and <code>\\av</code> are exactly the same.</p>",
        "id": 125838746,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524966597
    },
    {
        "content": "<p>You can think of Lean universes as corresponding to Grothendieck universes except that Lean universes are not cumulative, so that a type belongs to <code>Type u</code> for just one <code>u</code>.</p>",
        "id": 125838886,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524966945
    },
    {
        "content": "<p>To \"move\" a type from one universe to a bigger one, use <code>ulift</code>. The new type is <code>equiv</code> to the old one (<code>equiv.ulift</code>).</p>",
        "id": 125839130,
        "sender_full_name": "Reid Barton",
        "timestamp": 1524967522
    }
]