[
    {
        "content": "<p>I'd like to show that <code>(adjugate A).det = A.det ^ (fintype.card n - 1)</code>. Right now we only have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.det_adjugate_of_cancel\">docs#matrix.det_adjugate_of_cancel</a>, but this assumes cancellation is possible which seems unnecessary as both sides of the statement are just sums of products.</p>\n<p>Am I correct in assuming this is true without that assumption? I was hoping the lemmas in <a href=\"https://github.com/leanprover-community/mathlib/issues/9947\">#9947</a> would help with showing this, but I can't think of a proof strategy that doesn't involve unfolding <code>matrix.det</code> and doing some painful sum manipulation.</p>",
        "id": 258932123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635152235
    },
    {
        "content": "<p>There's a trick to proving this, where you consider the 'generic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n \\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-matrix' with coefficients in the polynomial ring over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb Z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">Z</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> variables. Its determinant is non-zero, hence cancellable, so the mathlib lemma applies. Now any <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n \\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>-matrix over any ring is the image of this generic matrix under some ring hom, so by some naturality lemmas the theorem holds for any matrix.</p>",
        "id": 258933224,
        "sender_full_name": "David Wärn",
        "timestamp": 1635152924
    },
    {
        "content": "<p>That's a formal approach to my \"both sides of the statement are just sums of products.\" hand-wave, right?</p>",
        "id": 258933395,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635153020
    },
    {
        "content": "<p>Unfortunately <code>mv_polynomial</code> isn't available to import yet where I want to generalize this lemma</p>",
        "id": 258933771,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635153256
    },
    {
        "content": "<p>But I assume you mean something like showing <code>∃ (A' : matrix n n (mv_polynomial ℤ (n × n))) (f : mv_polynomial ℤ (n × n) →+* α), A = A'.map f</code></p>",
        "id": 258933845,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635153312
    },
    {
        "content": "<p>Or possibly</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→+*</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"o\">((</span><span class=\"n\">prod.mk</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span>\n</code></pre></div>",
        "id": 258934116,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635153476
    },
    {
        "content": "<p>That looks about right. You'd need to know that <code>A'.det</code> is nonzero, and that the polynomial ring is an integral domain. And you could write down the ring hom <code>f</code> explicitly (it maps the variables to entries of <code>A</code>)</p>",
        "id": 258934754,
        "sender_full_name": "David Wärn",
        "timestamp": 1635153874
    },
    {
        "content": "<p>Will be back shortly with a few sorries...</p>",
        "id": 258935581,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635154411
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">det_adjugate'</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">n</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">adjugate</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">=</span> <span class=\"n\">A.det</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"n\">fintype.card</span> <span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- get rid of the `- 1`</span>\n  <span class=\"n\">cases</span> <span class=\"n\">h_card</span> <span class=\"o\">:</span> <span class=\"n\">fintype.card</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">is_empty</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">fintype.card_eq_zero_iff.mp</span> <span class=\"n\">h_card</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">nat.zero_sub</span><span class=\"o\">,</span> <span class=\"n\">pow_zero</span><span class=\"o\">,</span> <span class=\"n\">adjugate_subsingleton</span><span class=\"o\">,</span> <span class=\"n\">det_one</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span><span class=\"n\">h_card</span><span class=\"o\">,</span>\n\n  <span class=\"c1\">-- express `A` as a polynomial in n^2 variables</span>\n  <span class=\"k\">let</span> <span class=\"n\">A'</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">matrix.map</span> <span class=\"o\">(</span><span class=\"n\">prod.mk</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.X</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">_</span> <span class=\"n\">ℤ</span><span class=\"o\">)),</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">ring_hom.map_matrix</span> <span class=\"o\">(</span><span class=\"n\">mv_polynomial.aeval</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">×</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">A</span> <span class=\"n\">p.1</span> <span class=\"n\">p.2</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">to_ring_hom</span> <span class=\"n\">A'</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ring_hom.map_adjugate</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ring_hom.map_det</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ring_hom.map_det</span><span class=\"o\">,</span> <span class=\"bp\">←</span><span class=\"n\">ring_hom.map_pow</span><span class=\"o\">],</span>\n  <span class=\"n\">congr'</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">det_adjugate_of_cancel</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">h_card</span><span class=\"o\">,</span> <span class=\"n\">nat.succ_sub_succ_eq_sub</span><span class=\"o\">,</span> <span class=\"n\">nat.sub_zero</span><span class=\"o\">,</span> <span class=\"n\">pow_succ</span><span class=\"o\">],</span>\n  <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul_left_cancel₀</span> <span class=\"n\">_</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n  <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">prod.mk</span> <span class=\"n\">mv_polynomial.X</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">det</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>(below <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom.map_adjugate\">docs#ring_hom.map_adjugate</a>)</p>",
        "id": 258936568,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635155030
    },
    {
        "content": "<p>So yes, \"You'd need to know that A'.det is nonzero\" is the missing piece</p>",
        "id": 258936585,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635155042
    },
    {
        "content": "<p>Which frankly feels almost as hard as the original</p>",
        "id": 258937374,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635155633
    },
    {
        "content": "<p>A'.det has to be nonzero because otherwise, the determinant of every n x n matrix would be zero (same argument)</p>",
        "id": 258937614,
        "sender_full_name": "Reid Barton",
        "timestamp": 1635155780
    },
    {
        "content": "<p>Got it, thanks; edited above</p>",
        "id": 258940106,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635157401
    },
    {
        "content": "<p>It's unfortunate that <a href=\"https://tqft.net/mathlib/linear_algebra/matrix/nonsingular_inverse\">file#linear_algebra/matrix/nonsingular_inverse</a> will now have to import <a href=\"https://tqft.net/mathlib/ring_theory/polynomial/basic\">file#ring_theory/polynomial/basic</a>, but I guess that's better than not having the proof at all</p>",
        "id": 258940153,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635157442
    },
    {
        "content": "<p>I did a similar proof through the polynomial matrix ring for the commutativity of the multiplication of adjugate (in a not necessarily commutative base ring) below in the file.</p>",
        "id": 258951960,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635165282
    },
    {
        "content": "<p>Darij Grinberg has great notes on these sorts of proofs.</p>",
        "id": 258952031,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1635165332
    },
    {
        "content": "<p>They're a basic technique in algebraic geometry. To prove certain kinds of statements for all X, you only have to prove them for the universal X, and the universal X might have nice properties which a general X doesn't have. For example in algebraic geometry the universal X might be flat, or integral (which was what happened here).</p>",
        "id": 258964038,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635170885
    },
    {
        "content": "<p>An interesting example where this technique <em>didn't</em> work was Eric's question the other day about whether a and b non-invertible implied ab non-invertible in a not necessarily commutative ring. Then the universal example was a quotient of a non-commuting polynomial ring in two variables by some bi-ideal and seemed hard to work with; it was easier to give a more concrete counterexample.</p>",
        "id": 258964381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635171040
    },
    {
        "content": "<p>An example where it does work well is in Johan and Rob's work on Witt vectors, where p was much better behaved in the universal object than it was in general</p>",
        "id": 258964686,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635171181
    },
    {
        "content": "<p>PR'd the above and a similar proof as <a href=\"https://github.com/leanprover-community/mathlib/issues/9991\">#9991</a></p>",
        "id": 259219082,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635330836
    }
]