[
    {
        "content": "<p>I am planning to define the <a href=\"https://en.wikipedia.org/wiki/Convolution\">convolution of two functions</a>.<br>\nIs anyone already working on this? (<span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>)</p>",
        "id": 269237246,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1643106763
    },
    {
        "content": "<p>This is not directly related, but Alex and I have incidence algebras over at <a href=\"https://github.com/leanprover-community/mathlib/tree/incidence_algebra\">branch#incidence_algebra</a>.</p>",
        "id": 269237373,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643106842
    },
    {
        "content": "<p>Yaël, is there any relation at all?</p>",
        "id": 269245621,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643111770
    },
    {
        "content": "<p>Multiplication in the incidence algebra is a convolution.</p>",
        "id": 269245720,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643111870
    },
    {
        "content": "<p>I think that is a different meaning of the word convolution: <a href=\"https://en.wikipedia.org/wiki/Dirichlet_convolution\">https://en.wikipedia.org/wiki/Dirichlet_convolution</a></p>",
        "id": 269250215,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1643114294
    },
    {
        "content": "<p>It's analogous at least.</p>",
        "id": 269254572,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643116485
    },
    {
        "content": "<p>True</p>",
        "id": 269257738,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1643118135
    },
    {
        "content": "<p>Questions about design decisions: </p>\n<ul>\n<li>Convolution takes 2 functions as arguments. Currently I have the domain of these functions as an additive (topological/measurable) additive group. This group carries some measure that is invariant under translation (so I cleaned this notion up a bit: <a href=\"https://github.com/leanprover-community/mathlib/pull/11655\">#11655</a>). </li>\n<li>For many results I also want the measure to be invariant under negation. Is there a name for this property on measures? </li>\n<li>Also, do we want the the domain group to be able to be multiplicative? This is going to be a nightmare though: <code>to_additive</code> won't be happy that we want to additivize the group operation on the domain, but not on the codomain.</li>\n<li>Should I try to make the codomain a <code>normed_ring</code>? Or is<code>is_R_or_C</code> enough?</li>\n</ul>",
        "id": 269259081,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1643118747
    },
    {
        "content": "<p>I think we also want allow the two functions to land in different places. We could have one function (seen as a weight function) landing in real number and the other one (seen as a function we want to average)in a real vector space.</p>",
        "id": 269260096,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643119217
    },
    {
        "content": "<p>When we want to apply convolution to smoothing functions.</p>",
        "id": 269260184,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643119247
    },
    {
        "content": "<p>I see, good point.</p>",
        "id": 269260219,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1643119263
    },
    {
        "content": "<p>Again, have a look at <a href=\"https://github.com/leanprover-community/mathlib/tree/incidence_algebra\">branch#incidence_algebra</a> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 269260243,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643119273
    },
    {
        "content": "<p>Everything there is done in terms of scalar actions.</p>",
        "id": 269260283,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643119288
    },
    {
        "content": "<p>Yaël, this is pretty difficult because you merge master very often</p>",
        "id": 269260312,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643119301
    },
    {
        "content": "<p>We should probably look at the diff with the last master you merged</p>",
        "id": 269260388,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1643119323
    },
    {
        "content": "<p>What does this have to do with anything? You can just compare on Github?</p>",
        "id": 269260401,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643119325
    },
    {
        "content": "<p>Here, you see the file and it's all clean: <a href=\"https://github.com/leanprover-community/mathlib/compare/incidence_algebra\">https://github.com/leanprover-community/mathlib/compare/incidence_algebra</a></p>",
        "id": 269260512,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643119385
    },
    {
        "content": "<p>If you open a <code>WIP</code> PR, then it will be easier to compare.</p>",
        "id": 269263366,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1643120636
    },
    {
        "content": "<p>I'm planning on opening a PR for the first half soonish, but sure</p>",
        "id": 269263522,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643120698
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/116395-maths/topic/convolution.20of.20functions/near/269237246\">said</a>:</p>\n<blockquote>\n<p>I am planning to define the <a href=\"https://en.wikipedia.org/wiki/Convolution\">convolution of two functions</a>.<br>\nIs anyone already working on this? (<span class=\"user-mention silent\" data-user-id=\"268315\">Anatole Dedecker</span> <span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span>)</p>\n</blockquote>\n<p>That would be great!</p>\n<p><span class=\"user-mention\" data-user-id=\"253861\">@Thomas Browning</span> is working on Pontryagin duals, and there's a connection: the Pontryagin dual of a locally compact abelian topological group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span> is canonically homeomorphic to the space of characters of the Banach algebra defined on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>1</mn></msup><mo stretchy=\"false\">(</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L^1(G)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">G</span><span class=\"mclose\">)</span></span></span></span> by convolution.  This enters into the proof of the general Plancherel theorem (their <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>L</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">L^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">L</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> spaces are canonically isomorphic).</p>\n<p>Thomas and I <a href=\"https://github.com/leanprover-community/mathlib/pull/11304#issuecomment-1010205794\">discussed this</a> briefly before but I don't know which part of the subject he's working on currently.</p>",
        "id": 269263922,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643120870
    },
    {
        "content": "<p>Here you go: <a href=\"https://github.com/leanprover-community/mathlib/pull/11656\">#11656</a></p>",
        "id": 269264188,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1643120997
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/116395-maths/topic/convolution.20of.20functions/near/269259081\">said</a>:</p>\n<blockquote>\n<ul>\n<li>Also, do we want the the domain group to be able to be multiplicative? This is going to be a nightmare though: <code>to_additive</code> won't be happy that we want to additivize the group operation on the domain, but not on the codomain.</li>\n</ul>\n</blockquote>\n<p>I think yes, eventually, eg for the Selberg trace formula.  But it could maybe just be a TODO for now.</p>",
        "id": 269266032,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1643121815
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/convolution.20of.20functions/near/269263922\">said</a>:</p>\n<blockquote>\n<p>Thomas and I <a href=\"https://github.com/leanprover-community/mathlib/pull/11304#issuecomment-1010205794\">discussed this</a> briefly before but I don't know which part of the subject he's working on currently.</p>\n</blockquote>\n<p>Right now, I'm still showing that the Pontryagin dual is a topological group, but I'm getting close.</p>",
        "id": 269295350,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1643132992
    },
    {
        "content": "<p>Update:<br>\nUntil today I was working on a definition of convolution where one function is scalar-valued and the other function is vector-valued: (<code>𝕜</code> is a normed field and <code>E</code> is a normed space over it)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">convolution</span> <span class=\"o\">[</span><span class=\"n\">has_sub</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"bp\">𝕜</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">G</span> <span class=\"bp\">.</span> <span class=\"n\">volume_tac</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">E</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∫</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">t</span> <span class=\"bp\">•</span> <span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span>\n</code></pre></div>\n<p>However, it seems to work with convolution of vector-valued functions properly, we need a generalization where both functions are vector valued, and there is some continuous bilinear map to \"multiply\" the two function values: (<code>E</code> and <code>E'</code> are normed spaces over <code>𝕜</code>)</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">convolution</span> <span class=\"o\">[</span><span class=\"n\">has_sub</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">E'</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E'</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">μ</span> <span class=\"o\">:</span> <span class=\"n\">measure</span> <span class=\"n\">G</span> <span class=\"bp\">.</span> <span class=\"n\">volume_tac</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">∫</span> <span class=\"n\">t</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">t</span><span class=\"o\">))</span> <span class=\"bp\">∂</span><span class=\"n\">μ</span>\n</code></pre></div>\n<p>The reason is the following. Suppose that I want to write down that the derivative of <code>f ⋆ g</code> is <code>f' ⋆ g</code>. If <code>f</code> is a function in 1 variable, this is fine, and we get something like <code>has_deriv_at (f ⋆ g) ((deriv f ⋆ g) x₀) x₀</code>. However, if <code>f</code> is a function in multiple variables, then <code>fderiv 𝕜 f</code> is a linear map, and no longer a scalar value (so the old definition of <code>convolution</code> is not applicable). <br>\nWe can state this with the new definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">precompL</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">E</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E'</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">E''</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">E'</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E''</span> <span class=\"bp\">→</span><span class=\"n\">L</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n<span class=\"kd\">lemma</span> <span class=\"o\">(</span><span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">has_fderiv_at</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">⋆</span><span class=\"o\">[</span><span class=\"n\">L</span><span class=\"bp\">;</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">((</span><span class=\"n\">fderiv</span> <span class=\"bp\">𝕜</span> <span class=\"n\">f</span> <span class=\"bp\">⋆</span><span class=\"o\">[</span><span class=\"n\">L.precompL</span> <span class=\"n\">G</span><span class=\"bp\">;</span> <span class=\"n\">μ</span><span class=\"o\">]</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">x₀</span><span class=\"o\">)</span> <span class=\"n\">x₀</span>\n</code></pre></div>\n<p>Note that we could have used the old definition for directional derivatives, but then we would not get to use all the properties of <code>fderiv</code>.<br>\nI looked with <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>, and all books we looked at so far only define convolution for scalar-valued function, and prove differentiation properties only using directional derivatives. However, it seems useful, and I expect that this generality will be useful in other applications as well.</p>\n<p>Additional advantages of the new definition: </p>\n<ul>\n<li>This generalization also makes it possible to use <code>@[to_additive]</code> everywhere (since we no longer have a multiplicative <code>mul</code>/<code>smul</code> that cannot become additive)</li>\n<li>The definition now also is a lot more symmetric than before (the definition is still asymmetric, but at least the type is symmetric in the two functions)</li>\n</ul>",
        "id": 272292228,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645118398
    },
    {
        "content": "<p>But... <code>smul</code> can become additive. What about <code>vadd</code>?</p>",
        "id": 272295710,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645119636
    },
    {
        "content": "<p>Else, I agree that this looks like a useful generalization.</p>",
        "id": 272295843,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645119701
    },
    {
        "content": "<p>You need a bilinear map. Vadd isn't bilinear</p>",
        "id": 272298105,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645120642
    },
    {
        "content": "<p>Does it make sense to use semilinear maps here? I don't know the answer.</p>",
        "id": 272298376,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1645120733
    },
    {
        "content": "<p><code>smul</code> neither. What do you mean?</p>",
        "id": 272303431,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1645122844
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/convolution.20of.20functions/near/272295710\">said</a>:</p>\n<blockquote>\n<p>But... <code>smul</code> can become additive. What about <code>vadd</code>?</p>\n</blockquote>\n<p>There is no <code>smul</code> in the new version of the definition (and in most lemmas about it)</p>",
        "id": 272303769,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1645122998
    },
    {
        "content": "<p>In algebraic geometry, an analogue of convolution is called <a href=\"https://en.m.wikipedia.org/wiki/Fourier%E2%80%93Mukai_transform\">Fourier-Mukai transform</a>.  In that context, you do exactly what you are suggesting: you multiply the functions by a \"kernel\" before integrating one of the variables out.</p>",
        "id": 272309410,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1645125599
    },
    {
        "content": "<p>(In that same context, things are even more general, you integrate <code>f t * g s * K t s</code> over <code>t</code>.  The case of the \"normal\" convolution is when <code>f</code> and <code>g</code> have the same/dual domain and <code>K</code> is a δ-function supported in the antidiagonal.)</p>",
        "id": 272310197,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1645125967
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/convolution.20of.20functions/near/272309410\">said</a>:</p>\n<blockquote>\n<p>In algebraic geometry, an analogue of convolution is called <a href=\"https://en.m.wikipedia.org/wiki/Fourier%E2%80%93Mukai_transform\">Fourier-Mukai transform</a>.  In that context, you do exactly what you are suggesting: you multiply the functions by a \"kernel\" before integrating one of the variables out.</p>\n</blockquote>\n<p>This is often also called an integral transform.</p>",
        "id": 272314543,
        "sender_full_name": "Matthew Ballard",
        "timestamp": 1645128013
    },
    {
        "content": "<p>If <code>f : G → E</code> and <code>g : G → F</code> can you convolute them to get <code>f.g : G → E ⊗ F</code> and then get everything else from that?</p>",
        "id": 272324442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1645133025
    },
    {
        "content": "<p>Or even maybe <code>G → E × F</code>? Is linearity actually needed here?</p>",
        "id": 272346371,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1645145763
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/convolution.20of.20functions/near/272346371\">said</a>:</p>\n<blockquote>\n<p>Or even maybe <code>G → E × F</code>? Is linearity actually needed here?</p>\n</blockquote>\n<p>Yes, for the integration.</p>",
        "id": 272486720,
        "sender_full_name": "Will Sawin",
        "timestamp": 1645238811
    },
    {
        "content": "<p>I made a sequence of PRs ending in <a href=\"https://github.com/leanprover-community/mathlib/pull/13540\">#13540</a> that provides an API for convolutions.</p>\n<p>Notable properties:</p>\n<ul>\n<li>Prove that when one of the functions has compact support and is <code>C^n</code> and the other function is locally integrable, the convolution is <code>C^n</code>.</li>\n<li>Compute the total derivative of the convolution (when one of the functions has compact support)</li>\n<li>Prove that when taking the convolution with functions that \"tend to the Dirac delta function\", the convolution tends to the original function.</li>\n</ul>",
        "id": 279537590,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1650458546
    },
    {
        "content": "<p>I guess I need to PR approximate units now so that you can have a def for \"tend to the Dirac delta function.\" <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 279551214,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1650465285
    }
]