[
    {
        "content": "<p>What is the canonical way to say that a field <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is finite-dimensional over a subfield <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, i.e. <code>(k : set K) [is_subfield k]</code>?</p>",
        "id": 188324334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581856424
    },
    {
        "content": "<p>Kind-of related: how do I say that a subring of a ring <code>{A : Type*} [ring A] (R : set A) [is_subring R]</code> is commutative? So it's like <code>algebra R A</code>.</p>",
        "id": 188325113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581858080
    },
    {
        "content": "<p>I think what I need for the subfields is that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>k</mi><mn>1</mn></msub><mo>⊆</mo><msub><mi>k</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">k_1\\subseteq k_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> are two subfields of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> is finite-dimensional as a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>k</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">k_1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-vector space then it's finite-dimensional as a  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>k</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">k_2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>-vector space.</p>",
        "id": 188325583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581859145
    },
    {
        "content": "<p>But I don't even know how to say it</p>",
        "id": 188325586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581859164
    },
    {
        "content": "<p>and I might well need more</p>",
        "id": 188325588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581859180
    },
    {
        "content": "<p>I thought formalising the Nullstellensatz would be easy :-/</p>",
        "id": 188325634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581859224
    },
    {
        "content": "<p>Oh I don't even know the canonical way to say that a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span>-algebra is finite-dimensional as a vector space. <code>is_noetherian</code>?</p>",
        "id": 188325793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581859608
    },
    {
        "content": "<p>There's a finite dimensional predicate for vector spaces. It's defined to be <code>is_noetherian</code></p>",
        "id": 188326285,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581860738
    },
    {
        "content": "<p>Is what's going on that when we say <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>⊆</mo><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">A\\subseteq B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"mord mathdefault\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05017em;\">B</span></span></span></span> an inclusion of rings, we're happy to let both rings play an equal role, whereas the CS people either want <code>A</code> to be the leader and <code>(B : Type) [ring B] [algebra A B]</code> to be the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">A</span></span></span></span>-algebra or they want <code>B</code> to be the leader and <code>(A : set B) [is_subring A]</code> to be the subalgebra?</p>",
        "id": 188326287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581860757
    },
    {
        "content": "<p>This is Zariski's Lemma.</p>\n<div class=\"codehilite\"><pre><span></span>1 goal\nK : Type v,\n_inst_1 : discrete_field K\n⊢ ∀ (k : set K) (S : finset K) [_inst_2 : is_subfield k],\n    ring.closure (k ∪ finset.to_set S) = univ → is_noetherian ↥k K\n</pre></div>",
        "id": 188326341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581860839
    },
    {
        "content": "<p>(possibly -- I was super-surprised that typeclass inference succeeded with the <code>↥k</code>-module structure on <code>K</code>.)</p>",
        "id": 188326382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581860895
    },
    {
        "content": "<p>It's a problem that these two things are different I think. It's the same concept with two different ways of expressing it, and you can go between them on paper fluently, but in Lean, you have to be careful about proving things in the correct generality, and that makes statements look ugly.</p>",
        "id": 188326390,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581860944
    },
    {
        "content": "<p>The proof of Zariski's Lemma is by induction on the size of S and it quantifies over all k, so I have to use <code>unfreeze_local_instances</code> and then add them again with <code>letI</code></p>",
        "id": 188326391,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581860980
    },
    {
        "content": "<p>Am I missing something?</p>",
        "id": 188326392,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581860993
    },
    {
        "content": "<p>That sounds possible.</p>",
        "id": 188326437,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581861065
    },
    {
        "content": "<p>But maybe subfields should be bundled.</p>",
        "id": 188326441,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581861080
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">suffices</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"n\">k</span><span class=\"o\">],</span>\n\n    <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"err\">∪</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">to_set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">univ</span> <span class=\"bp\">→</span> <span class=\"k\">by</span> <span class=\"n\">letI</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"n\">hk</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">is_noetherian</span> <span class=\"err\">↥</span><span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n</pre></div>",
        "id": 188326479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581861129
    },
    {
        "content": "<p>Use <code>finset.induction</code></p>",
        "id": 188326484,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581861187
    },
    {
        "content": "<p>But using subfield for this seems wrong. You want a map.</p>",
        "id": 188326536,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581861310
    },
    {
        "content": "<p>For my inductive step I'll have a set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> and I will construct (nonconstructively) some element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">s\\in S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> with a certain property and I will then use that the lemma is true for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>−</mo><mo stretchy=\"false\">{</mo><mi>s</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">S-\\{s\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">}</span></span></span></span>.</p>",
        "id": 188326580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581861374
    },
    {
        "content": "<p>You think I should be using <code>algebra k K</code>?</p>",
        "id": 188326586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581861427
    },
    {
        "content": "<p>It might be trick to use that during the proof actually, but you definitely want the final statement to be like that, even if you prove it for subfields first.</p>",
        "id": 188326631,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581861529
    },
    {
        "content": "<p>I see! Thanks for this. Should I be using <code>finset.induction</code> in my case?</p>",
        "id": 188326641,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581861595
    },
    {
        "content": "<p>I am happy to build what I need, but I want to do it right.</p>",
        "id": 188326685,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581861615
    },
    {
        "content": "<p>It seems like a bit of a kerfuffle to get from what I have to finset.induction</p>",
        "id": 188326784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581861883
    },
    {
        "content": "<p><code>apply finset.induction S</code>?</p>",
        "id": 188326799,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581861926
    },
    {
        "content": "<p>What is the induction, is it a one element at a time induction or a strong induction?</p>",
        "id": 188326805,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581861953
    },
    {
        "content": "<p>I prove <code>P emptyset</code>. I then show that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> is non-empty then I can manufacture an element <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">s\\in S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> which satisfies a certain property, and then I use the inductive hypothesis on <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>−</mo><mo stretchy=\"false\">{</mo><mi>s</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">S-\\{s\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">}</span></span></span></span>.</p>",
        "id": 188326847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581862013
    },
    {
        "content": "<p>which has size one less.</p>",
        "id": 188326852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581862024
    },
    {
        "content": "<p>Okay, so it is a strong induction really.</p>",
        "id": 188326862,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581862071
    },
    {
        "content": "<p>The manufacturing explicitly uses some nonconstructiveness because it's a case split: if no <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mo>∈</mo><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">s\\in S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">s</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span> has the property then I prove the result directly using other means.</p>",
        "id": 188326901,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581862089
    },
    {
        "content": "<p>It's what a mathematician would undoubtedly call \"induction on the size of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span></span></span></span>\".</p>",
        "id": 188326907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581862122
    },
    {
        "content": "<p>I would use the equation compiler for this, but that's just my taste.</p>",
        "id": 188326912,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581862158
    },
    {
        "content": "<p>Are you suggesting I use a <code>match S.card with</code>?</p>",
        "id": 188326955,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581862215
    },
    {
        "content": "<p>No, because then you don't get an induction hypothesis.</p>",
        "id": 188327013,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581862368
    },
    {
        "content": "<p>This is my goal:</p>\n<div class=\"codehilite\"><pre><span></span>⊢ ∀ (S : finset K) (k : Type u) [_inst_1 : discrete_field k] [_inst_3 : algebra k K],\n    algebra.adjoin k (finset.to_set S) = ⊤ → submodule.fg ⊤\n</pre></div>\n\n\n<p>I'm in tactic mode. I want to prove it by induction on the size of S. What do I do? I'm not with you yet.</p>",
        "id": 188327101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581862624
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>  <span class=\"k\">obtain</span> <span class=\"bp\">⟨</span><span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">hn</span><span class=\"bp\">⟩</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">card</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n    <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 188327150,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581862759
    },
    {
        "content": "<p>You can't really do it in the middle of a proof.</p>",
        "id": 188327314,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581863133
    },
    {
        "content": "<p>Not even with some <code>exact</code> trick?</p>",
        "id": 188327355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581863173
    },
    {
        "content": "<p>no</p>",
        "id": 188327363,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581863235
    },
    {
        "content": "<p>My <code>obtain</code> solution seems to be working fine. I just put <code>induction n with d hd</code> on the next step.</p>",
        "id": 188327403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581863303
    },
    {
        "content": "<p>There's <code>finset.strong_induction_on</code> as well.</p>",
        "id": 188327408,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581863342
    },
    {
        "content": "<p>Oh that's exactly what I need! Thanks! I thought you were just philosophising, I didn't realise it was there; I checked <code>finset.strong_induction</code> and it wasn't :-/</p>",
        "id": 188327474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581863472
    },
    {
        "content": "<p><code>  intro S, apply finset.strong_induction_on S, clear S,</code></p>",
        "id": 188327525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581863601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110044\">Chris Hughes</span> <a href=\"#narrow/stream/116395-maths/topic/finite-dimensionality.20of.20field.20over.20subfield/near/188326631\" title=\"#narrow/stream/116395-maths/topic/finite-dimensionality.20of.20field.20over.20subfield/near/188326631\">said</a>:</p>\n<blockquote>\n<p>It might be trick to use that during the proof actually, but you definitely want the final statement to be like that, even if you prove it for subfields first.</p>\n</blockquote>\n<p>I tried to prove it directly and now I am faced with the issue that it is maths-trivial that if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span></span></span></span> is a subfield of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>∋</mo><mi>s</mi></mrow><annotation encoding=\"application/x-tex\">S\\ni s</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∋</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">s</span></span></span></span> is a finite subset of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>=</mo><mi>k</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">K=k(S)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>=</mo><mi>L</mi><mo stretchy=\"false\">(</mo><msup><mi>S</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">K=L(S')</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi><mo>=</mo><mi>K</mi><mo stretchy=\"false\">(</mo><mi>s</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">L=K(s)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>S</mi><mo lspace=\"0em\" mathvariant=\"normal\" rspace=\"0em\">′</mo></msup><mo>=</mo><mi>S</mi><mo>−</mo><mo stretchy=\"false\">{</mo><mi>s</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">S'=S-\\{s\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">}</span></span></span></span></p>",
        "id": 188330706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581870581
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_2</span> <span class=\"o\">:</span> <span class=\"n\">discrete_field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">discrete_field</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"n\">hka</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst</span> <span class=\"o\">:</span> <span class=\"n\">discrete_field</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">k</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">hSgen</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">adjoin</span> <span class=\"n\">k</span> <span class=\"err\">↑</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span><span class=\"o\">,</span>\n<span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">field</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">})</span>\n<span class=\"err\">⊢</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">adjoin</span> <span class=\"err\">↥</span><span class=\"n\">L</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"err\">\\</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">})</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span>\n</pre></div>",
        "id": 188330755,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581870657
    },
    {
        "content": "<p>This feels like it would be easy with subsets.</p>",
        "id": 188330771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581870704
    },
    {
        "content": "<p>but if I use subsets it's hard to express finite-dimensionality of K over k</p>",
        "id": 188331063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581871229
    },
    {
        "content": "<p>I think that at some point I need to use subsets and then talk about the sub-R-module of an R-algebra A generated by a subset of A in the subset language.</p>",
        "id": 188331128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581871417
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>_inst_1 : algebra k K := hka,\ns : K,\nhs : s ∈ S,\nL : set K := field.closure (set.range (algebra_map K) ∪ {s}),\nx : K,\nhSgen : x ∈ ↑(algebra.adjoin k ↑S)\n⊢ x ∈ ↑(algebra.adjoin ↥L ↑(S \\ {s}))\n</pre></div>\n\n\n<p>This is what I need to make the induction work. <code>algebra.adjoin</code> and <code>↑</code> is a Galois insertion between subsets and sub-R-algebras. My problem is that R changes from k to L.</p>",
        "id": 188339171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581886790
    },
    {
        "content": "<p>and all the proper mathematicians are looking at me and laughing because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo stretchy=\"false\">)</mo><mo>⊆</mo><mi>L</mi><mo stretchy=\"false\">(</mo><mi>S</mi><mo>−</mo><mo stretchy=\"false\">{</mo><mi>s</mi><mo stretchy=\"false\">}</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">k(S)\\subseteq L(S-\\{s\\})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">L</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathdefault\">s</span><span class=\"mclose\">}</span><span class=\"mclose\">)</span></span></span></span> is trivial.</p>",
        "id": 188339499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581887300
    },
    {
        "content": "<p><code>algebra.adjoin</code> as a set is just <code>ring.closure</code> of <code>k \\cup S</code> right? So it's easy if you write it like that.</p>",
        "id": 188339826,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581887882
    },
    {
        "content": "<p>That's probably even the definition of the set.</p>",
        "id": 188339871,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581887937
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"err\">⊢</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">to_set</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">≤</span>\n    <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"err\">∪</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">to_set</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">erase</span> <span class=\"n\">S</span> <span class=\"n\">s</span><span class=\"o\">))</span>\n</pre></div>\n\n\n<p>Looks wrong but there are two different <code>algebra_map</code>s involved; one from k and one from L.</p>",
        "id": 188340202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581888592
    },
    {
        "content": "<p>I'm still not there. If <code>(L : set K) [is_subfield L]</code> then I need that <code>L = range (algebra_map K)</code> with the obvious instance of <code>[algebra L K]</code></p>",
        "id": 188340528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581889182
    },
    {
        "content": "<p>Is <code>range_subtype_val</code> a theorem.</p>",
        "id": 188342651,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581893584
    },
    {
        "content": "<p>That's not it actually.</p>",
        "id": 188342656,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581893628
    },
    {
        "content": "<p>Yes it is</p>",
        "id": 188342698,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581893661
    },
    {
        "content": "<p>Oh nice. This is surprisingly messy!</p>",
        "id": 188342921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581894142
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>subtype.range_val : ∀ (s : set ?M_1), set.range subtype.val = s\n</pre></div>",
        "id": 188397227,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581962553
    }
]