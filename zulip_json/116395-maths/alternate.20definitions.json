[
    {
        "content": "<p>Dear <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> , thank you for taking the time to explain the issue!  I agree that not having definitional equivalence between the usual TFAE items is not important.  I guess that my point of view is that of a beginning user of Lean who has trouble converting between the various definitions and is often stuck with the implemented one, since I am not able to \"jump\" to another one.</p>\n<p>Maybe in a few days/weeks time, this will not be an issue for me, but one feature that I would like to have in Lean is the possibility of somehow displaying all these non-definitionally equivalent definitions and being able to choose whichever one I prefer at whichever moment I want.  I realize, as I am writing this, that likely this is already there, for the more advanced users.  I still struggle with this.</p>\n<p>In the specific case of the definition of the rational numbers, for instance, I suspect that it might be hard for me to convince Lean that <code>2/2</code> is a rational number.  Especially in the case in which such a \"rational number\" arises as the slope of some vector bundle.  (As I have never actually played with rational numbers in Lean, I am not sure that this would really be an issue, but I hope that I have conveyed my idea, rather than the specific example!)</p>",
        "id": 208657290,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598948271
    },
    {
        "content": "<p>You are wrong that it is hard to convince Lean that 2/2 is a rational number, and this is an important thing to learn. [more to come]</p>",
        "id": 208657617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598948482
    },
    {
        "content": "<p>The <em>definition</em> of a rational number is a coprime pair (n,d) with d&gt;0. So the \"canonical\" constructor of a rational number is something which is very difficult to use. However, the authors of data.rat.basic also wrote other constructors for rational numbers, including <code>rat.mk n d</code> which just takes two integers n and d and produces the rational number n/d, regardless of whether n and d are coprime etc.</p>",
        "id": 208657889,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598948657
    },
    {
        "content": "<p>The same is true for eliminators. The definition of <code>int</code> is \"either n, or -1-n, for n a natural\". This means that if you have an integer z and you want prove something about it and you know that you want to use induction, if you type <code>induction z</code> you'll get something horrible: you'll have to prove it for all integers of the form <code>of_nat n</code> and all integers of the form <code>neg_one_of_nat n</code> or whatever the constructor is called (I don't even know). I've seen students do this and it's a disaster because now you need to know the API for <code>of_nat</code> and for the other constructor whose name I've forgotten, and this is really only something which the developers of <code>int</code> need to know about. But again the developers have done their job -- you can apply <code>int.induction_on</code>, a custom induction principle designed for end users, and then all of a sudden you have to check P(0), to check P(z) implies P(z+1) for z&gt;=0, and to check P(z) implies P(z-1) for z&lt;=0. This is the induction principle which a mathematician wants. Because the definition of int/rat are \"exotic\", the inbuilt constructors/eliminators are bad for mathematicians. However the trick is to make better ones and encourage mathematicians to use them instead.</p>",
        "id": 208658234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598948920
    },
    {
        "content": "<p>Ok, maybe I just need to get over the fact that instead of learning different, equivalent definitions of a mathematical object, I will need to learn many different names of computer functions that represent the same mathematical concept.  I still find it hard, in general, to navigate and even find/know that these equivalents exist.  For instance, I learned that the submodule spanned by a set is, in Lean, the smallest submodule containing the set (a definition that I like, by the way!).  Yet, it was then hard for me to obtain that an element in the span of a singleton was a multiple of the generator.  After I have seen how to do it, I realize that it is not difficult, but I did spend quite a bit of time trying, before I finally gave up and asked!</p>\n<p>I would like to be able to feel more independent and not to have to ask questions whose answers, often, are \"ooh, <code>refl</code> clearly does not work, but <code>exact id</code> does!</p>\n<p>Your last sentence I think is key:</p>\n<p>\"However the trick is to make better ones and encourage mathematicians to use them instead.\"</p>\n<p>I would <em>really</em> like to use the better ones, but usually I am in the situation where:</p>\n<ol>\n<li>I have trouble finding out what the implemented definition is;</li>\n<li>I manage to find it and get stuck;</li>\n<li>I have no idea where to look for an alternative definition;</li>\n<li>I struggle to understand how to use this alternative definition.</li>\n</ol>\n<p>Normally, I hover between items 1 and 2.  I would like to at least reach 3 or 4 more reliably!</p>",
        "id": 208658716,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598949227
    },
    {
        "content": "<p>(Since tones are difficult to convey in text, I want to stress that I am finding this conversation highly enlightening and I am actually learning and having fun chatting about this!)</p>",
        "id": 208658810,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598949271
    },
    {
        "content": "<p>Aside: Let's move this to a different thread. <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> Could you please cut it about 6 posts up? (The first post by Kevin today is still relevant. Maybe it can be duplicated?) Thanks!</p>",
        "id": 208659141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598949506
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> To find out a definition, use <code>Ctrl-click</code>.</p>",
        "id": 208659299,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598949615
    },
    {
        "content": "<p>To find alternate defintions... I think we should get a better system for that.</p>",
        "id": 208659318,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598949633
    },
    {
        "content": "<p>But one thing that helps is autocomplete. It is a very powerful tool.</p>",
        "id": 208659329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598949654
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/alternate.20definitions/near/208659299\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> To find out a definition, use <code>Ctrl-click</code>.</p>\n</blockquote>\n<p>Thank you!  It is possible that I was told this already, but I was surprised by this again!</p>",
        "id": 208659350,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598949675
    },
    {
        "content": "<p>And the rigid naming scheme that Lean follows. It took me a while to get the hang of it, but it's really good.</p>",
        "id": 208659358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598949679
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/alternate.20definitions/near/208659329\">said</a>:</p>\n<blockquote>\n<p>But one thing that helps is autocomplete. It is a very powerful tool.</p>\n</blockquote>\n<p>I use it, but I know that I am still in my infancy of using this!</p>",
        "id": 208659398,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598949712
    },
    {
        "content": "<p>I don't see two topics in this thread</p>",
        "id": 208659465,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598949735
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/alternate.20definitions/near/208659358\">said</a>:</p>\n<blockquote>\n<p>And the rigid naming scheme that Lean follows. It took me a while to get the hang of it, but it's really good.</p>\n</blockquote>\n<p>Yes, Kevin suggested reading the naming convention and that helped a lot.</p>",
        "id": 208659469,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598949739
    },
    {
        "content": "<p>You have <code>x \\in ideal.span {y}</code>, and you want to do <em>something</em> with it. Well, that says something about \"<code>x</code> being a <em>mem</em> of the <code>span</code> of a <code>singleton</code>\", so we just try <code>mem_span_singleton</code> and see if it exists. If it exists, it will probably be (almost) what you want.</p>",
        "id": 208659498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598949765
    },
    {
        "content": "<p>Even if I have no idea what <code>finset.bind</code> is, if I see <code>x \\in finset.bind s foobar</code>, I just <code>rw finset.mem_bind</code>. Because someone wrote a decent API, this lemma exists, and it turns my goal into something that is comprehensible again.</p>",
        "id": 208659541,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598949827
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/alternate.20definitions/near/208659465\">said</a>:</p>\n<blockquote>\n<p>I don't see two topics in this thread</p>\n</blockquote>\n<p>Rob already split it.</p>",
        "id": 208659547,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598949835
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/alternate.20definitions/near/208659498\">said</a>:</p>\n<blockquote>\n<p>You have <code>x \\in ideal.span {y}</code>, and you want to do <em>something</em> with it. Well, that says something about \"<code>x</code> being a <em>mem</em> of the <code>span</code> of a <code>singleton</code>\", so we just try <code>mem_span_singleton</code> and see if it exists. If it exists, it will probably be (almost) what you want.</p>\n</blockquote>\n<p>Thank you for spelling out these implications: they really help me!</p>",
        "id": 208659592,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598949850
    },
    {
        "content": "<p>Damiano, one thing you can do is add your voice to <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/reformulate\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/reformulate</a> hoping some tactic writer will pity us.</p>",
        "id": 208659776,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598949988
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/alternate.20definitions/near/208659541\">said</a>:</p>\n<blockquote>\n<p>Even if I have no idea what <code>finset.bind</code> is, if I see <code>x \\in finset.bind s foobar</code>, I just <code>rw finset.mem_bind</code>. Because someone wrote a decent API, this lemma exists, and it turns my goal into something that is comprehensible again.</p>\n</blockquote>\n<p>While the previous example I understood, this one is still out of reach.  I will file this as \"when dealing with sets, insert <code>mem</code> and see how it autocompletes!</p>",
        "id": 208659779,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598949990
    },
    {
        "content": "<p>also, it is not uncommon for those lemmas to be marked <code>simp</code>, so one approach is to try <code>simp</code> and see if it makes progress (and if it does make progress and you want to see how, use <code>squeeze_simp</code> instead to see what lemma it applied, and then use ctrl-click to go to the lemma and look around there for other interesting things)</p>",
        "id": 208659789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598949996
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/alternate.20definitions/near/208659789\">said</a>:</p>\n<blockquote>\n<p>also, it is not uncommon for those lemmas to be marked <code>simp</code>, so one approach is to try <code>simp</code> and see if it makes progress (and if it does make progress and you want to see how, use <code>squeeze_simp</code> instead to see what lemma it applied, and then use ctrl-click to go to the lemma and look around there for other interesting things)</p>\n</blockquote>\n<p>Ok, thanks for the suggestion.  I view <code>simp</code> as a huge wave that washes over everything and, if I am lucky, I can take one further step after it washes away.  Although often I undo it...</p>",
        "id": 208659923,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598950090
    },
    {
        "content": "<p>Yes, it is quite often not the actual step you want to do, or it does too much, but it gives a lot of hints as it works</p>",
        "id": 208659966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598950126
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/alternate.20definitions/near/208659776\">said</a>:</p>\n<blockquote>\n<p>Damiano, one thing you can do is add your voice to <a href=\"#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/reformulate\">https://leanprover.zulipchat.com/#narrow/stream/239415-metaprogramming-.2F.20tactics/topic/reformulate</a> hoping some tactic writer will pity us.</p>\n</blockquote>\n<p>Thank you: I have subscribed!</p>",
        "id": 208659999,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598950150
    },
    {
        "content": "<p>You can use <code>squeeze_simp</code> and then remove stuff from the list if you want.</p>",
        "id": 208660005,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598950153
    },
    {
        "content": "<p>Roughly speaking, all sets are \"defined\" by their membership predicate. So if you see <code>foo A \\union bar A = univ</code> and you don't know what a <code>foo</code> is, try <code>ext x</code> to turn it into a membership question, <code>x \\in foo A \\union bar A &lt;-&gt;x \\in univ</code>, and then there will be a ton of simp lemmas that will trigger on seeing <code>x \\in &lt;some set&gt;</code> because that's how the simp lemmas are expressed</p>",
        "id": 208660115,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598950215
    },
    {
        "content": "<p>it will usually turn the statement into some first order logic thing that you can destructure using <code>use</code>, <code>cases</code>, <code>intro</code> and other such basic tactics</p>",
        "id": 208660233,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1598950302
    },
    {
        "content": "<p>These are all great suggestions: thank you all!</p>\n<p>I do feel like the people for whom the FAQ \"have you connected your computer to the plug?\" actually solves the problem...</p>",
        "id": 208660243,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1598950313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> You should have watched my first weeks in this chatroom...</p>",
        "id": 208660367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598950387
    }
]