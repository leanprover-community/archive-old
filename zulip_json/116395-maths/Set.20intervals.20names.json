[
    {
        "content": "<p>What do people think of renaming <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.interval\">docs#set.interval</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.interval_oc\">docs#set.interval_oc</a> to <code>set.uIcc</code> and <code>set.uIco</code>, with the <code>u</code> standing for \"unordered\"?  This would:</p>\n<ul>\n<li>fix the unanimously bad name <code>interval_oc</code></li>\n<li>make <code>set.interval</code> look closer to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.Icc\">docs#set.Icc</a> than it currently is</li>\n<li>shorten the names</li>\n<li>match the naming convention I introduced (a while back!) with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.cIcc\">docs#set.cIcc</a></li>\n<li>make clear that we don't have the <code>Ioc</code> and <code>Ioo</code> versions (which would then be called <code>uIoc</code>, <code>uIoo</code></li>\n<li>avoid confusion with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/interval\">docs#interval</a></li>\n</ul>",
        "id": 318248455,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672231304
    },
    {
        "content": "<p>The one downside I see so far is that <code>uIcc</code> is a more obscure name than <code>interval</code>, but</p>\n<ul>\n<li><code>interval</code> could (and indeed does) refer to many similar concepts</li>\n<li>the <code>Ixx</code> naming convention is already well-implemented.</li>\n</ul>",
        "id": 318248745,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672231396
    },
    {
        "content": "<p>This is relevant to the mathlib4 port: <a href=\"#narrow/stream/287929-mathlib4/topic/Naming.20clarification/near/315915143\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/Naming.20clarification/near/315915143</a> and <a href=\"#narrow/stream/287929-mathlib4/topic/.60interval_oc.60.20naming.20scheme\">https://leanprover.zulipchat.com/#narrow/stream/287929-mathlib4/topic/.60interval_oc.60.20naming.20scheme</a></p>",
        "id": 318248965,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672231464
    },
    {
        "content": "<p>What's wrong with just <code>set.Icc</code> etc?</p>",
        "id": 318254199,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672233596
    },
    {
        "content": "<p><code>set.interval</code> isn't <code>set.Icc</code></p>",
        "id": 318255086,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672233971
    },
    {
        "content": "<p>It's [min a b, max a b], yes?</p>",
        "id": 318255144,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1672233997
    },
    {
        "content": "<p>Why?</p>",
        "id": 318255426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672234098
    },
    {
        "content": "<p>Maybe that's the wrong question. Maybe the question is why what we have is called an interval at all? Is this standard terminology?</p>",
        "id": 318255551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672234158
    },
    {
        "content": "<p>I think Yael's convention sounds great, an incomprehensible name for an incomprehensible construction sounds perfect.</p>",
        "id": 318255808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672234258
    },
    {
        "content": "<p>I'd also vote for changing the docstring of set.interval_oc to something which actually describes the object being defined</p>",
        "id": 318256035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672234359
    },
    {
        "content": "<p>I think \"incomprehensible\" is a bit too far but in general I agree it looks like a good change.</p>",
        "id": 318256928,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672234692
    },
    {
        "content": "<p>So you're happy that {2} and {1,2,3} are in the interval between {1,2} and {2,3}, given the description \"interval a b is the set of elements lying between a and b, with a and b included\"?</p>",
        "id": 318257460,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672234898
    },
    {
        "content": "<p>Surely \"the set of elements lying between a and b\" is {x : a&lt;=x&lt;=b}?</p>",
        "id": 318257625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672234960
    },
    {
        "content": "<p>I mean this is just too much generality gone awry</p>",
        "id": 318257676,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672234981
    },
    {
        "content": "<p>It's clearly a sensible construction in the case of, say, the real numbers</p>",
        "id": 318257717,
        "sender_full_name": "Reid Barton",
        "timestamp": 1672234998
    },
    {
        "content": "<p>Anyway, to answer the question I am definitely for the change :-)</p>",
        "id": 318257750,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672235013
    },
    {
        "content": "<p>Oh I see, the point is that it allows us to talk about the interval from 10 to 1. It could still have been the union of [a,b] and [b,a] but whatever.</p>",
        "id": 318257944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672235094
    },
    {
        "content": "<p>For linear orders these agree and you can argue that everything else is a junk value</p>",
        "id": 318258114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1672235159
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Set.20intervals.20names/near/318257676\">said</a>:</p>\n<blockquote>\n<p>I mean this is just too much generality gone awry</p>\n</blockquote>\n<p>Well in fact I very recently generalised <code>set.interval</code> to lattices because I need this generality for a combinatorial inequality <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> but it has nothing to do with the current discussion.</p>",
        "id": 318267671,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672238392
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Set.20intervals.20names/near/318257460\">said</a>:</p>\n<blockquote>\n<p>So you're happy that {2} and {1,2,3} are in the interval between {1,2} and {2,3}, given the description \"interval a b is the set of elements lying between a and b, with a and b included\"?</p>\n</blockquote>\n<p>Even from the (order) lattice-theoretic point of view I share this concern. The name <em>interval</em> for this construct is misleading. It is more like a “hull” (actually being the sublattice generated by those two elements).</p>",
        "id": 318292258,
        "sender_full_name": "Pedro Sánchez Terraf",
        "timestamp": 1672246340
    },
    {
        "content": "<p>The world \\ {me} only cares about the linear order case, so this is a deliberate lie from the docstring.</p>",
        "id": 318339444,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1672270493
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/18104\">#18104</a> (it will probably be a while before it builds)</p>",
        "id": 320130243,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673222006
    },
    {
        "content": "<p>The build is broken for <a href=\"https://github.com/leanprover-community/mathlib/pull/18104\">#18104</a> (looks like a search-and-replace over the library caught something it shouldn't).</p>",
        "id": 320167481,
        "sender_full_name": "David Loeffler",
        "timestamp": 1673251904
    },
    {
        "content": "<p>Incidentally, this change will break basically any pre-existing code that uses definite integrals (e.g. my Riemann zeta function project), all for a purely aesthetic gain. Whatever happened to \"if it ain't broke don't fix it\"?</p>",
        "id": 320168108,
        "sender_full_name": "David Loeffler",
        "timestamp": 1673252143
    },
    {
        "content": "<p>My thought is that it shouldn't break so much because we have notation for it. Are you really not using the <code>[a, b]</code> notation?</p>",
        "id": 320169283,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673252606
    },
    {
        "content": "<p>You are also change a bunch of lemma names, right?</p>",
        "id": 320169441,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673252651
    },
    {
        "content": "<p>Yes, that is unavoidable if we want to keep consistency <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 320169525,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673252690
    },
    {
        "content": "<p>Sure, but it means that using the notation isn't going to avoid breakage.</p>",
        "id": 320169568,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673252713
    },
    {
        "content": "<p>I'm really looking forward to using <code>alias</code> + <code>deprecated</code> for these kind of situations, once we've moved to Lean 4.</p>",
        "id": 320169645,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1673252757
    },
    {
        "content": "<p>Most of the existing code around interval integrals only uses the notation, thankfully.</p>",
        "id": 320169817,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673252805
    },
    {
        "content": "<p>But yeah whatever is not in mathlib is hardly ever considered when mathlib moves on, which is why if you want to reduce your maintenance burden you should PR your code to mathlib.</p>",
        "id": 320170099,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673252906
    },
    {
        "content": "<p>There was a thread recently about differences between mathlib and one of its rivals (Coq?), in which some people tried to argue against the claim that mathlib had a casual approach to backward-compatibility issues. I think this thread here demonstrates that casual attitude rather neatly.</p>",
        "id": 320171638,
        "sender_full_name": "David Loeffler",
        "timestamp": 1673253584
    },
    {
        "content": "<p>I'm not sure how one would argue mathlib respects backwards compatibility! It definitely doesn't of course, most people here seem to consider the fact we readily revise previous work that isn't sufficient for some reason as a good thing. Maybe they tried to argue it doesn't matter for some reason (all dependents fix a version)?<br>\nThere are definitely a lot more things we can do to at least help people switch mathlib versions more easily (<a href=\"https://mathlib-changelog.org/\">https://mathlib-changelog.org/</a> is a good start), but currently adjusting mathlib induced breakage is still quite manual process.</p>",
        "id": 320177597,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1673255787
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"481963\">David Loeffler</span> <a href=\"#narrow/stream/116395-maths/topic/Set.20intervals.20names/near/320171638\">said</a>:</p>\n<blockquote>\n<p>some people tried to argue against the claim that mathlib had a casual approach to backward-compatibility issues.</p>\n</blockquote>\n<p>From my perspective, it's not that our approach is casual; it's that as a community, we have made a deliberate choice that backwards compatibility (in a software sense) is a non-goal.</p>\n<p>I think we still try to remain <em>mathematically</em> backwards-compatible; a mathematical idea usually doesn't disappear from mathlib entirely.</p>",
        "id": 320178879,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673256215
    },
    {
        "content": "<p>In particular, name changes are not backward-compatible, but in a trivial way. Once you've replaced the modified names, you're guaranteed that your work will still compile.</p>",
        "id": 320187065,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673258825
    },
    {
        "content": "<p>Well, unless the statement changes too. Your comments amounts to \"changes are incompatible in name only, except when they're not\"</p>",
        "id": 320200871,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673263260
    },
    {
        "content": "<p>What I mean is that there's no work trying to fit new definitions.</p>",
        "id": 320200980,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1673263303
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Set.20intervals.20names/near/318248455\">said</a>:</p>\n<blockquote>\n<p>What do people think of renaming <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.interval\">docs#set.interval</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.interval_oc\">docs#set.interval_oc</a> to <code>set.uIcc</code> and <code>set.uIco</code>, with the <code>u</code> standing for \"unordered\"?</p>\n</blockquote>\n<p>This thread took multiple tangents above, and I think to some extent the question of naming got lost. <a href=\"https://github.com/leanprover-community/mathlib/pull/18104\">#18104</a>, which performs this rename, is now passing CI. Were people generally happy with the new names?</p>",
        "id": 320823460,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673483302
    },
    {
        "content": "<p>If there has to be a new name, then this seems a good choice.</p>",
        "id": 320884408,
        "sender_full_name": "David Loeffler",
        "timestamp": 1673513935
    },
    {
        "content": "<p>Pinging the people who approved/contributed the old names <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> and <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> (<code>interval</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/1949\">#1949</a>), <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> (<code>interval_oc</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/7864\">#7864</a>); are you happy with these new names?</p>",
        "id": 320919882,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673524809
    },
    {
        "content": "<p>Yes, I think the new names are better.</p>",
        "id": 320919998,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1673524852
    },
    {
        "content": "<p>Yes, I already wrote somewhere that I'm ok with the renaming.</p>",
        "id": 320967532,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1673537662
    },
    {
        "content": "<p><img alt=\":merge:\" class=\"emoji\" src=\"https://zulip-avatars.s3.amazonaws.com/3121/emoji/images/18527.png\" title=\"merge\"></p>",
        "id": 320985609,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673542415
    }
]