[
    {
        "content": "<p>I have a theorem about <code>min</code>s for an arbitrary linear order <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span>. I'd like to get the dual theorems about <code>max</code> by applying the first theorem to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>M</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">M^{op}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">o</span><span class=\"mord mathdefault mtight\">p</span></span></span></span></span></span></span></span></span></span></span></span> and then reinterpreting them in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10903em;\">M</span></span></span></span>. Is there any particular machinery to make this easier or should I just do it?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finset</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">class</span> <span class=\"n\">DLO</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dense</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">without_top</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">without_bot</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">DLO</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">DLO</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">inhabited</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">pfun</span>\n\n<span class=\"kn\">example</span>\n\n<span class=\"c1\">-- given a finset in a DLO, produce an element below or above everything</span>\n\n<span class=\"n\">def</span> <span class=\"n\">min_of_finset&#39;</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X_nonempty</span> <span class=\"o\">:</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">≤</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">exists_min</span> <span class=\"n\">X</span> <span class=\"n\">id</span> <span class=\"n\">X_nonempty</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lb_of_finset</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"err\">∈</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">l</span> <span class=\"bp\">&lt;</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"n\">by_cases</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n<span class=\"n\">swap</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>   <span class=\"n\">use</span> <span class=\"n\">arbitrary</span> <span class=\"n\">M</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">intro</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">push_neg</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">exfalso</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">},</span>\n<span class=\"c1\">-- maybe using have and contradiction is mathier in the above</span>\n<span class=\"k\">have</span> <span class=\"n\">m</span> <span class=\"o\">:=</span> <span class=\"n\">min_of_finset&#39;</span> <span class=\"bp\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">hm</span> <span class=\"k\">with</span> <span class=\"n\">m_in_X</span> <span class=\"n\">hm</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">DLO</span><span class=\"bp\">.</span><span class=\"n\">without_bot</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"n\">key</span> <span class=\"k\">with</span> <span class=\"n\">l</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n<span class=\"n\">use</span> <span class=\"n\">l</span><span class=\"o\">,</span>\n<span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">lt_of_lt_of_le</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">hm</span><span class=\"o\">,</span> <span class=\"n\">assumption</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 196806100,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588873494
    },
    {
        "content": "<p>Hmm I guess the answer is going to be that the machinery is in the <code>category_theory</code> library, so maybe I'll just do it \"by hand\" for now</p>",
        "id": 196806358,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588873618
    },
    {
        "content": "<p>You can use <code>order_dual</code></p>",
        "id": 196806396,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588873642
    },
    {
        "content": "<p>The proof of the dual of lb_of_finset should be <code>@lb_of_finset (order_dual M) _ _</code>. You have to put the right <code>DLO</code> instance on <code>order_dual M</code> for this to work. Put an instance for the recerse order on it.</p>",
        "id": 196806789,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588873817
    },
    {
        "content": "<p>There should already be a <code>linear_order</code> instance.</p>",
        "id": 196806846,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1588873854
    },
    {
        "content": "<p>hmm I don't know how to break up <code>DLO</code> so that I can give the <code>linear_order</code> and <code>without_*</code> instance separately</p>",
        "id": 196807079,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588873979
    },
    {
        "content": "<p>In other words, I don't understand what the constructor is for typeclass that's made via <code>extends</code><br>\nso probably I can answer this by reading TPiL</p>",
        "id": 196807178,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588874037
    },
    {
        "content": "<p>BTW, we already have <code>class no_top_order</code></p>",
        "id": 196807936,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588874356
    },
    {
        "content": "<p>Moreover, we have classes <code>no_top_order</code>, <code>no_bot_order</code> and <code>densely_ordered</code></p>",
        "id": 196808127,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588874413
    },
    {
        "content": "<p>So if you're writing for <code>mathlib</code>, then you can use <code>[linear_order α] [no_bot_order α] [densely_ordered α]</code></p>",
        "id": 196808292,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588874481
    },
    {
        "content": "<p>See also <code>directed.finset_le</code> and <code>finset.exists_le</code> in <code>algebra/big_operators</code>.</p>",
        "id": 196808437,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588874539
    },
    {
        "content": "<p>So, for <code>finset.exists_lt</code> you just need <code>[nonempty α] [directed_order α] [no_bot_order α]</code></p>",
        "id": 196808558,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588874587
    },
    {
        "content": "<p>Note that we don't have a dual to <code>directed_order</code></p>",
        "id": 196808749,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588874666
    },
    {
        "content": "<p>And we don't have any good instance for <code>directed_order</code>. You can easily add <code>semilattice_inf.directed_order</code>.</p>",
        "id": 196808841,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1588874713
    },
    {
        "content": "<p>is there a way to bundle <code>linear_order</code>, <code>no_top_order</code>, <code> no_bot_order</code> and <code>densely_ordered</code> into one class?</p>",
        "id": 196810998,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588875726
    },
    {
        "content": "<p>I can do this but then I'm carrying around new names? I really want to chain the extends</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">DLO&#39;</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">decidable_linear_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">dense</span> <span class=\"o\">:</span> <span class=\"n\">densely_ordered</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">without_top</span> <span class=\"o\">:</span> <span class=\"n\">no_top_order</span> <span class=\"n\">α</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">without_bot</span> <span class=\"o\">:</span> <span class=\"n\">no_bot_order</span> <span class=\"n\">α</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 196811220,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1588875849
    },
    {
        "content": "<p>I had this issue a while ago (working on the same kata!) <a href=\"#narrow/stream/113489-new-members/topic/problem.20with.20old_structure_cmd/near/194898271\" title=\"#narrow/stream/113489-new-members/topic/problem.20with.20old_structure_cmd/near/194898271\">(link)</a>. Mario recommended the solution you describe. My understanding is that chaining all the extends is problematic because <code>densely_ordered</code> is parametrised by the order. You could at least combine <code>no_top_order</code>, <code>no_bot_order</code> and <code>densely_ordered</code> into one class?</p>\n<p>In the end I decided against defining a new class, and just did the back-and-forth argument with assumptions <code>decidable_linear_order</code>, <code>no_top_order</code>, ... for both types.</p>",
        "id": 196821057,
        "sender_full_name": "David Wärn",
        "timestamp": 1588880534
    },
    {
        "content": "<p>Btw, I think you might want <code>finset.max'</code> / <code>finset.min'</code>?</p>",
        "id": 196821147,
        "sender_full_name": "David Wärn",
        "timestamp": 1588880590
    }
]