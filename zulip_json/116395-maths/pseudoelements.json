[
    {
        "content": "<p>It seems to me that pseudoelements of an object <code>X</code> in an abelian category form a group. Is this true? Is it in mathlib? Can we endow homsets with an <code>add_monoid_hom_class</code> instance?</p>\n<p>Is the following provable?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.abelian.pseudoelements</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span> <span class=\"n\">category_theory.limits</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">pseudoelement</span>\n\n <span class=\"kd\">lemma</span> <span class=\"n\">pseudoelement.biprod_ext</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"bp\">↥</span><span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">⊞</span> <span class=\"n\">Y</span><span class=\"o\">))</span>\n   <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">biprod.fst</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⊞</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">biprod.fst</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⊞</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">)</span>\n   <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">biprod.snd</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⊞</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">biprod.snd</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">⊞</span> <span class=\"n\">Y</span> <span class=\"bp\">⟶</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"n\">q</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n   <span class=\"n\">p</span> <span class=\"bp\">=</span> <span class=\"n\">q</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 278025347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649252727
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260921\">@Markus Himmel</span> I guess you have thought about such issues. I read a comment that doing pullbacks is hairy...</p>",
        "id": 278025788,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649252929
    },
    {
        "content": "<p>The proper way to do what I'm guessing you want is to prove the Freyd embedding theorem.</p>",
        "id": 278025931,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649252999
    },
    {
        "content": "<p>But maybe there is a more direct way with pseudoelements.... I don't know.</p>",
        "id": 278026043,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649253036
    },
    {
        "content": "<p>You can often use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.abelian.pseudoelement.sub_of_eq_image\">docs#category_theory.abelian.pseudoelement.sub_of_eq_image</a> to \"mimic\" the difference of two pseudoelements.</p>",
        "id": 278026127,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649253094
    },
    {
        "content": "<p>It was enough to prove the snake lemma, where on paper one would take the difference (at least in <code>R-mod</code>).</p>",
        "id": 278026274,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1649253140
    },
    {
        "content": "<p>The equivalence relation on the homs with codomain <code>P</code> is not compatible with addition-after-taking-pullbacks, so you cannot make the pseudoelements into an abelian group.</p>\n<p>One way to fix this is by not quotienting out the equivalence relation, but then you have to do all the bookkeeping manually. This technique is described in <a href=\"https://math.berkeley.edu/~gbergman/papers/unpub/elem-chase.pdf\">https://math.berkeley.edu/~gbergman/papers/unpub/elem-chase.pdf</a></p>",
        "id": 278026815,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1649253370
    },
    {
        "content": "<p>Hmm, I will try to work out what goes wrong, because I don't see it yet.</p>",
        "id": 278028204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649253926
    },
    {
        "content": "<p>The relation involves some epi assumptions. Does that throw a wrench in things?</p>",
        "id": 278028576,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649254082
    },
    {
        "content": "<p>I guess the problem is with negation? Becuase <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>⊕</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mspace></mspace><mspace width=\"0.1111em\"/><mo lspace=\"0em\" rspace=\"0.17em\"></mo><mtext> ⁣</mtext><mo lspace=\"0em\" rspace=\"0em\">:</mo><mspace width=\"0.3333em\"/><mi>X</mi><mo>⊕</mo><mi>X</mi><mo>→</mo><mi>Y</mi></mrow><annotation encoding=\"application/x-tex\">f \\oplus (-f) \\colon X \\oplus X \\to Y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace nobreak\"></span><span class=\"mspace\" style=\"margin-right:0.1111em;\"></span><span class=\"mpunct\"></span><span class=\"mspace\" style=\"margin-right:-0.1667em;\"></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mrel\">:</span></span><span class=\"mspace\" style=\"margin-right:0.3333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span></span></span></span> is not equivalent to the zero map?</p>",
        "id": 278030019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649254687
    },
    {
        "content": "<p>I haven't written lean code yet, but getting a monoid seems to be ok</p>",
        "id": 278030080,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649254719
    },
    {
        "content": "<p>What about associativity of addition?</p>",
        "id": 278030133,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649254745
    },
    {
        "content": "<p>I think that should be fine, since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>X</mi><mo>⊕</mo><mi>Y</mi><mo stretchy=\"false\">)</mo><mo>⊕</mo><mi>Z</mi><mo>≅</mo><mi>X</mi><mo>⊕</mo><mo stretchy=\"false\">(</mo><mi>Y</mi><mo>⊕</mo><mi>Z</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(X \\oplus Y) \\oplus Z \\cong X \\oplus (Y \\oplus Z)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≅</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">Z</span><span class=\"mclose\">)</span></span></span></span>. The problem is axioms that reduce arity. Afaict.</p>",
        "id": 278030290,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649254822
    },
    {
        "content": "<p>Yeah that's right.</p>",
        "id": 278030456,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649254901
    },
    {
        "content": "<p>You would take that isomorphism as your epi</p>",
        "id": 278030480,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1649254913
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>⊕</mo><mo stretchy=\"false\">(</mo><mo>−</mo><mi>f</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">f \\oplus (-f)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span></span></span></span> cannot be equivalent to the zero map unless <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">f = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span> since the only things that are equivalent to zero maps are zero maps. See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.abelian.pseudoelement.pseudo_zero_aux\">docs#category_theory.abelian.pseudoelement.pseudo_zero_aux</a></p>",
        "id": 278035308,
        "sender_full_name": "Markus Himmel",
        "timestamp": 1649256790
    },
    {
        "content": "<p>Aah so maybe it's a monoid :-)</p>",
        "id": 278039491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1649258281
    },
    {
        "content": "<p>So here's a lemma that I've been trying to prove using pseudoelements, but I failed so far:<br>\n<a href=\"https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/derived/les.lean#L128\">https://github.com/leanprover-community/lean-liquid/blob/master/src/for_mathlib/derived/les.lean#L128</a></p>\n<p>I would be interested in seeing a proof that works. Because I think that a proof without pseudoelements will quickly be ugly.</p>",
        "id": 278122957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649313800
    }
]