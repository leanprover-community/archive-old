[
    {
        "content": "<p>I'm starting this topic so people have a place to ask questions of the form \"has someone already coded X, or something close to it?\" All such questions are welcome even if you could probably find the answer on your own fairly quickly..</p>",
        "id": 183735833,
        "sender_full_name": "Juho Kupiainen",
        "timestamp": 1576663613
    },
    {
        "content": "<p>Is there code for <strong>symmetric algebras</strong> <a href=\"https://en.wikipedia.org/wiki/Symmetric_algebra\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Symmetric_algebra\">https://en.wikipedia.org/wiki/Symmetric_algebra</a></p>",
        "id": 183736057,
        "sender_full_name": "Juho Kupiainen",
        "timestamp": 1576663782
    },
    {
        "content": "<p>We have tensor products, but nothing beyond that</p>",
        "id": 183736404,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576664112
    },
    {
        "content": "<p>Multilinear algebra is pretty high on the TODO list, but not done yet. We'll almost need the alternating and anti-symmetric parts of the story.</p>",
        "id": 183737888,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576665279
    },
    {
        "content": "<p>There's the question of whether we're allowed to divide by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">k!</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">!</span></span></span></span> as well (the theory can be simplified in characteristic zero).</p>",
        "id": 183748363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576674741
    },
    {
        "content": "<p>I guess the mathlib answer is pretty clear, we should follow Bourbaki and never divide anything.</p>",
        "id": 183748403,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576674782
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 183774555,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1576692445
    },
    {
        "content": "<p>I need the function changing the value of a function at a given point. Something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- `replace_at f i₀ x` is the function equal to `f`, except at `i₀` where it is equal to `x`. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">replace_at</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i₀</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">if</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">i₀</span> <span class=\"k\">then</span> <span class=\"n\">x</span> <span class=\"k\">else</span> <span class=\"n\">f</span> <span class=\"n\">i</span>\n</pre></div>\n\n\n<p>Is this already in mathlib?</p>",
        "id": 183823455,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1576741929
    },
    {
        "content": "<p>We really need to be able to write</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">kitchen_sink</span>\n\n<span class=\"c\">/-</span><span class=\"cm\">- `replace_at f i₀ x` is the function equal to `f`, except at `i₀` where it is equal to `x`. -/</span>\n<span class=\"n\">def</span> <span class=\"n\">replace_at</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i₀</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">library_search</span>\n</pre></div>\n\n\n<p>in some scratch file.</p>",
        "id": 183824144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576742834
    },
    {
        "content": "<p>Don't these <code>mk_all.sh</code> scripts allow us to do that?</p>",
        "id": 183824149,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576742852
    },
    {
        "content": "<p>Except that here <code>library_search</code> will not help, because it doesn't know what I want to do. For instance, <code>suggest</code> could give me the answer <code>f i</code>. Or  <code>x</code>. Or <code>f i₀</code>. This is really a question where automated tools will not help you, and where you need human beings.</p>",
        "id": 183824343,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1576743066
    },
    {
        "content": "<p>Well, a list of all existing terms of that type would still be helpful, right?</p>",
        "id": 183825723,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576744640
    },
    {
        "content": "<p>Of that exact type (i.e., using the same parameters and not a subset of them), up to permutation, yes this would definitely be useful.</p>",
        "id": 183826188,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1576745145
    },
    {
        "content": "<p>function.update?</p>",
        "id": 183826243,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1576745182
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 183826896,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1576745900
    },
    {
        "content": "<p>Do you know the name of the following lemma in the library?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">lt_of_lt_succ_ne</span> <span class=\"o\">{</span><span class=\"n\">j</span> <span class=\"n\">n</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₂</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">j</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span>\n</pre></div>\n\n\n<p>It is called <code>array.push_back_idx</code>. Thanks <code>library_search</code>!</p>",
        "id": 183827006,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1576746028
    },
    {
        "content": "<p>I believe there is something like that in <code>data.function</code>, I think it is called <code>function.write</code></p>",
        "id": 183827022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576746062
    },
    {
        "content": "<p>oh, I see Marc already found it</p>",
        "id": 183827059,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1576746100
    },
    {
        "content": "<p>This topic should probably actually be a stream.</p>",
        "id": 183866525,
        "sender_full_name": "Juho Kupiainen",
        "timestamp": 1576776487
    },
    {
        "content": "<p>Is there the <strong>category Set</strong> defined somewhere? And set isomorphisms.</p>",
        "id": 183866598,
        "sender_full_name": "Juho Kupiainen",
        "timestamp": 1576776556
    },
    {
        "content": "<p>This category is overrated.</p>",
        "id": 183866703,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576776615
    },
    {
        "content": "<p>The relevant one is <strong>Type</strong>.</p>",
        "id": 183866736,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1576776644
    },
    {
        "content": "<p>I really don't know anything about category theory. I'm just thinking there should be a definition of bijection somewhere..</p>",
        "id": 183866792,
        "sender_full_name": "Juho Kupiainen",
        "timestamp": 1576776684
    },
    {
        "content": "<p><code>equiv</code></p>",
        "id": 183866807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576776691
    },
    {
        "content": "<p>is the type of bijections of types.</p>",
        "id": 183866822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576776704
    },
    {
        "content": "<p>and if you don't know the difference between a set and a type (which is fine, e.g. most mathematicians don't) then what Patrick is saying is that in type theory, we call sets types, and the category you're looking for is indeed called <code>Type</code></p>",
        "id": 183866930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576776760
    },
    {
        "content": "<p>To give a term of type <code>equiv X Y</code> you have to give functions X-&gt;Y and Y-&gt;X, and proofs that both composites are the identity function.</p>",
        "id": 183866963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576776795
    },
    {
        "content": "<p>There is also <code>bijective f</code>, a predicate for a function between types to be bijective, but in practice <code>equiv</code> works better.</p>",
        "id": 183867155,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576776950
    },
    {
        "content": "<p>There are maps in both directions so you can move from one to the other</p>",
        "id": 183867235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576776990
    },
    {
        "content": "<p>there should be an equiv of them ;-)</p>",
        "id": 183867291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576777034
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">function</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"bp\">//</span> <span class=\"n\">bijective</span> <span class=\"n\">f</span><span class=\"o\">}</span> <span class=\"err\">≃</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"err\">≃</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">of_bijective</span> <span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">.</span><span class=\"n\">bijective</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">subtype</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">e</span><span class=\"o\">,</span> <span class=\"n\">equiv</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">)</span>  <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>There's the two definitions of bijection, and a proof that they biject with each other ;-)</p>",
        "id": 183868202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576777612
    },
    {
        "content": "<p>I guess you could now apply the theorem to itself and deduce that they biject with each other in the other way too.</p>",
        "id": 183873808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1576781651
    },
    {
        "content": "<p>And then there is <code>iso</code> for the category <code>Type</code>. That's a third option.</p>",
        "id": 183874089,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576781858
    }
]