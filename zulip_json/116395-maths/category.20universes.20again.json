[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> While updating lean-homotopy-theory to current mathlib I (or actually lean) noticed that the current formula for the universe level of functors is wrong. Worse, it doesn't really seem to be possible to fix it.</p>",
        "id": 175012654,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567715991
    },
    {
        "content": "<p>The current formula is:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">functor</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"n\">u₁</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"c1\">-- ...</span>\n</pre></div>\n\n\n<p>But this isn't right, because the homs of C and D live in <code>Sort v₁</code> and <code>Sort v₂</code> respectively not <code>Type v₁</code> and <code>Type v₂</code>.<br>\nThe correct formula would be</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">functor</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₁</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₁</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u₂</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">v₂</span><span class=\"o\">}</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">Sort</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">v₁</span> <span class=\"n\">v₂</span> <span class=\"o\">(</span><span class=\"n\">u₁</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u₂</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"c1\">-- ...</span>\n</pre></div>",
        "id": 175012893,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567716139
    },
    {
        "content": "<p>For example, suppose C and D are both <code>small_category.{w}</code>. Then <code>v₁ = v₂ = w+1</code> and <code>u₁ = u₂ = w</code>. The type of functors from C to D should again be a <code>Type w</code>. But according to the current formula it is a <code>Type (w+1)</code>.<br>\nThis caused this definition to fail: <a href=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/category_theory/bundled.lean#L27\" target=\"_blank\" title=\"https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/category_theory/bundled.lean#L27\">https://github.com/rwbarton/lean-homotopy-theory/blob/lean-3.4.2/src/category_theory/bundled.lean#L27</a><br>\n(I know <code>Cat</code> is in mathlib now, but I'd rather first get the current version of my library to build with current mathlib before taking advantage of new mathlib features.)</p>",
        "id": 175013083,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567716305
    },
    {
        "content": "<p>However, if we use the corrected formula, then we have a problem in <code>functor_category</code>: we want to make functors the objects of a category but they form a <code>Sort _</code>, not a <code>Type _</code>.</p>",
        "id": 175013182,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567716377
    },
    {
        "content": "<p>So making objects be a <code>Type u</code> and morphisms a <code>Sort v</code> isn't compatible with assigning the correct universe level to functors, as far as I can see.</p>",
        "id": 175013241,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567716446
    },
    {
        "content": "<p>I think there was a time when the objects of a category were a Sort as well, bu Scott changed it, and I think it might have just been because he couldn't think of a reason why anyone would do that.</p>\n<p>I think Sort valued homs might not be as useful as anticipated at first because they don't really work with limits as they are not small categories according to Lean.</p>",
        "id": 175014491,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1567717281
    },
    {
        "content": "<p>Oh dear.</p>",
        "id": 175019648,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567721632
    },
    {
        "content": "<p>I think the solution is going to be to abandon again Sort-valued morphisms, which, as Chris says, have not ended up being usable.</p>",
        "id": 175019724,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567721676
    },
    {
        "content": "<p>So back to the original Type for both objects and morphisms then?</p>",
        "id": 175020557,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567722443
    },
    {
        "content": "<p>Yes.</p>",
        "id": 175022103,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567724032
    },
    {
        "content": "<p>Sorry to cause so much needless trouble here.</p>",
        "id": 175022107,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567724039
    },
    {
        "content": "<p>Maybe it's pointless, but am I right in thinking that we could also just allow <code>Sort 0</code> objects again and everything would be fine? (And perhaps Reid has given the first example of someone wanting to construct a category with <code>Sort 0</code> object?)</p>\n<p>It's kinda nice having functors to <code>Prop</code></p>",
        "id": 175031608,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567738425
    },
    {
        "content": "<p>I agree that having functors to Prop is really nice, and the reason I started generalising to Sort was to allow this.</p>",
        "id": 175033131,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567741049
    },
    {
        "content": "<p>My student Yiming did a bunch of work trying to do transport-across-isomorphisms automatically, and it relied heavily on the possibility of Prop valued functors. Not having them would not make her work impossible, but there would be a lot of extra <code>plift</code>s, which hopefully would all be invisible to the user, but ...</p>",
        "id": 175033193,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567741128
    },
    {
        "content": "<p>In case it's useful to any one, <a href=\"https://github.com/leanprover-community/mathlib/pull/824\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/824\">here is the PR that generalised everything to Sort</a>, and <a href=\"https://github.com/leanprover-community/mathlib/pull/1122\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1122\">here is the PR that partially reverted this, forcing objects into Type</a>.</p>",
        "id": 175033399,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567741480
    },
    {
        "content": "<p>I am very tempted to hope that Keeley's suggestion is viable (i.e. that PR <a href=\"https://github.com/leanprover-community/mathlib/issues/1122\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1122\">#1122</a> was ill-considered, and should be reverted).</p>",
        "id": 175033935,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567742365
    },
    {
        "content": "<p>Back when everything was in <code>Sort</code>, we had</p>\n<div class=\"codehilite\"><pre><span></span>structure functor (C : Sort u₁) [category.{v₁} C] (D : Sort u₂) [category.{v₂} D] : Sort (max u₁ v₁ u₂ v₂ 1) := ...\n</pre></div>\n\n\n<p>and I think this was also wrong according to Reid's analysis, because of that <code>1</code> appearing in the <code>max</code>.</p>",
        "id": 175034364,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567743134
    },
    {
        "content": "<p>The discussion explaining this <code>1</code> in the max in the original PR was at <a href=\"https://github.com/leanprover-community/mathlib/pull/824#discussion_r270540901\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/824#discussion_r270540901\">https://github.com/leanprover-community/mathlib/pull/824#discussion_r270540901</a></p>",
        "id": 175034378,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567743174
    },
    {
        "content": "<p>where while it's wrong, we decided it perhaps wasn't harmful.</p>",
        "id": 175034385,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567743186
    },
    {
        "content": "<p>If you don't put the 1 in the projections won't work</p>",
        "id": 175034646,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1567743660
    },
    {
        "content": "<p>Yes, I don't think there's any way of getting around having the <code>1</code>.</p>",
        "id": 175034698,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567743759
    },
    {
        "content": "<p>The question is --- do we switch to objects and homs in Type (i.e. pre <a href=\"https://github.com/leanprover-community/mathlib/issues/824\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/824\">#824</a>), or switch to objects and homs in Sort (ie. between <a href=\"https://github.com/leanprover-community/mathlib/issues/824\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/824\">#824</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/1122\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1122\">#1122</a>).</p>",
        "id": 175034711,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567743801
    },
    {
        "content": "<p>I've just made a branch which moves everything back to Type.</p>",
        "id": 175034716,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567743828
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/compare/category_no_sorts\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/compare/category_no_sorts\"><code>category_no_sorts</code></a></p>",
        "id": 175034777,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567743927
    },
    {
        "content": "<p>But I'm still tempted to go the other way.</p>",
        "id": 175034781,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567743941
    },
    {
        "content": "<blockquote>\n<p>Sorry to cause so much needless trouble here.</p>\n</blockquote>\n<p>Leo stressed to me today that it was really important to treat Lean 3 experimentally and to try a lot of stuff and see what works.</p>",
        "id": 175037870,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567749471
    },
    {
        "content": "<p>He'll be disappointed we still haven't tried unification hints seriously</p>",
        "id": 175038958,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567751133
    },
    {
        "content": "<p>although we very clearly see how we don't manage to use the current type class system</p>",
        "id": 175039011,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567751176
    },
    {
        "content": "<p>He wants feedback of this nature. He is well aware that we complain about coercions and they will be different in Lean 4.</p>",
        "id": 175039015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567751185
    },
    {
        "content": "<p>He's going to try something new with coercions because we are not happy with what he has. He's going to try something new with group laws because he thinks <code>to_additive</code> is a dirty hack. He hears our problems and responds.  </p>\n<p>I was reading Cyril Cohen's notes on unification hints only a week or so ago.</p>",
        "id": 175039078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1567751300
    },
    {
        "content": "<p>I mildly prefer going back to using <code>Type</code> for both objects and morphisms because everything seemed to work a bit more smoothly then. When we switched to <code>Sort</code> I had to specify a number of additional universe levels in lean-homotopy-theory (I'm not 100% sure it was related to the <code>Sort</code> change, and I don't understand why exactly why the change would cause those universe levels to be needed, but it seemed like the most likely explanation at the time).</p>",
        "id": 175066493,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567778053
    },
    {
        "content": "<p>Using <code>Sort</code> would be more appealing if we unified <code>preorder</code> with <code>category.{0}</code>, but I don't think that is going to happen</p>",
        "id": 175066518,
        "sender_full_name": "Reid Barton",
        "timestamp": 1567778073
    },
    {
        "content": "<p>And of course it would be very appealing if it made <code>preorder</code> small categories in general... but that's also not going to happen.</p>",
        "id": 175066599,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567778137
    },
    {
        "content": "<p>Part of me wishes we had cummulative universes.</p>",
        "id": 175066609,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567778149
    },
    {
        "content": "<p>If I understand correctly, having cummulative universes would create exactly as many (different) issues. There is some conservation law at work.</p>",
        "id": 175066881,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1567778291
    },
    {
        "content": "<p>Probably, yes.</p>",
        "id": 175066897,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567778302
    },
    {
        "content": "<p>That's why only part of me wishes this (-;</p>",
        "id": 175066907,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1567778310
    },
    {
        "content": "<p>What kind of problems (linky-link?)</p>",
        "id": 175067878,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567778908
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, okay, there's a PR up for restoring everything to live in <code>Type</code>. I'd be game to complete the branch where I moved everything to <code>Sort</code> instead (I will miss <code>Prop</code> valued functors; Yiming's partial work on induction along isomorphisms really relied on this, and I would like to complete this sometime). But I won't do that unless you tell me there's a chance you'd be happy to merge that instead.</p>",
        "id": 175167991,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1567916228
    },
    {
        "content": "<p>I weep for <code>Prop</code>s</p>",
        "id": 175168127,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567916519
    },
    {
        "content": "<p>Transport of structure for e.g. local rings is equivalent to the existence of a functor from the core of <code>CommRing</code> to the category of <code>is_local R</code> <code>Prop</code>s, and the morphisms in the latter are <code>Sort</code>s</p>",
        "id": 175168218,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1567916670
    }
]