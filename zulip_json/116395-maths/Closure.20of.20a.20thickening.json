[
    {
        "content": "<p>Is this true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology.metric_space.hausdorff_distance</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">metric</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">ℝ</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">closure_thickening</span> <span class=\"o\">:</span> <span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">thickening</span> <span class=\"n\">δ</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cthickening</span> <span class=\"n\">δ</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"o\">(</span><span class=\"n\">closure_thickening_subset_cthickening</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 279387187,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650362149
    },
    {
        "content": "<p>You may have to take the closure of <code>s</code> as well.</p>",
        "id": 279387397,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650362261
    },
    {
        "content": "<p>No that can't be, because of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/emetric.inf_edist_closure\">docs#emetric.inf_edist_closure</a></p>",
        "id": 279387495,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650362293
    },
    {
        "content": "<p>To be clear,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">thickening_closure</span> <span class=\"o\">:</span> <span class=\"n\">thickening</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">thickening</span> <span class=\"n\">δ</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">thickening</span><span class=\"o\">,</span> <span class=\"n\">inf_edist_closure</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">cthickening_closure</span> <span class=\"o\">:</span> <span class=\"n\">cthickening</span> <span class=\"n\">δ</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">cthickening</span> <span class=\"n\">δ</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"n\">cthickening</span><span class=\"o\">,</span> <span class=\"n\">inf_edist_closure</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 279388021,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650362538
    },
    {
        "content": "<p>Surely this isn't true in general. What if the metric space is discrete? e.g. if d(a,b)=1 for a!=b isn't the 1-thickening of a set equal to the set and the 1-cthickening of a set is equal to everything.</p>",
        "id": 279388636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650362894
    },
    {
        "content": "<p>I would have to look at the definitions, but is <code>E</code> allowed to be something pathological, like <code>zmod 2</code>?</p>",
        "id": 279388680,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650362927
    },
    {
        "content": "<p>This is why I'm working in a real normed space, Kevin <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 279388689,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650362934
    },
    {
        "content": "<p>Oh, Kevin said the same!</p>",
        "id": 279388692,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650362935
    },
    {
        "content": "<p>Oh I see -- the point is that you want a real normed space -- yeah :-)</p>",
        "id": 279388710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650362947
    },
    {
        "content": "<p>The idea being that spheres in a normed space are thin.</p>",
        "id": 279388756,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650362981
    },
    {
        "content": "<p>Presumably you need much less, just something like if d(x,y)=1 then there's y_n with d(x,y_n)&lt;1 and d(y_n,y)&lt;1/n.</p>",
        "id": 279388884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650363065
    },
    {
        "content": "<p>Absolutely, but I don't know how to ask Lean for that.</p>",
        "id": 279388930,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650363101
    },
    {
        "content": "<p>Is there a math name for this? Do we care about this?</p>",
        "id": 279388988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650363125
    },
    {
        "content": "<p>Would <code>separable and no isolated points</code> be what Kevin describes?</p>",
        "id": 279389036,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650363171
    },
    {
        "content": "<p>I guess in the normed space case you just take your point in s which is &lt;= 1 from x and just draw a line through these two points and stick to this line.</p>",
        "id": 279389043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650363176
    },
    {
        "content": "<p>Through a long series of yak shaving PRs, this is useful for Hahn-Banach and Krein-Milman. The context is <a href=\"https://github.com/leanprover-community/mathlib/pull/13380\">#13380</a>.</p>",
        "id": 279389061,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650363183
    },
    {
        "content": "<p>aha, so it's worth thinking about. Is the concept of a <a href=\"https://en.wikipedia.org/wiki/Perfect_set\">perfect set</a> relevant?</p>",
        "id": 279389169,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650363252
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Closure.20of.20a.20thickening/near/279388930\">said</a>:</p>\n<blockquote>\n<p>Absolutely, but I don't know how to ask Lean for that.</p>\n</blockquote>\n<p>I guess you don't just need it for 1, you need it for all positive reals.</p>",
        "id": 279389212,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650363282
    },
    {
        "content": "<p>It seems that <code>perfect</code> assumes also closed, though maybe it is not such a bad idea to have <code>closed</code> around anyway!</p>",
        "id": 279389237,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650363306
    },
    {
        "content": "<p>I'm not sure <code>perfect</code> is exactly the right thing, but it certainly goes it the right direction.</p>",
        "id": 279389387,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650363392
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.separable_space\">docs#topological_space.separable_space</a> seems to exist already.</p>",
        "id": 279389425,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650363426
    },
    {
        "content": "<p>Every countable space will be separable I guess, so Q with the discrete metric still causes problems.</p>",
        "id": 279389469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650363463
    },
    {
        "content": "<p>You then only need the non-existence of isolated points, to avoid a single point being the only point in one of its neighbourhoods.</p>",
        "id": 279389526,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650363482
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.punctured_nhds_module_ne_bot\">docs#real.punctured_nhds_module_ne_bot</a> ?</p>",
        "id": 279389630,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650363558
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <a href=\"#narrow/stream/116395-maths/topic/Closure.20of.20a.20thickening/near/279389036\">said</a>:</p>\n<blockquote>\n<p>Would <code>separable and no isolated points</code> be what Kevin describes?</p>\n</blockquote>\n<p>No, since I think <code>Iic 0 ∪ Ici 1</code> (or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>∪</mo><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(-\\infty, 0]\\cup[1,\\infty)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">)</span></span></span></span>) satisfies your property, but not Kevin's, and Yael's requested lemma is false.</p>",
        "id": 279389633,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1650363559
    },
    {
        "content": "<p>Your link is broken, Damiano.</p>",
        "id": 279389793,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650363648
    },
    {
        "content": "<p>Yes, I am trying to fix it, but I am failing...</p>",
        "id": 279389815,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650363666
    },
    {
        "content": "<p>Updated to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.punctured_nhds_module_ne_bot\">docs#real.punctured_nhds_module_ne_bot</a> .</p>",
        "id": 279389943,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650363747
    },
    {
        "content": "<p>Floris, you are right: this should be assumed of <code>s</code>, not of <code>E</code>.  And even so, I am not sure that your example will not get in the way.</p>",
        "id": 279390013,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650363794
    },
    {
        "content": "<p>I'm not quite sure how to turn that into a statement about distances <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span></p>",
        "id": 279390208,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650363906
    },
    {
        "content": "<p>Anyway, I think that Kevin's statement is the way to go.</p>",
        "id": 279390318,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650363976
    },
    {
        "content": "<p>You can then try to leverage the existing API around <code>separable_space</code> and the <code>punctured</code> stuff.</p>",
        "id": 279390362,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650364014
    },
    {
        "content": "<p>With perfect sets, you mean? Seems like we don't even have the definition, so this gonna be even more yak shaving <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 279390676,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650364248
    },
    {
        "content": "<p>I meant <code>separable</code> plus the condition that Kevin mentions.</p>",
        "id": 279391151,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650364577
    },
    {
        "content": "<p>(which you should assume on <code>s</code>, of course, since on <code>E</code> it might already exist, one way or another)</p>",
        "id": 279391185,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650364608
    },
    {
        "content": "<p>If you are going to use it for a separable space anyway, then fine.  Otherwise, you may not need the implicit <code>countable</code> assumption on your dense subset.</p>",
        "id": 279391277,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650364678
    },
    {
        "content": "<p>So, just the existence of a dense set, which can approximately \"slightly badly\" every point!</p>",
        "id": 279391382,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650364730
    },
    {
        "content": "<p>How close is the assertion \"if x != y and D=d(x.y) then for all n&gt;=1 there's z with d(x,z)&lt;D and d(z,y)&lt;D/n\" to the assertion \"<code>univ</code> is a perfect subset of this metric space\"?</p>",
        "id": 279392481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650365482
    },
    {
        "content": "<p>Isn't that all you need?</p>",
        "id": 279392497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650365493
    },
    {
        "content": "<p>It seems that you can replace <code>s</code> by <code>closure s</code>, so that would take care of the closure condition on perfect.  Then you would need to verify that having no isolated points is preserved under taking closures (something that I have not actually thought about in weird contexts).</p>",
        "id": 279393559,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1650366140
    },
    {
        "content": "<p>I don't think \"perfect\" is the right concept. Floris already gave a counterexample above. It should be something more in the spirit of a geodesic space. But really, just do the proof for normed spaces.</p>",
        "id": 279393874,
        "sender_full_name": "Reid Barton",
        "timestamp": 1650366353
    },
    {
        "content": "<p>The proof turns out to be a one-liner using <a href=\"https://github.com/leanprover-community/mathlib/pull/13380\">#13380</a> <span aria-label=\"big smile\" class=\"emoji emoji-1f604\" role=\"img\" title=\"big smile\">:big_smile:</span> <br>\nSee <a href=\"https://github.com/leanprover-community/mathlib/pull/13708\">#13708</a></p>",
        "id": 280186421,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1650967085
    }
]