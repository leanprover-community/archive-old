[
    {
        "content": "<p>I have a universe polymorphism question in the definition of multiple differentiability. The definition I have currently is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">E</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">},</span> <span class=\"bp\">∀</span><span class=\"o\">{</span><span class=\"n\">F</span><span class=\"o\">:</span><span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">},</span>\n  <span class=\"bp\">∀</span><span class=\"o\">[</span><span class=\"n\">hE</span><span class=\"o\">:</span><span class=\"n\">normed_space</span> <span class=\"n\">k</span> <span class=\"n\">E</span><span class=\"o\">],</span> <span class=\"bp\">∀</span><span class=\"o\">[</span><span class=\"n\">hF</span><span class=\"o\">:</span><span class=\"n\">normed_space</span> <span class=\"n\">k</span> <span class=\"n\">F</span><span class=\"o\">],</span> <span class=\"bp\">∀</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"bp\">→</span><span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"bp\">∀</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">,</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"mi\">0</span><span class=\"o\">)</span>     <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">hE</span> <span class=\"n\">hF</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">resetI</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">some</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">hE</span> <span class=\"n\">hF</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">resetI</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">fdifferentiable_on</span> <span class=\"n\">k</span> <span class=\"n\">f</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">fderiv_at_within</span> <span class=\"n\">k</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">s</span> <span class=\"o\">}</span>\n<span class=\"bp\">|</span> <span class=\"n\">none</span>         <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"n\">hE</span> <span class=\"n\">hF</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">resetI</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"bp\">∀</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span>\n  <span class=\"n\">rel_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">λ_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">exact</span> <span class=\"bp\">⟨_</span><span class=\"o\">,</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">well_founded_lt</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">lt_wf</span><span class=\"bp\">⟩</span><span class=\"o\">],</span>\n  <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"bp\">`</span><span class=\"o\">[</span><span class=\"n\">apply</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_lt_top</span> <span class=\"bp\">&lt;|&gt;</span> <span class=\"n\">apply</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">some_lt_some</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"n\">lt_add_one</span> <span class=\"bp\">_</span><span class=\"o\">)]</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>In this definition, I define inductively what it means for a function <code>f : E -&gt; F</code> to be <code>n</code> times continuously differentiable on a set <code>s</code>. For <code>n=0</code>, it is just continuous. For <code>n+1</code>, it means that <code>f</code> is differentiable, and its derivative is <code>n</code> times continuously differentiable (but now from the space <code>E</code> to the space <code>E -&gt;L[k] F</code> of bounded linear maps from <code>E</code> to <code>F</code>). If <code>E</code> and <code>F</code> live in the same universe <code>v</code>, everything is fine. But if <code>E</code> lives in <code>v</code> and <code>F</code> in <code>w</code>, then <code>E -&gt;L[k] F</code> lives in <code>max v w</code> and my induction is not correct any more. The options I see:<br>\n* keep <code>E</code> and <code>F</code> in the same universe and be content with it.<br>\n* have an auxiliary definition where <code>E</code> is in <code>v</code> and <code>F</code> in <code>max v w</code>. And use it for the inductive step of the general case. Inductions become much more cumbersome (statements should first be proved for the auxiliary definition, and then the main one).<br>\n* Or some better trick I don't know.</p>\n<p>Comments welcome!</p>",
        "id": 164404643,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1556482150
    },
    {
        "content": "<p>My comment is that I spent 25 years of my life doing mathematics in one universe and I never had any problems whatsover. I know they tell us to be universe polymorphic here but I would like to interpret that as \"just use one universe u\". I was encouraged by the CS people to have objects in one universe and morphisms in a different universe in category theory -- because why not? -- and I think it just makes a terrible mess of things. I hereby propose that if you're actually doing sensible mathematics then you just stick to one universe until someone gives you a really good reason not to. I am yet to see a convincing argument for using more than one universe in mathematics.</p>",
        "id": 164404797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556482413
    },
    {
        "content": "<p>My main problem with this is that, if someone starts a file with <code>variables {E : Type*} {F : Type*}</code> and tries to define a <code>C^2</code> map from <code>E</code> to <code>F</code>, then Lean complains with a hard to understand error message. But from the mathematical point of view, I am also completely happy to do everything in one universe (or even in Type).</p>",
        "id": 164404922,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1556482559
    },
    {
        "content": "<p>So they should be doing maths in one universe too!</p>",
        "id": 164404984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556482603
    },
    {
        "content": "<p>When I made schemes I made them all in <code>Type</code>. But when Ramon made them, he switched to a universe polymorphic set-up.</p>",
        "id": 164405004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556482630
    },
    {
        "content": "<p>I tried using the category theory library and I had universe identification nightmares. Every category I had was either a large category (like rings) or a small category (like some graph of a directed system coming from <code>nhds x</code>). I never needed more than one universe. I don't get why they always want us to use lots of universes. This is maths!</p>",
        "id": 164405072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556482695
    },
    {
        "content": "<p>OK, let's go for <code>E</code> and <code>F</code> in the same universe, unless someone complains.</p>",
        "id": 164405207,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1556482910
    },
    {
        "content": "<p>It would be interesting to hear what the CS people have to say. For me, the fact that it causes you trouble being multiply universe polymorphic in a situation where there is mathematically no foundational issue at all, means that being multiply universe polymorphic is the wrong idea in mathematics. Sure use one universe. But the set theorists always ask me why I need more than one (this happened in Freiburg this week and it's not the first time).</p>",
        "id": 164405260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556482954
    },
    {
        "content": "<p>One of my plans for later on is to refactor the schemes project using <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> 's category theory library, and I would like to start with using only small and large categories, and one universe only. For me it will then be easy to do universe unification by hand because I know exactly which categories are small and which ones are large.</p>",
        "id": 164405338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556483062
    },
    {
        "content": "<p>I had universe unification issues with perfectoid spaces when we tried using categories and it put me off to an extent that I decided not to use them, and instead try to import them into Ramon's scheme project later. I really want to see category theory being used more and next time I am absolutely sticking with one universe.</p>",
        "id": 164405491,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556483315
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Thanks for working on this. The last time there was discussion about this, I think you said you were using <code>enat</code>. Now I see that you are using <code>with_top nat</code>. Can you comment on the change? I was thinking <code>enat</code> might be easier for applications (because you avoid the <code>infty</code>-case).</p>",
        "id": 164420619,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556507288
    },
    {
        "content": "<p>I tried first with <code>enat</code>, but since the definition and the proofs are really inductive, it turned out to be much more convenient in <code>with_top nat</code>. I wouldn't know how to write the definition in <code>enat</code>, in fact!</p>",
        "id": 164427698,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1556518164
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> You said that a coinductive approach might be a good idea. Could you help us out?</p>",
        "id": 164429347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556520540
    },
    {
        "content": "<p>I think this definition should be done in two parts rather than using a messy recursion. Define what C^k means first for k : nat, and then define it for <code>k : enat</code> by extension</p>",
        "id": 164429440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556520711
    },
    {
        "content": "<p>That's what I had done first. But then it means that all proofs have to be done twice, first for finite differentiability using nat induction, and then for enat. With two different lemmas each time, the auxiliary one on nat and then the main one on enat. I got tired of this after ten identical repetitions of proofs, then I tried the inductive definition in <code>with_top nat</code> and it turned out to be completely smooth. Here is a random proof in this file:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">times_cont_diff_on</span><span class=\"bp\">.</span><span class=\"n\">congr_mono</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">times_cont_diff_on</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">unique_diff_on</span> <span class=\"n\">k</span> <span class=\"n\">s₁</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">s₁</span><span class=\"o\">,</span> <span class=\"n\">f₁</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"o\">:</span> <span class=\"n\">s₁</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">times_cont_diff_on</span> <span class=\"n\">k</span> <span class=\"n\">n</span> <span class=\"n\">f₁</span> <span class=\"n\">s₁</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">unfreeze_local_instances</span><span class=\"o\">,</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"kn\">using</span> <span class=\"n\">with_top_nat_induction</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">IH</span> <span class=\"n\">Itop</span> <span class=\"n\">generalizing</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">continuous_on</span><span class=\"bp\">.</span><span class=\"n\">congr_mono</span> <span class=\"n\">H</span> <span class=\"n\">h</span> <span class=\"n\">h₁</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">fdifferentiable_on</span><span class=\"bp\">.</span><span class=\"n\">congr_mono</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">h</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"n\">IH</span> <span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">differentiable_at_within</span><span class=\"bp\">.</span><span class=\"n\">fderiv_at_within_congr_mono</span>\n      <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">h₁</span> <span class=\"n\">hx</span><span class=\"o\">))</span> <span class=\"n\">h</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hs</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">)</span> <span class=\"n\">h₁</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">assume</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">Itop</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>It used to be much more tedious with nat induction and then enat extension.</p>",
        "id": 164429848,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1556521313
    },
    {
        "content": "<p>wouldn't it be the same with the appropriate induction lemma?</p>",
        "id": 164429994,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556521509
    },
    {
        "content": "<p>I had more difficulties with the two definitions on nat and enat as things were less defeq, so I had to do more things by hand. But in retrospect I don't see why this was the case, so maybe I'll try again. In the end, both definitions, if well crafted, should give the same proofs!</p>",
        "id": 164430145,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1556521788
    },
    {
        "content": "<p>I think there are actually two definitions here, though, and mixing them is part of the problem for this question</p>",
        "id": 164430146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556521789
    },
    {
        "content": "<p>For your C^k universe problem, I think you want to define \"L is the k times differential of f at x\"</p>",
        "id": 164430208,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556521834
    },
    {
        "content": "<p>which lives in some space like <code>E^k -&gt;l F</code></p>",
        "id": 164430210,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556521854
    },
    {
        "content": "<p>You could either define that recursively or inductively. If you do it recursively then since you want that space to live in <code>max u v</code>, at <code>k = 0</code> it's <code>ulift F</code> or something equivalent to it</p>",
        "id": 164430278,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556521957
    },
    {
        "content": "<p>Actually, I guess a witness for C^k requires a whole list of different <code>E^k' -&gt;l F</code> functions (for <code>k' &lt;= k</code>)?</p>",
        "id": 164430358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556522046
    },
    {
        "content": "<p>No, the k-th derivative lives in a much more complicated space. Either <code>E -&gt;l (E -&gt;l (E -&gt;l ... F))))</code>, or the space of <code>k</code>-linear maps from <code>E^k</code> to <code>F</code> (but the natural space from the inductive definition is the first one). In general, one never uses the <code>k</code>-th derivative beyond <code>k=2</code>, so I am really going for an existence result.</p>",
        "id": 164430368,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1556522070
    },
    {
        "content": "<p>Sure, but I still think being able to name the objects is useful</p>",
        "id": 164430395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556522124
    },
    {
        "content": "<p>When I say <code>E^k -&gt;l F</code> I really mean what you said, it's a new definition like <code>E -&gt;l ... -&gt;l F</code></p>",
        "id": 164430447,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556522173
    },
    {
        "content": "<p>I think that can be expressed as a unary function though, from the tensor product space</p>",
        "id": 164430453,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556522210
    },
    {
        "content": "<p>For instance, when you prove that the composition of C^k functions is C^k, you definitely don't want to exhibit the derivative!</p>",
        "id": 164430469,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1556522233
    },
    {
        "content": "<p>I'm not convinced that's true... we probably want the appropriate operators on tensors anyway</p>",
        "id": 164430479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556522277
    },
    {
        "content": "<p>With tensor products, there are difficulties here as we are really talking about normed spaces, and there are many possible norms on a tensor product, that are not equivalent in general.</p>",
        "id": 164430527,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1556522307
    },
    {
        "content": "<p>this new definition gives you the opportunity to pick the right one, though</p>",
        "id": 164430544,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556522354
    },
    {
        "content": "<p>I admit it's not the approach that leads to the least additional work</p>",
        "id": 164430553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556522377
    },
    {
        "content": "<p>but I'm trying to gauge if this extra work is worth it for library building reasons</p>",
        "id": 164430567,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556522402
    },
    {
        "content": "<p>There is no \"right\" norm on tensor products, unfortunately. I just checked <a href=\"https://en.wikipedia.org/wiki/Topological_tensor_product\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Topological_tensor_product\">https://en.wikipedia.org/wiki/Topological_tensor_product</a>, which starts with the sentence \"the theory is notoriously subtle\" :)</p>",
        "id": 164430882,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1556522757
    },
    {
        "content": "<p>We need the \"dangerous bend\" emoji of Bourbaki/Knuth</p>",
        "id": 164431043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1556522981
    },
    {
        "content": "<p>The first questions that come to mind are: does it matter which of these norms we take? Apparently some norm is definable, and there is some space of them, but maybe they are all topologically equivalent or have the same little O sets</p>",
        "id": 164431136,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556523098
    },
    {
        "content": "<p>Assuming these issues of the tensor product cannot be resolved, it is still possible to define the space <code>E ^[n]-&gt;l F</code> (or whatever notation) via iteration of <code>E -&gt;l</code> on <code>ulift F</code></p>",
        "id": 164431312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556523285
    },
    {
        "content": "<p>and then given <code>f : E ^[n]-&gt;l F</code> and <code>x : E^n</code> you can define <code>f x : F</code></p>",
        "id": 164431341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556523317
    },
    {
        "content": "<p>That is, you can still treat it like the space <code>E^n -&gt; F</code> but its norm is derived from <code>E -&gt; ... -&gt; F</code></p>",
        "id": 164431403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1556523373
    },
    {
        "content": "<p>The coinductive definition would look like this:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">coinductive</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">enat</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">bool</span>\n<span class=\"bp\">|</span> <span class=\"n\">zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"mi\">0</span> <span class=\"n\">f</span>\n<span class=\"bp\">|</span> <span class=\"n\">deriv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"n\">f&#39;</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"n\">f</span> <span class=\"bp\">→</span> <span class=\"n\">derivative</span> <span class=\"n\">f</span> <span class=\"n\">f&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">f&#39;</span>\n</pre></div>\n\n\n<p>So we get the 0 case, the +1 case and by coinduction the infinite (ω) case.</p>",
        "id": 164483167,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1556567654
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> what do you think about the claim that mathematicians may as well just work in <code>Type u</code> and not ever use more than one universe in their work?</p>",
        "id": 164483221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556567715
    },
    {
        "content": "<p>You mean work in <code>Type 0</code>? I'm coming from a HOL background, and I see that everything can be done in <code>Type 0</code> (AFAIK arithmetic even in second-order logic) . But it is a annoying restriction which is hard to work around.I would prefer two different universes for <code>E</code> and <code>F</code>. We have the problem already for <code>dim</code>, where many rules are restricted to be in one universe (saving some <code>ulift</code> etc.).</p>",
        "id": 164484061,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1556568353
    },
    {
        "content": "<p>I know that you guys are not a fan of <code>Type 0</code>. I was proposing <code>Type u</code> as a way of meeting you in the middle. I don't want to ever consider a category with objects in some universe <code>u</code> and morphisms in some random unrelated universe <code>v</code>. These things do not even show up in mathematics -- there is always a relation between u and v (small categories or large ones). But the \"maximally universe polymorphic\" mantra coming from the CS people who know type theory says that this is how it should be done. Mathematicians are running into issues with this when more than one universe is involved.</p>",
        "id": 164484463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556568646
    },
    {
        "content": "<p>a concrete example which came up in discussion is Lean's treatment of ordinals, which, being isomorphism classes of well-ordered types, live one universe level up. Johannes mentioned that it's not possible to do this in just <code>Type 0</code>, and that some workaround must be implemented.</p>\n<p>i think mathematicians would prefer being able to rigorously think of ordinals as giant equivalence classes whenever it's convenient. (arguably this falls under the scope of kevin's argument---i haven't seen an example where more than two type universes are needed... yet)</p>",
        "id": 164484839,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1556568954
    },
    {
        "content": "<p>Well as a computer scientist I also only want to work in <code>Type u</code> (or even better in <code>Type 0</code>). Or better: as a user I only want to work in <code>Type 0</code> (and in the worst case in a fixed type universe <code>u</code>).</p>\n<p>But as a library developer were other people should use and apply my theorems I know that for some cases different type universes are neccesary, and it is usually very hard to introduce them afterwards. </p>\n<p>So this is not a question between CS and math. It is a question between easy but restricted and harder but in difficult cases easier to apply.</p>",
        "id": 164485119,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1556569151
    },
    {
        "content": "<p>But if we did the entire corpus of mathematics with only one universe (I don't know if you realise this but this is what is done in practice) then no mathematician would ever notice if our maths libraries only had one universe in.</p>",
        "id": 164485240,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556569245
    },
    {
        "content": "<p>Kevin there is a difference between doing everything in one type universe from the perspective of not doing it in a formal way. and doing it in one type universe from the perspective of doing it formally in DTT.</p>",
        "id": 164486494,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1556570202
    },
    {
        "content": "<p>I can believe you, but I don't really understand this difference properly.</p>",
        "id": 164486534,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556570233
    },
    {
        "content": "<p>All I know is that if Sebastien runs into issues like the above issue and then has to work hard to get around things, and there are <em>no set-theoretic issues</em>, then in my opinion he is being too universe-polymorphic for mathematics.</p>",
        "id": 164486634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556570297
    },
    {
        "content": "<p>Or we need a better understanding / methods / tools / syntax to handle the universe polymorphism. This could also go in the direction that we write a constant with only one universe parameter, but have some \"magical\" tools which generalize this parameter into multiple different ones.</p>",
        "id": 164486867,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1556570515
    },
    {
        "content": "<p>But currently I don't see a good solution here. A solution is surely to go with one parameter and when somebody runs into a problem with multiple parameters they need to deal with it (including rewriting the theory)</p>",
        "id": 164487080,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1556570672
    },
    {
        "content": "<p>It's not that hard to prove it for <code>u v</code>,  given a proof for <code>u u</code>, just by proving everything's isomorphic to something in <code>max u v</code> surely?</p>",
        "id": 164487459,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556570981
    },
    {
        "content": "<p>You don't need to rewrite the theory.</p>",
        "id": 164487474,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1556570995
    },
    {
        "content": "<p>Yes, but it requires infrastructure w.r.t isophisms between different type universes.</p>",
        "id": 164487761,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1556571159
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span> ! It's nice to see you here. How is your new life?</p>",
        "id": 164488124,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556571443
    },
    {
        "content": "<p>It's good here! (but we have more rain than Amsterdam)</p>",
        "id": 164488294,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1556571585
    },
    {
        "content": "<p>Do we have Lean on iPhone now?</p>",
        "id": 164488401,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556571646
    },
    {
        "content": "<p>I don't know, do we?</p>",
        "id": 164488468,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1556571706
    },
    {
        "content": "<p>You're the one making IPhones now</p>",
        "id": 164488521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556571724
    },
    {
        "content": "<p>I don't have a iPhone (yet)</p>",
        "id": 164488527,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1556571734
    },
    {
        "content": "<p>Apple is becoming so laxist...</p>",
        "id": 164488585,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556571784
    },
    {
        "content": "<p>If they continue down that road, one day they will allow people to install non-Apple software on their computer</p>",
        "id": 164488616,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556571811
    },
    {
        "content": "<p>oh god</p>",
        "id": 164488636,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1556571835
    },
    {
        "content": "<p>You mean like software developed by Microsoft?</p>",
        "id": 164488696,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1556571855
    },
    {
        "content": "<p>Worse: free software funded by Microsoft</p>",
        "id": 164488721,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1556571896
    },
    {
        "content": "<p>I heard Microsoft Office is running quiet well on macOS</p>",
        "id": 164488724,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1556571898
    },
    {
        "content": "<p>Also git works on macOS (better than on Windows)</p>",
        "id": 164488839,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1556571969
    },
    {
        "content": "<p>great to see that you've had such an impact already ;-)</p>",
        "id": 164490337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1556573222
    },
    {
        "content": "<p>Hehe, yeah I managed to install git on my computer :-)</p>",
        "id": 164490632,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1556573429
    },
    {
        "content": "<p>But Munich is the city of Isabelle.</p>",
        "id": 164490689,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1556573487
    }
]