[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432631\">@fosco</span>, you may want to start here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.products.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">]</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dinat_trans</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œ†</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n<span class=\"c\">/-</span><span class=\"cm\"> ... axioms ... -/</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 255814186,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633126071
    },
    {
        "content": "<p>ok, a very basic question.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">dinat_trans</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œ†</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n  <span class=\"o\">(</span><span class=\"n\">dinaturality</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">‚¶É</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">‚¶Ñ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n    <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"bp\">‚â´</span> <span class=\"n\">G.map</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"mi\">ùüô</span> <span class=\"n\">Y</span><span class=\"o\">,</span><span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"bp\">‚â´</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"mi\">ùüô</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>this gives me an error,</p>\n<div class=\"codehilite\" data-code-language=\"type\"><pre><span></span><code>  prod.mk (op f)\nterm\n  op f\nhas type\n  (X ‚ü∂ Y)·µí·µñ\nbut is expected to have type\n  ?m_1.fst ‚ü∂ ?m_2.fst\n</code></pre></div>\n<p>and this is telling me that I'm not building the morphism in C^op x C correctly. What is the correct syntax to refer to the morphism <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>f</mi><mo separator=\"true\">,</mo><msub><mn>1</mn><mi>Y</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(f, 1_Y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.22222em;\">Y</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup><mo>√ó</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C^{op}\\times C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">√ó</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>?</p>",
        "id": 255816830,
        "sender_full_name": "fosco",
        "timestamp": 1633127514
    },
    {
        "content": "<p>(PS: it's night time for me in my timezone ;-) I'll get back at it tomorrow)</p>",
        "id": 255816912,
        "sender_full_name": "fosco",
        "timestamp": 1633127548
    },
    {
        "content": "<p>For a morphism, it should be <code>f.op</code>, I think.</p>",
        "id": 255817011,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633127619
    },
    {
        "content": "<p>Same error if I change to <code>f.op</code></p>",
        "id": 255817094,
        "sender_full_name": "fosco",
        "timestamp": 1633127659
    },
    {
        "content": "<p>Exactly the same?</p>",
        "id": 255817125,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633127691
    },
    {
        "content": "<p>Well, there is a second <code>op f</code></p>",
        "id": 255817163,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633127726
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">prod.mk</span> <span class=\"n\">f.op</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">f.op</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">op</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">op</span> <span class=\"n\">X</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">?</span><span class=\"n\">m_1.fst</span> <span class=\"bp\">‚ü∂</span> <span class=\"bp\">?</span><span class=\"n\">m_2.fst</span>\n</code></pre></div>\n<p>where is <code>?m_1</code> implicitly defined?</p>",
        "id": 255817182,
        "sender_full_name": "fosco",
        "timestamp": 1633127752
    },
    {
        "content": "<p>Aha I didn't read the whole error message. It is closer now, though!</p>",
        "id": 255817244,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633127781
    },
    {
        "content": "<p>Same error message, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>œµ</mi></mrow><annotation encoding=\"application/x-tex\">\\epsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">œµ</span></span></span></span> less mistake <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 255817286,
        "sender_full_name": "fosco",
        "timestamp": 1633127813
    },
    {
        "content": "<p>For these metavariables like <code>?m_1</code> (as far as I know) you just have to guess, so here probably it is the implicit source object argument of <code>F.map</code></p>",
        "id": 255817329,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633127850
    },
    {
        "content": "<p>is at least <code>(f,g)</code> the right way to define a morphism in a product category? Initially I thought I had to use angle brackets..</p>",
        "id": 255817448,
        "sender_full_name": "fosco",
        "timestamp": 1633127922
    },
    {
        "content": "<p>That is, I'm not sure if Lean is smart enough here to guess what objects <code>(f.op, ùüô X)</code> is meant to be a map between... you can tell it explicitly, but it's a bit inconvenient</p>",
        "id": 255817461,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633127930
    },
    {
        "content": "<p>how do you tell it explicitly?</p>",
        "id": 255817642,
        "sender_full_name": "fosco",
        "timestamp": 1633128030
    },
    {
        "content": "<p>Something like <code>(f.op, ùüô X) : (op Y, X) ‚ü∂ (op X, X)</code> (if I got it right)</p>",
        "id": 255817716,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633128091
    },
    {
        "content": "<p>I'm not sure it will help, but it might</p>",
        "id": 255817736,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633128106
    },
    {
        "content": "<p>And where should  I specify this typing?</p>",
        "id": 255817851,
        "sender_full_name": "fosco",
        "timestamp": 1633128185
    },
    {
        "content": "<p>I thought given the type of <code>f</code> there's a unique way to infer the type of <code>(f.op, 1 X)</code>...</p>",
        "id": 255817890,
        "sender_full_name": "fosco",
        "timestamp": 1633128224
    },
    {
        "content": "<p>It has a unique type in the sense that its type is known to be <code>prod blah blah</code> but in principle there could be various pairs of objects of <code>C·µí·µñ √ó C</code> between which the type of maps is that specific type... which is a bit annoying.</p>",
        "id": 255818030,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633128316
    },
    {
        "content": "<p><code>F.map ((f.op, ùüô X) : (op Y, X) ‚ü∂ (op X, X))</code></p>",
        "id": 255818056,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633128337
    },
    {
        "content": "<p>Based on <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.bifunctor.diagonal/src\">src#category_theory.bifunctor.diagonal</a> it seems like this is what you're meant to write</p>",
        "id": 255818134,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633128380
    },
    {
        "content": "<p>Probably there should be something like <code>F.map_prod f g</code> to make this easier.</p>",
        "id": 255818164,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633128408
    },
    {
        "content": "<p>I see the file I linked above is from 2017 so maybe it already exists... but I looked there because it seemed like the logical place for it</p>",
        "id": 255818279,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633128489
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"import\"><pre><span></span><code>open opposite\n\nnamespace category_theory\n\nvariables {C D : Type*} [category C] [category D]\n\nstructure dinat_trans (F G : C·µí·µñ √ó C ‚•§ D) :=\n  (app : Œ† X, F.obj (op X, X) ‚ü∂ G.obj (op X, X))\n  (dinaturality : ‚àÄ ‚¶ÉX Y : C‚¶Ñ (f : X ‚ü∂ Y),\n    F.map ((f.op, ùüô X) : (op Y, X) ‚ü∂ (op X, X)) ‚â´ app X ‚â´ G.map (((ùüô X).op, f) : (op X,X) ‚ü∂ (op X,Y)) = F.map (((ùüô Y).op, f) : (op Y,X) ‚ü∂ (op Y,Y)) ‚â´ app Y ‚â´ G.map (f.op, ùüô Y) . obviously)\n\nend category_theory\n</code></pre></div>\n<p>no errors!</p>",
        "id": 255818382,
        "sender_full_name": "fosco",
        "timestamp": 1633128581
    },
    {
        "content": "<p><span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> tomorrow, co/wedges!</p>",
        "id": 255818476,
        "sender_full_name": "fosco",
        "timestamp": 1633128627
    },
    {
        "content": "<p>Make sure in a <code> ``` </code> block that you start with a new line. Otherwise zulip swallows the first line and tries to interpret it as a language instruction for the code block.</p>",
        "id": 255818663,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633128773
    },
    {
        "content": "<p>This is slightly terser:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.products.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- TODO move to category_theory.products.bifunctor, and make use of there</span>\n<span class=\"sd\">/-- A synonym for `F.map (f, g)`, helpful because Lean struggles to typecheck `(f, g)`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">functor.map_prod</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">√ó</span> <span class=\"n\">D</span> <span class=\"bp\">‚•§</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dinat_trans</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">dinaturality</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">‚¶É</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">‚¶Ñ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n  <span class=\"n\">F.map_prod</span> <span class=\"n\">f.op</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"bp\">‚â´</span> <span class=\"n\">G.map_prod</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span>\n  <span class=\"n\">F.map_prod</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"bp\">‚â´</span> <span class=\"n\">G.map_prod</span> <span class=\"n\">f.op</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>\n<p>using Reid's <code>map_prod</code> suggestion.</p>",
        "id": 255818853,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633128923
    },
    {
        "content": "<p>Note also that by writing <code>(ùüô _)</code> I can avoid having to write <code>(ùüô X).op</code>.</p>",
        "id": 255818890,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633128954
    },
    {
        "content": "<p>(Note also Lean's style guide says no indenting for structure fields, and no long lines. :-)</p>",
        "id": 255819021,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633129035
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">constant_functor</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">Y</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">Y</span> <span class=\"n\">Y'</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"mi\">ùüô</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">promote_covariant</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">F.obj</span> <span class=\"n\">Z.snd</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">Z</span> <span class=\"n\">W</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">F.map</span> <span class=\"n\">f.snd</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">promote_contravariant</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">Z</span><span class=\"o\">,</span> <span class=\"n\">F.obj</span> <span class=\"n\">Z.fst</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">Z</span> <span class=\"n\">W</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">F.map</span> <span class=\"n\">f.fst</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">wedge</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dinat_trans</span> <span class=\"o\">(</span><span class=\"n\">promote_covariant</span> <span class=\"o\">(</span><span class=\"n\">constant_functor</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">cowedge</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">dinat_trans</span> <span class=\"n\">F</span>  <span class=\"o\">(</span><span class=\"n\">promote_covariant</span> <span class=\"o\">(</span><span class=\"n\">constant_functor</span> <span class=\"n\">X</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>a few other definitions; I'm not sure <code>wedge</code> and <code>cowedge</code> are definitions though: they are _functions_ eating a functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>:</mo><msup><mi>C</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup><mo>√ó</mo><mi>C</mi><mo>‚Üí</mo><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">F : C^{op}\\times C \\to D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">√ó</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> and an object of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>, and giving back the category of dinatural transformations between the two. So, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi><mi>i</mi><mi>n</mi><mi>a</mi><mi>t</mi><mo stretchy=\"false\">(</mo><mi>F</mi><mo separator=\"true\">,</mo><mi>G</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Dinat(F,G)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mord mathnormal\">ina</span><span class=\"mord mathnormal\">t</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mclose\">)</span></span></span></span> is a type! I'm not sure this is the best design choice.</p>",
        "id": 255853258,
        "sender_full_name": "fosco",
        "timestamp": 1633163293
    },
    {
        "content": "<p>I hope that <code>functor.const</code> exists already.</p>",
        "id": 255853531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633163623
    },
    {
        "content": "<p>And <code>promote_covariant</code> should be something like <code>functor.snd ‚ãô F</code></p>",
        "id": 255853628,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633163727
    },
    {
        "content": "<p>Sure. I am just trying to reinvent the wheel to get a grip on the basic defs <br>\n(I should also have a look at <code>cone</code> and <code>cocone</code>...)</p>",
        "id": 255853651,
        "sender_full_name": "fosco",
        "timestamp": 1633163754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/dinatural.20transformations/near/255853628\">said</a>:</p>\n<blockquote>\n<p>And <code>promote_covariant</code> should be something like <code>functor.snd ‚ãô F</code></p>\n</blockquote>\n<p><code>unknown identifier 'category_theory.functor.snd'</code></p>",
        "id": 255853819,
        "sender_full_name": "fosco",
        "timestamp": 1633163893
    },
    {
        "content": "<p><del>Ooh, it's probably just <code>category_theory.snd</code>, sorry.</del> It is <code>category_theory.prod.snd</code></p>",
        "id": 255853847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633163942
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.prod.snd\">docs#category_theory.prod.snd</a></p>",
        "id": 255853855,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633163951
    },
    {
        "content": "<p>Voila <span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span></p>",
        "id": 255853867,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633163976
    },
    {
        "content": "<p>Now I see a complaint for <code>\\ggg</code></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">functor.comp</span> <span class=\"n\">prod.snd</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">prod.snd</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Œ†</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">],</span> <span class=\"n\">C</span> <span class=\"bp\">√ó</span> <span class=\"n\">D</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span>\n        <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n        <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n        <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"bp\">?</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n        <span class=\"bp\">?</span>\n        <span class=\"bp\">?</span>\n        <span class=\"bp\">?</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_4</span> <span class=\"bp\">?</span> <span class=\"n\">u_1</span> <span class=\"bp\">?</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 255854003,
        "sender_full_name": "fosco",
        "timestamp": 1633164105
    },
    {
        "content": "<p>Aah, <code>prod.snd</code> takes to arguments (namely the factors)</p>",
        "id": 255854278,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633164384
    },
    {
        "content": "<p>So <code>prod.snd _ _ ‚ãô F</code> should work</p>",
        "id": 255854284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633164396
    },
    {
        "content": "<p>perfect</p>",
        "id": 255854291,
        "sender_full_name": "fosco",
        "timestamp": 1633164404
    },
    {
        "content": "<p>Sorry, I should have tested my code before commenting</p>",
        "id": 255854293,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633164406
    },
    {
        "content": "<p>Nah, it's me, I should start from the beginning, be more systematic. Instead I am learning the syntax along the way.</p>",
        "id": 255854327,
        "sender_full_name": "fosco",
        "timestamp": 1633164469
    },
    {
        "content": "<p>It's a lot more fun that way. I also jumped straight in (-;</p>",
        "id": 255854397,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633164535
    },
    {
        "content": "<p>@fosco, I think your definition of <code>wedge</code> is on the wrong track. You don't want <code>D</code> as a parameter, but rather as a field of the <code>wedge</code>.</p>",
        "id": 255859253,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633169492
    },
    {
        "content": "<p>You could write </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">wedge</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span>  <span class=\"o\">:=</span> <span class=\"bp\">\\</span><span class=\"n\">Sigma</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">,</span> <span class=\"n\">dinat_trans</span> <span class=\"bp\">...</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>but better would be</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">wedge</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"bp\">\\</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">dinat_trans</span> <span class=\"bp\">...</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>and then <code>instance (F) : category (wedge F) := ...</code></p>",
        "id": 255859363,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633169580
    },
    {
        "content": "<p>(Probably before the <code>instance</code> you want to enter the <code>wedge</code> namespace and define <code>hom</code>, presumably as another structure.)</p>",
        "id": 255859617,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633169780
    },
    {
        "content": "<p>I agree; also, <code>promote</code>s are redundant, lean figures out alone that the domain of the constant functor must be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup><mo>√ó</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C^{op}\\times C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">√ó</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>.</p>",
        "id": 255860931,
        "sender_full_name": "fosco",
        "timestamp": 1633171051
    },
    {
        "content": "<p>What is <code>hom</code>?</p>\n<p>In fact, I would like to define the twisted arrow category of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>hom</mi><mo>‚Å°</mo></mrow><mi>C</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\hom_C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mop\"><span class=\"mop\">hom</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>:</p>\n<ul>\n<li>objects : the morphisms of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span></li>\n<li>morphisms <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>‚Üí</mo><mi>g</mi></mrow><annotation encoding=\"application/x-tex\">f \\to g</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span></span></span></span> : the pairs <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi><mo>:</mo><mi>s</mi><mi>r</mi><mi>c</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo>‚Üí</mo><mi>s</mi><mi>r</mi><mi>c</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><mi>v</mi><mo>:</mo><mi>t</mi><mi>r</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo>‚Üí</mo><mi>t</mi><mi>r</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">u : src(g) \\to src(f), v : trg(f) \\to trg(g)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">src</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">src</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span></span></span></span> such that the obvious square commutes</li>\n</ul>\n<p>is this a <code>structure</code> that then I have to prove is a category? </p>\n<p>Again, I am discovering the syntax along the way <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> be patient...</p>",
        "id": 255861204,
        "sender_full_name": "fosco",
        "timestamp": 1633171289
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>this seems to work (it only complains for the <code>sorry</code>)</p>",
        "id": 255861284,
        "sender_full_name": "fosco",
        "timestamp": 1633171341
    },
    {
        "content": "<p>Now I would love to have something similar to agda's <code>ctrl-R</code> to auto-generate the fields I have to fill (hom, id, comp)... wishful thinking?</p>",
        "id": 255861573,
        "sender_full_name": "fosco",
        "timestamp": 1633171670
    },
    {
        "content": "<p>Replace the sorry by an underscore, and if you're in vs code, a lightbulb should show up</p>",
        "id": 255861630,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1633171708
    },
    {
        "content": "<p><code>Ctrl</code>-<code>.</code> will open the lightbulb menu. Then hit <code>&lt;Up&gt;</code>-<code>&lt;Up&gt;</code>-<code>&lt;Enter&gt;</code> and you will have your skeleton <span aria-label=\"laughing\" class=\"emoji emoji-1f606\" role=\"img\" title=\"laughing\">:laughing:</span></p>",
        "id": 255861848,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633171937
    },
    {
        "content": "<p>I know very little as you can see! <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 255861918,
        "sender_full_name": "fosco",
        "timestamp": 1633172027
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">wedge</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tip</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">dinat_trans</span> <span class=\"o\">(</span><span class=\"n\">constant_functor</span> <span class=\"n\">tip</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">cowedge</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tip</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">dinat_trans</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">constant_functor</span> <span class=\"n\">tip</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">U.tip</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V.tip</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">cowedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">U.tip</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V.tip</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 255862210,
        "sender_full_name": "fosco",
        "timestamp": 1633172312
    },
    {
        "content": "<p>Now for the twisted arrow category...</p>",
        "id": 255862503,
        "sender_full_name": "fosco",
        "timestamp": 1633172581
    },
    {
        "content": "<p>Hmmm, I am having a hard time again, figuring out how to define it</p>",
        "id": 255863354,
        "sender_full_name": "fosco",
        "timestamp": 1633173412
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">twisted</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">C.hom</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">id_comp'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">comp_id'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">assoc'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I would like to say: if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> is a category, there is a category having objects the class of morphisms of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>, and morphisms the pairs <code>(u,v)</code> as above; I have two problems: first, I can't figure out where to put the information that the class of objects of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>w</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">Tw(C)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">Tw</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>hom</mi><mo>‚Å°</mo><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\hom(C)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">hom</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span></span></span></span>; second, I want just <em>some</em> pairs of morphisms (u,v): how does one consider just some pairs (u,v), subject to a certain condition?</p>",
        "id": 255863547,
        "sender_full_name": "fosco",
        "timestamp": 1633173624
    },
    {
        "content": "<p>Before you go too far: please use the existing <code>functor.const</code>, rather than rolling your own.</p>",
        "id": 255863832,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633173917
    },
    {
        "content": "<p>In <code>wedge</code>, I'd suggest for now calling <code>tip</code> instead <code>X</code>. It's not great, but it will be consistent with the terminology for <code>cone</code> and <code>cocone</code>. If you feel strongly about it, we can make a PR to update <code>cone</code> and <code>cocone</code> later. :-)</p>",
        "id": 255863908,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633173979
    },
    {
        "content": "<p>I'm confused. Your category instances for <code>wedge</code> and <code>cowedge</code> are wrong. The morphisms aren't just morphisms between the tips, but morphisms satisfying some condition.</p>",
        "id": 255863954,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174047
    },
    {
        "content": "<p>This is why you need to create a <code>structure wedge.hom := ...</code></p>",
        "id": 255863962,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174059
    },
    {
        "content": "<p>Which will carry the morphism and this condition. See how this is implemented for <code>comma</code> or <code>cone</code>.</p>",
        "id": 255863971,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174078
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/dinatural.20transformations/near/255863832\">said</a>:</p>\n<blockquote>\n<p>Before you go too far: please use the existing <code>functor.const</code>, rather than rolling your own.</p>\n</blockquote>\n<p>Replacing <code>constant_functor</code> with <code>functor.const</code> doesn't work...</p>",
        "id": 255864064,
        "sender_full_name": "fosco",
        "timestamp": 1633174168
    },
    {
        "content": "<p>Let's see: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/functor.const/src\">src#functor.const</a>.</p>",
        "id": 255864077,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174188
    },
    {
        "content": "<p>Nope, that's wrong.</p>",
        "id": 255864122,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174204
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/dinatural.20transformations/near/255863954\">said</a>:</p>\n<blockquote>\n<p>I'm confused. Your category instances for <code>wedge</code> and <code>cowedge</code> are wrong. The morphisms aren't just morphisms between the tips, but morphisms satisfying some condition.</p>\n</blockquote>\n<p>Indeed: because I don't know how to specify a condition that the morphisms have to satisfy. I'll look into <code>cone</code></p>",
        "id": 255864124,
        "sender_full_name": "fosco",
        "timestamp": 1633174207
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.functor.const/src\">src#category_theory.functor.const</a></p>",
        "id": 255864126,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174209
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">functor.const</span> <span class=\"n\">tip</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">tip</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 255864149,
        "sender_full_name": "fosco",
        "timestamp": 1633174258
    },
    {
        "content": "<p>There's <code>functor.const</code> for you. You'll have to <code>import category_theory.const</code> to get it. Note that it is set up to be functorial, so you'll need to see how it is used.</p>",
        "id": 255864162,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174272
    },
    {
        "content": "<p>Read the module doc-string in the link I just gave you to see how to use <code>functor.const</code>.</p>",
        "id": 255864177,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174309
    },
    {
        "content": "<p>(Later you will be happy that <code>functor.const</code> is functorial in the constant. :-)</p>",
        "id": 255864228,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174334
    },
    {
        "content": "<p>(The doc-string for <code>functor.const</code> could be more helpful, I see. At least the module doc-string explains it.)</p>",
        "id": 255864248,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174364
    },
    {
        "content": "<p>it seems to me that this should work</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">wedge</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tip</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">dinat_trans</span> <span class=\"o\">(</span><span class=\"n\">functor.const</span> <span class=\"n\">tip</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but it doesn't</p>",
        "id": 255864285,
        "sender_full_name": "fosco",
        "timestamp": 1633174419
    },
    {
        "content": "<p>As I've been saying in the message above, <code>functor.const</code> takes more arguments than you are giving it.</p>",
        "id": 255864391,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174509
    },
    {
        "content": "<p>(Because it is set up to be functorial.)</p>",
        "id": 255864408,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174524
    },
    {
        "content": "<p>To see how to set up <code>wedge.hom</code> you should look at <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.cone_morphism/src\">src#category_theory.limits.cone_morphism</a>.</p>",
        "id": 255864425,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174552
    },
    {
        "content": "<p>You probably just need <code>(functor.const _).obj tip</code></p>",
        "id": 255864504,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174623
    },
    {
        "content": "<p>(And if you write <code>open functor</code> higher up in your file you can just write <code>const</code>, rather than <code>functor.const</code>.</p>",
        "id": 255864535,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174652
    },
    {
        "content": "<p>Error messages of the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">functor.const</span> <span class=\"n\">tip</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"bp\">?+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>are super useful, and worth learning how to interpret. It's saying that that first argument of <code>functor.const</code> is not an object of a category, but actually a type.</p>",
        "id": 255864641,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174742
    },
    {
        "content": "<p>It is expecting to be given the name of the \"source category\" for the constant functor that you want.</p>",
        "id": 255864660,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174762
    },
    {
        "content": "<p>Notice in your earlier <code>constant_functor</code> the source category was an \"implicit\" argument (i.e. given via curly braces { }). This means you can leave them out, but Lean has to be able to guess the correct value from context. That's not always a good idea, so the mathlib version <code>functor.const</code> has to be told the source category \"explicitly\".</p>",
        "id": 255864749,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174856
    },
    {
        "content": "<p>so, <code>const (domain) (object)</code> ?</p>",
        "id": 255864777,
        "sender_full_name": "fosco",
        "timestamp": 1633174894
    },
    {
        "content": "<p>The next difference is that <code>functor.const C</code> doesn't just take an object of <code>D</code> and spit out a functor <code>C \\func D</code>. It is actually giving you a functor from <code>C</code> to <code>C \\func D</code>.</p>",
        "id": 255864782,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174898
    },
    {
        "content": "<p>Hence we have to write <code>(const domain).obj object</code> to apply it to an object.</p>",
        "id": 255864793,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174917
    },
    {
        "content": "<p>(You could write <code>(const domain).map morphism</code> to apply it to a morphism (obtaining, of course, the identity morphism on your chosen constant.)</p>",
        "id": 255864844,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633174942
    },
    {
        "content": "<p>Eventually you need all these functoriality statements (even if automation takes care of plugging them in at the right places), so we tend to package them all up at the beginning, rather than thinking of them as separate constructions.</p>",
        "id": 255864897,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175011
    },
    {
        "content": "<p>I'm starting to understand, but I am still confused</p>\n<ol>\n<li>How can I possibly know how many arguments, and in what order, are needed by <code>const</code>, looking at its type here?</li>\n</ol>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">const</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"o\">(</span><span class=\"n\">J</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">,</span>\n    <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">j</span> <span class=\"n\">j'</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"mi\">ùüô</span> <span class=\"n\">X</span> <span class=\"o\">},</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n</code></pre></div>\n<ol start=\"2\">\n<li>I understand that this <code>const</code> gives a functor from <code>C</code> to  <code>C \\func D</code>, which is different from what I defined. Yet, <code>const (C·µí·µñ √ó C) tip</code> gives the same type mismatch.</li>\n</ol>",
        "id": 255865140,
        "sender_full_name": "fosco",
        "timestamp": 1633175247
    },
    {
        "content": "<p>Note that functors are not functions!</p>",
        "id": 255865157,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175272
    },
    {
        "content": "<p>If <code>F : C ‚•§ D</code>, and <code>X : C</code>, you can't just write <code>F X</code>.</p>",
        "id": 255865211,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175299
    },
    {
        "content": "<p>You need to write <code>F.obj X</code>.</p>",
        "id": 255865217,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175305
    },
    {
        "content": "<p>So you need to write <code>(const (C·µí·µñ √ó C)).obj tip</code></p>",
        "id": 255865231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175331
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/dinatural.20transformations/near/255865231\">said</a>:</p>\n<blockquote>\n<p>So you need to write <code>(const (C·µí·µñ √ó C)).obj tip</code></p>\n</blockquote>\n<p>Doesn't work! I tried.</p>",
        "id": 255865250,
        "sender_full_name": "fosco",
        "timestamp": 1633175349
    },
    {
        "content": "<p>Show me the error message?</p>",
        "id": 255865258,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175357
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"bp\">?</span> <span class=\"bp\">‚Üí</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n</code></pre></div>",
        "id": 255865263,
        "sender_full_name": "fosco",
        "timestamp": 1633175361
    },
    {
        "content": "<p>Might need to post the <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>.</p>",
        "id": 255865266,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175364
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">wedge</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tip</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">dinat_trans</span> <span class=\"o\">((</span><span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">tip</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 255865279,
        "sender_full_name": "fosco",
        "timestamp": 1633175382
    },
    {
        "content": "<p>Are you sure this <code>const</code> is <code>category_theory.functor.const</code>?</p>",
        "id": 255865289,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175398
    },
    {
        "content": "<p>(i.e. if you right-click on it and go-to-definition you land in the right place)</p>",
        "id": 255865339,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175417
    },
    {
        "content": "<p>It's possible you're seeing some other <code>const</code>, because I don't think it should have type <code>Type ? ‚Üí Type u_1</code>.</p>",
        "id": 255865366,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175453
    },
    {
        "content": "<p>Maybe you can post your whole file?</p>",
        "id": 255865375,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175464
    },
    {
        "content": "<p>Sorry to derail you by suggesting using <code>functor.const</code> instead of your own. In the long run it will pay off but I appreciate it is annoying now. :-)</p>",
        "id": 255865526,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175618
    },
    {
        "content": "<p>Now it works, if I write <code>functor.const</code>; for some reason <code>open</code>ing <code>functor</code> at the beginning doesn't work</p>",
        "id": 255865586,
        "sender_full_name": "fosco",
        "timestamp": 1633175648
    },
    {
        "content": "<p>Here's the whole file anyway</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.products.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.const</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n<span class=\"kn\">open</span> <span class=\"n\">functor</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">functor.map_prod</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">√ó</span> <span class=\"n\">D</span> <span class=\"bp\">‚•§</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dinat_trans</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">dinaturality</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">‚¶É</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">‚¶Ñ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n  <span class=\"n\">F.map_prod</span> <span class=\"n\">f.op</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"bp\">‚â´</span> <span class=\"n\">G.map_prod</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span>\n  <span class=\"n\">F.map_prod</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"bp\">‚â´</span> <span class=\"n\">G.map_prod</span> <span class=\"n\">f.op</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">wedge</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">wedge</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tip</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">dinat_trans</span> <span class=\"o\">((</span><span class=\"n\">functor.const</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">tip</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">cowedge</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tip</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">dinat_trans</span> <span class=\"n\">F</span> <span class=\"o\">((</span><span class=\"n\">functor.const</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">tip</span><span class=\"o\">))</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">U.tip</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V.tip</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">cowedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">U.tip</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V.tip</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- instance twisted : category (hom C) :=</span>\n<span class=\"c1\">--   { hom := _,</span>\n<span class=\"c1\">--   id := _,</span>\n<span class=\"c1\">--   comp := _,</span>\n<span class=\"c1\">--   id_comp' := _,</span>\n<span class=\"c1\">--   comp_id' := _,</span>\n<span class=\"c1\">--   assoc' := _ }</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">wedge</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 255865602,
        "sender_full_name": "fosco",
        "timestamp": 1633175669
    },
    {
        "content": "<p>Ah --- did you <code>open functor</code> inside or outside the <code>namespace category_theory</code>?</p>",
        "id": 255865627,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175710
    },
    {
        "content": "<p>outside</p>",
        "id": 255865642,
        "sender_full_name": "fosco",
        "timestamp": 1633175726
    },
    {
        "content": "<p>The problem is that the Haskell programmers put <code>functor</code> in the root namespace, to mean a type level functor like programmers like.</p>",
        "id": 255865667,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175755
    },
    {
        "content": "<p>And the real <code>functor</code> is only in the <code>category_theory</code> namespace.</p>",
        "id": 255865712,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175767
    },
    {
        "content": "<p>So you accidentally picked up the other one.</p>",
        "id": 255865720,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175777
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/dinatural.20transformations/near/255865667\">said</a>:</p>\n<blockquote>\n<p>The problem is that the Haskell programmers put <code>functor</code> in the root namespace, to mean a type level functor like programmers like.</p>\n</blockquote>\n<p>It's always haskellers' fault <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 255865741,
        "sender_full_name": "fosco",
        "timestamp": 1633175802
    },
    {
        "content": "<p>I've been wanting to trying move the programmers' <code>functor</code> into a namespace, as <code>control.functor</code>.</p>",
        "id": 255865745,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175804
    },
    {
        "content": "<p>But never did it.</p>",
        "id": 255865750,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175812
    },
    {
        "content": "<p>Maybe I'll go investigate that again.</p>",
        "id": 255865764,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175825
    },
    {
        "content": "<p>yet the same thing happens if I move the <code>open functor</code> inside the <code>category_theory</code> namespace</p>",
        "id": 255865776,
        "sender_full_name": "fosco",
        "timestamp": 1633175835
    },
    {
        "content": "<p>In any case, if you move the <code>open</code> inside, or write <code>open category_theory.functor</code>, you should be good.</p>",
        "id": 255865792,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633175848
    },
    {
        "content": "<p>yes, <code>open category_theory.functor</code> works.</p>",
        "id": 255865855,
        "sender_full_name": "fosco",
        "timestamp": 1633175886
    },
    {
        "content": "<p>Whew!</p>",
        "id": 255865859,
        "sender_full_name": "fosco",
        "timestamp": 1633175889
    },
    {
        "content": "<p>Next up:<br>\n get rid of your <code>instance : category (wedge ...)</code>, and instead first define <code>structure wedge.hom (...) := ...</code></p>",
        "id": 255866100,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633176113
    },
    {
        "content": "<p>By the way one answer to \"how do I figure out what inputs are implicit and what are explicit\" is \"just hover over the function definition and its type will pop up\" and another is <code>#check @const</code></p>",
        "id": 255866421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633176394
    },
    {
        "content": "<p>The complication here was that it wasn't either explicit or implicit: it was functorial.</p>",
        "id": 255866457,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633176438
    },
    {
        "content": "<p>Okay, well I'm off for now @fosco. Good luck. Reading some examples like arrow categories, comma categories, and categories of cones will be helpful for what you are doing next.</p>",
        "id": 255866529,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633176495
    },
    {
        "content": "<p>Thanks for your help!</p>",
        "id": 255866601,
        "sender_full_name": "fosco",
        "timestamp": 1633176587
    },
    {
        "content": "<p>This should be nearer to what you were suggesting:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">structure</span> <span class=\"n\">wedge_morphism</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">wedge</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">U.tip</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V.tip</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">w'</span>  <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">V.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">U.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">cowedge_morphism</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">cowedge</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">U.tip</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V.tip</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">w'</span>  <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">U.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">‚â´</span> <span class=\"n\">hom</span> <span class=\"bp\">=</span> <span class=\"n\">V.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">wedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">cowedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">cowedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 255866789,
        "sender_full_name": "fosco",
        "timestamp": 1633176743
    },
    {
        "content": "<p>(I added <code> [T : C·µí·µñ √ó C ‚•§ D]</code> among the variables)</p>",
        "id": 255866810,
        "sender_full_name": "fosco",
        "timestamp": 1633176780
    },
    {
        "content": "<p>Another thing you might want to try @fosco (if you didn't already) is doing Scott's problem sheet in LFTCM2020: clone <a href=\"https://github.com/leanprover-community/lftcm2020\">https://github.com/leanprover-community/lftcm2020</a> with <code>leanproject get lftcm2020</code>, open the lftcm2020 folder with VS Code, make your way to <code>src/exercises_sources/thursday/category_theory/</code> and try filling in the <code>sorry</code>s. Beforehand you might want to watch <a href=\"https://www.youtube.com/watch?v=1NUc-ZNC_2s&amp;list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N&amp;index=15\">the accompanying video</a>.</p>\n<div class=\"youtube-video message_inline_image\"><a data-id=\"1NUc-ZNC_2s\" href=\"https://www.youtube.com/watch?v=1NUc-ZNC_2s&amp;list=PLlF-CfQhukNlxexiNJErGJd2dte_J1t1N&amp;index=15\"><img src=\"https://uploads.zulipusercontent.net/207274411a9f0cd4eff1782ce28ff06b0c90b91d/68747470733a2f2f692e7974696d672e636f6d2f76692f314e55632d5a4e435f32732f64656661756c742e6a7067\"></a></div>",
        "id": 255866824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633176803
    },
    {
        "content": "<p>I watched part of Scott's video <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> it motivated me to enter here.</p>",
        "id": 255866960,
        "sender_full_name": "fosco",
        "timestamp": 1633176945
    },
    {
        "content": "<p>oh nice!</p>",
        "id": 255866974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633176959
    },
    {
        "content": "<p>Excellent!</p>",
        "id": 255867021,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633176971
    },
    {
        "content": "<p>I'm glad that people can find their way to that stuff independently of being pointed there from here</p>",
        "id": 255867031,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633176983
    },
    {
        "content": "<p>Don't forgot to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">restate_axiom</span> <span class=\"n\">wedge_morphism.w'</span>     <span class=\"c1\">-- this will make a copy called `w`, and clean up some mess `. obviously` leaves</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">wedge_morphism.w</span>\n</code></pre></div>",
        "id": 255867053,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177021
    },
    {
        "content": "<p>It's important as you build new structures that you simultaneously define <code>simp</code> lemmas which make use of the bundled axioms. If you do this right, you can avoid lots of boring proofs!</p>",
        "id": 255867087,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177068
    },
    {
        "content": "<p>I feel I need a more systematic approach to understand this kind of subtlety.</p>",
        "id": 255867150,
        "sender_full_name": "fosco",
        "timestamp": 1633177110
    },
    {
        "content": "<p>Hmm... before we go there. I don't think</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">wedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">eq_to_hom</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>can possibly be working.</p>",
        "id": 255867182,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177146
    },
    {
        "content": "<p>Because <code>id</code> and <code>comp</code> should be constructing new <code>wedge_morphism</code>s.</p>",
        "id": 255867213,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177184
    },
    {
        "content": "<p>After all, you need to check the condition holds for the composition of two wedge morphisms, using the conditions for the two wedge morphisms!</p>",
        "id": 255867279,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177217
    },
    {
        "content": "<p>(Or rather, we hope that we don't need to check this, but that Lean will check it for us.)</p>",
        "id": 255867293,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177233
    },
    {
        "content": "<p>uh, probably they were auto-filled <code>sorry</code>s; the problem though is earlier</p>",
        "id": 255867301,
        "sender_full_name": "fosco",
        "timestamp": 1633177243
    },
    {
        "content": "<p>in the definition of hom</p>",
        "id": 255867305,
        "sender_full_name": "fosco",
        "timestamp": 1633177248
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">synthesized</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">definitionally</span> <span class=\"n\">equal</span> <span class=\"n\">to</span> <span class=\"n\">expression</span> <span class=\"n\">inferred</span> <span class=\"kd\">by</span> <span class=\"n\">typing</span> <span class=\"n\">rules</span><span class=\"o\">,</span> <span class=\"n\">synthesized</span>\n  <span class=\"bp\">‚Åá</span>\n<span class=\"n\">inferred</span>\n  <span class=\"n\">F</span>\n</code></pre></div>",
        "id": 255867335,
        "sender_full_name": "fosco",
        "timestamp": 1633177284
    },
    {
        "content": "<p>I just copied from the definition of <code>cone_category</code></p>",
        "id": 255867349,
        "sender_full_name": "fosco",
        "timestamp": 1633177308
    },
    {
        "content": "<p>Hrmm... we need to sort that out first.</p>",
        "id": 255867427,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177362
    },
    {
        "content": "<p>Now, you said above that you introduced <code>T</code> as a variable, but you put it in square brackets. That was wrong -- square brackets are only for typeclasses.</p>",
        "id": 255867458,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177397
    },
    {
        "content": "<p>(A good rule of thumb, by the way, is to always fix the first error in the file first, and to not proceed past errors! <code>sorry</code> is okay, but an error higher up can really obscure what's going on.)</p>",
        "id": 255867525,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177445
    },
    {
        "content": "<p>Changing the square brackets to <code>{ }</code> on <code>T</code> will give you the correct error message now.</p>",
        "id": 255867600,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177521
    },
    {
        "content": "<p>So you want something more like:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">wedge_morphism</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">wedge</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">U.tip</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V.tip</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">w'</span>  <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">V.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">U.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">wedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">f.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.hom</span><span class=\"o\">‚ü©,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>This still has an error, but notice that in the <code>id</code> field we didn't need to provide the proof of <code>w'</code>! Hooray, Lean did it for us.</p>",
        "id": 255867694,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177612
    },
    {
        "content": "<p>However in the <code>comp</code> field Lean complains that it can't prove <code>w'</code>.</p>",
        "id": 255867705,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177626
    },
    {
        "content": "<p>But if you add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">restate_axiom</span> <span class=\"n\">wedge_morphism.w'</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">wedge_morphism.w</span>\n</code></pre></div>\n<p>then that error goes away too! Hooray!</p>",
        "id": 255867732,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177673
    },
    {
        "content": "<p>But there are still more errors: the <code>id</code> and <code>comp</code> fields both typecheck, but there's an error on the <code>{</code> of the <code>instance</code>. If you read the messages, you'll see that it's failing to prove the <code>comp_id'</code> <code>id_comp'</code> and <code>assoc'</code> fields of <code>category</code>.</p>",
        "id": 255867805,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177729
    },
    {
        "content": "<p>The reason here is that we haven't explained to Lean how one checks that two <code>wedge_morphism</code>s are equal: you check that their <code>hom</code>s are equal!</p>",
        "id": 255867828,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177759
    },
    {
        "content": "<p>So we add</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">wedge_morphis.ext</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">wedge</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">wedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f.hom</span> <span class=\"bp\">=</span> <span class=\"n\">g.hom</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 255867905,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177822
    },
    {
        "content": "<p>The <code>@[ext]</code> annotation here says: \"if automation is trying to prove things are equal by the strategy of proving they are equal \"componentwise\" in some sense, try using this lemma!\"</p>",
        "id": 255867936,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177870
    },
    {
        "content": "<p>After this,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">wedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">‚ü©,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">f.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.hom</span><span class=\"o\">‚ü©,</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>compiles with no errors.</p>",
        "id": 255867946,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177885
    },
    {
        "content": "<p>Okay, but now I am really leaving for the night. :-) Have fun.</p>",
        "id": 255867959,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633177901
    },
    {
        "content": "<p>:-) sure, I will.</p>\n<p>Thanks again</p>",
        "id": 255868014,
        "sender_full_name": "fosco",
        "timestamp": 1633177936
    },
    {
        "content": "<p>the same solution, for cowedges, does not work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[ext]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">wedge_morphism.ext</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">wedge</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">wedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f.hom</span> <span class=\"bp\">=</span> <span class=\"n\">g.hom</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">cowedge_morphism.ext</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">cowedge</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">cowedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f.hom</span> <span class=\"bp\">=</span> <span class=\"n\">g.hom</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">wedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span> <span class=\"o\">‚ü©,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">f.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.hom</span><span class=\"o\">‚ü©,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">cowedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">cowedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span> <span class=\"o\">‚ü©,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">f.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.hom</span><span class=\"o\">‚ü©</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 255870964,
        "sender_full_name": "fosco",
        "timestamp": 1633180901
    },
    {
        "content": "<p>There is an unsolved goal showing that the composition of the hom parts of is a cowedge; something I would easily prove with a couple of <code>cong</code>s in agda, but here I have no idea how to move</p>",
        "id": 255871077,
        "sender_full_name": "fosco",
        "timestamp": 1633181001
    },
    {
        "content": "<p>...I guess I should move to simpler exercises.</p>",
        "id": 255871087,
        "sender_full_name": "fosco",
        "timestamp": 1633181018
    },
    {
        "content": "<p>Can you paste everything you have so far as a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>? I'm only half-watching this thread and so I'm missing all the imports/opens etc, but I can try to help.</p>",
        "id": 255871330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633181252
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.products.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.const</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.functor</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">functor.map_prod</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">√ó</span> <span class=\"n\">D</span> <span class=\"bp\">‚•§</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dinat_trans</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">dinaturality</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">‚¶É</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">‚¶Ñ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n  <span class=\"n\">F.map_prod</span> <span class=\"n\">f.op</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"bp\">‚â´</span> <span class=\"n\">G.map_prod</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span>\n  <span class=\"n\">F.map_prod</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"bp\">‚â´</span> <span class=\"n\">G.map_prod</span> <span class=\"n\">f.op</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">wedge</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tip</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">dinat_trans</span> <span class=\"o\">((</span><span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">tip</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">cowedge</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tip</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">dinat_trans</span> <span class=\"n\">F</span> <span class=\"o\">((</span><span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">tip</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">wedge_morphism</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">wedge</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">U.tip</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V.tip</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">w'</span>  <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">V.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">U.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">cowedge_morphism</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">cowedge</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">U.tip</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V.tip</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">w'</span>  <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">U.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">‚â´</span> <span class=\"n\">hom</span> <span class=\"bp\">=</span> <span class=\"n\">V.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n<span class=\"n\">restate_axiom</span> <span class=\"n\">wedge_morphism.w'</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">wedge_morphism.w</span>\n\n<span class=\"n\">restate_axiom</span> <span class=\"n\">cowedge_morphism.w'</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">cowedge_morphism.w</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">wedge_morphism.ext</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">wedge</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">wedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f.hom</span> <span class=\"bp\">=</span> <span class=\"n\">g.hom</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">cowedge_morphism.ext</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">cowedge</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">cowedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f.hom</span> <span class=\"bp\">=</span> <span class=\"n\">g.hom</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">wedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span> <span class=\"o\">‚ü©,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">f.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.hom</span><span class=\"o\">‚ü©,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">cowedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">cowedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span> <span class=\"o\">‚ü©,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">f.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.hom</span><span class=\"o\">‚ü©</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- instance twisted : category (hom C) :=</span>\n<span class=\"c1\">--   { hom := _,</span>\n<span class=\"c1\">--   id := _,</span>\n<span class=\"c1\">--   comp := _,</span>\n<span class=\"c1\">--   id_comp' := _,</span>\n<span class=\"c1\">--   comp_id' := _,</span>\n<span class=\"c1\">--   assoc' := _ }</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 255872029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633181916
    },
    {
        "content": "<p>So if I click just before the red underline then I see that the goal is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">‚ä¢</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">X.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.hom</span> <span class=\"bp\">=</span> <span class=\"n\">Z.Œ±.app</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 255872066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633181973
    },
    {
        "content": "<p>so in the definition of composition of morphisms in this cowedge category, so far you have said \"let X, Y, Z be objects of <code>cowedge F</code> and say <code>f : X -&gt; Y</code> and <code>g : Y -&gt; Z</code> are morphisms.\" We now want to define a morphism from X to Z and right now to do that Lean's understanding is that you need to prove (some statement about a diagram commuting)</p>",
        "id": 255872184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633182091
    },
    {
        "content": "<p>which looks odd to me</p>",
        "id": 255872276,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633182186
    },
    {
        "content": "<p>oh this looks like w'</p>",
        "id": 255872365,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633182262
    },
    {
        "content": "<p>oh, so Lean is complaining that it can't prove w'</p>",
        "id": 255872423,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633182334
    },
    {
        "content": "<p>automation is failing to do your diagram chase</p>",
        "id": 255872486,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633182370
    },
    {
        "content": "<p>Is it true?</p>",
        "id": 255872496,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633182384
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">cowedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">cowedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span> <span class=\"o\">‚ü©,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">f.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.hom</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"gr\">sorry</span>\n  <span class=\"kd\">end</span><span class=\"o\">‚ü©</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>gives you the goal</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span>\n<span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">cowedge</span> <span class=\"n\">F</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span>\n<span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">X.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.hom</span> <span class=\"bp\">=</span> <span class=\"n\">Z.Œ±.app</span> <span class=\"n\">j</span>\n</code></pre></div>\n<p>Is that goal true?</p>",
        "id": 255872535,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633182454
    },
    {
        "content": "<p>yeah I can prove it</p>",
        "id": 255872844,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633182741
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">cowedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">cowedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span> <span class=\"o\">‚ü©,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">f.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.hom</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">f_hom</span> <span class=\"n\">f_w</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">g_hom</span> <span class=\"n\">g_w</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">f_w</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">g_w</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">g_w</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">f_w</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">‚ü©</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 255872961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633182866
    },
    {
        "content": "<p>Scott's <code>obviously</code> tactic seems to find the analogous proof for <code>wedge F</code> but not for this one. I have no idea how the automation works but there's a hand-constructed proof. It might be the case that with some more magic you can get Lean to find this proof itself</p>",
        "id": 255873025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633182942
    },
    {
        "content": "<p>and here's what the proof looked like before I golfed it (so you can see my thought process):</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">cowedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">cowedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span> <span class=\"o\">‚ü©,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">f.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.hom</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">intro</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">f_hom</span> <span class=\"n\">f_w</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">g_hom</span> <span class=\"n\">g_w</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">f_w</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">g_w</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">g_w</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">f_w</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">category.assoc</span><span class=\"o\">,</span>\n  <span class=\"kd\">end</span><span class=\"o\">‚ü©</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 255873118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633183047
    },
    {
        "content": "<p>and after:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">cowedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">cowedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span> <span class=\"o\">‚ü©,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">f.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.hom</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">f_w</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">g_w</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">f_w</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">g_w</span> <span class=\"n\">j</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">‚ü©</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 255873196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633183109
    },
    {
        "content": "<p>Amazing!</p>",
        "id": 255873352,
        "sender_full_name": "fosco",
        "timestamp": 1633183228
    },
    {
        "content": "<p>So, when I define a structure like wedge_morphism, <code>cases</code> allows me to access its fields (<code>hom</code> and <code>w'</code> in this case)</p>",
        "id": 255873392,
        "sender_full_name": "fosco",
        "timestamp": 1633183276
    },
    {
        "content": "<p>Yes, and unfortunately (because we are trying to be clever with automation) you can see that the type of <code>f_w</code> is <code>auto_param (‚àÄ (j : C), X.Œ±.app j ‚â´ f_hom = Y.Œ±.app j) (name.mk_string \"obviously\" name.anonymous)</code>, but I have seen that sufficiently often to know that what it actually says is just <code>‚àÄ (a : C), X.Œ±.app a ‚â´ f_hom = Y.Œ±.app a</code> so I could just feed <code>j</code> into that function and get <code>X.Œ±.app j ‚â´ f_hom = Y.Œ±.app j</code></p>",
        "id": 255873845,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633183694
    },
    {
        "content": "<p>I am bewildered why <code>simp at f_w</code> doesn't get rid of the <code>auto_param</code>. <code>rw auto_param_eq at f_w,</code> gives</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kd\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">auto_param</span> <span class=\"bp\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">?</span><span class=\"n\">m_2</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"bp\">...</span>\n<span class=\"n\">f_w</span> <span class=\"o\">:</span> <span class=\"n\">auto_param</span> <span class=\"o\">(</span><span class=\"bp\">‚àÄ</span> <span class=\"o\">(</span><span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">),</span> <span class=\"n\">X.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f_hom</span> <span class=\"bp\">=</span> <span class=\"n\">Y.Œ±.app</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">name.mk_string</span> <span class=\"s2\">\"obviously\"</span> <span class=\"n\">name.anonymous</span><span class=\"o\">),</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 255874277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633184119
    },
    {
        "content": "<p>Oh I am a fool, it <em>does</em> work, it just leaves the old one behind because it's in the goal (the error above is because there's a second <code>f_w</code> later on in the context)</p>",
        "id": 255874362,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633184175
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">cowedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">cowedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span> <span class=\"o\">‚ü©,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">f.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.hom</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">cases</span> <span class=\"n\">f</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">f_w</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span> <span class=\"n\">g</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"n\">g_w</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">‚ä¢</span> <span class=\"n\">f_w</span> <span class=\"n\">g_w</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- local context now looks nice</span>\n    <span class=\"c1\">-- `obviously` still fails though</span>\n    <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">f_w</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">‚Üê</span> <span class=\"n\">g_w</span> <span class=\"n\">j</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">‚ü©</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 255874510,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633184344
    },
    {
        "content": "<p>This works fine for me...</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.products.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.const</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.functor</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">functor.map_prod</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">√ó</span> <span class=\"n\">D</span> <span class=\"bp\">‚•§</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">W</span> <span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">W</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">W</span><span class=\"o\">,</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">Z</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">F.map</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">dinat_trans</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">app</span> <span class=\"o\">:</span> <span class=\"bp\">Œ†</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">F.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">G.obj</span> <span class=\"o\">(</span><span class=\"n\">op</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"n\">X</span><span class=\"o\">))</span>\n<span class=\"o\">(</span><span class=\"n\">dinaturality'</span> <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"o\">‚¶É</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">‚¶Ñ</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span><span class=\"o\">),</span>\n  <span class=\"n\">F.map_prod</span> <span class=\"n\">f.op</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">‚â´</span> <span class=\"n\">app</span> <span class=\"n\">X</span> <span class=\"bp\">‚â´</span> <span class=\"n\">G.map_prod</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">=</span>\n  <span class=\"n\">F.map_prod</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"n\">f</span> <span class=\"bp\">‚â´</span> <span class=\"n\">app</span> <span class=\"n\">Y</span> <span class=\"bp\">‚â´</span> <span class=\"n\">G.map_prod</span> <span class=\"n\">f.op</span> <span class=\"o\">(</span><span class=\"mi\">ùüô</span> <span class=\"n\">_</span><span class=\"o\">)</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n<span class=\"n\">restate_axiom</span> <span class=\"n\">dinat_trans.dinaturality'</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">reassoc</span><span class=\"o\">]</span> <span class=\"n\">dinat_trans.dinaturality</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">wedge</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tip</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">dinat_trans</span> <span class=\"o\">((</span><span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">tip</span><span class=\"o\">)</span> <span class=\"n\">F</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">cowedge</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">tip</span> <span class=\"o\">:</span> <span class=\"n\">D</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">Œ±</span> <span class=\"o\">:</span> <span class=\"n\">dinat_trans</span> <span class=\"n\">F</span> <span class=\"o\">((</span><span class=\"n\">const</span> <span class=\"o\">(</span><span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">tip</span><span class=\"o\">))</span>\n\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">wedge_morphism</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">wedge</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">U.tip</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V.tip</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">w'</span>  <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">V.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">=</span> <span class=\"n\">U.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">cowedge_morphism</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">cowedge</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">U.tip</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">V.tip</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">w'</span>  <span class=\"o\">:</span> <span class=\"bp\">‚àÄ</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">U.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">‚â´</span> <span class=\"n\">hom</span> <span class=\"bp\">=</span> <span class=\"n\">V.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">.</span> <span class=\"n\">obviously</span><span class=\"o\">)</span>\n\n<span class=\"n\">restate_axiom</span> <span class=\"n\">wedge_morphism.w'</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">reassoc</span><span class=\"o\">]</span> <span class=\"n\">wedge_morphism.w</span>\n\n<span class=\"n\">restate_axiom</span> <span class=\"n\">cowedge_morphism.w'</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">reassoc</span><span class=\"o\">]</span> <span class=\"n\">cowedge_morphism.w</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">wedge_morphism.ext</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">wedge</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">wedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f.hom</span> <span class=\"bp\">=</span> <span class=\"n\">g.hom</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[ext]</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">cowedge_morphism.ext</span> <span class=\"o\">{</span><span class=\"n\">U</span> <span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"n\">cowedge</span> <span class=\"n\">T</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">cowedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">w</span> <span class=\"o\">:</span> <span class=\"n\">f.hom</span> <span class=\"bp\">=</span> <span class=\"n\">g.hom</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">tidy</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span>  <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">wedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span>   <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span> <span class=\"o\">‚ü©,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">f.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.hom</span><span class=\"o\">‚ü©,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"o\">(</span><span class=\"n\">cowedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">cowedge_morphism</span> <span class=\"n\">U</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span> <span class=\"mi\">ùüô</span> <span class=\"n\">_</span> <span class=\"o\">‚ü©,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"o\">‚ü®</span><span class=\"n\">f.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.hom</span><span class=\"o\">‚ü©</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- instance twisted : category (hom C) :=</span>\n<span class=\"c1\">--   { hom := _,</span>\n<span class=\"c1\">--   id := _,</span>\n<span class=\"c1\">--   comp := _,</span>\n<span class=\"c1\">--   id_comp' := _,</span>\n<span class=\"c1\">--   comp_id' := _,</span>\n<span class=\"c1\">--   assoc' := _ }</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 255875456,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633185344
    },
    {
        "content": "<p>The missing part was this</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">restate_axiom</span> <span class=\"n\">dinat_trans.dinaturality'</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">,</span> <span class=\"n\">reassoc</span><span class=\"o\">]</span> <span class=\"n\">dinat_trans.dinaturality</span>\n</code></pre></div>",
        "id": 255875563,
        "sender_full_name": "fosco",
        "timestamp": 1633185461
    },
    {
        "content": "<p>I also added the reassoc attribute to the other simp lemmas</p>",
        "id": 255875624,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633185497
    },
    {
        "content": "<p>But I don't know exactly what made it work :)</p>",
        "id": 255875643,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633185521
    },
    {
        "content": "<p>lean magic</p>",
        "id": 255875673,
        "sender_full_name": "fosco",
        "timestamp": 1633185559
    },
    {
        "content": "<p>Now: the next step is defining a category having object the hom-class of another given category</p>",
        "id": 255875690,
        "sender_full_name": "fosco",
        "timestamp": 1633185590
    },
    {
        "content": "<p>(probably there is a ton of other things to do, but the <a href=\"https://ncatlab.org/nlab/show/twisted+arrow+category\">twisted arrow category</a> seems to be the next logical step)</p>",
        "id": 255875753,
        "sender_full_name": "fosco",
        "timestamp": 1633185630
    },
    {
        "content": "<p>We do have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.arrow\">docs#category_theory.arrow</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.comma\">docs#category_theory.comma</a></p>",
        "id": 255875766,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633185654
    },
    {
        "content": "<p>perfect: Tw(C) is the comma category of the terminal functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>‚àó</mo><mo>‚Üí</mo><mi>S</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">* \\to Set</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord\">‚àó</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span></span></span></span> and of the hom functor of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span></p>",
        "id": 255875922,
        "sender_full_name": "fosco",
        "timestamp": 1633185836
    },
    {
        "content": "<p>Now, is this an instance or a definition?</p>",
        "id": 255876158,
        "sender_full_name": "fosco",
        "timestamp": 1633186060
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.comma\">docs#category_theory.comma</a> is itself a structure, which is endowed with a category instance</p>",
        "id": 255876232,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633186096
    },
    {
        "content": "<p>I would like to write \"given a category C, there is a category Tw(C) done so and so\"</p>",
        "id": 255876371,
        "sender_full_name": "fosco",
        "timestamp": 1633186282
    },
    {
        "content": "<p>is this an instance of category, or the definition of a new category?</p>",
        "id": 255876384,
        "sender_full_name": "fosco",
        "timestamp": 1633186303
    },
    {
        "content": "<p>It's a definition, and you put a category instance on top of it</p>",
        "id": 255876468,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633186383
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[derive category]</span>\n<span class=\"kd\">def</span> <span class=\"n\">twisted</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"n\">comma</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"c1\">-- fill in the functors</span>\n</code></pre></div>",
        "id": 255876489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633186415
    },
    {
        "content": "<p>It doesn't work:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">don't</span> <span class=\"n\">know</span> <span class=\"n\">how</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">placeholder</span>\n<span class=\"n\">context</span><span class=\"o\">:</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"kt\">Sort</span> <span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 255876711,
        "sender_full_name": "fosco",
        "timestamp": 1633186654
    },
    {
        "content": "<p>(also, unknown identifier <code>comma</code>, but that's going to be solved with the right <code>open</code> I guess)</p>",
        "id": 255876724,
        "sender_full_name": "fosco",
        "timestamp": 1633186676
    },
    {
        "content": "<p>You're probably missing an import</p>",
        "id": 255876771,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633186691
    },
    {
        "content": "<p>What are the two functors precisely? The initial one from *, but what do you mean by the hom functor?</p>",
        "id": 255876791,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633186733
    },
    {
        "content": "<p>The one from Cop x C to Set?</p>",
        "id": 255876821,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633186778
    },
    {
        "content": "<p>the functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>hom</mi><mo>‚Å°</mo><mo>:</mo><msup><mi>C</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup><mo>√ó</mo><mi>C</mi><mo>‚Üí</mo><mi>S</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\hom : C^{op} \\times C \\to Set</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mop\">hom</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">√ó</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span></span></span></span> sending <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(X,Y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>hom</mi><mo>‚Å°</mo><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\hom(X,Y)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">hom</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">)</span></span></span></span> and $(u,v)$ to the function <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo>‚Ü¶</mo><mi>v</mi><mi>f</mi><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">f\\mapsto vfu</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Ü¶</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord mathnormal\">u</span></span></span></span></p>",
        "id": 255876829,
        "sender_full_name": "fosco",
        "timestamp": 1633186792
    },
    {
        "content": "<p>but I would like to re-define these basic objects, and refactor later using more high-level stuff... I feel I'm losing the grip of the problem.</p>",
        "id": 255876964,
        "sender_full_name": "fosco",
        "timestamp": 1633186869
    },
    {
        "content": "<p>I need baby steps. How do I define a category with a single object and a single morphism?</p>",
        "id": 255876977,
        "sender_full_name": "fosco",
        "timestamp": 1633186896
    },
    {
        "content": "<p>how do I define a functor from said category to Set, picking the singleton set?</p>",
        "id": 255876986,
        "sender_full_name": "fosco",
        "timestamp": 1633186914
    },
    {
        "content": "<p>when I have these blocks, and the hom functor above, I can try to define <code>twisted</code></p>",
        "id": 255877033,
        "sender_full_name": "fosco",
        "timestamp": 1633186935
    },
    {
        "content": "<p>Gotcha. So we have the constant functor as you already know, and for the hom functor we can use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.yoneda\">docs#category_theory.yoneda</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.uncurry\">docs#category_theory.uncurry</a> (and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.prod.swap\">docs#category_theory.prod.swap</a> if needed)</p>",
        "id": 255877147,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633187067
    },
    {
        "content": "<p>yoneda + uncurry gives hom, I understand, but what about the terminal category?</p>",
        "id": 255877248,
        "sender_full_name": "fosco",
        "timestamp": 1633187168
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.discrete\">docs#category_theory.discrete</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/punit\">docs#punit</a></p>",
        "id": 255877267,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633187190
    },
    {
        "content": "<p>so <code>category_theory.discrete punit</code> is the terminal category</p>",
        "id": 255877301,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633187230
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">hom_functor</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"n\">uncurry</span> <span class=\"n\">yoneda</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">terminal_category</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">category_theory.discrete</span> <span class=\"n\">punit</span>\n</code></pre></div>\n<p>I have no idea what I'm doing <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 255877422,
        "sender_full_name": "fosco",
        "timestamp": 1633187379
    },
    {
        "content": "<p>(mostly because I have no idea how to write the generic \"this is of type that\")</p>",
        "id": 255877509,
        "sender_full_name": "fosco",
        "timestamp": 1633187454
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"432631\">@fosco</span> what do you mean?</p>",
        "id": 255877604,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633187549
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">terminal_category</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">category_theory.discrete_category</span> <span class=\"n\">punit</span>\n</code></pre></div>\n<p><span aria-label=\"this\" class=\"emoji emoji-1f446\" role=\"img\" title=\"this\">:this:</span>  should be <code>instance</code>. You are instructing lean how to put a category structure on the type <code>unit</code>.</p>",
        "id": 255877623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633187590
    },
    {
        "content": "<p>But you can also just use <code>category_theory.discrete punit</code>, as Adam suggested.<br>\n<code>category_theory.discrete</code> is a function that eats a type, and spits out that same type (the identity, ha!)<br>\nBut the upshot is that if a type is wrapped in this identity function, then Lean endows it with the category structure that has no homs except for the identity homs.</p>",
        "id": 255877711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633187684
    },
    {
        "content": "<p>No: <code>category_theory.discrete punit</code> throws a mismatch</p>",
        "id": 255877816,
        "sender_full_name": "fosco",
        "timestamp": 1633187789
    },
    {
        "content": "<p><code>category_theory.discrete_category punit</code> does not</p>",
        "id": 255877821,
        "sender_full_name": "fosco",
        "timestamp": 1633187800
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/dinatural.20transformations/near/255877604\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"432631\">fosco</span> what do you mean?</p>\n</blockquote>\n<p>I mean that I have no idea how to turn into Lean the definition I have in mind</p>",
        "id": 255877840,
        "sender_full_name": "fosco",
        "timestamp": 1633187843
    },
    {
        "content": "<p>I see there's a lot of stuff already written, but I feel like I'm the passenger in a bus; when the trip is finished I don't remember the road I took. I learn by driving.</p>",
        "id": 255877908,
        "sender_full_name": "fosco",
        "timestamp": 1633187906
    },
    {
        "content": "<p>My problem is small, and I want an elementary solution; I don't care there is a library that does it already, I <em>need</em> to see how to write down the definition I want</p>",
        "id": 255877928,
        "sender_full_name": "fosco",
        "timestamp": 1633187940
    },
    {
        "content": "<p>You are helping a lot, but it is exhausting to say the least.</p>",
        "id": 255877939,
        "sender_full_name": "fosco",
        "timestamp": 1633187953
    },
    {
        "content": "<p>I want to define a category with a single object and a single morphism. I want to define a functor from it to Set, that picks the singleton</p>",
        "id": 255877957,
        "sender_full_name": "fosco",
        "timestamp": 1633187985
    },
    {
        "content": "<p>So you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">unit</span> <span class=\"o\">:=</span>\n<span class=\"n\">_</span>\n</code></pre></div>\n<p>And use the <span aria-label=\"bulb\" class=\"emoji emoji-1f4a1\" role=\"img\" title=\"bulb\">:bulb:</span> to get a skeleton.</p>",
        "id": 255878055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633188074
    },
    {
        "content": "<p>After that, you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">terminal_functor</span> <span class=\"o\">:</span> <span class=\"n\">unit</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"n\">_</span>\n</code></pre></div>\n<p>etc...</p>",
        "id": 255878064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1633188096
    },
    {
        "content": "<p>ok, I'll give it a try. But now I need a break</p>\n<p>Thanks!</p>",
        "id": 255878713,
        "sender_full_name": "fosco",
        "timestamp": 1633188809
    },
    {
        "content": "<p>I made you a video explaining how to construct these things:<br>\n<a href=\"/user_uploads/3121/DgCaDMjoy4grsCoPdioC2tHu/2021-10-02_10-31-46.mkv\">2021-10-02_10-31-46.mkv</a></p>",
        "id": 255882951,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633193206
    },
    {
        "content": "<p>wow, many thanks!</p>",
        "id": 255884505,
        "sender_full_name": "fosco",
        "timestamp": 1633194741
    },
    {
        "content": "<p>No problem. There are a few subtleties with universe parameters, as you can see...</p>",
        "id": 255884863,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1633195097
    },
    {
        "content": "<p>heh, yeah <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> I would have lost a few hours after those...</p>",
        "id": 255885816,
        "sender_full_name": "fosco",
        "timestamp": 1633196098
    },
    {
        "content": "<p>Just coming back to explain why the <code>reassoc</code> attribute Adam suggested is useful!</p>",
        "id": 255908431,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633219794
    },
    {
        "content": "<p>The goal automation was stuck on was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span>\n<span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"n\">cowedge</span> <span class=\"n\">F</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Y</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">Z</span>\n<span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">C</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">X.Œ±.app</span> <span class=\"n\">j</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f.hom</span> <span class=\"bp\">‚â´</span> <span class=\"n\">g.hom</span> <span class=\"bp\">=</span> <span class=\"n\">Z.Œ±.app</span> <span class=\"n\">j</span>\n</code></pre></div>",
        "id": 255908488,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633219832
    },
    {
        "content": "<p>You might wonder: surely <code>f.w : X.Œ±.app j ‚â´ f.hom = Y.Œ±.app j</code>, which is a <code>@[simp]</code> lemma, should fire here when automation calls <code>simp</code>, reducing the goal to <code>Y.Œ±.app j ‚â´ g.hom = Z.Œ±.app j</code>, which is in turn solvable by <code>simp</code> using <code>g.w</code>.</p>",
        "id": 255908535,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633219904
    },
    {
        "content": "<p>The problem is associativity: the goal is actually <code>X.Œ±.app j ‚â´ (f.hom ‚â´ g.hom)</code> = <a href=\"http://Z.Œ±.app\">Z.Œ±.app</a> j<code> and so </code>f.w` doesn't immediately apply.</p>",
        "id": 255908601,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633219940
    },
    {
        "content": "<p>We could deal with this problem by hand, by rewriting using <code>category.assoc</code> to rebracket and then using <code>f.w</code> and <code>g.w</code>.</p>",
        "id": 255908616,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633219975
    },
    {
        "content": "<p>However we could also realise that it would be helpful if there was a lemma <code>f.w_assoc : ‚àÄ h, X.Œ±.app j ‚â´ (f.hom ‚â´ h) = Y.Œ±.app j ‚â´ h</code>, where we are quantifying over some arbitrary other morphism <code>h</code>.</p>",
        "id": 255908721,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633220092
    },
    {
        "content": "<p>If this were a <code>@[simp]</code> lemma, then <code>simp</code> could discharge the original goal by using <code>f.w_assoc g.hom</code>, and then using <code>g.w</code>.</p>",
        "id": 255908742,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633220120
    },
    {
        "content": "<p>Writing <code>attribute [reassoc] wedge_morphism.w</code> achieves exactly this! The reassoc attribute causes Lean to go away and inspect the lemma, realise it is an equation in a category involving a composition on the LHS, and automatically generate the additional lemma <code>wedge_morphism.w_assoc</code>.</p>",
        "id": 255908812,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633220177
    },
    {
        "content": "<p>In fact, you should try writing <code>#print wedge_morphism.w_assoc</code> to verify that this lemma was automatically created, and behaves as I indicated.</p>",
        "id": 255908825,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633220206
    },
    {
        "content": "<p>This trick largely ameliorates dealing with associativity in 1-categories. We can work with all our expressions in \"simp normal form\", here meaning \"all associated to the right\", but lemmas about compositions have automatically generated helper lemmas that allow them to apply in the middle of a composition.</p>",
        "id": 255908936,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633220314
    },
    {
        "content": "<p>(Sadly we have not implemented the planar-graph-pattern-matching that would be required to do this in 2-categories / monoidal categories. :-) One day!)</p>",
        "id": 255909038,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633220406
    },
    {
        "content": "<p>Thanks a lot! So, next step is define the twisted arrow category of C</p>",
        "id": 255935908,
        "sender_full_name": "fosco",
        "timestamp": 1633250863
    },
    {
        "content": "<p>I need</p>\n<ol>\n<li>the hom functor: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mrow><mi>hom</mi><mo>‚Å°</mo></mrow><mi>C</mi></msub><mo>:</mo><msup><mi>C</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup><mo>√ó</mo><mi>C</mi><mo>‚Üí</mo><mi>S</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">\\hom_C : C^{op}\\times C \\to Set</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mop\"><span class=\"mop\">hom</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">C</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">√ó</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span></span></span></span></li>\n<li>the terminal functor, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>‚àó</mo><mo>‚Üí</mo><mi>S</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">* \\to Set</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord\">‚àó</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span></span></span></span> choosing the singleton</li>\n<li>a comma construction.</li>\n</ol>\n<p>I have 2. 1 can be obtained uncurrying yoneda. 3 is already there</p>",
        "id": 255935978,
        "sender_full_name": "fosco",
        "timestamp": 1633250931
    },
    {
        "content": "<p>This is not what I initially wanted to use to define Tw(C), but nevermind, maybe there will be a theorem later.</p>",
        "id": 255935996,
        "sender_full_name": "fosco",
        "timestamp": 1633250962
    },
    {
        "content": "<p>Remember that <code>Set</code> is called <code>Type</code> now. :-)</p>",
        "id": 255936082,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633251045
    },
    {
        "content": "<p>See <code>category_theory.hom_functor</code>: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.functor.hom/src\">src#category_theory.functor.hom</a></p>",
        "id": 255936118,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633251112
    },
    {
        "content": "<p>We also have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.category_of_elements/src\">src#category_theory.category_of_elements</a>.</p>",
        "id": 255936354,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633251355
    },
    {
        "content": "<p>which might give you a one-liner definition of the twisted arrow category!</p>",
        "id": 255936404,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633251378
    },
    {
        "content": "<p>The problem is always the same, I don't know the syntax with which I can invoke the right definition</p>",
        "id": 255936460,
        "sender_full_name": "fosco",
        "timestamp": 1633251478
    },
    {
        "content": "<p>Plus, copy-pasting the <a href=\"https://github.com/leanprover-community/mathlib/blob/7d83ff15903589811040894b90b28a46fe5e68c3/src/category_theory/hom_functor.lean#L23\">definition of hom</a> results in errors</p>",
        "id": 255936509,
        "sender_full_name": "fosco",
        "timestamp": 1633251504
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">quiver</span> <span class=\"n\">C</span>\n</code></pre></div>",
        "id": 255936568,
        "sender_full_name": "fosco",
        "timestamp": 1633251601
    },
    {
        "content": "<p>That's weird!</p>",
        "id": 255936651,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633251626
    },
    {
        "content": "<p>Can you post a <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a>?</p>",
        "id": 255936664,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633251631
    },
    {
        "content": "<p>Or try <code>set_option pp.universes true</code> and see what the error message becomes?</p>",
        "id": 255936674,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633251648
    },
    {
        "content": "<p>Where should I put it?</p>",
        "id": 255936707,
        "sender_full_name": "fosco",
        "timestamp": 1633251686
    },
    {
        "content": "<p>Before the error</p>",
        "id": 255936731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633251716
    },
    {
        "content": "<p>Outside any structure def or theorem</p>",
        "id": 255936781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633251730
    },
    {
        "content": "<p>But you should please get into the habit of posting <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> s. Errors by themselves are not easy to interpret</p>",
        "id": 255936816,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633251775
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.products.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.const</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.comma</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.discrete_category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.functor</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">definition</span> <span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span>       <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">unop</span> <span class=\"n\">p.1</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">p.2</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span>       <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">f.1.unop</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f.2</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 255936844,
        "sender_full_name": "fosco",
        "timestamp": 1633251806
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/4Yzwyp3rTRfAHaYq5nbLLvep/image.png\">image.png</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/4Yzwyp3rTRfAHaYq5nbLLvep/image.png\" title=\"image.png\"><img src=\"/user_uploads/3121/4Yzwyp3rTRfAHaYq5nbLLvep/image.png\"></a></div>",
        "id": 255936860,
        "sender_full_name": "fosco",
        "timestamp": 1633251838
    },
    {
        "content": "<p>Ah, but you didn't copy and paste.</p>",
        "id": 255936915,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633251862
    },
    {
        "content": "<p>You wrote <code>Type</code> as the target.</p>",
        "id": 255936918,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633251869
    },
    {
        "content": "<p>The problem is that <code>[category C]</code> introduces a universe variable for the morphism level.</p>",
        "id": 255936931,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633251893
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.products.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.const</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.comma</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.discrete_category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.functor</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">definition</span> <span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span>       <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">unop</span> <span class=\"n\">p.1</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">p.2</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span>       <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">f.1.unop</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f.2</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>\n<p>works fine.</p>",
        "id": 255936940,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633251906
    },
    {
        "content": "<p>Alternatively if we write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.products.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.const</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.comma</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.discrete_category</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">opposite</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory.functor</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"n\">D</span> <span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">D</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">pp.universes</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">definition</span> <span class=\"n\">hom</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span>       <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">unop</span> <span class=\"n\">p.1</span> <span class=\"bp\">‚ü∂</span> <span class=\"n\">p.2</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span>       <span class=\"o\">:=</span> <span class=\"bp\">Œª</span> <span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"bp\">Œª</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">f.1.unop</span> <span class=\"bp\">‚â´</span> <span class=\"n\">h</span> <span class=\"bp\">‚â´</span> <span class=\"n\">f.2</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">category_theory</span>\n</code></pre></div>",
        "id": 255936974,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633251949
    },
    {
        "content": "<p>we get a useful error message:</p>",
        "id": 255936978,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633251956
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">category.</span><span class=\"o\">{</span><span class=\"n\">u_4</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">C</span><span class=\"o\">,</span>\n<span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span>\n<span class=\"bp\">‚ä¢</span> <span class=\"n\">quiver.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"n\">C</span>\n</code></pre></div>",
        "id": 255937023,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633251969
    },
    {
        "content": "<p>From which you can see that there is a universe level problem! There is a category instance with universe levels <code>.{u_4 u_1}</code>, but the quiver instance you need is <code>.{1 u_1}</code>.</p>",
        "id": 255937048,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633252009
    },
    {
        "content": "<p>and the reason for this is exactly that you changed the codomain of <code>hom</code> to <code>Type</code>.</p>",
        "id": 255937066,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633252034
    },
    {
        "content": "<p>You have to ask yourself whether you want to work with a category C whose objects form a set in some Grothendieck universe u1 and whose hom sets all live in another Grothendieck universe u2, and then whether D has objects in u3 etc etc. That's what you're doing right now</p>",
        "id": 255937138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633252101
    },
    {
        "content": "<p>The one-liner for <code>twisted_arrow</code> is just:</p>\n<div class=\"spoiler-block\"><div class=\"spoiler-header\">\n</div><div class=\"spoiler-content\" aria-hidden=\"true\">\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">category_theory.elements</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">@[derive category]</span>\n<span class=\"kd\">def</span> <span class=\"n\">twisted_arrow</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">category</span> <span class=\"n\">C</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">functor.hom</span> <span class=\"n\">C</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">elements</span>\n</code></pre></div>\n</div></div>",
        "id": 255937149,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633252118
    },
    {
        "content": "<p>I see! Thanks.</p>",
        "id": 255937169,
        "sender_full_name": "fosco",
        "timestamp": 1633252147
    },
    {
        "content": "<p>Type is the smallest Grothendieck universe so you can't land in there in general unless you restrict to categories whose hom sets are there. Basically you have to decide what you mean by a category, is it small, large, or do you want to try to write code which works for both or even more general situations</p>",
        "id": 255937201,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633252199
    },
    {
        "content": "<p>Right now we choose a universe level for objects and a different one for morphisms</p>",
        "id": 255937263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633252241
    },
    {
        "content": "<p>(Hopefully reading the note about universe levels in <code>category_theory.category.basic</code> will be helpful. It explains why we need to use two independent universe levels, in order to formalise small and large categories uniformly.)</p>",
        "id": 255937279,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633252270
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/notes.html#category_theory%20universes\">https://leanprover-community.github.io/mathlib_docs/notes.html#category_theory%20universes</a></p>",
        "id": 255937424,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633252439
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/dinatural.20transformations/near/255937263\">said</a>:</p>\n<blockquote>\n<p>In lean we choose a universe level for objects and a different one for morphisms</p>\n</blockquote>\n<p>Yes; whereas usually objects are in a universe more than the one where hom's live</p>",
        "id": 255937490,
        "sender_full_name": "fosco",
        "timestamp": 1633252503
    },
    {
        "content": "<p>anyway</p>",
        "id": 255937493,
        "sender_full_name": "fosco",
        "timestamp": 1633252507
    },
    {
        "content": "<p>now I have various choices for how to formalise next:  </p>\n<ol>\n<li>the end of F is the terminal object of its category of wedges</li>\n<li>precomposing with the functor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mi>w</mi><mo stretchy=\"false\">(</mo><mi>F</mi><mo stretchy=\"false\">)</mo><mo>‚Üí</mo><msup><mi>C</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup><mo>√ó</mo><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">Tw(F) \\to C^{op}\\times C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">Tw</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">√ó</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span> sends <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>:</mo><msup><mi>C</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup><mo>√ó</mo><mi>C</mi><mo>‚Üí</mo><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">F : C^{op}\\times C \\to D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">√ó</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><mi>F</mi><mo>Àâ</mo></mover><mo>:</mo><mi>T</mi><mi>w</mi><mo stretchy=\"false\">(</mo><mi>C</mi><mo stretchy=\"false\">)</mo><mo>‚Üí</mo><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">\\bar F : Tw(C) \\to D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8201099999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8201099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">Àâ</span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02691em;\">Tw</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>, and </li>\n<li><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>‚à´</mo><mi>c</mi></msub><mi>F</mi><mo>‚âÖ</mo><mi>lim</mi><mo>‚Å°</mo><mover accent=\"true\"><mi>F</mi><mo>Àâ</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\int_c F\\cong \\lim \\bar F</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1608200000000002em;vertical-align:-0.35582em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"margin-right:0.19445em;position:relative;top:-0.0005599999999999772em;\">‚à´</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:-0.05442800000000003em;\"><span style=\"top:-2.34418em;margin-left:-0.19445em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">c</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.35582em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚âÖ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8201099999999999em;vertical-align:0em;\"></span><span class=\"mop\">lim</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8201099999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span></span><span style=\"top:-3.25233em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">Àâ</span></span></span></span></span></span></span></span></span></span></li>\n</ol>",
        "id": 255937633,
        "sender_full_name": "fosco",
        "timestamp": 1633252681
    },
    {
        "content": "<ol>\n<li>\n<p>I looked for \"terminal object of a category\", but I didn't find anything, only the statement that a category has a terminal object. I was thinking to something on the lines of \"{Wd(F) has a terminal object, a choice of that object}\"</p>\n</li>\n<li>\n<p>does the category of elements construction allows to extract the functor immediately?</p>\n</li>\n</ol>",
        "id": 255937785,
        "sender_full_name": "fosco",
        "timestamp": 1633252813
    },
    {
        "content": "<blockquote>\n<ol start=\"2\">\n<li>does the category of elements construction allows to extract the functor immediately?</li>\n</ol>\n</blockquote>\n<p>Which functor?</p>",
        "id": 255937833,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633252888
    },
    {
        "content": "<p>there are various ways to call it; the \"category of elements\" construction turns a presheaf <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>F</mi><mo>:</mo><msup><mi>C</mi><mrow><mi>o</mi><mi>p</mi></mrow></msup><mo>‚Üí</mo><mi>S</mi><mi>e</mi><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">F : C^{op} \\to Set</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">:</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚Üí</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">t</span></span></span></span> into a fibration over <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi></mrow><annotation encoding=\"application/x-tex\">C</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span></span></span></span>; the functor I want is precisely that fibration</p>",
        "id": 255937904,
        "sender_full_name": "fosco",
        "timestamp": 1633252954
    },
    {
        "content": "<blockquote>\n<p>1.</p>\n</blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.limits.is_terminal/src\">src#category_theory.limits.is_terminal</a></p>",
        "id": 255937908,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633252961
    },
    {
        "content": "<p>it just forgets the \"element\" a in (X, a \\in FX)</p>",
        "id": 255937923,
        "sender_full_name": "fosco",
        "timestamp": 1633252981
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.category_of_elements.œÄ/src\">src#category_theory.category_of_elements.œÄ</a></p>",
        "id": 255937956,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633253026
    },
    {
        "content": "<p>(or just read through <code>category_theory.elements</code> until you find it :-)</p>",
        "id": 255937964,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633253039
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">twisted_fibration</span> <span class=\"o\">:</span> <span class=\"n\">twisted</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"n\">category_of_elements.œÄ</span> <span class=\"o\">(</span><span class=\"n\">twisted</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>I get a universe error.. let's see if I'm able to fix it alone</p>",
        "id": 255938138,
        "sender_full_name": "fosco",
        "timestamp": 1633253205
    },
    {
        "content": "<p>no, it's a type misatch</p>",
        "id": 255938147,
        "sender_full_name": "fosco",
        "timestamp": 1633253223
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">twisted</span> <span class=\"n\">C</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_1</span> <span class=\"n\">u_4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">u_1</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">u_4</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span> <span class=\"n\">u_4</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">u_4</span> <span class=\"n\">u_1</span> <span class=\"o\">(</span><span class=\"n\">u_4</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 255938158,
        "sender_full_name": "fosco",
        "timestamp": 1633253235
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">twisted_fibration</span> <span class=\"o\">:</span> <span class=\"n\">twisted</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"o\">:=</span>\n<span class=\"n\">category_of_elements.œÄ</span> <span class=\"o\">(</span><span class=\"n\">functor.hom</span> <span class=\"n\">C</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>hooray!</p>",
        "id": 255938230,
        "sender_full_name": "fosco",
        "timestamp": 1633253290
    },
    {
        "content": "<p>Now:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c\">/-</span><span class=\"cm\"> TODO:</span>\n<span class=\"cm\">F : C·µí·µñ √ó C ‚•§ D (I'd be happy to do it just for D=Type* atm...)</span>\n<span class=\"cm\">end1 : the terminal object in Wd(F) (it exists, because Type is complete)</span>\n<span class=\"cm\">end2 : limit of (F ‚ãô twisted_fibration C)</span>\n<span class=\"cm\">thm end1 ‚âÖ end2 canonically</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 255938379,
        "sender_full_name": "fosco",
        "timestamp": 1633253459
    },
    {
        "content": "<p>( whoops, it's <code>(twisted_fibration C ‚ãô F)</code> )</p>",
        "id": 255938408,
        "sender_full_name": "fosco",
        "timestamp": 1633253501
    },
    {
        "content": "<p>Oh dear, you've said the dread word \"canonically\"! What do you mean? :-)</p>",
        "id": 255938865,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633253995
    },
    {
        "content": "<p>Presumably it is some naturality statement with respect to <code>C</code>.</p>",
        "id": 255938937,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633254072
    },
    {
        "content": "<p>yes (it can be done later, or it can be avoided <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> I'm suffering enough)</p>",
        "id": 255938949,
        "sender_full_name": "fosco",
        "timestamp": 1633254093
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">end1</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">end2</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 255938960,
        "sender_full_name": "fosco",
        "timestamp": 1633254113
    },
    {
        "content": "<p>these are the typings.</p>",
        "id": 255938965,
        "sender_full_name": "fosco",
        "timestamp": 1633254122
    },
    {
        "content": "<p>So yes, first challenge is to write down the statement of the isomorphism, with a sorry for the construction.</p>",
        "id": 255938988,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633254123
    },
    {
        "content": "<p>Whoops, no</p>",
        "id": 255939048,
        "sender_full_name": "fosco",
        "timestamp": 1633254191
    },
    {
        "content": "<p>We'd like to just be able to write <code>‚ä§ : wedge F</code> to specify the terminal object. Probably we're going to have to do some amount of explaining so that Lean understands why the completeness of <code>Type</code> implies the existence of a terminal object in <code>wedge F</code>.</p>",
        "id": 255939137,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633254250
    },
    {
        "content": "<p>oh, so \\top is a shorthand to refer to a terminal object?</p>",
        "id": 255939150,
        "sender_full_name": "fosco",
        "timestamp": 1633254277
    },
    {
        "content": "<p>Yes. It's used all over mathlib for the top element of a lattice, but we also use the same notation for terminal objects.</p>",
        "id": 255939185,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633254335
    },
    {
        "content": "<p>How comes I can't find it if I Ctrl-F the entire src/ folder?</p>",
        "id": 255939235,
        "sender_full_name": "fosco",
        "timestamp": 1633254367
    },
    {
        "content": "<p>Are you writing \\top in the search box? You need to copy and paste the unicode symbol into the search box.</p>",
        "id": 255939251,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633254395
    },
    {
        "content": "<p>Yes, I did</p>",
        "id": 255939257,
        "sender_full_name": "fosco",
        "timestamp": 1633254406
    },
    {
        "content": "<p>Does searching for anything work?</p>",
        "id": 255939294,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633254441
    },
    {
        "content": "<p>Nevermind; in theory this should work </p>\n<p><code>limits.terminal (wedge F)</code></p>\n<p>but it complains because it wants a proof that Type* has enough limits (probably?)</p>",
        "id": 255939451,
        "sender_full_name": "fosco",
        "timestamp": 1633254605
    },
    {
        "content": "<p>No, it's not clever enough to want that. :-)</p>",
        "id": 255939475,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633254642
    },
    {
        "content": "<p>How is Lean going to know <em>anything</em> about any limits in <code>wedge F</code>?</p>",
        "id": 255939481,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633254655
    },
    {
        "content": "<p>As far as it is concerned it is some brand new category.</p>",
        "id": 255939488,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633254668
    },
    {
        "content": "<p>We need to tell it something. So --- why does <code>wedge F</code> have a terminal object?</p>",
        "id": 255939497,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633254685
    },
    {
        "content": "<p>it doesn't; but __if__ it does, that's the end.</p>",
        "id": 255939512,
        "sender_full_name": "fosco",
        "timestamp": 1633254708
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/dinatural.20transformations/near/255939481\">said</a>:</p>\n<blockquote>\n<p>How is Lean going to know <em>anything</em> about any limits in <code>wedge F</code>?</p>\n</blockquote>\n<p>Of course <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span></p>",
        "id": 255939565,
        "sender_full_name": "fosco",
        "timestamp": 1633254729
    },
    {
        "content": "<p>that's why I was thinking about something like {a proof that wedge(F) has a terminal object, a choice of that object}</p>",
        "id": 255939581,
        "sender_full_name": "fosco",
        "timestamp": 1633254758
    },
    {
        "content": "<p>but this is a.. structure?</p>",
        "id": 255939584,
        "sender_full_name": "fosco",
        "timestamp": 1633254768
    },
    {
        "content": "<p>So you need <code>is_terminal</code></p>",
        "id": 255939593,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633254780
    },
    {
        "content": "<p><code>is_terminal</code> eats an object of the codomain</p>",
        "id": 255939629,
        "sender_full_name": "fosco",
        "timestamp": 1633254841
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">my_iso</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_terminal</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">‚âÖ</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 255939677,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633254858
    },
    {
        "content": "<p>That says: \"suppose I have a terminal wedge, called X, then I can construct an isomorphism between P and Q\"</p>",
        "id": 255939693,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633254890
    },
    {
        "content": "<p>(obviously you will need to fill in P and Q here)</p>",
        "id": 255939699,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633254899
    },
    {
        "content": "<p>I don't understand...</p>",
        "id": 255939722,
        "sender_full_name": "fosco",
        "timestamp": 1633254928
    },
    {
        "content": "<p>Isn't this what you want to say? You want to say \"Suppose there is a terminal object in wedge F. Then &lt;some construction based on that object&gt; is a limit for <code>twisted_fibration C ‚ãô F</code>.\"</p>",
        "id": 255939804,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633255020
    },
    {
        "content": "<p>oh! I see; no, I'm stuck at a former step, <em>defining</em> the end of F. I took another approach, but it looks kinda stupid</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">end1</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">limits.is_terminal</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">wedge</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"n\">X</span>\n</code></pre></div>",
        "id": 255939878,
        "sender_full_name": "fosco",
        "timestamp": 1633255088
    },
    {
        "content": "<p>at least it doesnt complain...</p>",
        "id": 255939883,
        "sender_full_name": "fosco",
        "timestamp": 1633255097
    },
    {
        "content": "<p>So maybe instead you want to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">limit_cone_of_terminal_wedge</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_terminal</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cone</span> <span class=\"o\">(</span><span class=\"n\">twisted_fibration</span> <span class=\"n\">C</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">is_limit_of_terminal_wedge</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_terminal</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">limit_cone_of_terminal_wedge</span> <span class=\"n\">X</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 255939888,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633255107
    },
    {
        "content": "<p>Yeah, that <code>end1</code> definition is not doing anything for you. :-)</p>",
        "id": 255939910,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633255147
    },
    {
        "content": "<p>And probably you want to factor that into more pieces:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">end_of_terminal_wedge</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_terminal</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">D</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n\n<span class=\"kd\">@[simps]</span>\n<span class=\"kd\">def</span> <span class=\"n\">limit_cone_of_terminal_wedge</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_terminal</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">cone</span> <span class=\"o\">(</span><span class=\"n\">twisted_fibration</span> <span class=\"n\">C</span> <span class=\"bp\">‚ãô</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">X</span> <span class=\"o\">:=</span> <span class=\"n\">end_of_terminal_wedge</span> <span class=\"n\">X</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">œÄ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_limit_of_terminal_wedge</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">·µí·µñ</span> <span class=\"bp\">√ó</span> <span class=\"n\">C</span> <span class=\"bp\">‚•§</span> <span class=\"n\">D</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">wedge</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_terminal</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_limit</span> <span class=\"o\">(</span><span class=\"n\">limit_cone_of_terminal_wedge</span> <span class=\"n\">X</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 255940075,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633255295
    },
    {
        "content": "<p>well, technically the end of F is the whole wedge, an object of <code>wedge F</code></p>",
        "id": 255940158,
        "sender_full_name": "fosco",
        "timestamp": 1633255368
    },
    {
        "content": "<p>usually you call \"the end\" just the tip</p>",
        "id": 255940162,
        "sender_full_name": "fosco",
        "timestamp": 1633255377
    },
    {
        "content": "<p>I need a break <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span> thanks for your help so far!</p>",
        "id": 255940180,
        "sender_full_name": "fosco",
        "timestamp": 1633255410
    },
    {
        "content": "<p>@fosco, rather than this manual translation between terminal objects and limit cones, you should just directly prove the equivalence of categories between <code>wedge F</code> and <code>cone (twisted_fibration C ‚ãô F)</code>.</p>",
        "id": 255942928,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1633258350
    },
    {
        "content": "<blockquote>\n<p>Yes; whereas usually objects are in a universe more than the one where hom's live</p>\n</blockquote>\n<p>You're claiming that, but you're also talking about limits and for limits in large categories it's essential that the source category (the diagram) does <em>not</em> satisfy the condition you claim is usual. And limits are also \"usual\" right? Formalisation has to take these things into account and it's when you start formalising that you start noticing them.</p>",
        "id": 255944482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633260051
    },
    {
        "content": "<p>The way Scott has set it up saves us from having to develop two parallel theories of small and large categories.</p>",
        "id": 255944552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633260123
    },
    {
        "content": "<p>It is not true in lean that \"every small category is large\", for the same reason that it's not true in lean that every natural number is a real number. There's a \"canonical\" construction which eats one thing and spits out the other but it's a genuine function and needs to be applied (and then one has to check that it commutes with everything)</p>",
        "id": 255944947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633260551
    }
]