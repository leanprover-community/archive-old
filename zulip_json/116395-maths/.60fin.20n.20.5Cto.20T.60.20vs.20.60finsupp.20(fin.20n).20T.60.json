[
    {
        "content": "<p>General question: (<code>T</code> is a type) is it easy to move back and forth between <code>fin n \\to T</code> and the finsupp variant?<br>\nSpecific question: I am working with <code>nnreal^n</code>, and I model it as <code>fin n \\to nnreal</code>. Now I have a map <code>fin n \\to fin m</code> and I want to get the induced map <code>nnreal^n \\to nnreal^m</code>. This is almost <code>finsupp.map_domain</code>. Except that I finitely supported functions, but general ones. Is it easy to still use <code>map_domain</code>?</p>",
        "id": 127206339,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527515033
    },
    {
        "content": "<p>I guess you could just turn your fin n \\to T into a finsupp quite easily. Just by doing <code>support := univ.filter (\\la x, fx \\ne!= 0)</code> etc.<br>\nMight e useful in general to define that function from a <code>fintype → T</code> to <code>fintype →₀ T</code></p>",
        "id": 127207254,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1527516532
    },
    {
        "content": "<p>Should that go into mathlib?</p>",
        "id": 127207269,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527516574
    },
    {
        "content": "<p>Yes. Just not for <code>fin n</code> specifically but for each <code>fintype</code>.</p>",
        "id": 127207324,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1527516625
    },
    {
        "content": "<p>Ok, I'll put it into finsupp.lean</p>",
        "id": 127207358,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527516716
    },
    {
        "content": "<p>What is the canonical name for this beast?</p>",
        "id": 127207407,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527516753
    },
    {
        "content": "<p>Some sort of <code>coe</code>?</p>",
        "id": 127207409,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527516764
    },
    {
        "content": "<p>I've never done anything with <code>coe</code></p>",
        "id": 127207412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527516773
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">foobar</span> <span class=\"o\">{</span><span class=\"n\">T</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">T</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>  <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">T</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">support</span> <span class=\"o\">:=</span> <span class=\"n\">univ</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">mem_support_to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem_filter</span><span class=\"bp\">.</span><span class=\"n\">mp</span> <span class=\"n\">h</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">mem_filter</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">⟨</span><span class=\"n\">mem_univ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩</span><span class=\"o\">)</span><span class=\"bp\">⟩</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 127207991,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527517581
    }
]