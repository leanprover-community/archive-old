[
    {
        "content": "<p>Is the following true?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 222191720,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1610229485
    },
    {
        "content": "<p>Yes. The stuff you're missing is in <code>data.set.finite</code>.</p>",
        "id": 222192048,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610229982
    },
    {
        "content": "<p>It's all noncomputable so it's somehow separated off.</p>",
        "id": 222192063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610230021
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.set.finite</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">set.finite.exists_finset_coe</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 222192069,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610230035
    },
    {
        "content": "<p>PS it's come to something when a mathematician has to check to see if a finite set is finite :-) I guess this is what Lean does to us. Type theory has some weird surprises :-/</p>",
        "id": 222192221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1610230295
    },
    {
        "content": "<p>You can also do it without referencing <code>finite</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fintype.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"bp\">//</span> <span class=\"n\">p</span> <span class=\"n\">x</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"bp\">↑</span><span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"bp\">|</span> <span class=\"n\">p</span> <span class=\"n\">x</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"bp\">@</span><span class=\"n\">set.to_finset</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">@</span><span class=\"n\">set.coe_to_finset</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 222192224,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610230308
    },
    {
        "content": "<p>Thank you!!</p>",
        "id": 222202414,
        "sender_full_name": "Paul van Wamelen",
        "timestamp": 1610247724
    }
]