[
    {
        "content": "<p>I haven't followed very closely Anatole's recent efforts, but it seems that limits from the left and from the right are more painful than they should be. I wonder we should rather base things on something like the following code. There I restricted to real numbers, but we could be more general by replace x + epsilon by y &gt; x.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">instances</span><span class=\"bp\">.</span><span class=\"n\">real</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">filter</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">section</span> <span class=\"n\">preliminaries</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">ι</span> <span class=\"n\">ι&#39;</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">l&#39;</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">p&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ι&#39;</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ι&#39;</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">i&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ι&#39;</span><span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl&#39;</span> <span class=\"o\">:</span> <span class=\"n\">l&#39;</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"n\">p&#39;</span> <span class=\"n\">s&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"err\">⊔</span> <span class=\"n\">l&#39;</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">×</span> <span class=\"n\">ι&#39;</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">∧</span> <span class=\"n\">p&#39;</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∪</span> <span class=\"n\">s&#39;</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"k\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mem_sup_sets</span><span class=\"o\">,</span> <span class=\"n\">hl</span><span class=\"bp\">.</span><span class=\"n\">mem_iff</span><span class=\"o\">,</span> <span class=\"n\">hl&#39;</span><span class=\"bp\">.</span><span class=\"n\">mem_iff</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">pi</span><span class=\"o\">,</span> <span class=\"n\">hi</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">i&#39;</span><span class=\"o\">,</span> <span class=\"n\">pi&#39;</span><span class=\"o\">,</span> <span class=\"n\">hi&#39;</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[(</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i&#39;</span><span class=\"o\">),</span> <span class=\"n\">pi</span><span class=\"o\">,</span> <span class=\"n\">pi&#39;</span><span class=\"o\">],</span>\n    <span class=\"n\">finish</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">i&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">pi</span><span class=\"o\">,</span> <span class=\"n\">pi&#39;</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">split</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">pi</span><span class=\"o\">],</span>\n      <span class=\"n\">finish</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">i&#39;</span><span class=\"o\">,</span> <span class=\"n\">pi&#39;</span><span class=\"o\">],</span>\n      <span class=\"n\">finish</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"n\">hl</span> <span class=\"o\">:</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"n\">p</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hl&#39;</span> <span class=\"o\">:</span> <span class=\"n\">l&#39;</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"n\">p&#39;</span> <span class=\"n\">s&#39;</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">i&#39;</span><span class=\"o\">,</span> <span class=\"n\">p&#39;</span> <span class=\"n\">i&#39;</span> <span class=\"bp\">∧</span> <span class=\"n\">s&#39;</span> <span class=\"n\">i&#39;</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i&#39;</span><span class=\"o\">,</span> <span class=\"n\">p&#39;</span> <span class=\"n\">i&#39;</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"err\">⊆</span> <span class=\"n\">s&#39;</span> <span class=\"n\">i&#39;</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">l</span> <span class=\"bp\">=</span> <span class=\"n\">l&#39;</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">le_antisymm</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hl</span><span class=\"bp\">.</span><span class=\"n\">le_basis_iff</span> <span class=\"n\">hl&#39;</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h&#39;</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hl&#39;</span><span class=\"bp\">.</span><span class=\"n\">le_basis_iff</span> <span class=\"n\">hl</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">h</span> <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">nolint</span> <span class=\"n\">ge_or_gt</span><span class=\"o\">]</span> <span class=\"c1\">-- see Note [nolint_ge]</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">has_basis_binfi_principal&#39;</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">j</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"n\">s</span> <span class=\"n\">k</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"n\">k</span> <span class=\"err\">⊆</span> <span class=\"n\">s</span> <span class=\"n\">j</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">ne</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"err\">⨅</span> <span class=\"n\">i</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"n\">i</span><span class=\"o\">),</span> <span class=\"err\">𝓟</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"n\">p</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">has_basis_binfi_principal</span> <span class=\"n\">h</span> <span class=\"n\">ne</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">preliminaries</span>\n\n<span class=\"n\">def</span> <span class=\"n\">nhds_left</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">⨅</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"err\">𝓟</span> <span class=\"err\">$</span> <span class=\"n\">Ioc</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n\n<span class=\"n\">def</span> <span class=\"n\">nhds_right</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"err\">⨅</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"err\">𝓟</span> <span class=\"err\">$</span> <span class=\"n\">Ico</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">)</span>\n\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `𝓝ₗ` := nhds_left&quot;</span> <span class=\"k\">in</span> <span class=\"n\">topological_space</span>\n<span class=\"n\">localized</span> <span class=\"s2\">&quot;notation `𝓝ᵣ` := nhds_right&quot;</span> <span class=\"k\">in</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">has_basis_nhds_left</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">𝓝ₗ</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">Ioc</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">has_basis_binfi_principal&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">zero_lt_one</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span> <span class=\"n\">η</span> <span class=\"n\">η_pos</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">min_le_left</span> <span class=\"n\">ε</span> <span class=\"n\">η</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">min_le_right</span> <span class=\"n\">ε</span> <span class=\"n\">η</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">min</span> <span class=\"n\">ε</span> <span class=\"n\">η</span><span class=\"o\">,</span> <span class=\"n\">lt_min</span> <span class=\"n\">ε_pos</span> <span class=\"n\">η_pos</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">;</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Ioc_subset_Ioc</span> <span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">has_basis_nhds_right</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">𝓝ᵣ</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">Ico</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">has_basis_binfi_principal&#39;</span> <span class=\"bp\">_</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">zero_lt_one</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span> <span class=\"n\">η</span> <span class=\"n\">η_pos</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">min_le_left</span> <span class=\"n\">ε</span> <span class=\"n\">η</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">min_le_right</span> <span class=\"n\">ε</span> <span class=\"n\">η</span><span class=\"o\">,</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">⟨</span><span class=\"n\">min</span> <span class=\"n\">ε</span> <span class=\"n\">η</span><span class=\"o\">,</span> <span class=\"n\">lt_min</span> <span class=\"n\">ε_pos</span> <span class=\"n\">η_pos</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">;</span>\n  <span class=\"n\">apply</span> <span class=\"n\">Ico_subset_Ico</span> <span class=\"bp\">;</span> <span class=\"n\">linarith</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">has_basis_nhds</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">has_basis</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">Ioo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">ε</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">metric</span><span class=\"bp\">.</span><span class=\"n\">nhds_basis_ball</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"n\">r</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">ball_eq_Ioo</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nhds_left_sup_nhds_right</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"err\">𝓝ₗ</span> <span class=\"n\">x</span> <span class=\"err\">⊔</span> <span class=\"err\">𝓝ᵣ</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"err\">𝓝</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">has_basis_nhds_left</span><span class=\"bp\">.</span><span class=\"n\">sup</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">has_basis_nhds_right</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">has_basis_nhds</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">η</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">ε_pos</span><span class=\"o\">,</span> <span class=\"n\">η_pos</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">min</span> <span class=\"n\">ε</span> <span class=\"n\">η</span><span class=\"o\">,</span> <span class=\"n\">lt_min</span> <span class=\"n\">ε_pos</span> <span class=\"n\">η_pos</span><span class=\"o\">],</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">min_le_left</span> <span class=\"n\">ε</span> <span class=\"n\">η</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"n\">min_le_right</span> <span class=\"n\">ε</span> <span class=\"n\">η</span><span class=\"o\">,</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">Ioc_union_Ico_eq_Ioo</span> <span class=\"bp\">;</span> <span class=\"n\">try</span> <span class=\"o\">{</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n    <span class=\"n\">apply</span> <span class=\"n\">Ioo_subset_Ioo</span> <span class=\"bp\">;</span> <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">ε</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[(</span><span class=\"n\">ε</span><span class=\"o\">,</span> <span class=\"n\">ε</span><span class=\"o\">),</span> <span class=\"n\">ε_pos</span><span class=\"o\">,</span> <span class=\"n\">ε_pos</span><span class=\"o\">],</span>\n    <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">Ioc_union_Ico_eq_Ioo</span> <span class=\"bp\">;</span> <span class=\"n\">linarith</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">tendsto_nhds_iff_left_right</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"err\">𝓝</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"bp\">↔</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"err\">𝓝ₗ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"bp\">∧</span> <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"err\">𝓝ᵣ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"err\">←</span> <span class=\"n\">nhds_left_sup_nhds_right</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">tendsto_sup</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span></p>",
        "id": 205354204,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596028540
    },
    {
        "content": "<p>I'd rather define <code>nhds_left</code> and <code>nhds_right</code> in terms of <code>nhds_within (Ioi _)</code> as there is already a lot of supporting API, and prove the charaterization in terms of <code>principal</code> as a theorem, but otherwise it looks like a very good idea.</p>",
        "id": 205354786,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1596028827
    },
    {
        "content": "<p>I agree with Sebastien, because <code>continuous_on</code> is defined in term of <code>nhds_within</code>, so defining <code>nhds_right</code> and <code>nhds_left</code> differently would imply another layer of translation, which means lots of new lemmas to make. Note that I recently PR-ed lemmas that allow to turn any left/right neighborhood to their \"canonical\" Ioi/Ici/Iio/Iic form, which makes things a lot easier already</p>",
        "id": 205355664,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1596029271
    },
    {
        "content": "<p>See <a href=\"https://github.com/leanprover-community/mathlib/pull/3516\">https://github.com/leanprover-community/mathlib/pull/3516</a></p>",
        "id": 205355751,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1596029306
    },
    {
        "content": "<p>Yes, the above code was written after having a very superficial look at this PR. My hope was that my definitions could be a convenient \"canonical definition\", but I wouldn't be surprised to be wrong.</p>",
        "id": 205355878,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596029389
    },
    {
        "content": "<p>Anatole, are you interested in taking care of the above code? Otherwise I'll at least PR the preliminaries.</p>",
        "id": 205356129,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596029506
    },
    {
        "content": "<p>Well, it may be faster if you do it <span aria-label=\"sweat smile\" class=\"emoji emoji-1f605\" role=\"img\" title=\"sweat smile\">:sweat_smile:</span> but as you want !</p>",
        "id": 205356610,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1596029719
    },
    {
        "content": "<p>There is no hurry at all. I don't need any of this.</p>",
        "id": 205357148,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596029994
    },
    {
        "content": "<p>I'll do it then !</p>",
        "id": 205359005,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1596030838
    },
    {
        "content": "<p>Maybe I should PR the general stuff to make sure it doesn't get lost, and then you can think about left and right neighborhoods.</p>",
        "id": 205363341,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596032667
    },
    {
        "content": "<p>When I was adding <code>tfae</code> to <code>topology/algebra/ordered</code>, we had no <code>filter.has_basis</code>. I guess proofs can be simplified by using <code>has_basis</code> API.</p>",
        "id": 205364748,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596033331
    },
    {
        "content": "<p>Thank you <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> for noticing!</p>",
        "id": 205364790,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596033352
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3625\">#3625</a></p>",
        "id": 205365757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596033753
    },
    {
        "content": "<p>Do you think <code>nhds_right a</code> should be defined as <code>nhds_within (Ioi a)</code> or <code>nhds_within (Ici a)</code> ? e.g do we want <code>tendsto (λ x : ℝ, 1/x) (nhds_right 0) at_top</code> to be true ?</p>",
        "id": 205399550,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1596049325
    },
    {
        "content": "<p>for consistency with neighborhood we should include the point.</p>",
        "id": 205400083,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1596049604
    },
    {
        "content": "<p>We can have notation both for <code>nhds_within (Ioi a) a</code> and <code>nhds_within (Ici a) a</code>. Both are useful.</p>",
        "id": 205409661,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596054539
    },
    {
        "content": "<p>I think that we don't use <code>def</code>s, <code>notation</code> would work.</p>",
        "id": 205409705,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596054563
    },
    {
        "content": "<p>This way lemmas about <code>nhds_within</code> will work without unfolding.</p>",
        "id": 205409734,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596054582
    }
]