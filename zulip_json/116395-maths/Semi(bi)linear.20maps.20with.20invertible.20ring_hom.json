[
    {
        "content": "<p>Hi,<br>\nI've run into another funny problem with the refactorization of bilinear_forms (I sketch it for linear maps): the type <code>V →ₛₗ[J.to_ring_hom] K</code>, where <code>J</code> is a <code>ring_equiv</code> is not a generalization of <code>V →ₗ[K] K</code>, the later is defined as <code>V →ₛₗ[ring_hom.id] K</code> not <code>V →ₛₗ[ring_equiv.id.to_ring_hom] K</code>. I certainly don't want to change the definition of a linear map and adding another hypothesis to each instance, where I need invertibility (to be precise I need J x = 0 iff x = 0) doesn't look great either. As anyone a good idea how to resolve this?<br>\n(sorry for spamming zulip with lots of stupid questions)</p>",
        "id": 265794532,
        "sender_full_name": "Moritz",
        "timestamp": 1640173439
    },
    {
        "content": "<p>Seems like <span class=\"user-mention\" data-user-id=\"238446\">@Anne Baanen</span> might have an answer for you.</p>",
        "id": 265798895,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1640176228
    },
    {
        "content": "<p>Not a stupid question at all! I don't think there are easy options apart from changing the definition of linear maps or adding parameters. I'd advise to use an extra instance parameter, probably <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom_inv_pair\">docs#ring_hom_inv_pair</a>.</p>",
        "id": 265806883,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640181041
    },
    {
        "content": "<p>The <code>ring_hom_inv_pair</code> class is already used for semilinear maps and it has an instance for the identity function, suggesting it can be applied to linear maps without too much work.</p>",
        "id": 265807017,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1640181117
    },
    {
        "content": "<p>Do we have global instances of <code>[ring_hom_inv_pair J.to_ring_hom J.symm.to_ring_hom]</code>?</p>",
        "id": 265808187,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1640181837
    },
    {
        "content": "<p>No, but we have it as a def</p>",
        "id": 265809170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640182407
    },
    {
        "content": "<p>As a global instance it would defeat the point of the mechanism</p>",
        "id": 265809241,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640182443
    },
    {
        "content": "<p>Which is to allow conj to be its own inverse</p>",
        "id": 265809273,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640182468
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"412682\">@Moritz</span> Could you give more detail, or an example?  I'm guessing your question will be related to the <a href=\"https://leanprover-community.github.io/blog/posts/semilinear-maps/\">semilinear map</a> mechanism, but I can't tell exactly what you're asking.</p>",
        "id": 265819067,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640188031
    },
    {
        "content": "<p>I don't understand this statement:</p>\n<p><span class=\"user-mention silent\" data-user-id=\"412682\">Moritz</span> <a href=\"#narrow/stream/116395-maths/topic/Semi.28bi.29linear.20maps.20with.20invertible.20ring_hom/near/265794532\">said</a>:</p>\n<blockquote>\n<p>the type <code>V →ₛₗ[J.to_ring_hom] K</code>, where <code>J</code> is a <code>ring_equiv</code> is not a generalization of <code>V →ₗ[K] K</code>, the later is defined as <code>V →ₛₗ[ring_hom.id] K</code> not <code>V →ₛₗ[ring_equiv.id.to_ring_hom] K</code>.</p>\n</blockquote>",
        "id": 265819929,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640188491
    },
    {
        "content": "<p>Because <code>ring_hom.id</code> is definitionally equal to the coercion of <code>ring_equiv.refl</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.ring</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom.id</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">ring_equiv.refl</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>",
        "id": 265820011,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640188546
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/Semi.28bi.29linear.20maps.20with.20invertible.20ring_hom/near/265820011\">said</a>:</p>\n<blockquote>\n<p>Because <code>ring_hom.id</code> is definitionally equal to the coercion of <code>ring_equiv.refl</code>:</p>\n<p><div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.equiv.ring</span>\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">ring_hom.id</span> <span class=\"n\">R</span> <span class=\"bp\">=</span> <span class=\"n\">ring_equiv.refl</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div><br>\n</p>\n</blockquote>\n<p>Ah thanks, I see. So it might only be problem with type-inference.<br>\n<code>#check @ortho_smul_right _ _ _ _ _ _ (ring_equiv.refl R) B₁</code> does type-check.<br>\nmy example was</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_compl_span_singleton_orthogonal</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B.is_ortho</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_compl</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">∙</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B.orthogonal</span> <span class=\"bp\">$</span> <span class=\"n\">K</span> <span class=\"bp\">∙</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inf_le_bot</span> <span class=\"o\">:=</span> <span class=\"n\">eq_bot_iff.1</span> <span class=\"bp\">$</span> <span class=\"n\">span_singleton_inf_orthogonal_eq_bot</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"n\">top_le_sup</span> <span class=\"o\">:=</span> <span class=\"n\">eq_top_iff.1</span> <span class=\"bp\">$</span> <span class=\"n\">span_singleton_sup_orthogonal_eq_top</span> <span class=\"n\">hx</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>and now with explicit annotations it works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_compl_span_singleton_orthogonal</span> <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B.is_ortho</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_compl</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">∙</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">B.orthogonal</span> <span class=\"bp\">$</span> <span class=\"n\">K</span> <span class=\"bp\">∙</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inf_le_bot</span> <span class=\"o\">:=</span> <span class=\"n\">eq_bot_iff.1</span> <span class=\"bp\">$</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">span_singleton_inf_orthogonal_eq_bot</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">ring_equiv.refl</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">B</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">),</span>\n  <span class=\"n\">top_le_sup</span> <span class=\"o\">:=</span> <span class=\"n\">eq_top_iff.1</span> <span class=\"bp\">$</span> <span class=\"n\">span_singleton_sup_orthogonal_eq_top</span> <span class=\"n\">hx</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>but it looks rather ugly.</p>",
        "id": 265823249,
        "sender_full_name": "Moritz",
        "timestamp": 1640190222
    },
    {
        "content": "<p>(nb: <code>span_singleton_inf_orthogonal_eq_bot</code> is defined only for bilinear forms)</p>",
        "id": 265823355,
        "sender_full_name": "Moritz",
        "timestamp": 1640190266
    },
    {
        "content": "<p>I think to understand this example I would need to know how you phrased <code>span_singleton_inf_orthogonal_eq_bot</code> with the new bilinear form definition.  But yes, the idea sounds correct!</p>",
        "id": 265824174,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640190732
    },
    {
        "content": "<p>its just</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">span_singleton_inf_orthogonal_eq_bot</span>\n  <span class=\"o\">{</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">V</span> <span class=\"bp\">→ₛₗ</span><span class=\"o\">[</span><span class=\"n\">J.to_ring_hom</span><span class=\"o\">]</span> <span class=\"n\">K</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span> <span class=\"n\">B.is_ortho</span> <span class=\"n\">x</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">∙</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">⊓</span> <span class=\"n\">B.orthogonal</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"bp\">∙</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span> <span class=\"o\">:=</span> <span class=\"bp\">..</span>\n</code></pre></div>",
        "id": 265824398,
        "sender_full_name": "Moritz",
        "timestamp": 1640190851
    },
    {
        "content": "<p>Can I ask why you are generalizing from bilinear forms to <code>V →ₗ[K] V →ₛₗ[J.to_ring_hom] K</code> rather than the full semibilinear case?</p>",
        "id": 265824551,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640190941
    },
    {
        "content": "<p>You might find it easier to do just <code>V →ₗ[K] V →ₗ[K] K</code>to start with.</p>",
        "id": 265824692,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640191020
    },
    {
        "content": "<p>The only use-cases I have in mind are sesquilinear and bilinear forms, but you are correct that is possible to do this in the complete semibilinear case</p>",
        "id": 265825538,
        "sender_full_name": "Moritz",
        "timestamp": 1640191512
    },
    {
        "content": "<p>Often, in formalization, the more general case (if it's the \"correct\" generality ...) is easier than a specialization.</p>",
        "id": 265825771,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640191646
    },
    {
        "content": "<p>here it is slightly more involved because sometimes it matters whether the ring_hom is invertible (which started this discussion). doing the full semibilinear case would make some lemmas more symmetric.</p>",
        "id": 265826086,
        "sender_full_name": "Moritz",
        "timestamp": 1640191823
    },
    {
        "content": "<p>I see, so you would need to be placing <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_hom_inv_pair\">docs#ring_hom_inv_pair</a> hypotheses in certain places, which is technically difficult.</p>",
        "id": 265826237,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640191912
    },
    {
        "content": "<p>I'd be happy to help with that generalization later, if you get it working just for <code>V →ₗ[K] V →ₗ[K] K</code> or <code>M →ₗ[R] M →ₗ⋆[R] R</code> (or your variant <code>V →ₗ[K] V →ₛₗ[J.to_ring_hom] K</code>) for now.</p>",
        "id": 265826563,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1640192074
    },
    {
        "content": "<p>I made a PR: <a href=\"https://github.com/leanprover-community/mathlib/pull/10992\">https://github.com/leanprover-community/mathlib/pull/10992</a> I think we should find a better way to deal with the issue discussed above, but for now I think it is ok.</p>",
        "id": 265912339,
        "sender_full_name": "Moritz",
        "timestamp": 1640262756
    }
]