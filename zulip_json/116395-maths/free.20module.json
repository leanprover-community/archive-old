[
    {
        "content": "<p><code>The module `lc α β` of linear combinations over `β` (`α` is the scalar ring)</code><br>\nThis is what I would call the free module on a set, right?</p>",
        "id": 158484975,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550098618
    },
    {
        "content": "<p>Unfortunately there <code>\\b</code> needs to be a module or something</p>",
        "id": 158485001,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550098645
    },
    {
        "content": "<p>oh, I see...</p>",
        "id": 158485012,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550098659
    },
    {
        "content": "<p>if you want module over a set you would want either <code>direct_sum</code> or <code>finsupp</code></p>",
        "id": 158485015,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550098664
    },
    {
        "content": "<p>Okay, I was wondering if there was something more specific than <code>direct_sum</code>.</p>",
        "id": 158485030,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550098677
    },
    {
        "content": "<p>Actually, in my case the set does happen to be a module</p>",
        "id": 158485080,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550098687
    },
    {
        "content": "<p>then very good</p>",
        "id": 158485086,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550098694
    },
    {
        "content": "<p>the module structure on <code>lc</code> is the one that doesn't use the module structure on <code>\\b</code> right?</p>",
        "id": 158485116,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550098720
    },
    {
        "content": "<p>because it's <code>finsupp.to_module</code></p>",
        "id": 158485122,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550098727
    },
    {
        "content": "<p>nothing uses the module structure on <code>\\b</code></p>",
        "id": 158485130,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550098736
    },
    {
        "content": "<p>it's just <code>lc</code> that requires it</p>",
        "id": 158485133,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550098740
    },
    {
        "content": "<p>oh wait, I lied. I have a subset of a module, not a module. Never mind</p>",
        "id": 158485233,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550098807
    },
    {
        "content": "<p>sadness</p>",
        "id": 158485237,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550098816
    },
    {
        "content": "<p>Do we already have <code>M → (R →ₗ[R] M)</code>?</p>",
        "id": 158485778,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550099373
    },
    {
        "content": "<p>how about <code>M \\equiv\\_l (R \\to\\_l[R] M)</code></p>",
        "id": 158485865,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550099464
    },
    {
        "content": "<p>I think specializing <code>direct_sum</code> to the free module on a set would be worthwhile</p>",
        "id": 158485889,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550099497
    },
    {
        "content": "<p>Here's what I ended up writing. I'm sure it could be golfed more.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lself</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"err\">≃ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">id</span><span class=\"bp\">.</span><span class=\"n\">smul_right</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">left_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ext</span> <span class=\"n\">r</span><span class=\"bp\">;</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">.</span><span class=\"n\">smul</span> <span class=\"n\">r</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span>\n  <span class=\"n\">right_inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">one_smul</span> <span class=\"bp\">_</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n  <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 158487391,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550101378
    },
    {
        "content": "<p>can you use <code>smul_right</code> for as <code>inv_fun</code>?</p>",
        "id": 158487569,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1550101609
    },
    {
        "content": "<p>oh, nice</p>",
        "id": 158487968,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550102004
    },
    {
        "content": "<p>edited</p>",
        "id": 158488416,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550102432
    },
    {
        "content": "<blockquote>\n<p>oh wait, I lied. I have a subset of a module, not a module. Never mind</p>\n</blockquote>\n<p>Except actually I can also just use the entire module.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">projective</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">M</span> <span class=\"bp\">→</span><span class=\"err\">ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">lc</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">lc</span><span class=\"bp\">.</span><span class=\"n\">total</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comp</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">linear_map</span><span class=\"bp\">.</span><span class=\"n\">id</span>\n</pre></div>",
        "id": 158488533,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550102585
    },
    {
        "content": "<p>is this definition too weird</p>",
        "id": 158488549,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550102615
    },
    {
        "content": "<p>I don't think mathematicians will recognise it</p>",
        "id": 158504691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550123588
    },
    {
        "content": "<p>I think <code>lc</code> is somewhat unintuitive to use there</p>",
        "id": 158504709,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550123620
    },
    {
        "content": "<p>do you mean because of the weird name, or because the definition itself is weird in a math way</p>",
        "id": 158504757,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550123655
    },
    {
        "content": "<p>I guess both <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 158504763,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550123683
    },
    {
        "content": "<p>I agree it's not very recognizable, and doing similar things for injective or flat modules will probably be worse</p>",
        "id": 158504839,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550123804
    },
    {
        "content": "<p>On the other hand the usual definitions become not very pretty due to unbundled objects</p>",
        "id": 158504920,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550123913
    },
    {
        "content": "<p>maybe I should give in and use category theory</p>",
        "id": 158504964,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550124003
    },
    {
        "content": "<p>I guess if it was called <code>formal_lin_comb</code> and didn't require <code>\\b</code> to be a subset of a module, then it would be better.</p>",
        "id": 158505007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550124025
    },
    {
        "content": "<p>Or at least the docstring could say that we are talking of formal linear combinations</p>",
        "id": 158505031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550124090
    },
    {
        "content": "<p>I am confused by this conversation. How can <code>lc A B</code> be a module if <code>B</code> isn't a module?</p>",
        "id": 158505512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550124776
    },
    {
        "content": "<p>Oh, I see, the B and A get flipped in the definition</p>",
        "id": 158505777,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550125110
    },
    {
        "content": "<p>In <code>finsupp</code>, we have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_module</span> <span class=\"o\">{</span><span class=\"n\">R</span><span class=\"o\">:</span><span class=\"n\">ring</span> <span class=\"n\">γ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">γ</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">module</span> <span class=\"n\">γ</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>I think this can be an instance now, and that can replace/generalize much of <code>lc</code></p>",
        "id": 158505825,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550125162
    },
    {
        "content": "<p>That definition of projective is no weirder than Neil's definition of a localisation or mathlib's definition of a compact topological space</p>",
        "id": 158510322,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550130979
    },
    {
        "content": "<p>Who cares about weird definitions, use the definition that works best and write a useful interface relating it to other definitions people use in practice</p>",
        "id": 158510346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131051
    },
    {
        "content": "<p>I remember the first time I tried to use continuous functions, about a year ago, to prove something like multiplication by an element of a topological group was continuous. I thought \"I can prove this from first principles\" and started unfolding everything. Then Kenny saw what I was doing and said \"you're not supposed to do it like that\" and it began to dawn on me how this whole thing is supposed to work</p>",
        "id": 158510431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131185
    },
    {
        "content": "<p>We shouldn't ever really care about which definition we're using, we just need good docs which point us to all the theorems saying that the internal definition is equivalent to whichever definition we find is most convenient for us at the time. I don't even have a definition of projective in my head. I have 3 definitions and would claim that something is true \"by definition\" when I mean \"by the definition which is most convenient for me at this point\"</p>",
        "id": 158510625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131350
    },
    {
        "content": "<p>I have a proposition-definition of projective. \"The following three concepts are equivalent -- so let's say a module is projective if it satisfies any one of them\"</p>",
        "id": 158510722,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131437
    },
    {
        "content": "<p>I'm happy to add Reid's more exotic one to the list</p>",
        "id": 158510777,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131480
    },
    {
        "content": "<p>In <a href=\"https://en.wikipedia.org/wiki/Projective_module\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Projective_module\">https://en.wikipedia.org/wiki/Projective_module</a> it seems like all the definitions involve quantifying over all modules</p>",
        "id": 158510778,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550131483
    },
    {
        "content": "<p>you didn't list any of wikipedia's definitions, but I like yours better</p>",
        "id": 158510804,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550131524
    },
    {
        "content": "<p>I was told \"direct summand of a free\" was the definition once</p>",
        "id": 158510807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131529
    },
    {
        "content": "<p>I was told \"locally free\" was the definition once</p>",
        "id": 158510821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131557
    },
    {
        "content": "<p>Ie all localisations were free modules</p>",
        "id": 158510865,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131569
    },
    {
        "content": "<p>Neither of these involve quantifying over all modules</p>",
        "id": 158510876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131591
    },
    {
        "content": "<p>direct summand of free quantifies over all modules</p>",
        "id": 158510891,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550131630
    },
    {
        "content": "<p>dunno what locally free means</p>",
        "id": 158510894,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550131637
    },
    {
        "content": "<p>It means that for all prime ideals P of R, M tensor R_P is free</p>",
        "id": 158510902,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131668
    },
    {
        "content": "<p>Just like you can localise rings, you can also localise modules (and you get a module over the localised ring)</p>",
        "id": 158510905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550131673
    },
    {
        "content": "<p>I guess with localizations it's a large quantification if you use Neil's localization and small if you use Kenny's localization</p>",
        "id": 158510950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550131701
    },
    {
        "content": "<p>In ZFC we only use one universe</p>",
        "id": 158510957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131718
    },
    {
        "content": "<p>yeah, then it's an impredicative definition</p>",
        "id": 158510961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550131735
    },
    {
        "content": "<p>And so one definition of localisation I have been using for decades is</p>",
        "id": 158510962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131738
    },
    {
        "content": "<p>not that it's usually a big problem, but sometimes it complicates size arguments</p>",
        "id": 158510978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550131760
    },
    {
        "content": "<p>That all surjections in M's universe split</p>",
        "id": 158510980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131774
    },
    {
        "content": "<p>Hmm</p>",
        "id": 158510984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131796
    },
    {
        "content": "<p>Or is that R's universe?</p>",
        "id": 158511025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131805
    },
    {
        "content": "<p>the surjections aren't in a universe, they are bounded by the given modules</p>",
        "id": 158511035,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550131838
    },
    {
        "content": "<p>but I guess the N and M in the commutative triangle live in some universe</p>",
        "id": 158511045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550131870
    },
    {
        "content": "<p>I was going to say that by some general nonsense one can deduce that if all surjections in a sensible universe split then all surjections spilt</p>",
        "id": 158511049,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131886
    },
    {
        "content": "<p>yes, that should be the case, but you want to start from a small definition to prove that</p>",
        "id": 158511054,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550131907
    },
    {
        "content": "<p>But I'm suddenly not sure what the sensible universe is</p>",
        "id": 158511055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131911
    },
    {
        "content": "<p>I think it's the universe of P, the projective module itself</p>",
        "id": 158511099,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550131943
    },
    {
        "content": "<p>Because in this silly place R and M can be in different universes</p>",
        "id": 158511101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131955
    },
    {
        "content": "<p>I'm not sure what happens if a large ring acts on a small module</p>",
        "id": 158511119,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550131979
    },
    {
        "content": "<p>It can happen</p>",
        "id": 158511129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550131989
    },
    {
        "content": "<p>R + S is a ring</p>",
        "id": 158511133,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132002
    },
    {
        "content": "<p>Making S a projective R module</p>",
        "id": 158511140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132012
    },
    {
        "content": "<p>So take R and S rings in different universes</p>",
        "id": 158511146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132025
    },
    {
        "content": "<p>S is projective because it's clearly locally free :-)</p>",
        "id": 158511194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132058
    },
    {
        "content": "<p>clearly</p>",
        "id": 158511198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550132068
    },
    {
        "content": "<p>It's free rank 1 over Spec (S) and free rank 0 over Spec(R)</p>",
        "id": 158511205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132088
    },
    {
        "content": "<p>I wonder if the function <code>f</code> in Reid's definition should be data</p>",
        "id": 158511214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550132107
    },
    {
        "content": "<p>I'm not qualified to answer that</p>",
        "id": 158511219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132125
    },
    {
        "content": "<p>The commutative diagram suggests non-uniqueness, so maybe not</p>",
        "id": 158511220,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550132129
    },
    {
        "content": "<p>is it \"canonical\"?</p>",
        "id": 158511225,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550132151
    },
    {
        "content": "<p>No</p>",
        "id": 158511229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132155
    },
    {
        "content": "<p>I'm glad to see you're learning the lingo</p>",
        "id": 158511275,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132171
    },
    {
        "content": "<p>huh, I just noticed that all 5 of the wikipedia definitions involve some existence statement</p>",
        "id": 158511294,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550132224
    },
    {
        "content": "<p>oh, I get it, Reid's definition is the \"dual basis\" one</p>",
        "id": 158511349,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550132283
    },
    {
        "content": "<p>All surjections split is one definition of a projective module</p>",
        "id": 158511369,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132327
    },
    {
        "content": "<p>Reid is using the universal surjection [EDIT: this is not quite true -- I resolve this issue about 30 posts down]</p>",
        "id": 158511385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132348
    },
    {
        "content": "<p>If that splits, they all do</p>",
        "id": 158511389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132361
    },
    {
        "content": "<p>I say this without any clear understanding of the details, which I'm currently trying to work out :-)</p>",
        "id": 158511477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132476
    },
    {
        "content": "<p>My understanding is that <code>lc</code> is dumb and ever since the multiple-rings-on-a-module thing the previous definition of modules over <code>finsupp</code> is typeclassable, and can replace <code>lc</code> as the theory of free modules</p>",
        "id": 158511554,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550132553
    },
    {
        "content": "<p>and we want <code>projective</code>, and to prove that free modules are projective</p>",
        "id": 158511581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550132606
    },
    {
        "content": "<p>I can't work out the details :-/</p>",
        "id": 158511644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132693
    },
    {
        "content": "<p>My posts just above starting at \"all surjections split\" sound appealing but I can't make them rigorous</p>",
        "id": 158511680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132757
    },
    {
        "content": "<p>I'm finally at a computer. Reid's definition is related to \"A module P is projective if and only if there is another module Q such that the direct sum of P and Q is a free module. \"</p>",
        "id": 158511758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132828
    },
    {
        "content": "<p>If F is a module with a surjection F -&gt; M, then this R-module map has a one-sided inverse if and only if \"F is isomorphic to M plus kernel of the surjection\"</p>",
        "id": 158511814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132896
    },
    {
        "content": "<p>This is not quite rigorous -- one should say the isomorphism between F and the direct sum identifies the surjection F -&gt; M with the projection</p>",
        "id": 158511840,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132952
    },
    {
        "content": "<p>Reid's definition is that M is projective iff a certain surjection from a certain explicit free module splits</p>",
        "id": 158511851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550132986
    },
    {
        "content": "<p>so it's equivalent to saying that M is a direct summand of that very explicit free module</p>",
        "id": 158511906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133011
    },
    {
        "content": "<p>I guess that's a key thing that should be flagged for people who might not know this stuff back to front -- if M and N are modules and we have a surjection M -&gt; N, then this surjection splitting is equivalent to M being isomorphic to N + kernel and the surjection being the projection</p>",
        "id": 158511940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133084
    },
    {
        "content": "<p>May we please have short exact sequences in Lean?</p>",
        "id": 158511945,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550133097
    },
    {
        "content": "<p>Once we have a good encoding for them, we can prove lots of interesting stuff.</p>",
        "id": 158511949,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550133111
    },
    {
        "content": "<p>Random surjections are harder than this, e.g. Z/4Z surjects onto Z/2Z but (a) this doesn't split and (b) Z/4Z is not Z/2Z + anything</p>",
        "id": 158511953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133118
    },
    {
        "content": "<p>(a) and (b) are equivalent statements</p>",
        "id": 158511998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133128
    },
    {
        "content": "<p>It's one of the things where I really don't know how to encode them in a nice way so that they are still intuitive to use. The mathematical notation is very compact.</p>",
        "id": 158512005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550133151
    },
    {
        "content": "<p>A <em>short</em> exact sequence is surely just a predicate on three modules and two maps</p>",
        "id": 158512037,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133180
    },
    {
        "content": "<p>I fear we will end up with <code>short_exact f g</code>. Which is really ugly.</p>",
        "id": 158512039,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550133181
    },
    {
        "content": "<p>Why is that ugly?</p>",
        "id": 158512051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133190
    },
    {
        "content": "<p>I agree that it's one approach</p>",
        "id": 158512059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133207
    },
    {
        "content": "<p>I think drawing a picture every time is tiresome</p>",
        "id": 158512065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550133216
    },
    {
        "content": "<p>OTOH a morphism of short exact sequences is maps on the modules</p>",
        "id": 158512074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133231
    },
    {
        "content": "<p>and I'm finding it hard to see the modules in Johan's proposal</p>",
        "id": 158512080,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133241
    },
    {
        "content": "<p>\"Let <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>⟶</mo><mi>A</mi><mstyle><msup><mo><mo>⟶</mo></mo><mi>f</mi></msup></mstyle><mi>B</mi><mstyle><msup><mo><mo>⟶</mo></mo><mi>g</mi></msup></mstyle><mi>C</mi><mo>⟶</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0 \\longrightarrow A \\stackrel{f}{\\longrightarrow} B \\stackrel{g}{\\longrightarrow} C \\longrightarrow 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:1.3442159999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.3552159999999998em;vertical-align:-0.011em;\"></span><span class=\"base\"><span class=\"mord mathrm\">0</span><span class=\"mrel\">⟶</span><span class=\"mord mathit\">A</span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3442159999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">⟶</span></span></span><span style=\"top:-3.758108em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.10764em;\">f</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.011em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span><span class=\"mrel\"><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1595em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span><span class=\"mop\">⟶</span></span></span><span style=\"top:-3.758108em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.03588em;\">g</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.011em;\"></span></span></span></span></span><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">C</span><span class=\"mrel\">⟶</span><span class=\"mord mathrm\">0</span></span></span></span> be a short exact sequence\" is much nicer to read.</p>",
        "id": 158512117,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550133243
    },
    {
        "content": "<p>like I said, drawing a picture</p>",
        "id": 158512124,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550133257
    },
    {
        "content": "<p>That's just the notation we should use :-)</p>",
        "id": 158512127,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133268
    },
    {
        "content": "<p>I think unicode notation is rubbish. We need LaTeX notation.</p>",
        "id": 158512137,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133284
    },
    {
        "content": "<p>I heard that <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> was working on this in between his 16 hours / week of teaching ;-)</p>",
        "id": 158512153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133307
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>notation `[0→ ` A ` →[` f `] ` B `→[` g `] ` C ` →0]` := short_exact f g\n</pre></div>",
        "id": 158512219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550133377
    },
    {
        "content": "<p>Ok... too bad we can use that to introduce them...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">([</span><span class=\"mi\">0</span><span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"n\">B</span> <span class=\"bp\">→</span><span class=\"o\">[</span><span class=\"n\">g</span><span class=\"o\">]</span> <span class=\"n\">C</span> <span class=\"bp\">→</span><span class=\"mi\">0</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">short_exact_sequence</span> <span class=\"o\">(</span><span class=\"n\">Mod</span> <span class=\"n\">R</span><span class=\"o\">))</span>\n</pre></div>",
        "id": 158512329,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550133510
    },
    {
        "content": "<p>oh wait, this isn't even enough, I have to annotate that this is about linear maps somewhere</p>",
        "id": 158512334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550133517
    },
    {
        "content": "<blockquote>\n<p>oh wait, this isn't even enough, I have to annotate that this is about linear maps somewhere</p>\n</blockquote>\n<p>That's hidden in <code>short_exact</code> I guess.</p>",
        "id": 158512367,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550133557
    },
    {
        "content": "<p>yes but if you want the same notation for group homs then it will be overloaded</p>",
        "id": 158512382,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550133575
    },
    {
        "content": "<p>I guess I want it for objects of an additive category?</p>",
        "id": 158512422,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550133603
    },
    {
        "content": "<p>how about no</p>",
        "id": 158512445,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550133633
    },
    {
        "content": "<p>this is a ridiculous notation</p>",
        "id": 158512461,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550133652
    },
    {
        "content": "<p>Will that notation work? We want A to be the domain of f.</p>",
        "id": 158512475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133665
    },
    {
        "content": "<p>the variables notation won't work</p>",
        "id": 158512478,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550133674
    },
    {
        "content": "<p>for the rest of it, sure, if you stick a <code>_l</code> at the end or something</p>",
        "id": 158512501,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550133698
    },
    {
        "content": "<p>It's not a ridiculous notation, it's just an example of how mathematicians think -- in a non-CS-y way.</p>",
        "id": 158512509,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133715
    },
    {
        "content": "<p>or use local notations... actually please use local notations for this</p>",
        "id": 158512511,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550133719
    },
    {
        "content": "<p>Mathematicians reason by drawing diagrams sometimes.</p>",
        "id": 158512564,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133736
    },
    {
        "content": "<p>This is hard to do in Lean.</p>",
        "id": 158512573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133743
    },
    {
        "content": "<p>You can't introduce five variables in a diagram in lean</p>",
        "id": 158512576,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550133746
    },
    {
        "content": "<p>So it's interesting, because there must be some underlying thing we're doing which is completely rigorous</p>",
        "id": 158512592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133768
    },
    {
        "content": "<p>and hence explicable to Lean</p>",
        "id": 158512597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133779
    },
    {
        "content": "<p>Yes, it's equivalent to a whole stack of variables definitions</p>",
        "id": 158512606,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550133787
    },
    {
        "content": "<p>but if you were to ask any mathematician to state the snake lemma</p>",
        "id": 158512609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133790
    },
    {
        "content": "<p>they would just draw a picture</p>",
        "id": 158512614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133801
    },
    {
        "content": "<p>We'll end up writing</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">B</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">h_short_exact</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">foobar</span>\n</pre></div>\n\n\n<p>only to realise that this gives problems later on, because of <code>_match</code>-issues.</p>",
        "id": 158512620,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550133819
    },
    {
        "content": "<p>if we had a bit more lean support (aka a fork) we could make a tactic that introduces a bunch of variables</p>",
        "id": 158512625,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550133825
    },
    {
        "content": "<p>I figured out the \"universal surjection\" claim above. Reid's surjection is not universal in the usual sense, because there is more than one choice.</p>",
        "id": 158512677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133868
    },
    {
        "content": "<p>choice of sense?</p>",
        "id": 158512697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550133878
    },
    {
        "content": "<p>Reid wrote down an explicit free module F (free with basis the elements of M)</p>",
        "id": 158512709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133902
    },
    {
        "content": "<p>and said that projective was equivalent to F -&gt; M splitting</p>",
        "id": 158512719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133912
    },
    {
        "content": "<p>The reason for this is that now if N is a random R-module and we have a surjection N -&gt; M</p>",
        "id": 158512729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133931
    },
    {
        "content": "<p>then because F is free, F -&gt; M lifts to F -&gt; N</p>",
        "id": 158512742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133959
    },
    {
        "content": "<p>-- but not necessarily uniquely</p>",
        "id": 158512786,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550133970
    },
    {
        "content": "<p>and I can now split N -&gt; M by going from M to F and then down to N</p>",
        "id": 158512806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550134011
    },
    {
        "content": "<p>in wiki you want to split a surjection in a different module though</p>",
        "id": 158512836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550134042
    },
    {
        "content": "<p>oh did I screw up?</p>",
        "id": 158512842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550134053
    },
    {
        "content": "<p>Oh, there are two different lifting definitions</p>",
        "id": 158512849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550134067
    },
    {
        "content": "<p>like your projective module is P and you have a surjection N -&gt;&gt; M and a linear map P -&gt; M</p>",
        "id": 158512850,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550134069
    },
    {
        "content": "<p>Yeah yeah, there's another one -- \"P is projective iff all surjections to P split\"</p>",
        "id": 158512905,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550134096
    },
    {
        "content": "<p>That's what I'm trying to check, not the more general one. They're equivalent you know ;-)</p>",
        "id": 158512914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550134111
    },
    {
        "content": "<p>okay, so you are halfway there</p>",
        "id": 158512917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550134114
    },
    {
        "content": "<p>I know this because they're both the definition of a projective module</p>",
        "id": 158512921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550134119
    },
    {
        "content": "<p>I'm proving that if P satisfies Reid's property then every short exact sequence 0 -&gt; M -&gt; N -&gt; P -&gt; 0 splits</p>",
        "id": 158512958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550134182
    },
    {
        "content": "<p>and I'm doing it by writing down a morphism of short exact sequences</p>",
        "id": 158513024,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550134228
    },
    {
        "content": "<p>It's just like alg closure, I'm now a little uncomfortable with this argument even though I've known it for years. Start with P which is Reid-projective. Reid then conjures up a free module which is isomorphic to K + P. Now say N -&gt; P is a surjection. I said \"Reid's module is universal, so...\" but there is actually no uniqueness in this claim: the projection K + P -&gt; P now lifts (not necessarily uniquely) to a map K + P -&gt; N, because you simply choose a basis for K + P and lift each element randomly and then use universal property of free objects. We now have maps K + P -&gt; N -&gt; P with the composite being the projection, so if P -&gt; K + P is the inclusion then P -&gt; K + P -&gt; N -&gt; P is the identity, hence P -&gt; K + P -&gt; N splits N -&gt; P. Thinking that Reid's object was \"universal\" leads you to this argument, but the map K + P -&gt; N is not at all canonical.</p>",
        "id": 158513479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550134692
    },
    {
        "content": "<p>Anyway, the reason this is somehow one of the more interesting parts of the equivalence from Lean's point of view is that Reid's definition has no universe issues, whereas I am quantifying over all N in the \"all surjections split\" definition.</p>",
        "id": 158513640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550134888
    },
    {
        "content": "<p>But this still doesn't answer how to change the codomain of the surjection away from P</p>",
        "id": 158513927,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550135193
    },
    {
        "content": "<p>no but that's just more standard maths</p>",
        "id": 158513934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135215
    },
    {
        "content": "<p>Which way do you want to see?</p>",
        "id": 158514018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135291
    },
    {
        "content": "<p>I was just interested in one argument which had as a conclusion that you can quantify over all universes</p>",
        "id": 158514026,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135329
    },
    {
        "content": "<p>For decades all these definitions were equivalent to me but now I see that some, in my language, have set-theoretic issues</p>",
        "id": 158514089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135402
    },
    {
        "content": "<p>Whereas Reid's most definitely does not</p>",
        "id": 158514128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135426
    },
    {
        "content": "<p>Assume it is Reid surjective, show that every surjection M -&gt;&gt; N splits over P -&gt; N</p>",
        "id": 158514283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550135602
    },
    {
        "content": "<p>Ok so the more general statement is just the same principle. Reid's definition shows that there's some K such that P + K is free. Now say A-&gt;B is surjective and we have P -&gt; B. We extend this to P+ K to B via the projection P + K -&gt; P</p>",
        "id": 158514291,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135609
    },
    {
        "content": "<p>Now by surjectivity the map P + K to B lifts to P + K to A</p>",
        "id": 158514383,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135661
    },
    {
        "content": "<p>is that what surjectivity does?</p>",
        "id": 158514405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550135679
    },
    {
        "content": "<p>And we have P -&gt; P + K</p>",
        "id": 158514409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135682
    },
    {
        "content": "<p>do we have AC for Mod(R)?</p>",
        "id": 158514415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550135690
    },
    {
        "content": "<p>and on a good day with a following wind the diagram will commute</p>",
        "id": 158514425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135699
    },
    {
        "content": "<p>I don't know what AC is</p>",
        "id": 158514457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135721
    },
    {
        "content": "<p>oh, I guess we have it: <code>exists_right_inverse_linear_map_of_surjective</code></p>",
        "id": 158514474,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550135742
    },
    {
        "content": "<p>I mean every surjection splits in Mod(R)</p>",
        "id": 158514489,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550135757
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> AC = axiom of choice <span aria-label=\"lol\" class=\"emoji emoji-1f606\" role=\"img\" title=\"lol\">:lol:</span></p>",
        "id": 158514544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550135778
    },
    {
        "content": "<p>The diagram commutes. We think of the map P -&gt; B as P -&gt; P + K -&gt; P -&gt; B</p>",
        "id": 158514545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135779
    },
    {
        "content": "<p>and then as P -&gt; P + K -&gt; B</p>",
        "id": 158514584,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135830
    },
    {
        "content": "<p>And that's the map we can lift</p>",
        "id": 158514589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135841
    },
    {
        "content": "<p>when you say P + K do you mean lc(P)?</p>",
        "id": 158514590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550135845
    },
    {
        "content": "<p>like is that K needed at all?</p>",
        "id": 158514597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550135862
    },
    {
        "content": "<p>Yes</p>",
        "id": 158514600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135872
    },
    {
        "content": "<p>so pi1 : P + K -&gt; P is lc.total and P -&gt; P+K is Reid's inverse</p>",
        "id": 158514654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550135917
    },
    {
        "content": "<p>Reid's definition is that lc(P) is isomorphic to P + K (K the kernel of the canonical map lc(P) -&gt; P)</p>",
        "id": 158514659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135931
    },
    {
        "content": "<p>Right</p>",
        "id": 158514662,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135938
    },
    {
        "content": "<p>And I'm using this basic but fundamental fact that a surjection having an inverse is equivalent to the surjection being a projection</p>",
        "id": 158514692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550135997
    },
    {
        "content": "<p>being a projection doesn't mean much to me</p>",
        "id": 158514742,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136015
    },
    {
        "content": "<p>but I understand the first thing, so if it's equivalent I'm happy</p>",
        "id": 158514749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136030
    },
    {
        "content": "<p>Being a projection is a way of extending a map P -&gt; M to a map P + K -&gt; M</p>",
        "id": 158514775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136066
    },
    {
        "content": "<p>You just let it be 0 on K</p>",
        "id": 158514780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136079
    },
    {
        "content": "<p>Wait</p>",
        "id": 158514796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136116
    },
    {
        "content": "<p>It's more than an extension</p>",
        "id": 158514843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136127
    },
    {
        "content": "<p>So we split f : A -&gt;&gt; B to f^-1 : B -&gt; A, and the desired map comes from P -&gt; lc(P) -&gt; P -&gt; B -&gt; A</p>",
        "id": 158514848,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136150
    },
    {
        "content": "<p>It's the fact that we can factor any map P -&gt; M as P -&gt; P + K -&gt; M</p>",
        "id": 158514854,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136159
    },
    {
        "content": "<p>That's the key</p>",
        "id": 158514855,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136163
    },
    {
        "content": "<p>f^-1 might not be linear</p>",
        "id": 158514872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136202
    },
    {
        "content": "<p>I mean the inverse coming from that theorem</p>",
        "id": 158514879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136215
    },
    {
        "content": "<p>every surjection splits</p>",
        "id": 158514883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136227
    },
    {
        "content": "<p>Wait</p>",
        "id": 158514884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136228
    },
    {
        "content": "<p>A random surjection does not split</p>",
        "id": 158514938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136249
    },
    {
        "content": "<p>This is exactly what we're trying to work around</p>",
        "id": 158514947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136265
    },
    {
        "content": "<p>oh crap that theorem's in vector spaces</p>",
        "id": 158514951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136273
    },
    {
        "content": "<p>Those are free</p>",
        "id": 158514953,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550136283
    },
    {
        "content": "<p>Sorry, I wasn't paying attention. Should have warned you when you started talking about AC</p>",
        "id": 158514965,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550136301
    },
    {
        "content": "<p>Every vector space has a basis.</p>",
        "id": 158514988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136331
    },
    {
        "content": "<p>okay, so then I'm still stuck on</p>\n<blockquote>\n<p>Now by surjectivity the map P + K to B lifts to P + K to A</p>\n</blockquote>",
        "id": 158514992,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136334
    },
    {
        "content": "<p>That says that every k-module is free, if k is a field</p>",
        "id": 158514995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136343
    },
    {
        "content": "<p>but the integers are not so forgiving.</p>",
        "id": 158515003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136350
    },
    {
        "content": "<p>Z-modules are abelian groups</p>",
        "id": 158515011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136361
    },
    {
        "content": "<p>and Z/2Z is not free</p>",
        "id": 158515057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136366
    },
    {
        "content": "<p>yeah, I get that not all modules are free, although I don't see immediately what this has to do with inverting surjections, but I can believe it</p>",
        "id": 158515063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136382
    },
    {
        "content": "<p>and Z/4Z -&gt; Z/2Z is a surjection which does not split, because Z/4Z is not isomorphic to Z/2Z + Z/2Z</p>",
        "id": 158515065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136388
    },
    {
        "content": "<p>The key definition is that a surjection M -&gt; N <em>splits</em> if there's a linear injection N -&gt; M which is a one-sided inverse</p>",
        "id": 158515075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136414
    },
    {
        "content": "<p>The lemma is that a surjection splits iff it's isomorphic to a projection</p>",
        "id": 158515091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136431
    },
    {
        "content": "<blockquote>\n<p>yeah, I get that not all modules are free, although I don't see immediately what this has to do with inverting surjections, but I can believe it</p>\n</blockquote>\n<p>Free =&gt; projective =&gt; surjections split</p>",
        "id": 158515114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550136472
    },
    {
        "content": "<p>If M-&gt;N has kernel K and M -&gt; N splits, then choose a splitting i: N -&gt; M. We now get a map N + K -&gt; M and this is an isomorphism</p>",
        "id": 158515115,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136473
    },
    {
        "content": "<p>The theorem is that if P is projective then all surjections onto P split</p>",
        "id": 158515172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136498
    },
    {
        "content": "<p>Or maybe it's the definition, who knows</p>",
        "id": 158515178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136511
    },
    {
        "content": "<blockquote>\n<p>okay, so then I'm still stuck on</p>\n<blockquote>\n<p>Now by surjectivity the map P + K to B lifts to P + K to A</p>\n</blockquote>\n</blockquote>\n<p>This is where we use that P + K is free. We construct a completely non-canonical lift of P+K-&gt;B to P+K-&gt;A</p>",
        "id": 158515195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136564
    },
    {
        "content": "<p>okay, so <code>exists_left_inverse_linear_map_of_injective</code> needs generalizing</p>",
        "id": 158515264,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136616
    },
    {
        "content": "<p>by saying \"pick a basis of P+K, because it's free. Choose a random basis element. It gets mapped to an element of A which we know lifts (via a completely random non-linear set-theoretic splitting A -&gt; B) to an element of B. Send the basis element here. Extend by linearity\"</p>",
        "id": 158515270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136634
    },
    {
        "content": "<p>The \"extend by linearity\" line is exactly where you assume that something is free. If I have a random module M and a random generating subset, I can't be defining maps M -&gt; N by saying \"send the generators to random things and extend linearly\" because the generators might satisfy random relations which won't work in N</p>",
        "id": 158515314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136695
    },
    {
        "content": "<p>the proof constructs a basis C extending the image of a basis of the domain basis</p>",
        "id": 158515319,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136704
    },
    {
        "content": "<p>I am using the obvious basis of lc(P) in my head</p>",
        "id": 158515373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136732
    },
    {
        "content": "<p>both sides need vector space assumption, but the basis on the domain follows if the domain is free, and the basis on the target comes from... where?</p>",
        "id": 158515376,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136739
    },
    {
        "content": "<p>I think that's the only basis in the argument</p>",
        "id": 158515377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136741
    },
    {
        "content": "<p>You have lost me</p>",
        "id": 158515394,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136751
    },
    {
        "content": "<p>the second basis is used for the \"extend by linearity\" part</p>",
        "id": 158515404,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136768
    },
    {
        "content": "<p>each basis element of lc(P) goes somewhere, so you take these elements and throw more in to make a basis of B</p>",
        "id": 158515435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136810
    },
    {
        "content": "<p><code>exists_left_inverse_linear_map_of_injective</code> generalises to the statement that if M is a random module and P is a projective module then every injection M -&gt; P has a one-sided inverse.</p>",
        "id": 158515448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136826
    },
    {
        "content": "<p>oh, oops wrong proof</p>",
        "id": 158515499,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136856
    },
    {
        "content": "<p><code>exists_right_inverse_linear_map_of_surjective</code></p>",
        "id": 158515500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136858
    },
    {
        "content": "<p>ah, this one only needs one basis</p>",
        "id": 158515514,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136878
    },
    {
        "content": "<p>oh, it's actually a zero cost generalization, there is no need to assume beta is a vector space , except that alpha is a field anyway in the theorem statement</p>",
        "id": 158515549,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550136950
    },
    {
        "content": "<p><code>exists_right_inverse_linear_map_of_surjective</code> generalizes to the assertion that if P is a projective module then every surjection P -&gt; M has a right inverse</p>",
        "id": 158515596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550136965
    },
    {
        "content": "<p>Every module over a field is a vector space, hence has a basis, hence is free, hence is projective</p>",
        "id": 158515613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137007
    },
    {
        "content": "<p>Over a general ring you get two new phenomena which stop things from being free.</p>",
        "id": 158515637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137033
    },
    {
        "content": "<p>The first is that modules over the ring can \"wrap around themselves\" -- e.g. Z/10Z is a module over Z but {1} isn't a basis because it's linearly dependent -- 10 * 1 = 0</p>",
        "id": 158515656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137056
    },
    {
        "content": "<p>The second is that you can have abelian groups like Q which have no torsion as Z-modules but which aren't free anyway, because any two elements are linearly dependent</p>",
        "id": 158515717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137092
    },
    {
        "content": "<p>Neither Q nor Z/10Z is free over Z</p>",
        "id": 158515729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137120
    },
    {
        "content": "<p>right</p>",
        "id": 158515733,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550137125
    },
    {
        "content": "<p>But Q is flat over Z :-)</p>",
        "id": 158515734,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137127
    },
    {
        "content": "<p>but that's probably a story for another day</p>",
        "id": 158515762,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137178
    },
    {
        "content": "<p>okay, I am convinced that projective modules are interesting enough to have a few theorems in mathlib</p>",
        "id": 158515764,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550137180
    },
    {
        "content": "<p>A nice example of a projective module that isn't free is a non-zero ideal in the integers of a number field.</p>",
        "id": 158515822,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137233
    },
    {
        "content": "<p>not Z?</p>",
        "id": 158515827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550137252
    },
    {
        "content": "<p>If R = Z[sqrt(-5)] then numbers do not factor uniquely into primes</p>",
        "id": 158515830,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137254
    },
    {
        "content": "<p>oh right Z is free</p>",
        "id": 158515843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550137272
    },
    {
        "content": "<p>All ideals of Z are principal, and a non-zero ideal is hence free -- the generator is a basis</p>",
        "id": 158515849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137283
    },
    {
        "content": "<p>But for R you have <code>2*3=(1+sqrt(-5))*(1-sqrt(-5))</code></p>",
        "id": 158515857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137299
    },
    {
        "content": "<p>and all of these are primes</p>",
        "id": 158515899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137323
    },
    {
        "content": "<p>aside: How do you check stuff like that?</p>",
        "id": 158515910,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550137354
    },
    {
        "content": "<p>However uniqueness of factorization is restored if you have the amazing insight to invent \"ideal numbers\", generalisations of numbers which do have unique factorization, and which historically I believe is the reason that ideals are called ideal.</p>",
        "id": 158515919,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137381
    },
    {
        "content": "<p>The incredibly tedious proof that 2,3, etc are all primes is \"embed everything in the complexes and observe that if r in R is non-zero then |r|&gt;=1\"</p>",
        "id": 158515941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137411
    },
    {
        "content": "<p>and so an algorithm for checking to see if x is prime is to consider the finitely many elements of R whose norm is &lt;= |x| and see if any of them go into x</p>",
        "id": 158515961,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137436
    },
    {
        "content": "<p>Don't some primes factor in number fields like that?</p>",
        "id": 158516006,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550137448
    },
    {
        "content": "<p>Normal prime numbers can factor, yes</p>",
        "id": 158516009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137462
    },
    {
        "content": "<p>oh, did you mean something other than 2,3, etc</p>",
        "id": 158516015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550137478
    },
    {
        "content": "<p>Oh wait, I am using incorrect notation.</p>",
        "id": 158516020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137480
    },
    {
        "content": "<p>I should say that if R=Z[sqrt(-5)] then elements of R do not in general factor uniquely into <em>irreducibles</em></p>",
        "id": 158516047,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137523
    },
    {
        "content": "<p>And the tedious proof I gave you above is that 2,3,1+sqrt(-5) and 1-sqrt(-5) are all <em>irreducible</em></p>",
        "id": 158516060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137544
    },
    {
        "content": "<p>aha, not the same because Z{sqrt(-5)] is not a UFD, yes?</p>",
        "id": 158516063,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550137550
    },
    {
        "content": "<p>Yeah.</p>",
        "id": 158516069,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137561
    },
    {
        "content": "<p>For Z[sqrt(-5)] you can use the embedding into C as an algorithm for checking for irreducibility.</p>",
        "id": 158516123,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137594
    },
    {
        "content": "<p>(C the complexes)</p>",
        "id": 158516126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137599
    },
    {
        "content": "<p>When you talk about the norm, you mean the norm on C, not that funny number field norm?</p>",
        "id": 158516130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550137608
    },
    {
        "content": "<p>a^2 + 5b^2 or something</p>",
        "id": 158516144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550137625
    },
    {
        "content": "<p>Well using the funny number field norm is a bit saner for this example</p>",
        "id": 158516147,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137630
    },
    {
        "content": "<p>because it's nat-valued and is the square of the complex norm</p>",
        "id": 158516154,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137641
    },
    {
        "content": "<p>so for this example the stories are the same.</p>",
        "id": 158516163,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137667
    },
    {
        "content": "<p>I guess as long as you have Z[sqrt(-n)] the norm is positive definite so this list is finite</p>",
        "id": 158516166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550137681
    },
    {
        "content": "<p>but for Z[sqrt(n)] it's some kind of pell's equation</p>",
        "id": 158516212,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550137703
    },
    {
        "content": "<p>So some German mathematician 150 years ago had the idea that 2  and 1+sqrt(-5) seemed to be coprime in the sense that they couldn't find anything dividing both of them</p>",
        "id": 158516213,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137710
    },
    {
        "content": "<p>dedekind, I presume?</p>",
        "id": 158516230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550137746
    },
    {
        "content": "<p>For Z[sqrt(n)] you'd be better off using the funny number field norm, but now there are issues because there are infinitely many elements of norm &lt;= B</p>",
        "id": 158516231,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137746
    },
    {
        "content": "<p>so you need tricks to cut your search space down</p>",
        "id": 158516235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137760
    },
    {
        "content": "<p>the first of which is that you need a good way to solve Pell's equation</p>",
        "id": 158516239,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137772
    },
    {
        "content": "<p>is there a reason to believe that the large ones don't matter?</p>",
        "id": 158516246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550137784
    },
    {
        "content": "<p>So dammit 2 and 1+sqrt(-5) seem to be distinct \"primes\" i.e. irreducible, but we can't solve lambda * 2 + mu * 1+sqrt(-5) = 1</p>",
        "id": 158516292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137805
    },
    {
        "content": "<p>even though they're \"coprime\"</p>",
        "id": 158516300,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137814
    },
    {
        "content": "<p>lol sorry for the distractions</p>",
        "id": 158516301,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550137830
    },
    {
        "content": "<p>and then they were left with this big pile of elements of the form lambda * 2 + mu * (1+sqrt(-5))</p>",
        "id": 158516303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137834
    },
    {
        "content": "<p>and they left them under a microscope and there was some chemical reaction or something</p>",
        "id": 158516310,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137858
    },
    {
        "content": "<p>and when they came back they realised they'd invented ideals</p>",
        "id": 158516326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137867
    },
    {
        "content": "<p>and that instead of trying to find 1 in this set, they should just let this entire set be the model for the highest common factor</p>",
        "id": 158516344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137910
    },
    {
        "content": "<p>and then it turned out that they could multiply two sets of this form</p>",
        "id": 158516390,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137932
    },
    {
        "content": "<p>and after the dust had cleared, uniqueness of factorization had been restored!</p>",
        "id": 158516393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137946
    },
    {
        "content": "<p>what does that statement mean here?</p>",
        "id": 158516398,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550137960
    },
    {
        "content": "<p>So if I=(2,1+sqrt(-5)) and J = (3,1+sqrt(-5)) then I and J are prime ideals</p>",
        "id": 158516403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137971
    },
    {
        "content": "<p>and 2=I^2</p>",
        "id": 158516417,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550137988
    },
    {
        "content": "<p>and if K = (3,1-sqrt(-5)) then K is prime too and 3 = J*K</p>",
        "id": 158516422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138003
    },
    {
        "content": "<p>and (1+sqrt(-5)) is I*K</p>",
        "id": 158516431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138013
    },
    {
        "content": "<p>and the non-unique <code>2*3=(1+sqrt(-5))(1-sqrt(-5))</code> now can be written as <code>(I^2)*(J*K)=(I*J)*(I*K)</code></p>",
        "id": 158516483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138052
    },
    {
        "content": "<p>interesting</p>",
        "id": 158516493,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550138070
    },
    {
        "content": "<p>which becomes the unique <code>(6)=I^2*J*K</code></p>",
        "id": 158516497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138078
    },
    {
        "content": "<p>so these sets were behaving better than numbers, so they called them ideal numbers</p>",
        "id": 158516501,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138093
    },
    {
        "content": "<p>so why isn't this the even more fundamental theorem of arithmetic?</p>",
        "id": 158516524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550138113
    },
    {
        "content": "<p>and the principal ideal <code>(6)</code> is factoring uniquely into prime ideals</p>",
        "id": 158516526,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138118
    },
    {
        "content": "<p>The correct theorem is that for a Dedekind domain, every non-zero ideal is uniquely the product of prime ideals.</p>",
        "id": 158516530,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138142
    },
    {
        "content": "<p>The proof is that this is true by one of the definitions of a Dedekind domain</p>",
        "id": 158516536,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138157
    },
    {
        "content": "<p>lol figures</p>",
        "id": 158516577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550138166
    },
    {
        "content": "<p>Another definition is that it's an integrally closed integral domain for which all non-zero prime ideals are maximal. We have all of those notions in Lean.</p>",
        "id": 158516585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138196
    },
    {
        "content": "<p>Assuming Kenny PR'ed integrally closed and someone accepted it, which might not be true</p>",
        "id": 158516590,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138220
    },
    {
        "content": "<p>Or maybe Johan PR'ed it</p>",
        "id": 158516600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138232
    },
    {
        "content": "<p>I know they were both thinking about it but it was when I was mired in teaching hell</p>",
        "id": 158516606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138245
    },
    {
        "content": "<p>We don't have this factorization statement in mathlib, right?</p>",
        "id": 158516610,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550138251
    },
    {
        "content": "<p>No, but I did consider setting it as an undergraduate project</p>",
        "id": 158516618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138271
    },
    {
        "content": "<p>or dedekind domains at all</p>",
        "id": 158516620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550138275
    },
    {
        "content": "<p>Right.</p>",
        "id": 158516624,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138281
    },
    {
        "content": "<p>but I guess you can also unfold the statement PID =&gt; DD using this definition</p>",
        "id": 158516669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550138294
    },
    {
        "content": "<p>The reason that such a theorem would be important for mathlib, is that the ring of integers of a number field is by definition an integral closure</p>",
        "id": 158516673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138302
    },
    {
        "content": "<p>and it is not hard to go from that to checking that the ring of integers of a number field is a Dedekind domain</p>",
        "id": 158516677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138322
    },
    {
        "content": "<p>oh wait PID =&gt; DD is trivial isn't it</p>",
        "id": 158516680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550138338
    },
    {
        "content": "<p>However there are other examples, for example <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><mo>[</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo>]</mo><mi mathvariant=\"normal\">/</mi><mo>(</mo><msup><mi>Y</mi><mn>2</mn></msup><mo>−</mo><msup><mi>X</mi><mn>3</mn></msup><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}[X,Y]/(Y^2-X^3-1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"mopen\">[</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span><span class=\"mord mathrm\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span><span class=\"mbin\">−</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">3</span></span></span></span></span></span></span></span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 158516681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138341
    },
    {
        "content": "<p>Well, it depends on which definition of DD you use I guess</p>",
        "id": 158516693,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138355
    },
    {
        "content": "<p>You can make everything trivial if you choose your definitions carefully</p>",
        "id": 158516701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138374
    },
    {
        "content": "<p>PID -&gt; UFD and UFD's are integrally closed</p>",
        "id": 158516710,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138396
    },
    {
        "content": "<p>that's my hope</p>",
        "id": 158516711,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550138397
    },
    {
        "content": "<p>I think I might have missed out a Noetherian hypothesis in one of my definitions of Dedekind domain; I don't have Cassels-Froehlich to hand</p>",
        "id": 158516787,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138432
    },
    {
        "content": "<p>But again we have it in mathlib</p>",
        "id": 158516795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138443
    },
    {
        "content": "<blockquote>\n<p>Assuming Kenny PR'ed integrally closed and someone accepted it, which might not be true</p>\n</blockquote>\n<p>it's still being gradually PR'ed ~ the current one is <a href=\"https://github.com/leanprover/mathlib/issues/679\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/679\">#679</a> ~</p>",
        "id": 158516797,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1550138447
    },
    {
        "content": "<p>Maybe I need Noetherian, integrally closed, and all non-zero primes are maximal</p>",
        "id": 158516860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138458
    },
    {
        "content": "<p>(and a domain)</p>",
        "id": 158516912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138469
    },
    {
        "content": "<p>But if you use the definition that all non-zero ideals factor uniquely into prime ideals then PID -&gt; DD should be very easy. I'm a mathematician, I have no idea what \"the\" definition of a DD is. I believe that in Cassels-Froehlich it's exactly one of these proposition-definitions.</p>",
        "id": 158516984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138541
    },
    {
        "content": "<p>The two definitions I've suggested above and I think there's a third one too.</p>",
        "id": 158517011,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138582
    },
    {
        "content": "<p>The reason I mention these things it that if R = Z[sqrt(-5)] then the principal ideals are the free submodules of R, but every ideal is projective.</p>",
        "id": 158517034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138619
    },
    {
        "content": "<p>So it's a good concrete example of a projective non-free module.</p>",
        "id": 158517087,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138652
    },
    {
        "content": "<p>is this easy to see concretely with Reid's definition?</p>",
        "id": 158517097,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550138680
    },
    {
        "content": "<p>If I=(2,1+sqrt(-5)) as above, then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>I</mi><mn>2</mn></msup><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">I^2=2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">2</span></span></span></span></p>",
        "id": 158517101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138684
    },
    {
        "content": "<p>and this implies that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mo>⊕</mo><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I\\oplus I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"mbin\">⊕</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span></span></span></span> is free</p>",
        "id": 158517106,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138695
    },
    {
        "content": "<p>I have no idea at all how to see it from Reid's definition</p>",
        "id": 158517122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138706
    },
    {
        "content": "<p>But I bet that, after a struggle, I could come up with a basis for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mo>⊕</mo><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I\\oplus I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"mbin\">⊕</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span></span></span></span>, of size 2</p>",
        "id": 158517142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138733
    },
    {
        "content": "<p>oh you are using the P + K free version</p>",
        "id": 158517143,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550138734
    },
    {
        "content": "<p>size 2? Not 1?</p>",
        "id": 158517155,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550138748
    },
    {
        "content": "<p>Yeah, projective modules have dimension even though they don't have bases</p>",
        "id": 158517204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138765
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span></span></span></span> is \"locally free of rank 1\"</p>",
        "id": 158517218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138782
    },
    {
        "content": "<p>I mean (2) is principal so it should have dimension 1</p>",
        "id": 158517222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550138784
    },
    {
        "content": "<p>Yes, but <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mo>⊕</mo><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I\\oplus I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"mbin\">⊕</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span></span></span></span> is the abstract direct sum</p>",
        "id": 158517236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138799
    },
    {
        "content": "<p>oh I+I not I*I</p>",
        "id": 158517239,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550138807
    },
    {
        "content": "<p>it's not <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>I</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">I^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span></span></span> which is an ideal-theoretic multiplication</p>",
        "id": 158517242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138818
    },
    {
        "content": "<p>okay so why does I^2 = 2 imply I+I free?</p>",
        "id": 158517275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550138856
    },
    {
        "content": "<p>That's not obvious</p>",
        "id": 158517277,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138865
    },
    {
        "content": "<p>An unhelpful answer is that this is how the picard group of a Dedekind domain works</p>",
        "id": 158517329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138884
    },
    {
        "content": "<p>Are you asserting it from experience or from a high powered theorem?</p>",
        "id": 158517335,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550138895
    },
    {
        "content": "<p>or both?</p>",
        "id": 158517338,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550138899
    },
    {
        "content": "<p>both</p>",
        "id": 158517339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138899
    },
    {
        "content": "<p>I would rather argue that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span></span></span></span> is projective because by definition a module is projective iff it is locally free</p>",
        "id": 158517385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550138971
    },
    {
        "content": "<p>and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span></span></span></span> is locally free because the localisations of a Dedekind domain are 1-dimensional regular local rings and over such a ring all projective modules are free</p>",
        "id": 158517457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139027
    },
    {
        "content": "<p>I think that argument uses less machinery but it's still hopeless</p>",
        "id": 158517462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139040
    },
    {
        "content": "<p>I'm sure there will be an elementary argument</p>",
        "id": 158517464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139047
    },
    {
        "content": "<p>wow you have high powered theorems up all your sleeves</p>",
        "id": 158517472,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550139054
    },
    {
        "content": "<p>meaning that I've forgotten all the low-level proofs :-/</p>",
        "id": 158517586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139150
    },
    {
        "content": "<p>It's not necessarily a bad thing, I'd rather have the high powered theorem than an ad hoc argument</p>",
        "id": 158517605,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550139187
    },
    {
        "content": "<p>Geometrically, what we are doing is analysing 1-dimensional rings. This is not dimension in the sense of number of basis elements, this is a different use of the word</p>",
        "id": 158517727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139273
    },
    {
        "content": "<p>If R is a Dedekind domain then Spec(R) is a smooth curve</p>",
        "id": 158517739,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139288
    },
    {
        "content": "<p>and nowadays I think about algebra using R as being geometric statements about this curve</p>",
        "id": 158517781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139334
    },
    {
        "content": "<p>In fact I should say that in some sense this is a <em>bad</em> thing about the current status of mathlib. this Spec trick absolutely relies on the fact that R is commutative.</p>",
        "id": 158517838,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139366
    },
    {
        "content": "<p>So all of the theory of modules which we are building up all has these inbuilt assumptions that R is commutative because it's the only case I've ever cared about, and I know how to steer it really well, and I point people like Kenny to books about commutative rings</p>",
        "id": 158517866,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139413
    },
    {
        "content": "<p>lol I'm pretty sure this is your fault</p>",
        "id": 158517884,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550139439
    },
    {
        "content": "<p>But some of the more basic stuff, like all the foundational work I was looking at yesterday in mathlib about how modules over a commutative ring form a lattice etc</p>",
        "id": 158517887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139444
    },
    {
        "content": "<p>I would have left comm out everywhere and you would have called me crazy</p>",
        "id": 158517895,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550139456
    },
    {
        "content": "<p>all of that works for modules over a non-commutative ring</p>",
        "id": 158517906,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139461
    },
    {
        "content": "<p>in metamath vector spaces are over a division ring</p>",
        "id": 158517966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550139488
    },
    {
        "content": "<p>literally the whole theory goes through</p>",
        "id": 158517970,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550139499
    },
    {
        "content": "<p>It would not surprise me if you could replace <code>comm_ring</code> by <code>ring</code> in some of those mathlib files and they would still compile</p>",
        "id": 158517984,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139507
    },
    {
        "content": "<p>It's just that all us algebraic geometers know that there is no interesting example of a ring which isn't commutative :-)</p>",
        "id": 158517997,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139529
    },
    {
        "content": "<p>until you do</p>",
        "id": 158518004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550139539
    },
    {
        "content": "<p>and one day an algebraist will stumble over this work and will be like \"WTF have you idiots done??\"</p>",
        "id": 158518016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139554
    },
    {
        "content": "<p>I should get to work. Let me finish with this. The <em>class group</em> of a Dedekind domain is the set of isomorphism classes of non-zero ideals!</p>",
        "id": 158518084,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139613
    },
    {
        "content": "<p>is that a group or is the word just for decoration?</p>",
        "id": 158518102,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550139645
    },
    {
        "content": "<p>Miraculously, this set is a group, because (and this needs checking) if I and J are isomorphic, then so are <code>I*K</code> and <code>J*K</code></p>",
        "id": 158518108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139656
    },
    {
        "content": "<p>and this is because two ideals <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.09618em;\">J</span></span></span></span> are isomorphic iff there is an element <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>λ</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">λ</span></span></span></span> of the field of fractions of the Dedekind domain such that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>λ</mi><mi>I</mi><mo>=</mo><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda I=J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">λ</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"mrel\">=</span><span class=\"mord mathit\" style=\"margin-right:0.09618em;\">J</span></span></span></span></p>",
        "id": 158518140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139697
    },
    {
        "content": "<p>isomorphism of ideals means an automorphism of R that sends I to J?</p>",
        "id": 158518146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550139704
    },
    {
        "content": "<p>It means abstractly isomorphic as modules</p>",
        "id": 158518148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139714
    },
    {
        "content": "<p>but a much better definition of the equivalence relation would be the one using the field of fractions</p>",
        "id": 158518205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139742
    },
    {
        "content": "<p>For example all principal ideals are related (let me say \"related\" not \"isomorphic\") because to relate <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>a</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(a)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\">a</span><span class=\"mclose\">)</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>b</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(b)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\">b</span><span class=\"mclose\">)</span></span></span></span> you just multiply by <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>b</mi><mi mathvariant=\"normal\">/</mi><mi>a</mi></mrow><annotation encoding=\"application/x-tex\">b/a</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\">b</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\">a</span></span></span></span></p>",
        "id": 158518237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139777
    },
    {
        "content": "<p>This is an equivalence relation. The equivalence class of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>=</mo><mo>(</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">R=(1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mrel\">=</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">)</span></span></span></span> is all the principal ideals</p>",
        "id": 158518253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139807
    },
    {
        "content": "<p>aha, so the field of fractions is a group action on the ideals?</p>",
        "id": 158518255,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550139809
    },
    {
        "content": "<p>nonzero elements of the field, I assume</p>",
        "id": 158518268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550139835
    },
    {
        "content": "<p>The best way to think about it is to define a <em>fractional ideal</em> to be a...let me set up notation</p>",
        "id": 158518270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139838
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> a Dedekind domain, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">K</span></span></span></span> its field of fractions</p>",
        "id": 158518323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139852
    },
    {
        "content": "<p>e.g. <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>=</mo><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow></mrow><annotation encoding=\"application/x-tex\">R=\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68889em;\"></span><span class=\"strut bottom\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi><mo>=</mo><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow></mrow><annotation encoding=\"application/x-tex\">K=\\mathbb{Q}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68889em;\"></span><span class=\"strut bottom\" style=\"height:0.85556em;vertical-align:-0.16667em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">K</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span></span></span></span></p>",
        "id": 158518337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139865
    },
    {
        "content": "<p>or R=Z[sqrt(-5)] and K=Q(sqrt(-5))</p>",
        "id": 158518347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139883
    },
    {
        "content": "<p>A <em>fractional ideal</em> is an \"ideal with denominator\"</p>",
        "id": 158518355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139896
    },
    {
        "content": "<p>i.e. a subset <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">J</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.09618em;\">J</span></span></span></span> of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">K</span></span></span></span> such that there exists some non-zero <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">r\\in R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mrel\">∈</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mi>J</mi></mrow><annotation encoding=\"application/x-tex\">rJ</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathit\" style=\"margin-right:0.09618em;\">J</span></span></span></span> is a regular non-zero ideal</p>",
        "id": 158518376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139925
    },
    {
        "content": "<p>For example <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mfrac><mrow><mn>3</mn></mrow><mrow><mn>7</mn></mrow></mfrac><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\frac{3}{7}\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.845108em;\"></span><span class=\"strut bottom\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">7</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> is a fractional ideal of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68889em;\"></span><span class=\"strut bottom\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span></p>",
        "id": 158518387,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139949
    },
    {
        "content": "<p>btw we definitely need a predicate version of \"field of fractions\", so you can say that</p>",
        "id": 158518395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550139959
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>{</mo><mfrac><mrow><mn>3</mn></mrow><mrow><mn>7</mn></mrow></mfrac><mi>n</mi><mspace width=\"0.16667em\"></mspace><mo>:</mo><mspace width=\"0.16667em\"></mspace><mi>n</mi><mo>∈</mo><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><mspace width=\"0.16667em\"></mspace><mo>}</mo></mrow><annotation encoding=\"application/x-tex\">\\{\\frac{3}{7}n\\,:\\,n\\in\\mathbb{Z}\\,\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.845108em;\"></span><span class=\"strut bottom\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"base\"><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">7</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">3</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord mathit\">n</span><span class=\"mrel\"><span class=\"mspace thinspace\"></span><span class=\"mrel\">:</span></span><span class=\"mord mathit\"><span class=\"mspace thinspace\"></span><span class=\"mord mathit\">n</span></span><span class=\"mrel\">∈</span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span><span class=\"mclose\"><span class=\"mspace thinspace\"></span><span class=\"mclose\">}</span></span></span></span></span></p>",
        "id": 158518442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550139969
    },
    {
        "content": "<p>You can multiply fractional ideals together. A fractional ideal is an R-module, in fact it's a sub-R-module of K</p>",
        "id": 158518463,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140012
    },
    {
        "content": "<p>Isn't that the same as just saying <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi><mi mathvariant=\"normal\">/</mi><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">I/r</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"mord mathrm\">/</span><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span></span></span></span> for some nonzero <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>r</mi><mo>∈</mo><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">r\\in R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.02778em;\">r</span><span class=\"mrel\">∈</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span>?</p>",
        "id": 158518482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550140027
    },
    {
        "content": "<p>There's an action of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>K</mi><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">K^\\times</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span> on the fractional ideals. Yes, it's the same</p>",
        "id": 158518488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140037
    },
    {
        "content": "<p>A fractional ideal is <em>principal</em> if it's of the form <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>κ</mi><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">κ</span><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> for some <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>κ</mi><mo>∈</mo><msup><mi>K</mi><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\kappa\\in K^\\times</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:0.810431em;vertical-align:-0.0391em;\"></span><span class=\"base\"><span class=\"mord mathit\">κ</span><span class=\"mrel\">∈</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 158518495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140061
    },
    {
        "content": "<p>(<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>K</mi><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">K^\\times</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span> is the group of non-zero element of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">K</span></span></span></span>)</p>",
        "id": 158518502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140074
    },
    {
        "content": "<p>The group acts on the fractional ideals, one orbit is the principal fractional ideals, and if unique factorization fails in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> then there are other orbits</p>",
        "id": 158518574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140109
    },
    {
        "content": "<p>Say two ideals are equivalent if they're in the same orbit. Then the equivalence classes form a group, the so-called ideal class group.</p>",
        "id": 158518591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140142
    },
    {
        "content": "<blockquote>\n<p>The group acts on the fractional ideals, one orbit is the principal fractional ideals, and if unique factorization fails in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> then there are other orbits</p>\n</blockquote>\n<p><strong>iff</strong></p>",
        "id": 158518592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550140142
    },
    {
        "content": "<p>A mathematician would say that the ideal class group \"measures\" the failure of uniqueness of factorization</p>",
        "id": 158518625,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140177
    },
    {
        "content": "<p>Is the fact about <code>I*K ~ J*K</code> only valid in DDs?</p>",
        "id": 158518698,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550140214
    },
    {
        "content": "<p>i.e. the ideal class group of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is the trivial group iff <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a PID iff <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> is a UFD</p>",
        "id": 158518703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140222
    },
    {
        "content": "<p>I have never seen the concept of fractional ideal used outside the theory of DD's but it would not surprise me at all if parts of the general theory could be set up for general ID's</p>",
        "id": 158518729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140258
    },
    {
        "content": "<p>Well, you have <code>ClGr(R) = Pic(Spec(R))</code></p>",
        "id": 158518750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550140281
    },
    {
        "content": "<p>And you have <code>Pic(X)</code> for any scheme <code>X</code></p>",
        "id": 158518758,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550140292
    },
    {
        "content": "<p>In a DD it's true that two fractional ideals are abstractly isomorphic as R-modules if and only if they are in the same orbit under <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>K</mi><mo>×</mo></msup></mrow><annotation encoding=\"application/x-tex\">K^\\times</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.771331em;\"></span><span class=\"strut bottom\" style=\"height:0.771331em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">K</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.771331em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">×</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 158518759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140293
    },
    {
        "content": "<p>So in algebraic geometry there is this vast generalisation of class groups, where you consider isomorphism classes of rank 1 projective modules</p>",
        "id": 158518843,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140343
    },
    {
        "content": "<p>So in some sense there is a very big generalisation. It uses \"fractional ideal\" = \"locally free of rank 1\".</p>",
        "id": 158518849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550140349
    },
    {
        "content": "<p>but I've never thought about how it translates into fractional ideals</p>",
        "id": 158518857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140356
    },
    {
        "content": "<p>It's certainly not defeq (-;</p>",
        "id": 158518889,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550140376
    },
    {
        "content": "<p>So for R=Z the class group is trivial because all fractional ideals are principal</p>",
        "id": 158518890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140380
    },
    {
        "content": "<p>but for R=Z[sqrt(-5)] the class group turns out to have size 2</p>",
        "id": 158518908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140393
    },
    {
        "content": "<p>Now comes a high-powered theorem... drum roll...</p>",
        "id": 158518931,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550140428
    },
    {
        "content": "<p>lemme say one moer thing first</p>",
        "id": 158518991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140448
    },
    {
        "content": "<p>and because of the group structure you can conclude the highly non-obvious fact that if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span></span></span></span> is any random ideal of Z[sqrt(-5)] then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>I</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">I^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span></span></span> is a principal ideal</p>",
        "id": 158519007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140458
    },
    {
        "content": "<p>I don't think that this is at all obvious</p>",
        "id": 158519018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140469
    },
    {
        "content": "<p>Anyway, class groups are cool, they're random abelian groups attached to Dedekind domains</p>",
        "id": 158519035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140490
    },
    {
        "content": "<p>I get the sense that calculating class groups for Z[sqrt(-n)] is one of those things mathematicians like to do</p>",
        "id": 158519056,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550140512
    },
    {
        "content": "<p>and the class group of the ring of integers of a number field is always finite :-)</p>",
        "id": 158519057,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140513
    },
    {
        "content": "<p>Yes, mathematicians get very excited about class groups of Z[sqrt(-n)]</p>",
        "id": 158519072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140529
    },
    {
        "content": "<p>any chance of a decision procedure?</p>",
        "id": 158519084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550140545
    },
    {
        "content": "<p>Yes, there are algorithms for this.</p>",
        "id": 158519097,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1550140560
    },
    {
        "content": "<p>If n is something like 27 then strictly speaking this is not a Dedekind domain because it's not the full ring of integers, but using this alg geom generalization you have some variant of the class group anyway</p>",
        "id": 158519146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140570
    },
    {
        "content": "<p>There have been really deep theorems proved about these class groups, for example the class group of the ring of integers of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">Q</mi></mrow><mo>(</mo><mo>(</mo><mo>−</mo><mn>1</mn><mn>6</mn><mn>3</mn><msup><mo>)</mo><mrow><mn>1</mn><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow></msup><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Q}((-163)^{1/2})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8879999999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.138em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">Q</span></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">6</span><span class=\"mord mathrm\">3</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8879999999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathrm mtight\">1</span><span class=\"mord mathrm mtight\">/</span><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> is trivial</p>",
        "id": 158519173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140614
    },
    {
        "content": "<p>but that's the last one</p>",
        "id": 158519180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140621
    },
    {
        "content": "<p>For <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>&lt;</mo><mo>−</mo><mn>1</mn><mn>6</mn><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">n&lt;-163</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.64444em;\"></span><span class=\"strut bottom\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord mathit\">n</span><span class=\"mrel\">&lt;</span><span class=\"mord\">−</span><span class=\"mord mathrm\">1</span><span class=\"mord mathrm\">6</span><span class=\"mord mathrm\">3</span></span></span></span> squarefree, the class group is never trivial</p>",
        "id": 158519200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140638
    },
    {
        "content": "<p>I recall hearing about how Z[sqrt(-163)] is the last UFD</p>",
        "id": 158519201,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550140642
    },
    {
        "content": "<p>Right</p>",
        "id": 158519208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140647
    },
    {
        "content": "<p>An even stronger statement is true -- the size of the class group tends to infinity as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">n</span></span></span></span> tends to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.58333em;\"></span><span class=\"strut bottom\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord\">−</span><span class=\"mord mathrm\">∞</span></span></span></span></p>",
        "id": 158519214,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140667
    },
    {
        "content": "<p>so the failure of unique factorization gets worse and worse</p>",
        "id": 158519238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140679
    },
    {
        "content": "<p>This is pretty much the culmination (the statement, not the proof) of the algebraic number theory course at Imperial.</p>",
        "id": 158519294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140699
    },
    {
        "content": "<p>Chris and others proved most of the main theorems of the basic number theory course last summer.</p>",
        "id": 158519318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140720
    },
    {
        "content": "<p>so, worth it for mathlib?</p>",
        "id": 158519323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550140727
    },
    {
        "content": "<p>But we have not begun to scratch the surface of the algebraic number theory course.</p>",
        "id": 158519328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140740
    },
    {
        "content": "<p>it's sometimes hard to tell how much is playing with examples and how much is big theorems</p>",
        "id": 158519339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550140756
    },
    {
        "content": "<p>Who knows what's worth it for mathlib. But one definition I've been using is \"if it's in a standard undergraduate curriculum, there is a case for it being in mathlib\"</p>",
        "id": 158519353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140777
    },
    {
        "content": "<p>In a perfect world, I would like to have all the big theorems and have decision procedures for all the examples</p>",
        "id": 158519405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550140803
    },
    {
        "content": "<p>That's why I made the issue about Cauchy's theorem, to remind me, whenever I think \"yay we have all of this 3rd year course, and most of that 3rd year course, and we're now ready to start on that 3rd year course\"</p>",
        "id": 158519434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140818
    },
    {
        "content": "<p>I should then remember that there is a big 2nd year course that we are not even ready to <em>start</em> formalising</p>",
        "id": 158519451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140840
    },
    {
        "content": "<p>I'm 100% with you on Cauchy's theorem, that's been a blocker for me forever</p>",
        "id": 158519452,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550140843
    },
    {
        "content": "<p>i.e. we can't even formalise the statement of the main theorem of that course</p>",
        "id": 158519457,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140856
    },
    {
        "content": "<p>I never managed it in metamath, got stuck debating how general to make it</p>",
        "id": 158519479,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1550140881
    },
    {
        "content": "<p>We have enough comm alg in Lean now to formalise all the statements of the theorems in the algebraic number theory course, and in the correct generality too.</p>",
        "id": 158519481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140884
    },
    {
        "content": "<p>In the course at Imperial we only prove that all non-zero ideals are uniquely the product of prime ideals for integers of number fields</p>",
        "id": 158519567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140941
    },
    {
        "content": "<p>However the proofs all extend easily to Dedekind domains</p>",
        "id": 158519574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140951
    },
    {
        "content": "<p>The class group of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><mo>[</mo><mi>X</mi><mo separator=\"true\">,</mo><mi>Y</mi><mo>]</mo><mi mathvariant=\"normal\">/</mi><mo>(</mo><msup><mi>Y</mi><mn>2</mn></msup><mo>−</mo><msup><mi>X</mi><mn>3</mn></msup><mo>−</mo><mn>1</mn><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}[X,Y]/(Y^2-X^3-1)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8141079999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathbb\">C</span></span><span class=\"mopen\">[</span><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">Y</span><span class=\"mclose\">]</span><span class=\"mord mathrm\">/</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.22222em;\">Y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">2</span></span></span></span></span></span></span></span><span class=\"mbin\">−</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">3</span></span></span></span></span></span></span></span><span class=\"mbin\">−</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">)</span></span></span></span> is uncountably infinite however :-)</p>",
        "id": 158519588,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550140972
    },
    {
        "content": "<p>so the proof that the class group of the integers of a number field is finite is of arithmetic nature, and needs number fields.</p>",
        "id": 158519608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550141003
    },
    {
        "content": "<p>All non-zero primes are maximal, but finiteness of class group is implied by the further finiteness assumption that if you quotient out by one of these maximal ideals, the field you get is a finite field.</p>",
        "id": 158519666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550141046
    },
    {
        "content": "<p>There are algorithms for computing class groups, but it would not surprise me if none of them ever terminated in Lean.</p>",
        "id": 158519682,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550141090
    },
    {
        "content": "<p>Although one has to be optimistic that we could get as far as Q(sqrt(-5))</p>",
        "id": 158519704,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550141115
    },
    {
        "content": "<p><em>rofl</em> we might need a better approximation for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>π</mi></mrow><annotation encoding=\"application/x-tex\">\\pi</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.03588em;\">π</span></span></span></span> first :-)</p>",
        "id": 158519718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550141151
    },
    {
        "content": "<p>The proofs that the algorithms are correct use embeddings into the complexes, and logarithms</p>",
        "id": 158519778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550141184
    },
    {
        "content": "<p>oh shit and some integration</p>",
        "id": 158519788,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550141194
    },
    {
        "content": "<p>hmm</p>",
        "id": 158519794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550141203
    },
    {
        "content": "<p>maybe we'd better make them meta algorithms</p>",
        "id": 158519800,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550141215
    },
    {
        "content": "<p>I know pi to 100 decimal places, I'd better start working on my decimal expansions PR</p>",
        "id": 158519819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550141242
    },
    {
        "content": "<blockquote>\n<p>okay, I am convinced that projective modules are interesting enough to have a few theorems in mathlib</p>\n</blockquote>\n<p>Epic quote.</p>",
        "id": 158539535,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550159263
    },
    {
        "content": "<p>yeah it made me snigger too. Apparently line bundles are an important feature in geometry :-)</p>",
        "id": 158542617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550161604
    },
    {
        "content": "<p>Vector bundles even!</p>",
        "id": 158542991,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550161903
    },
    {
        "content": "<p>Now if only we had manifolds to put them on :P</p>",
        "id": 158543086,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550161974
    },
    {
        "content": "<p>Should we prove Swan's theorem?</p>",
        "id": 158544539,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550163151
    },
    {
        "content": "<p>I think we might be a way off that. But sure, let's prove all the theorems.</p>",
        "id": 158544717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550163300
    },
    {
        "content": "<p>I feel that maybe in the distant future when we have some cohomology we might be able to get Serre's version. To get the manifold version it might be best to have manifolds first.</p>",
        "id": 158544824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550163365
    },
    {
        "content": "<p>I was thinking of the version for compact Hausdorff spaces</p>",
        "id": 158545165,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550163648
    },
    {
        "content": "<p>Oh I'm just looking at Wikipedia, I'm not sure I knew about that version. This will convince Mario that projective modules are useful because it shows they're equivalent to something he's never heard of, right?</p>",
        "id": 158545303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550163723
    },
    {
        "content": "<p>Is the proof straightforward?</p>",
        "id": 158545373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550163786
    },
    {
        "content": "<p>\"projective modules over commutative rings are like vector bundles on compact spaces\".</p>",
        "id": 158545424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550163840
    },
    {
        "content": "<p>... kind of? I only took a quick look but it seems like the main facts it uses are things like the existence of partitions of unity and projective iff locally free</p>",
        "id": 158545550,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550163941
    },
    {
        "content": "<p>Oh, we only have Reid-projective at the minute :-)</p>",
        "id": 158545623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550163983
    },
    {
        "content": "<p>I'm not sure we need more big projects but this would tie together the active parts of mathlib in a neat way</p>",
        "id": 158545939,
        "sender_full_name": "Reid Barton",
        "timestamp": 1550164270
    },
    {
        "content": "<p>I have a better big project: do this topology reorganization and file splitting <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 158546198,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550164497
    },
    {
        "content": "<p>I thought topology got reorganised?</p>",
        "id": 158546221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1550164522
    },
    {
        "content": "<p>only the very first step of the reorganization</p>",
        "id": 158546232,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550164541
    },
    {
        "content": "<p>Then I drafted a less trivial step, but everybody was busy, and now many things have been added so we need to start over</p>",
        "id": 158546315,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550164583
    },
    {
        "content": "<p>This kind of reorganization has to be very quick from PR to merge</p>",
        "id": 158546331,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1550164603
    }
]