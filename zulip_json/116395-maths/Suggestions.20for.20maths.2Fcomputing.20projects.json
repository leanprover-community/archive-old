[
    {
        "content": "<p>In the UK the system is that the undergraduates come into university having chosen their major and can only do classes offered by the corresponding department(s). The third year undergraduates doing a joint maths/computing degree hence know quite a bit of maths and CS. I have been asked to suggest possible projects for these students. No other pure mathematicians ever get involved. If anyone has any suggestions for projects they they think might be appropriate then I would be very interested to hear them.</p>",
        "id": 134880233,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538222322
    },
    {
        "content": "<p>I think 4th years can also take them so MSc level is ok</p>",
        "id": 134880247,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538222368
    },
    {
        "content": "<p>I will suggest a homological algebra project and a project to make <code>math.rat</code>, a class for rational numbers which behaves like a number theorist thinks -- eg you can talk about a math.rat being prime or induct on it if it's known to be a nat etc</p>",
        "id": 134880308,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538222507
    },
    {
        "content": "<p>I'll suggest a number field / Galois theory project maybe</p>",
        "id": 134880349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538222535
    },
    {
        "content": "<p>I'm not sure why you need another type, like I mentioned before</p>",
        "id": 134880351,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538222554
    },
    {
        "content": "<p>But if there's anything mathsy that anyone wants done then let me know quick</p>",
        "id": 134880360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538222584
    },
    {
        "content": "<p>just define the typeclasses <code>is_nat_prime</code>, <code>is_nat</code>, <code>is_rat</code> on any nice type</p>",
        "id": 134880363,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538222620
    },
    {
        "content": "<p>Mario are you ok with a typeclass <code>is_nat q</code> on rat in mathlib?</p>",
        "id": 134880399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538222643
    },
    {
        "content": "<p>I think it should be generic in the type</p>",
        "id": 134880406,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538222661
    },
    {
        "content": "<p>I thought you had reservations about the <code>Prime</code> typeclass</p>",
        "id": 134880409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538222683
    },
    {
        "content": "<p>On nat</p>",
        "id": 134880410,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538222691
    },
    {
        "content": "<p>it says <code>\\ex n, nat.cast n = x</code>, in whatever generality that statement makes sense</p>",
        "id": 134880413,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538222701
    },
    {
        "content": "<p>Is it ok if it's data?</p>",
        "id": 134880419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538222727
    },
    {
        "content": "<p>sure</p>",
        "id": 134880421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538222737
    },
    {
        "content": "<p>the name <code>is_nat</code> is a bit misleading in that case, but I don't have a better suggestion</p>",
        "id": 134880463,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538222766
    },
    {
        "content": "<p>at least it's a subsingleton (in char 0)</p>",
        "id": 134880464,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538222785
    },
    {
        "content": "<p>is_of_nat?</p>",
        "id": 134880466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538222793
    },
    {
        "content": "<p>math.nat?</p>",
        "id": 134880475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538222827
    },
    {
        "content": "<p>I don't think I want to ever use <code>math</code> as a namespace</p>",
        "id": 134880523,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538222903
    },
    {
        "content": "<p>if you do that it's like \"wait, what were we doing before?\"</p>",
        "id": 134880526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538222920
    },
    {
        "content": "<p><code>the_real_nat</code></p>",
        "id": 134880527,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538222940
    },
    {
        "content": "<p>what about <code>natural</code>, <code>integral</code> etc?</p>",
        "id": 134880534,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538222979
    },
    {
        "content": "<p>like \"x is a natural element of A\"</p>",
        "id": 134880547,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538223003
    },
    {
        "content": "<p>How big a project are we talking about? Have you checked <a href=\"https://github.com/leanprover-community/mathlib/wiki/Potential-projects\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/wiki/Potential-projects\">https://github.com/leanprover-community/mathlib/wiki/Potential-projects</a> for ideas?</p>",
        "id": 134882048,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538226107
    },
    {
        "content": "<p>One item I'd like to see that hasn't made it onto that list is covering space theory</p>",
        "id": 134882089,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538226133
    },
    {
        "content": "<p>I actually went to some effort to do covering space theory in metamath a while back. The big theorem was existence and uniqueness of lifts; it was hard to find an appropriately general statement so it might be of use</p>",
        "id": 134882161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538226298
    },
    {
        "content": "<p>But we need simply connected and path connected spaces first</p>",
        "id": 134882219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538226379
    },
    {
        "content": "<p>also connectedness</p>",
        "id": 134882222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538226414
    },
    {
        "content": "<p>On an unrelated note,</p>\n<blockquote>\n<p>just define the typeclasses <code>is_nat_prime</code>, <code>is_nat</code>, <code>is_rat</code> on any nice type</p>\n</blockquote>\n<p>some lemmas like <code>@[simp] lemma pos_of_is_nat_prime (p : rat) [is_nat_prime p] : p &gt; 0</code> would make this padic norm stuff go a lot more smoothly</p>",
        "id": 134882469,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538226904
    },
    {
        "content": "<p>though maybe this doesn't really require the class--I'm still unclear on how exactly simp tries to satisfy side conditions</p>",
        "id": 134882927,
        "sender_full_name": "Reid Barton",
        "timestamp": 1538227758
    },
    {
        "content": "<p>Even just an <code>is_prime</code> class on <code>nat</code> would clean up the padic file a lot. Mario and I discussed this briefly in the first padics PR. I was planning to experiment with it soon.</p>",
        "id": 134882928,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538227761
    },
    {
        "content": "<p>I am considering just marking <code>prime</code> itself as a class, without changing the theorems</p>",
        "id": 134882983,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538227816
    },
    {
        "content": "<p>One of my students wrote 1000 lines of Lean code on connectedness</p>",
        "id": 134883042,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538227926
    },
    {
        "content": "<p>and never really bothered to mention this to anyone</p>",
        "id": 134883045,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538227938
    },
    {
        "content": "<p><a href=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/Topology/Material/connected_spaces.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/Topology/Material/connected_spaces.lean\">https://github.com/ImperialCollegeLondon/xena-UROP-2018/blob/master/src/Topology/Material/connected_spaces.lean</a></p>",
        "id": 134883051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538227975
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> That would certainly work. I wonder if we'd eventually end up duplicating the statements of the theorems with versions that take instance arguments though.</p>",
        "id": 134883114,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538228085
    },
    {
        "content": "<blockquote>\n<p>How big a project are we talking about? Have you checked <a href=\"https://github.com/leanprover-community/mathlib/wiki/Potential-projects\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/wiki/Potential-projects\">https://github.com/leanprover-community/mathlib/wiki/Potential-projects</a> for ideas?</p>\n</blockquote>\n<p>Maybe a term, maybe a year, and no I didn't check that -- thanks!</p>",
        "id": 134883181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1538228166
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> We've had a few CS undergrads come to us looking for BS thesis projects and put together a short list for them. If you have students looking for projects more aligned toward programming/tactics than formalizing, we can share.</p>",
        "id": 134883196,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1538228195
    },
    {
        "content": "<p>By the way, that connectedness file finishes with a big TFAE proof</p>",
        "id": 134883282,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1538228363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> How about quadratic forms over Q? Maybe that is too big. But Hasse-Minkowski would be really cool. And we have QR now...</p>",
        "id": 134884436,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538230884
    },
    {
        "content": "<p>And p-adics, and Hensels lemma... so I think a lot of prerequisites are in place.</p>",
        "id": 134884476,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1538230946
    },
    {
        "content": "<p>What about doing more elementary stuff?</p>",
        "id": 134885324,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1538232868
    },
    {
        "content": "<p>I am very interested in having functionality similar to: <a href=\"http://ssr.msr-inria.inria.fr/doc/mathcomp-1.5/MathComp.mxalgebra.html\" target=\"_blank\" title=\"http://ssr.msr-inria.inria.fr/doc/mathcomp-1.5/MathComp.mxalgebra.html\">http://ssr.msr-inria.inria.fr/doc/mathcomp-1.5/MathComp.mxalgebra.html</a></p>",
        "id": 134926064,
        "sender_full_name": "Tobias Grosser",
        "timestamp": 1538320309
    }
]