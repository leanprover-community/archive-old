[
    {
        "content": "<p>Does <code>option</code> have a <code>has_mul</code> instance?</p>\n<p>I've been trying to prove the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">to_nnreal_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"bp\">.</span><span class=\"n\">to_nnreal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ennreal</span><span class=\"bp\">.</span><span class=\"n\">to_nnreal</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">ennreal</span><span class=\"bp\">.</span><span class=\"n\">to_nnreal</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>But after <code>cases</code> on both <code>a</code> and <code>b</code> I want to simplify the <code>none * some</code> term and the others, but I am stuck. Any suggetions?</p>",
        "id": 170579000,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562792108
    },
    {
        "content": "<p><code>none</code> is defeq to <code>\\top</code>, and there should be lemmas about that. Probably <code>rfl</code> will prove it. There might be a special version of <code>cases</code> for <code>ennreal</code></p>",
        "id": 170579915,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562792962
    },
    {
        "content": "<p>I'm stuck on <code>ennreal.to_nnreal (some a * some b) = a * b</code>.</p>",
        "id": 170580713,
        "sender_full_name": "Koundinya Vajjha",
        "timestamp": 1562793699
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">to_nnreal_mul</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">ennreal</span><span class=\"bp\">.</span><span class=\"n\">to_nnreal</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">ennreal</span><span class=\"bp\">.</span><span class=\"n\">to_nnreal</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">ennreal</span><span class=\"bp\">.</span><span class=\"n\">to_nnreal</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"bp\">;</span> <span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">none_eq_top</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">none_eq_top</span><span class=\"o\">,</span> <span class=\"n\">some_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">top_mul</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">by_cases</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"bp\">;</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">none_eq_top</span><span class=\"o\">,</span> <span class=\"n\">some_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">mul_top</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">some_eq_coe</span><span class=\"o\">,</span> <span class=\"n\">coe_mul</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">coe_mul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>We should probably add a <code>simp</code> attribute to <code>none_eq_top</code> and <code>some_eq_coe</code>, by the way.</p>",
        "id": 170581925,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1562794989
    }
]