[
    {
        "content": "<p>We have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.basic</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_action.orbit_rel</span> <span class=\"n\">H.opposite</span> <span class=\"n\">G</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">quotient_group.left_rel</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">r</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">_</span> <span class=\"bp\">∈</span> <span class=\"n\">set.range</span> <span class=\"n\">_</span> <span class=\"bp\">↔</span> <span class=\"n\">_</span> <span class=\"bp\">∈</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"o\">⟨</span><span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">convert</span> <span class=\"n\">H.inv_mem</span> <span class=\"n\">h.prop</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span>  <span class=\"o\">(</span><span class=\"n\">_</span> <span class=\"bp\">*</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">_</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"k\">let</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">H.opposite</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"n\">mul_opposite.op</span> <span class=\"o\">(</span><span class=\"n\">i</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">*</span> <span class=\"n\">j</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"n\">H.inv_mem</span> <span class=\"n\">h</span><span class=\"o\">⟩,</span>\n    <span class=\"n\">use</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">change</span> <span class=\"n\">j</span> <span class=\"bp\">*</span> <span class=\"n\">_</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">=</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287295410,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656053239
    },
    {
        "content": "<p>But these are not defeq.  So the quotients by the associated setoids are not the same type.</p>",
        "id": 287295680,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656053447
    },
    {
        "content": "<p>I encountered this when trying to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/t2_space_of_properly_discontinuous_smul_of_t2_space\">docs#t2_space_of_properly_discontinuous_smul_of_t2_space</a> (which uses the first quotient) on a quotient group (which is created from the second quotient).</p>",
        "id": 287295733,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656053521
    },
    {
        "content": "<p>Not sure how to fix this ...</p>",
        "id": 287295942,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656053705
    },
    {
        "content": "<p>I think I remember <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>  suggesting in the past that we redefine left_rel in terms of orbit_rel</p>",
        "id": 287302283,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656058385
    },
    {
        "content": "<p>(I already redefined submodule quotients to match additive quotients, so I think such a change would be reasonable)</p>",
        "id": 287306493,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656061250
    },
    {
        "content": "<p>I see two ways to fix this.</p>\n<ol>\n<li>Redefine group/submodule quotients to use <code>mul_action.orbit_rel</code>.</li>\n<li>Reformulate your statement in terms of <code>(proj : X → Y) (h : quotient_map proj) (h' : proj x = proj y &lt;-&gt; ...)</code>.<br>\nI prefer the first approach but I have no time to do this refactor myself.</li>\n</ol>",
        "id": 287531295,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656302943
    },
    {
        "content": "<p>BTW, should we redefine <code>orbit_rel</code> so that it is always an equivalence relation? E.g., <code>x ~ y</code> if there exist <code>a</code> and <code>b</code> such that <code>ax = by</code>.</p>",
        "id": 287532783,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656305217
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/two.20different.20quotients.20by.20subgroup/near/287532783\">said</a>:</p>\n<blockquote>\n<p>BTW, should we redefine <code>orbit_rel</code> so that it is always an equivalence relation? E.g., <code>x ~ y</code> if there exist <code>a</code> and <code>b</code> such that <code>ax = by</code>.</p>\n</blockquote>\n<p>If I remember correctly, <span class=\"user-mention\" data-user-id=\"266253\">@Joseph Myers</span> did something like this in the special case of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ray_vector.setoid\">docs#ray_vector.setoid</a></p>",
        "id": 287590417,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656342130
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"214703\">Yury G. Kudryashov</span> <a href=\"#narrow/stream/116395-maths/topic/two.20different.20quotients.20by.20subgroup/near/287531295\">said</a>:</p>\n<blockquote>\n<p>I prefer the first approach but I have no time to do this refactor myself.</p>\n</blockquote>\n<p>OK, I'm trying this out in <a href=\"https://github.com/leanprover-community/mathlib/tree/var-quotient\">branch#var-quotient</a>, but I still don't have a sense of how big a refactor it would be.</p>",
        "id": 287657004,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656376352
    },
    {
        "content": "<p>The first real consequence of the refactor I've encountered is that it breaks the following, which used to be definitional equalities:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.coset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">quotient_group.left_rel</span> <span class=\"n\">G</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">quotient_add_group.left_rel</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">H.to_add_subgroup</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H.to_add_subgroup</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>Still trying to figure out exactly why, and whether this defeq is something worth caring about.</p>",
        "id": 287702904,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656416078
    },
    {
        "content": "<p>Perhaps the more natural way to phrase this is that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">additive</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H.to_add_subgroup</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>breaks.  So I claim we have to choose between that and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">quotient</span> <span class=\"o\">(</span><span class=\"n\">mul_action.orbit_rel</span> <span class=\"n\">H.opposite</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"bp\">⧸</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n</code></pre></div>\n<p>(the goal of the refactor).</p>",
        "id": 287703904,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656416725
    },
    {
        "content": "<p>I have been doing category theory in Lean for a while and have kind of become immune to this phenomenon -- I expect things to be isomorphic, not equal (equality is kind of banned in category theory). If M=N then <code>G/M</code> and <code>G/N</code> are not equal in Lean, or perhaps not equal without some pain attached; instead we write down an isomorphism between them: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/quotient_group.equiv_quotient_of_eq\">docs#quotient_group.equiv_quotient_of_eq</a> (and the proof is nothing like <code>refl</code>). This has the same feeling.</p>",
        "id": 287704730,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1656417251
    },
    {
        "content": "<p>Indeed, but by the same logic maybe the whole refactor is not worth while, and instead we should go with <a href=\"#narrow/stream/116395-maths/topic/two.20different.20quotients.20by.20subgroup/near/287531295\">Yury's second suggestion</a>?</p>",
        "id": 287704853,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656417350
    },
    {
        "content": "<p>On the other hand, <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> considered this the less preferable option of the two.</p>",
        "id": 287704937,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656417386
    },
    {
        "content": "<p>I wonder if we can fix it by redefining the group quotient using right rather than left cosets, which avoids the need for <code>opposite</code> ...</p>",
        "id": 287706257,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656418202
    },
    {
        "content": "<p>Another approach: you use your proof to define isomorphisms (<code>equiv</code>, <code>homeomorph</code>, <code>measurable_equiv</code>) between two quotient spaces, then use these isomorphisms to transfer some properties.</p>",
        "id": 287709557,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656420025
    },
    {
        "content": "<p>I'm not sure which approach is better in the long term.</p>",
        "id": 287709588,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1656420043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/two.20different.20quotients.20by.20subgroup/near/287702904\">said</a>:</p>\n<blockquote>\n<p>Still trying to figure out exactly why,</p>\n</blockquote>\n<p>Here's some progress:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.coset</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">subgroup</span> <span class=\"n\">G</span><span class=\"o\">)</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span>\n  <span class=\"bp\">@</span><span class=\"n\">quotient_group.left_rel</span> <span class=\"n\">G</span> <span class=\"n\">_</span> <span class=\"n\">H</span> <span class=\"bp\">=</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">quotient_add_group.left_rel</span> <span class=\"o\">(</span><span class=\"n\">additive</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"n\">H.to_add_subgroup</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">additive.of_mul</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"o\">[</span><span class=\"n\">quotient_group.left_rel</span><span class=\"o\">,</span> <span class=\"n\">quotient_add_group.left_rel</span><span class=\"o\">,</span> <span class=\"n\">mul_action.orbit_rel</span><span class=\"o\">,</span>\n    <span class=\"n\">add_action.orbit_rel</span><span class=\"o\">,</span> <span class=\"n\">setoid.rel</span><span class=\"o\">,</span> <span class=\"n\">mul_action.orbit</span><span class=\"o\">,</span> <span class=\"n\">add_action.orbit</span><span class=\"o\">,</span> <span class=\"n\">subgroup.opposite</span><span class=\"o\">,</span>\n      <span class=\"n\">add_subgroup.opposite</span><span class=\"o\">,</span> <span class=\"n\">set.range</span><span class=\"o\">,</span> <span class=\"n\">set_like.has_coe_to_sort</span><span class=\"o\">,</span> <span class=\"n\">subgroup.set_like</span><span class=\"o\">,</span>\n         <span class=\"n\">add_subgroup.set_like</span><span class=\"o\">,</span> <span class=\"n\">submonoid.to_add_submonoid</span><span class=\"o\">,</span> <span class=\"n\">function.on_fun</span><span class=\"o\">,</span> <span class=\"n\">coe_sort</span><span class=\"o\">,</span>\n          <span class=\"n\">set_like.has_mem</span><span class=\"o\">,</span> <span class=\"n\">set.preimage</span><span class=\"o\">,</span> <span class=\"n\">additive.add_action</span><span class=\"o\">,</span> <span class=\"n\">add_action.to_has_vadd</span><span class=\"o\">,</span>\n          <span class=\"n\">op_smul_eq_mul</span><span class=\"o\">,</span> <span class=\"n\">subgroup.mul_action</span><span class=\"o\">,</span> <span class=\"n\">submonoid.mul_action</span><span class=\"o\">],</span>\n  <span class=\"gr\">sorry</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 287711731,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656421115
    },
    {
        "content": "<p><code>attribute [semireducible] mul_opposite</code> fixes your original issue</p>",
        "id": 287711988,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656421229
    },
    {
        "content": "<p>For some reason <a href=\"https://leanprover-community.github.io/mathlib_docs/find/mul_opposite\">docs#mul_opposite</a> is irreducible but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_opposite\">docs#add_opposite</a> is semireducible</p>",
        "id": 287712022,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656421251
    },
    {
        "content": "<p>Thanks for the detective work <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> !!</p>",
        "id": 287716363,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656423266
    },
    {
        "content": "<p>I'm not sure whether or not <code>mul_opposite</code> _should_ be irreducible, but at any rate people who care about the defeq you mention are likely to want to make <code>mul_opposite</code> semireducible locally anyway</p>",
        "id": 287717337,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656423726
    },
    {
        "content": "<p>This does raise that even with structure eta in Lean 4, making <code>multiplicative</code> a structure loses some useful defeqs</p>",
        "id": 287717724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1656423909
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/15045\">#15045</a></p>",
        "id": 287801749,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1656471170
    }
]