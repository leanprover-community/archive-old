[
    {
        "content": "<p>I am trying to develop a nice theory of suprema on the reals so I can teach it cleanly to undergraduates in Lean. Along the way I realised that I didn't know if we had a convenient \"black box\" API for <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty,\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span>. I guess I'd like an addition, subtraction, multiplication and division on it, and a total order with a bottom and a top. Is that a thing in Lean? I want it to be the target of a <code>def supremum : set ℝ →</code> map.</p>",
        "id": 180914397,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573914795
    },
    {
        "content": "<p>I don't want to re-invent the wheel.</p>",
        "id": 180914456,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573914916
    },
    {
        "content": "<p>The operations aren't very nice</p>",
        "id": 180914524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573915025
    },
    {
        "content": "<p>what is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty + \\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>? What about <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>0</mn><mo>⋅</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">0 \\cdot \\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>?</p>",
        "id": 180914568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573915095
    },
    {
        "content": "<p>I don't care, I will never ask such silly questions so as far as I'm concerned it could be 37</p>",
        "id": 180914574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573915131
    },
    {
        "content": "<p>When I write my theorems I'll put in hypotheses which are guaranteed to make + make sense.</p>",
        "id": 180914585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573915163
    },
    {
        "content": "<p>the hypotheses are pretty hairy</p>",
        "id": 180914587,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573915181
    },
    {
        "content": "<p>You are quite happily incorrectly assigning <code>0</code> to <code>1/0</code> and we don't care because we'd never do that. Isn't it the same here?</p>",
        "id": 180914617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573915203
    },
    {
        "content": "<p>Do you want me to write you a formal API for what I want?</p>",
        "id": 180914637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573915231
    },
    {
        "content": "<p>Assuming <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo>+</mo><mi mathvariant=\"normal\">∞</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">-\\infty+\\infty=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, the addition is associative except in the case <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo>+</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mi>a</mi><mi mathvariant=\"normal\">≠</mi><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo>+</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"normal\">∞</mi><mo>+</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(-\\infty + \\infty) + a \\ne -\\infty + (\\infty + a)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">∞</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">a</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 180914645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573915259
    },
    {
        "content": "<p>I can just develop a theory of sup and give you some sort of a formal API.</p>",
        "id": 180914657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573915310
    },
    {
        "content": "<p>I think it might be good to have a <code>with_bounds</code> constructor like <code>with_top</code> and <code>with_bot</code></p>",
        "id": 180914712,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573915400
    },
    {
        "content": "<p>(from mathlib:) </p>\n<div class=\"codehilite\"><pre><span></span>noncomputable def Sup (S : set ℝ) : ℝ :=\nif h : (∃ x, x ∈ S) ∧ (∃ x, ∀ y ∈ S, y ≤ x)\nthen classical.some (exists_sup S h.1 h.2) else 0\n</pre></div>\n\n\n<p>That is not a pretty function.</p>",
        "id": 180914718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573915425
    },
    {
        "content": "<p>A better target is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty,+\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span>.</p>",
        "id": 180914760,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573915449
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> what do you think?</p>",
        "id": 180914764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573915474
    },
    {
        "content": "<p>I'm not really disagreeing, but I'm surprised to hear this coming from a mathematician</p>",
        "id": 180914830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573915602
    },
    {
        "content": "<p>metamath has extended reals defined just as you say, with a bunch of messy totalized algebraic operations</p>",
        "id": 180914838,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573915635
    },
    {
        "content": "<p>but it works better in ZFC I think because you can just take subsets for things like <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span> instead of building a whole new type from scratch</p>",
        "id": 180914879,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573915683
    },
    {
        "content": "<p>Oh so now can you just magically import it to Lean 3?</p>",
        "id": 180914882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573915685
    },
    {
        "content": "<p>The <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span> relation is actually defined over <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty, \\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span> and merely specializes to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span></p>",
        "id": 180914898,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573915744
    },
    {
        "content": "<p>I don't care about your silly infrastructure issues, I would be completely happy with an axiomatised version of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty,+\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span> and then just a way of knowing that the metamath API which I would use, could be ported to Lean by you.</p>",
        "id": 180914900,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573915757
    },
    {
        "content": "<p>It would save us all a lot of bother. I would quite happily just develop with a metamath API.</p>",
        "id": 180914908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573915795
    },
    {
        "content": "<p>I don't think you would actually save much in this case</p>",
        "id": 180914950,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573915815
    },
    {
        "content": "<p>the theorems are all pretty trivial, it's like \"integer world\"</p>",
        "id": 180914957,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573915833
    },
    {
        "content": "<p>So for example how do I prove <code>sup (X + Y) = sup X + sup Y</code>?</p>",
        "id": 180914963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573915860
    },
    {
        "content": "<p>That's false</p>",
        "id": 180914971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573915882
    },
    {
        "content": "<p>It depends on what X and Y are</p>",
        "id": 180914973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573915895
    },
    {
        "content": "<p>ok assuming some edge conditions</p>",
        "id": 180914975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573915898
    },
    {
        "content": "<p>it's true with probability 1</p>",
        "id": 180914977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573915906
    },
    {
        "content": "<p>like that everything is a defined real number?</p>",
        "id": 180914978,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573915908
    },
    {
        "content": "<p><code>sup (X + Y) = sup X + sup Y</code> is a well-known example sheet question so it must be true.</p>",
        "id": 180915020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573915937
    },
    {
        "content": "<p>the details of sorting out the edge cases are left to the reader.</p>",
        "id": 180915035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573915970
    },
    {
        "content": "<p>extended reals are basically an exercise in \"trivial generalization\". You have a bunch of theorems about reals, you replace everything with extended reals, and then stuff holds under some assumption, and you work out the assumption</p>",
        "id": 180915047,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916011
    },
    {
        "content": "<p>and if the assumption is \"everything is real\" then you scrap the theorem</p>",
        "id": 180915053,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916037
    },
    {
        "content": "<p>So what is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty,+\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span> called in Lean?</p>",
        "id": 180915055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573916041
    },
    {
        "content": "<p><code>ereal</code> seems reasonable</p>",
        "id": 180915094,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916055
    },
    {
        "content": "<p>But it doesn't exist yet in mathlib?</p>",
        "id": 180915098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573916068
    },
    {
        "content": "<p>nope</p>",
        "id": 180915100,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916071
    },
    {
        "content": "<p>and does it exist in metamath?</p>",
        "id": 180915102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573916079
    },
    {
        "content": "<p><code>with_bot (with_top real)</code> does</p>",
        "id": 180915103,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916081
    },
    {
        "content": "<p>So is that the mathlib-correct definition of <code>ereal</code> in Lean?</p>",
        "id": 180915113,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573916106
    },
    {
        "content": "<p>yes, metamath has used this representation for a long time</p>",
        "id": 180915114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916114
    },
    {
        "content": "<p>Depends on whether you care about computability. There is a way to define it using cauchy sequences that converge to infinity</p>",
        "id": 180915116,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916161
    },
    {
        "content": "<p>Can you just give me a way of generating a Lean 3.5.0c definition of <code>ereal</code> with all its metamath API?</p>",
        "id": 180915160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573916203
    },
    {
        "content": "<p>If you don't care about computability, then <code>with_bounds real</code> would do the trick</p>",
        "id": 180915161,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916206
    },
    {
        "content": "<p>using some <code>mm0</code> magic?</p>",
        "id": 180915166,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573916222
    },
    {
        "content": "<p>you are wishing for a kind of magic that doesn't exist yet</p>",
        "id": 180915170,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916241
    },
    {
        "content": "<p>API translation is really hard because idioms are different</p>",
        "id": 180915171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916264
    },
    {
        "content": "<p>I can give you theorems but they will be ugly and horrible</p>",
        "id": 180915217,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916292
    },
    {
        "content": "<p>Can you point me to the metamath definition of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty,+\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span>?</p>",
        "id": 180915302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573916456
    },
    {
        "content": "<p>I just don't like the look of mathlib's <code>Sup</code>.</p>",
        "id": 180915314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573916505
    },
    {
        "content": "<p>Even better, can you point me to the definition of <code>\\math{Sup} (S : set ℝ) : </code><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty,\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span>?</p>",
        "id": 180915368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573916575
    },
    {
        "content": "<p>I want \"mathematican's sup\" in some language or other.</p>",
        "id": 180915377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573916599
    },
    {
        "content": "<p>The definition of the numbers <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">+\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span></span></span></span> in metamath is a bit peculiar: <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∞</mi><mo>=</mo><mi mathvariant=\"script\">P</mi><mo>⋃</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\infty=\\mathcal{P}\\bigcup(\\mathbb{R})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo>=</mo><mi mathvariant=\"script\">P</mi><mi mathvariant=\"script\">P</mi><mo>⋃</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">-\\infty=\\mathcal{P}\\mathcal{P}\\bigcup(\\mathbb{R})</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span><span class=\"mord\"><span class=\"mord mathcal\" style=\"margin-right:0.08222em;\">P</span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mclose\">)</span></span></span></span> so that Russell's paradox ensures that these are disjoint from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span>. In lean that would be an inductive with two extra elements.</p>",
        "id": 180915427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916665
    },
    {
        "content": "<p>I'm just hoping you can give me some kind of link to the definition.</p>",
        "id": 180915430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573916685
    },
    {
        "content": "<p>Either of math <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty,+\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span> or of math sup.</p>",
        "id": 180915445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573916736
    },
    {
        "content": "<p><a href=\"http://us.metamath.org/mpeuni/df-pnf.html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/df-pnf.html\">http://us.metamath.org/mpeuni/df-pnf.html</a> is infinity, <a href=\"http://us.metamath.org/mpeuni/df-xadd.html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/df-xadd.html\">http://us.metamath.org/mpeuni/df-xadd.html</a> is the addition operation, and other algebra is near that</p>",
        "id": 180915450,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916755
    },
    {
        "content": "<p>the order is <a href=\"http://us.metamath.org/mpeuni/df-ltxr.html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/df-ltxr.html\">http://us.metamath.org/mpeuni/df-ltxr.html</a></p>",
        "id": 180915497,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916784
    },
    {
        "content": "<p>it's all very explicit case analysis</p>",
        "id": 180915502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916803
    },
    {
        "content": "<p>proofs of stuff like associativity requires lots of case disjunctions</p>",
        "id": 180915512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916828
    },
    {
        "content": "<p>I was just hoping for precisely one link which either corresponded to <code>ereal</code> or <code>sup</code>.</p>",
        "id": 180915520,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573916859
    },
    {
        "content": "<p>I'm trying to make contact.</p>",
        "id": 180915558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573916883
    },
    {
        "content": "<p><code>sup</code> is defined generically, and <code>[A, B]</code> is also defined somewhat generically</p>",
        "id": 180915565,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916909
    },
    {
        "content": "<p>you just say <code>sup(A, &lt;, R*)</code> for the extended real sup</p>",
        "id": 180915581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916952
    },
    {
        "content": "<p>So are you saying that you cannot offer me some kind of explicit computer program which I can run and in which I'll be able to construct something which you would call a <code>term</code> and which I would call <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty,+\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span>?</p>",
        "id": 180915589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573916975
    },
    {
        "content": "<p>oh right, ereal is a set <a href=\"http://us.metamath.org/mpeuni/df-xr.html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/df-xr.html\">http://us.metamath.org/mpeuni/df-xr.html</a></p>",
        "id": 180915591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573916981
    },
    {
        "content": "<p>Oh fabulous :D</p>",
        "id": 180915603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573917002
    },
    {
        "content": "<p>I forgot that the notation isn't actually <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty,\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span> but that is actual notation, the closed interval from <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">∞</span></span></span></span>, and it is equal to <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mo>∗</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^*</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.688696em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mbin mtight\">∗</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 180915648,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573917063
    },
    {
        "content": "<p>so ennreal is written <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0</mn><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[0,\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span> and that's not a fake composite notation</p>",
        "id": 180915658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573917117
    },
    {
        "content": "<p>sup is <a href=\"http://us.metamath.org/mpeuni/df-sup.html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/df-sup.html\">http://us.metamath.org/mpeuni/df-sup.html</a></p>",
        "id": 180915715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573917200
    },
    {
        "content": "<p>What is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">-\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">∞</span></span></span></span> in Lean? I'd like it to be a term of some type.</p>",
        "id": 180916052,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573917753
    },
    {
        "content": "<p>Is <code>metamath.df_sup</code> a function?</p>",
        "id": 180916148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573917848
    },
    {
        "content": "<p>It's annoying that <code>metamath.df-sup</code> doesn't seem to be OK for Lean.</p>",
        "id": 180916153,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573917867
    },
    {
        "content": "<p>Are there two URLs at <code>http://us.metamath.org</code> such that metamath's <code>df-sup</code> is a function between those two URLs?</p>",
        "id": 180916178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573917937
    },
    {
        "content": "<p>Kevin, can't you just prove a bunch of theorems about <code>with_bot (with_top real)</code>?</p>",
        "id": 180916228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573917974
    },
    {
        "content": "<p>Of course I could! But I want to understand why <code>mm0</code> can't just do it for me.</p>",
        "id": 180916237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573917993
    },
    {
        "content": "<p>df-sup means that if you write <code>sup(A, &lt;, R*)</code> and <code>A</code> is a subset of the extended reals then the result is an extended real. You can call that a function I guess</p>",
        "id": 180916323,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573918194
    },
    {
        "content": "<p><a href=\"http://us.metamath.org/mpeuni/supxrcl.html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/supxrcl.html\">http://us.metamath.org/mpeuni/supxrcl.html</a></p>",
        "id": 180916371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573918227
    },
    {
        "content": "<p>this theorem is nice since it doesn't have any assumptions unlike so many other theorems about sup</p>",
        "id": 180916379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573918266
    },
    {
        "content": "<p>I was looking through mathlib for uses of the notation <code>\\infty</code>. It seems that it is defined <a href=\"https://github.com/leanprover-community/mathlib/blob/6ebb7e7884c9b11c137f5bb288cd80a46bc6dfac/src/data/real/ennreal.lean#L19\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/6ebb7e7884c9b11c137f5bb288cd80a46bc6dfac/src/data/real/ennreal.lean#L19\">here</a> as \"localised notation\"? What does that mean?</p>",
        "id": 180916424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573918330
    },
    {
        "content": "<p>That you need to <code>open_locale</code> to access it</p>",
        "id": 180916430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573918359
    },
    {
        "content": "<p>I want to use <code>∞</code> and <code>-∞</code> and any real number to be terms of this type.</p>",
        "id": 180916448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573918413
    },
    {
        "content": "<p>okay...?</p>",
        "id": 180916454,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573918440
    },
    {
        "content": "<p>I'm happy for a coercion from the reals but I demand the notation <code>∞</code> and <code>-∞</code></p>",
        "id": 180916493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573918459
    },
    {
        "content": "<p>mathlib will probably prefer \\top and \\bot</p>",
        "id": 180916495,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573918479
    },
    {
        "content": "<p>Can I get that with <code>with_bot (with_top real)</code>?</p>",
        "id": 180916497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573918484
    },
    {
        "content": "<p>you will have to write notation for it</p>",
        "id": 180916500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573918499
    },
    {
        "content": "<p>OK I am completely happy to use \\top and \\bot.</p>",
        "id": 180916504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573918504
    },
    {
        "content": "<p>I am happy to write a mathematician's dictionary.</p>",
        "id": 180916515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573918537
    },
    {
        "content": "<p>I'm losing track of what you want</p>",
        "id": 180916518,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573918554
    },
    {
        "content": "<p>If I were to write a real number game I could just hack that.</p>",
        "id": 180916551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573918563
    },
    {
        "content": "<p>you should just hack all of this</p>",
        "id": 180916560,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573918574
    },
    {
        "content": "<p>I want the following thing to compile in Lean: (give me a sec)</p>",
        "id": 180916567,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573918603
    },
    {
        "content": "<p>then you can call anything you want whatever you want</p>",
        "id": 180916569,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573918605
    },
    {
        "content": "<p>Does Lean have <code>conditionally complete lattice : with_bot (with_top real)</code>? Does Metamath?</p>",
        "id": 180916769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573918956
    },
    {
        "content": "<p>Does metamath have Lean's <code>conditionally complete lattice</code>?</p>",
        "id": 180916789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573919027
    },
    {
        "content": "<p>It would be a complete lattice.</p>",
        "id": 180916833,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1573919054
    },
    {
        "content": "<p>Thanks Chris. I am well out of my depth in lattice theory here. Does Lean have the instance of whatever the correct kind of sup-semi-bot lattice <code>with_bot (with_top real)</code> is supposed to be? And the same question for metamath for the metamath term <code>df-xr</code>?</p>",
        "id": 180916904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573919169
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> this doesn't compile in Lean:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"n\">with_bot</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">real</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>What other imports or open stuff do I need?</p>",
        "id": 180917180,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573919642
    },
    {
        "content": "<p>You need to <code>open lattice</code></p>",
        "id": 180917223,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573919667
    },
    {
        "content": "<p>This fails:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"c\">/-</span><span class=\"cm\">- The set $$[-\\infty,+\\infty]$$ is a</span>\n<span class=\"cm\">&lt;a href=&quot;https://en.wikipedia.org/wiki/Complete_lattice&quot;&gt;complete lattice.&lt;/a&gt; -/</span>\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 180917248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573919716
    },
    {
        "content": "<p>Ooh sure it will fail. Why wouldn't it.</p>",
        "id": 180917375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573919914
    },
    {
        "content": "<p>It should be able to figure out that you've got a lattice though</p>",
        "id": 180917382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573919925
    },
    {
        "content": "<p>But completeness needs a bit of work</p>",
        "id": 180917385,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573919935
    },
    {
        "content": "<p>But is it true?</p>",
        "id": 180917475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920045
    },
    {
        "content": "<p>And does metamath have it?</p>",
        "id": 180917485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920066
    },
    {
        "content": "<p>How do I use automation to find out whether metamath has complete lattices?</p>",
        "id": 180917493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920101
    },
    {
        "content": "<p>Metamath has complete lattices, but they aren't involved in the definition of the reals at all</p>",
        "id": 180917542,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920139
    },
    {
        "content": "<p>Can you give me a <code>us.metamath.org</code> URL corresponding to the proof that <code>df-xr</code> is a complete lattice?</p>",
        "id": 180917562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920191
    },
    {
        "content": "<p>not sure there is one</p>",
        "id": 180917568,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920204
    },
    {
        "content": "<p>Would it be easier to make one in Lean or in metamath?</p>",
        "id": 180917578,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920233
    },
    {
        "content": "<p>oh, no it is: <a href=\"http://us.metamath.org/mpeuni/xrsclat.html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/xrsclat.html\">http://us.metamath.org/mpeuni/xrsclat.html</a></p>",
        "id": 180917613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920242
    },
    {
        "content": "<p>How do I verify that this is a theorem about <code>df-xr</code>?</p>",
        "id": 180917628,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920282
    },
    {
        "content": "<p>being a complete lattice is a property of a structure, not just a set. <code>RR*</code> is a set, <code>RR*s</code> is the structure</p>",
        "id": 180917644,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920342
    },
    {
        "content": "<p>the definition of the structure is <a href=\"http://us.metamath.org/mpeuni/df-xrs.html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/df-xrs.html\">http://us.metamath.org/mpeuni/df-xrs.html</a></p>",
        "id": 180917692,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920362
    },
    {
        "content": "<p>Are you using metamath notation? I keep talking about <code>df-xr</code> and you never mention it. I don't know what any of this <code>RR*</code> business means</p>",
        "id": 180917699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920395
    },
    {
        "content": "<p>you are going to notice that metamath does things pretty significantly differently than lean here</p>",
        "id": 180917700,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920398
    },
    {
        "content": "<p>RR* is df-xr</p>",
        "id": 180917702,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920407
    },
    {
        "content": "<p>RR* is the actual term</p>",
        "id": 180917705,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920414
    },
    {
        "content": "<p>df-xr is the definition that introduces it</p>",
        "id": 180917709,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920421
    },
    {
        "content": "<p>these are distinct?</p>",
        "id": 180917718,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920449
    },
    {
        "content": "<p>Is <code>RR*</code> a set?</p>",
        "id": 180917729,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920473
    },
    {
        "content": "<p>they are in different syntactic classes. One is the label of a theorem (saying RR* = ...) and the other is a math expression</p>",
        "id": 180917773,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920486
    },
    {
        "content": "<p>RR* is a set</p>",
        "id": 180917780,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920502
    },
    {
        "content": "<p>In lean this is like <code>ereal</code> itself</p>",
        "id": 180917788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920521
    },
    {
        "content": "<p>I want to call it <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty,+\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span>.</p>",
        "id": 180917789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920521
    },
    {
        "content": "<p>sure</p>",
        "id": 180917791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920525
    },
    {
        "content": "<p>that's also a set, and it's the same set</p>",
        "id": 180917796,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920539
    },
    {
        "content": "<p>so in metamath we wouldn't make a big fuss about the distinction</p>",
        "id": 180917810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920571
    },
    {
        "content": "<p><a href=\"http://us.metamath.org/mpeuni/iccmax.html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/iccmax.html\">http://us.metamath.org/mpeuni/iccmax.html</a></p>",
        "id": 180917882,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920659
    },
    {
        "content": "<p>Would you way that <a href=\"http://us.metamath.org/mpeuni/xrsclat.html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/xrsclat.html\">this link (us.metamath.org)</a> faithfully corresponded to what a mathematican means when they say \"<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty,+\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span> is a <a href=\"https://en.wikipedia.org/wiki/Complete_lattice\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Complete_lattice\">complete lattice</a>\"?</p>",
        "id": 180917895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920681
    },
    {
        "content": "<p>yes</p>",
        "id": 180917900,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920694
    },
    {
        "content": "<p>And would you also say that the Lean term </p>\n<div class=\"codehilite\"><pre><span></span>import data.real.basic\n/-- The set $$[-\\infty,+\\infty]$$ is a\n&lt;a href=&quot;https://en.wikipedia.org/wiki/Complete_lattice&quot;&gt;complete lattice.&lt;/a&gt; -/\ninstance : lattice.complete_lattice (with_bot (with_top ℝ)) := sorry\n</pre></div>\n\n\n<p>also faithfully corresponded to that metamath link?</p>",
        "id": 180917954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920768
    },
    {
        "content": "<p>I would want to double check that the ordering being talked about is the natural one, but otherwise yes</p>",
        "id": 180917968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920815
    },
    {
        "content": "<p>Then I can go into the <code>i_believe_in_metamath</code> namespace in a Lean file and just add the Lean instance as an axiom.</p>",
        "id": 180918015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920852
    },
    {
        "content": "<p>I'm not sure what you are getting at</p>",
        "id": 180918021,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920873
    },
    {
        "content": "<p>I assume you believe in math here</p>",
        "id": 180918046,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920906
    },
    {
        "content": "<p>I want automation to make that term, and until it does I'm happy to throw it in as an axiom.</p>",
        "id": 180918050,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920916
    },
    {
        "content": "<p>of course <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty,+\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span> is a complete lattice</p>",
        "id": 180918051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920924
    },
    {
        "content": "<p>I never want to see any details of that term.</p>",
        "id": 180918053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920932
    },
    {
        "content": "<p>you are going to have a hard time turning the metamath proof into a lean proof of that term</p>",
        "id": 180918065,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920954
    },
    {
        "content": "<p>Why is that?</p>",
        "id": 180918105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920964
    },
    {
        "content": "<p>they are stated in completely different ways</p>",
        "id": 180918110,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920972
    },
    {
        "content": "<p>What does mm0 do?</p>",
        "id": 180918111,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573920975
    },
    {
        "content": "<p>it gives you a deep embedding of the metamath statement in lean</p>",
        "id": 180918112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573920989
    },
    {
        "content": "<p>Does it give me the term?</p>",
        "id": 180918118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573921001
    },
    {
        "content": "<p>If not, then what substitute does it give me?</p>",
        "id": 180918132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573921023
    },
    {
        "content": "<p>you get that <code>metamath.RR*s</code> is an element of <code>metamath.CLat</code> and now you have a hundred theorems to prove about how <code>CLat</code> is related to <code>complete_lattice</code> and the structures correspond etc etc</p>",
        "id": 180918140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921073
    },
    {
        "content": "<p>If you are willing to accept that <code>metamath.CLat</code> is the definition of a complete lattice then that's fine, but the problem is that lean already has a pre-existing definition and you want to connect to that</p>",
        "id": 180918211,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921150
    },
    {
        "content": "<p>kevin only wanted a banana but he got the gorilla holding it and the entire jungle :p</p>",
        "id": 180918281,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1573921210
    },
    {
        "content": "<p>a fair bit of the continent too</p>",
        "id": 180918290,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921240
    },
    {
        "content": "<p>So at the end of the day, <code>CLat</code> is a translation of the Wikipedia definition into one computer language, and <code>complete lattice</code> is a translation of the same page into another language, but we can't link the languages very easily at all.</p>",
        "id": 180918301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573921268
    },
    {
        "content": "<p>such is life</p>",
        "id": 180918304,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921282
    },
    {
        "content": "<p>it's doable, but a nontrivial amount of work</p>",
        "id": 180918308,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921311
    },
    {
        "content": "<p>But I can just add it as an axiom in the real number game.</p>",
        "id": 180918349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573921328
    },
    {
        "content": "<p>or you could ask one of your minions</p>",
        "id": 180918360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921356
    },
    {
        "content": "<p>And leave a note on the axiom that this relies on claims both from Lean and from metamath.</p>",
        "id": 180918363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573921363
    },
    {
        "content": "<p>it's not a hard theorem, really</p>",
        "id": 180918366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921376
    },
    {
        "content": "<p>the claims being \"this is the way our system says that \"<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty,+\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span> is a complete lattice\"</p>",
        "id": 180918381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573921408
    },
    {
        "content": "<p>If it's not a hard theorem than can Lean's automation do it?</p>",
        "id": 180918386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573921433
    },
    {
        "content": "<p>it's quite close already</p>",
        "id": 180918428,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921446
    },
    {
        "content": "<p>we just lack the necessary typeclasses to infer this outright</p>",
        "id": 180918431,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921466
    },
    {
        "content": "<p>but if you want a minimum work solution, it is to just prove the theorem directly</p>",
        "id": 180918451,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921512
    },
    {
        "content": "<p>using the fact that R is conditionally complete</p>",
        "id": 180918459,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921533
    },
    {
        "content": "<p>Let's just say that I add the instance as an axiom now, and start developing a theory of suprema for ereal`. Some time later a minion constructs the term, I update mathlib, I get a nameclash error with my axiom and I just delete it. Will my code still compile?</p>",
        "id": 180918462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573921557
    },
    {
        "content": "<p>Will I have had trouble with writing code when it was just an axiom?</p>",
        "id": 180918505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573921576
    },
    {
        "content": "<p>yes, it's an instance with data</p>",
        "id": 180918510,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921588
    },
    {
        "content": "<p>you can't just sorry the whole thing</p>",
        "id": 180918513,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921599
    },
    {
        "content": "<p>at the very least you should partially fill in the instance with the inherited order</p>",
        "id": 180918526,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921628
    },
    {
        "content": "<p>Aah so you are claiming more than the existence of a term<br>\n<code>instance : lattice.complete_lattice (with_bot (with_top ℝ)) := sorry</code>? This instance has some properties?</p>",
        "id": 180918581,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573921717
    },
    {
        "content": "<p>You told me that it faithfully conformed to the mathematican statement.</p>",
        "id": 180918589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573921732
    },
    {
        "content": "<p>I qualified that statement if you recall</p>",
        "id": 180918611,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921773
    },
    {
        "content": "<blockquote>\n<p>I would want to double check that the ordering being talked about is the natural one, but otherwise yes</p>\n</blockquote>",
        "id": 180918613,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921782
    },
    {
        "content": "<p>for all I know it's the complete powerset ordering on 2^nat mapped to ereal</p>",
        "id": 180918689,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921867
    },
    {
        "content": "<p>But could it be possible to construct an instance of <code>lattice.complete_lattice (with_bot (with_top ℝ))</code> which did not extend the lattice structure on the reals after the import of <code>data.real.basic</code>?</p>",
        "id": 180918691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573921873
    },
    {
        "content": "<p>yes, this is possible</p>",
        "id": 180918696,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921888
    },
    {
        "content": "<p>So it really is not true that this term is the same as what a mathematician <em>means</em>.</p>",
        "id": 180918735,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573921923
    },
    {
        "content": "<p>you would get two incompatible instances of <code>has_le (with_bot (with_top ℝ)) </code> as a result</p>",
        "id": 180918738,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921928
    },
    {
        "content": "<p>which is bad but not checked by lean</p>",
        "id": 180918741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921938
    },
    {
        "content": "<p>So you'd get a diamond?</p>",
        "id": 180918742,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573921942
    },
    {
        "content": "<p>a non-commuting diamond</p>",
        "id": 180918746,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921958
    },
    {
        "content": "<p>Would having those two incompatible instances be acceptable in a mathlib PR?</p>",
        "id": 180918749,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573921967
    },
    {
        "content": "<p>absolutely not</p>",
        "id": 180918751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573921973
    },
    {
        "content": "<p>Is there some automation which mathlib passes and which a PR with such a diamond would not pass?</p>",
        "id": 180918765,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573922019
    },
    {
        "content": "<p>theoretical automation could check this</p>",
        "id": 180918769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573922036
    },
    {
        "content": "<p>Just come kind of completely stupid \"let's check for diamonds of some generic form\" automation? But it's not there, we're relying on humans to spot the diamond. Would mathlib compile with the diamond in there?</p>",
        "id": 180918819,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573922066
    },
    {
        "content": "<p>yes it would compile, but a few months down the line someone would get a weird instance failure in the middle of a proof</p>",
        "id": 180918828,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573922105
    },
    {
        "content": "<p>I'm trying to evaluate to what extent humans are involved in the proof of your claim that a term of this type is the same as what a mathematician means by the statement that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty,+\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span> is a complete lattice.</p>",
        "id": 180918841,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573922142
    },
    {
        "content": "<p>I will remind you that \" <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty,+\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span> is a complete lattice\" is an incomplete statement. It should be \"<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mo>≤</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">([-\\infty,+\\infty],\\le)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mclose\">)</span></span></span></span> is a complete lattice\" and you have to provide a definition of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>≤</mo></mrow><annotation encoding=\"application/x-tex\">\\le</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mrel\">≤</span></span></span></span></p>",
        "id": 180918886,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573922207
    },
    {
        "content": "<p>Oh I can do that! It's the obvious one. Is that term in mathlib?</p>",
        "id": 180918898,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573922266
    },
    {
        "content": "<p>This would be acceptable to me:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- The set $$[-\\infty,+\\infty]$$ is a</span>\n<span class=\"cm\">&lt;a href=&quot;https://en.wikipedia.org/wiki/Complete_lattice&quot;&gt;complete lattice.&lt;/a&gt; -/</span>\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">ℝ</span><span class=\"o\">))</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">top</span> <span class=\"o\">:=</span> <span class=\"err\">⊤</span><span class=\"o\">,</span>\n  <span class=\"n\">le_top</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">le_top</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">bot</span> <span class=\"o\">:=</span> <span class=\"err\">⊥</span><span class=\"o\">,</span>\n  <span class=\"n\">bot_le</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">lattice</span><span class=\"bp\">.</span><span class=\"n\">bot_le</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">Inf</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">le_Sup</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">Sup_le</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">Inf_le</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">le_Inf</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 180918945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573922317
    },
    {
        "content": "<p><code>instance : has_le (with_bot (with_top ℝ)) := by apply_instance</code> works! Yeah, I want that one.</p>",
        "id": 180918946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573922325
    },
    {
        "content": "<p>Does the instance you post have a diamond?</p>",
        "id": 180918954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573922347
    },
    {
        "content": "<p>it commutes</p>",
        "id": 180918961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573922371
    },
    {
        "content": "<p>defeq?</p>",
        "id": 180918964,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573922386
    },
    {
        "content": "<p>yes</p>",
        "id": 180918967,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573922388
    },
    {
        "content": "<p>Is there a metamath URL for each of the sorrys?</p>",
        "id": 180919008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573922407
    },
    {
        "content": "<p>not really, metamath expresses the property of being complete differently</p>",
        "id": 180919019,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573922430
    },
    {
        "content": "<p>there is a lot less data in metamath's definition</p>",
        "id": 180919024,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573922450
    },
    {
        "content": "<p>Oh curses, then my luck has run out.</p>",
        "id": 180919025,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573922450
    },
    {
        "content": "<p>But these sorries are minion-fodder right?</p>",
        "id": 180919035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573922481
    },
    {
        "content": "<p>in metamath it really is just <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mo>≤</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(X, \\le)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mclose\">)</span></span></span></span> rather than lean's <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">(</mo><mi>X</mi><mo separator=\"true\">,</mo><mo>≤</mo><mo separator=\"true\">,</mo><mo>&lt;</mo><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">⊥</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">⊤</mi><mo separator=\"true\">,</mo><mo>⊓</mo><mo separator=\"true\">,</mo><mo>⊔</mo><mo separator=\"true\">,</mo><mo>⋂</mo><mo separator=\"true\">,</mo><mo>⋃</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(X,\\le,&lt;,\\bot,\\top,\\sqcap,\\sqcup,\\bigcap,\\bigcup)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.07847em;\">X</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">⊥</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">⊤</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">⊓</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">⊔</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋂</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">⋃</span><span class=\"mclose\">)</span></span></span></span></p>",
        "id": 180919039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573922514
    },
    {
        "content": "<p>Is there a URL for any or all of the extra Lean notation?</p>",
        "id": 180919088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573922562
    },
    {
        "content": "<p>Is every URL you give me a term in metamath's type theory?</p>",
        "id": 180919090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573922575
    },
    {
        "content": "<p>or some other word which I can use which I'm not too fussed about the definition of? Something better than URL.</p>",
        "id": 180919100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573922596
    },
    {
        "content": "<p>yes, there are things like <a href=\"http://us.metamath.org/mpeuni/df-glb.html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/df-glb.html\">http://us.metamath.org/mpeuni/df-glb.html</a></p>",
        "id": 180919101,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573922599
    },
    {
        "content": "<p>every URL is a theorem in metamath</p>",
        "id": 180919106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573922611
    },
    {
        "content": "<p>or an axiom/definition</p>",
        "id": 180919107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573922621
    },
    {
        "content": "<p>lol metamath isn't a type theory</p>",
        "id": 180919153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573922659
    },
    {
        "content": "<p>In the case of complete lattices, the other operations don't matter (that's why metamath omits them); as long as the order is correct you can prove in lean that the other operations are uniquely defined</p>",
        "id": 180919237,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573922805
    },
    {
        "content": "<p>of course that's only up to equality not defeq</p>",
        "id": 180919249,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573922830
    },
    {
        "content": "<p>and metamath definitions will <em>definitely</em> not give you the right defeqs</p>",
        "id": 180919262,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573922853
    },
    {
        "content": "<p>Oh some of your Lean sorries are not props! </p>\n<div class=\"codehilite\"><pre><span></span>  <span class=\"n\">Sup</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"err\">⊥</span><span class=\"o\">,</span>\n  <span class=\"n\">Inf</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"err\">⊥</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>Is this OK with you?</p>",
        "id": 180919494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573923240
    },
    {
        "content": "<p>aargh curse those axioms</p>",
        "id": 180919606,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573923426
    },
    {
        "content": "<p>you won't be able to prove the axioms</p>",
        "id": 180919607,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573923431
    },
    {
        "content": "<p>yeah I just got stuck :D</p>",
        "id": 180919610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573923446
    },
    {
        "content": "<p>I changed sup to top and then the first one went swimmingly</p>",
        "id": 180919612,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573923458
    },
    {
        "content": "<p>gets a bit hairier later though</p>",
        "id": 180919613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573923478
    },
    {
        "content": "<p>You don't want that right/</p>",
        "id": 180919615,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573923480
    },
    {
        "content": "<p>however, assuming you define <code>ereal.Sup</code>, something like <code>if choice nat = 0 then ereal.Sup else ereal.Sup</code> also satisfies the properties</p>",
        "id": 180919658,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573923497
    },
    {
        "content": "<p>Because <code>Sup X</code> should be smaller than upper bounds of <code>X</code></p>",
        "id": 180919660,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1573923499
    },
    {
        "content": "<p>but is not defeq to <code>ereal.Sup</code></p>",
        "id": 180919666,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573923524
    },
    {
        "content": "<p>Would the terms be provably the same though?</p>",
        "id": 180919801,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573923722
    },
    {
        "content": "<p>yes</p>",
        "id": 180919836,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573923729
    },
    {
        "content": "<p>that's why they are both suprema</p>",
        "id": 180919840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573923741
    },
    {
        "content": "<p>I only work up to proof so as far as I'm concerned the two terms are equal and you can choose whichever one you like.</p>",
        "id": 180919842,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573923749
    },
    {
        "content": "<p>Since the complete lattice structure is adding the Sup and Inf fields, there are no diamonds, so you are pretty unconstrained here</p>",
        "id": 180919867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573923830
    },
    {
        "content": "<p>but for the lattice fields, they have to be defeq to the lattice fields that you get from the existing instance</p>",
        "id": 180919908,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573923865
    },
    {
        "content": "<p>What is the canonical way to write <code>(x : with_bot L)</code> if <code>(x : L)</code>? Is it <code>\\u x</code>, is it <code>some x</code>, is it something else? Here L is <code>with_top real</code> if it matters.</p>",
        "id": 180942256,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573965773
    },
    {
        "content": "<p><code>\\u x</code>, but that is very often ambiguous so it is usually just <code>(x : with_bot L)</code></p>",
        "id": 180942476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1573966203
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/c21daf1fb89acb5698413706e8ace5ca\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/c21daf1fb89acb5698413706e8ace5ca\">https://gist.github.com/kbuzzard/c21daf1fb89acb5698413706e8ace5ca</a></p>",
        "id": 180947929,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573977802
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> do you want to tidy it up? I prove <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo stretchy=\"false\">[</mo><mo>−</mo><mi mathvariant=\"normal\">∞</mi><mo separator=\"true\">,</mo><mo>+</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[-\\infty,+\\infty]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">−</span><span class=\"mord\">∞</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span><span class=\"mclose\">]</span></span></span></span> is a complete lattice.</p>",
        "id": 180947930,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573977827
    },
    {
        "content": "<p>Do I get a prize for proving <code>ereal.neg_neg</code> and <code>ereal.neg_le</code> (and <code>ereal.le_neg</code>)? Is that a <code>lattice.with_neg</code> or something? It's a lattice with an antiinvolution or something. Is that a thing?</p>",
        "id": 180948139,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1573978216
    },
    {
        "content": "<p>I golfed the <code>neg</code> stuff: <a href=\"https://github.com/ImperialCollegeLondon/real-number-game/blob/master/src/for_mathlib/ereal.lean\" target=\"_blank\" title=\"https://github.com/ImperialCollegeLondon/real-number-game/blob/master/src/for_mathlib/ereal.lean\">https://github.com/ImperialCollegeLondon/real-number-game/blob/master/src/for_mathlib/ereal.lean</a></p>",
        "id": 180963347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574008330
    },
    {
        "content": "<p>I should probably point to <a href=\"http://isabelle.in.tum.de/dist/library/HOL/HOL-Library/Extended_Real.html\" target=\"_blank\" title=\"http://isabelle.in.tum.de/dist/library/HOL/HOL-Library/Extended_Real.html\">http://isabelle.in.tum.de/dist/library/HOL/HOL-Library/Extended_Real.html</a>, that does a lot of things on extended reals.</p>",
        "id": 180963701,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574009005
    },
    {
        "content": "<p>Whilst I can't really speak Isabelle, it seems to me that they went for a three-constructor set-up, with -infty, +infty, and a real as the constructors. This would have spared me all the <code>some none</code> stuff.</p>",
        "id": 180963823,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574009175
    },
    {
        "content": "<p>Yes, Isabelle does not use preexisting constructions with <code>with_top</code> and <code>with_bot</code>, and goes straight to the point here. It spares a good deal of boilerplate, but it also means you have to redefine everything from scratch.</p>",
        "id": 180963959,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1574009409
    },
    {
        "content": "<p>I think it would have been easier to make new constructors. Whenever I did case splits I had to deal with <code>none</code> instead of <code>infty</code> or whatever -- all this could have been fixed. Case splits would have been nicer with three constuctors instead of two then two. I never knew how to prove <code>\\u \\u x &lt;= \\u \\u y iff x &lt;= y</code>, I had to use <code>simp</code> and it didn't always work, I had some sort of <code>change, unfold_coes, simp</code> thing going. If <code>&lt;=</code> were defined on <code>ereal</code> just as a recursive prop then I would just have been able to do cases</p>",
        "id": 180971485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574022786
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/1703\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1703\">#1703</a> by the way</p>",
        "id": 180971494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574022819
    },
    {
        "content": "<p>Are you sure you shouldn't start over with the better approach?</p>",
        "id": 180974470,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1574027658
    },
    {
        "content": "<p>I am not sure and I'm happy to get it right</p>",
        "id": 180976485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574031405
    },
    {
        "content": "<p>Who says it's better? I mean, I do, but I am very naive about these things</p>",
        "id": 180976490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574031439
    },
    {
        "content": "<p>I think it's basically irrelevant as long as the lemmas are there.</p>",
        "id": 180976613,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1574031630
    },
    {
        "content": "<p>I had trouble several times trying to go between some some a &lt;= some some b and a &lt;= b.</p>",
        "id": 180977532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574033491
    },
    {
        "content": "<p>Bit if it doesn't matter how messy the proofs are then this is an argument for sticking with with_top etc although I have no real idea why we don't just use option, with_top seems to add nothing helpful, oh except I guess the order got ported over. Except that even that didn't happen reliably, if something accidentally ended up with type option R then it wouldn't work</p>",
        "id": 180977592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574033634
    },
    {
        "content": "<p>Just proving <code>option.cases_on</code> but with <code>coe</code> instead of <code>some</code>could be okay.</p>",
        "id": 180977864,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1574034123
    },
    {
        "content": "<p>OK so having thought about this a bit more I decided that one interesting approach might be constructing <code>instance {α : Type*} [conditionally_complete_lattice α] :\n  conditionally_complete_lattice (with_top α)</code> and similarly for <code>with_bot</code>. I've done <code>with_top</code> (see <a href=\"https://gist.github.com/kbuzzard/73d45ef2c350b3beb81017ae52606d71\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/73d45ef2c350b3beb81017ae52606d71\">here</a>). For <code>with_bot</code> I could just duplicate code, or I could use some trickery with order_dual and try and generate it automatically.</p>\n<p>What I'm worried about with the order-dual trickery is that when I prove that with_bot (with_top (conditionally_complete_lattice)) is a complete lattice, 50% of the time I see \"sup\" it will mean \"inf\", because presumably order_dual alpha is just defined to be alpha. If I just duplicate the code then I won't have this issue. It's about 65 lines of code. What is best practice here? </p>\n<p>I should say that the idea here is to \"refine\" Sup. For a set of reals which is not bounded or not non-empty, Sup returns 37. The refined Sup on with_top real will return a slightly more sensible value, i.e. it's right for unbounded sets but still 37 for the empty set, and similar comments apply for the refined Inf. After adding a top and a bottom, one will have the theorem that Sup returns the correct value for non-empty bounded sets, so then one only has to add in the proof that it also returns a sensible value for the empty set and an unbounded set.</p>",
        "id": 181287167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574327752
    },
    {
        "content": "<p>Concrete question:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">lattice</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Sup</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_Sup</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"err\">⊤</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"k\">then</span> <span class=\"err\">⊤</span> <span class=\"k\">else</span>\n      <span class=\"k\">let</span> <span class=\"n\">So</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n      <span class=\"k\">if</span> <span class=\"n\">bdd_above</span> <span class=\"n\">So</span> <span class=\"k\">then</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">Sup</span> <span class=\"n\">So</span><span class=\"o\">)</span> <span class=\"k\">else</span> <span class=\"err\">⊤</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">S</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">S</span> <span class=\"err\">⊆</span> <span class=\"o\">{</span><span class=\"err\">⊤</span><span class=\"o\">}</span> <span class=\"k\">then</span> <span class=\"err\">⊤</span> <span class=\"k\">else</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"bp\">⁻¹</span><span class=\"err\">&#39;</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">with_top</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_cSup</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">cSup_le</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">cInf_le</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">le_cInf</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">lattice</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Sup</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span>\n<span class=\"o\">}</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Sup</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_Sup</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Inf</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">has_Sup</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Sup</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">Sup</span><span class=\"bp\">⟩</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le_cSup</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cInf_le</span><span class=\"o\">,</span>\n  <span class=\"n\">cSup_le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_cInf</span><span class=\"o\">,</span>\n  <span class=\"n\">cInf_le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_cSup</span><span class=\"o\">,</span>\n  <span class=\"n\">le_cInf</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cSup_le</span><span class=\"o\">,</span>\n  <span class=\"bp\">..@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Sup</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n<span class=\"o\">}</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">type mismatch at field &#39;le_cSup&#39;</span>\n<span class=\"cm\">  conditionally_complete_lattice.cInf_le</span>\n<span class=\"cm\">has type</span>\n<span class=\"cm\">  ∀ (s : set (with_top (order_dual α))) (a : with_top (order_dual α)),</span>\n<span class=\"cm\">    bdd_below s → a ∈ s → conditionally_complete_lattice.Inf s ≤ a</span>\n<span class=\"cm\">but is expected to have type</span>\n<span class=\"cm\">  ∀ (s : set (with_bot α)) (a : with_bot α), bdd_above s → a ∈ s → a ≤ has_Sup.Sup s</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>Should I be fixing this sorry?</p>",
        "id": 181327464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1574357530
    },
    {
        "content": "<p>Are you <code>Sup</code> and <code>Inf</code> definitions the right way round?</p>",
        "id": 181568974,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1574360205
    },
    {
        "content": "<p>Also, I think your definition of <code>le</code> is the wrong way round.</p>",
        "id": 181569304,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1574360405
    },
    {
        "content": "<p>Now the proofs work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">le</span> <span class=\"o\">:=</span> <span class=\"n\">function</span><span class=\"bp\">.</span><span class=\"n\">swap</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le</span><span class=\"o\">,</span>\n  <span class=\"n\">Sup</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_Inf</span><span class=\"bp\">.</span><span class=\"n\">Inf</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">Inf</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_Sup</span><span class=\"bp\">.</span><span class=\"n\">Sup</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Sup</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">le_cSup</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n      <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">cInf_le</span><span class=\"o\">,</span>\n  <span class=\"n\">cSup_le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_cInf</span><span class=\"o\">,</span>\n  <span class=\"n\">cInf_le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_cSup</span><span class=\"o\">,</span>\n  <span class=\"n\">le_cInf</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cSup_le</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 181569394,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1574360475
    },
    {
        "content": "<p>There might be a neater way.</p>",
        "id": 181569413,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1574360489
    },
    {
        "content": "<p>Now they work even better.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"kn\">instance</span> <span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">with_bot</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">Sup</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_Inf</span><span class=\"bp\">.</span><span class=\"n\">Inf</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Inf</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">Inf</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">has_Sup</span><span class=\"bp\">.</span><span class=\"n\">Sup</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span><span class=\"bp\">.</span><span class=\"n\">has_Sup</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">),</span>\n  <span class=\"n\">le_cSup</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cInf_le</span><span class=\"o\">,</span>\n  <span class=\"n\">cSup_le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_cInf</span><span class=\"o\">,</span>\n  <span class=\"n\">cInf_le</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">le_cSup</span><span class=\"o\">,</span>\n  <span class=\"n\">le_cInf</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">conditionally_complete_lattice</span> <span class=\"o\">(</span><span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">cSup_le</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">with_bot</span><span class=\"bp\">.</span><span class=\"n\">lattice</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 181569523,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1574360549
    }
]