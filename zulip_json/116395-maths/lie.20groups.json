[
    {
        "content": "<ol>\n<li>Is there anything blocking the definition of a Lie group?</li>\n<li>If not, is there anything blocking the definition of examples of Lie groups, such as GL_n and SL_n?</li>\n</ol>",
        "id": 196179711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588598997
    },
    {
        "content": "<ol>\n<li>manifolds</li>\n<li>implicit function theorem</li>\n</ol>",
        "id": 196179797,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588599038
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Could you expand? We seem to have both of these.</p>",
        "id": 196179980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588599144
    },
    {
        "content": "<p>oh I thought Patrick said earlier that manifolds are difficult</p>",
        "id": 196180008,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588599168
    },
    {
        "content": "<p>He said that 2 years ago</p>",
        "id": 196180024,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588599178
    },
    {
        "content": "<p><em>tempus fugit</em></p>",
        "id": 196180052,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1588599200
    },
    {
        "content": "<p>Since then <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> appeared. And now manifolds are still difficult. But no longer non-existent.</p>",
        "id": 196180064,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588599211
    },
    {
        "content": "<p>We don't quite have implicit function theorem yet. And we certainly don't have the API to use it to build manifolds.</p>",
        "id": 196180488,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588599431
    },
    {
        "content": "<p>So I think it should be easy to define Lie groups and prove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><msub><mi>L</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">GL_n(\\mathbb R)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">G</span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span> is a Lie group. But <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><msub><mi>L</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">SL_n(\\mathbb R)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\"><span class=\"mord mathdefault\">L</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>O</mi><mi>n</mi></msub><mo stretchy=\"false\">(</mo><mi mathvariant=\"double-struck\">R</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O_n(\\mathbb R)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">O</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathbb\">R</span><span class=\"mclose\">)</span></span></span></span> are still out of reach.</p>",
        "id": 196180559,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1588599476
    },
    {
        "content": "<p>What is the name of the predicate that claims that a function <code>M → M'</code> is \"smooth with respect to certain structure groupoids\"?</p>",
        "id": 196182663,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588600533
    },
    {
        "content": "<p><code>mdifferentiable</code> on gives <code>C^1</code>-functions, right?</p>",
        "id": 196183740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588601018
    },
    {
        "content": "<p>Maybe we should wait for the analytic functions PR.</p>",
        "id": 196183865,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588601065
    },
    {
        "content": "<p>Smooth functions on manifolds have been on my hard drive for a long time, I should PR them. But for now I am refactoring local equivs to use coercions instead of <code>.to_fun</code> and <code>.inv_fun</code>, as this works reasonably well with Lean 3.10. This really improves readability!</p>",
        "id": 196189865,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588603399
    },
    {
        "content": "<p>Cool! That's great news. I will park Lie groups for now. But hearing that coercions are returning is really good!</p>",
        "id": 196190132,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1588603512
    },
    {
        "content": "<p>This sounds like a great idea! It's not just readability -- it is somehow expressing \"what is actually going on\".</p>",
        "id": 196190386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588603619
    },
    {
        "content": "<p>(or at least my mental model of what is really going on -- an equiv is a map with some other stuff, but really it's a map)</p>",
        "id": 196190429,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1588603642
    },
    {
        "content": "<p>Are you not running into any issues with inferring arguments of your equivs, then?</p>",
        "id": 196190972,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588603884
    },
    {
        "content": "<p>I mean for example in your post <a href=\"#narrow/stream/113488-general/topic/transitive.20coercions/near/195971827\" title=\"#narrow/stream/113488-general/topic/transitive.20coercions/near/195971827\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/transitive.20coercions/near/195971827</a> if you replace <code>my_equiv2 α x</code> with <code>my_equiv2 _ x</code> then Lean can't fill in the <code>_</code>, even though it looks obvious that it should be <code>α</code>. (For instance with <code>.to_fun</code> added it works with or without the <code>_</code>.)</p>",
        "id": 196191428,
        "sender_full_name": "Reid Barton",
        "timestamp": 1588604073
    },
    {
        "content": "<p>My equivs are charts on a manifold, and I didn't run into the issue you mention with them. The only issue is that, sometimes, when Lean should coerce a chart to a function, it doesn't want to do it, and I have to provide type annotations.</p>",
        "id": 196193629,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1588604981
    },
    {
        "content": "<p>I for one would _love_ to have Lie groups as I secretly want to formalise the Yang-Mills equations.</p>",
        "id": 196196389,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1588605938
    },
    {
        "content": "<p>You can formalize perturbative quantum Yang-Mills just using the Lie algebra.</p>",
        "id": 196209989,
        "sender_full_name": "Michael R Douglas",
        "timestamp": 1588611693
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> did you by chance have the opportunity to PR smooth functions on manifolds? I had a look at the manifold files and it looks not to be there, but maybe I missed it! In case not, when are you planning to push them?</p>",
        "id": 200768125,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592057175
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> See <a href=\"https://github.com/leanprover-community/mathlib/issues/2962\">#2962</a></p>",
        "id": 200768158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592057258
    },
    {
        "content": "<p>Yes, at Johan points out it's PRed in <a href=\"https://github.com/leanprover-community/mathlib/issues/2962\">#2962</a>, but I have some clean up to do.</p>",
        "id": 200769394,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592059130
    },
    {
        "content": "<p>Oh ok thanks a lot! Then I will start copying the files and use them locally on my computer and then I will wait for the merge to be approved to import it!</p>",
        "id": 200773328,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592064554
    },
    {
        "content": "<p>You don't have to do anything tricky. <code>leanproject get mathlib:times_cont_mdiff</code> will download everything (including compiled oleans) to a <code>mathlib_times_cont_mdiff</code> folder (unless you ask for another folder name).</p>",
        "id": 200774318,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592066242
    },
    {
        "content": "<p>Ok thanks that's helpful!</p>",
        "id": 200774415,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592066398
    },
    {
        "content": "<p>That's mostly a convenience for people reviewing pull requests but it can also be useful for impatient people.</p>",
        "id": 200774759,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592066797
    },
    {
        "content": "<p>I am sorry if this is a stupid question, but it is one of the first times I am using lean and I am a bit unfamiliar with it. I see that in times_cont_mdiff C^\\infty is expressed as times_cont_mdiff ⊤ times, where ⊤ is not a T but a special character. I cannot find anywhere the definition of ⊤ and I would be really grateful if someone could point out to me some place where I can read how it works (the defining code would be fine)!</p>",
        "id": 200778616,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592072405
    },
    {
        "content": "<p>It looks like \"top\" to me, the maximal element of a lattice. What is its type?</p>",
        "id": 200778673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592072513
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span> (It's better if new questions start in a new thread.)<br>\nYou can write</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"kn\">notation</span> <span class=\"err\">⊤</span>\n</code></pre></div>\n\n\n<p>to find out what it is.</p>",
        "id": 200778722,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592072543
    },
    {
        "content": "<p>You'll find that it is <code>has_top.top</code>.</p>",
        "id": 200778725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592072554
    },
    {
        "content": "<p>In this case, it's <code>with_top ℕ</code>.</p>",
        "id": 200778735,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592072568
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/2962/files#diff-badb0bdbd1d80cdea539f32e49073dfaR51\">https://github.com/leanprover-community/mathlib/pull/2962/files#diff-badb0bdbd1d80cdea539f32e49073dfaR51</a></p>",
        "id": 200778770,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1592072593
    },
    {
        "content": "<p>If you hover over <code>times_cont_mdiff</code>, you will see that the first parameter is a <code>with_top nat</code>... so that should explain what kind of <code>top</code> this is.</p>",
        "id": 200778773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592072599
    },
    {
        "content": "<p>So the lattice is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">N</mi><mo>∪</mo><mo stretchy=\"false\">{</mo><mi mathvariant=\"normal\">∞</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbb{N}\\cup\\{\\infty\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">N</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">∞</span><span class=\"mclose\">}</span></span></span></span> and it's the top element of that.</p>",
        "id": 200778774,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592072601
    },
    {
        "content": "<p>In other words, you are looking at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>C</mi><mi mathvariant=\"normal\">∞</mi></msup></mrow><annotation encoding=\"application/x-tex\">C^\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span></span></span></span></span></span></span> functions <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 200778831,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592072644
    },
    {
        "content": "<p>Ok thanks a lot to everybody. It looks like now the main tools to define Lie groups are there, so I was wondering: is anybody working on a definition that will be PRed on the mathlib? I am writing a temporary definition myself to work to some projects, but depending on when it will be available on mathlib I might spend more or less time proving basic properties. I also saw not a lot has been written about product manifolds (even though the hardest part, the product of models with corners, is there) so I was wondering if anybody is planning to write something more in the near future (just so that I do not spend time writing duplicate code)</p>",
        "id": 200871878,
        "sender_full_name": "Nicolò Cavalleri",
        "timestamp": 1592217002
    },
    {
        "content": "<p>I am not working on this currently. I would like to refactor some things to make the manifold library easier to read and to use, but this is orthogonal to what you want to do, so I'd say go ahead! And don't hesitate to PR to mathlib, or show some code here on Zulip, or even share your thoughts on what you find nice to use / less nice to use: all this would be super-useful.</p>",
        "id": 200872409,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592217352
    }
]