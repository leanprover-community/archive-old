[
    {
        "content": "<p>I'm trying to stress test my adjunctions code. A natural example is <code>mv_polynomial</code> being left adjoint to <code>forget</code>. This adjunction is actually a composite of two adjunctions: the free monoid construction, and monoid rings. While trying to write these things down, I got stuck in the whole additive-multiplicative business again. So, let's forget about this motivation for now.</p>\n<p>Has anyone ever attempted to turn <code>data/finsupp</code> into a file that supports both multiplicative and additive coefficients? Are there any expected problems? Or is this just something that has to be done by someone?</p>",
        "id": 156594377,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548152993
    },
    {
        "content": "<p>use <code>multiplicative A</code> for the coefficients</p>",
        "id": 156594586,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548153151
    },
    {
        "content": "<p>I know I can do that. But it becomes pretty messy. And it feels to me like it defeats the purpose of the <code>add</code>/<code>mul</code> distinction.</p>",
        "id": 156595162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548153821
    },
    {
        "content": "<p>All of a sudden I'm having proofs like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"o\">{</span> <span class=\"n\">map_one</span> <span class=\"o\">:=</span> <span class=\"n\">map_domain_zero</span><span class=\"o\">,</span> <span class=\"n\">map_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">Î»</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">map_domain_add</span> <span class=\"o\">}</span>\n</pre></div>\n\n\n<p>which creates cognitive dissonance.</p>",
        "id": 156595211,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548153859
    },
    {
        "content": "<p>I think that if we want to use <code>multiplicative</code> (or <code>additive</code>, I don't care) we should just use it everywhere.</p>",
        "id": 156595229,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548153919
    },
    {
        "content": "<p>well we did, and now you want the other one</p>",
        "id": 156595240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548153948
    },
    {
        "content": "<p>No, I mean everywhere in mathlib.</p>",
        "id": 156595315,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548154048
    },
    {
        "content": "<p>I have argued since day 1 that it would be much nicer to use add for group theory and forget about mul except in specialized circumstances, but mathematicians get hissy about non-commutative addition</p>",
        "id": 156595320,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548154074
    },
    {
        "content": "<p>Mathematicians definitely want both.</p>",
        "id": 156596112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548155056
    },
    {
        "content": "<p>Non-commutative addition is the least of our worries here.</p>",
        "id": 156596116,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548155074
    },
    {
        "content": "<p>If I said \"all groups must use addition\", what exactly would be the downside? AFAICT there are very few places where you actually need multiplicative groups besides \"it looks better\"</p>",
        "id": 156596745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548155956
    },
    {
        "content": "<p>by contrast it is quite common to use the group structure of additive groups embedded in rings and other things</p>",
        "id": 156596829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548156023
    },
    {
        "content": "<p>Note that a ring does not have a multiplicative group; multiplication is not a group operation. Instead there is an associated structure, the \"units group\", that is a group</p>",
        "id": 156596867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1548156112
    },
    {
        "content": "<p>If you said \"all groups must use addition\" then mathematicians would consistently be utterly confused about why the unit group of a ring had group law addition. I guess there's nothing stopping this convention -- equally, there is nothing stopping the convention that you use a little heart symbol. It's just that mathematicians would then find this stuff even harder to understand. Notation conveys meaning and notation which mathematicians have fixed on is <em>very</em> hard to change. I personally loathe the standard symbol for quadratic residues / non-residues, because it's a fraction in a bracket -- but there's very little I can do about this.</p>",
        "id": 156597285,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548156608
    },
    {
        "content": "<p>We have proof irrelevance. Why can't we have notation irrelevance. (I know that the current implementation via type classes makes it hard. But that just means we need a better solution.)</p>",
        "id": 156597691,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548157118
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I can see why you would want all groups to be additive (although adding invertible matrices feels very wrong). But with monoids you wouldn't have a clean solution, right? Every ring gives you two monoids, one for addition, the other for multiplication. I'm interested in knowing what you would do there.</p>",
        "id": 156599282,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548159158
    },
    {
        "content": "<p>I thought about this more. A mathematician has a fixed notation for a ring, so you can't change it -- it uses <code>+</code> and <code>*</code>. And a ring is a group under <code>+</code> and the units of a ring are a group under <code>*</code>, and these come up again and again, so you can't change these either :-/ And the point is that in mathematics we are capable of rewriting these group axioms from <code>+</code> to <code>*</code> seamlessly because <em>it is true that it works fine</em>, yet Lean struggles to do it seamlessly. There clearly is some sort of a problem here, but I don't think mathematicians will accept removal of <code>*</code> because it goes the wrong way. For us, the units of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> are a subset of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span>. This is not how it works in DTT and somehow we need a better solution :-/</p>",
        "id": 156615639,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1548172828
    },
    {
        "content": "<p>How about <code>End(V)</code>? We'll use <code>\\circ</code> instead of <code>*</code>, without blinking an eye.</p>",
        "id": 156615711,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1548172891
    },
    {
        "content": "<p>A unit is just an automorphism of a ring as a module over itself, what's the problem?</p>",
        "id": 156615835,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548172974
    },
    {
        "content": "<p>(<a href=\"https://stackoverflow.com/questions/3870088/a-monad-is-just-a-monoid-in-the-category-of-endofunctors-whats-the-problem\" target=\"_blank\" title=\"https://stackoverflow.com/questions/3870088/a-monad-is-just-a-monoid-in-the-category-of-endofunctors-whats-the-problem\">https://stackoverflow.com/questions/3870088/a-monad-is-just-a-monoid-in-the-category-of-endofunctors-whats-the-problem</a>)</p>",
        "id": 156615884,
        "sender_full_name": "Reid Barton",
        "timestamp": 1548173010
    }
]