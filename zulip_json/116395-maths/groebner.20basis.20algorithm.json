[
    {
        "content": "<p>I don't really know what a groebner basis algorithm is, except that </p>\n<ol>\n<li>\n<p>it's a generalization of the <code>ring</code> tactic and </p>\n</li>\n<li>\n<p>sage has an implementation that is fast enough to be useful to people doing exploratory mathematics</p>\n</li>\n</ol>\n<p>question: does the grobner basis method produce small witnesses checkable by <code>ring</code>? if so, can we get <code>ring++</code> in Lean by \"just\" shelling out to an oracle?</p>",
        "id": 197206992,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1589232511
    },
    {
        "content": "<p>Yes, this is possible but you need to understand what elements of the coefficients ring are equal to zero.</p>",
        "id": 197208494,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589233504
    },
    {
        "content": "<p>Coq has a per-field/ring set of tactics that deal with coefficients, and this set of tactics is used by <code>ring</code>, <code>field</code>, and <code>groebner</code> (not sure about exact names).</p>",
        "id": 197208725,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589233647
    },
    {
        "content": "<p>I've also had this thought, I think this is a really achievable goal, what's needed is  enough of the theory to give Buchberger's criterion, this should be enough that lean can check the witness, then Sage or Singular can be called to produce a basis.</p>",
        "id": 197208891,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589233745
    },
    {
        "content": "<p>If all we want is a tactic that solves a goal <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>P</mi><mn>1</mn></msub><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>P</mi><mi>k</mi></msub><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn><mo>⊢</mo><mi>Q</mi><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>x</mi><mi>n</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">P_1(x_1, \\dots, x_n) = 0, \\dots, P_k(x_1, \\dots, x_n)=0 \\vdash Q(x_1, \\dots, x_n)=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⊢</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">Q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, then we don't need any theory to check the witness.</p>",
        "id": 197209114,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589233883
    },
    {
        "content": "<p>Because the witness has a form <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>R</mi><mo stretchy=\"false\">(</mo><msub><mi>P</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi>P</mi><mi>k</mi></msub><mo stretchy=\"false\">)</mo><mo>=</mo><msup><mi>Q</mi><mi>m</mi></msup></mrow><annotation encoding=\"application/x-tex\">R(P_1, \\dots, P_k)=Q^m</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\" style=\"margin-right:0.13889em;\">P</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Q</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">m</span></span></span></span></span></span></span></span></span></span></span>.</p>",
        "id": 197209416,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589234059
    },
    {
        "content": "<p>On the other hand, it would be nice to have a function that verifies <code>is_groebner_basis</code> predicate but this can be postponed.</p>",
        "id": 197209526,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1589234139
    },
    {
        "content": "<p>Yes this is a job which would be perfect for an external solver like sage and it would not surprise me at all if <span class=\"user-mention\" data-user-id=\"116034\">@William Stein</span> could help. <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> set this up with Mathematica before, right?</p>",
        "id": 197210882,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589234946
    },
    {
        "content": "<p>The \"normal\"algebra package finds a relation and then <code>ring</code> formally checks it</p>",
        "id": 197210931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589234991
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>'s hammer project would also be a good template for calling an external program, parsing the result into lean and then doing something with it I think.</p>",
        "id": 197211031,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589235041
    },
    {
        "content": "<p>It would be great to have a Sage link, but I think for this purpose calling one of the underlying libraries of Sage to calculate groebner bases might be simpler (and faster) to begin with.</p>",
        "id": 197211581,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1589235338
    },
    {
        "content": "<p>Some people at the VU have worked on Gröbner bases a while back, but I believe it's dormant now. I'll ask about the current state and see if they want to share the work in progress.</p>",
        "id": 197246223,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1589272247
    },
    {
        "content": "<p>every project not PR'd into mathlib is lost in time</p>",
        "id": 197246416,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589272372
    },
    {
        "content": "<p>Do you know if they were actually implementing the algorithm in Lean? Because this is one of these situations where a result is far easier to check than to discover, the discovering might be best left to an external program</p>",
        "id": 197248899,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589273966
    },
    {
        "content": "<p>The project at the VU did implement the algorithm in Lean, but I think resurrecting it will be a big challenge.</p>",
        "id": 197249212,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589274138
    },
    {
        "content": "<p>Doing this with an external computation is totally reasonable. The problem is, how do we integrate that into mathlib? Do we make Sage a dependency for compiling the library?</p>",
        "id": 197249269,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589274184
    },
    {
        "content": "<p>Who wants to stay up to date on compatibility with different OSs, Python versions, Sage versions, ...?</p>",
        "id": 197249309,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589274223
    },
    {
        "content": "<p>I guess this shouldn't be in mathlib?</p>",
        "id": 197249374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589274248
    },
    {
        "content": "<p>Or the tactic should just break if the dependency isn't there?</p>",
        "id": 197249418,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589274289
    },
    {
        "content": "<p>We don't need to leave calls to Sage in the library, so maybe it's not a requirement to compile. But there's still some presumption that if the tactic is available someone keeps it working.</p>",
        "id": 197249421,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589274293
    },
    {
        "content": "<p>It's similar to worries about <a href=\"https://github.com/leanprover-community/mathlib/issues/1083\">#1083</a></p>",
        "id": 197249498,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589274357
    },
    {
        "content": "<p>This is one of these tactics like library_search where you run it once and it says \"type this instead\" and whoever types this instead doesn't need sage</p>",
        "id": 197249549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589274369
    },
    {
        "content": "<p>Right, but if you want to run it once, you do need Sage, so a lot of people are going to show up on this chat asking \"why doesn't <code>groebner</code> work for me?\"</p>",
        "id": 197249651,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589274452
    },
    {
        "content": "<p>Maybe if we call it <code>groebner_sage</code> we will get less of those questions?</p>",
        "id": 197249776,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589274520
    },
    {
        "content": "<p>Or <code>sage.groebner</code></p>",
        "id": 197249790,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1589274532
    },
    {
        "content": "<p>Again, it's the same situation as <a href=\"https://github.com/leanprover-community/mathlib/issues/1083\">#1083</a> or sledgehammer or anything with external dependencies. I'm not saying don't do it. Just make sure it's worth the support costs.</p>",
        "id": 197249813,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589274554
    },
    {
        "content": "<p>/ know who's tasked with supporting it and what they're willing to help with.</p>",
        "id": 197249853,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589274580
    },
    {
        "content": "<p>I think the first step is to write the <code>ring ++</code> tactic that can be used as the target for these <code>groebner</code> calls</p>",
        "id": 197250276,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589274936
    },
    {
        "content": "<p>I'm imagining an interface like <code>ring [(x + y, h1), (z, &lt;- h2)]</code> which checks that if the goal is <code>a = b</code> and <code>h1 : l1 = r1</code> and <code>h2 : l2 = r2</code>, then <code>a - (x + y) * l1 - z * r2 = b - (x + y) * r1 - z * l2</code> is an equality in commutative rings</p>",
        "id": 197250649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589275188
    },
    {
        "content": "<p>Importantly, you don't need sage to use this tactic; in many instances it is perfectly within the ability of the user to come up with coefficients making the invocation work</p>",
        "id": 197250779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589275268
    },
    {
        "content": "<p>Wow, this looks like a much easier endeavour and Mario is absolutely right, in many cases the user will be able to solve for the coefficients by themselves. And in the manual it could say \"if you are lazy and don't want to work out the coefficients of h1 and h2 yourself, then type \"sage.ring_hint\" and cut and paste the resulting code into sage, and then cut and paste the output of the sage code back into Lean\" :-)</p>",
        "id": 197251089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589275467
    },
    {
        "content": "<p>Even if you do need sage, can sage not just return a certificate that can be passed as an argument to the tactic?</p>",
        "id": 197251314,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589275667
    },
    {
        "content": "<p>So there's one version that interfaces with sage and one that just asks for the certificate.</p>",
        "id": 197251382,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589275700
    },
    {
        "content": "<p>yes, but if the replacement tactic is so arcane that it can't be used directly, then you still need to use sage to construct the proof</p>",
        "id": 197251396,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589275716
    },
    {
        "content": "<p>In <span class=\"user-mention\" data-user-id=\"235513\">@Daniel Fabian</span> 's example from yesterday, he had</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">l</span><span class=\"o\">)),</span>\n<span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">+</span> <span class=\"n\">l</span><span class=\"o\">))</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"bp\">-</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span> <span class=\"bp\">-</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">k</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>and <code>ring++ [(1,h1),(1,&lt;-h2)]</code> would do it, as would <code>ring++ [(1,h1),(-1,h2)]</code> (note in particular that there is no need for <code>&lt;-</code> I guess). The fact that these numbers are +-1 is why <code>linarith</code> solved it, but in general they won't be.</p>",
        "id": 197251462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589275766
    },
    {
        "content": "<p>the back arrow (and the subtractions in my gloss of what they mean) are to support semirings</p>",
        "id": 197251528,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589275802
    },
    {
        "content": "<p>rofl</p>",
        "id": 197251561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589275811
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  for example, if you are a maintainer and are fixing a broken proof, and the certificate no longer works, you need to have sage to regenerate the proof</p>",
        "id": 197251649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589275866
    },
    {
        "content": "<p>If you were fairly strict about how to use it, then it might be okay. As in you always used it as <code>have _ : by groebner [certificate]</code>, then the proofs would be fairly stable</p>",
        "id": 197252426,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1589276344
    },
    {
        "content": "<p>If this is implemented, it would be great if the Sage call could fall back to a Lean implementation. Try the fast one first, but if Sage isn't there, do it natively. A rudimentary meta groebner basis algorithm isn't crazy hard.</p>",
        "id": 197252498,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589276396
    },
    {
        "content": "<p>how expensive is FFI to sage/mathematica? Is it possible that the lean version will win for not being \"external\"?</p>",
        "id": 197253017,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589276724
    },
    {
        "content": "<p>It depends how much effort you put into the architecture of both. Sage and Mathematica are both very expensive to start up. If you don't have a server running, the native version will probably win for small problems, especially if you do a decent job implementing it.</p>",
        "id": 197253225,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1589276872
    },
    {
        "content": "<p>In case there are any people who don't really know what Groebner bases are, here is a summary of what is going on.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">8</span><span class=\"bp\">=</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- proof which contains a human-generated mathematical idea</span>\n  <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">ring</span><span class=\"o\">),</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span> <span class=\"c1\">-- note `ring` called twice, once to implement the idea and once to finish the job</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c1\">-- the Commelin-Barton trick</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">lhs</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">x</span>\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rhs</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">y</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- &quot;the same&quot; human-generated idea, in a different format</span>\n  <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">8</span>  <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">rhs</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">rhs</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">rhs</span> <span class=\"bp\">=</span>\n             <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">10</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">lhs</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">6</span><span class=\"bp\">*</span><span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">lhs</span> <span class=\"bp\">+</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">*</span><span class=\"n\">h2</span><span class=\"bp\">.</span><span class=\"n\">lhs</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">lhs</span> <span class=\"n\">h1</span> <span class=\"bp\">=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rhs</span> <span class=\"n\">h1</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h1</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">lhs</span> <span class=\"n\">h2</span> <span class=\"bp\">=</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rhs</span> <span class=\"n\">h2</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">h2</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">this</span><span class=\"o\">},</span> <span class=\"c1\">-- note: no `ring` needed</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">lhs</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rhs</span><span class=\"o\">,</span>\n  <span class=\"n\">ring</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">8</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">10</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"c1\">-- the above script, all packed into a tactic</span>\n  <span class=\"n\">ring</span><span class=\"bp\">++</span> <span class=\"o\">[(</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">6</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">h1</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">6</span><span class=\"bp\">+</span><span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">3</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">,</span> <span class=\"err\">←</span><span class=\"n\">h2</span><span class=\"o\">)]</span>\n  <span class=\"c1\">-- doesn&#39;t work yet though</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">The underlying question: Let R be the ring ℤ[A,B] and let I be the ideal (A^2-B^2,A^3-B^4).</span>\n<span class=\"cm\">Is A^8-B^10 in I? Yes it is, because it&#39;s A^6(A^2-B^2)+(A^3B^2+B^6)(A^3-B^4)</span>\n\n<span class=\"cm\">The point is a computer algebra package such as SAGE could find the representation of A^8-B^10</span>\n<span class=\"cm\">and then ring++ can just take the inputs and check that the computer algebra package gave</span>\n<span class=\"cm\">the right answer</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>",
        "id": 197254209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589277445
    },
    {
        "content": "<p>thanks for the explanation; that makes it very clear</p>",
        "id": 197254540,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1589277632
    },
    {
        "content": "<p>I never know if you are being sarcastic ;-)</p>",
        "id": 197254572,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589277646
    },
    {
        "content": "<p>your proof is a bit unexpected. I would have expected something akin to <code>h1 * h2 * h2</code></p>",
        "id": 197254590,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589277659
    },
    {
        "content": "<p>I guess this is part of the grobner basis idea that this can be written as a linear function of the h's</p>",
        "id": 197254649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589277698
    },
    {
        "content": "<p>Yes, the problem is that to prove (h2.lhs)^2=(h2.rhs)^2 you have to write 0 as a difference of two squares and observe that one of the factors is zero</p>",
        "id": 197254666,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589277706
    },
    {
        "content": "<p>b^6+a^3b^2=b^2(b^4+a^3) which is the LHS+RHS factor for h2.</p>",
        "id": 197254733,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589277743
    },
    {
        "content": "<p>but that's not true, right? I mean <code>h2.lhs^2 = h2.rhs^2</code> follows trivially from <code>h2.lhs = h2.rhs</code></p>",
        "id": 197254751,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589277764
    },
    {
        "content": "<p>But your ring++ specification didn't have this</p>",
        "id": 197254771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589277782
    },
    {
        "content": "<p>that is true</p>",
        "id": 197254779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589277789
    },
    {
        "content": "<p>I could only subtract <code>c*h1.lhs</code> and <code>c*h1.rhs</code>, but I know how all this works in practice so I just worked around it</p>",
        "id": 197254793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589277804
    },
    {
        "content": "<p>I was thinking abot being able to write some equation like <code>h1 * h2 * h2</code> where it means what you think it means</p>",
        "id": 197254821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589277825
    },
    {
        "content": "<p>If <code>ring++</code> is to be a human usable tactic, I think it should probably allow such things even if they aren't strictly required for the ideal membership problem</p>",
        "id": 197254939,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589277895
    },
    {
        "content": "<p>If you're happy with more work for you, that's great. I'm observing that <code>ring++</code> in the form you proposed seems to me to be writable in a small amount of code and provides a tool which looks like it might already be really useful.</p>",
        "id": 197254948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589277903
    },
    {
        "content": "<p>I believe that a grobner basis algorithm will always produce a certificate which is a linear function of the hypotheses</p>",
        "id": 197255023,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589277962
    },
    {
        "content": "<p>It should be easy to write the Sage code which turns <code>(h1 : a^2 = b^2) (h2 : a^3 = b^4) : a^8 = b^10</code> into <code> ring++ [(a^6, ←h1), (b^6+a^3*b^2, ←h2)]</code></p>",
        "id": 197255065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589277982
    },
    {
        "content": "<p>You are proposing making something easier for humans to use, and of course the easier it is for humans to use the better, but what has dawned on me is that even this \"stupid\" version of <code>ring++</code> where there is no syntax for being able to add <code>h1.lhs*h3.rhs^2</code> to one side and <code>h1.rhs*h3.lhs^2</code> to the other, is still something which has got far more power than I had realised.</p>",
        "id": 197255238,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589278130
    },
    {
        "content": "<p>because I can write sage code from there</p>",
        "id": 197255253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589278146
    },
    {
        "content": "<p>I think another way to think about the coefficients you got is to successively rewrite <code>a^2 * a^3 * a^3 = b^2 * a^3 * a^3 = b^2 * b^4 * a^3 = b^2 * b^4 * b^4</code>. Each equality is a coefficient times one of the hypotheses, and the chaining is adding the functions together, so you get a linear combination in the end</p>",
        "id": 197255412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589278251
    },
    {
        "content": "<p>I think that what's happening now is that you are interested in making some kind of better, or easier-to-use algorithm, but this is not the kind of thing I know anything about; I can already see the path to enlightenment and it uses external forces which I have (computer algebra packages), so as far as I am concerned the problem is solved.</p>",
        "id": 197256430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589278944
    },
    {
        "content": "<p>rather, I'm reverse engineering where you got those constants since they weren't in the first version of the proof</p>",
        "id": 197257241,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589279612
    },
    {
        "content": "<p>oh but they're just obvious ;-)</p>",
        "id": 197257302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589279643
    },
    {
        "content": "<p>The second rewrite is really two rewrites. I am doing them separately</p>",
        "id": 197257318,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589279671
    },
    {
        "content": "<p>The first changes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mn>6</mn></msup><msup><mi>a</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">a^6a^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mn>6</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">a^6b^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 197257334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589279690
    },
    {
        "content": "<p>as for making <code>ring ++</code>, there is no real added difficulty in multiplying equations compared to adding them. Especially if you give the remainder term, this is pretty trivial and you can have the equations under arbitrary functions</p>",
        "id": 197257336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589279696
    },
    {
        "content": "<p>the second changes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mn>6</mn></msup><msup><mi>b</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">a^6b^2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>a</mi><mn>3</mn></msup><msup><mi>b</mi><mn>6</mn></msup></mrow><annotation encoding=\"application/x-tex\">a^3b^6</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">6</span></span></span></span></span></span></span></span></span></span></span> and the third changes that to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>b</mi><mn>10</mn></msup></mrow><annotation encoding=\"application/x-tex\">b^{10}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span></span>. I guess I wrote them in a different order though.</p>",
        "id": 197257368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589279732
    },
    {
        "content": "<p>actually, the version I proposed might still not be sufficient for semirings unless you include transitivity</p>",
        "id": 197257484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589279812
    },
    {
        "content": "<p>I am too unimaginative to imagine the syntax for \"now add <code>h1.L*h3.R^2</code> to one side and <code>h1.R*h3.L^2</code> to the other\"</p>",
        "id": 197257490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589279817
    },
    {
        "content": "<p>I am just thinking about literally writing <code>ring h1 * h2 * h2</code></p>",
        "id": 197257520,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589279843
    },
    {
        "content": "<p>Of course I personally don't care about semirings. If I ever have an equality between naturals which I want to prove, then I can embed it into the integers and prove it there, and if it uses subtraction then I already did something wrong (I didn't embed into the integers early enough).</p>",
        "id": 197257608,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589279883
    },
    {
        "content": "<p>Nat subtraction does not exist in maths so you never see it in the wild</p>",
        "id": 197257633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589279908
    },
    {
        "content": "<p>We see it in the wild all the time</p>",
        "id": 197257645,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589279923
    },
    {
        "content": "<p>the lean wild</p>",
        "id": 197257656,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589279930
    },
    {
        "content": "<p>same with nat equalities</p>",
        "id": 197257669,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589279940
    },
    {
        "content": "<p>Now we have <code>norm_cast</code> I just move between nat and int freely.</p>",
        "id": 197257677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589279942
    },
    {
        "content": "<p>Yeah you see nat subtraction in CS Lean, but in CS lean you surely don't see complicated Groebner bases questions? <code>omega</code> will do for you, right?</p>",
        "id": 197257716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589279982
    },
    {
        "content": "<p>Sure you do</p>",
        "id": 197257727,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589279995
    },
    {
        "content": "<p>Oh OK I stand corrected!</p>",
        "id": 197257779,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280007
    },
    {
        "content": "<p>That problem that you used in the example could just as easily have been on nat</p>",
        "id": 197257795,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589280021
    },
    {
        "content": "<p>Sure, but it's not a problem a computer scientist needs to solve when they're verifying that their code has no bugs</p>",
        "id": 197257813,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280041
    },
    {
        "content": "<p>whereas it's the sort of thing which comes up all the time in number theory</p>",
        "id": 197257847,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280053
    },
    {
        "content": "<p>except that we can move to int</p>",
        "id": 197257881,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280075
    },
    {
        "content": "<p>I know for a fact that linear arithmetic comes up all the time, and this is essentially the equality version</p>",
        "id": 197257914,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589280097
    },
    {
        "content": "<p>but you already have <code>linarith</code>, which Patrick observed solved Daniel Fabian's question.</p>",
        "id": 197257994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280141
    },
    {
        "content": "<p>Do we have a generic construction for putting negation in a semiring?</p>",
        "id": 197258015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589280159
    },
    {
        "content": "<p>You mean localising it? I think that <span class=\"user-mention\" data-user-id=\"118107\">@Amelia Livingston</span> has worked her socks off with this.</p>",
        "id": 197258061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280196
    },
    {
        "content": "<p>although she is in the middle of UG maths exams now (like Chris)</p>",
        "id": 197258083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280222
    },
    {
        "content": "<p>is it good enough to be used behind the scenes by <code>ring ++</code>?</p>",
        "id": 197258092,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589280231
    },
    {
        "content": "<p>Now that I don't know.</p>",
        "id": 197258100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280241
    },
    {
        "content": "<p>In particular does it need additional hypotheses on the semiring</p>",
        "id": 197258147,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589280251
    },
    {
        "content": "<p>The map from the semiring to its ringification won't be injective in general</p>",
        "id": 197258185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280293
    },
    {
        "content": "<p>that's... bad, right?</p>",
        "id": 197258342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589280386
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/groebner.20basis.20algorithm/near/197257520\">said</a>:</p>\n<blockquote>\n<p>I am just thinking about literally writing <code>ring h1 * h2 * h2</code></p>\n</blockquote>\n<p>My example is too superficial perhaps. In general life won't be as easy as this.</p>",
        "id": 197258565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280560
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/groebner.20basis.20algorithm/near/197258342\">said</a>:</p>\n<blockquote>\n<p>that's... bad, right?</p>\n</blockquote>\n<p>Well the question as to whether a computer scientist cares about a non-ring semiring whose map to its ringification is not injective is one for which I'd be surprised to hear that the answer was \"yes\", but you already surprised me once.</p>",
        "id": 197258669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280613
    },
    {
        "content": "<p>Isn't it though? At least for everything covered by grobner basis algorithm it is <code>ring a * h1 + b * h2.symm</code> and so on</p>",
        "id": 197258672,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589280615
    },
    {
        "content": "<p>Yes, but we just got lucky that the goal literally was h1h2^2</p>",
        "id": 197258695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280639
    },
    {
        "content": "<blockquote>\n<p>Well the question as to whether a computer scientist cares about a non-ring semiring whose map to its ringification is not injective is one for which I'd be surprised to hear that the answer was \"yes\", but you already surprised me once.</p>\n</blockquote>\n<p>The CS problem is not <em>that</em> the map is not injective, but rather that we don't <em>have available</em> the knowledge that the map is injective</p>",
        "id": 197258763,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589280676
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"bp\">=</span><span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">-</span><span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>This is the sort of goal I'd really like to be able to dispatch quickly. Goals like this come up annoyingly often.</p>",
        "id": 197258938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280807
    },
    {
        "content": "<p>You have that the map from nat to int is injective. I've seen no coherent argument from you for why to make the tactic work for semirings. If it works for all commutative rings and nat, will the CS people be satisfied? I conjecture that the maths people will.</p>",
        "id": 197259028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280860
    },
    {
        "content": "<p>I wouldn't use it with nat anyway, because if I have a question about nat then I will coerce to int, work there, and coerce back. This will always work for me because I don't do pathological things with naturals like subtract them until I have coerced to int.</p>",
        "id": 197259095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280927
    },
    {
        "content": "<p>commutative rings and nat is probably enough? There are also ennreal, enat and a few other examples of semirings that are not commutative rings or nat in mathlib</p>",
        "id": 197259106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589280936
    },
    {
        "content": "<p>Oh! I could quite imagine ennreal being something that people might need. This is a nice example.</p>",
        "id": 197259172,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280971
    },
    {
        "content": "<p>it's also not even cancellative</p>",
        "id": 197259183,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589280983
    },
    {
        "content": "<p>I never quite know how seriously to take arithmetic in types like ennreal.</p>",
        "id": 197259185,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280988
    },
    {
        "content": "<p>Sure it's a really important target type for certain norms</p>",
        "id": 197259195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589280999
    },
    {
        "content": "<p>but what one actually does in practice with outputs of norm functions -- I am not so sure that people end up doing complicated polynomial arithmetic with them, or if they did then they might be able to say \"if a=infinity then what we actually want to prove is trivial, and if a is finite let's just coerce back into the reals\"</p>",
        "id": 197259262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589281071
    },
    {
        "content": "<p>Here's an interface that would work with semirings: <code>ring_rw [a*h1]</code> tries to find a <code>b</code> such that <code>goal.lhs = a * h1.lhs + b</code> and then rewrites it to <code>a * h1.rhs + b</code></p>",
        "id": 197259358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589281134
    },
    {
        "content": "<p>and you can have a sequence of such, and it closes with <code>ring</code></p>",
        "id": 197259379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589281160
    },
    {
        "content": "<p>My example</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"bp\">=</span><span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>is a great example of what is currently hard to do. If <code>h1 : a = F(b,c,d,e)</code> then you can just eliminate all <code>a</code>'s with <code>rw h1</code> and you now have 1 fewer generator. When you're down to 0 generators you've won. With the example you don't have just one variable on one side in either hypothesis so currently you have to start faffing around with various <code>eq_add_iff_sub_eq</code>-type lemmas.</p>",
        "id": 197261600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589282779
    },
    {
        "content": "<p><del>oh hang on, it's also not true</del> (sign error fixed)</p>",
        "id": 197261758,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589282908
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"n\">d</span> <span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">c</span><span class=\"bp\">+</span><span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">=</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"n\">c</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">+</span><span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"bp\">-</span><span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">d</span><span class=\"bp\">=</span><span class=\"n\">d</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">-</span><span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"bp\">+</span><span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply_fun</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">e</span><span class=\"bp\">*</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">mul_add</span><span class=\"o\">,</span> <span class=\"n\">mul_add</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This is the sort of hackery I'd come up with for that</p>",
        "id": 197261851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589282982
    },
    {
        "content": "<p>with <code>ring_rw</code>, I'm imagining that it will <em>make</em> it match, even if it doesn't obviously match. So if you <code>ring_rw [h2]</code> on that goal, <code>a^2-c^2+e*b-e*d</code> turns into <code>(a^2+b^2)-c^2+e*b-e*d-b^2</code> and then it gets rewritten to <code>(c^2+d^2)-c^2+e*b-e*d-b^2</code>, which it can also simplify if desired.</p>",
        "id": 197261965,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589283069
    },
    {
        "content": "<p>After cancelling factors, the goal generated by <code>ring_rw [h2]</code> might be <code>e*b-e*d=-e*a+e*c</code></p>",
        "id": 197262095,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589283157
    },
    {
        "content": "<p>I multiplied one equation by <code>e</code>; if I'd also multiplied the non-linear equation by something it would have been harder to sort out. In general you have to know what factor to multiply by which is what your original ring++ was asking for.</p>",
        "id": 197262110,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589283176
    },
    {
        "content": "<p><code>ring_rw [h2]</code> is just like <code>ring++ [(1,h2)]</code></p>",
        "id": 197262161,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589283212
    },
    {
        "content": "<p>Right, <code>ring_rw [h1]</code> at this point would not solve the goal, it would make a mess, but <code>ring_rw [-e * h1]</code> would work</p>",
        "id": 197262171,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589283220
    },
    {
        "content": "<p>Yes, this is an alternative interface in terms of multiple rewrites instead of linear functions</p>",
        "id": 197262230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1589283245
    },
    {
        "content": "<p>Yes, I now see that the way you're thinking about it is going to make it far easier for humans to use.</p>",
        "id": 197262248,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589283259
    }
]