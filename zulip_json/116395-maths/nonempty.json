[
    {
        "content": "<p>Is it evil to write </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"n\">nonempty_of_zero</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">0</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">nonempty_of_one</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_one</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨</span><span class=\"mi\">1</span><span class=\"bp\">⟩</span>\n</pre></div>\n\n\n<p>I doesn't seem to be there already, and that makes me nervous</p>",
        "id": 159940871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551726760
    },
    {
        "content": "<p>The thing that makes me nervous is that you don't know which one Lean will find first in general, and the CS people will get edgy if something with a zero is proved non-empty by using a 1. I tried it with a 37 once and they didn't seem to like it. I guess 1 is a lot closer to zero but still I'm not sure they're going to be happy...</p>",
        "id": 159942538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551727825
    },
    {
        "content": "<p>I PRed that once and was told it was evil.</p>",
        "id": 159942986,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1551728154
    },
    {
        "content": "<p>It should be fine to have non-canonical instances here, since <code>nonempty</code> is a Prop.  I wouldn't do this for <code>inhabited</code>, because then you run into all kinds of problems (which number is <code>default ℕ</code>..).</p>",
        "id": 159942998,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1551728161
    },
    {
        "content": "<p>What makes me nervous about this is it makes <code>nonempty</code> searches traverse the whole hierarchy</p>",
        "id": 159945384,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551729799
    },
    {
        "content": "<p>Ok, I feared something like this. What about defining a <code>nonmepty</code> instance for modules? vector spaces? please?</p>",
        "id": 159949770,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551732885
    },
    {
        "content": "<p>I'm not saying you shouldn't do it, try it and find out if it's a problem</p>",
        "id": 159962758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1551743316
    },
    {
        "content": "<p>I just bumped mathlib in the perfectoid project and I really don't like <a href=\"https://github.com/leanprover-community/mathlib/pull/1954\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/pull/1954\">https://github.com/leanprover-community/mathlib/pull/1954</a>. It makes every statement ugly to save a couple of keystrokes in proofs. I know I had very little time for PR review since Christmas, but that PR was really game changing and was merged in one day.</p>",
        "id": 187731976,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581196958
    },
    {
        "content": "<p>I think readability of statements is really important, even when proofs are unreadable.</p>",
        "id": 187732031,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581197091
    },
    {
        "content": "<p>Also, it would be nice to have a log of breaking changes. Currently it's pretty painful to find why code is no longer working. That <code>nonempty</code> thing is obviously breaking <em>lots</em> of proofs, but now I'm chasing what happened to <code>set.pointwise_mul_action</code>.</p>",
        "id": 187732264,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581197526
    },
    {
        "content": "<p>I'm sorry for breaking your code. After reaction to <a href=\"https://github.com/leanprover-community/mathlib/issues/1779\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1779\">#1779</a> I assumed that migration from <code>≠∅</code> to <code>s.nonempty</code> would be a desired change. If needed, I can revert everything back to <code>≠∅</code>. Though I prefer the <code>s.nonempty</code> version, this is not a strong preference.<br>\nLet's also wait at least for <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> and <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> who approved this PR.</p>",
        "id": 187734238,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581201778
    },
    {
        "content": "<p>As for <code>pointwise_mul_action</code>,  see <a href=\"https://github.com/leanprover-community/mathlib/issues/1925\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1925\">#1925</a></p>",
        "id": 187735090,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1581203387
    },
    {
        "content": "<p>I think the move to nonempty was an excellent move. It takes some time to find the good abstractions, but once we have them we should definitely use them! Before, the fact that a set was nonempty could be expressed in three ways (<code>(h : s ≠ ∅)</code>, or <code>(h : ∃ x, x ∈ s)</code> or <code>(x : α) (h : x ∈ s)</code>) and the three of them were used in some places in the library, making it necessary to jump through hoops when one needed one but the theorems were formulated with another one. With a standard way to express things and a nice API, everything becomes much neater. We don't have a word \"pythonic\" for Lean, but if we had one it would probably apply to this <code>nonempty</code> construct.</p>\n<p>Of course, it is really bad that the change broke your code. To avoid this kind of bitrot, a solution would be to put the perfectoid project in the <code>archive</code> subdirectory of mathlib, so that PRs breaking your code would also have to fix it before getting merged. This is the policy with the AFP in Isabelle, and it works extremely well. I don't know if this is the way archive has been envisioned, though. Any thoughts?</p>",
        "id": 187750507,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1581236217
    },
    {
        "content": "<p>Thanks Yury and Sébastien. I should have separated more clearly the different issues. My main points were:</p>\n<ul>\n<li>this is a pretty drastic change that could have been discussed more (but of course it's difficult in a context where people's availability is very changing),</li>\n</ul>",
        "id": 187751958,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581239445
    },
    {
        "content": "<ul>\n<li>this makes statement less readable, so it should require extra argumentation</li>\n</ul>",
        "id": 187751961,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581239479
    },
    {
        "content": "<p>The point about the perfectoid code being broken is much less important (although it certainly participated in getting me to write a angry message, sorry about that).</p>",
        "id": 187751965,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581239521
    },
    {
        "content": "<p>The main problem about perfectoid code is our huge backlog of things that should be PRed to mathlib. My work yesterday aimed at bringing the project up to date with mathlib to resume the PR effort.</p>",
        "id": 187752012,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581239603
    },
    {
        "content": "<p>All that being said, I'm not really asking to revert that <code>nonempty</code> change. Let's add this to the huge pile of things that should improve in proofs assistants (to get both readable statements and good api). We can even tag this as <span aria-label=\"four leaf clover\" class=\"emoji emoji-1f340\" role=\"img\" title=\"four leaf clover\">:four_leaf_clover:</span></p>",
        "id": 187752821,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581241536
    },
    {
        "content": "<p>The <code>pointwise_mul_action</code> is much more tricky. It touches an area of mathlib that has always been <em>very</em> brittle.</p>",
        "id": 187752863,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581241568
    },
    {
        "content": "<p>Can <span class=\"user-mention\" data-user-id=\"132889\">@Jean Lo</span> or anyone else who likes type class inference failure debug the following:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">pointwise</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"n\">local</span> <span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">]</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">smul_set_action</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- works</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"n\">B</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span> <span class=\"c1\">-- fails</span>\n</pre></div>",
        "id": 187752876,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581241624
    },
    {
        "content": "<p>To be clear: in both cases the expected answer is the new <code>set.smul_set_action</code>, and both used to work before that change.</p>",
        "id": 187753029,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581241996
    },
    {
        "content": "<p>Increasing the <code>instance_max_depth</code> to 34 makes it work. The first instance requires a depth of 28 to make it work. I guess the <code>comm_ring</code> just made the search slightly deeper.</p>",
        "id": 187754064,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1581244146
    },
    {
        "content": "<p>Thank you very much Chris!</p>",
        "id": 187764661,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1581266281
    },
    {
        "content": "<p>I did not consider the desiderata of readable theorem statements. It is indeed true that <code>s.nonempty</code> is a bit harder to read than <code>s ≠ ∅</code>.<br>\nI do still like <code>nonempty</code> better. Being able to do <code>cases</code> on this hypothesis to get an actual element is nice (and the readability is not that bad(?)).<br>\nI could wait longer to merge big PRs like that. However, I'm afraid that will result in more work for the PR author, which will have to fix merge conflicts.</p>",
        "id": 187783802,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1581300515
    }
]