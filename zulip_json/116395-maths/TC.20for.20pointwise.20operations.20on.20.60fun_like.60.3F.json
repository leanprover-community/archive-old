[
    {
        "content": "<p>What do you think about this?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">has_pointwise_mul</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">B</span><span class=\"o\">]</span>\n  <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_apply</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 266878731,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641338946
    },
    {
        "content": "<p>With this (and similar classes for <code>has_one</code>/<code>has_scalar</code>/<code>has_pow</code>/...) we can have, e.g.,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"n\">fun_like.semigroup</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">out_param</span> <span class=\"o\">(</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)}</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">A</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semigroup</span> <span class=\"n\">B</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pointwise_mul</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">semigroup</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 266878892,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641339061
    },
    {
        "content": "<p>Are those instances safe? It feels like there might be a cycle hiding there</p>",
        "id": 266917194,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1641377336
    },
    {
        "content": "<p>If we move <code>fun_like</code> to the end, then these instances should be safe. <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> what should I tag with <code>out_param</code> in</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span>  <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">has_pointwise_mul</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">has_mul</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">ι</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">has_mul</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_apply</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">ι</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">*</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">f</span> <span class=\"n\">i</span> <span class=\"bp\">*</span> <span class=\"n\">g</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">fun_like.semigroup</span> <span class=\"o\">[</span><span class=\"bp\">Π</span> <span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">semigroup</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">i</span><span class=\"o\">)]</span> <span class=\"o\">[</span><span class=\"n\">fun_like</span> <span class=\"n\">F</span> <span class=\"n\">ι</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pointwise_mul</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">semigroup</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>to make <code>has_pointwise_mul.to_has_mul</code> and <code>fun_like.semigroup</code> safe?</p>",
        "id": 267269022,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641608866
    },
    {
        "content": "<p><code>out_param</code> makes no difference as to whether an instance is safe or not, because <code>out_param</code> is ignored during type class search.  TC instances are unsafe if they cause TC search to enumerate all instances; e.g. the first <code>has_pointwise_mul.to_has_mul</code> instance in this thread creates a subgoal <code>has_mul ?B</code> (starting from the right), and then Lean starts going through all possible ways to get a multiplication operator.  So the last one seems fine in this regard, I would mark <code>ι</code> and <code>α</code> as <code>out_param</code>, just like in <code>fun_like</code>.</p>",
        "id": 267352837,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1641726975
    },
    {
        "content": "<p>Are there any updates on this? It would be useful for what I'm doing in <a href=\"https://github.com/leanprover-community/mathlib/pull/16351\">#16351</a>. cc <span class=\"user-mention\" data-user-id=\"311453\">@Frédéric Dupuis</span> .</p>",
        "id": 297178473,
        "sender_full_name": "Shing Tak Lam",
        "timestamp": 1662363461
    }
]