[
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_topology\">docs#order_topology</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_closed_topology\">docs#order_closed_topology</a>. In case of a partial order (e.g., a product of two linear orders), none of the typeclasses implies the other (and we only have <code>order_closed_topology (α × α)</code> for the product topology). So, we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open_Ioi\">docs#is_open_Ioi</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_open_lt'\">docs#is_open_lt'</a> with different typeclass assumptions. At the same time, there are many properties that are true for an (indexed or not) product of linear orders with order topology. I've recently introduced a few classes like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/compact_Icc_space\">docs#compact_Icc_space</a> to have theorems stated uniformly for all these cases.</p>\n<p>So, I have two questions:</p>\n<ol>\n<li>Are there natural instances for <code>[order_topology α]</code> when <code>α</code> is not a linear order?</li>\n<li>Does anyone know a nice set of axioms that works for (indexed) products of linear orders and implies, e.g., <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact_Icc\">docs#is_compact_Icc</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_at_top_supr\">docs#tendsto_at_top_supr</a>?</li>\n</ol>",
        "id": 262416540,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637647486
    },
    {
        "content": "<p>cc <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 262434590,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1637662078
    },
    {
        "content": "<p>Ahah! I was actually about this no later than yesterday. Haven't come to a conclusion yet.</p>",
        "id": 262438590,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1637664467
    },
    {
        "content": "<p>It seems that I know a typeclass that works for (finite, indexed) products of linear orders (not tested). I don't know whether we can prove many theorems based on this typeclass.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">preorder</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">strong_lt</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"n\">a</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span> <span class=\"bp\">∧</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span> <span class=\"bp\">∧</span> <span class=\"n\">c</span> <span class=\"bp\">≤</span> <span class=\"n\">d</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">IiO</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">strong_lt</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">IOi</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"n\">strong_lt</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">}</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">preorder_topology'</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">topological_space.generate_from</span> <span class=\"o\">(</span><span class=\"n\">range</span> <span class=\"n\">IiO</span> <span class=\"bp\">∪</span> <span class=\"n\">range</span> <span class=\"n\">IOi</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">order_topology'</span> <span class=\"o\">[</span><span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">out</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"bp\">=</span> <span class=\"n\">preorder_topology'</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 266574064,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641069279
    },
    {
        "content": "<p>There are quite a few issues with this definition. E.g., it seems that <code>@strong_lt (order_dual α) _ a b ≠ strong_lt b a</code>.</p>",
        "id": 266574131,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641069376
    },
    {
        "content": "<p>What I like about <code>strong_lt</code> is that lemmas like <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_lub.exists_between\">docs#is_lub.exists_between</a> work with this it.</p>",
        "id": 266574154,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1641069447
    }
]