[
    {
        "content": "<p>What's the best definition of kernel? Are there arguments in both directions?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">ker</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→+</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"err\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">H</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">comap</span> <span class=\"n\">f</span>\n\n<span class=\"n\">def</span> <span class=\"n\">ker&#39;</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">→+</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_subgroup</span> <span class=\"n\">G</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">|</span> <span class=\"n\">f</span> <span class=\"n\">g</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n  <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n  <span class=\"bp\">...</span>\n<span class=\"o\">}</span>\n</pre></div>\n\n\n<p>The difference is that with the second definition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>g</mi><mo>∈</mo><mi>k</mi><mi>e</mi><mi>r</mi><mo stretchy=\"false\">(</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mi>f</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">g\\in ker(f)\\iff f(g)=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7335400000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">⟺</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> is definitional, whereas the other definition expands to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi><mo stretchy=\"false\">(</mo><mi>g</mi><mo stretchy=\"false\">)</mo><mo>∈</mo><mo stretchy=\"false\">{</mo><mn>0</mn><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">f(g)\\in\\{0\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord\">0</span><span class=\"mclose\">}</span></span></span></span> which is defeq to something else</p>",
        "id": 189968634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583583157
    },
    {
        "content": "<p>My gut feeling would say, go for (2).</p>",
        "id": 189968744,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583583378
    },
    {
        "content": "<p>But you'll want a lemma that says that the two definition are equal anyway.</p>",
        "id": 189968746,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1583583403
    },
    {
        "content": "<p>Sure, this is purely a question of which one you want to be the definition and which one you want to be the theorem. But I don't have any real criteria for deciding.</p>",
        "id": 189968753,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583583433
    },
    {
        "content": "<p>Alternatively you could step back to <code>\\bot</code> itself, to fix the definition so that you get the definitional equality you want with the first version</p>",
        "id": 189968800,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583583509
    },
    {
        "content": "<p>\\bot is a subgroup of H so I need to define the carrier set.</p>",
        "id": 189968805,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583583542
    },
    {
        "content": "<p><code>{x | x = 0}</code></p>",
        "id": 189968808,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583583551
    },
    {
        "content": "<p>!</p>",
        "id": 189968809,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583583558
    },
    {
        "content": "<p>If I do it like this then they're probably defeq.</p>",
        "id": 189968810,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583583573
    },
    {
        "content": "<p>:D</p>",
        "id": 189968812,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583583580
    },
    {
        "content": "<p>I  feel like a lot of things would be simpler if this was the definition of <code>singleton 0</code></p>",
        "id": 189968852,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583583632
    },
    {
        "content": "<p>maybe we should remove the definition of <code>singleton</code> from <code>init.core</code>?</p>",
        "id": 189968856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583583672
    },
    {
        "content": "<p>One could imagine that notation could handle this somehow -- <code>{}</code> expands to false and <code>{x}</code> to what you just said and then <code>{a,b}</code> could mean <code>{x | x = a \\or x = b}</code> etc.</p>",
        "id": 189968858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583583706
    },
    {
        "content": "<p>the idea that <code>singleton a = insert a empty</code> in all circumstances is probably a bad idea</p>",
        "id": 189968903,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583583737
    },
    {
        "content": "<p>but the definition is in <code>core</code>, in the very first file</p>",
        "id": 189968904,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583583752
    },
    {
        "content": "<p>we have a typeclass <code>has_insert</code>, so we could have <code>has_singleton</code> as well for the version in core to bind to</p>",
        "id": 189968909,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583583811
    },
    {
        "content": "<p>and then the <code>{a, ..., z}</code> notation expands to <code>insert a (insert b ... (singleton z))</code></p>",
        "id": 189968912,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583583841
    },
    {
        "content": "<p>This would probably break a lot of stuff in a good way i.e. the fix would be \"make it a bit simpler\"</p>",
        "id": 189969004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583583991
    },
    {
        "content": "<p>and <code>mem_singleton</code> would be <code>rfl</code></p>",
        "id": 189969006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583584003
    },
    {
        "content": "<p>it is very often that I am too lazy or golfy to go find the relevant theorem and given <code>a \\in {b}</code> use <code>rcases h with rfl|&lt;&lt;&gt;&gt;</code> to get at the value. This idiom would get simpler</p>",
        "id": 189969051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583584094
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">pp</span><span class=\"bp\">.</span><span class=\"kn\">notation</span> <span class=\"n\">false</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">t</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">s</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">singleton</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- there&#39;s a metavariable in the goal?!</span>\n  <span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">  ⊢ has_mem.mem t (has_insert.insert s (has_emptyc.emptyc ?m_1))</span>\n<span class=\"cm\">  -/</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">tactic failed, result contains meta-variables</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">no goals</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>I was trying to work out what <code>t ∈ {s}</code> was defeq to and I think I broke something</p>",
        "id": 189969331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583584709
    },
    {
        "content": "<p>Notice that both <code>{s} : set α</code> and <code>{s} : finset α</code> would be consistent with your theorem statement. I imagine that if you use <code>theorem T</code> instead of <code>example</code> you will get an error</p>",
        "id": 189969378,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583584835
    },
    {
        "content": "<p>it's because <code>insert</code> has type <code>A -&gt; B -&gt; B</code></p>",
        "id": 189969385,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583584868
    },
    {
        "content": "<p>and mem has type <code>A -&gt; B -&gt; Prop</code></p>",
        "id": 189969395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583584893
    },
    {
        "content": "<p>so nothing there says what <code>B</code> is</p>",
        "id": 189969397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583584902
    },
    {
        "content": "<p>nice catch -- thanks.</p>",
        "id": 189969443,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583584956
    },
    {
        "content": "<p>Just to confirm that <code>{s}</code> currently expands to <code>{b : α | b = s ∨ false}</code> -- I was going to say this in the first post but then I got distracted by the example/theorem thing</p>",
        "id": 189969912,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583585943
    },
    {
        "content": "<p>I can't solve the analogous question for range though. If I use <code>set.univ</code> for top (which is {x | true}) and define <code>range</code> to be <code>map top</code> then <code>mem_range</code> (h is in the range iff there exists g with f(g) = h) isn't <code>rfl</code>, it's </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">true</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"o\">(</span><span class=\"bp\">∃</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p><code>library_search</code> couldn't find this in <code>logic.basic</code>.</p>",
        "id": 189970605,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583587394
    },
    {
        "content": "<p>Indeed, for <code>set.range</code> they just define it directly so mem_range is rfl.</p>",
        "id": 189970706,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583587573
    },
    {
        "content": "<p>Aah, <code>simp</code> does it.</p>",
        "id": 189970828,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1583587899
    },
    {
        "content": "<p>Last time I checked <code>{a, b}</code> expanded to <code>insert b {a}</code>, not <code>insert a {b}</code>. I think, it would be nice to change this but my knowledge of lean notation syntax is not good enough.</p>",
        "id": 190138721,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1583809405
    },
    {
        "content": "<p>This is an easy change to core, although it will cause lots of breakage</p>",
        "id": 190140798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583812929
    },
    {
        "content": "<p>Oh! The notation for <code>{a, ..., z}</code> is actually never declared, it is lean magic</p>",
        "id": 190140816,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583813007
    },
    {
        "content": "<p>so it would require changes to the C++</p>",
        "id": 190140823,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583813023
    },
    {
        "content": "<p>in a way that's a good thing since I'm not sure it's possible to define <code>{} = empty</code> and <code>{a, b, c} = insert a (insert b (singleton c))</code> as proposed in another thread using the lean 3 <code>notation</code> syntax, which is quite limited</p>",
        "id": 190140874,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583813112
    },
    {
        "content": "<p>Actually, it looks like lean already does the case distinction between empty and nonempty cases. Look what happens if I make my own prelude:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">prelude</span>\n\n<span class=\"n\">def</span> <span class=\"n\">has_emptyc</span><span class=\"bp\">.</span><span class=\"n\">emptyc</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">singleton</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"n\">def</span> <span class=\"n\">has_insert</span><span class=\"bp\">.</span><span class=\"n\">insert</span> <span class=\"o\">{</span><span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">{}</span>  <span class=\"c1\">-- has_emptyc.emptyc ?M_1 : ?M_1</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"c1\">-- singleton a : Type</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">}</span> <span class=\"c1\">-- singleton a : Type</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">}</span> <span class=\"c1\">-- has_insert.insert b (singleton a) : singleton a</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">{</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">c</span><span class=\"o\">}</span> <span class=\"c1\">-- has_insert.insert c (has_insert.insert b (singleton a)) : Type</span>\n</pre></div>\n\n\n<p>The built in notation parser doesn't actually know what the functions <code>has_insert.insert</code> and <code>singleton</code> are, it just writes these expressions down and hands them off to the elaborator. So really all that is necessary is to remove the definition of <code>singleton</code> and replace it with a typeclass to enable the <code>{0} = {x | x = 0}</code> defeq. However as you can see the order is still flipped; the C++ has to be changed to fix this</p>",
        "id": 190141114,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583813620
    },
    {
        "content": "<p>(If you are wondering why <code>{a, ..., z}</code> is baked into lean like this, while <code>[a, ... z]</code> is not, it's because lean has to disambiguate the various notations that start with <code>{</code>, e.g. <code>{x // p x}</code>, <code>{x | p x}</code> and <code>{x, y}</code>, and this requires more lookahead than the normal notation parser can tolerate.)</p>",
        "id": 190141180,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1583813744
    }
]