[
    {
        "content": "<p>I'm looking at <a href=\"https://leanprover-community.github.io/mathlib-overview.html\">https://leanprover-community.github.io/mathlib-overview.html</a> and I don't see anything for simplicial complex or delta complex as seen in Hatcher's Algebraic Topology text. </p>\n<p>I expect formalizing this could get tricky with complex -vs- geometric realization as a space. Has the community thought about this yet? (Someday it would be really cool to formalize some geometric group theory / cube complex / RAAG work)</p>",
        "id": 240717418,
        "sender_full_name": "Tony",
        "timestamp": 1622316700
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> and I have been doing simplicial complexes for the combinatorial side of things (Sperner's lemma). Nothing on the algebraic side, really. All of our work is on the branch <code>sperner-again</code> of mathlib.</p>",
        "id": 240717624,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1622316984
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.simplicial_object\">docs#category_theory.simplicial_object</a></p>",
        "id": 240717638,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622317054
    },
    {
        "content": "<p>Still no geometric realizations of simplicial sets, as far as I remember.</p>",
        "id": 240717653,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622317082
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/tree/sset\">branch#sset</a> had geometric realizations, but not yet the adjunction.</p>",
        "id": 240717708,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622317133
    },
    {
        "content": "<p>But I fear that it's not compatible with mathlibs current <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.simplicial_object\">docs#category_theory.simplicial_object</a>. Otoh, it shouldn't be too hard to port.</p>",
        "id": 240717713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622317161
    },
    {
        "content": "<p>(I always forget that simplicial objects are in the category theory namespace...)</p>",
        "id": 240717723,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622317198
    },
    {
        "content": "<p>Well, we can't PR to your brain to fix that... so maybe we can change mathlib?</p>",
        "id": 240717838,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622317346
    },
    {
        "content": "<p>nah, I think it deserves to be in that namespace.</p>",
        "id": 240717858,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622317419
    },
    {
        "content": "<p>Maybe the simplicial_object files should move to the category_theory folder?</p>",
        "id": 240717867,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1622317441
    },
    {
        "content": "<p>My guess is dealing with all the attaching maps could get rough. Here's some concrete results that would use the material: <a href=\"http://www.math.utah.edu/pcmi12/lecture_notes/sageev.pdf\">http://www.math.utah.edu/pcmi12/lecture_notes/sageev.pdf</a></p>\n<p>Simplicial looks like the place to start thanks. I'd be happy with just a formalized defn of delta-complex or CW-complex.</p>",
        "id": 240717921,
        "sender_full_name": "Tony",
        "timestamp": 1622317496
    },
    {
        "content": "<p>There has been discussion about how to formalize CW-complexes on this zulip. You might want to search the history.</p>",
        "id": 240718017,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1622317680
    },
    {
        "content": "<p>Maybe something more formal would be a reasonable goal:<br>\nEuclidean Neighborhood Retracts<br>\nHomotopy Extension Property<br>\netc.</p>",
        "id": 240718061,
        "sender_full_name": "Tony",
        "timestamp": 1622317702
    },
    {
        "content": "<p>I was looking for cell, seems people have talked about it!</p>",
        "id": 240718095,
        "sender_full_name": "Tony",
        "timestamp": 1622317766
    },
    {
        "content": "<p>Something like this from Lee maybe:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Theorem</span> <span class=\"mi\">5</span><span class=\"bp\">.</span><span class=\"mi\">20</span> <span class=\"o\">(</span><span class=\"n\">CW</span> <span class=\"n\">Construction</span> <span class=\"n\">Theorem</span><span class=\"o\">)</span><span class=\"bp\">.</span> <span class=\"n\">Suppose</span> <span class=\"n\">X</span> <span class=\"mi\">0</span> <span class=\"bp\">Â</span> <span class=\"n\">X</span> <span class=\"mi\">1</span> <span class=\"bp\">Â</span> <span class=\"bp\"></span> <span class=\"bp\">Â</span> <span class=\"n\">X</span> <span class=\"n\">n1</span> <span class=\"bp\">Â</span> <span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"bp\">Â</span> <span class=\"bp\"></span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">sequence</span> <span class=\"n\">of</span> <span class=\"n\">topological</span> <span class=\"n\">spaces</span> <span class=\"n\">satisfying</span> <span class=\"n\">the</span> <span class=\"n\">following</span> <span class=\"n\">conditions</span><span class=\"o\">:</span>\n\n<span class=\"n\">X0</span>\n\n<span class=\"o\">(</span><span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">nonempty</span> <span class=\"n\">discrete</span> <span class=\"n\">space.</span> <span class=\"n\">Topological</span> <span class=\"n\">Properties</span> <span class=\"n\">of</span> <span class=\"n\">CW</span> <span class=\"n\">Complexes</span>\n\n<span class=\"mi\">139</span>\n\n<span class=\"o\">(</span><span class=\"n\">ii</span><span class=\"o\">)</span> <span class=\"n\">For</span> <span class=\"n\">each</span> <span class=\"n\">n</span> <span class=\"bp\"></span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"n\">is</span> <span class=\"n\">obtained</span> <span class=\"k\">from</span> <span class=\"n\">X</span> <span class=\"n\">n1</span> <span class=\"kd\">by</span> <span class=\"n\">attaching</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">possibly</span> <span class=\"n\">empty</span><span class=\"o\">)</span> <span class=\"n\">collection</span> <span class=\"n\">of</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">cells.</span>\n\n<span class=\"n\">S</span> <span class=\"n\">Then</span> <span class=\"n\">X</span> <span class=\"n\">D</span> <span class=\"n\">n</span> <span class=\"n\">X</span> <span class=\"n\">n</span> <span class=\"n\">has</span> <span class=\"n\">a</span> <span class=\"n\">unique</span> <span class=\"n\">topology</span> <span class=\"n\">coherent</span> <span class=\"k\">with</span> <span class=\"n\">the</span> <span class=\"n\">family</span> <span class=\"n\">fX</span> <span class=\"n\">n</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">and</span> <span class=\"n\">a</span> <span class=\"n\">unique</span> <span class=\"n\">cell</span> <span class=\"n\">decomposition</span> <span class=\"n\">making</span> <span class=\"n\">it</span> <span class=\"n\">into</span> <span class=\"n\">a</span> <span class=\"n\">CW</span> <span class=\"n\">complex</span> <span class=\"n\">whose</span> <span class=\"n\">n</span><span class=\"bp\">-</span><span class=\"n\">skeleton</span> <span class=\"n\">is</span> <span class=\"n\">Xn</span>  <span class=\"n\">for</span> <span class=\"n\">each</span> <span class=\"n\">n.</span>\n</code></pre></div>",
        "id": 241675376,
        "sender_full_name": "Tony",
        "timestamp": 1622959503
    }
]