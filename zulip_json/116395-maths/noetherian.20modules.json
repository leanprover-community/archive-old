[
    {
        "content": "<p>What are the next steps for noetherian modules?<br>\n1. We want to prove that if <code>M</code> is noetherian, then so are all its submodules and quotients.<br>\n2. This suggests that we might quickly want <code>is_noetherian</code> to be a class.<br>\n3. To prove (1) we want to show that a linear map <code>M -&gt; N</code> induces an order preserving map <code>submodule R M -&gt; submodule R N</code>.</p>",
        "id": 133118514,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535715173
    },
    {
        "content": "<p>The map induced map in (3) is injective if <code>M -&gt; N</code> is an inclusion or quotient map.</p>",
        "id": 133118538,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535715219
    },
    {
        "content": "<p>Is this induced map an example of (one side of) a Galois connection? And is it useful to know this?</p>",
        "id": 133118680,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535715437
    },
    {
        "content": "<p>There are actually three maps forming two Galois connections I think</p>",
        "id": 133118845,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535715698
    },
    {
        "content": "<p>Taking image, taking inverse image, and ...?</p>",
        "id": 133118894,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535715744
    },
    {
        "content": "<p>Whatever the right adjoint to the inverse image is</p>",
        "id": 133118898,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535715763
    },
    {
        "content": "<p>The biggest submodule whose inverse image is contained in the original one</p>",
        "id": 133118913,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535715811
    },
    {
        "content": "<p>I guess it's not useful</p>",
        "id": 133118914,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535715819
    },
    {
        "content": "<p>Right, so you have <code>N' \\sub N</code>, and then you'dd take the image of <code>f^{-1} N' \\cap M</code>?</p>",
        "id": 133118961,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535715900
    },
    {
        "content": "<p>Scratch that, that's nonsense</p>",
        "id": 133118970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535715919
    },
    {
        "content": "<p>Start with a submodule of M</p>",
        "id": 133118972,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535715931
    },
    {
        "content": "<p>Right,</p>",
        "id": 133118973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535715935
    },
    {
        "content": "<p>Call it <code>M'</code>, and put <code>\\cap M'</code> in my formula</p>",
        "id": 133118985,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535715952
    },
    {
        "content": "<p>It's those n whose inverse image is a subset of M'. I think</p>",
        "id": 133119032,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535716004
    },
    {
        "content": "<p>You have it for just a map of sets also.</p>",
        "id": 133119101,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535716107
    },
    {
        "content": "<p>It has a forall where the direct image has an exists</p>",
        "id": 133119112,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535716129
    },
    {
        "content": "<p>Yeah, sets and filters also have this strange right adjoint to preimage. I don't know if this is useful anywhere...</p>",
        "id": 133119129,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1535716181
    },
    {
        "content": "<p>Actually, now I think it doesn't exist for submodules</p>",
        "id": 133119132,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535716186
    },
    {
        "content": "<p>Because the inverse image of zero might not be zero</p>",
        "id": 133119136,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535716201
    },
    {
        "content": "<p>So the inverse image map doesn't preserve the empty sup</p>",
        "id": 133119191,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535716228
    },
    {
        "content": "<p>So it can't have a right adjoint</p>",
        "id": 133119199,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535716240
    },
    {
        "content": "<p>So ignore everything I said.</p>",
        "id": 133119239,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535716314
    },
    {
        "content": "<p>Direct and inverse image of submodules should be a Galois connection though</p>",
        "id": 133119288,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535716336
    },
    {
        "content": "<p>Right, and I guess this is a general fact about subobjects in algebraic concrete categories...</p>",
        "id": 133119325,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535716390
    },
    {
        "content": "<p>So it would be cool if we could either deduce it from such a general fact, or have a subtype_galois_connection tactic (-;</p>",
        "id": 133119344,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535716421
    },
    {
        "content": "<p>I guess we can start with the complete lattice of subobjects tactic and the span Galois insertion tactic</p>",
        "id": 133119826,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535717015
    },
    {
        "content": "<p>A <code>galois_connection</code> tactic would be nice, but I don't see how it should work. To prove that something is free (e.g. <code>span</code>, <code>generator</code> etc) is not for free.</p>",
        "id": 133119930,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1535717130
    },
    {
        "content": "<p>No, I didn't mean that one. I meant the direct/inverse image connection.</p>",
        "id": 133119980,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535717167
    },
    {
        "content": "<p>That one is usually just a follow-your-nose result.</p>",
        "id": 133119990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535717184
    },
    {
        "content": "<p>You can take the intersection of all the subobjects which contain the given set. Basically get the complete lattice structure from the intersection instead</p>",
        "id": 133120085,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535717304
    },
    {
        "content": "<p>But then in a particular case, you will probably want a more explicit description of the generated subobject.</p>",
        "id": 133120098,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535717332
    },
    {
        "content": "<p>Mario would say that we shouldn't automate this, but just go for it (-;</p>",
        "id": 133120107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535717347
    },
    {
        "content": "<p>Does the subobject instance tactic work for R-modules? Does it understand that the structure is <code>module R</code>?</p>",
        "id": 133120164,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535717408
    },
    {
        "content": "<p>this instance is already in mathlib</p>",
        "id": 133120248,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535717528
    },
    {
        "content": "<p>I didn't test the tactic, because that is not yet in mathlib</p>",
        "id": 133120255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535717538
    },
    {
        "content": "<p><code>linear_algebra.subtype_module</code></p>",
        "id": 133120260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535717566
    },
    {
        "content": "<blockquote>\n<p>A <code>galois_connection</code> tactic would be nice, but I don't see how it should work. To prove that something is free (e.g. <code>span</code>, <code>generator</code> etc) is not for free.</p>\n</blockquote>\n<p><code>span</code> is not free when presented in a \"constructive\" way, i.e. linear combinations of elements in the set, but it is free given the Moore collection axioms. A Moore collection is a set of sets that is closed under arbitrary intersection (let's call these things closed sets). This enables the definition of a closure operator that is the span (i.e. the intersection of all closed sets containing S), and then there is some work to show that this operator has a constructive interpretation using an inductive family or what have you. Any algebraically presented subobject family like <code>is_subgroup</code> or <code>is_submodule</code>, where the assumptions all say \"if these things are in the subgroup then these other things are in the subgroup\", is a Moore collection, and there is a formulaic proof of such.</p>",
        "id": 133120467,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535717927
    },
    {
        "content": "<p>This approach seems like a way to automate this, but it does not go via the galois connection, since that approach brings in the details of the constructive definition of span (here I mean constructive in the mathematician's sense) which are not as uniform</p>",
        "id": 133120573,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535718066
    },
    {
        "content": "<p>Right so there are three definitions of, say, the submodule of M generated by a set S.</p>",
        "id": 133120680,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535718203
    },
    {
        "content": "<p>1 is the intersection of the submodules containing S.</p>",
        "id": 133120688,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535718224
    },
    {
        "content": "<p>If a Moore collection is generated by the closure with respect to a (possibly infinite) family of finite arity operators, then it is an algebraic closure system (ACS), which has still more properties for free. Almost all of the algebraic sub-things are ACSs</p>",
        "id": 133120743,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535718271
    },
    {
        "content": "<p>2 is the set of elements which can be built up from S from the operations of a module, i.e., we define an inductive type of trees which are expressions in the language of R-modules.</p>",
        "id": 133120754,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535718285
    },
    {
        "content": "<p>3 is the one in terms of linear combinations.</p>",
        "id": 133120770,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535718312
    },
    {
        "content": "<p>(2) seems like an inductive definition that is amenable to automation in the same sense as I have suggested</p>",
        "id": 133120779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535718341
    },
    {
        "content": "<p>1 and 2 are automatable. 3 is not, you have to think of something which is a good \"normal form\" (roughly) and then prove a special theorem.</p>",
        "id": 133120790,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535718360
    },
    {
        "content": "<p>I guess it probably doesn't matter much which definition we choose or whether the definitions are consistent between different kinds of structures</p>",
        "id": 133121139,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535718833
    },
    {
        "content": "<p>If we want a one-line setup of the collection, the complete lattice, the span operator and the galois connection, it would be best to take one of the uniform versions as the definition, and leave the nonuniform version as a theorem to be proven separately</p>",
        "id": 133121298,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535719020
    },
    {
        "content": "<p>I should look into this Moore system stuff. It sounds related to locally presentable categories (a locally finitely presentable category is the category of models of a finitary essentially algebraic theory) and there are some theorems about subobjects in them, though usually I don't care so much about those theorems.</p>",
        "id": 133121315,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535719047
    },
    {
        "content": "<p>I learned about it first through metamath, see <a href=\"http://us.metamath.org/mpeuni/df-mre.html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/df-mre.html\">http://us.metamath.org/mpeuni/df-mre.html</a> and <a href=\"http://us.metamath.org/mpeuni/df-acs.html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/df-acs.html\">http://us.metamath.org/mpeuni/df-acs.html</a> which have some links to references. Wikipedia doesn't seem to have anything on it</p>",
        "id": 133121395,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535719125
    },
    {
        "content": "<p>Yeah, I should have looked into them the first time you mentioned them. I like the Examples section in <a href=\"https://ncatlab.org/nlab/show/Moore+closure\" target=\"_blank\" title=\"https://ncatlab.org/nlab/show/Moore+closure\">https://ncatlab.org/nlab/show/Moore+closure</a> :</p>\n<blockquote>\n<p>What are examples? Better to ask what isn't an example!</p>\n</blockquote>",
        "id": 133121603,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1535719376
    },
    {
        "content": "<p>I see, so it looks a lot more general than subobjects in an algebraic theory.</p>",
        "id": 133121936,
        "sender_full_name": "Reid Barton",
        "timestamp": 1535719788
    },
    {
        "content": "<p>oh, looks like the WP reference is <a href=\"https://en.wikipedia.org/wiki/Closure_operator\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Closure_operator\">https://en.wikipedia.org/wiki/Closure_operator</a></p>",
        "id": 133122067,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535719923
    },
    {
        "content": "<p>\"finitary closure operator\" in that article corresponds to what I called an ACS</p>",
        "id": 133122126,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535719994
    },
    {
        "content": "<p>Does anyone know why the noetherian branch isn't compiling?</p>",
        "id": 133170533,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535793755
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>, <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, what are the prospects of getting tensor products of commutative rings into mathlib?</p>",
        "id": 133170579,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535793852
    },
    {
        "content": "<p>I wrote <a href=\"https://github.com/kckennylau/Lean/blob/master/constructive_tensor_product.lean\" target=\"_blank\" title=\"https://github.com/kckennylau/Lean/blob/master/constructive_tensor_product.lean\">half the file</a> a month ago</p>",
        "id": 133170588,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535793919
    },
    {
        "content": "<p><code>is_add_group_hom</code> is now in mathlib</p>",
        "id": 133170789,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535794408
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover/mathlib/commit/afd1c063638d611fda65db7499ccbd7257c90870\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/afd1c063638d611fda65db7499ccbd7257c90870\">https://github.com/leanprover/mathlib/commit/afd1c063638d611fda65db7499ccbd7257c90870</a></p>",
        "id": 133170840,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535794529
    },
    {
        "content": "<p>What is the current state of quotient groups by the way?</p>",
        "id": 133170878,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535794564
    },
    {
        "content": "<p>Kevin's stuff got merged. There's about 100 lines of the basic facts.</p>",
        "id": 133171270,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1535795469
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> can you point me to it?</p>",
        "id": 133171274,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535795491
    },
    {
        "content": "<p>I was thinking of the <code>left_cosets</code> vs <code>group_quotient</code> issue</p>",
        "id": 133171276,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535795502
    },
    {
        "content": "<p>I think we have two competing versions</p>",
        "id": 133171277,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535795512
    },
    {
        "content": "<p>Everything's <code>quotient_group.quotient</code> now.</p>",
        "id": 133171317,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1535795524
    },
    {
        "content": "<p>left_cosets disappeared?</p>",
        "id": 133171323,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535795541
    },
    {
        "content": "<p>Yes.</p>",
        "id": 133171326,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1535795545
    },
    {
        "content": "<p>That's good news, but again something to be changed in Kenny's tensor product file</p>",
        "id": 133171328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535795566
    },
    {
        "content": "<p>but <code>quotient_group</code> includes quotient by non normal subgroups</p>",
        "id": 133171330,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1535795574
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> It's in <code>group_theory/quotient_group</code></p>",
        "id": 133171337,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1535795638
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>, oh, oops, I thought you were talking about tensor products of rings. :-)</p>",
        "id": 133171396,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535795719
    },
    {
        "content": "<p>couldn't we call this <code>group.quotient</code> instead of <code>quotient_group</code>? The later really looks like the quotient is a group</p>",
        "id": 133171400,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535795724
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, are you going to PR that stuff on tensor products? I'd like to be able to use it!</p>",
        "id": 133171401,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1535795752
    },
    {
        "content": "<p>I think <code>group.quotient</code> is a better name.</p>",
        "id": 133171490,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1535795929
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, are you going to PR that stuff on tensor products? I'd like to be able to use it!</p>\n</blockquote>\n<p>give me some time</p>",
        "id": 133176767,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535806325
    },
    {
        "content": "<p>Tensor product PR: <a href=\"https://github.com/leanprover/mathlib/pull/303\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/pull/303\">https://github.com/leanprover/mathlib/pull/303</a></p>",
        "id": 133213796,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535891296
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> further feature request?</p>",
        "id": 133213797,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535891306
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> you might be interested</p>",
        "id": 133213799,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535891323
    },
    {
        "content": "<p>thanks Kenny!</p>",
        "id": 133214450,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535892813
    },
    {
        "content": "<p>Kenny's tensor product is merged! I'm really super excited by the idea of mathlib taking advantage of Kenny's proving power!</p>",
        "id": 133223691,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535912180
    },
    {
        "content": "<p>rofl I was reviewing it</p>",
        "id": 133223768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535912309
    },
    {
        "content": "<p>it's alright Kevin, I may still have things to add there anyway</p>",
        "id": 133223774,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535912342
    },
    {
        "content": "<p>I may prove the dimension theorem, and then I would prove that the dimension of tensor is the product of the dimension</p>",
        "id": 133223784,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535912363
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> was I too fast merging it? Any suggestions?</p>",
        "id": 133223945,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1535912697
    },
    {
        "content": "<p>nothing serious. I'll finish my review. I am trying to get into the habit of reviewing mathlib PRs where the mathematics relates to the perfectoid project.</p>",
        "id": 133223956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535912738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> just to let you know I am still working on the Noetherian branch of  community mathlib. I have a proof that subs and quotients of Noeth are Noeth but it's currently broken as I fiddle with it to try and make things more general and reasonable. I'm sure there will still be lots of work to do when I finally make the PR, hopefully tomorrow. Admin got the better of me today, that and the fact that I kept having little insights about how to do things a little better than they were done before.</p>",
        "id": 133338778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536097373
    },
    {
        "content": "<p>OK so I pushed the proof that a sub of a Noetherian module is Noetherian to community-mathlib, the Noetherian branch. I spent some time proving order embeddings which I could have probably avoided. I'd appreciate any feedback on the push. Am I supposed to open a PR to mathlib? I have littered my PR with comments, which of course will have to go in the end, but they're just to flag things I wasn't sure about or to explain what I was trying to do.</p>\n<p>I also have a proof that quotients of Noetherian modules are Noetherian, but I was waiting for Chris' quotient module PR to be accepted -- I see that it was accepted an hour ago so I'll work on quotient modules later.</p>",
        "id": 133368044,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536145128
    }
]