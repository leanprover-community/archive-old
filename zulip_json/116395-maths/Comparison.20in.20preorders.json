[
    {
        "content": "<p>So right now, a lot of my PRs are blocked due to design decisions that need to be made. Basically, I wanted to make an analog to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cmp\">docs#cmp</a> for preorders, to be used to golf many results on games. In a preorder, any two elements compare as either <code>&lt;</code>, or <code>&gt;</code>, or are equivalent up to antisymmetry (<code>x ≤ y</code> and <code>y ≤ x</code>), or are incomparable. I wanted to express these last two as <code>antisymm_rel (≤) x y</code> and <code>incomp_rel (≤) x y</code>, the latter being a new predicate defined as <code>incomp_rel r x y := ¬ r x y ∧ ¬ r y x</code>.</p>\n<p>I was told that having <code>incomp_rel</code> on its own wouldn't make much sense, as we could write <code>incomp_rel (≤) x y</code> as <code>antisymm_rel (≤)ᶜ x y</code> (after a refactor moving the <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pi.has_compl\">docs#pi.has_compl</a> instance earlier in the import chain). I don't like this, since thinking about incomparable elements as \"equivalent up to antisymmetry by the not less equal relation\" is really awkward even if it makes mathematical sense. <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> suggested that we could specialize <code>antisymm_rel</code> to <code>≤</code> and rename it to <code>order.indistinguishable</code>, and have <code>incomp_rel</code> as <code>order.incomparable</code>. After all, we currently only use <code>antisymm_rel</code> on the <code>≤</code> relation coming from a preorder. This was then opposed by <span class=\"user-mention\" data-user-id=\"246273\">@Bhavik Mehta</span> who mentioned we might need the relation in further generality later down the line.</p>\n<p>In short, there's three possibilities:</p>\n<ul>\n<li>make a new <code>incomp_rel</code> together with <code>antisymm_rel</code>.</li>\n<li>use <code>antisymm_rel (≤)ᶜ</code> to spell out incomparability.</li>\n<li>specialize <code>antisymm_rel</code> to <code>≤</code>, rename to <code>order.indistinguishable</code>, make <code>order.incomparable</code> to match.</li>\n</ul>\n<p>Not sure if a vote would be best here, but I'd like at least some further discussion.</p>",
        "id": 290419703,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658430153
    },
    {
        "content": "<p>Incomparability is a really basic predicate on preorders and it's very relevant when discussing antichains, so I'd prefer if we had a specialized spelling for it. I also think there's little point in having <code>antisymm_rel</code> for general relations, since it's only relevant on preorders, and I doubt we have many important preorders that aren't part of a <code>preorder</code> instance.</p>",
        "id": 290420596,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658430591
    },
    {
        "content": "<p>And regarding indistinguishability, would <code>order.indistinguishable</code>coincide with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topology.inseparable\">docs#topology.inseparable</a> in the order topology? That would be a nice result to have.</p>",
        "id": 290421735,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658431150
    },
    {
        "content": "<p>To be clear, my opposition to the proposal was because it specialises <a href=\"https://leanprover-community.github.io/mathlib_docs/find/antisymm_rel\">docs#antisymm_rel</a> away from a general relation and insists on a preorder which is strictly less general with no benefit that I'm aware of. As a very basic example of where this construction shows up outside of preorders - it's one of the ways of constructing a graph from directed graph \"by forgetting direction\". I'm more than happy to rename, but I don't think the specialisation is a good idea</p>",
        "id": 290422127,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1658431350
    },
    {
        "content": "<p>Ah, you're right about that</p>",
        "id": 290422176,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658431382
    },
    {
        "content": "<p>There goes approach 3 then</p>",
        "id": 290422311,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658431443
    },
    {
        "content": "<p>Then my support goes to approach 1</p>",
        "id": 290422577,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658431582
    },
    {
        "content": "<p>We could define <code>incomp_rel</code> in terms of <code>antisymm_rel</code> and port the appropriate API over via def-eqs</p>",
        "id": 290422693,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658431642
    },
    {
        "content": "<p>That way we get the benefits of a clear way of writing incomparability while still minimizing API duplication</p>",
        "id": 290422809,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658431691
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/116395-maths/topic/Comparison.20in.20preorders/near/290422127\">said</a>:</p>\n<blockquote>\n<p>As a very basic example of where this construction shows up outside of preorders - it's one of the ways of constructing a graph from directed graph \"by forgetting direction\". </p>\n</blockquote>\n<p>Wait, this is actually wrong. The antisymmetrization of a directed graph gives you an undirected graph where edges that exist in one direction but not the other get removed. Which is not quite the usual construction of an undirected graph from a directed one.</p>",
        "id": 290424987,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658432865
    },
    {
        "content": "<p>Still, I do agree with your argument. We don't really benefit by specialization.</p>",
        "id": 290425139,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658432937
    },
    {
        "content": "<p>I wonder if we could maybe have notation to at least make the <code>≤</code> case easier to write down. We could use <code>x ⋚ y</code> for <code>antisymm_rel (≤) x y</code>, but unfortunately Unicode doesn't seem to have a symbol for the negation.</p>",
        "id": 290425782,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658433293
    },
    {
        "content": "<p>We could maybe borrow <code>∥</code> from game theory, and put it in a locale so that the geometers don't get mad at us</p>",
        "id": 290425859,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658433355
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459227\">Violeta Hernández</span> <a href=\"#narrow/stream/116395-maths/topic/Comparison.20in.20preorders/near/290424987\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"246273\">Bhavik Mehta</span> <a href=\"#narrow/stream/116395-maths/topic/Comparison.20in.20preorders/near/290422127\">said</a>:</p>\n<blockquote>\n<p>As a very basic example of where this construction shows up outside of preorders - it's one of the ways of constructing a graph from directed graph \"by forgetting direction\". </p>\n</blockquote>\n<p>Wait, this is actually wrong. The antisymmetrization of a directed graph gives you an undirected graph where edges that exist in one direction but not the other get removed. Which is not quite the usual construction of an undirected graph from a directed one.</p>\n</blockquote>\n<p>Oops, you're right! But I think it's still a reasonably standard construction :)</p>",
        "id": 290430638,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1658435735
    },
    {
        "content": "<p>Some constructions certainly needs to be specialized to preorders. When it's not a preorder, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/antisymm_rel.setoid\">docs#antisymm_rel.setoid</a> isn't a setoid. To get the strong connected components (a standard construction), you take the transitive closure (actually, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/relation.refl_trans_gen\">docs#relation.refl_trans_gen</a>) so it becomes a preorder, and then take the antisymm_rel.</p>",
        "id": 290459133,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658459012
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/116395-maths/topic/Comparison.20in.20preorders/near/290459133\">said</a>:</p>\n<blockquote>\n<p>Some constructions certainly needs to be specialized to preorders. When it's not a preorder, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/antisymm_rel.setoid\">docs#antisymm_rel.setoid</a> isn't a setoid. To get the strong connected components (a standard construction), you take the transitive closure (actually, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/relation.refl_trans_gen\">docs#relation.refl_trans_gen</a>) so it becomes a preorder, and then take the antisymm_rel.</p>\n</blockquote>\n<p>Agreed, but I don't think this means that <code>antisymm_rel</code> itself needs to be specialized</p>",
        "id": 290527255,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1658504323
    },
    {
        "content": "<p>All that I'm missing is a verdict on <code>incomp_rel</code>. I opened <a href=\"https://github.com/leanprover-community/mathlib/pull/15602\">#15602</a>, which obsoletes the problem of <code>ᶜ</code> not always being available. But I still think that <code>antisymm_rel (≤)ᶜ</code> is a really weird spelling for incomparability, particularly if we work under the mental model where <code>antisymm_rel</code> is almost always meant to be used on preorders.</p>",
        "id": 290529000,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658505038
    },
    {
        "content": "<p>Well, I'll open the <code>incomp_rel</code> PR again and we can discuss it there</p>",
        "id": 290619705,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658590848
    },
    {
        "content": "<p>I'm just now realizing</p>",
        "id": 290692971,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658686516
    },
    {
        "content": "<p>If I were to introduce notation for <code>incomp_rel (≤)</code>, then it would be natural to just use <code>incomp</code> to name lemmas using this, instead of <code>incomp_rel</code></p>",
        "id": 290693030,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658686568
    },
    {
        "content": "<p>Or maybe <code>incomp_le</code></p>",
        "id": 290693035,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658686582
    },
    {
        "content": "<p>But what about <code>antisymm_rel (≤)</code>? Using <code>antisymm</code> or <code>antisymm_le</code> would both be misleading</p>",
        "id": 290693042,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658686606
    },
    {
        "content": "<p>Maybe we should rename <code>antisymm_rel</code> into <code>indist_rel</code> so that we can just use <code>indist</code>in theorem names?</p>",
        "id": 290693107,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658686685
    },
    {
        "content": "<p>An alternative would be to use <code>equiv</code> as in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.equiv\">docs#pgame.equiv</a>, but I'd rather not since that word is quite overloaded</p>",
        "id": 290693116,
        "sender_full_name": "Violeta Hernández",
        "timestamp": 1658686712
    }
]