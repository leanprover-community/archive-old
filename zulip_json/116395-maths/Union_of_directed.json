[
    {
        "content": "<p>There are some <code>Union_of_directed</code> lemmas in <code>deprecated</code>. The union of a bunch of subgroups of a group typically is not a subgroup, because if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span> is in <code>H</code> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> is in <code>K</code> then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">hk</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> might be in neither. The fix is to consider directed unions instead, i.e. unions over collections of subgroups such that for all H and K, there exists J with H&lt;=J and K&lt;=J. </p>\n<p>So <code>deprecated/submonoid</code> has <code>is_add_submonoid_Union_of_directed</code>, and the same story for subgroups. There is <code>is_subfield_Union_of_directed</code> in <code>subfield.lean</code> but this will be deprecated one day, and a similar story for <code>is_subring_Union_of_directed</code> in <code>ring_theory.subring</code>.  In particular most of the usages of this concept are on the way out. The only other time <code>Union_of_directed</code> shows up in mathlib is in <code>linear_algebra.basis</code> where it's proved for linear independence. </p>\n<p>We're on the home straight for bundling subrings, but <code>is_subring_Union_of_directed</code> is not there yet because it relies on stuff which isn't there. Should all these lemmas be ported to the bundled situation (i.e. should we have this lemma for groups?)</p>\n<p>Example:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">subring_Union_of_directed</span> <span class=\"o\">{</span><span class=\"n\">ι</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">hι</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">ι</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">ι</span> <span class=\"bp\">→</span> <span class=\"n\">subring</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">directed</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">i</span> <span class=\"n\">j</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span> <span class=\"n\">k</span> <span class=\"bp\">∧</span> <span class=\"n\">s</span> <span class=\"n\">j</span> <span class=\"bp\">≤</span> <span class=\"n\">s</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">subring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"err\">⋃</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">s</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n<span class=\"bp\">...</span>\n</code></pre></div>\n\n\n<p>The alternative is to express this stuff using Sup, i.e. that the canonical map from the lattice of subrings to the lattice of subsets preserves directed Sups. But I'm not even sure we have a way to express this in mathlib. Do we have morphisms of partial orders and predicates saying that they preserve various lattice structures? Filtered Sup is a thing, I am seeing filtered colimits more and more in mathematics nowadays.</p>",
        "id": 206679003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597228352
    },
    {
        "content": "<p>I think I will do this after refactoring <code>algebra.direct_limit</code>, which will happen after <a href=\"https://github.com/leanprover-community/mathlib/issues/3733\">#3733</a> is merged</p>",
        "id": 206679980,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1597229199
    },
    {
        "content": "<p>OK then I'll leave <code>bundled_subring.lean</code> with no <code>Union_of_directed</code> for now.</p>",
        "id": 206680726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597229849
    },
    {
        "content": "<p>aah, several hundred lines later I have run into <code>mem_supr_of_directed</code></p>",
        "id": 206686294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1597234782
    },
    {
        "content": "<p>And AFAIR <code>mem_Sup_of_directed</code></p>",
        "id": 206701126,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597242470
    },
    {
        "content": "<p>The first version of bundled <code>submonoid</code>s had <code>Sup_of_directed</code>. I later converted this to <code>mem_Sup_of_directed</code> because I think that this is a better API for bundled objects.</p>",
        "id": 206749529,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1597265365
    }
]