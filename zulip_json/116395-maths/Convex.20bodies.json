[
    {
        "content": "<p>In preparation for more convex geometry / Brunn-Minkowski stuff, I'd like to contribute convex bodies to mathlib.<br>\nI think a sensible way would be to first introduce a <code>is_convex_body</code> predicate, checking whether a set is convex, compact, and nonempty, and then to define a subtype <code>convex_body V</code> containing convex bodies in some real vector space <code>V</code>.<br>\nThen I'd love to spend a <code>module nnreal (convex_body V)</code> instance.</p>\n<p>Does my plan sound about right?</p>\n<p>One thing I'm still unsure about are the assumptions. My experience with convex geometry is about finite-dimensional real vector spaces but I will try to generalize as much as possible.</p>",
        "id": 295762135,
        "sender_full_name": "Paul Reichert",
        "timestamp": 1661725835
    },
    {
        "content": "<p>Note. You will want to use <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_like\">docs#set_like</a>. A typical example of the design is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.closeds\">docs#topological_space.closeds</a>.</p>",
        "id": 295762328,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661726077
    },
    {
        "content": "<p>I doubt we need <code>is_convex_body</code>, because we tend to separate assumptions (this is yet another effect of currying). But <code>convex_body</code> sounds good, although I should check whether it's the mathematically correct notion here.</p>",
        "id": 295762464,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661726254
    },
    {
        "content": "<p>Also, let me tell you about <a href=\"https://tqft.net/mathlib/data/set/pointwise\">file#data/set/pointwise</a> if you haven't seen it already.</p>",
        "id": 295762521,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661726301
    },
    {
        "content": "<p>Regarding the correct definition, there seems to be some inconsistency in the literature whether a convex body has to have a nonempty interior, i.e. has to be full-dimensional. Wikipedia says that it has to, Rolf Schneider's \"Convex Bodies: The Brunn-Minkowski Theory\" does not.<br>\nMy personal opinion is that convex bodies should not need to have a nonempty interior. Lots of constructions do not require this assumption, for example above-mentioned <code>module nnreal</code> instance. Also, faces of convex bodies are convex bodies again, except that they are not full-dimensional.</p>",
        "id": 295763030,
        "sender_full_name": "Paul Reichert",
        "timestamp": 1661726845
    },
    {
        "content": "<p>There's antecedent to haivng both. See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.compacts\">docs#topological_space.compacts</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/topological_space.positive_compacts\">docs#topological_space.positive_compacts</a></p>",
        "id": 295789340,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661755605
    },
    {
        "content": "<p>I have opened a WIP pull request: <a href=\"https://github.com/leanprover-community/mathlib/pull/16297\">https://github.com/leanprover-community/mathlib/pull/16297</a><br>\nI appreciate any feedback. <span aria-label=\"octopus\" class=\"emoji emoji-1f419\" role=\"img\" title=\"octopus\">:octopus:</span> <span aria-label=\"+1\" class=\"emoji emoji-1f44d\" role=\"img\" title=\"+1\">:+1:</span></p>\n<p>Still, I have to find the right place for the two declarations marked with <code>-- MOVE</code>.<br>\nProbably, <code>is_compact.smul</code> should go into topology/subset_properties.lean, just like <code>is_compact</code>, and <code>nnreal.has_continuous_const_smul</code> should go into <code>data/real/nnreal.lean</code>, but I'm not sure.</p>\n<p><code>is_compact.add</code>, for example, already exists but is defined in the <code>monoid</code> module which is not appropriate for <code>smul</code>.</p>",
        "id": 295863404,
        "sender_full_name": "Paul Reichert",
        "timestamp": 1661784744
    },
    {
        "content": "<p><code>is_compact.smul</code> and <code>is_compact.add</code> definitely should go under <code>topology.algebra</code>.</p>",
        "id": 295863687,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661784844
    },
    {
        "content": "<p>Yes, now I agree that is a better place.<br>\nHowever, I currently have problems with the <code>check_reducibility</code> linter because my add_monoid class uses set.has_add, which is a localized instance (i.e., not defined as an instance). I found some mentions in Zulip and the note on reducible non-instances but I do not fully understand the problem.<br>\nIs there a way to legally use set.has_add in the instance or do I have to localize all instances depending on set.has_add, too? (I think you mentioned something similar in an older chat, <span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span>...)</p>\n<p>Furthermore, this linter error only appears in the CI, just adding the <code>#lint</code> command at the end of my only changed file does not produce it, although <code>check_reducibility</code> is part of the linters enumerated by <code>#list_linters</code>. Is there a way to reproduce the problem locally so that I do not have to litter the CI with my premature debugging attempts?</p>",
        "id": 296010141,
        "sender_full_name": "Paul Reichert",
        "timestamp": 1661812204
    },
    {
        "content": "<p>Why not define a ℝ-module structure (would you then automatically get the ℝ≥0-module structure?</p>",
        "id": 296019472,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661818828
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"221653\">Paul Reichert</span> <a href=\"#narrow/stream/116395-maths/topic/Convex.20bodies/near/296010141\">said</a>:</p>\n<blockquote>\n<p>Yes, now I agree that is a better place.<br>\nHowever, I currently have problems with the <code>check_reducibility</code> linter because my add_monoid class uses set.has_add, which is a localized instance (i.e., not defined as an instance). I found some mentions in Zulip and the note on reducible non-instances but I do not fully understand the problem.<br>\nIs there a way to legally use set.has_add in the instance or do I have to localize all instances depending on set.has_add, too? (I think you mentioned something similar in an older chat, <span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span>...)</p>\n<p>Furthermore, this linter error only appears in the CI, just adding the <code>#lint</code> command at the end of my only changed file does not produce it, although <code>check_reducibility</code> is part of the linters enumerated by <code>#list_linters</code>. Is there a way to reproduce the problem locally so that I do not have to litter the CI with my premature debugging attempts?</p>\n</blockquote>\n<p>I'm encountering this same problem in <a href=\"https://github.com/leanprover-community/mathlib/pull/16213\">#16213</a> <br>\nI tried adding <code>@[reducible]</code> to <code>set.has_add</code> but that didn't build so I reverted to using the explicit definition as I didn't really need any of the <code>set.has_add</code> API. Would love to hear a better solution and this is very hacky.</p>",
        "id": 296041348,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1661840082
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"224323\">Junyan Xu</span> <a href=\"#narrow/stream/116395-maths/topic/Convex.20bodies/near/296019472\">said</a>:</p>\n<blockquote>\n<p>Why not define a ℝ-module structure (would you then automatically get the ℝ≥0-module structure?</p>\n</blockquote>\n<p>Because it's wrong, right? <code>s - s = 1 • s + (-1) • s ≠ (1 - 1) • s = 0</code></p>",
        "id": 296047381,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661843600
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> <a href=\"#narrow/stream/116395-maths/topic/Convex.20bodies/near/296041348\">said</a>:</p>\n<blockquote>\n<p>I reverted to using the explicit definition as I didn't really need any of the <code>set.has_add</code> API. Would love to hear a better solution and this is very hacky.</p>\n</blockquote>\n<p>Yes, this is the way to go. See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_semiring.non_unital_non_assoc_semiring\">docs#set_semiring.non_unital_non_assoc_semiring</a></p>",
        "id": 296047623,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661843705
    },
    {
        "content": "<p>Oh yes, <code>add_smul</code> is the nontrivial part. <code>distrib_mul_action</code> should be generalizable to an ℝ-action nonetheless.</p>",
        "id": 296053208,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1661846452
    },
    {
        "content": "<p>What about <code>s + s = 1 • s + 1 • s ≠ 2 • s</code>?</p>",
        "id": 296075134,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661855839
    },
    {
        "content": "<p>This is true for convex bodies, though?</p>",
        "id": 296084599,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1661860299
    },
    {
        "content": "<p>Oh, for convex things yes.</p>",
        "id": 296097972,
        "sender_full_name": "Reid Barton",
        "timestamp": 1661864974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Convex.20bodies/near/296047623\">said</a>:</p>\n<blockquote>\n<p>Yes, this is the way to go. See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set_semiring.non_unital_non_assoc_semiring\">docs#set_semiring.non_unital_non_assoc_semiring</a></p>\n</blockquote>\n<p>Fine. Thanks for your help! I changed the definition of <code>add</code> and added <code>set.image2_add</code> to the simp sets of the <code>add_monoid</code> proofs. Now it works.</p>",
        "id": 296187668,
        "sender_full_name": "Paul Reichert",
        "timestamp": 1661883839
    },
    {
        "content": "<p>My preferred next step is to endow convex bodies with the Hausdorff metric, basically by packaging the existing lemmata about the Hausdorff pseudometric into an instance and proving that it's a metric for convex bodies</p>",
        "id": 296226710,
        "sender_full_name": "Paul Reichert",
        "timestamp": 1661896186
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/metric.Hausdorff_dist\">docs#metric.Hausdorff_dist</a> should be good for that purpose.</p>",
        "id": 296228116,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1661896889
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> <a href=\"#narrow/stream/116395-maths/topic/Convex.20bodies/near/296041348\">said</a>:</p>\n<blockquote>\n<p>I'm encountering this same problem in <a href=\"https://github.com/leanprover-community/mathlib/pull/16213\">#16213</a> <br>\nI tried adding <code>@[reducible]</code> to <code>set.has_add</code> but that didn't build so I reverted to using the explicit definition as I didn't really need any of the <code>set.has_add</code> API. Would love to hear a better solution and this is very hacky.</p>\n</blockquote>\n<p>I settled with a solution very similar to yours. I just used <code>set.image (+)</code> as proposed by Yaël Dillies. That also enabled me to use the set.has_add instance in the proof as follows:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">ext</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span> <span class=\"n\">set.image2_add</span><span class=\"o\">,</span> <span class=\"n\">add_assoc</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>It's very similar to yours and it's still a bit hacky.</p>",
        "id": 296228163,
        "sender_full_name": "Paul Reichert",
        "timestamp": 1661896916
    },
    {
        "content": "<p>One question: Is it better to create small PRs for different but related changes or multiple smaller ones?</p>",
        "id": 296236500,
        "sender_full_name": "Paul Reichert",
        "timestamp": 1661902412
    },
    {
        "content": "<p>generally you want to do smaller PRs</p>",
        "id": 296244096,
        "sender_full_name": "Moritz Doll",
        "timestamp": 1661909342
    },
    {
        "content": "<p>I just completed the Hausdorff metric instance for convex bodies. If you are interested, you can find it here: <a href=\"https://github.com/leanprover-community/mathlib/pull/16338\">#16338</a></p>\n<p>Another thing I'd enjoy to formalize are facts about the relative interior (<code>relint</code>) of a set in a (mostly finite-dimensional) normed space: the interior of the set after restricting the ambient space to the affine hull of the set.<br>\nA useful fact is that the relint of a nonempty convex set is nonempty. This corresponds to the existing lemma <a href=\"https://leanprover-community.github.io/mathlib_docs/analysis/normed_space/add_torsor_bases.html#convex.interior_nonempty_iff_affine_span_eq_top\"><code>convex.interior_nonempty_iff_affine_span_eq_top</code></a> if the convex set is of full dimension, i.e., the affine span is \\top.<br>\nI hope to be able to use this existing proof to derive the more general statement but I still need some time to figure it out.<br>\n(branch: <a href=\"https://github.com/leanprover-community/mathlib/tree/convex_relint\">convex_relint</a>)</p>",
        "id": 296454815,
        "sender_full_name": "Paul Reichert",
        "timestamp": 1661982208
    },
    {
        "content": "<p>I would actually love seeing this. I've been trying to write API for that several times. See <a href=\"https://github.com/leanprover-community/mathlib/blob/6b9f64fd3f7467155a1cd43e172281888afba84c/src/analysis/convex/mc/intrinsic.lean\">here</a>.</p>",
        "id": 296526725,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662015343
    },
    {
        "content": "<p>Thanks for the link. I really like the name \"intrinsic interior\" because it describes what it is more than \"relative interior\".<br>\nWithout having adopted that nomenclature yet, the current state on the branch is that I succeeded with an untidied proof that the intrinsic interior is nonempty if the convex set itself is nonempty.</p>",
        "id": 296608173,
        "sender_full_name": "Paul Reichert",
        "timestamp": 1662045474
    },
    {
        "content": "<p>Hmm, the most natural setting for the intrinsic interior would be affine spaces / <code>add_torsor</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">intrinsic_interior'</span> <span class=\"o\">(</span><span class=\"bp\">𝕜</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">seminormed_add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">pseudo_metric_space</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">affine_span</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">interior</span> <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">affine_span</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>This would enable us to conveniently state the property that it is intrinsic:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">isometry_range_intrinsic_interior</span> <span class=\"o\">{</span><span class=\"bp\">𝕜</span> <span class=\"n\">V</span> <span class=\"n\">V₂</span> <span class=\"n\">P</span> <span class=\"n\">P₂</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_field</span> <span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">seminormed_add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">seminormed_add_comm_group</span> <span class=\"n\">V₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"bp\">𝕜</span> <span class=\"n\">V₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pseudo_metric_space</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pseudo_metric_space</span> <span class=\"n\">P₂</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">V₂</span> <span class=\"n\">P₂</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"bp\">→ᵃⁱ</span><span class=\"o\">[</span><span class=\"bp\">𝕜</span><span class=\"o\">]</span> <span class=\"n\">P₂</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">φ</span> <span class=\"bp\">''</span> <span class=\"n\">intrinsic_interior'</span> <span class=\"bp\">𝕜</span> <span class=\"n\">A</span> <span class=\"bp\">=</span> <span class=\"n\">intrinsic_interior'</span> <span class=\"bp\">𝕜</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">''</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>It is somewhat painful that <code>affine_subspace</code> may be empty but <code>add_torsor</code>must not be, hindering us from defining the inclusion of an <code>affine_subspace</code> as an affine map (except we fill the <code>nonempty</code> instance manually or add a new type <code>nonempty_affine_subspace</code>)...</p>",
        "id": 296785326,
        "sender_full_name": "Paul Reichert",
        "timestamp": 1662112662
    },
    {
        "content": "<p>In fact I myself find that having <code>add_torsor α</code> imply <code>nonempty α</code> to be a problem on <a href=\"https://github.com/leanprover-community/mathlib/tree/linear_algebra_lint\">branch#linear_algebra_lint</a>.</p>",
        "id": 296802612,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662119491
    },
    {
        "content": "<p>Update:  <a href=\"https://github.com/leanprover-community/mathlib/tree/convex_relint\">convex_relint</a> has been rewritten such that the intrinsic interior/frontier/closure is defined in affine spaces and I proved that the intrinsic interior of a nonempty convex set in a normed space over some normed field is nonempty (which we can generalize as soon as <code>convex</code> is defined for arbitrary affine spaces, not only modules).</p>\n<p>Most of the file <code>intrinsic.lean</code> are helper lemmata that I should move into other files. Beyond that, I have to remove some old code blocks I commented out.</p>\n<p>I also get some looping instances because of <code>add_torsor</code> and <code>nonempty</code>, so we will have to hold back merging until we have resolved <a href=\"#narrow/stream/116395-maths/topic/Empty.20torsors\">Empty torsors</a> in some way.</p>\n<p>I appreciate any kind of feedback.</p>",
        "id": 297140019,
        "sender_full_name": "Paul A. Reichert",
        "timestamp": 1662324669
    },
    {
        "content": "<p>One aspect of the code that is very ugly is that I had to redeclare all variables in every definition or theorem. I tried this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">seminormed_add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">pseudo_metric_space</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_add_torsor</span> <span class=\"n\">V</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">intrinsic_interior</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">affine_span</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">''</span> <span class=\"n\">interior</span> <span class=\"o\">((</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">affine_span</span> <span class=\"n\">R</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"bp\">⁻¹'</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But based on the signature of the definition, Lean seems to think that the instance of <code>normed_add_torsor</code> is not needed and forgets it, just to throw an error because it cannot derive <code>add_torsor</code>.</p>",
        "id": 297141274,
        "sender_full_name": "Paul A. Reichert",
        "timestamp": 1662325927
    },
    {
        "content": "<p>You should <code>include V</code>, because Lean does not see it in the statement of the declaration, so does not add it to the context.</p>",
        "id": 297141340,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1662326032
    },
    {
        "content": "<p>Just as an update, I'm currently creating small PRs for the several prerequisites that should go into other files -- as soon as that is done, I'll PR the <code>intrinsic</code> module.</p>",
        "id": 297745187,
        "sender_full_name": "Paul A. Reichert",
        "timestamp": 1662631973
    }
]