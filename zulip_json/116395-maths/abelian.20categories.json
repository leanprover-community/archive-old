[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> Now that we have monoidal cats, how far are we from abelian cats?</p>",
        "id": 171406083,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563775918
    },
    {
        "content": "<p>I think monoidal and abelian categories are just original directions to begin with. The roadmap towards abelian categories requires a bit more work on special shapes of limits, and the categorical API for kernels and cokernels.</p>",
        "id": 171409165,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563779894
    },
    {
        "content": "<p>I thought you wanted to use monoidal cats to define enriched cats and use those for abelian cats.</p>",
        "id": 171410769,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563781977
    },
    {
        "content": "<p>.... oh yeah. :-)</p>",
        "id": 171411151,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563782406
    },
    {
        "content": "<p>(Sorry, jetlag or something.)</p>",
        "id": 171411251,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563782502
    },
    {
        "content": "<p>I have a branch with some stuff on enriched categories. At least the beginning of the theory is pretty nice and straightforward.</p>",
        "id": 171411266,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563782521
    },
    {
        "content": "<p>You could write things like <code>X \\hom[V] Y</code> to refer to the morphisms from <code>X</code> to <code>Y</code>, as an object of <code>V</code>. E.g. you could write something like <code>X \\hom[Ab] Y</code> to obtain the (bundled) abelian group of chain maps between chain complexes <code>X</code> and <code>Y</code>.</p>",
        "id": 171411621,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563782892
    },
    {
        "content": "<p>oh... here's why you don't really need enriched categories first: a category with a zero object, binary biproducts, and all kernels and cokernels is automatically enriched in <code>Ab</code>!</p>",
        "id": 171411941,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563783261
    },
    {
        "content": "<p>I know... but that is a very mathematical statement.</p>",
        "id": 171412162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563783556
    },
    {
        "content": "<p>We probably still want the enriched structure to be part of the definition (otherwise I fear diamonds will hit us).</p>",
        "id": 171412176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563783572
    },
    {
        "content": "<p>And even if we don't, we still want to use the enriched structure. So we still need the theory of enriched cats.</p>",
        "id": 171412242,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563783633
    },
    {
        "content": "<p>Has any progress been made on this? I'd be happy to help if there's an official roadmap somewhere</p>",
        "id": 183318926,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1576198471
    },
    {
        "content": "<p>I found <a href=\"https://github.com/leanprover-community/mathlib/issues/1063\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1063\">https://github.com/leanprover-community/mathlib/issues/1063</a>, but it seems like a big missing thing is Freyd-Mitchell (the embedding theorem). I'm interested in trying to do derived functors, but to construct the long exact sequence you need the snake lemma, which is a lot easier to prove if you have elements</p>",
        "id": 183319301,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1576198869
    },
    {
        "content": "<p>Derived functors are a very nice target to motivate other development. But at the moment they seem a bit out of reach. But doing Freyd-Mitchell would of course be really helpful.</p>",
        "id": 183331488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576216964
    },
    {
        "content": "<p>The problem with derived functors/categories is that there is so much stuff \"up to isomorphism\". And we currently don't have a good way of handling that in Lean.</p>",
        "id": 183331498,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576216998
    },
    {
        "content": "<p>My gut feeling says that it might be better to go for infty-categories directly.</p>",
        "id": 183331501,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1576217018
    },
    {
        "content": "<p>Someone just pointed out to me this thesis <a href=\"https://github.com/tpannila/Masters_thesis/blob/master/An%20Introduction%20to%20Homological%20Algebra.pdf\">https://github.com/tpannila/Masters_thesis/blob/master/An%20Introduction%20to%20Homological%20Algebra.pdf</a> which I think pertains to this formalisation in UniMath: <a href=\"https://github.com/UniMath/UniMath/blob/master/UniMath/CategoryTheory/Abelian.v\">abelian categories</a> <a href=\"https://github.com/UniMath/UniMath/blob/master/UniMath/CategoryTheory/FiveLemma.v\">five lemma</a> <a href=\"https://github.com/UniMath/UniMath/blob/master/UniMath/CategoryTheory/ShortExactSequences.v\">short exact sequences</a></p>",
        "id": 279526102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1650451769
    }
]