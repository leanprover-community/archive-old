[
    {
        "content": "<p>I was looking for a library proof of</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n</code></pre></div>\n\n<p>I (manually) found <code>nat.cast_max</code> which looks like it should do the trick. But both bare <code>nat.cast_max</code> and</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">nat.cast_max</span> <span class=\"n\">int</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span>\n</code></pre></div>\n\n<p>give</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">nat.cast_max</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">max</span> <span class=\"n\">ℕ</span> <span class=\"n\">nat.decidable_linear_order</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n    <span class=\"bp\">@</span><span class=\"n\">max</span> <span class=\"n\">ℤ</span>\n      <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">decidable_linear_ordered_semiring.to_decidable_linear_order</span> <span class=\"n\">ℤ</span>\n         <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">decidable_linear_ordered_comm_ring.to_decidable_linear_ordered_semiring</span> <span class=\"n\">ℤ</span>\n            <span class=\"n\">int.decidable_linear_ordered_comm_ring</span><span class=\"o\">))</span>\n      <span class=\"bp\">↑</span><span class=\"n\">a</span>\n      <span class=\"bp\">↑</span><span class=\"n\">b</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">max</span> <span class=\"n\">ℕ</span> <span class=\"n\">nat.decidable_linear_order</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">@</span><span class=\"n\">max</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.decidable_linear_order</span> <span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"bp\">↑</span><span class=\"n\">b</span>\n</code></pre></div>\n\n<p>This seems like a bug because the mentioned types unify AFAICT. I see that it's supposed to be used by the tactic norm_cast but that tactic just fails here.</p>\n<p>Is there any way around this and/or am I missing something here?</p>",
        "id": 213494189,
        "sender_full_name": "David A",
        "timestamp": 1602799701
    },
    {
        "content": "<p>If you use convert you can see what lean thinks is the difference between the terms</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:(</span><span class=\"bp\">↑</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">):</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>  <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">convert</span> <span class=\"bp\">@</span><span class=\"n\">nat.cast_max</span> <span class=\"n\">int</span> <span class=\"n\">_</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n\n  <span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213495618,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1602800757
    },
    {
        "content": "<p>You can set</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">850</span><span class=\"o\">]</span> <span class=\"n\">coe_base</span>\n</code></pre></div>\n\n<p>before this and it works fine, not sure why this is needed really though</p>",
        "id": 213496237,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1602801131
    },
    {
        "content": "<p>So... there are two non-defeq versions of <code>nat -&gt; int</code> coercion? That seems... bad.<br>\nAnyways, this workaround does seem to help so thanks!</p>",
        "id": 213496906,
        "sender_full_name": "David A",
        "timestamp": 1602801681
    },
    {
        "content": "<p>Well... it kind of works. It leads to a bunch of other errors in previously-working code, so I think it has to be really scoped down.</p>",
        "id": 213497063,
        "sender_full_name": "David A",
        "timestamp": 1602801789
    },
    {
        "content": "<p>Looks like <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span> was the last person to change this in <a href=\"https://github.com/leanprover-community/mathlib/issues/2573\">#2573</a>, perhaps he can shed some light on the matter.</p>",
        "id": 213497165,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1602801871
    },
    {
        "content": "<p>Yes, there are two different coercions.  IIRC the idea was that we standardize on <code>int.has_coe</code> for coercions from <code>ℕ → ℤ</code>.  But then you can't use lemmas that are stated for the general coercion. <span aria-label=\"shrug\" class=\"emoji emoji-1f937\" role=\"img\" title=\"shrug\">:shrug:</span> </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">↑</span><span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">int.nat_cast_eq_coe_nat</span><span class=\"o\">,</span> <span class=\"n\">nat.cast_max</span><span class=\"o\">,</span>\n    <span class=\"n\">int.nat_cast_eq_coe_nat</span><span class=\"o\">,</span> <span class=\"n\">int.nat_cast_eq_coe_nat</span><span class=\"o\">]</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 213528983,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602835098
    },
    {
        "content": "<p>Mario was always adamant that the coercion from nat to int had to be the constructor, for computational reasons.</p>",
        "id": 213544331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1602845522
    },
    {
        "content": "<p>Mmmh, nowadays we might be able to do this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[priority 9000, vm_override int.has_coe]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">nat.better_int_coe</span> <span class=\"o\">:</span> <span class=\"n\">has_coe</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"n\">nat.cast</span><span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 213545004,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602846009
    },
    {
        "content": "<p>Ooh that would be really sweet.</p>",
        "id": 213549982,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602849493
    },
    {
        "content": "<p>This coe problem was not as bad as <code>nat.pow</code>, but it comes close.</p>",
        "id": 213550008,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602849518
    },
    {
        "content": "<p>And now that <code>nat.pow</code> is gone, it's a serious contestant for claiming the free spot of \"most annoying incompatibility in mathlib/lean\"<br>\nRunner up is the fact that <code>int.gcd</code> doesn't match <code>euclidean_domain.gcd</code></p>",
        "id": 213550091,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1602849576
    },
    {
        "content": "<p>I can't use pattern matching on <code>| (n : nat) := ...</code> <code>| -[1+n] := ...</code> though if we do this</p>",
        "id": 213577070,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602862884
    },
    {
        "content": "<p>it would also silently break a lot of tactics by switching out a constant time implementation for an exponential time algorithm</p>",
        "id": 213577173,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602862935
    },
    {
        "content": "<p><code>| (mk n) := ...</code> <span aria-label=\"golf\" class=\"emoji emoji-1f3cc\" role=\"img\" title=\"golf\">:golf:</span></p>",
        "id": 213577174,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602862935
    },
    {
        "content": "<p>that would only work if you have the right namespace open</p>",
        "id": 213577281,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602862994
    },
    {
        "content": "<p>which you almost certainly do if you are writing <code>| -[1+n]</code></p>",
        "id": 213577303,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602863012
    },
    {
        "content": "<p>however, the second issue seems more serious</p>",
        "id": 213577314,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602863017
    },
    {
        "content": "<p>I almost never open <code>nat</code> or <code>int</code>, there are too many conflicts</p>",
        "id": 213577339,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602863037
    },
    {
        "content": "<p>It's already somewhat challenging to avoid accidentally hitting the exponential time <code>nat -&gt; rat</code> coe</p>",
        "id": 213577524,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1602863126
    },
    {
        "content": "<p>What do the <code>[]</code> mean in <code>-[1+n]</code>? I assume that's not a list constructor?</p>",
        "id": 213577981,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1602863362
    },
    {
        "content": "<p>It's a notation for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int.neg_succ_of_nat\">docs#int.neg_succ_of_nat</a>, one of the constructors of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/int\">docs#int</a></p>",
        "id": 213578160,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602863448
    },
    {
        "content": "<p>doesn't <span class=\"user-mention\" data-user-id=\"110043\">@Gabriel Ebner</span>'s <code>vm_override</code> suggestion address the evaluation issue? If not then what does it do?</p>",
        "id": 213578251,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602863498
    },
    {
        "content": "<p>Ideally, <code>int</code> would be implemented in the VM as <code>mpz</code> anyways (and maybe defined in Lean as a quotient)</p>",
        "id": 213578419,
        "sender_full_name": "Reid Barton",
        "timestamp": 1602863576
    },
    {
        "content": "<p>int is implemented using mpz (or signed integers if they fit).  The proposed instance has the right runtime complexity (unless I mixed up the order of the vm_override arguments).</p>",
        "id": 213579746,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602864211
    },
    {
        "content": "<p>Pattern matching still works on <code>-[1+n]</code> (the coercion doesn't even apply here??).  Instead of <code>(n : nat)</code> you can just write <code>int.of_nat n</code>, as Reid pointed out.</p>",
        "id": 213580034,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1602864353
    }
]