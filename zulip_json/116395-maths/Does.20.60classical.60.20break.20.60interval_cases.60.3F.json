[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hn</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"mi\">4</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">interval_cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">cases tactic failed, it is not applicable to the given hypothesis</span>\n<span class=\"cm\">state:</span>\n<span class=\"cm\">n : ℕ,</span>\n<span class=\"cm\">hn : n ≤ 4,</span>\n<span class=\"cm\">_inst : Π (a : Prop), decidable a,</span>\n<span class=\"cm\">lh : n ∈ tactic.interval_cases.set_elems (set.Ico ⊥ (4 + 1))</span>\n<span class=\"cm\">⊢ false</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>If you comment out <code>classical</code> it works fine.</p>",
        "id": 193373442,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586377210
    },
    {
        "content": "<p>Another <code>interval_cases</code> issue:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span> <span class=\"n\">group_theory</span><span class=\"bp\">.</span><span class=\"n\">order_of_element</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">fintype</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">G</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">order_of</span> <span class=\"n\">g</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">false</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">interval_cases</span> <span class=\"o\">(</span><span class=\"n\">order_of</span> <span class=\"n\">g</span><span class=\"o\">),</span>\n  <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">sorry</span><span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>You would expect to get three cases <code>order_of g = 0,1,2</code>. But I think <code>simp</code> or something got to the middle case:</p>\n<div class=\"codehilite\"><pre><span></span>3 goals\nG : Type,\n_inst_1 : fintype G,\n_inst_2 : group G,\n_inst_3 : decidable_eq G,\ng : G,\nh : order_of g ≤ 2,\nlh : order_of g = 0\n⊢ false\n\nG : Type,\n_inst_1 : fintype G,\n_inst_2 : group G,\n_inst_3 : decidable_eq G,\nh : order_of 1 ≤ 2\n⊢ false\n\nG : Type,\n_inst_1 : fintype G,\n_inst_2 : group G,\n_inst_3 : decidable_eq G,\ng : G,\nh : order_of g ≤ 2,\nlh : order_of g = 2\n⊢ false\n</pre></div>\n\n\n<p>Lean has eliminated the hypothesis that the order of g is 1, and replaced g with the identity. Which is fine, I guess, but perhaps not what I expected.</p>",
        "id": 193376669,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586378979
    },
    {
        "content": "<p>This is probably my fault in some way. :-) I'm not sure I'll have time to look at it today. If no one else jumps in, creating and assigning an issue to me would be great. <code>interval_cases</code> is built on top of <code>fin_cases</code>, and both are pretty simple tactics (which can be \"decompiled\" by hand into a string of other tactic invocations), so it's probably not too hard to find where we're over simplifying.</p>",
        "id": 193399613,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586397465
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/2367\" title=\"https://github.com/leanprover-community/mathlib/issues/2367\">#2367</a></p>",
        "id": 193417983,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586419208
    }
]