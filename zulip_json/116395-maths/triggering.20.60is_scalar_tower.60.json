[
    {
        "content": "<p>In this code I have L a K-algebra and then given some auxiliary data I construct an L-algebra M. Lean seems to be happy to make M into a K-algebra but I was expecting the is_scalar_tower instance to be there too (assuming it did the only thing it could have done to make M a K-algebra).</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.splitting_field</span>\n\n<span class=\"kd\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">p.splitting_field</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span> <span class=\"c1\">-- all three work</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span><span class=\"o\">,</span> <span class=\"c1\">-- fails</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 286722824,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655662725
    },
    {
        "content": "<p>Oh! Examining things further the <code>algebra K M</code> instance is coming from something specific to splitting field, so I can just add the instance myself here.</p>",
        "id": 286722990,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655662951
    },
    {
        "content": "<p>What does \"this\" refer to on the first line of <a href=\"https://github.com/leanprover-community/mathlib/blob/26279c5f549803f63b906d1d0f20bdef94fd8e81/src/field_theory/splitting_field.lean#L801-L824\">this comment</a>? Is this something which didn't used to be an instance but is now an instance?</p>",
        "id": 286723146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655663169
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.splitting_field.algebra'\">docs#polynomial.splitting_field.algebra'</a> is giving the <code>algebra K M</code> instance and the map seems to be a strange one.</p>\n<p>So <code>splitting_field_aux f</code> with <code>f : polynomial K</code> gets given the structure of an <code>R</code>-algebra for any <code>R</code> such that <code>algebra R K</code>. This looks to me like it's part of an implementation detail. But by the time we've got to <code>splitting_field f</code> surely we just want the structure of a <code>K</code>-algebra, and then everything else induced from that? Or not?  </p>\n<p>So in fact this is my question:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.splitting_field</span>\n\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">@[instance]</span>\n<span class=\"cm\">protected noncomputable def</span>\n<span class=\"cm\">polynomial.splitting_field.algebra' :</span>\n<span class=\"cm\">  Π {K : Type u_1} [_inst_1 : field K] (f : polynomial K) {R : Type u_2} [_inst_4 : comm_semiring R]</span>\n<span class=\"cm\">  [_inst_5 : algebra R K], algebra R f.splitting_field</span>\n<span class=\"cm\">-/</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"n\">f.splitting_field</span> <span class=\"o\">:=</span>\n<span class=\"gr\">sorry</span> <span class=\"c1\">-- compiles</span>\n</code></pre></div>",
        "id": 286724008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655664385
    },
    {
        "content": "<p>Am I doing this right?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">polynomial.splitting_field.algebra'</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">algebra.comp</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">algebra_map</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">algebra_map</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">k</span><span class=\"o\">),</span>\n  <span class=\"n\">map_one'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_one</span><span class=\"o\">],</span>\n  <span class=\"n\">map_mul'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">],</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_zero</span><span class=\"o\">],</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_add</span><span class=\"o\">],</span>\n  <span class=\"n\">commutes'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">mul_comm</span><span class=\"o\">],</span>\n  <span class=\"n\">smul_def'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">r</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">rfl</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">local</span> <span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">instance</span><span class=\"o\">]</span> <span class=\"n\">algebra.comp</span>\n\n<span class=\"kd\">instance</span> <span class=\"n\">is_scalar_tower'</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">L</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">K</span> <span class=\"n\">L</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">L</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span><span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">algebra.smul_def</span><span class=\"o\">],</span>\n    <span class=\"n\">rw</span> <span class=\"o\">(</span><span class=\"k\">show</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">M</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">algebra_map</span> <span class=\"n\">L</span> <span class=\"n\">M</span> <span class=\"o\">(</span><span class=\"n\">algebra_map</span> <span class=\"n\">K</span> <span class=\"n\">L</span> <span class=\"n\">k</span><span class=\"o\">),</span> <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">),</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">map_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_assoc</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">⟩</span>\n</code></pre></div>\n<p>I suspect that either we have this or for some reason we don't want it...</p>",
        "id": 286727040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655668535
    },
    {
        "content": "<p>Oh OK the linter is telling me what the problem is :-/</p>",
        "id": 286727128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655668666
    },
    {
        "content": "<p>Don't use <code>have</code> for <code>algebra</code>, it throws away the data for the duration of the tactic block</p>",
        "id": 286728549,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655670393
    },
    {
        "content": "<p>Which means when you come to look for <code>is_scalar_tower</code>, you're asking lean \"Do the actions of [algebra you're not allowed to know the definition of] and [algebra you're not allowed to know the definition of] commute\"</p>",
        "id": 286728566,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655670436
    },
    {
        "content": "<p>Oh those <code>have</code> were precisely not to start adding things that were there already</p>",
        "id": 286729737,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655672210
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/triggering.20.60is_scalar_tower.60/near/286723146\">said</a>:</p>\n<blockquote>\n<p>What does \"this\" refer to on the first line of <a href=\"https://github.com/leanprover-community/mathlib/blob/26279c5f549803f63b906d1d0f20bdef94fd8e81/src/field_theory/splitting_field.lean#L801-L824\">this comment</a>? Is this something which didn't used to be an instance but is now an instance?</p>\n</blockquote>\n<p>I have no idea what I was thinkign there (in <a href=\"https://github.com/leanprover-community/mathlib/pull/10220\">#10220</a>). I can only assume I intended to make that not an instance</p>",
        "id": 286731187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655674396
    },
    {
        "content": "<p>Your <code>algebra.comp</code> can be implemented in one line with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/restrict_scalars.algebra\">docs#restrict_scalars.algebra</a></p>",
        "id": 286731204,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655674437
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/triggering.20.60is_scalar_tower.60/near/286724008\">said</a>:</p>\n<blockquote>\n<p>So in fact this is my question:</p>\n</blockquote>\n<p>The answer is</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory.splitting_field</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R</span> <span class=\"n\">K</span> <span class=\"n\">f.splitting_field</span> <span class=\"o\">:=</span>\n<span class=\"n\">polynomial.splitting_field_aux.is_scalar_tower</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span>\n</code></pre></div>",
        "id": 286739090,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655686940
    },
    {
        "content": "<p>Is there anything else like  <code>splitting_field f</code>? What is the logic of giving a <code>K</code>-algebra some obscurely-defined algebra structure over any field for which K is an algebra over that field?</p>",
        "id": 286758376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655709660
    },
    {
        "content": "<p>The reasoning behind these <code>algebra R A → algebra R (some_construction_of A)</code> instances is that we ideally want <code>algebra</code> to be closed under transitivity. For example, <a href=\"https://github.com/leanprover-community/mathlib/blob/ae5b6952ad7a79351d75d0115832ccfa71aa3a9b/src/ring_theory/trace.lean#L288\">when showing the trace of an integral element is integral</a> we have a tower of extensions <code>F / L / R</code> and take the algebraic closure of <code>F</code>. We want to talk about the inclusion <code>algebra_map L (algebraic_closure F)</code>, which would be the composition of the maps <code>L → F</code> and <code>F → algebraic_closure F</code> and exists because of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/algebraic_closure.algebra\">docs#algebraic_closure.algebra</a> which is one of these left-hand-side-free instances.</p>",
        "id": 286766154,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1655714815
    },
    {
        "content": "<p>I think the logic for defining the <code>R</code>-algebra this way on <code>splitting_field</code> was that the <code>R</code>-algebra almost comes for free when building the <code>K</code>-algebra</p>",
        "id": 286766277,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655714892
    },
    {
        "content": "<p>I think originally I was hoping it would resolve the nat/int diamonds described in the comment linked earlier, but it does not.</p>",
        "id": 286766372,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1655714952
    },
    {
        "content": "<p>The R-algebra structure on the splitting field comes for free because the splitting field is a K-algebra and there's a map R-&gt;K. But the same statement is true for any K-algebra!</p>",
        "id": 286837058,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1655757238
    }
]