[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">unique_nonzero_max_ideal</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"bp\">∧</span> <span class=\"n\">P</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> what do you think?</p>",
        "id": 188142696,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581622973
    },
    {
        "content": "<p>Well, we already have <code>local_ring</code></p>",
        "id": 188143009,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581623171
    },
    {
        "content": "<p>So maybe you should <code>extend</code> that</p>",
        "id": 188143031,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581623187
    },
    {
        "content": "<p>and then add one extra condition saying that it's not a field</p>",
        "id": 188143061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581623203
    },
    {
        "content": "<p>but a general local ring isn't a PID so I need to add that somehow, right?</p>",
        "id": 188143208,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581623312
    },
    {
        "content": "<p>You are already extending that, right?</p>",
        "id": 188143260,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581623368
    },
    {
        "content": "<p>I meant, in addition, extend local ring</p>",
        "id": 188143271,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581623376
    },
    {
        "content": "<p>I wonder whether we'll be happy with <code>[dvr R]</code> and <code>[pid R]</code>, etc... Or that we'd rather have <code>[comm_ring R] [is_dvr R]</code> and <code>[comm_ring R] [is_pid R]</code> etc...</p>",
        "id": 188143412,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581623492
    },
    {
        "content": "<p>The first version has more chances to lead to diamonds, I think</p>",
        "id": 188143445,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581623513
    },
    {
        "content": "<p>I never know if I'm allowed to extend PID and local ring because perhaps I just defined two different multiplications or something? I really have no understanding of this stuff and don't know a place where it's all written up coherently. I occasionally half-understand it for a while and then I just forget it all again.</p>",
        "id": 188143550,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581623566
    },
    {
        "content": "<p>Aha, I think it's fine, but maybe you need to switch on the <code>old_structure_cmd</code></p>",
        "id": 188143877,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581623687
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n  <span class=\"n\">local_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">pseudouniformiser</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"bp\">∧</span> <span class=\"bp\">¬</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 188145502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1581624630
    },
    {
        "content": "<p>Yeah, that seems fine. Although I would maybe not call the condition <code>pseudouniformiser</code></p>",
        "id": 188146043,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581624975
    },
    {
        "content": "<p><code>exists_nonzero_nonunit</code>?</p>",
        "id": 188146075,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1581625001
    },
    {
        "content": "<p>Thinking about the proof that given a DVR you actually get a valuation, there's a slight stumbling block: I want to use <code>enat</code> and then do something like <code>R →*+ enat</code> which should be a map from the DVR <code>R</code> to <code>enat</code> which is a map of monoids, but the problem is that I want to think of <code>R</code> as a multiplicative monoid and <code>enat</code> as an additive monoid: it doesn't seem like <code>→*+</code> exists. One other option is to use multiplicative valuations landing in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"double-struck\">R</mi><mrow><mo>≥</mo><mn>0</mn></mrow></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}_{\\geq 0}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.934069em;vertical-align:-0.24517899999999998em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mrel mtight\">≥</span><span class=\"mord mtight\">0</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24517899999999998em;\"><span></span></span></span></span></span></span></span></span></span> but then it's not really clear where a uniformizer is supposed to go: there are infinitely many choices, none of which really stand out in general.</p>",
        "id": 195333635,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587905806
    },
    {
        "content": "<p>Is there some systematic way to add in things like <code>→*+</code>?</p>",
        "id": 195333813,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587906126
    },
    {
        "content": "<p>Alternatively, <code>\\bbZ</code> and <code>\\bbN</code> have <code>has_le</code>, but <code>multiplicative \\bbZ</code> doesn't seem to preserve this, and I'm not sure whether <code>with_zero</code> defines a new ordering...</p>",
        "id": 195335223,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587908318
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"235423\">@Ashwin Iyengar</span> they used valuations in <a href=\"https://leanprover-community.github.io/lean-perfectoid-spaces/\" title=\"https://leanprover-community.github.io/lean-perfectoid-spaces/\">the perfectoid project</a> which you might find helpful</p>",
        "id": 195335249,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1587908378
    },
    {
        "content": "<p>Yeah I guess what I want to use is linear_ordered_comm_group_with_zero.lean then: <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> is this destined for mathlib?</p>",
        "id": 195335498,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587908645
    },
    {
        "content": "<p>But maybe this should be rewritten replacing <code>0</code> with <code>⊥</code> to avoid confusion with <code>0</code> in the integers?</p>",
        "id": 195335533,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587908738
    },
    {
        "content": "<p>I guess I can achieve what I want if I have linear_ordered_comm_group_with_zero.lean, and some way to distinguish between the natural number <code>0</code> and the adjoined <code>0</code></p>",
        "id": 195336032,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587909528
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"235423\">Ashwin Iyengar</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/195335498\" title=\"#narrow/stream/116395-maths/topic/DVRs/near/195335498\">said</a>:</p>\n<blockquote>\n<p>Yeah I guess what I want to use is linear_ordered_comm_group_with_zero.lean then: <span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> is this destined for mathlib?</p>\n</blockquote>\n<p>I think this can be PR'd. All prerequisites are now in mathlib, if I'm not mistaken. Note that it only works in a multiplicative setting though... so it doesn't yet solve your problem.</p>\n<p>I think there are two questions that need to be answered:</p>\n<ol>\n<li>\n<p>Should DVR's use multiplicative or additive valuations?</p>\n</li>\n<li>\n<p>What ever the answer is to (1): what should the target type be of discrete valuations?</p>\n</li>\n</ol>\n<p>Note that we could also opt for a \"heretical\" approach, in which we take a discrete additive valuation with target type the integers, and we require <code>val 0 = 0</code>, instead of <code>val  0 = infty</code>. This would create it's own problems, but it also solves a lot...</p>",
        "id": 195338108,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587913050
    },
    {
        "content": "<p>Additive is what is usually done, but if we want to do multiplicative instead, one option for the target would be to just use a free group on one generator (written multiplicatively), define the obvious ordering on it, and then use your</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\">- Adjoining a zero element to a linearly ordered commutative group</span>\n<span class=\"cm\">gives a linearly ordered commutative group with zero.-/</span>\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">linear_ordered_comm_group</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">linear_ordered_comm_group_with_zero</span> <span class=\"o\">(</span><span class=\"n\">with_zero</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:=</span><span class=\"bp\">```</span>\n</pre></div>\n\n\n<p>I'll try this for now.</p>",
        "id": 195339207,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587914840
    },
    {
        "content": "<p>Later on it might be convenient to have valuations taking values in a discrete subgroup of the rationals</p>",
        "id": 195341519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587918313
    },
    {
        "content": "<p>I think Johan is the expert in valuations now, there has been lot of movement since that valuation file was originally written, especially with group_with_zero</p>",
        "id": 195341580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587918373
    },
    {
        "content": "<p>We could do something like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_discrete_valuation</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">G</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">cyclic</span> <span class=\"o\">:</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">span</span> <span class=\"o\">{</span><span class=\"n\">g</span><span class=\"o\">})</span> <span class=\"o\">:</span>\n<span class=\"n\">discrete_valuation</span> <span class=\"n\">R</span> <span class=\"n\">G</span> <span class=\"n\">g</span> <span class=\"o\">:=</span>\n</pre></div>\n\n\n<p>maybe, and have the discrete valuation take values in an arbitrary infinite cyclic group... oh but I'm missing a proof that it's infinite</p>",
        "id": 195341707,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587918576
    },
    {
        "content": "<p>An alternative is to use the general valuations as found in the perfectoid project, and define a predicate on those, saying that the valuation is discrete.</p>",
        "id": 195341852,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587918810
    },
    {
        "content": "<p>Do you want <code>discrete_valuation_ring R</code> to be a <code>Prop</code> or will it record data (say a distinguished uniformiser...)?</p>",
        "id": 195341916,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587918889
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">prime_ideal&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">primality</span> <span class=\"o\">:</span> <span class=\"n\">prime_ideal&#39;</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">is_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">prime_ideal&#39;</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">unique_nonzero_prime_ideal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">prime_ideal&#39;</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 195342402,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587919657
    },
    {
        "content": "<p>so it records some data</p>",
        "id": 195342405,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587919669
    },
    {
        "content": "<p>a PID with a unique nonzero prime ideal</p>",
        "id": 195342447,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587919689
    },
    {
        "content": "<p>Ok, I see. But it is a subsingleton. That seems like a fine definition</p>",
        "id": 195342489,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587919800
    },
    {
        "content": "<p>Then we construct a valuation basically by using the UFD structure and the fact that prime elements are uniformizers</p>",
        "id": 195342540,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587919825
    },
    {
        "content": "<p>In the perfectoid project we also had the notion of a <code>valued_ring</code>, which was a class that registered a (multiplicative) valuation on the ring.</p>",
        "id": 195342926,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587920474
    },
    {
        "content": "<p>One could have an is_discrete predicate on a valuation in the sense of Huber and a construction which goes from this to the Z-valued valuation. But I don't think it matters that traditionally the group law on Z with 0 is addition -- why not use multiplicative Z with 0?</p>",
        "id": 195342953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587920521
    },
    {
        "content": "<p>We might want to have two classes <code>discrete_valuation_ring R</code>, like you propose, and <code>discretely_valued_ring R</code>, for rings like Z_p that have a canonical valuation.</p>",
        "id": 195342997,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587920539
    },
    {
        "content": "<p>What structure do people use on Z with +infinity? Add, max, probably never multiplication, but external multiplication by Z yes. But we have all this on a group with 0</p>",
        "id": 195343020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587920593
    },
    {
        "content": "<p>I'm still upset that it seems really painful to move back and forth between multiplicative and additive valuations...</p>",
        "id": 195343030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587920606
    },
    {
        "content": "<p>So why not just bite the bullet and never use additive valuations?</p>",
        "id": 195343034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587920620
    },
    {
        "content": "<p>It's either that or make add_group_with_zero</p>",
        "id": 195343075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587920649
    },
    {
        "content": "<p>Because sometimes it's really nice and intuitive to reason about <code>int</code></p>",
        "id": 195343077,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587920652
    },
    {
        "content": "<p>Or with infinity or whatever</p>",
        "id": 195343085,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587920661
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/195343075\" title=\"#narrow/stream/116395-maths/topic/DVRs/near/195343075\">said</a>:</p>\n<blockquote>\n<p>It's either that or make add_group_with_zero</p>\n</blockquote>\n<p><code>add_group_with_infty</code></p>",
        "id": 195343088,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587920665
    },
    {
        "content": "<p>But I don't think the <code>to_additive</code> machinery is built with such translations in mind...</p>",
        "id": 195343096,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587920693
    },
    {
        "content": "<p>But I don't think the target Z really is a Z. It's certainly not the ring Z. It's the additive group Z with an occasional infinity</p>",
        "id": 195343105,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587920709
    },
    {
        "content": "<p>And an action of Z which is either a smul or a gpow</p>",
        "id": 195343124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587920748
    },
    {
        "content": "<p>I don't see why we need to introduce the concept of an additive valuation at all. Just because it's in maths in some superficial way doesn't mean we need it. Or we could have it in this one off case. What did Rob use for p-adics?</p>",
        "id": 195343196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1587920820
    },
    {
        "content": "<p>norms...</p>",
        "id": 195343208,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587920833
    },
    {
        "content": "<p>I would be happy with multiplicative <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">Z</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{Z}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">Z</span></span></span></span></span> with an added 0 element, but won't this cause notational trouble because you have the integer 0 and then the added 0?</p>",
        "id": 195343272,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587920904
    },
    {
        "content": "<p>There are ways around that.</p>",
        "id": 195343296,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587920986
    },
    {
        "content": "<p>We could define <code>free_group</code>, or something like that.</p>",
        "id": 195343342,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587921016
    },
    {
        "content": "<p>As in, don't actually use <code>int</code>, but use a different type.</p>",
        "id": 195343348,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587921041
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/195343348\" title=\"#narrow/stream/116395-maths/topic/DVRs/near/195343348\">said</a>:</p>\n<blockquote>\n<p>As in, don't actually use <code>int</code>, but use a different type.</p>\n</blockquote>\n<p>If you want, we could give it some names like <code>discrete_valuation.target_type</code>, or something fancier...</p>",
        "id": 195343430,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587921126
    },
    {
        "content": "<p>But it would be best to already include the extra <code>0</code> element in the definition of this type. You don't want to work with <code>with_zero foo</code> all the time, even though in \"normal\" maths we keep up that facade.</p>",
        "id": 195343556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587921245
    },
    {
        "content": "<p>We did that for a long time in the perfectoid project, but it just became too painful.</p>",
        "id": 195343565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587921266
    },
    {
        "content": "<p>Still, I wonder if you should settle on 1 target type. It might be better to characterise what it means to be a discrete valuation, as I proposed above.</p>",
        "id": 195343597,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587921328
    },
    {
        "content": "<p>Because otherwise you will regret it once you get a DVR with a different target type.</p>",
        "id": 195343606,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587921355
    },
    {
        "content": "<p>(Say some subset of the reals)</p>",
        "id": 195343651,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587921390
    },
    {
        "content": "<p>We should really work to get the definition of a general valuation into mathlib</p>",
        "id": 195343661,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587921418
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think that sometimes it's useful to view <code>padic_val_int</code> as an <em>actual</em> integer, don't you think? But nevertheless we can probably get away with using multiplicative valuations as the default.</p>\n<p><span class=\"user-mention\" data-user-id=\"235423\">@Ashwin Iyengar</span> I'm starting to think that we should just hurry up with PR'ing the basics of valuations from the perfectoid project. Stuff like equivalence of valuations etc would also be useful to you. And it would be silly to have to do all of that again.</p>\n<p>Maybe we need a class like <code>normed_valued_ring R</code> that can be used for examples like <code>Z_p</code>, and will register both a norm and a valuation, and an axiom that claims the two are the same thing.</p>",
        "id": 195374804,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587966302
    },
    {
        "content": "<p>Yeah if i have access to the perfectoid project stuff then I'm sure I can just go from there, but no rush</p>",
        "id": 195378643,
        "sender_full_name": "Ashwin Iyengar",
        "timestamp": 1587970559
    },
    {
        "content": "<p>I'll try to prioritise these PRs</p>",
        "id": 195382632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1587973507
    },
    {
        "content": "<p>I am trying to state the following lemma</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span> <span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">discrete_valuation_ring</span>\n<span class=\"n\">def</span> <span class=\"n\">uniformizers</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">R</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">π</span> <span class=\"bp\">|</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">π</span><span class=\"o\">}</span> <span class=\"o\">:</span><span class=\"n\">set</span> <span class=\"n\">R</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">R</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">element_of_dvr</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nonzero</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unif</span><span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"err\">∈</span> <span class=\"n\">uniformizers</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"n\">associated</span> <span class=\"n\">r</span> <span class=\"n\">π</span><span class=\"bp\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>and I get two errors : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">nonzero</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_mem</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span><span class=\"o\">],</span> <span class=\"n\">set</span> <span class=\"n\">R</span><span class=\"o\">)</span>  <span class=\"c1\">-- regarding the uniformizer</span>\n\n<span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">r</span> <span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">nonzero</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">unif</span> <span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"err\">∈</span> <span class=\"n\">uniformizers</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_pow</span> <span class=\"kt\">Prop</span> <span class=\"bp\">ℕ</span>  <span class=\"c1\">-- regarding \\pi ^n</span>\n</code></pre></div>\n\n\n<p>I understand why the second error occurs, but don't know the right has_pow code to fix it. I don't know what causes the first error. Any help is appreciated, thanks!</p>",
        "id": 200535272,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1591877478
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> I think it might be better to write <code>def is_uniformizer (\\pi : R) := ...</code></p>",
        "id": 200536053,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591877983
    },
    {
        "content": "<p>You usually don't want to reason about the set of all uniformizers, just about one uniformizer.</p>",
        "id": 200536108,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591878004
    },
    {
        "content": "<p>For the second error: it's trying to raise <code>associated r \\pi</code> to the power <code>n</code>. That's not what you mean. So put parens around <code>\\pi ^ n</code> <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 200536163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591878055
    },
    {
        "content": "<p>I see! That makes sense. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_uniformizer</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">π</span><span class=\"o\">}</span> <span class=\"o\">:</span><span class=\"n\">set</span> <span class=\"n\">R</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">R</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">element_of_dvr</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nonzero</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unif</span> <span class=\"o\">:</span> <span class=\"n\">is_uniformizer</span> <span class=\"n\">π</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"n\">associated</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">π</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>shows the error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">is_uniformizer</span> <span class=\"n\">π</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">π</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Did I end up defining is_uniformizer as a function which gives output \\pi?</p>",
        "id": 200547645,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1591883970
    },
    {
        "content": "<p>No, I guess that you have <code>variable (R : Type*)</code> somewhere above this definition.</p>",
        "id": 200547773,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591884020
    },
    {
        "content": "<p>That makes <code>R</code> an explicit variable of <code>is_uniformizer</code>.</p>",
        "id": 200547803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591884034
    },
    {
        "content": "<p>So you have to type <code>is_uniformizer R \\pi</code>, or you have to change it to <code>variable {R : Type*}</code></p>",
        "id": 200547851,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591884060
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> Btw, about <code>element_of_dvr</code>... this is of course a useful statement. But don't you want the slightly stronger statement that says that there is also a unique unit such that <code>x = u * pi ^ n</code></p>",
        "id": 200548105,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1591884160
    },
    {
        "content": "<p>Yes, it might be needed for the well-definedness of the associated valuation. I will add it, thank you!</p>",
        "id": 200549010,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1591884561
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">local_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">non_field</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">principal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">is_principal</span><span class=\"o\">)</span>\n\n<span class=\"kn\">structure</span> <span class=\"n\">discrete_valuation_ring</span><span class=\"bp\">.</span><span class=\"n\">discrete_valuation</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n\n<span class=\"o\">(</span><span class=\"n\">map_top&#39;</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n\n<span class=\"o\">(</span><span class=\"n\">map_add_leq&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span> <span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">discrete_valuation_ring</span>\n<span class=\"n\">def</span> <span class=\"n\">is_uniformizer</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">π</span><span class=\"o\">}</span> <span class=\"o\">:</span><span class=\"n\">set</span> <span class=\"n\">R</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">R</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">element_of_dvr</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nonzero</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">non_unit</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unif</span> <span class=\"o\">:</span> <span class=\"n\">is_uniformizer</span> <span class=\"n\">π</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"n\">associated</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">π</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">is_principal</span><span class=\"bp\">.</span><span class=\"n\">mem_iff_generator_dvd</span> <span class=\"n\">at</span> <span class=\"n\">non_unit</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>The last line gives me the error,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">rewrite</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span>\n</code></pre></div>\n\n\n<p>I realise why the rw statement is problematic, how can I fix it?</p>",
        "id": 200762335,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592048471
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> There is already <code>principal_ideal_domain R</code>, you can also extend that. (That way, every DVR is automatically a PID in lean)</p>",
        "id": 200762407,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592048603
    },
    {
        "content": "<p>also, your definition of discrete valuation seems to mix the additive and multiplicative points of view.</p>",
        "id": 200762524,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592048772
    },
    {
        "content": "<p>I had tried that earlier, </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">local_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">non_field</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span> <span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>gives the error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"err\">&#39;</span><span class=\"kn\">structure</span><span class=\"err\">&#39;</span> <span class=\"n\">header</span><span class=\"o\">,</span> <span class=\"n\">field</span> <span class=\"err\">&#39;</span><span class=\"n\">add&#39;</span> <span class=\"k\">from</span> <span class=\"err\">&#39;</span><span class=\"n\">local_ring&#39;</span> <span class=\"n\">has</span> <span class=\"n\">already</span> <span class=\"n\">been</span> <span class=\"n\">declared</span>\n</code></pre></div>",
        "id": 200762547,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592048816
    },
    {
        "content": "<p>Aah... right. The solution is</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n</code></pre></div>\n\n\n<p>That will merge the duplicate fields</p>",
        "id": 200762554,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592048855
    },
    {
        "content": "<p>That does it! The invalid rewrite tactic error stays, though..</p>",
        "id": 200763029,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592049617
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> Should <code>submodule.is_prinicipal</code> be a class?</p>",
        "id": 200763439,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592050413
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">principal_ideal_domain</span><span class=\"bp\">.</span><span class=\"n\">principal</span> <span class=\"o\">(</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">nonunits_ideal</span> <span class=\"n\">R</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_comm_ring</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_local_ring</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">ideal</span> <span class=\"n\">R</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span> <span class=\"n\">R</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">principal_ideal_domain</span><span class=\"bp\">.</span><span class=\"n\">to_integral_domain</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_principal_ideal_domain</span> <span class=\"n\">R</span> <span class=\"bp\">_</span><span class=\"n\">inst_1</span><span class=\"o\">)))</span>\n</code></pre></div>\n\n\n<p>With the following code</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n\n<span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kn\">universe</span> <span class=\"kn\">variable</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">local_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">non_field</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span><span class=\"o\">)</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">discrete_valuation_ring</span>\n<span class=\"kn\">open</span> <span class=\"n\">local_ring</span>\n\n<span class=\"n\">def</span> <span class=\"n\">is_uniformizer</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">({</span><span class=\"n\">π</span><span class=\"o\">}</span> <span class=\"o\">:</span><span class=\"n\">set</span> <span class=\"n\">R</span> <span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">R</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">element_of_dvr</span> <span class=\"o\">{</span><span class=\"n\">r</span> <span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">nonzero</span><span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">non_unit</span> <span class=\"o\">:</span> <span class=\"n\">r</span> <span class=\"err\">∈</span> <span class=\"n\">nonunits_ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">unif</span> <span class=\"o\">:</span> <span class=\"n\">is_uniformizer</span> <span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃!</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">,</span> <span class=\"n\">associated</span> <span class=\"n\">r</span> <span class=\"o\">(</span><span class=\"n\">π</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">principal_ideal_domain</span><span class=\"bp\">.</span><span class=\"n\">principal</span> <span class=\"n\">R</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"c1\">-- error is here</span>\n  <span class=\"n\">rw</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">is_principal</span><span class=\"bp\">.</span><span class=\"n\">mem_iff_generator_dvd</span> <span class=\"o\">(</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"n\">at</span> <span class=\"n\">non_unit</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 200763565,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592050587
    },
    {
        "content": "<p>This is not nice</p>",
        "id": 200763573,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592050601
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">structure</span> <span class=\"n\">discrete_valuation_ring</span><span class=\"bp\">.</span><span class=\"n\">discrete_valuation</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"kn\">extends</span> <span class=\"n\">R</span> <span class=\"bp\">→*</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">map_top&#39;</span> <span class=\"o\">:</span> <span class=\"n\">to_fun</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">map_add_leq&#39;</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">to_fun</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">max</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"n\">y</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>This doesn't look right. Are we supposed to be modelling the p-adic valuation or the p-adic norm? If the valuation then the valuation of 0 should be +infty. If the norm then the norm of pi will be between 0 and 1, and so which integer will you use?</p>",
        "id": 200763579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592050620
    },
    {
        "content": "<p>I think we should ignore that code for now...</p>",
        "id": 200763589,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592050637
    },
    {
        "content": "<p>But I agree with the point</p>",
        "id": 200763596,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592050657
    },
    {
        "content": "<p>I've never really used <code>[principal_ideal_domain R]</code> before... I'm not sure if it's in optimal form.</p>",
        "id": 200763652,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592050708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> what's going on here?</p>",
        "id": 200763799,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592050980
    },
    {
        "content": "<p>I'm starting to think more and more that we should just go for</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_local_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"c1\">-- or</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"c1\">-- or</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_principal_ideal_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"c1\">-- etc</span>\n</code></pre></div>",
        "id": 200763858,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592051057
    },
    {
        "content": "<p>what's the question?</p>",
        "id": 200764027,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592051309
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/DVRs/near/200763565\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/DVRs/near/200763565</a></p>",
        "id": 200764047,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592051345
    },
    {
        "content": "<p>Is it about unbundling ring classes into mixins?</p>",
        "id": 200764051,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592051349
    },
    {
        "content": "<p>It's about inferred instances not being defeq</p>",
        "id": 200764058,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592051363
    },
    {
        "content": "<p>aha, this came up not too long ago</p>",
        "id": 200764133,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592051423
    },
    {
        "content": "<p>ooh, is this the \"bug\" that Kenny found?</p>",
        "id": 200764150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592051485
    },
    {
        "content": "<p>With alternating old and new structures?</p>",
        "id": 200764155,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592051499
    },
    {
        "content": "<p><a href=\"#narrow/stream/113488-general/topic/old_structure_cmd/near/199101684\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/old_structure_cmd/near/199101684</a></p>",
        "id": 200764158,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592051508
    },
    {
        "content": "<p>It's actually a kind of fundamental problem</p>",
        "id": 200764209,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592051567
    },
    {
        "content": "<p>One solution would be to always explode all instances into their constructors (which I think happens behind the scenes a lot anyway) but this seems pretty expensive</p>",
        "id": 200764222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592051639
    },
    {
        "content": "<p>it also doesn't work for instances that are variables</p>",
        "id": 200764261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592051653
    },
    {
        "content": "<p>So... how should we turn this into working code?</p>",
        "id": 200764333,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592051789
    },
    {
        "content": "<p>I suspect that sprinkling some old structures around will fix the problem</p>",
        "id": 200764399,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592051901
    },
    {
        "content": "<p>But new structure were introduced for a reason, right?</p>",
        "id": 200764421,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592051956
    },
    {
        "content": "<p>It seems like now everything has to become an old structure...</p>",
        "id": 200764426,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592051971
    },
    {
        "content": "<p>And the hierarchy is far from finished.</p>",
        "id": 200764434,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592051991
    },
    {
        "content": "<p><code>complete_discrete_valuation_ring</code> will throw some topology into the mix, etc...</p>",
        "id": 200764477,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592052014
    },
    {
        "content": "<p>Would it be really bad to have a spine for the hierarchy which wouldn't be too big (I mean, semigroup -&gt; monoid -&gt; group -&gt; ring -&gt; comm_ring -&gt; field, add or subtract a few things) and mixins for additional properties like we do for topological spaces?</p>",
        "id": 200764491,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592052068
    },
    {
        "content": "<p>I think that would be a good idea.</p>",
        "id": 200764504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592052094
    },
    {
        "content": "<p>This is one reason why I would like to have an interactive graph of the hierarchy...</p>",
        "id": 200764612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592052265
    },
    {
        "content": "<p>Oh wait, <code>discrete_valuation_ring</code> is actually broken</p>",
        "id": 200764617,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592052278
    },
    {
        "content": "<p>check out the constructor:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">discrete_valuation_ring</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">to_comm_ring</span> <span class=\"o\">:</span> <span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">to_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">nonzero</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"n\">is_local</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">is_unit</span> <span class=\"n\">a</span> <span class=\"bp\">∨</span> <span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">[</span><span class=\"bp\">_</span><span class=\"n\">to_integral_domain</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">],</span>\n  <span class=\"o\">(</span><span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">is_principal</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">nonunits_ideal</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span> <span class=\"bp\">→</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span>\n</code></pre></div>",
        "id": 200764626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592052296
    },
    {
        "content": "<p>note the separate appearance of <code>comm_ring R</code> and <code>integral_domain R</code></p>",
        "id": 200764636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592052319
    },
    {
        "content": "<p>the unification problem fails because it's actually false</p>",
        "id": 200764642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592052351
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/200764636\">said</a>:</p>\n<blockquote>\n<p>note the separate appearance of <code>comm_ring R</code> and <code>integral_domain R</code></p>\n</blockquote>\n<p>How did that happen?</p>",
        "id": 200764682,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592052388
    },
    {
        "content": "<p>the double extends</p>",
        "id": 200764687,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592052405
    },
    {
        "content": "<p>Shouldn't old_structure_cmd take care of that?</p>",
        "id": 200764697,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592052424
    },
    {
        "content": "<p>As was noted previously, <code>old_structure_cmd</code> was not written with extensions of new structures in mind</p>",
        "id": 200764707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592052446
    },
    {
        "content": "<p>Which structure isn't old?</p>",
        "id": 200764709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592052455
    },
    {
        "content": "<p>Both, I think</p>",
        "id": 200764714,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592052464
    },
    {
        "content": "<p><code>local_ring</code> and <code>principal_ideal_domain</code> are both new structures</p>",
        "id": 200764760,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592052511
    },
    {
        "content": "<p>you can tell because if you <code>#print</code> them you don't get a mile long list of fields</p>",
        "id": 200764766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592052531
    },
    {
        "content": "<p>Which of course they shouldn't have been, because they extend old structures, and they aren't the top of the hierarchy</p>",
        "id": 200764771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592052542
    },
    {
        "content": "<p>I think this could be addressed by fixing old structures extending new structures</p>",
        "id": 200764781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592052579
    },
    {
        "content": "<p>the compilation here is pretty unquestionably wrong</p>",
        "id": 200764789,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592052594
    },
    {
        "content": "<p>What is the Lean 3 idiomatic way to proceed?</p>",
        "id": 200765009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592052895
    },
    {
        "content": "<p>Is there any harm in just making them old structures?</p>",
        "id": 200765036,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592052935
    },
    {
        "content": "<p>I think that was bad for performance... hence new structures were introduced.</p>",
        "id": 200765096,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592052981
    },
    {
        "content": "<p>Mario wants to fix lean instead.</p>",
        "id": 200765100,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592052996
    },
    {
        "content": "<p>I am not convinced by the performance argument that was the original motivation for new structures. The performance in question is the time it takes to elaborate a <code>structure</code> definition, which is not the bottleneck in mathlib at all</p>",
        "id": 200765283,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592053209
    },
    {
        "content": "<p>possibly also structure literals are affected</p>",
        "id": 200765313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592053263
    },
    {
        "content": "<p>I just tried making <code>local_ring</code> an old structure and I got some odd errors. It may not be a drop in replacement</p>",
        "id": 200765379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592053323
    },
    {
        "content": "<p>the old structure command doesn't like to extend things in a dependent sequence</p>",
        "id": 200765418,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592053398
    },
    {
        "content": "<p>that is, <code>class foo X extends bar X, @baz X &lt;typeclass problem involving _inst_bar_X&gt;</code> fails</p>",
        "id": 200765476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1592053484
    },
    {
        "content": "<p>So what do we do?</p>",
        "id": 200769162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592058832
    },
    {
        "content": "<p>I want a working definition of <code>discrete_valuation_ring</code> (DVR) and now I'm entering a period in my life where I should have a lot more time for Lean; it would be nice to get this moving again. Recall that the issue is that the definition should be this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">local_ring</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">non_field</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span> <span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>but <code>principal_ideal_domain</code> (PID) and <code>local_ring</code> have overlapping fields, and the obvious fix of using the old structure command doesn't work because neither PID or local_ring were made with the old structure command. </p>\n<p>Approach 1: make PID and local ring old structures and then pick up the pieces.<br>\nApproach 2: make DVR by just extending <code>comm_ring</code>, adding in all the fields, and then defining the projections to PID and local ring manually. <br>\nApproach 3: some other idea</p>\n<p>I would like a definition of DVR and am prepared to work for it. What should I do? Any advice?</p>",
        "id": 200959589,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592265183
    },
    {
        "content": "<p>Mario tried making <code>local_ring</code> an old structure so I thought I'd try PID. I stuck <code>set_option old_structure_cmd true</code> near the top of <code>ring_theory/principal_ideal_domain</code>. I am getting errors in <code>gaussian_int.lean</code>:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">ambiguous</span> <span class=\"n\">overload</span><span class=\"o\">,</span> <span class=\"n\">possible</span> <span class=\"n\">interpretations</span>\n    <span class=\"n\">add_comm</span>\n    <span class=\"n\">principal_ideal_domain</span><span class=\"bp\">.</span><span class=\"n\">add_comm</span>\n</code></pre></div>\n\n\n<p>Does that mean I've done something wrong? I can fix everything by changing it to <code>_root_.add_comm</code>.</p>\n<p>Apparently special functions and a bunch of calculus uses principal ideal domains. How do I look at the import graph?</p>",
        "id": 200961093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592266578
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/3085\">#3085</a> . Let me know if I'm doing the wrong thing.</p>",
        "id": 200962056,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592267714
    },
    {
        "content": "<p>Mario's comment above refers to the following issue:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n<span class=\"n\">class</span> <span class=\"n\">local_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_ring</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">nonzero</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_local</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∨</span> <span class=\"o\">(</span><span class=\"n\">is_unit</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">-</span> <span class=\"n\">a</span><span class=\"o\">)))</span>\n</code></pre></div>\n\n\n<p>-&gt;</p>\n<div class=\"codehilite\"><pre><span></span><code>type mismatch at application\n  @comm_ring.to_ring α mul_comm\nterm\n  mul_comm\nhas type\n  ∀ (a b : α), a * b = b * a\nbut is expected to have type\n  comm_ring α\n</code></pre></div>\n\n\n<p>Can I solve this by not extending <code>nonzero \\a</code> and instead just adding the <code>zero_ne_one</code> field and a projection from local_ring to nonzero?</p>",
        "id": 200964341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592270512
    },
    {
        "content": "<p>I have literally epsilon understanding of this structure command stuff. Yes I know there's a wiki page about it. I just don't understand the underlying issues properly enough for the page to help.</p>",
        "id": 200964395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592270559
    },
    {
        "content": "<p>What about the suggestion to not bundle any operations at all for PID, since it is just a property. That is, introduce <code>is_PID</code>.</p>",
        "id": 200965659,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592272183
    },
    {
        "content": "<p>Similarly for <code>is_local</code></p>",
        "id": 200965732,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592272252
    },
    {
        "content": "<p>What are your thoughts about using some definition like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n\n<span class=\"n\">class</span> <span class=\"n\">DVR</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">A</span>  <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val_cond</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">z</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"bp\">∨</span> <span class=\"n\">y</span> <span class=\"bp\">*</span> <span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- i.e. A is a valuation ring</span>\n<span class=\"o\">(</span><span class=\"n\">nonfield</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">u</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">u</span> <span class=\"bp\">*</span> <span class=\"n\">v</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"c1\">-- or some other formulation</span>\n</code></pre></div>\n\n\n<p>Any valuation ring which is a PID is a DVR. Actually, any valuation ring which is Noetherian is a DVR!</p>\n<p>Proving the local ring instance is simple enough.... here's a working gist:<br>\n<a href=\"https://gist.github.com/adamtopaz/7e573ec60777001ace5a3479608f992e\">https://gist.github.com/adamtopaz/7e573ec60777001ace5a3479608f992e</a></p>",
        "id": 200966632,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592273404
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/200964341\">said</a>:</p>\n<blockquote>\n<p>Can I solve this by not extending <code>nonzero \\a</code> and instead just adding the <code>zero_ne_one</code> field and a projection from local_ring to nonzero?</p>\n</blockquote>\n<p>That's what I did for the algebraic hierarchy (e.g. <code>domain</code>)</p>",
        "id": 200967220,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592274274
    },
    {
        "content": "<p>TIL what a local ring is, that's not as scary as I feared</p>",
        "id": 200967501,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1592274686
    },
    {
        "content": "<p>maybe you're confused with local field, which is slightly scarier</p>",
        "id": 200967720,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592274968
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/200965732\">said</a>:</p>\n<blockquote>\n<p>Similarly for <code>is_local</code></p>\n</blockquote>\n<p><code>is_local_ring</code> already exists. I'm all in favour of trying to add <code>is_pid</code>, <code>is_dvr</code>, <code>is_noetherian</code>, <code>is_integrally_closed</code>, etc...</p>",
        "id": 200973631,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592283727
    },
    {
        "content": "<p>how about <code>is_ring</code> and <code>is_comm_ring</code> predicated on semirings</p>",
        "id": 200973668,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592283817
    },
    {
        "content": "<p>oh wait that doesn't work because you need negation which isn't Prop</p>",
        "id": 200973752,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592283928
    },
    {
        "content": "<p>but if you have <code>is_integral_domain</code> then <code>normalization_domain</code> will be a pain in the bottom</p>",
        "id": 200973799,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592283964
    },
    {
        "content": "<p>Why?</p>",
        "id": 200979158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592290851
    },
    {
        "content": "<p>Mathlib doesn't have general valuation rings right? Would it make sense for you to define a DVR like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">noetherian</span>\n\n<span class=\"n\">class</span> <span class=\"n\">valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">integral_domain</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val_cond</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">∣</span> <span class=\"n\">b</span> <span class=\"bp\">∨</span> <span class=\"n\">b</span> <span class=\"err\">∣</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">valuation_ring</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">is_noetherian</span> <span class=\"o\">:</span> <span class=\"n\">is_noetherian_ring</span> <span class=\"n\">A</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">nonfield</span> <span class=\"o\">:</span> <span class=\"bp\">...</span> <span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>Presumably most things one might prove about DVRs actually hold for arbitrary valuation rings.</p>",
        "id": 201030275,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592320517
    },
    {
        "content": "<p>General valuations (but not general valuation rings) are around the corner. I think we can have them in one or two weeks, depending on the review process...</p>",
        "id": 201030488,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592320588
    },
    {
        "content": "<p>But this <code>valuation_ring</code> (or maybe <code>is_valuation_ring</code>) seems like a useful gadget anyhow.</p>",
        "id": 201030777,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592320702
    },
    {
        "content": "<p>(Zariski–Riemann spaces are coming to mathlib, lol.)</p>",
        "id": 201030824,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592320724
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 201030914,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592320762
    },
    {
        "content": "<p>I guess we'll want to have 13 constructors of <code>is_DVR</code>. There isn't 1 true definition.</p>",
        "id": 201030926,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592320768
    },
    {
        "content": "<p>I was thinking of valuations as in adic spaces...</p>",
        "id": 201030972,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592320787
    },
    {
        "content": "<p>We are currently considering not making them a class at all, and instead making them a predicate on commutative rings</p>",
        "id": 201030995,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592320797
    },
    {
        "content": "<p>So still a <code>class</code>, but taking <code>(comm_)ring R</code> as assumption, instead of extending it.</p>",
        "id": 201031175,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592320866
    },
    {
        "content": "<p>I see. Presumably you would want to phrase things like the valuative criteria from AG. So valuation rings could be useful for that.</p>",
        "id": 201031204,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592320884
    },
    {
        "content": "<p>I guess we would want CDVRs as well</p>",
        "id": 201031287,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592320918
    },
    {
        "content": "<p>and a proof that they are henselian</p>",
        "id": 201031336,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592320924
    },
    {
        "content": "<p>What does CDVR stand for?</p>",
        "id": 201031371,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592320941
    },
    {
        "content": "<p>CDVR could also be a predicate</p>",
        "id": 201031378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592320944
    },
    {
        "content": "<p>complete DVR</p>",
        "id": 201031386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592320950
    },
    {
        "content": "<p>ah ok.</p>",
        "id": 201031422,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592320968
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n    <span class=\"o\">[</span><span class=\"n\">topological_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_discrete_valuation_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 201031435,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592320972
    },
    {
        "content": "<p>because it doesn't involve choosing some auxiliary ideal or a topology, the phrase always means \"complete with respect to the topology defined by the max ideal\"</p>",
        "id": 201031441,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592320977
    },
    {
        "content": "<p>We're only missing the last class on that line.</p>",
        "id": 201031456,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592320985
    },
    {
        "content": "<p>Johan that's bad, because then you'd want the topology to be the maximal-ideal-adic one</p>",
        "id": 201031508,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321002
    },
    {
        "content": "<p>i.e. there's still something missing</p>",
        "id": 201031525,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321011
    },
    {
        "content": "<p>Ooh, right, we need another compatibility class.</p>",
        "id": 201031564,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592321029
    },
    {
        "content": "<p><code>distrib++</code></p>",
        "id": 201031597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321040
    },
    {
        "content": "<p>I guess we could add <code>is_cdvr</code> which extends <code>complete_space</code> and <code>is_dvr</code></p>",
        "id": 201031675,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592321059
    },
    {
        "content": "<p>Just don't bother asking for the topology at all, would be another option</p>",
        "id": 201031684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321062
    },
    {
        "content": "<p>Nope...</p>",
        "id": 201031728,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592321079
    },
    {
        "content": "<p>Because <code>Z_p</code></p>",
        "id": 201031739,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592321084
    },
    {
        "content": "<p>\"complete with respect to the topology generated by the max ideal\"</p>",
        "id": 201031766,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321095
    },
    {
        "content": "<p>Maybe this is a bad question - what if we started with a Dedekind domain and used it to define a DVR?</p>",
        "id": 201031826,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592321118
    },
    {
        "content": "<p>Will that play nice with the rest of the topology?</p>",
        "id": 201031837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592321123
    },
    {
        "content": "<p>You can define a dedekind domain after you define DVRs :)</p>",
        "id": 201031887,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592321146
    },
    {
        "content": "<p>We could define DVR's via Dededkind domains, but my gut feeling is that DVRs are conceptually simpler</p>",
        "id": 201031917,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321157
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> I think we just want 10 equivalent definitions, in the end.</p>",
        "id": 201031926,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592321160
    },
    {
        "content": "<p>10 equivalent definitions for DVRs?</p>",
        "id": 201032021,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592321185
    },
    {
        "content": "<p>But ideally we don't want 10 choose 2 theorems,</p>",
        "id": 201032029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321188
    },
    {
        "content": "<p>Yes, there are 10 definitions of DVR on Wikipedia</p>",
        "id": 201032053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321198
    },
    {
        "content": "<p>I will spend some time on this tomorrow; I'll try and get a definition of DVR into mathlib. I'm going for local PID which isn't a field as the \"canonical\" definition, and then there are 9 theorems to prove</p>",
        "id": 201032196,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321265
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/201032029\">said</a>:</p>\n<blockquote>\n<p>But ideally we don't want 10 choose 2 theorems,</p>\n</blockquote>\n<p>No, just 10 constructors.</p>",
        "id": 201032323,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592321307
    },
    {
        "content": "<p>It's not going to be a structure so surely it's 9 theorems?</p>",
        "id": 201032438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321359
    },
    {
        "content": "<p>I was trying to do a PID with a unique prime ideal, and showing that the prime ideal is maximal.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n\n<span class=\"o\">(</span><span class=\"n\">prime_ideal&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"o\">(</span><span class=\"n\">primality</span> <span class=\"o\">:</span> <span class=\"n\">prime_ideal&#39;</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span><span class=\"o\">)</span>\n\n<span class=\"o\">(</span><span class=\"n\">is_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">prime_ideal&#39;</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span><span class=\"o\">)</span>\n\n<span class=\"o\">(</span><span class=\"n\">unique_nonzero_prime_ideal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">prime_ideal&#39;</span><span class=\"o\">)</span>\n\n\n<span class=\"n\">def</span> <span class=\"n\">discrete_valuation_ring</span><span class=\"bp\">.</span><span class=\"n\">prime_ideal</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">discrete_valuation_ring</span><span class=\"bp\">.</span><span class=\"n\">prime_ideal&#39;</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">principal_ideal_domain</span>\n<span class=\"kn\">open</span> <span class=\"n\">discrete_valuation_ring</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prime_ideal_is_maximal</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">prime_ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_maximal</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">prime_ideal</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">is_prime</span><span class=\"bp\">.</span><span class=\"n\">to_maximal_ideal</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 201032470,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592321375
    },
    {
        "content": "<p>The last line gives me an error,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span><span class=\"o\">,</span>\n<span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">prime_ideal</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span>\n<span class=\"err\">⊢</span> <span class=\"o\">(</span><span class=\"n\">prime_ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_maximal</span>\n</code></pre></div>",
        "id": 201032556,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592321404
    },
    {
        "content": "<p>All these definitions should work, but my experience in the past has been that if you just choose a random definition and then formalise some stuff, you might find it's hard to get it into mathlib, and I know now that it's a grave mistake not to have mathlib in mind from the very start</p>",
        "id": 201032676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321445
    },
    {
        "content": "<p>What does getting it into mathlib mean? Isn't it sufficient to pass the Lean checker test?</p>",
        "id": 201032973,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592321582
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> It's going to be a <code>class</code> right? With fields, etc... so it's a souped up structure, so constructors?</p>",
        "id": 201033005,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592321595
    },
    {
        "content": "<p>Wait -- I thought we had just established that <code>is_DVR</code> was going to be a non-class predicate on comm_rings?</p>",
        "id": 201033097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321630
    },
    {
        "content": "<p><code>is_local_ring</code> isn't a class</p>",
        "id": 201033125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321640
    },
    {
        "content": "<p>I thought the plan was <code>is_principal_ideal_domain</code> and <code>is_discrete_valuation_domain</code> both being Props on...actually <code>integral_domain</code> is a class so how about predicates on integral domains?</p>",
        "id": 201033338,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321728
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/201032973\">said</a>:</p>\n<blockquote>\n<p>What does getting it into mathlib mean? Isn't it sufficient to pass the Lean checker test?</p>\n</blockquote>\n<p>No. Mathlib only accepts code which satisfies certain very high standards. I'm not bothered about our general DVR project being of this standard but for the definition itself I think we should engage with the hard question of deciding exactly which implementation we will use for the specification of DVR's.</p>",
        "id": 201033538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321824
    },
    {
        "content": "<p>Once we have this, we can forget about all this nonsense and just prove some theorems</p>",
        "id": 201033580,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321844
    },
    {
        "content": "<p>and the theorems can be refactored and cleaned up later. But if we get the definition wrong then the clean-up process is much much harder</p>",
        "id": 201033619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321872
    },
    {
        "content": "<p>This is why there is currently such a fuss about the definition of a DVR. It has turned into a discussion of whether classes such as <code>principal_ideal_domain</code> should even exist</p>",
        "id": 201033708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321910
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> can you clarify your comments about <code>is_DVR</code> being a class?</p>",
        "id": 201033731,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592321927
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n\n<span class=\"o\">(</span><span class=\"n\">prime_ideal&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"o\">(</span><span class=\"n\">primality</span> <span class=\"o\">:</span> <span class=\"n\">prime_ideal&#39;</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span><span class=\"o\">)</span>\n\n<span class=\"o\">(</span><span class=\"n\">is_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">prime_ideal&#39;</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span><span class=\"o\">)</span>\n\n<span class=\"o\">(</span><span class=\"n\">unique_nonzero_prime_ideal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">prime_ideal&#39;</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">discrete_valuation_ring</span>\n\n<span class=\"n\">def</span> <span class=\"n\">prime_ideal</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n<span class=\"n\">discrete_valuation_ring</span><span class=\"bp\">.</span><span class=\"n\">prime_ideal&#39;</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">is_prime</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">prime_ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"o\">:=</span>\n<span class=\"n\">primality</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">open</span> <span class=\"n\">principal_ideal_domain</span>\n<span class=\"kn\">open</span> <span class=\"n\">discrete_valuation_ring</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">prime_ideal_is_maximal</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">prime_ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_maximal</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">prime_ideal</span> <span class=\"n\">R</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">discrete_valuation_ring</span><span class=\"bp\">.</span><span class=\"n\">is_nonzero</span> <span class=\"o\">},</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_prime</span><span class=\"bp\">.</span><span class=\"n\">to_maximal_ideal</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">discrete_valuation_ring</span>\n</code></pre></div>\n\n\n<p>The fact that the prime ideal was prime was not in Lean's type class inference system.</p>",
        "id": 201034356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592322220
    },
    {
        "content": "<p>The problem with your code (and Lean did a very poor job of pointing this out) was that the inputs to the <code>is_prime.to_maximal_ideal</code> function  look like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">is_prime</span><span class=\"bp\">.</span><span class=\"n\">to_maximal_ideal</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">is_prime.to_maximal_ideal :</span>\n<span class=\"cm\">  ∀ {R : Type u_1} [_inst_1 : principal_ideal_domain R] {S : ideal R}</span>\n<span class=\"cm\">  [hpi : S.is_prime], S ≠ ⊥ → S.is_maximal</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n\n\n<p>(the <code>@</code> means \"show me even the inputs which Lean is supposed to guess!). One of the inputs is <code>hpi : S.is_prime</code> and because that input is in square brackets it means that a system called type class inference is supposed to be used to magic up the proof that the ideal S is prime. In your case, S is <code>prime_ideal R</code> but just because it's called that doesn't mean that the type class inference system knows it's prime :-) The <code>instance</code> line which I added to your code tells the type class inference system that the prime ideal is prime, and then the error goes away.</p>\n<p>Note also that I moved into the <code>discrete_valuation_ring</code> namespace, meaning that I don't have to type <code>discrete_valuation_ring</code> in front of everything.</p>",
        "id": 201035071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592322507
    },
    {
        "content": "<p>Ah, now I understand! In the definition of prime_ideal, I took it to be prime_ideal', but that does not include the primality condition. Thank you!</p>",
        "id": 201036663,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592323123
    },
    {
        "content": "<p>Right -- the <code>instance</code> means \"feed this proof into the type class inference machine\" but the proof was <code>primality</code></p>",
        "id": 201037637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592323460
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/201033731\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> can you clarify your comments about <code>is_DVR</code> being a class?</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I would like to have automation (in this case, the type class system) to take care of \"every DVR is a PID\", and not supply those proofs explicitly.</p>",
        "id": 201038753,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592324001
    },
    {
        "content": "<p>Just like <code>topological_ring R</code> is a class that assumes <code>ring R</code> and <code>topological_space R</code></p>",
        "id": 201038793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592324023
    },
    {
        "content": "<p>How is what you're proposing different to the current definition of PID?</p>",
        "id": 201038969,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592324107
    },
    {
        "content": "<p>The difference is that <code>zero</code> and <code>add</code> etc are no longer fields of that class</p>",
        "id": 201039107,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592324168
    },
    {
        "content": "<p>So the class lives in <code>Prop</code> instead of <code>Type*</code></p>",
        "id": 201039141,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592324184
    },
    {
        "content": "<p>So the change is that were not extending integral_domain but instead asking for it as a typeclass on our type?</p>",
        "id": 201039270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592324256
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n\n<span class=\"n\">class</span> <span class=\"n\">is_principal_ideal_domain</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">principal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">is_principal</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">is_PID_fail</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">integral_domain</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">principal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">),</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">is_principal</span><span class=\"o\">)</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">is_PID_fail</span> <span class=\"c1\">-- Π ..., Type</span>\n</code></pre></div>\n\n\n<p>You think <code> is_principal_ideal_domain</code> is the way to go? I am slightly surprised I had to explicitly tell Lean that it was a Prop.</p>",
        "id": 201039980,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592324573
    },
    {
        "content": "<p>PS it does seem absurd that UFD contains all that data. The analogue would be choosing a generator for each ideal.</p>",
        "id": 201040235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592324691
    },
    {
        "content": "<p>Yeah, <code>structure</code>/<code>class</code> never defaults to <code>Prop</code> for some reason and it is weird.</p>",
        "id": 201040302,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592324740
    },
    {
        "content": "<p>I think some of the separation classes like <code>t2_space</code> used to accidentally not be <code>Prop</code>s.</p>",
        "id": 201040403,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592324770
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Yes, but I would assume <code>[comm_ring R]</code>, and in applications we can assume <code>[integral_domain R]</code>.</p>",
        "id": 201043616,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592326235
    },
    {
        "content": "<p>This way we get principal ideal rings and principal ideal domains in one go (a slight hint of the flexibility I'm hoping this refactor will achieve).</p>",
        "id": 201043689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592326274
    },
    {
        "content": "<p>So do you want <code>is_PIR</code> <em>and</em> <code>is_PID</code>?</p>",
        "id": 201045757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592327204
    },
    {
        "content": "<p>No, only <code>is_PIR</code></p>",
        "id": 201045847,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592327280
    },
    {
        "content": "<p>Because it covers everything</p>",
        "id": 201045903,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592327294
    },
    {
        "content": "<p>I guess we'll end up with \"principal ideal semirings\" (-;</p>",
        "id": 201045991,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592327355
    },
    {
        "content": "<p>and we'll also end up with mathematicians asking \"where are PIDs?\" and we'll have to say \"oh you use ID and PIR\" and they'll say \"why no PID?\"</p>",
        "id": 201046077,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592327398
    },
    {
        "content": "<p>Similarly, we'll probably define \"discrete valuation semiring\". But all theorems will assume <code>integral_domain</code>.</p>",
        "id": 201046082,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592327401
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/201046077\">said</a>:</p>\n<blockquote>\n<p>and we'll also end up with mathematicians asking \"where are PIDs?\" and we'll have to say \"oh you use ID and PIR\" and they'll say \"why no PID?\"</p>\n</blockquote>\n<p>Because it means proving things twice?</p>",
        "id": 201046169,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592327425
    },
    {
        "content": "<p>Maybe we could at some point have some syntactic sugar to make things look nicer.</p>",
        "id": 201046734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592327718
    },
    {
        "content": "<p>But at the moment I would go for maximum flexibility.</p>",
        "id": 201046756,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592327730
    },
    {
        "content": "<p>I am trying to prove that a local PID that is not a field is a DVR, using the definition that a DVR is a PID with a unique nonzero prime ideal (doing it to get comfortable with Lean).</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">R</span> <span class=\"o\">:=</span>\n\n<span class=\"o\">(</span><span class=\"n\">prime_ideal&#39;</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n\n<span class=\"o\">(</span><span class=\"n\">primality</span> <span class=\"o\">:</span> <span class=\"n\">prime_ideal&#39;</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span><span class=\"o\">)</span>\n\n<span class=\"o\">(</span><span class=\"n\">is_nonzero</span> <span class=\"o\">:</span> <span class=\"n\">prime_ideal&#39;</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span><span class=\"o\">)</span>\n\n<span class=\"o\">(</span><span class=\"n\">unique_nonzero_prime_ideal</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"n\">R</span><span class=\"o\">,</span> <span class=\"n\">P</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span> <span class=\"bp\">∨</span> <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"n\">prime_ideal&#39;</span><span class=\"o\">)</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">principal_ideal_domain</span>\n<span class=\"kn\">open</span> <span class=\"n\">local_ring</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">local_pid_dvr</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">is_local</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pid</span><span class=\"o\">:</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">non_field</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">S</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">use</span> <span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">zero_mem_nonunits</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The first line of the proof gives me 6 goals, 5 of which are basically properties of ideals. Since S is a local ring, why do I need to reprove it? Also, the second line gives me an error </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">function</span> <span class=\"n\">expected</span> <span class=\"n\">at</span>\n  <span class=\"n\">zero_mem_nonunits</span>\n<span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"mi\">0</span> <span class=\"err\">∈</span> <span class=\"n\">nonunits</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">↔</span> <span class=\"mi\">0</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span>\n</code></pre></div>",
        "id": 201156428,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592407149
    },
    {
        "content": "<p>A <a href=\"https://leanprover-community.github.io/mwe.html\">#mwe</a> needs imports!</p>",
        "id": 201157296,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1592407501
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> the way you have set up a DVR, it contains data (the choice of a prime ideal) so you don't want to use <code>lemma</code> -- this is a construction, the way you've set it up, so it's a <code>definition</code>. The way to make terms of a structure is like this:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">local_pid_dvr</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">is_local</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pid</span><span class=\"o\">:</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">non_field</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">S</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">prime_ideal&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">primality</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">is_nonzero</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">unique_nonzero_prime_ideal</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">pid</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>but <code>principal_ideal_domain</code> is a class so you should be using <code>[]</code> brackets (and local_ring too)</p>",
        "id": 201158165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592407844
    },
    {
        "content": "<p>Thank you, that was very helpful. But I am back with the type mismatch errors, I am guessing it is the new/old structure problem cropping up?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">local_pid_dvr</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">is_local</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">pid</span><span class=\"o\">:</span> <span class=\"n\">principal_ideal_domain</span> <span class=\"n\">S</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">non_field</span> <span class=\"o\">:</span> <span class=\"n\">local_ring</span><span class=\"bp\">.</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">S</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span> <span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">discrete_valuation_ring</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">prime_ideal&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">S</span><span class=\"o\">),</span>\n  <span class=\"n\">primality</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">nonunits_ideal</span> <span class=\"n\">S</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_prime</span><span class=\"o\">,</span>\n  <span class=\"n\">is_nonzero</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">unique_nonzero_prime_ideal</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"bp\">..</span><span class=\"n\">pid</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I get the error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">field</span> <span class=\"err\">&#39;</span><span class=\"n\">prime_ideal&#39;&#39;</span>\n  <span class=\"n\">nonunits_ideal</span> <span class=\"n\">S</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">ideal</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_comm_ring</span> <span class=\"n\">S</span> <span class=\"n\">is_local</span><span class=\"o\">)</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">ideal</span> <span class=\"n\">S</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">integral_domain</span><span class=\"bp\">.</span><span class=\"n\">to_comm_ring</span> <span class=\"n\">S</span>\n       <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_integral_domain</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">principal_ideal_domain</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">to_integral_domain</span> <span class=\"n\">S</span> <span class=\"n\">pid</span><span class=\"o\">)</span> <span class=\"bp\">_</span><span class=\"o\">)))</span>\n</code></pre></div>",
        "id": 201164685,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592410680
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> Yes, that looks like it is getting the wrong ring structure again.</p>",
        "id": 201165504,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592411056
    },
    {
        "content": "<p>We really need to fix this... but I won't have time for such a project the next few days <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 201165556,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592411082
    },
    {
        "content": "<p>Oh, no worries, I am just trying to see how far I can go, and just get comfortable with the language.</p>",
        "id": 201166014,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592411309
    },
    {
        "content": "<p>I will fix it the moment I am done with all this work admin (which has a deadline of Thurs).</p>",
        "id": 201179146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592417258
    },
    {
        "content": "<p>I am trying to define a discrete valuation field : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">discrete_valuation</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">∨</span> <span class=\"err\">∞</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">min</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)}</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">∞</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I get the error </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">unknown</span> <span class=\"n\">identifier</span> <span class=\"err\">&#39;</span><span class=\"n\">v&#39;</span>\n</code></pre></div>\n\n\n<p>How can I fix this? Thanks!</p>",
        "id": 201338554,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592523420
    },
    {
        "content": "<p>the second line has two binders</p>",
        "id": 201338652,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592523504
    },
    {
        "content": "<p>Is <code>ℤ ∨ ∞</code> a type? if not, maybe you mean <code>with_top</code></p>",
        "id": 201338682,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592523551
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">min</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)}</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">\\</span><span class=\"n\">top</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 201338782,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592523634
    },
    {
        "content": "<p>Always look at the first error</p>",
        "id": 201338812,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592523680
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 201338852,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592523714
    },
    {
        "content": "<p>The following does not throw errors on my machine</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">*</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 201339124,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592523955
    },
    {
        "content": "<p>what does open_locale classical do?</p>",
        "id": 201339201,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592523991
    },
    {
        "content": "<p>it tells lean to <em>not</em> worry about stuff like the law of excluded middle</p>",
        "id": 201339257,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592524053
    },
    {
        "content": "<p>before I added it, it wanted me to supply a decidable linear order on <code>K</code></p>",
        "id": 201339283,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592524076
    },
    {
        "content": "<p>(important edit to the previous post)</p>",
        "id": 201339379,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592524156
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 201339559,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592524322
    },
    {
        "content": "<p>most of the errors lean gives you are easy to understand. When I first put in </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">discrete_valuation</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">∨</span> <span class=\"err\">∞</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I got <code>unknown identifier v</code>. If you look near the first appearance of the identifier <code>v</code>, there are two binders. So Lean read the first one and was expecting an expression that defines a type; instead it got <code>v</code> which it has never heard of before</p>",
        "id": 201339819,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592524556
    },
    {
        "content": "<p>Oh I didn't even notice the bad syntax on the first line, I assumed the error was later.</p>",
        "id": 201340019,
        "sender_full_name": "Reid Barton",
        "timestamp": 1592524738
    },
    {
        "content": "<p>Next I try this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">∨</span> <span class=\"err\">∞</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>and I get <code>unknown identifier field</code>, which means I haven't imported enough of mathlib to get fields</p>",
        "id": 201340065,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592524787
    },
    {
        "content": "<p>I think this definition is missing a nontriviality assumption. E.g. you can  ensure v is surjective (or at least nontrivial). Otherwise, this definition will include the trivial valuation.</p>",
        "id": 201340204,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592524901
    },
    {
        "content": "<p>Next I try this</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">∨</span> <span class=\"err\">∞</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>and <code>field</code> gets recognized. Next I get <code>unexpected token</code>. The two unicode characters that pop out at me are <code>ℤ</code> and <code>∞</code>. I know I've seen <code>ℤ</code> before, but I don't know about the other one. To confirm, I try the following and it works</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"bp\">ℤ</span> <span class=\"bp\">∨</span> <span class=\"err\">∞</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 201340207,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592524905
    },
    {
        "content": "<p>Now I add the rest</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">min</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)}</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>and get multiple unknown identifiers for <code>x</code> and <code>y</code>. x and y appear a lot of times, sometimes with a forall and sometimes not. I add some quantifiers and those errors go away</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span> <span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">min</span><span class=\"o\">{</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)}</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 201340438,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592525101
    },
    {
        "content": "<p>Now I have a much longer error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">min</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">min</span> <span class=\"o\">{</span><span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">v</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n</code></pre></div>",
        "id": 201340463,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592525137
    },
    {
        "content": "<p>Maybe the question marks look scary, but just treat <code>?m_1</code> as a variable.</p>",
        "id": 201340531,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592525167
    },
    {
        "content": "<p>It says that a certain expression is supposed to have type <code>with_top ℤ</code>, which is the image of the valuation map. Mathematically, I agree that's the right type.</p>",
        "id": 201340577,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592525213
    },
    {
        "content": "<p>next I do <code>#check min</code> and lean tells me its type is <code>min : ?M_1 → ?M_1 → ?M_1</code>. That means it's a function of two arguments. In Lean, a function of two arguments is written like <code>min (v x) (v y)</code>, with only spaces separating the function and arguments.</p>",
        "id": 201340672,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592525299
    },
    {
        "content": "<p>I can also do <code>#check @min</code> to see <code>min : Π {α : Type u_1} [_inst_1 : decidable_linear_order α], α → α → α</code><br>\nthis means that min only applies to types which are known to be <code>decidable_linear_order</code>s</p>",
        "id": 201340750,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592525371
    },
    {
        "content": "<p>where by \"known to be\" I mean \"known by the typeclass-inference systems\"</p>",
        "id": 201340760,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592525383
    },
    {
        "content": "<p>apparently lean stops complaining at this point, although I thought before lean had complained about inferring the order and the field operations on <code>K</code></p>",
        "id": 201340861,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1592525505
    },
    {
        "content": "<p>I see. That was very useful, thanks a lot! I didn't know about #check @... , will keep it in mind.</p>",
        "id": 201341141,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592525810
    },
    {
        "content": "<p>I am trying to define discrete valuations via discrete valuation fields : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_trivial</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">discrete_valuation_field</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">discrete_valuation_field</span><span class=\"bp\">.</span><span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span> <span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">discrete_valuation_field</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n</code></pre></div>\n\n\n<p>The last definition gives the error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_1</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span>\n<span class=\"err\">⊢</span> <span class=\"n\">field</span> <span class=\"n\">K</span>\n</code></pre></div>\n\n\n<p>I don't know why there is a type class instance error here. Help is appreciated. Thanks!</p>",
        "id": 201405400,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1592580557
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">discrete_valuation_field</span><span class=\"bp\">.</span><span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span> <span class=\"o\">]</span>\n</code></pre></div>",
        "id": 201405648,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1592580651
    },
    {
        "content": "<p>i.e. insert the fact that K is a field -- this is what Lean is telling you that it can't figure out.</p>",
        "id": 201405679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592580680
    },
    {
        "content": "<p>oh and it's a <code>def</code> not an <code>instance</code>.</p>",
        "id": 201405992,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592580837
    },
    {
        "content": "<p>You use <code>instance</code> for a definition which you want to teach to the type class inference system (the stuff in square brackets which you want Lean to fill in).</p>",
        "id": 201406089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592580884
    },
    {
        "content": "<p>The units of the valuation are the preimage of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>. And <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> is a unit. So the \"non_trivial\" assumption is not correct here...</p>",
        "id": 201406256,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592580964
    },
    {
        "content": "<p>Trying to show that the valuation ring coming from a discrete valuation field is an integral domain. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">localization</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">discrete_valuation_field</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">discrete_valuation_field</span><span class=\"bp\">.</span><span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span> <span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">discrete_valuation_field</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">is_integral_domain</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">})</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n   <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span><span class=\"o\">,</span>\n   <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">mul_comm</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rintros</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The g part gives an error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">S</span> <span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">↥</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"n\">x</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_mul</span> <span class=\"n\">S</span>\n</code></pre></div>\n\n\n<p>It seems like Lean sees a and b as elements of S, instead of K. But why was that not an issue for the first goal? Also, how do I show that it is in K? I tried </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">K</span>\n</code></pre></div>\n\n\n<p>but this seems to create a new variable a in K.<br>\nAny help is appreciated. Thank you!</p>",
        "id": 201880262,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593020697
    },
    {
        "content": "<p>(Is it normal that it's taking me 10 min to get the Lean server to even import the files listed here?)</p>",
        "id": 201882169,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1593021622
    },
    {
        "content": "<p>No, it is not normal. The server has been going up and down for a while now.</p>",
        "id": 201883008,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593022053
    },
    {
        "content": "<p>Would it be better to try something like this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">is_integral_domain</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 201883534,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593022332
    },
    {
        "content": "<p>I would say also that its better to use <code>{x : K // 0 ≤ val x}</code>, the <code>//</code> means subtype rather than subset, so there isn't this weird <code>↥</code>, you have the type of all elements satisfying the prop directly. Also less or equal rather than greater or equal as the mathlib setup is to almost always use less than statements (by swapping sides if needed) so it might be easier to find and apply lemmas relating to less than.</p>",
        "id": 201883996,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593022589
    },
    {
        "content": "<p>Also, mathlib has this:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/subring.html#subring.domain\">https://leanprover-community.github.io/mathlib_docs/ring_theory/subring.html#subring.domain</a><br>\nSo if you can prove a subring instance for the valuation ring, then lean should be able to deduce the fact that it's a domain from the fact that any field is a domain.</p>",
        "id": 201884046,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593022621
    },
    {
        "content": "<p>If you do what adam says then you should ignore the first thing I said, looks like that lemma is set up as a set rather than a subtype!</p>",
        "id": 201884227,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593022719
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"127136\">@Alex J. Best</span> Or do what you said + fix mathlib <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 201900713,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593031191
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/201884046\">said</a>:</p>\n<blockquote>\n<p>Also, mathlib has this:<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/ring_theory/subring.html#subring.domain\">https://leanprover-community.github.io/mathlib_docs/ring_theory/subring.html#subring.domain</a><br>\nSo if you can prove a subring instance for the valuation ring, then lean should be able to deduce the fact that it's a domain from the fact that any field is a domain.</p>\n</blockquote>\n<p>I don't know how to work with is_subring, how do I split it into goals? split does not seem to work out</p>",
        "id": 201901006,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593031330
    },
    {
        "content": "<p><code>constructor</code>?</p>",
        "id": 201901948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593031820
    },
    {
        "content": "<p>Or <code>refine { zero_mem := _, etc....}</code></p>",
        "id": 201901973,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593031838
    },
    {
        "content": "<p>Oh, ok. Thank you!</p>",
        "id": 201902683,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593032244
    },
    {
        "content": "<p><code>suggest</code> will find you the <code>refine</code> block that Johan suggested, possibly along with lemmas that let you do the construction with fewer fields</p>",
        "id": 201904431,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593033162
    },
    {
        "content": "<p>Trying to prove that the valuation ring coming from a discrete valuation field is an integral domain. </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">localization</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">val</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">≥</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">discrete_valuation_field</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">discrete_valuation_field</span><span class=\"bp\">.</span><span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span> <span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">discrete_valuation_field</span><span class=\"bp\">.</span><span class=\"n\">val</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">val_zero</span> <span class=\"o\">:</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">non_zero</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">is_integral_domain</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">P</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"n\">rintros</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">mul_comm</span><span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rintros</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">val</span> <span class=\"o\">((</span><span class=\"n\">a</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">),</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">sorry</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mul</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">val_zero</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">add_eq_top</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">non_zero</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"n\">left</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_eq_zero</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I get the error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"err\">↑</span><span class=\"n\">a</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"n\">val</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">},</span>\n<span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">val</span> <span class=\"n\">x</span><span class=\"o\">},</span>\n<span class=\"n\">a_1</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"err\">↑</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>Any help is appreciated. Thank you!</p>",
        "id": 201911580,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593037824
    },
    {
        "content": "<p>Which line gives you an error? I get a different error on the line <code>exact g</code></p>",
        "id": 201911959,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593038092
    },
    {
        "content": "<p>The exact g line gives the error..</p>",
        "id": 201912008,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593038146
    },
    {
        "content": "<p>Hmm but the error you pasted is talking about <code>rewrite</code>, is that the right one?</p>",
        "id": 201912106,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593038178
    },
    {
        "content": "<p>Oh, apologies, I edited the code.</p>",
        "id": 201912216,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593038278
    },
    {
        "content": "<p>wow that is some error</p>",
        "id": 201912259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593038288
    },
    {
        "content": "<p>Yeah, that is why i changed it to rewrite, atleast it is shorter.</p>",
        "id": 201912317,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593038333
    },
    {
        "content": "<p>Ok, the problem is that the little up arrow means different things in your hypothesis and goal, if you want to see what its doing you can do <code>unfold_coes at *</code> to unfold the coercions.</p>",
        "id": 201912321,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593038337
    },
    {
        "content": "<p>You're missing an <code>end discrete_valuation_field</code>.</p>\n<p>The whole point of namespaces is precisely so you <em>don't</em> have to write <code>definition discrete_valuation_field.valuation</code> after the namespace command -- you can just write <code>definition valuation ...</code>. See section 6.3 of <a href=\"https://leanprover.github.io/theorem_proving_in_lean/\">#tpil</a></p>",
        "id": 201912438,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593038404
    },
    {
        "content": "<p>Also, the server has stopped working several times today. Is that the case only for me?</p>",
        "id": 201912549,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593038495
    },
    {
        "content": "<p>It's a server running on your computer</p>",
        "id": 201912557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593038506
    },
    {
        "content": "<p>In this case it tells us that <code>g</code> is saying <code>a.val</code> is zero, as <code>a</code> is really a pair, an element of <code>K</code> and a proof that it has nonnegative valuation. So you can use <code>rw subtype.ext</code> to change the goal to  be of that form.</p>",
        "id": 201912607,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593038525
    },
    {
        "content": "<p>I think the problem here is that Lean might not know what the multiplication on the integral domain is?</p>",
        "id": 201912985,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593038842
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">is_integral_domain</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">eq_zero_or_eq_zero_of_mul_eq_zero</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">zero_ne_one</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>This is the job you have to do here. I'm not sure where Lean got the ring structure on P from.</p>",
        "id": 201913075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593038915
    },
    {
        "content": "<p>But the definition of add and mul must at the very least contain proofs that if 0&lt;=v(a) and 0&lt;=v(b) then 0&lt;=v(a+b) resp v(a*b) and I don't see them in your set-up.</p>",
        "id": 201913136,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593038974
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/201912321\">said</a>:</p>\n<blockquote>\n<p>Ok, the problem is that the little up arrow means different things in your hypothesis and goal, if you want to see what its doing you can do <code>unfold_coes at *</code> to unfold the coercions.</p>\n</blockquote>\n<p>wow! I have been doing a lot more work than that to figure out what my mystery coercions are, and I'm grateful that <code>unfold_coes</code> exists</p>",
        "id": 201913147,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593038978
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/201912549\">said</a>:</p>\n<blockquote>\n<p>Also, the server has stopped working several times today. Is that the case only for me?</p>\n</blockquote>\n<p><a href=\"#narrow/stream/113488-general/topic/crashes/near/201856564\">https://leanprover.zulipchat.com/#narrow/stream/113488-general/topic/crashes/near/201856564</a></p>",
        "id": 201913255,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593039043
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/201913136\">said</a>:</p>\n<blockquote>\n<p>But the definition of add and mul must at the very least contain proofs that if 0&lt;=v(a) and 0&lt;=v(b) then 0&lt;=v(a+b) resp v(a*b) and I don't see them in your set-up.</p>\n</blockquote>\n<p>These follow pretty easily from <code>discrete_valuation_field.mul</code> and <code>discrete_valuation_field.add</code></p>",
        "id": 201913323,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593039107
    },
    {
        "content": "<p>Sure, but the fact that they're not in the original code makes me skeptical that the original code has got the right definition of multiplication. That's why the earlier sorry is there, I think the result is unprovable</p>",
        "id": 201913377,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593039142
    },
    {
        "content": "<p>I just assumed that Lean would ask for it in the proof, because in the definition, the valuation ring is just a set with no structure</p>",
        "id": 201913448,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593039227
    },
    {
        "content": "<p>The way I'm setting it up it will ask you when you define <code>add</code> and <code>mul</code>.</p>",
        "id": 201913511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593039258
    },
    {
        "content": "<p>The definition of <code>add</code> in <code>discrete_valuation_field</code> should be rewritten so it uses &lt;= not &gt;=</p>",
        "id": 201913797,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593039464
    },
    {
        "content": "<p>sorry, I need to go. I didn't finish the job:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">is_integral_domain</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n    <span class=\"n\">change</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n      <span class=\"k\">have</span> <span class=\"n\">h</span> <span class=\"o\">:=</span> <span class=\"n\">add</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">a</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"k\">have</span> <span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">val</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span>\n  <span class=\"kn\">end</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n  <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n</code></pre></div>",
        "id": 201913857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593039493
    },
    {
        "content": "<p>It's very confusing that a.val = a.1, and val is something else too. Maybe change the DVF val to v?</p>",
        "id": 201913918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593039563
    },
    {
        "content": "<p>An alternative approach is to make a term of type <code>subring K</code>. This will involve having to check far fewer axioms</p>",
        "id": 201915860,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593041100
    },
    {
        "content": "<p>Here's a far less painful way to make that subset into a ring:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_add_subgroup</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">neg_mem</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_submonoid</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subring</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span><span class=\"bp\">..</span><span class=\"n\">is_add_subgroup</span><span class=\"o\">,</span> <span class=\"bp\">..</span><span class=\"n\">is_submonoid</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 201946493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593076066
    },
    {
        "content": "<p>What does the .. do?</p>",
        "id": 201961572,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593087882
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/reference/declarations.html#structures-and-records\">https://leanprover.github.io/reference/declarations.html#structures-and-records</a></p>",
        "id": 201961833,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593088100
    },
    {
        "content": "<p>Or the more friendly <a href=\"https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html#objects\">https://leanprover.github.io/theorem_proving_in_lean/structures_and_records.html#objects</a></p>",
        "id": 201961859,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1593088138
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 201961991,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593088227
    },
    {
        "content": "<p>All of the <code>sorry</code>s are Propositions, so you can replace them with <code>begin ... end</code> and then fill in the proofs.</p>",
        "id": 201962034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593088263
    },
    {
        "content": "<p>The last one (is_subring K) gives me an error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"kn\">structure</span> <span class=\"kn\">notation</span> <span class=\"n\">source</span><span class=\"o\">,</span> <span class=\"n\">not</span> <span class=\"n\">a</span> <span class=\"kn\">structure</span>\n  <span class=\"n\">is_add_subgroup</span>\n<span class=\"n\">which</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">set</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n</code></pre></div>",
        "id": 201963049,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593088864
    },
    {
        "content": "<p>It takes an argument</p>",
        "id": 201963202,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593088942
    },
    {
        "content": "<p>Also, why do both is_add_subgroup and add_subgroup exist?</p>",
        "id": 201963253,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593088973
    },
    {
        "content": "<p>One of them will be removed one day (<code>is_add_subgroup</code> will be the one which goes)</p>",
        "id": 201963302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593089008
    },
    {
        "content": "<p>It seemed to me that <code>subring</code> doesn't exist so it seemed simpler to show you a unified approach. The <code>is_</code> stuff might disappear one day, but you don't have to worry about this right now.</p>",
        "id": 201963444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593089085
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 201963884,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593089357
    },
    {
        "content": "<p>Which version of lean and mathlib are you using</p>",
        "id": 201970953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593092887
    },
    {
        "content": "<p>I get similar problems with the latest lean + mathlib about <code>is_add_subgroup</code> not being a structure?<br>\nI tried</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subring</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">val</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n <span class=\"n\">refine</span> <span class=\"n\">is_subring</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>and it looks like it worked?</p>",
        "id": 201971591,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1593093200
    },
    {
        "content": "<p>Oh nice! This seems to work. Thank you!</p>",
        "id": 201975765,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593095099
    },
    {
        "content": "<p>I am trying to define S := {x : K | 0 ≤ v(x) } , the valuation ring.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">localization</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">discrete_valuation_field</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span> <span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">valuation_ring</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">discrete_valuation_field</span>\n</code></pre></div>\n\n\n<p>I can't use the valuation_ring definition because it has no variables. I don't know how to put in a variable S there. The variables line gives me an error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">is_subring</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">is_subring</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>It would simplify my life a great deal if I had this variable S. Any help is appreciated. Thank you!</p>",
        "id": 202114974,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593190283
    },
    {
        "content": "<p>I'm confused about what you want to do with this <code>S</code>.</p>",
        "id": 202115970,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593190875
    },
    {
        "content": "<p>In <code>definition valuation_ring</code> you are not using <code>S</code> at all, so you can just delete it.</p>",
        "id": 202116000,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593190893
    },
    {
        "content": "<p><code>[S = {x : K | 0 ≤ v(x) } ]</code> will not make any sense to lean at all.<br>\nIf you have <code>[blabla]</code> then lean will try to add something to the type class system. That's what <code>[]</code> do. (For example <code>[ring R]</code>.)</p>",
        "id": 202116150,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593190979
    },
    {
        "content": "<p>It means that you tell lean: \"Hey, you know this <code>R</code> that I told you about earlier. Give it the structure of a ring.\"</p>",
        "id": 202116225,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593191023
    },
    {
        "content": "<p>This is just for notation purposes, it would be easier to use S instead of {x : K | 0 ≤ v(x) }</p>",
        "id": 202116331,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593191056
    },
    {
        "content": "<p>Maybe you want notation?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">S</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">valuation_ring</span> <span class=\"n\">K</span>\n</code></pre></div>",
        "id": 202116332,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593191057
    },
    {
        "content": "<p>You shouldn't use <code>{x : K | 0 ≤ v(x) }</code> either, because you have made a definition.</p>",
        "id": 202116379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593191089
    },
    {
        "content": "<p>You want to prove things about that definition instead</p>",
        "id": 202116414,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593191108
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/202116332\">said</a>:</p>\n<blockquote>\n<p>Maybe you want notation?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">S</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">valuation_ring</span> <span class=\"n\">K</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>If this is what you want, it might be better to use <code>local notation</code> instead of <code>notation</code>, so that it is only notation in this file, and not everything that will import this file (in the future).</p>",
        "id": 202116752,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593191332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/202116332\">said</a>:</p>\n<blockquote>\n<p>Maybe you want notation?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">S</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">valuation_ring</span> <span class=\"n\">K</span>\n</code></pre></div>\n\n\n</blockquote>\n<p>Yes! This is what I was looking for! Thanks a ton!</p>",
        "id": 202116961,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593191442
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/202114974\">said</a>:</p>\n<blockquote>\n<p>I am trying to define S := {x : K | 0 ≤ v(x) } , the valuation ring.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">localization</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">discrete_valuation_field</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span> <span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">valuation_ring</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">}</span> <span class=\"o\">]</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">discrete_valuation_field</span>\n</code></pre></div>\n\n\n<p>I can't use the valuation_ring definition because it has no variables. I don't know how to put in a variable S there. The variables line gives me an error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"n\">is_subring</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">is_subring</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Prop</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_2</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u_2</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>It would simplify my life a great deal if I had this variable S. Any help is appreciated. Thank you!</p>\n</blockquote>\n<p>In this example, I have defined valuation_ring. I am now trying to prove 0 is in the ring. The goal is :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">0</span> <span class=\"err\">∈</span> <span class=\"n\">val_ring</span> <span class=\"n\">K</span>\n</code></pre></div>\n\n\n<p>How can I change it to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">0</span> <span class=\"err\">∈</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>I guess the general question is, how do I unravel a definition?</p>\n<p>Any help is appreciated. Thank you!</p>",
        "id": 202190539,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593270717
    },
    {
        "content": "<p><code>unfold val_ring</code>?</p>",
        "id": 202190854,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593270833
    },
    {
        "content": "<p>Oh, great! Thank you!</p>",
        "id": 202190920,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593270885
    },
    {
        "content": "<p>you should also be able to manipulate it without unfolding it, try <code>erw non_zero</code></p>",
        "id": 202190938,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593270913
    },
    {
        "content": "<p>Gives the error </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"n\">v</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"err\">∈</span> <span class=\"n\">val_ring</span> <span class=\"n\">K</span>\n</code></pre></div>",
        "id": 202191009,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593271001
    },
    {
        "content": "<p>ah, that's because we tried the wrong direction. does <code>erw ← non_zero</code> work there? <code>erw</code> means something like \"<code>rw</code>, but do some definitional unfolding first\"</p>",
        "id": 202191576,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593271821
    },
    {
        "content": "<p>Gives this error : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">did</span> <span class=\"n\">not</span> <span class=\"n\">find</span> <span class=\"kn\">instance</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">pattern</span> <span class=\"k\">in</span> <span class=\"n\">the</span> <span class=\"n\">target</span> <span class=\"n\">expression</span>\n  <span class=\"err\">?</span><span class=\"n\">m_2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"err\">∈</span> <span class=\"n\">val_ring</span> <span class=\"n\">K</span>\n</code></pre></div>\n\n\n<p>I am not sure rw would work here, because first it needs to be got from </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"err\">∈</span> <span class=\"o\">{</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">x</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>which is done by simp. Unless erw also tries simp?</p>",
        "id": 202192044,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593272562
    },
    {
        "content": "<p>there's a <code>simp_rw</code> which might work (i'm assuming you've gotten around this on your own and the current conversation is academic; is that right?)</p>",
        "id": 202192750,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593273677
    },
    {
        "content": "<p>Yes, I constructed a lemma that showed v(0) = \\top, and then used that.</p>",
        "id": 202192824,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593273751
    },
    {
        "content": "<p>hopefully the proof of that lemma was just <code>rw non_zero</code>?</p>",
        "id": 202193414,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1593274532
    },
    {
        "content": "<p>Yes</p>",
        "id": 202193436,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593274562
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">localization</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">discrete_valuation_field</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span> <span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- a = ⊤ case</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- true by definition</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ℤ case</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- true by definition</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">val_one_eq_zero</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)),</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">mul</span><span class=\"o\">},</span>\n<span class=\"n\">rw</span> <span class=\"n\">k</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)))</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n<span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">non_zero</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n<span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">sum_zero_iff_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h2</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">val_ring</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">unit_iff_val_zero</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">is_unit</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">rintros</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_unit_iff_exists_inv</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">α</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">val_ring</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">((</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mul_inv_cancel</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">val_one_is_zero</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"k\">by</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">non_zero</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n          <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"o\">},</span>\n<span class=\"o\">{</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">discrete_valuation_field</span>\n</code></pre></div>\n\n\n<p>I don't understand the goal for the second to last sorry:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">α</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">α</span> <span class=\"bp\">*</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">α</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>Any help is appreciated. Thank you!</p>",
        "id": 202294134,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593427583
    },
    {
        "content": "<p>It looks like <code>α</code> has been coerced to somewhere (you should work out where), then you've taken the inverse, and then you've put it back in <code>↥(val_ring K)</code> by providing a proof which just appears as <code>_</code>.</p>",
        "id": 202296415,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593429456
    },
    {
        "content": "<p>Your code doesn't compile for me -- I get an error at <code>rw sum_zero_iff_zero</code></p>",
        "id": 202296432,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593429471
    },
    {
        "content": "<p>Were you hoping to see <code>⊢ α * α⁻¹ = 1</code>?</p>",
        "id": 202296486,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1593429488
    },
    {
        "content": "<p>and I get an error on <code>is_unit alpha</code> in the statement of <code>unit_iff_val_zero</code></p>",
        "id": 202296521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593429541
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> If you want to treat <code>val_ring K</code> as a type then it would be better to define it as the subtype  <code>{ x : K // 0 ≤ v x }</code> (which is a type) rather than the subset <code>{ x : K | 0 ≤ v x }</code> (which is only a term and not a type, and keeps having to be promoted to a type with a confusing little up-arrow)</p>",
        "id": 202296748,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593429726
    },
    {
        "content": "<p>This can be summarised as \"if you want to treat it as a set, don't define it as a subset\"</p>",
        "id": 202296771,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593429759
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/202296486\">said</a>:</p>\n<blockquote>\n<p>Were you hoping to see <code>⊢ α * α⁻¹ = 1</code>?</p>\n</blockquote>\n<p>Yes</p>",
        "id": 202296800,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593429802
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/202296748\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span> If you want to treat <code>val_ring K</code> as a type then it would be better to define it as the subtype  <code>{ x : K // 0 ≤ v x }</code> (which is a type) rather than the subset <code>{ x : K | 0 ≤ v x }</code> (which is only a term and not a type, and keeps having to be promoted to a type with a confusing little up-arrow)</p>\n</blockquote>\n<p>This gives me a lot of type mismatch errors, for example,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">is_add_subgroup</span> <span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">val_ring</span> <span class=\"n\">K</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"err\">?</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">max</span> <span class=\"mi\">1</span> <span class=\"o\">(</span><span class=\"err\">?</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">set</span> <span class=\"err\">?</span><span class=\"n\">m_1</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span>\n</code></pre></div>",
        "id": 202296939,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593429920
    },
    {
        "content": "<p>Yes, it will do.</p>",
        "id": 202297008,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593429967
    },
    {
        "content": "<p>Ah, is this because it must not be treated as a subgroup, but as a group?</p>",
        "id": 202297035,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593430008
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110087\">Scott Morrison</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/202296415\">said</a>:</p>\n<blockquote>\n<p>It looks like <code>α</code> has been coerced to somewhere (you should work out where), then you've taken the inverse, and then you've put it back in <code>↥(val_ring K)</code> by providing a proof which just appears as <code>_</code>.</p>\n</blockquote>\n<p>I think it should be coerced to the field K, because that is where the inverse exists.</p>",
        "id": 202297074,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593430058
    },
    {
        "content": "<p>It seems to me that you are treating <code>val_ring</code> as an independent thing, rather than a subthing of a thing. Don't you have an error on <code>is_unit alpha</code> in the statement of your theorem? What's the first error in your file?</p>",
        "id": 202297234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593430161
    },
    {
        "content": "<p>Not the one which confuses you, but the first one.</p>",
        "id": 202297241,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593430172
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/202297234\">said</a>:</p>\n<blockquote>\n<p>It seems to me that you are treating <code>val_ring</code> as an independent thing, rather than a subthing of a thing. Don't you have an error on <code>is_unit alpha</code> in the statement of your theorem? What's the first error in your file?</p>\n</blockquote>\n<p>I don't have any errors..</p>",
        "id": 202297336,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593430244
    },
    {
        "content": "<p>Are you using the latest mathlib?</p>",
        "id": 202297364,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593430271
    },
    {
        "content": "<p>I can't work with your file right now. If I cut and paste literally what you posted, I have errors.</p>",
        "id": 202297389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593430290
    },
    {
        "content": "<p>If you cut and paste literally what you posted, do you get errors too?</p>",
        "id": 202297416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593430314
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">localization</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">discrete_valuation_field</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span> <span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">∨</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- a = ⊤ case</span>\n    <span class=\"n\">left</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- true by definition</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- ℤ case</span>\n    <span class=\"n\">right</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"c1\">-- true by definition</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">sum_zero_iff_zero</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"c1\">-- the hard way</span>\n    <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"c1\">-- h is a proof of a+a=0</span>\n    <span class=\"c1\">-- split into cases</span>\n    <span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">htop</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- a = ⊤</span>\n      <span class=\"n\">rw</span> <span class=\"n\">htop</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- h is false</span>\n      <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- no cases!</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"c1\">-- a = n</span>\n      <span class=\"n\">cases</span> <span class=\"n\">hn</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">hn</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">hn</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- now h says n+n=0 and our goal is n=0</span>\n      <span class=\"c1\">-- but these are equalities in `with_top ℤ</span>\n      <span class=\"c1\">-- so we need to get them into ℤ</span>\n      <span class=\"c1\">-- A tactic called `norm_cast` does this</span>\n     <span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">h</span> <span class=\"err\">⊢</span><span class=\"o\">,</span>\n      <span class=\"c1\">-- we finally have a hypothesis n + n = 0</span>\n      <span class=\"c1\">-- and a goal n = 0</span>\n      <span class=\"c1\">-- and everything is an integer</span>\n      <span class=\"n\">rw</span> <span class=\"n\">add_self_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n      <span class=\"n\">assumption</span>\n    <span class=\"o\">}</span>\n  <span class=\"o\">},</span>\n   <span class=\"o\">{</span> <span class=\"c1\">-- the easy way</span>\n    <span class=\"n\">intro</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n <span class=\"c1\">--Thanks Kevin!</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">val_one_eq_zero</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)),</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">((</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"o\">{</span><span class=\"n\">apply</span> <span class=\"n\">mul</span><span class=\"o\">},</span>\n<span class=\"n\">rw</span> <span class=\"n\">k</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)))</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n<span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h1</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">non_zero</span> <span class=\"n\">at</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"n\">exfalso</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">one_ne_zero</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n<span class=\"n\">rw</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">sum_zero_iff_zero</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">h2</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">norm_cast</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"n\">linarith</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">val_minus_one_is_zero</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"k\">have</span> <span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">((</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">apply</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"n\">rw</span> <span class=\"n\">k</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">val_one_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">sum_zero_iff_zero</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">val_zero</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"mi\">0</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rw</span> <span class=\"n\">non_zero</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">transitivity</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">b</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">rintros</span><span class=\"o\">,</span>\n<span class=\"n\">cases</span><span class=\"o\">(</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">h1</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">rw</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">h2</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">h2</span><span class=\"o\">,</span>\n    <span class=\"n\">cases</span><span class=\"o\">(</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">k1</span> <span class=\"n\">k2</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">k1</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"o\">],</span>\n      <span class=\"n\">rw</span> <span class=\"n\">k1</span> <span class=\"n\">at</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">h2</span> <span class=\"n\">at</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span><span class=\"o\">(</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">l1</span> <span class=\"n\">l2</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">l1</span> <span class=\"n\">at</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">cases</span> <span class=\"n\">l2</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">l2</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">l2</span> <span class=\"n\">at</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n        <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">not_top_le_coe</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">cases</span> <span class=\"n\">k2</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">k2</span><span class=\"o\">,</span>\n      <span class=\"n\">cases</span><span class=\"o\">(</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">cases</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">l1</span> <span class=\"n\">l2</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">l1</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n        <span class=\"n\">exfalso</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">not_top_le_coe</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">cases</span> <span class=\"n\">l2</span> <span class=\"k\">with</span> <span class=\"n\">k</span> <span class=\"n\">l2</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">k2</span><span class=\"o\">,</span><span class=\"n\">l2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">l2</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">k2</span><span class=\"o\">,</span><span class=\"n\">h2</span><span class=\"o\">],</span>\n        <span class=\"n\">rw</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_le_coe</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_le_coe</span> <span class=\"n\">at</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_le_coe</span> <span class=\"n\">at</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n        <span class=\"n\">transitivity</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n  <span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">def</span> <span class=\"n\">val_ring</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_add_subgroup</span> <span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">zero_mem</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n              <span class=\"n\">unfold</span> <span class=\"n\">val_ring</span><span class=\"o\">,</span>\n              <span class=\"n\">simp</span><span class=\"o\">,</span>\n              <span class=\"n\">rw</span> <span class=\"n\">val_zero</span><span class=\"o\">,</span>\n              <span class=\"n\">simp</span><span class=\"o\">,</span>\n              <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">add_mem</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n            <span class=\"n\">unfold</span> <span class=\"n\">val_ring</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span><span class=\"o\">,</span>\n            <span class=\"n\">rintros</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n            <span class=\"o\">{</span>\n              <span class=\"n\">apply</span> <span class=\"n\">add</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n            <span class=\"n\">rw</span> <span class=\"n\">min_le_iff</span> <span class=\"n\">at</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n            <span class=\"n\">cases</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n            <span class=\"o\">{</span>\n              <span class=\"n\">apply</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">transitivity</span><span class=\"o\">,</span>\n              <span class=\"n\">exact</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n              <span class=\"n\">exact</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n            <span class=\"o\">{</span>\n              <span class=\"n\">apply</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">transitivity</span><span class=\"o\">,</span>\n              <span class=\"n\">exact</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n              <span class=\"n\">exact</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n            <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">neg_mem</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n            <span class=\"n\">unfold</span> <span class=\"n\">val_ring</span><span class=\"o\">,</span>\n            <span class=\"n\">rintros</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n            <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">-</span><span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n            <span class=\"o\">{</span>\n              <span class=\"n\">simp</span><span class=\"o\">,</span>\n            <span class=\"o\">},</span>\n            <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">val_minus_one_is_zero</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span><span class=\"o\">,</span>\n            <span class=\"n\">assumption</span><span class=\"o\">,</span>\n            <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_submonoid</span> <span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">one_mem</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n            <span class=\"n\">unfold</span> <span class=\"n\">val_ring</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">val_one_eq_zero</span><span class=\"o\">,</span>\n            <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n            <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">mul_mem</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n            <span class=\"n\">unfold</span> <span class=\"n\">val_ring</span><span class=\"o\">,</span>\n            <span class=\"n\">rintros</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">a_1</span><span class=\"o\">,</span>\n            <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n            <span class=\"n\">rw</span> <span class=\"n\">mul</span><span class=\"o\">,</span>\n            <span class=\"n\">apply</span> <span class=\"n\">add_le_add&#39;</span> <span class=\"n\">a_1</span> <span class=\"n\">a_2</span><span class=\"o\">,</span>\n            <span class=\"kn\">end</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">is_subring</span> <span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">refine</span> <span class=\"n\">is_subring</span><span class=\"bp\">.</span><span class=\"n\">mk</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">is_domain</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">integral_domain</span> <span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">apply</span> <span class=\"n\">subring</span><span class=\"bp\">.</span><span class=\"n\">domain</span> <span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">unit_iff_val_zero</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)]</span> <span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"n\">is_unit</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">rintros</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_unit_iff_exists_inv</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">α</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">unfold</span> <span class=\"n\">val_ring</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">((</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">α</span><span class=\"bp\">⁻¹</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span>\n      <span class=\"n\">rw</span> <span class=\"n\">mul_inv_cancel</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span>\n        <span class=\"n\">rw</span> <span class=\"n\">val_one_eq_zero</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"o\">{</span>\n        <span class=\"k\">from</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"k\">by</span>\n        <span class=\"o\">{</span>\n          <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">&lt;-</span><span class=\"n\">non_zero</span><span class=\"o\">,</span> <span class=\"n\">a</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n          <span class=\"n\">cases</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n        <span class=\"o\">},</span>\n      <span class=\"o\">},</span>\n    <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">a</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">norm_num</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"o\">},</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">rintros</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">is_unit_iff_exists_inv</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">a</span> <span class=\"k\">with</span> <span class=\"n\">b</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">((</span><span class=\"n\">α</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">)</span><span class=\"bp\">*</span><span class=\"o\">(</span><span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"n\">K</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">norm_cast</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">val_one_eq_zero</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">add_eq_zero_iff&#39;</span> <span class=\"n\">at</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">cases</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">f_left</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">exact</span> <span class=\"n\">α</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span>\n    <span class=\"n\">exact</span> <span class=\"n\">b</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n<span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">discrete_valuation_field</span>\n</code></pre></div>\n\n\n<p>This might help. It is the entire file.</p>",
        "id": 202297510,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593430381
    },
    {
        "content": "<p>I still get errors. You are probably using a different mathlib to me.</p>",
        "id": 202297614,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593430454
    },
    {
        "content": "<p>I am trying to show that the valuation of a uniformiser is 1.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">localization</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">discrete_valuation_field</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span> <span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"n\">def</span> <span class=\"n\">unif</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">π</span> <span class=\"bp\">|</span> <span class=\"n\">v</span> <span class=\"n\">π</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hπ</span> <span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"err\">∈</span> <span class=\"n\">unif</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">val_unif_eq_one</span> <span class=\"o\">:</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">unif</span> <span class=\"n\">at</span> <span class=\"n\">hπ</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n<span class=\"kn\">end</span> <span class=\"n\">discrete_valuation_field</span>\n</code></pre></div>\n\n\n<p>I get an error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">get_local</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">unknown</span> <span class=\"err\">&#39;</span><span class=\"n\">hπ&#39;</span> <span class=\"n\">local</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">K</span>\n<span class=\"err\">⊢</span> <span class=\"n\">v</span> <span class=\"n\">π</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>How can I rectify this? Any help is appreciated, thank you!</p>",
        "id": 202424722,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593518149
    },
    {
        "content": "<p>Put <code>h\\pi</code> in the lemma statement, instead of <code>variables</code></p>",
        "id": 202426630,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593519384
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> If you introduce something with <code>variables</code>, then Lean will only use it if you mention it in the statement.</p>",
        "id": 202426658,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593519410
    },
    {
        "content": "<p>That's why it picks up <code>\\pi</code>, but not <code>h\\pi</code>.</p>",
        "id": 202426681,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593519423
    },
    {
        "content": "<p>Variables usually work well for types, and terms of types, but not for assumptions like <code>h\\pi</code>. Those are better stated directly in the statement of the lemma</p>",
        "id": 202426740,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593519474
    },
    {
        "content": "<p>Oh, I see. Thank you!</p>",
        "id": 202427357,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593519912
    },
    {
        "content": "<p>Actually a <code>variable</code> will be included if it is used in the body too, but not inside a tactic block. (Because Lean doesn't know which tokens inside the tactic block are names until it's too late.)<br>\nYou can also use <code>include</code> to force a <code>variable</code> to be included in subsequent top-level definitions, but beware of accidentally <code>include</code>ing it in lemmas where you don't want it!</p>",
        "id": 202429188,
        "sender_full_name": "Reid Barton",
        "timestamp": 1593521100
    },
    {
        "content": "<p>Oh ok, thank you!</p>",
        "id": 202456986,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593532899
    },
    {
        "content": "<p>I am trying to prove that for n a natural number, ↑n ≠ ⊤ : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">bounded_lattice</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat_neq_top</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_ne_top</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>I have the goals:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"mi\">2</span> <span class=\"n\">goals</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span>\n<span class=\"err\">⊢</span> <span class=\"err\">↑?</span><span class=\"n\">m_1</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"n\">n</span>\n\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">ℤ</span>\n</code></pre></div>\n\n\n<p>I don't know how to proceed from here, I think it means that I need to show n is an integer, which can possibly be done by int.coe_nat_eq , but that does not work out.<br>\nAny help is appreciated. Thank you!</p>",
        "id": 202459618,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593534081
    },
    {
        "content": "<p>Does <code>with_top.coe_ne_top</code> take an argument? If so, you could try to pass it <code>n</code>.</p>",
        "id": 202459830,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593534165
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">nat_neq_top</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_ne_top</span> <span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"n\">intro</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"bp\">&lt;-</span><span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">int</span><span class=\"bp\">.</span><span class=\"n\">coe_nat_eq</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>This is as far as I can get..</p>",
        "id": 202461720,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593534907
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">nat_neq_top</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_ne_top</span> <span class=\"bp\">ℤ</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span> <span class=\"kn\">using</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 202462341,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593535166
    },
    {
        "content": "<p>Unfortunately there don't seem to be lemmas for <code>\\u \\u n = \\u n</code>.</p>",
        "id": 202462375,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593535185
    },
    {
        "content": "<p>Which is a hole in the with_top API that should be fixed first.</p>",
        "id": 202462399,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593535198
    },
    {
        "content": "<p>Doesn't this just work?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">bounded_lattice</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">nat_neq_top</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span><span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"err\">↑</span><span class=\"n\">n</span><span class=\"o\">:</span><span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≠</span> <span class=\"err\">⊤</span> <span class=\"o\">:=</span>\n<span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_ne_top</span>\n</code></pre></div>",
        "id": 202462657,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593535303
    },
    {
        "content": "<p>Unfortunately not.</p>",
        "id": 202462771,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593535353
    },
    {
        "content": "<p>It would if <code>n : int</code> of course</p>",
        "id": 202462800,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593535367
    },
    {
        "content": "<p>Strange, I don't see any errors in my Lean.</p>",
        "id": 202462841,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593535382
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">term</span>\n  <span class=\"n\">with_top</span><span class=\"bp\">.</span><span class=\"n\">coe_ne_top</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">↑?</span><span class=\"n\">m_2</span> <span class=\"bp\">≠</span> <span class=\"err\">⊤</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"err\">⊤</span>\n</code></pre></div>",
        "id": 202462910,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593535420
    },
    {
        "content": "<p>Yeah, I get the same error</p>",
        "id": 202462953,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593535441
    },
    {
        "content": "<p>This is on a mathlib that is more than 3 hours old, I admit</p>",
        "id": 202463044,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593535464
    },
    {
        "content": "<p>Did I copy and paste something wrong? I don't see any errors in <a href=\"https://leanprover-community.github.io/lean-web-editor/#code=import%20order.bounded_lattice%0A%0Alemma%20nat_neq_top%20%28n%20%3A%E2%84%95%29%20%3A%20%28%E2%86%91n%3Awith_top%20%E2%84%A4%29%20%E2%89%A0%20%E2%8A%A4%20%3A%3D%0Awith_top.coe_ne_top%0A\">the web editor either</a>.</p>",
        "id": 202463094,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593535485
    },
    {
        "content": "<p>Or maybe, I could possibly avoid this if I could work with \\pi^n, with n \\in \\Z.<br>\nIs that possible?</p>",
        "id": 202463157,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593535509
    },
    {
        "content": "<p>My \"playground\" project is apparently on commit <a href=\"https://github.com/leanprover-community/mathlib/commit/35fbfe0a40395e6ea394f05b1c56a2fbcf4b33ce\">35fbfe0a40395e6ea394f05b1c56a2fbcf4b33ce</a> from 2 days ago.</p>",
        "id": 202463210,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593535537
    },
    {
        "content": "<p>The web editor is on <a href=\"https://github.com/leanprover-community/mathlib/commit/056a72aa92fa6cc3430348a84e19df6853d07775\">this commit</a> from 14 hours ago.</p>",
        "id": 202463243,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593535552
    },
    {
        "content": "<p>Crazy <span aria-label=\"confused\" class=\"emoji emoji-1f615\" role=\"img\" title=\"confused\">:confused:</span></p>",
        "id": 202463636,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593535683
    },
    {
        "content": "<p><del>#3132 (merged 7 days ago) looks related, possibly?</del></p>",
        "id": 202464259,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593535962
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code>commit 9acf5903f385e2c017cde4b93d2323d59232707a (origin/master, origin/HEAD, master)\nAuthor: Yakov Pechersky &lt;yakov@pechersky.us&gt;\nDate:   Mon Jun 29 03:57:10 2020 +0000\n\n    feat(data/matrix/notation): smul matrix lemmas (#3208)\n</code></pre></div>",
        "id": 202464552,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593536072
    },
    {
        "content": "<p>That's from yesterday</p>",
        "id": 202464567,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593536079
    },
    {
        "content": "<p>I think maybe it's <a href=\"https://github.com/leanprover-community/mathlib/issues/3157\">#3157</a>?</p>",
        "id": 202464670,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1593536139
    },
    {
        "content": "<p>Aha, that makes sense</p>",
        "id": 202464879,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593536237
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> Please try updating mathlib. It might solve your problem (-;</p>",
        "id": 202464913,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593536254
    },
    {
        "content": "<p>This also works:</p>\n<div class=\"codehilite\"><pre><span></span><code>lemma nat_neq_top (n :ℕ) : (n : with_top ℤ) ≠ ⊤ := by apply with_top.coe_ne_top\n</code></pre></div>",
        "id": 202464918,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593536256
    },
    {
        "content": "<p>That's what Bryan already wrote. But it depends on having today's mathlib, not yesterdays.</p>",
        "id": 202464998,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1593536284
    },
    {
        "content": "<p>Oh sorry :)</p>",
        "id": 202465018,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593536291
    },
    {
        "content": "<p>Oh ok, I will do that. Thank you!</p>",
        "id": 202468252,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593537784
    },
    {
        "content": "<p><a href=\"https://github.com/laughinggas/DVR/blob/cc3a8e881c914fa17f9bde07fbcead8850f9152f/src/Test.lean#L598\">https://github.com/laughinggas/DVR/blob/cc3a8e881c914fa17f9bde07fbcead8850f9152f/src/Test.lean#L598</a></p>\n<p>I am trying to prove Line 598. Line 608 gives me an error, I don't know how to use the lemma val_int_power then.<br>\nAny help is appreciated. Thank you!</p>",
        "id": 202702937,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593703334
    },
    {
        "content": "<p><code>α⁻¹</code> is notation for <code>has_inv.inv α</code>. And <code>α ^(-1)</code> is notation for <code>has_pow.pow α (-1)</code>. They're not the same, so this is why the rewrite failed.</p>",
        "id": 202741794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593722196
    },
    {
        "content": "<p>After <code>unfold val_ring</code> you can do</p>\n<div class=\"codehilite\"><pre><span></span><code>      <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">^</span> <span class=\"o\">(</span><span class=\"bp\">-</span><span class=\"mi\">1</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">)),</span>\n        <span class=\"n\">simpa</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>and then your rewrite will work</p>",
        "id": 202742091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1593722457
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 202757784,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593735006
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">ideals</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">principal_ideal_domain</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">localization</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">bounded_lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">field_power</span>\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n<span class=\"n\">class</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">v</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">+</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">min</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">y</span><span class=\"o\">))</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">+</span> <span class=\"n\">y</span><span class=\"o\">)</span>  <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">non_zero</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⊤</span> <span class=\"bp\">↔</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">)</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">discrete_valuation_field</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">valuation</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span> <span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">-&gt;</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span> <span class=\"o\">:=</span> <span class=\"n\">v</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n<span class=\"n\">def</span> <span class=\"n\">val_ring</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ideal_is_unif_power</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">ideal_is_unique_unif_power</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃!</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">with_top</span> <span class=\"bp\">ℤ</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">split</span><span class=\"o\">,</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">cases</span> <span class=\"n\">ideal_is_unif_power</span> <span class=\"n\">S</span> <span class=\"n\">x</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">m</span> <span class=\"n\">g</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"o\">},</span>\n<span class=\"kn\">end</span>\n</code></pre></div>\n\n\n<p>The goal is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n<span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"bp\">ℤ</span><span class=\"o\">,</span>\n<span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">x</span>\n<span class=\"err\">⊢</span> <span class=\"err\">↑?</span><span class=\"n\">m_1</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>I want to use g, but apply does not seem to work out. Any help is appreciated. Thank you!</p>\n<div class=\"codehilite\"><pre><span></span><code>\n</code></pre></div>",
        "id": 202850826,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593827550
    },
    {
        "content": "<p>Does <code>exact g</code> work?</p>",
        "id": 202851656,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593829100
    },
    {
        "content": "<p>Wait, isn't your lemma false? Why should <code>n</code> be unique?</p>",
        "id": 202851790,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1593829318
    },
    {
        "content": "<p>The problem is that <code>m</code> is out of scope of the metavariable</p>",
        "id": 202851851,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593829413
    },
    {
        "content": "<p>You tried to intro the exists before you have <code>m</code> available</p>",
        "id": 202851856,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593829433
    },
    {
        "content": "<p>If you move the <code>cases</code> line to the beginning then <code>exact g</code> works</p>",
        "id": 202851899,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1593829468
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 202851922,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593829535
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/202851790\">said</a>:</p>\n<blockquote>\n<p>Wait, isn't your lemma false? Why should <code>n</code> be unique?</p>\n</blockquote>\n<p>Thanks for pointing this out, you are correct, I forgot to put in additional conditions.</p>",
        "id": 202851929,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1593829561
    },
    {
        "content": "<p>I am trying to state the following lemma , for a discrete valuation field K, and a uniformiser π in K : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">lemma</span> <span class=\"n\">contains_unif_power</span> <span class=\"o\">(</span><span class=\"n\">hπ</span> <span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"err\">∈</span> <span class=\"n\">unif</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">π</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"o\">:=</span>\n</code></pre></div>\n\n\n<p>This statement gives me the error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"n\">class</span> <span class=\"kn\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_5</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">hπ</span> <span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"err\">∈</span> <span class=\"n\">unif</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">),</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span>\n<span class=\"err\">⊢</span> <span class=\"n\">has_mem</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">ideal</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>Is this because S is not realised as a subset of K? If so, is there any way around this?<br>\nAny help is appreciated, thank you!</p>",
        "id": 203047320,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594073802
    },
    {
        "content": "<p>You would need to either map S back to K using something like set.image, or use a proof that \\pi^n is in the valuation ring. (Also, the lemma is false for the trivial ideal.)</p>",
        "id": 203048403,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594074688
    },
    {
        "content": "<p>Thanks! How can I put in the nontrivial condition?</p>",
        "id": 203049709,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594075630
    },
    {
        "content": "<p>Ideals are a lattice, so <code>I \\ne \\bot</code> is the preferred way to say I isn't the zero ideal.</p>",
        "id": 203049864,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594075721
    },
    {
        "content": "<p>Add an assumption <code>S ≠ ⊥</code></p>",
        "id": 203049868,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594075724
    },
    {
        "content": "<p>And as for the membership issue: <code>∃ n : ℕ, π^n ∈ set.range (λ s : S, (s : K))</code></p>",
        "id": 203049904,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594075752
    },
    {
        "content": "<p>That at least typechecks. There are other possibilities as well.</p>",
        "id": 203050061,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594075836
    },
    {
        "content": "<p>Yeah, I guess an equivalent lemma would be to show the ideal spanned by \\pi^n lies inside S, which would involve showing \\pi^n is in val_ring K.</p>",
        "id": 203050609,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594076228
    },
    {
        "content": "<p>Is there a way to change S ≠ ⊥ to ∃ x ∈ S, x ≠ 0 ? <br>\nI only see exists_mem_ne_zero_of_ne_bot, but this does not work. I am trying to prove,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_5</span><span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span>\n<span class=\"n\">π</span><span class=\"o\">:</span> <span class=\"n\">K</span>\n<span class=\"n\">hπ</span><span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"err\">∈</span> <span class=\"n\">unif</span> <span class=\"n\">K</span>\n<span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"n\">S</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span>\n<span class=\"err\">⊢</span> <span class=\"n\">Q</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span>\n</code></pre></div>",
        "id": 203219189,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594167754
    },
    {
        "content": "<p>What doesn't work and what is the error message</p>",
        "id": 203219283,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594167845
    },
    {
        "content": "<p>Does <code>exists_mem_ne_zero_of_ne_bot</code> assume that the ring is a field?</p>",
        "id": 203219494,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594168105
    },
    {
        "content": "<p>That may be the issue.</p>",
        "id": 203219495,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594168111
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"k\">have</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">exists_mem_ne_zero_of_ne_bot</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>does not work.<br>\nexists_mem_ne_zero_of_ne_bot does not work, but I cannot expect it to work, because it is for fields, and I am not dealing with fields. I get the error :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">exists_mem_ne_zero_of_ne_bot</span> <span class=\"n\">h</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">h</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">S</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_6</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span>\n</code></pre></div>\n\n\n<p>which is understandable. Is there any other way to get from S ≠ ⊥ to ∃ x ∈ S, x ≠ 0 ? <br>\nThank you!</p>",
        "id": 203219507,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594168139
    },
    {
        "content": "<p>It looks like there ought to be a lemma saying an ideal is bot iff all its elements are 0</p>",
        "id": 203219546,
        "sender_full_name": "Bhavik Mehta",
        "timestamp": 1594168200
    },
    {
        "content": "<p>The lemma <code>exists_mem_ne_zero_of_ne_bot</code> should be true for submoddules of any module over a ring in which <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo mathvariant=\"normal\">≠</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">1 \\neq 0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.19444em;\"><span></span></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, but it's done in mathlib for vector spaces.</p>",
        "id": 203219639,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594168282
    },
    {
        "content": "<p>It should even be true for the zero ring right? because then there is no ideal other than <code>bot</code></p>",
        "id": 203219662,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594168318
    },
    {
        "content": "<p>yeah true.</p>",
        "id": 203219699,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594168323
    },
    {
        "content": "<p>in that case everything is bot :)</p>",
        "id": 203219706,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594168329
    },
    {
        "content": "<p>The same exact proof works in general: </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">exists_mem_ne_zero_of_ne_bot</span> <span class=\"o\">{</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">≠</span> <span class=\"err\">⊥</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">M</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∧</span> <span class=\"n\">b</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">classical</span><span class=\"o\">,</span>\n  <span class=\"n\">by_contradiction</span> <span class=\"n\">hex</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">x</span><span class=\"err\">∈</span><span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"o\">:</span><span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">simpa</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_exists</span><span class=\"o\">,</span> <span class=\"n\">not_and</span><span class=\"o\">,</span> <span class=\"n\">not_not</span><span class=\"o\">,</span> <span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">hex</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"err\">$</span> <span class=\"n\">bot_unique</span> <span class=\"err\">$</span> <span class=\"k\">assume</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">mem_bot</span> <span class=\"n\">R</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">$</span> <span class=\"n\">this</span> <span class=\"n\">s</span> <span class=\"n\">hs</span><span class=\"o\">)</span>\n<span class=\"kn\">end</span>\n</code></pre></div>",
        "id": 203219850,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594168543
    },
    {
        "content": "<p>I think <code>contrapose!</code> should do this pretty easily</p>",
        "id": 203220163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594168873
    },
    {
        "content": "<p>I just copied the proof from mathlib :)</p>",
        "id": 203220233,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594168928
    },
    {
        "content": "<p>Except I changed the field to a ring</p>",
        "id": 203220253,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594168958
    },
    {
        "content": "<p>I am trying to apply a transitivity argument : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_5</span><span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span>\n<span class=\"n\">π</span><span class=\"o\">:</span> <span class=\"n\">K</span>\n<span class=\"n\">hπ</span><span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"err\">∈</span> <span class=\"n\">unif</span> <span class=\"n\">K</span>\n<span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span>\n<span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n<span class=\"n\">nz</span><span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">f_right</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">z</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n<span class=\"n\">f_left</span><span class=\"o\">:</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">z</span><span class=\"o\">}</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span>\n<span class=\"n\">l</span><span class=\"o\">:</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">}</span> <span class=\"bp\">≤</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">z</span><span class=\"o\">}</span>\n<span class=\"err\">⊢</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"bp\">⟨</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">}</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span>\n</code></pre></div>\n\n\n<p>Using </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">transitivity</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">z</span><span class=\"o\">},</span>\n</code></pre></div>\n\n\n<p>gives me an error</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">apply</span> <span class=\"n\">tactic</span><span class=\"o\">,</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">unify</span>\n  <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"bp\">⟨</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">}</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span>\n<span class=\"k\">with</span>\n  <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_4</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">m_5</span> <span class=\"bp\">→</span> <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">m_5</span>\n</code></pre></div>\n\n\n<p>Any help is appreciated, thank you!</p>",
        "id": 203391041,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594304394
    },
    {
        "content": "<p>Looks like the <code>apply</code> bug again</p>",
        "id": 203391426,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594304573
    },
    {
        "content": "<p>I would just build the term manually: <code>refine le_trans l _</code></p>",
        "id": 203391457,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594304588
    },
    {
        "content": "<p>oh, you have both parts already</p>",
        "id": 203391477,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594304598
    },
    {
        "content": "<p>does <code>linarith</code> close it?</p>",
        "id": 203392114,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594304882
    },
    {
        "content": "<p><code>exact le_trans l f_left</code></p>",
        "id": 203392166,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594304908
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/203392166\">said</a>:</p>\n<blockquote>\n<p><code>exact le_trans l f_left</code></p>\n</blockquote>\n<p>This gives me the error:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">type</span> <span class=\"n\">mismatch</span> <span class=\"n\">at</span> <span class=\"n\">application</span>\n  <span class=\"n\">le_trans</span> <span class=\"n\">l</span>\n<span class=\"n\">term</span>\n  <span class=\"n\">l</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">}</span> <span class=\"bp\">≤</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">z</span><span class=\"o\">}</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"bp\">⟨</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">}</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">m_1</span>\n</code></pre></div>",
        "id": 203392257,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594304947
    },
    {
        "content": "<p>OK, well I don't know what this is but then you need to fix this anyways.</p>",
        "id": 203392326,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594304972
    },
    {
        "content": "<p>You can try <code>convert</code> instead of <code>exact</code>.</p>",
        "id": 203392349,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594304987
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/203392114\">said</a>:</p>\n<blockquote>\n<p>does <code>linarith</code> close it?</p>\n</blockquote>\n<p>No, this gives the error,</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"err\">?</span><span class=\"n\">m_3</span> <span class=\"bp\">≤</span> <span class=\"err\">?</span><span class=\"n\">m_4</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"bp\">⟨</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">}</span> <span class=\"bp\">≤</span> <span class=\"n\">S</span>\n</code></pre></div>",
        "id": 203392446,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594305023
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/203392349\">said</a>:</p>\n<blockquote>\n<p>You can try <code>convert</code> instead of <code>exact</code>.</p>\n</blockquote>\n<p>This gives me a goal :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">K</span>\n</code></pre></div>",
        "id": 203392954,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594305251
    },
    {
        "content": "<p>Which is false... so you need to backtrack.</p>",
        "id": 203392999,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594305272
    },
    {
        "content": "<p>It looks like a subtype thing again... <code>π ^ Inf Q</code> vs <code>⟨π ^ Inf Q, _⟩</code></p>",
        "id": 203393169,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594305360
    },
    {
        "content": "<p>Yup. Can you <code>convert (some stuff) using 1</code></p>",
        "id": 203393262,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594305388
    },
    {
        "content": "<p>The <code>using 1</code> will make it less aggresive.</p>",
        "id": 203393284,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594305397
    },
    {
        "content": "<p>Is there a way to apply </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">using</span> <span class=\"mi\">1</span>\n</code></pre></div>\n\n\n<p>to a goal of the form</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"o\">{</span><span class=\"bp\">⟨</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"err\">↑</span><span class=\"n\">S</span>\n</code></pre></div>\n\n\n<p>?</p>",
        "id": 203395361,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594306307
    },
    {
        "content": "<p>I don't know what that means.</p>",
        "id": 203395592,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594306413
    },
    {
        "content": "<p>What did your goal look like after the <code>convert .... using 1</code>?</p>",
        "id": 203395622,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594306429
    },
    {
        "content": "<p>I actually managed to get it down to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_5</span><span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span>\n<span class=\"n\">π</span><span class=\"o\">:</span> <span class=\"n\">K</span>\n<span class=\"n\">hπ</span><span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"err\">∈</span> <span class=\"n\">unif</span> <span class=\"n\">K</span>\n<span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span>\n<span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n<span class=\"n\">nz</span><span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">⟨</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"err\">↑</span><span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span>\n<span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">f_left</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">S</span>\n<span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">K</span>\n<span class=\"n\">f_1</span><span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"err\">∈</span> <span class=\"n\">val_ring</span> <span class=\"n\">K</span>\n<span class=\"n\">f_2</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">f_3</span><span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span>\n<span class=\"err\">⊢</span> <span class=\"o\">{</span><span class=\"bp\">⟨</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"err\">↑</span><span class=\"n\">S</span>\n</code></pre></div>\n\n\n<p>which seems like an easier thing to show.</p>",
        "id": 203395960,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594306557
    },
    {
        "content": "<p>There must be a lemma <code>singleton_subset</code> or <code>singleton_subset_iff</code></p>",
        "id": 203396168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594306632
    },
    {
        "content": "<p>Does <code>simp</code> help you here?</p>",
        "id": 203396212,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594306653
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/203395622\">said</a>:</p>\n<blockquote>\n<p>What did your goal look like after the <code>convert .... using 1</code>?</p>\n</blockquote>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"bp\">⟨</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 203396241,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594306666
    },
    {
        "content": "<p>Aha, and with <code>using 2</code>?</p>",
        "id": 203396459,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594306754
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/203396212\">said</a>:</p>\n<blockquote>\n<p>Does <code>simp</code> help you here?</p>\n</blockquote>\n<p>No</p>",
        "id": 203396510,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594306780
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/203395622\">said</a>:</p>\n<blockquote>\n<p>What did your goal look like after the <code>convert .... using 1</code>?</p>\n</blockquote>\n<p>This also gives 2 more goals:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"n\">has_singleton</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">))</span>\n</code></pre></div>",
        "id": 203397272,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594307066
    },
    {
        "content": "<p>Aha, we clearly don't want that.</p>",
        "id": 203397382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594307110
    },
    {
        "content": "<p>using 2 gives</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"o\">{</span><span class=\"bp\">⟨</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">}</span> <span class=\"bp\">=</span> <span class=\"o\">{</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>plus</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"err\">⊢</span> <span class=\"n\">has_singleton</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">set</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">))</span>\n</code></pre></div>\n\n\n<p>twice.</p>",
        "id": 203397405,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594307121
    },
    {
        "content": "<p>So let's move back to the inclusion that you had reduced the goal to.</p>",
        "id": 203397419,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594307128
    },
    {
        "content": "<p>if you livestream in discord then we can compete to tell you the tactic you need!</p>",
        "id": 203398639,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1594307680
    },
    {
        "content": "<p>Something strange must have happened, since <code>submodule.span ↥(val_ring K) {π ^ Inf Q}</code> shouldn't even make sense! <code>π ^ Inf Q</code> is a term of type <code>K</code>, that's why it's asking for the <code>has_singleton</code> instance.</p>",
        "id": 203398682,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594307701
    },
    {
        "content": "<p>Where did your assumption <code>l</code> come from?</p>",
        "id": 203398913,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594307817
    },
    {
        "content": "<p>I had not solved l, just put a sorry. :(</p>",
        "id": 203399773,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594308192
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"250372\">Ashvni Narayanan</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/203395960\">said</a>:</p>\n<blockquote>\n<p>I actually managed to get it down to</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_5</span><span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span>\n<span class=\"n\">π</span><span class=\"o\">:</span> <span class=\"n\">K</span>\n<span class=\"n\">hπ</span><span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"err\">∈</span> <span class=\"n\">unif</span> <span class=\"n\">K</span>\n<span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span>\n<span class=\"n\">Q</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">),</span> <span class=\"err\">↑</span><span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">x</span><span class=\"o\">}</span>\n<span class=\"n\">g</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">↑</span><span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">)</span>\n<span class=\"n\">nz</span><span class=\"o\">:</span> <span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"bp\">⟨</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"err\">↑</span><span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span>\n<span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">f_left</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">S</span>\n<span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">K</span>\n<span class=\"n\">f_1</span><span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"err\">∈</span> <span class=\"n\">val_ring</span> <span class=\"n\">K</span>\n<span class=\"n\">f_2</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">f_3</span><span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span>\n<span class=\"err\">⊢</span> <span class=\"o\">{</span><span class=\"bp\">⟨</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">}</span> <span class=\"err\">⊆</span> <span class=\"err\">↑</span><span class=\"n\">S</span>\n</code></pre></div>\n\n\n<p>which seems like an easier thing to show.</p>\n</blockquote>\n<p>This has no sorries.</p>",
        "id": 203400011,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594308279
    },
    {
        "content": "<p>You can certainly solve this goal, but it looks like might want to first change <code>⟨π ^ Inf Q, _⟩</code> to <code>z * ⟨w, f_1⟩</code> where the multiplication takes place in the valuation ring, so that you can apply the ideal condition for S.</p>",
        "id": 203400380,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594308426
    },
    {
        "content": "<p>How can I do this? Using a subtype argument at f_3?</p>",
        "id": 203401592,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594308979
    },
    {
        "content": "<p>I think I would go for <code>rw singleton_subset_iff</code></p>",
        "id": 203401732,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594309043
    },
    {
        "content": "<p>Well,  first try to reduce to proving that the element is in <code>S</code> using <code>singleton_subset_iff</code>, as Johan suggested. Then rewrite using f_3 and go from there.</p>",
        "id": 203401785,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594309068
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rw</span> <span class=\"n\">singleton_subset_iff</span>\n<span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">mem_coe</span><span class=\"o\">],</span>\n</code></pre></div>\n\n\n<p>brings it down to </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">f_left</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">S</span>\n<span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">K</span>\n<span class=\"n\">f_1</span><span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"err\">∈</span> <span class=\"n\">val_ring</span> <span class=\"n\">K</span>\n<span class=\"n\">f_2</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">f_3</span><span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">⟨</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"err\">∈</span> <span class=\"n\">S</span>\n</code></pre></div>\n\n\n<p>rw &lt;-f_3 does not work, it gives the error :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">rewrite</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">motive</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">type</span> <span class=\"n\">correct</span>\n  <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"bp\">_</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"bp\">⟨</span><span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"err\">∈</span> <span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"bp\">⟨_</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"err\">∈</span> <span class=\"n\">S</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>:(</p>",
        "id": 203406050,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594310958
    },
    {
        "content": "<p>I don't know what that means. Does lean know how to fill the hole in the <code>⟨π ^ Inf Q, _⟩</code>?</p>",
        "id": 203408127,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594311964
    },
    {
        "content": "<p>I don't know, but I don't think so. Is there a way to check this?</p>",
        "id": 203409780,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594312801
    },
    {
        "content": "<p>When the <code>_</code> is in the goal or a hypothesis like this it probably isn't a hole, but rather a proof lean has elected not to display, try <code>set_option pp.proofs true</code> to see it</p>",
        "id": 203410651,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594313136
    },
    {
        "content": "<p>The context doesn't seem to know that <code>π ^ Inf Q</code> is in the valuation ring.</p>",
        "id": 203410749,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594313176
    },
    {
        "content": "<p>By definition, it is not.</p>",
        "id": 203410804,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594313215
    },
    {
        "content": "<p>Can someone paste some code I can try?</p>",
        "id": 203410830,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594313238
    },
    {
        "content": "<p><a href=\"https://github.com/laughinggas/DVR/blob/86c6dad4514e328c49b62300f1546c15d773b10c/src/Test.lean#L967\">https://github.com/laughinggas/DVR/blob/86c6dad4514e328c49b62300f1546c15d773b10c/src/Test.lean#L967</a></p>",
        "id": 203411176,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594313423
    },
    {
        "content": "<p>On line 834, you write <code>use π^(Inf Q)</code>but this is something in <code>K</code> a priori. This might be the issue...<br>\n(nevermind -- ignore this)</p>",
        "id": 203413354,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594314564
    },
    {
        "content": "<p>Thanks, love the github username lol.<br>\nYou can use <code>simp_rw [← f_3],</code>  to rewrite <code>f_3</code> here, its a version of <code>rw</code> that works more like simp so its a bit better at rewriting things that are in a more complicated term.</p>",
        "id": 203413380,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1594314582
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/203413354\">said</a>:</p>\n<blockquote>\n<p>On line 834, you write <code>use π^(Inf Q)</code>but this is something in <code>K</code> a priori. This might be the issue...<br>\n(nevermind -- ignore this)</p>\n</blockquote>\n<p>As soon as I use this, the first goal is to check that it is in val_ring K.</p>",
        "id": 203413905,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594314847
    },
    {
        "content": "<p>Yeah I just noticed that. Ignore what I said.</p>",
        "id": 203413991,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594314907
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> What is your goal now?</p>",
        "id": 203419458,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594317896
    },
    {
        "content": "<p>Or is this solved by now?</p>",
        "id": 203419469,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594317903
    },
    {
        "content": "<p>No it is not :(</p>",
        "id": 203419514,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594317924
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">z</span><span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">f_left</span><span class=\"o\">:</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">S</span>\n<span class=\"n\">w</span><span class=\"o\">:</span> <span class=\"n\">K</span>\n<span class=\"n\">f_1</span><span class=\"o\">:</span> <span class=\"n\">w</span> <span class=\"err\">∈</span> <span class=\"n\">val_ring</span> <span class=\"n\">K</span>\n<span class=\"n\">f_2</span><span class=\"o\">:</span> <span class=\"n\">v</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">f_3</span><span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span> <span class=\"bp\">=</span> <span class=\"n\">π</span> <span class=\"bp\">^</span> <span class=\"n\">Inf</span> <span class=\"n\">Q</span>\n<span class=\"err\">⊢</span> <span class=\"bp\">⟨</span><span class=\"err\">↑</span><span class=\"n\">z</span> <span class=\"bp\">*</span> <span class=\"n\">w</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span> <span class=\"err\">∈</span> <span class=\"n\">S</span>\n</code></pre></div>\n\n\n<p>This is the goal</p>",
        "id": 203419717,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594318046
    },
    {
        "content": "<p>I was trying to use </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">ideal</span><span class=\"bp\">.</span><span class=\"n\">mul_mem_left</span>\n</code></pre></div>\n\n\n<p>at f_1, but w does not have type val_ring K, which causes an issue.</p>",
        "id": 203420139,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594318274
    },
    {
        "content": "<p>Try <code>change z * \\&lt;w,f_1\\&gt; \\in S</code></p>",
        "id": 203420404,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594318428
    },
    {
        "content": "<p>I'm not sure if that will help.</p>",
        "id": 203420479,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594318455
    },
    {
        "content": "<p><code>apply S.mul_mem_right f_left</code>?</p>",
        "id": 203420770,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594318656
    },
    {
        "content": "<p>Or something like that.</p>",
        "id": 203420781,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594318663
    },
    {
        "content": "<p>Yes, that works. Thank you so much!</p>",
        "id": 203421158,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594318872
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/DVRs/near/203420404\">said</a>:</p>\n<blockquote>\n<p>Try <code>change z * \\&lt;w,f_1\\&gt; \\in S</code></p>\n</blockquote>\n<p>It helped, thank you!</p>",
        "id": 203421177,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594318890
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">is_dvr</span> <span class=\"o\">(</span><span class=\"n\">K</span><span class=\"o\">:</span><span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_ring</span> <span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span>\n  <span class=\"n\">prime_ideal&#39;</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n                  <span class=\"k\">have</span> <span class=\"n\">hπ</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"n\">v</span><span class=\"o\">(</span><span class=\"n\">π</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n                  <span class=\"o\">{</span>\n                    <span class=\"n\">cases</span> <span class=\"n\">hv</span> <span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">π</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n                    <span class=\"n\">use</span> <span class=\"n\">π</span><span class=\"o\">,</span>\n                    <span class=\"n\">rw</span> <span class=\"n\">hv</span><span class=\"o\">,</span>\n                  <span class=\"o\">},</span>\n                  <span class=\"n\">cases</span> <span class=\"n\">hπ</span> <span class=\"k\">with</span> <span class=\"n\">π</span> <span class=\"n\">hπ</span><span class=\"o\">,</span>\n                  <span class=\"n\">use</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">π</span><span class=\"o\">},</span>\n                  <span class=\"kn\">end</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>This is not a mwe. The </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">cases</span> <span class=\"n\">hπ</span> <span class=\"k\">with</span> <span class=\"n\">π</span> <span class=\"n\">hπ</span><span class=\"o\">,</span>\n</code></pre></div>\n\n\n<p>line gives me an error : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">induction</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">recursor</span> <span class=\"err\">&#39;</span><span class=\"n\">Exists</span><span class=\"bp\">.</span><span class=\"n\">dcases_on&#39;</span> <span class=\"n\">can</span> <span class=\"n\">only</span> <span class=\"n\">eliminate</span> <span class=\"n\">into</span> <span class=\"kt\">Prop</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"err\">?</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_6</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_7</span> <span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">,</span>\n<span class=\"n\">hπ</span> <span class=\"o\">:</span> <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">π</span> <span class=\"o\">:</span> <span class=\"n\">K</span><span class=\"o\">),</span> <span class=\"n\">v</span> <span class=\"n\">π</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n<span class=\"err\">⊢</span> <span class=\"n\">ideal</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>I don't understand why, because I have used exactly the same code elsewhere and it did not create any issues.<br>\nAny help is appreciated, thank you!</p>",
        "id": 203536869,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594402962
    },
    {
        "content": "<p>That probably means that your goal is not a proposition</p>",
        "id": 203537401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594403257
    },
    {
        "content": "<p>Your definition of the prime ideal is data so should really be done in term mode</p>",
        "id": 203537490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594403292
    },
    {
        "content": "<p>You should probably prove the lemma beforehand, that there exists pi with valuation 1</p>",
        "id": 203537562,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594403346
    },
    {
        "content": "<p>And then use classical.some to define the prime ideal in one line</p>",
        "id": 203537597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594403369
    },
    {
        "content": "<p>Oh alright, thank you!</p>",
        "id": 203537935,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594403544
    },
    {
        "content": "<p>It's probably better to define it in some more obviously invariant way, like the span of all elements of valuation 1, or just the set of elements of positive valuation (right?)</p>",
        "id": 203538033,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594403612
    },
    {
        "content": "<p>That's a good idea</p>",
        "id": 203538206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594403713
    },
    {
        "content": "<p>Then you can prove it's also spanned by any element of valuation 1</p>",
        "id": 203538238,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594403739
    },
    {
        "content": "<p>So then when you make the definition, you can define the set (which is data) directly, and then prove that it's an ideal in tactic mode and you won't get the weird error</p>",
        "id": 203538598,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594403938
    }
]