[
    {
        "content": "<p>I need this lemma, and do not know how to prove it. I wrote an induction lemma about hyperoperators that depends on this lemma.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mod_two_alternates</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k.succ</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">):=</span>\n</code></pre></div>",
        "id": 321090028,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1673591554
    },
    {
        "content": "<p>I don't know how to deal with mods. My best try is this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">mod_two_alternates</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k.succ</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">):=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">eq_iff_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h0</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">h1</span><span class=\"o\">,</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 321091237,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1673592140
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.parity</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">k.succ</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">¬</span><span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"bp\">%</span> <span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"n\">simp_rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span><span class=\"n\">nat.even_iff</span><span class=\"o\">,</span> <span class=\"n\">nat.even_add_one</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 321091496,
        "sender_full_name": "Patrick Johnson",
        "timestamp": 1673592268
    },
    {
        "content": "<p>Because you helped, I added you as an author here: <a href=\"https://github.com/leanprover-community/mathlib/pull/18116\">https://github.com/leanprover-community/mathlib/pull/18116</a></p>",
        "id": 321092924,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1673593152
    },
    {
        "content": "<p>Usually these types of lemmas are written using iff, instead of equality - why do you need the equality?</p>",
        "id": 321135411,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673608872
    },
    {
        "content": "<p>Note that in the end the answer was to use <code>even</code> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.even_add_one\">docs#nat.even_add_one</a> directly</p>",
        "id": 321135669,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673608958
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/116395-maths/topic/Mod.202.20alternating.20truth.20value/near/321135411\">said</a>:</p>\n<blockquote>\n<p>Usually these types of lemmas are written using iff, instead of equality - why do you need the equality?</p>\n</blockquote>\n<p>I needed it for a lemma <code>hyperoperation_ge_four_zero</code> in <a href=\"https://github.com/leanprover-community/mathlib/pull/18116/files\">https://github.com/leanprover-community/mathlib/pull/18116/files</a> .<br>\nThe lemma has been rewritten, like <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> mentioned.</p>",
        "id": 321142373,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1673610973
    },
    {
        "content": "<p>That answers \"why do I need a result with <code>(k.succ % 2 = 0)</code> on the LHS and <code>¬(k % 2 = 0)</code> on the right\", but it doesn't answer the question \"why does it need <code>=</code> in the middle instead of <code>iff</code>\"</p>",
        "id": 321142909,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673611146
    },
    {
        "content": "<p>The answer to that second question is \"it doesn't\", and I think that's Eric's point</p>",
        "id": 321142952,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673611161
    },
    {
        "content": "<p>Ah. I have it that way because I was using <code>simp_rw</code> to rewrite it in an <code>ite</code>, and was not aware of the method of rewriting when it is in <code>iff</code> form, but knew it would rewrite as an equality.</p>",
        "id": 321143408,
        "sender_full_name": "Mark Andrew Gerads",
        "timestamp": 1673611309
    },
    {
        "content": "<p><code>simp</code>, <code>simp_rw</code>, and <code>rw</code>, among most other tactics, do not care about the difference</p>",
        "id": 321144621,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673611665
    }
]