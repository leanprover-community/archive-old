[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"266440\">@Shing Tak Lam</span> has been thinking about multivariate polynomials and gave me these three puzzles:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">single_eq_C_mul_X</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">monomial</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">erase_single</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">lemma</span> <span class=\"n\">erase_single_ne</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"bp\">≠</span> <span class=\"n\">v2</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"n\">v1</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">v2</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">single</span> <span class=\"n\">v2</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>\n\n\n<p>Independently, I was wondering whether we have the multivariable polynomial analogue of the statement that a polynomial <code>p</code> equals the sum of <code>coeff p m * X ^m</code>.</p>",
        "id": 192123342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585402499
    },
    {
        "content": "<p>Re the independent question: I think we only have if for single variable polynomials: <a href=\"https://github.com/leanprover-community/mathlib/search?q=as_sum&amp;unscoped_q=as_sum\" title=\"https://github.com/leanprover-community/mathlib/search?q=as_sum&amp;unscoped_q=as_sum\">https://github.com/leanprover-community/mathlib/search?q=as_sum&amp;unscoped_q=as_sum</a></p>",
        "id": 192123803,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1585403208
    },
    {
        "content": "<p>wait... how do you search on github??</p>",
        "id": 192123878,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585403289
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_iff</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">has_zero</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">hf</span><span class=\"o\">,</span>\n    <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n    <span class=\"n\">ext</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">x</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">erase_single</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">eq_zero_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">var</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">erase_same</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">erase_ne</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">single_eq_of_ne</span><span class=\"o\">,</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span> <span class=\"n\">assumption</span>\n  <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I don't know my way around <code>finsupp</code>. Am I making a mountain out of a molehill?</p>",
        "id": 192123884,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585403307
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/mv_polynomial.20questions/near/192123878\" title=\"#narrow/stream/116395-maths/topic/mv_polynomial.20questions/near/192123878\">said</a>:</p>\n<blockquote>\n<p>wait... how do you search on github??</p>\n</blockquote>\n<p><a href=\"https://help.github.com/en/github/searching-for-information-on-github/about-searching-on-github\" title=\"https://help.github.com/en/github/searching-for-information-on-github/about-searching-on-github\">https://help.github.com/en/github/searching-for-information-on-github/about-searching-on-github</a></p>",
        "id": 192124385,
        "sender_full_name": "Jason KY.",
        "timestamp": 1585403786
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110064\">Kenny Lau</span> <a href=\"#narrow/stream/116395-maths/topic/mv_polynomial.20questions/near/192123878\" title=\"#narrow/stream/116395-maths/topic/mv_polynomial.20questions/near/192123878\">said</a>:</p>\n<blockquote>\n<p>wait... how do you search on github??</p>\n</blockquote>\n<p>often with plenty of pain because there's still no way to do exact string searches (it's in the beta for some repos, though)</p>",
        "id": 192124690,
        "sender_full_name": "Marc Huisinga",
        "timestamp": 1585404073
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">mv_polynomial</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">finsupp</span> <span class=\"n\">mv_polynomial</span>\n\n<span class=\"n\">universes</span> <span class=\"n\">u</span> <span class=\"n\">v</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">single_eq_C_mul_X</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"n\">monomial</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"err\">^</span><span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">zero_add</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">s</span> <span class=\"n\">n</span><span class=\"o\">),</span> <span class=\"n\">monomial_add_single</span><span class=\"o\">,</span> <span class=\"n\">C</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">erase_single</span> <span class=\"o\">(</span><span class=\"n\">var</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"n\">var</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">var</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">var</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">erase_same</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">erase_ne</span> <span class=\"n\">hs</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">single_eq_of_ne</span> <span class=\"o\">(</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"n\">hs</span><span class=\"o\">)</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">erase_single_ne</span> <span class=\"o\">(</span><span class=\"n\">v1</span> <span class=\"n\">v2</span> <span class=\"o\">:</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hv</span> <span class=\"o\">:</span> <span class=\"n\">v1</span> <span class=\"bp\">≠</span> <span class=\"n\">v2</span><span class=\"o\">):</span> <span class=\"o\">(</span><span class=\"n\">erase</span> <span class=\"n\">v1</span> <span class=\"o\">(</span><span class=\"n\">single</span> <span class=\"n\">v2</span> <span class=\"n\">n</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">single</span> <span class=\"n\">v2</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">classical</span><span class=\"o\">,</span> <span class=\"n\">by_cases</span> <span class=\"n\">hs</span> <span class=\"o\">:</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">v1</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hs</span><span class=\"o\">,</span> <span class=\"n\">erase_same</span><span class=\"o\">,</span> <span class=\"n\">single_eq_of_ne</span> <span class=\"o\">(</span><span class=\"n\">hv</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)]</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">erase_ne</span> <span class=\"n\">hs</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192124764,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1585404190
    },
    {
        "content": "<p>Nice, thanks Kenny. I thought it was a bit annoying that <code>by_cases</code> gave as a case <code>¬s = var</code>. Would we rather have <code>s ≠ var</code>? Then you can do <code>hs.symm</code> instead of <code>ne.symm hs</code></p>",
        "id": 192124887,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1585404329
    },
    {
        "content": "<p><code>eq_zero_iff</code> looks like a version of extensionality</p>",
        "id": 192144435,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585434351
    },
    {
        "content": "<p>it should just be a rewrite with <code>ext_iff</code></p>",
        "id": 192144476,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585434372
    },
    {
        "content": "<p>I would love to change the behaviour of <code>by_cases</code> to produce <code>≠</code>.</p>",
        "id": 192148820,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585441939
    },
    {
        "content": "<p>I would also love to remove <code>ne.def</code> from the simp set.</p>",
        "id": 192148821,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585441957
    },
    {
        "content": "<p>removing <code>ne.def</code> would cause similar problems as noted with <code>gt</code> <a href=\"#narrow/stream/113489-new-members/topic/exists.2Eintro.20with.20two.20'arguments'/near/191974183\" title=\"#narrow/stream/113489-new-members/topic/exists.2Eintro.20with.20two.20'arguments'/near/191974183\">here</a></p>",
        "id": 192148885,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1585442056
    },
    {
        "content": "<p>hmm, okay, I guess I don't understand.</p>",
        "id": 192149345,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585443041
    },
    {
        "content": "<p>(what about reversing the direction of <code>ne.def</code>, and keeping it as a simp lemma?)</p>",
        "id": 192149352,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585443072
    },
    {
        "content": "<p>I'd like to make <code>ne</code> notation. I think the only lemma about ne is <code>ne.symm</code>, so it's no great loss.</p>",
        "id": 192149396,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1585443162
    }
]