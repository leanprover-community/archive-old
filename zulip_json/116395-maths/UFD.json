[
    {
        "content": "<p>Johannes <a href=\"https://github.com/leanprover/mathlib/commit/dd0c0aeefcaf6a438ab4273d7a1f42e1b8225847\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/commit/dd0c0aeefcaf6a438ab4273d7a1f42e1b8225847\">just added UFD</a>!</p>",
        "id": 133227728,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535920601
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span></p>",
        "id": 133227732,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1535920615
    },
    {
        "content": "<p>Crazy stuff. Looks very different (and much better) than anything I would have written. Here are some random things one could do: PID -&gt; UFD, a Noetherian ring is a UFD iff all height 1 primes are principal, a regular local ring is a UFD, Gauss' lemma about factoring in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi><mo>[</mo><mi>x</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">K[x]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">K</span><span class=\"mopen\">[</span><span class=\"mord mathit\">x</span><span class=\"mclose\">]</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07153em;\">K</span></span></span></span> the field of fractions of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span>) being \"the same\" as factoring in <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mi>x</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[x]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathit\">x</span><span class=\"mclose\">]</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi></mrow><annotation encoding=\"application/x-tex\">R</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span></span></span></span> a UFD implies <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>R</mi><mo>[</mo><mi>x</mi><mo>]</mo></mrow><annotation encoding=\"application/x-tex\">R[x]</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.00773em;\">R</span><span class=\"mopen\">[</span><span class=\"mord mathit\">x</span><span class=\"mclose\">]</span></span></span></span> a UFD.</p>",
        "id": 133228259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535921777
    },
    {
        "content": "<p>Seeing all this lattice stuff reminds me that as far as we know we still don't have the [fourth isomorphism theorem] (<a href=\"https://en.wikipedia.org/wiki/Correspondence_theorem_(group_theory)\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Correspondence_theorem_(group_theory)\">https://en.wikipedia.org/wiki/Correspondence_theorem_(group_theory)</a>) for any of groups, abelian groups, additive groups, additive abelian groups, R-modules or rings.</p>",
        "id": 133228316,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535921938
    },
    {
        "content": "<p>Could you explain what looks different?</p>",
        "id": 133228317,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535921939
    },
    {
        "content": "<p>I wouldn't have used the word \"lattice\" at all :-)</p>",
        "id": 133228325,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535921952
    },
    {
        "content": "<p>Come on! The Wikipedia page you linked to even mention Galois connections!</p>",
        "id": 133228328,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535921980
    },
    {
        "content": "<p>ha ha</p>",
        "id": 133228329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535921986
    },
    {
        "content": "<p>I would have just done the maths stuff</p>",
        "id": 133228330,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535921991
    },
    {
        "content": "<p>not the weird CS stuff</p>",
        "id": 133228333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535921996
    },
    {
        "content": "<p>It makes me feel I've been living in the matrix all those years, without knowing my life was secretly ruled by Galois connections.</p>",
        "id": 133228381,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535922026
    },
    {
        "content": "<p><code>lemma factor_set.sup_add_inf_eq_add : ∀(a b : factor_set α), a ⊔ b + a ⊓ b = a + b</code> WTF?!?</p>",
        "id": 133228388,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535922107
    },
    {
        "content": "<p>Kevin, do you understand what this mean?</p>",
        "id": 133228428,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535922128
    },
    {
        "content": "<p>they're multisets maybe?</p>",
        "id": 133228431,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535922151
    },
    {
        "content": "<p>I'll find out tomorrow. I need to sleep: kids go back to school tomorrow, so I go back to getting up early :(</p>",
        "id": 133228481,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1535922285
    },
    {
        "content": "<p>You make a good point though -- this was definitely something which sprung out at me when I was looking throuhg it. I guess to get an overview of the PR one could look at the <em>definitions</em>. We have <code>associated</code> which presumably is the predicate which is true on a b if a = u b for u a unit. We have the standard definition of UFD, then <code>factor_set</code>, <code>factors'</code> and <code>factors</code> and then all that GCD domain stuff which I think is a CS thing</p>",
        "id": 133228528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535922384
    },
    {
        "content": "<p>Hey -- if I use <code>leanpkg upgrade</code> to pull that update of <code>mathlib</code>, a dependency for the perfectoid project, into the perfectoid project, and then I type <code>leanpkg build</code> withing <code>_target/deps/mathlib</code>, will it take 10 seconds or 20 minutes to compile? Note that I already did this once, earlier today, and this is just one new file which nothing else depends on.</p>",
        "id": 133228537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535922455
    },
    {
        "content": "<p>Depends on which commit you're at specifically, but I'd bet on a long build because the commit right before that one touched algebra.ring and data.multiset</p>",
        "id": 133228636,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1535922698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> my kids are back on Wed and sanity will once again prevail in our house. As for the <code>a ⊔ b + a ⊓ b = a + b</code> thing, I think what's going on is that <code>factorset alpha</code> is defined to be <code> with_top (multiset { a : associates α // irreducible a }) </code>, so that is either a finite set of irreducible (up to units) or an artificial \"top\", which presumably corresponds to the factors of zero. <code>+</code> is union of multisets, so <code>{3,3,5}+{3,7}={3,3,3,5,7}</code>, and the meet and join are just infs and sups with multisets. The <code>with_top</code> is so that we can factor zero and still have a divides b iff factors of a are a subset of factors of b.</p>",
        "id": 133228745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535922916
    },
    {
        "content": "<blockquote>\n<p>I would have just done the maths stuff, not the weird CS stuff</p>\n</blockquote>\n<p>You have such a funny idea of what CS is. I think you just think everything that isn't the math you do is CS</p>",
        "id": 133228963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535923410
    },
    {
        "content": "<p>right :-)</p>",
        "id": 133229014,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535923548
    },
    {
        "content": "<p>I mean, you guys must have learnt it somewhere, and it's definitely not in a maths degree, so what is left? <code>gcd domain</code> -- ?!</p>",
        "id": 133229053,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535923587
    },
    {
        "content": "<p>My eldest son is going to university next month to study computer science and philosophy, and there was a maths book which was recommended reading for his course so I got it out of our library for him to take a look at, and it really made me laugh -- \"how to store a real number in 32 bits\" etc :-)</p>",
        "id": 133229065,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535923679
    },
    {
        "content": "<p>So I don't know much about UFDs itself, but the formalization of factors as multiset of associated elements felt very natural. Adding a top element was an easy thing, next step would be to show that the multisets form a conditionally complete lattice with bottom, then we get that <code>factor_set</code> is a complete lattice and we get GCD (infimum) and LCM (supremum) of arbitrary sets. <code>a ⊔ b + a ⊓ b = a + b</code> is the fact that <code>gcd a b * lcm a b = a * b</code> expressed as (extended) multiset of factors.</p>",
        "id": 133229207,
        "sender_full_name": "Johannes Hölzl",
        "timestamp": 1535923930
    },
    {
        "content": "<p>you surely can't take an LCM of an arbitrary set -- you mean an arbitrary finite set?</p>",
        "id": 133229219,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535924003
    },
    {
        "content": "<p>No, an arbitrary set. That's cool!</p>",
        "id": 133229222,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535924040
    },
    {
        "content": "<p>just to be clear then -- is the LCM of all the primes which are 1 mod 4 equal to zero?</p>",
        "id": 133229307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535924164
    },
    {
        "content": "<blockquote>\n<p>That's cool!</p>\n</blockquote>\n<p>That's CS nonsense :-)</p>",
        "id": 133229311,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535924183
    },
    {
        "content": "<p>It is a bit funny that with this interpretation 3 | 2^infty</p>",
        "id": 133229312,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535924202
    },
    {
        "content": "<p>Yes, all unbounded LCMs are zero</p>",
        "id": 133229318,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535924244
    },
    {
        "content": "<p>I have actually seen some version of this which is not what Johannes has used, and it's the order of a profinite group. A general order is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"normal\">Π</mi><mi>p</mi></msub><msup><mi>p</mi><msub><mi>e</mi><mi>p</mi></msub></msup></mrow><annotation encoding=\"application/x-tex\">\\Pi_pp^{e_p}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">Π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285716em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2818857142857143em;\"></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>e</mi><mi>p</mi></msub></mrow><annotation encoding=\"application/x-tex\">e_p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span></span></span></span> allowed to be all non-zero and even all infinity (indeed the order of the profinite completion of the integers is <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi mathvariant=\"normal\">Π</mi><mi>p</mi></msub><msup><mi>p</mi><mi mathvariant=\"normal\">∞</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\Pi_pp^\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.969438em;vertical-align:-0.286108em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">Π</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">∞</span></span></span></span></span></span></span></span></span></span></span>)</p>",
        "id": 133229357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535924284
    },
    {
        "content": "<p>and with interpretation sanity prevails again and 3 does not divide <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mi mathvariant=\"normal\">∞</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.664392em;\"></span><span class=\"strut bottom\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathrm\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathrm mtight\">∞</span></span></span></span></span></span></span></span></span></span></span></p>",
        "id": 133229363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535924319
    },
    {
        "content": "<p>I guess the more mathematically natural approach just completes the multisets as functions Prime -&gt; with_top nat</p>",
        "id": 133229368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535924345
    },
    {
        "content": "<p>I think that's the same as what you suggest</p>",
        "id": 133229371,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1535924353
    },
    {
        "content": "<p>that would be for profinite orders</p>",
        "id": 133229374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535924367
    },
    {
        "content": "<p>the far more mathematically natural way to do this UFD thing would just be to ignore zero rather than shoehorn it in</p>",
        "id": 133229413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535924404
    },
    {
        "content": "<p>I suppose another way which would look more natural to a mathematician would be to embed the multisets into the partially ordered set of principal ideals. Then one can see what the natural lattice structure is -- you can embed the principal ideals into the lattice of all ideals. Here you see the \"correct\" GCD of X and Y in the polynomial ring K[X,Y] in two variables -- rather than the empty multiset it's the non principal ideal generated by X and Y. The notion of GCD in a UFD does not seem so useful to me -- you can't solve lX + mY = GCD in general,  for example. Still I can imagine you guys finding some sort of strange use for it...</p>",
        "id": 133231295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535929029
    },
    {
        "content": "<p>.. maybe a Galois insertion or something...</p>",
        "id": 133231298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1535929070
    },
    {
        "content": "<p>Right, I think what Kevin suggests would be very useful. Take gcd's as ideals, and you open up another realm of interesting theorems to be formalized...</p>",
        "id": 133239791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1535948147
    }
]