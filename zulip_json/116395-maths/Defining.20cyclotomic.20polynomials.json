[
    {
        "content": "<p>This is a follow up to <br>\n<a href=\"#narrow/stream/116395-maths/topic/.239856.20little.20wedderburn/near/258812366\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/.239856.20little.20wedderburn/near/258812366</a><br>\nwhere <span class=\"user-mention\" data-user-id=\"130384\">@Riccardo Brasca</span> observes that the definition of cyclotomic polynomials in mathlib involves complex numbers and the exponential, and asks about a more algebraic definition.</p>\n<p>I see two other options </p>\n<ul>\n<li>using, as an intermediate object, a field of char 0 with all nth roots of unity, such as a splitting extension of $T^n-1$.</li>\n<li>building an inductive definition via the relation $\\prod_{d|n}\\Phi_d=T^n-1$,  possibly using Möbius inversion formula.<br>\nBut in this second option, the Möbius inversion formula gives a rational function, and you have to prove it is a polynomial. It is not so  hard, but not so easy to see that the product for $d|n$ and $d&lt;n$ of all $\\Phi_d$ divides $T^n-1$, if one observes that they are pairwise coprime in $\\mathbf Q[T]$.</li>\n</ul>",
        "id": 273686725,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646158918
    },
    {
        "content": "<p>Once one has a field with a primitive <code>n</code>-th root of unity for all <code>n</code>, changing the definition should be very easy.</p>",
        "id": 273694600,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646161872
    },
    {
        "content": "<p>An interesting experiment would be to see what happens if one use different fields for various <code>n</code> (for example the splitting field of <code>X ^ n - 1</code>).</p>",
        "id": 273694744,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646161924
    },
    {
        "content": "<p>Isn't it possible to combine both options <span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> ?</p>\n<ul>\n<li>First, construct each individual Phi_n in a any field with a given primitive nth root of unity</li>\n<li>Show that in the case of the complex numbers, these polynomials are in Z[X] and satisfy the expected divisibility properties (i.e. product formula).</li>\n<li>Define by induction the sequence Phi_n for any commutative ring A, with Phi_n defined as the quotient of X^n-1 by the monic polynomial given by the product of the Phi_d for d strictly dividing n.</li>\n<li>Finally, show that the two constructions coincide (using that if a field has a given primitive nth root, it also has dth roots for d dividing n).<br>\n(I do not think this would require Möbius inversion formula or rational functions, even though I have often taught this subject using your second option...)</li>\n</ul>",
        "id": 274224566,
        "sender_full_name": "Joël Riou",
        "timestamp": 1646462122
    },
    {
        "content": "<p>Here's a start on the second option. Note that polynomial division <code>f  /ₘ g</code> is monic polynomial division and it rounds (it's another polynomial) so we never need to consider rational functions. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.polynomial.div</span> <span class=\"c1\">-- I divide polynomials by monic polynomials</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.big_operators.finprod</span> <span class=\"c1\">-- I use set.finite products</span>\n\n<span class=\"c1\">-- Get access to R[X] notation and ∏ᶠ notation</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">polynomial</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"c1\">-- Definition of Euler Phi directly over ℤ</span>\n<span class=\"kd\">noncomputable</span> <span class=\"kd\">def</span> <span class=\"n\">euler_phi</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"n\">ℤ</span><span class=\"o\">[</span><span class=\"n\">X</span><span class=\"o\">]</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">37</span>\n<span class=\"bp\">|</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/ₘ</span> <span class=\"bp\">∏ᶠ</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">},</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- make d &lt; n + 2 an assumption and then the equation compiler</span>\n  <span class=\"c1\">-- will let us exit with euler_phi d</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">d</span> <span class=\"k\">with</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">hd</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">euler_phi</span> <span class=\"n\">d</span><span class=\"o\">),</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">euler_phi_zero</span> <span class=\"o\">:</span> <span class=\"n\">euler_phi</span> <span class=\"mi\">0</span> <span class=\"bp\">=</span> <span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"mi\">37</span> <span class=\"o\">:=</span><span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">euler_phi</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">euler_phi_one</span> <span class=\"o\">:</span> <span class=\"n\">euler_phi</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"n\">X</span> <span class=\"bp\">-</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">euler_phi</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">euler_phi_ge_two</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">euler_phi</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span>\n<span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"o\">(</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/ₘ</span> <span class=\"bp\">∏ᶠ</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"o\">},</span> <span class=\"n\">euler_phi</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">euler_phi</span><span class=\"o\">,</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>\n  <span class=\"n\">ext</span> <span class=\"o\">⟨</span><span class=\"n\">d</span><span class=\"o\">,</span> <span class=\"n\">hdn</span><span class=\"o\">,</span> <span class=\"n\">hddiv</span><span class=\"o\">⟩,</span>\n  <span class=\"n\">congr'</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">euler_phi_def</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hm</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">euler_phi</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">X</span><span class=\"bp\">^</span><span class=\"n\">m</span><span class=\"bp\">-</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">/ₘ</span> <span class=\"bp\">∏ᶠ</span> <span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"o\">{</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">//</span> <span class=\"n\">d</span> <span class=\"bp\">&lt;</span> <span class=\"n\">m</span> <span class=\"bp\">∧</span> <span class=\"n\">d</span> <span class=\"bp\">∣</span> <span class=\"n\">m</span><span class=\"o\">},</span> <span class=\"n\">euler_phi</span> <span class=\"n\">d</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rcases</span> <span class=\"n\">m</span> <span class=\"k\">with</span> <span class=\"n\">h0</span><span class=\"bp\">|</span><span class=\"n\">h1</span><span class=\"bp\">|</span><span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">cases</span> <span class=\"n\">hm</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rcases</span> <span class=\"n\">hm</span> <span class=\"k\">with</span> <span class=\"n\">_</span> <span class=\"bp\">|</span> <span class=\"o\">⟨</span><span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"o\">⟨⟩⟩,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">euler_phi_ge_two</span> <span class=\"n\">m</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 274227637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646466367
    },
    {
        "content": "<p>In any case the file <code>ring_theory.cyclotomic.basic</code> is now pretty big (more than 1000 lines). It makes sense to split it, I think it should only contains results whose proof really depends on the definition. At the end we can even make the definition irreducible if we want.</p>",
        "id": 274238489,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646480490
    },
    {
        "content": "<p>I have the impression that what we want is a polynomial <code>cyclotomic n ℤ</code> such that if we base change it to a ring (field? domain? whatever) that has a primitive root of unity, than its roots are exactly the primitive roots of unity. All the rest should follow by this, ignoring the actual definition.</p>",
        "id": 274238573,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1646480592
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"459699\">Joël Riou</span> <a href=\"#narrow/stream/116395-maths/topic/Defining.20cyclotomic.20polynomials/near/274224566\">said</a>:</p>\n<blockquote>\n<p>Isn't it possible to combine both options <span class=\"user-mention silent\" data-user-id=\"130609\">Antoine Chambert-Loir</span> ?</p>\n<ul>\n<li>First, construct each individual Phi_n in a any field with a given primitive nth root of unity</li>\n<li>Show that in the case of the complex numbers, these polynomials are in Z[X] and satisfy the expected divisibility properties (i.e. product formula).</li>\n<li>Define by induction the sequence Phi_n for any commutative ring A, with Phi_n defined as the quotient of X^n-1 by the monic polynomial given by the product of the Phi_d for d strictly dividing n.</li>\n<li>Finally, show that the two constructions coincide (using that if a field has a given primitive nth root, it also has dth roots for d dividing n).<br>\n(I do not think this would require Möbius inversion formula or rational functions, even though I have often taught this subject using your second option...)</li>\n</ul>\n</blockquote>\n<p>Certainly it should be. <br>\nQuestions. <br>\nAbout step 3, do you define Phi_n as the quotient, even before you proved the rest is 0?<br>\nAbout step 4, I also believe that the uniqueness of the construction should be stated carefully, for example: if P_n and Q_n satisfy \\prod_{d|n} P_d = \\prod_{d|n} Q_d for all n | N, then P_n = Q_n for all n | N.</p>",
        "id": 274246139,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1646490411
    },
    {
        "content": "<p>Yes that's right, I defined Phi_n the quotient of two polynomials without worrying about the remainder. It's mathematically correct but to a mathematician looks a bit strange. You then have to prove what you're dividing by does divide what you're dividing so you can use the lemma saying a=b/c iff a*c=b which is of course not true in general</p>",
        "id": 274249934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1646494920
    }
]