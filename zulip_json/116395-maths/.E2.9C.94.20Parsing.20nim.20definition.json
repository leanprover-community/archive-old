[
    {
        "content": "<p>I'm having a hard time understanding the <a href=\"https://github.com/leanprover-community/mathlib/blob/0b9663036339f050000277c99fab463b2e610f58/src/set_theory/game/nim.lean#L46\">definition of nim in mathlib</a>  in mathlib. I'm pasting it here for convenience:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- The definition of single-heap nim, which can be viewed as a pile of stones where each player can</span>\n<span class=\"sd\"> take a positive number of stones from it on their turn. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">nim</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span> <span class=\"bp\">→</span> <span class=\"n\">pgame</span>\n<span class=\"bp\">|</span> <span class=\"n\">O₁</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">O₁.out.α</span><span class=\"o\">,</span> <span class=\"n\">O₁.out.α</span><span class=\"o\">,</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">O₂</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">hwf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ordinal.typein</span> <span class=\"n\">O₁.out.r</span> <span class=\"n\">O₂</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">O₁</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"kd\">begin</span> <span class=\"n\">nth_rewrite_rhs</span> <span class=\"mi\">0</span> <span class=\"bp\">←</span><span class=\"n\">ordinal.type_out'</span> <span class=\"n\">O₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ordinal.typein_lt_type</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">nim</span> <span class=\"o\">(</span><span class=\"n\">ordinal.typein</span> <span class=\"n\">O₁.out.r</span> <span class=\"n\">O₂</span><span class=\"o\">),</span>\n  <span class=\"bp\">λ</span> <span class=\"n\">O₂</span><span class=\"o\">,</span> <span class=\"k\">have</span> <span class=\"n\">hwf</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">ordinal.typein</span> <span class=\"n\">O₁.out.r</span> <span class=\"n\">O₂</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">O₁</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"kd\">begin</span> <span class=\"n\">nth_rewrite_rhs</span> <span class=\"mi\">0</span> <span class=\"bp\">←</span><span class=\"n\">ordinal.type_out'</span> <span class=\"n\">O₁</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">ordinal.typein_lt_type</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"kd\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">nim</span> <span class=\"o\">(</span><span class=\"n\">ordinal.typein</span> <span class=\"n\">O₁.out.r</span> <span class=\"n\">O₂</span><span class=\"o\">)⟩</span>\n<span class=\"n\">using_well_founded</span> <span class=\"o\">{</span> <span class=\"n\">dec_tac</span> <span class=\"o\">:=</span> <span class=\"n\">tactic.assumption</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>I understand <code>pre-games</code> in mathlib quite well so I'm guessing <code>O₁.out.α</code>, <code>O₁.out.α</code>are the indexing sets for the possible moves of L and R. But what is going on after that? I'm really lost in the jargon. </p>\n<p>Thanks,</p>",
        "id": 267132549,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1641513839
    },
    {
        "content": "<p>Feel free to try to delete the <code>have hwf : ..., from ...</code> proofs. You'll see what goes wrong</p>",
        "id": 267132681,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641513915
    },
    {
        "content": "<p>So the data that is the <code>pgame</code> in the definition is as such:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">nim</span> <span class=\"o\">:</span> <span class=\"n\">ordinal</span> <span class=\"bp\">→</span> <span class=\"n\">pgame</span>\n<span class=\"bp\">|</span> <span class=\"n\">O₁</span> <span class=\"o\">:=</span> <span class=\"o\">⟨</span> <span class=\"n\">O₁.out.α</span><span class=\"o\">,</span> <span class=\"n\">O₁.out.α</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">O₂</span><span class=\"o\">,</span> <span class=\"n\">nim</span> <span class=\"o\">(</span><span class=\"n\">ordinal.typein</span> <span class=\"n\">O₁.out.r</span> <span class=\"n\">O₂</span><span class=\"o\">),</span> <span class=\"bp\">λ</span> <span class=\"n\">O₂</span><span class=\"o\">,</span> <span class=\"n\">nim</span> <span class=\"o\">(</span><span class=\"n\">ordinal.typein</span> <span class=\"n\">O₁.out.r</span> <span class=\"n\">O₂</span><span class=\"o\">)</span> <span class=\"o\">⟩</span>\n</code></pre></div>",
        "id": 267132850,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641514022
    },
    {
        "content": "<p>however, we are recursing on <code>nim</code> to make the third and fourth data. to make the WF recursion work, we need to show that in <code>nim (ordinal.typein O₁.out.r O₂)</code>, <code>(ordinal.typein O₁.out.r O₂)</code> is definitely \"smaller\" than the input variable <code>O₁ </code> we are recursing on. Because that, by WF recursion, means that the function will terminate.</p>",
        "id": 267133006,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641514124
    },
    {
        "content": "<p>Which is exactly what the <code>have hwf : (ordinal.typein O₁.out.r O₂) &lt; O₁, from ...</code> terms state! Those terms get used by the equation compiler, which is smart enough to keep track of them, even though they are not used to make the <code>nim (ordinal.typein O₁.out.r O₂)</code> term itself!</p>",
        "id": 267133088,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641514190
    },
    {
        "content": "<p>I see, so the third data is really the map <code>λ O₂, nim(ordinal.typein O₁.out.r O₂)</code> + proof data.</p>",
        "id": 267133575,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1641514491
    },
    {
        "content": "<p>Ah, there's a lemma below <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pgame.nim.nim_def\">docs#pgame.nim.nim_def</a> that makes this precise.</p>",
        "id": 267134982,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1641514850
    },
    {
        "content": "<p>One could have also defined <code>nim_wf_lemma</code> first and used that directly.</p>",
        "id": 267135282,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641515115
    },
    {
        "content": "<p>This is the first time I'm seeing well-foundedness being explicitly proven.</p>\n<p>The definition of <code>pgame</code> simply says </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">inductive</span> <span class=\"n\">pgame</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">(</span><span class=\"n\">u</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">pgame</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">pgame</span>\n</code></pre></div>\n<p>So I was expecting simply a function like <code>λ O₂, nim(ordinal.typein O₁.out.r O₂)</code>. </p>\n<p>It makes sense though that we need to show well-foundedness but this is the first inductive definition I'm seeing where this is explicitly done. Is there a general rule for when we need to prove well-founded recursion explicitly?</p>",
        "id": 267135809,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1641515540
    },
    {
        "content": "<p>I guess, the fact that the indexing set is an <code>ordinal</code> means <code>wf</code> is going to be non-trivial.</p>",
        "id": 267135864,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1641515590
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/multiset.strong_induction_on/src\">src#multiset.strong_induction_on</a></p>",
        "id": 267136128,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641515814
    },
    {
        "content": "<p>Don't let the fact it says induction fool you, it's really a recursor that can construct data.</p>",
        "id": 267136148,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1641515834
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 267136350,
        "sender_full_name": "Apurva Nakade",
        "timestamp": 1641516006
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"245078\">Apurva Nakade</span> has marked this topic as resolved.</p>",
        "id": 267136357,
        "sender_full_name": "Notification Bot",
        "timestamp": 1641516013
    }
]