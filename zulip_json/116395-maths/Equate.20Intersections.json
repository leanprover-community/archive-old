[
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/765dfb9d5e7cb6a7bec5aab65c57c5c0a86a17cf/src/number_theory/L_functions.lean#L232\">https://github.com/leanprover-community/mathlib/blob/765dfb9d5e7cb6a7bec5aab65c57c5c0a86a17cf/src/number_theory/L_functions.lean#L232</a></p>\n<p>I have proved that the intersection of finitely many clopens are clopen, and I have another set, which Lean infers as a possibly infinite intersection of clopens, which is actually the same as the previous set, hence is clopen. I am having trouble in showing that both the sets (given in <code>g</code> and the goal) are indeed the same. This essentially involves splitting up  elements of <code>↥(↑t ∩ Uᶜ)</code>, however, that is problematic. When I try to use <code>set.mem_inter_iff</code>, I get the error : <code>rewrite tactic failed, motive is not type correct\n  λ (_a : Prop), h ↑i _ = h ↑i _</code>.</p>\n<p>I have no idea as to how to proceed, any help is appreciated, thank you!</p>",
        "id": 231660083,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1616601727
    },
    {
        "content": "<p>It seems to me that if you can change <code>⋂ (i : H) (i_1 : i ∈ t) (i_1 : i ∈ Uᶜ), ...</code> to <code>⋂ (i : H) (i_1 : i ∈ t \\cap Uᶜ), ...</code> then your life would be much easier :-) I'm fiddling with this now.</p>",
        "id": 231681018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616608912
    },
    {
        "content": "<p>I just managed to complete the proof! I found a way out :)</p>",
        "id": 231681846,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1616609190
    },
    {
        "content": "<p>You might find life easier if you didn't have two things called <code>h</code> and two things called <code>g</code> :-)</p>",
        "id": 231681862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616609199
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"n\">t</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h2</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">⋂</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">s</span> <span class=\"bp\">∩</span> <span class=\"n\">t</span><span class=\"o\">),</span> <span class=\"n\">F</span> <span class=\"n\">x</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>by the way</p>",
        "id": 231692966,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1616613585
    }
]