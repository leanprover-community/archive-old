[
    {
        "content": "<p>This code throws an error that looks like a diamond-ish error. Two different instances of <code>has_zero</code>?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.polynomial.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">polynomial</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">i</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">monomial</span> <span class=\"n\">j</span> <span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">⊆</span> <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"n\">finset.subset.trans</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finsupp.support_add</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">monomial</span> <span class=\"n\">j</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"n\">_</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key</span> <span class=\"o\">:=</span> <span class=\"n\">finset.union_subset_union</span> <span class=\"o\">(</span><span class=\"n\">support_monomial'</span> <span class=\"n\">i</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">support_monomial'</span> <span class=\"n\">j</span> <span class=\"n\">b</span><span class=\"o\">),</span>\n  <span class=\"c1\">-- this doesn't work: apply finset.subset.trans key,</span>\n  <span class=\"c1\">-- this doesn't work: refine finset.subset.trans key _,</span>\n  <span class=\"k\">have</span> <span class=\"n\">key'</span> <span class=\"o\">:</span> <span class=\"o\">({</span><span class=\"n\">i</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">∪</span> <span class=\"o\">({</span><span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"o\">({</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span>\n  <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">finset.union_subset</span><span class=\"o\">,</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset.singleton_subset_iff</span><span class=\"o\">,</span> <span class=\"n\">finset.mem_insert</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">or.inl</span> <span class=\"n\">rfl</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"n\">or.inr</span> <span class=\"o\">(</span><span class=\"n\">finset.mem_singleton_self</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n  <span class=\"k\">have</span> <span class=\"n\">key''</span> <span class=\"o\">:=</span> <span class=\"n\">finset.subset.trans</span> <span class=\"n\">key</span> <span class=\"n\">key'</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">key''</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">type</span> <span class=\"n\">ascription</span><span class=\"o\">,</span> <span class=\"n\">term</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">finsupp.support</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class.to_has_zero</span> <span class=\"n\">ℤ</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_class</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.semiring</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monomial</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.semiring</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∪</span>\n      <span class=\"bp\">@</span><span class=\"n\">finsupp.support</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span>\n        <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">mul_zero_class.to_has_zero</span> <span class=\"n\">ℤ</span>\n           <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monoid_with_zero.to_mul_zero_class</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">semiring.to_monoid_with_zero</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.semiring</span><span class=\"o\">)))</span>\n        <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monomial</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.semiring</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span>\n    <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">}</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">finsupp.support</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_has_zero</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monomial</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.semiring</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∪</span>\n      <span class=\"bp\">@</span><span class=\"n\">finsupp.support</span> <span class=\"n\">ℕ</span> <span class=\"n\">ℤ</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">add_monoid.to_has_zero</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.add_monoid</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">monomial</span> <span class=\"n\">ℤ</span> <span class=\"n\">int.semiring</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span>\n    <span class=\"o\">{</span><span class=\"n\">i</span><span class=\"o\">,</span> <span class=\"n\">j</span><span class=\"o\">}</span>\n</code></pre></div>",
        "id": 227135564,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1613874480
    },
    {
        "content": "<p><code>convert key''</code> works</p>",
        "id": 227135785,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613874753
    },
    {
        "content": "<p>If you use <code>set_option pp.notation false</code> you will see that the error is </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">has_subset.subset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.has_subset</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_union.union</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.has_union</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">nat.decidable_eq</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span>\n <span class=\"bp\">...</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"bp\">@</span><span class=\"n\">has_subset.subset</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.has_subset</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_union.union</span> <span class=\"o\">(</span><span class=\"n\">finset</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">finset.has_union</span> <span class=\"n\">nat</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">classical.prop_decidable</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">eq</span> <span class=\"n\">nat</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">)))</span>\n<span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 227135839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613874840
    },
    {
        "content": "<p>i.e. the problem is in the decidability instance found for the finset union</p>",
        "id": 227135892,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613874876
    },
    {
        "content": "<p>is there a better workaround than <code>convert</code>? (it would be nice to able to use <code>apply</code> or <code>refine</code>)</p>",
        "id": 227136151,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1613875278
    },
    {
        "content": "<p>This is an issue in the statement of <code>finsupp.support_add</code></p>",
        "id": 227136221,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613875358
    },
    {
        "content": "<p>changing the lemma to</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">support_add</span> <span class=\"o\">[</span><span class=\"n\">decidable_eq</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">g₁</span> <span class=\"n\">g₂</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→₀</span> <span class=\"n\">M</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">g₁</span> <span class=\"bp\">+</span> <span class=\"n\">g₂</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">⊆</span> <span class=\"n\">g₁.support</span> <span class=\"bp\">∪</span> <span class=\"n\">g₂.support</span> <span class=\"o\">:=</span>\n<span class=\"n\">support_zip_with</span>\n</code></pre></div>\n<p>fixes the issue</p>",
        "id": 227136244,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613875399
    },
    {
        "content": "<p>although you have to add decidability arguments to other theorems upstream of it too</p>",
        "id": 227136246,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613875425
    },
    {
        "content": "<p>should I PR this change?</p>",
        "id": 227136447,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1613875708
    },
    {
        "content": "<p>I'm already on it</p>",
        "id": 227136448,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613875719
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6333\">#6333</a></p>",
        "id": 227137651,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1613877373
    }
]