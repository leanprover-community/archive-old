[
    {
        "content": "<p>hello, I am just getting started using lean and was wondering if anyone could help me out</p>\n<p>I am trying to prove the IVT using the basic functions in lean. Right now, I have the following:</p>\n<p>theorem intermediate_value {f : ℝ → ℝ} (Hf : continuous f)<br>\n {a b : ℝ} (Hab : a &lt; b)<br>\n        (Hav : f a &lt; 0) (Hbv : f b &gt; 0)  : <br>\n        ∃ c, a &lt; c ∧ c &lt; b ∧ f c = 0 :=<br>\nbegin<br>\nlet K := {x | a&lt;b ∧ x&gt;a ∧ x&lt;b ∧ f x &lt;= 0},<br>\nlet c := is_lub K,<br>\n--here I would like to use the definition of least upper bound, image of c, and continuity to say that f(c) is within epsilon of 0 but I'm not sure how to use the syntax of lean<br>\nend</p>",
        "id": 192478415,
        "sender_full_name": "adriana",
        "timestamp": 1585709707
    },
    {
        "content": "<p><code>is_lub</code> is a predicate; you probably want <code>let c := Sup K</code>.</p>",
        "id": 192478641,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585710087
    },
    {
        "content": "<p>BTW, no need to include <code>a &lt; b</code> in the definition of <code>K</code>. You already have it in <code>Hab</code>.</p>",
        "id": 192478703,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585710185
    },
    {
        "content": "<p>If you use non-strict inequalities everywhere, then you'll be able to say that <code>K</code> is closed, hence it contains its Sup (see <code>cSup_mem_of_is_closed</code>).</p>",
        "id": 192478870,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585710366
    },
    {
        "content": "<p>And you'll need to show that <code>f x &lt; 0</code> is impossible.</p>",
        "id": 192478894,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585710415
    },
    {
        "content": "<p>Or you can do something like (not tested)</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">rcases</span> <span class=\"n\">lt_trichotomy</span> <span class=\"mi\">0</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"k\">with</span> <span class=\"n\">Hc</span> <span class=\"bp\">|</span> <span class=\"n\">Hc</span> <span class=\"bp\">|</span> <span class=\"n\">Hc</span><span class=\"o\">,</span>\n</pre></div>\n\n\n<p>In two cases you'll get to a contradiction, and in the middle case you'll need to show <code>a &lt; c</code> and <code>c &lt; b</code>.</p>",
        "id": 192479013,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585710583
    },
    {
        "content": "<p>It makes sense to prove <code>a ≤ c</code> and <code>c ≤ b</code> before doing <code>rcases</code>.</p>",
        "id": 192479073,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585710613
    },
    {
        "content": "<p>Use <code>cSup_le</code> and <code>le_cSup</code> lemmas.</p>",
        "id": 192479084,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585710636
    },
    {
        "content": "<p>which import statement do I need in order to use Sup?</p>",
        "id": 192479907,
        "sender_full_name": "adriana",
        "timestamp": 1585711736
    },
    {
        "content": "<p>What is your mathlib version? It older versions it is in <code>lattice</code> namespace (was changed a few weeks ago).</p>",
        "id": 192480160,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585712151
    },
    {
        "content": "<p>It is defined in <code>order/complete_lattice</code>; lemmas that work for reals are in <code>order/conditionally_complete_lattice</code>, and the latter file is <code>import</code>ed by <code>data/real/basic</code>.</p>",
        "id": 192480222,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585712231
    },
    {
        "content": "<p>So, if you have real numbers, then you probably have <code>Sup</code> and most of its properties.</p>",
        "id": 192480225,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1585712255
    },
    {
        "content": "<p>thanks, I had the old version!</p>",
        "id": 192481244,
        "sender_full_name": "adriana",
        "timestamp": 1585713749
    }
]