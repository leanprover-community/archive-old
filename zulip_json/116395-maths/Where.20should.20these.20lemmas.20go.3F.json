[
    {
        "content": "<p>I would like to add the fact that CommRing isomorphisms are local ring homs (see below). However, I can't decide where this should belong, as it relies both on categories and on the predicate <code>is_local_ring_hom</code>, which is defined in <code>ring_theory/ideal/basic.lean</code>. The two options I can see are:</p>\n<ol>\n<li><a href=\"https://github.com/leanprover-community/mathlib/blob/9a7d9a8e9bd819dd5603d25ffecc34495aceb6ff/src/ring_theory/ideal/basic.lean#L924\">ring_theory/ideal/basic.lean</a>. But this feels a little out of place, as there are no other mentions of category theory in that file, so it would introduce a new cross-directory dependency.</li>\n<li><a href=\"https://github.com/leanprover-community/mathlib/blob/9a7d9a8e9bd819dd5603d25ffecc34495aceb6ff/src/algebra/category/CommRing/basic.lean#L205\">algebra/category/CommRing/basic.lean</a>. Here it would sort of fit in between some other facts about CommRing isomorphisms. But here too, it would introduce a cross-directory dependency to import <code>ring_theory/ideal/basic.lean</code>.</li>\n</ol>\n<p>Any opinions? Are dependencies between different directories even something worth avoiding?</p>\n<p>I needed this previously in <a href=\"https://github.com/leanprover-community/mathlib/blob/9a7d9a8e9bd819dd5603d25ffecc34495aceb6ff/src/algebraic_geometry/Spec.lean#L182\"><code>Spec.lean</code></a>, there I just did it manually without the abstract lemma. Now I need it again, which is why I want to add this.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.ideal.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.category.CommRing.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_local_ring_hom_of_iso</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">≅</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_local_ring_hom</span> <span class=\"n\">f.hom</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">map_nonunit</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">f.inv.is_unit_map</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">coe_hom_inv_id</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span> <span class=\"o\">}</span>\n\n<span class=\"kd\">@[priority 100]</span>\n<span class=\"kd\">instance</span> <span class=\"n\">is_local_ring_hom_of_is_iso</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">CommRing</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">⟶</span> <span class=\"n\">S</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">is_iso</span> <span class=\"n\">f</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_local_ring_hom</span> <span class=\"n\">f</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_local_ring_hom_of_iso</span> <span class=\"o\">(</span><span class=\"n\">as_iso</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 250386915,
        "sender_full_name": "Justus Springer",
        "timestamp": 1629741074
    },
    {
        "content": "<p>Why not add a new file?</p>",
        "id": 250398064,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1629746006
    },
    {
        "content": "<p>But in which folder?</p>",
        "id": 250403145,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1629748623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"384542\">@Justus Springer</span> I think this should be split up as follows.<br>\nFirst, we should have a variant of your <code>is_local_ring_hom_of_iso</code> using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_equiv\">docs#ring_equiv</a> as opposed to an isomoprhism in <code>CommRing</code>.<br>\nSecond, construct a way to go from a ring_equiv to an isomorphism in <code>CommRing</code> (and vice versa), and lastly combine the two to obtain what you have above.</p>\n<p>The ring_equiv version of <code>is_local_ring_hom_of_iso</code> should go nearby where <code>is_local_ring_hom</code> is defined, and the constructions relating a ring_equiv and isomorphisms in <code>CommRing</code> should go in the <code>algebra/category/CommRing</code> folder.</p>",
        "id": 250403752,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629748864
    },
    {
        "content": "<p>Looks like we already have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ring_equiv_iso_CommRing_iso\">docs#ring_equiv_iso_CommRing_iso</a> and <a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.iso.CommRing_iso_to_ring_equiv\">docs#category_theory.iso.CommRing_iso_to_ring_equiv</a></p>",
        "id": 250404586,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629749281
    },
    {
        "content": "<p>Arguably all the stuff near the bottom of <code>ring_theory/ideal/basic.lean</code> starting with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/local_ring/src\">src#local_ring</a> should be in a separate file called <code>ring_theory/local_ring.lean</code> or something...</p>",
        "id": 250405286,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629749682
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_local_ring_hom\">docs#is_local_ring_hom</a> since I don't see the link upthread</p>",
        "id": 250405504,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629749789
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"243562\">@Adam Topaz</span>  Thanks, I will try it as you describe and split the file.</p>",
        "id": 250446263,
        "sender_full_name": "Justus Springer",
        "timestamp": 1629785897
    },
    {
        "content": "<p>PR'd: <a href=\"https://github.com/leanprover-community/mathlib/issues/8849\">#8849</a> <a href=\"https://github.com/leanprover-community/mathlib/issues/8850\">#8850</a></p>",
        "id": 250518188,
        "sender_full_name": "Justus Springer",
        "timestamp": 1629825797
    },
    {
        "content": "<p>I love the definition of local ring hom -- it reflects units</p>",
        "id": 250565475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629849494
    },
    {
        "content": "<p>I'm a little surprised we didn't define <code>is_local_ring_hom</code> on the monoid level <span aria-label=\"wink\" class=\"emoji emoji-1f609\" role=\"img\" title=\"wink\">:wink:</span></p>",
        "id": 250566210,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1629850106
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/Where.20should.20these.20lemmas.20go.3F/near/250565475\">said</a>:</p>\n<blockquote>\n<p>I love the definition of local ring hom -- it reflects units</p>\n</blockquote>\n<p>Same. Only the name of the field is a little confusing: <code>map_nonunit</code></p>",
        "id": 250610821,
        "sender_full_name": "Justus Springer",
        "timestamp": 1629893440
    }
]