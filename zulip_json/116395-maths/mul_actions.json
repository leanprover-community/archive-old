[
    {
        "content": "<p>Given an action of a group <code>G</code> on  a set <code>X</code>, one can define related actions such as the product <code>X × X</code> <br>\nand the complement of the diagonal <code>{ x : X × X | x.1 ≠ x.2 }</code>.<br>\nIt starts nicely, but then I can't manage to say that the obtained action has given properties.<br>\nIt seems I have to define an <code>instance</code>, but I am told by Lean that <code>sub_mul_action</code> is not a class. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.prod</span>\n<span class=\"kn\">import</span> <span class=\"n\">group_theory.group_action.sub_mul_action</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">equiv.perm</span> <span class=\"n\">equiv</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">G</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">X</span><span class=\"o\">}</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">square_minus_diag</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n <span class=\"n\">sub_mul_action</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">carrier</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span> <span class=\"bp\">|</span> <span class=\"n\">x.1</span> <span class=\"bp\">≠</span> <span class=\"n\">x.2</span> <span class=\"o\">},</span>\n  <span class=\"n\">smul_mem'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">g</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"n\">rw</span> <span class=\"n\">set.mem_set_of_eq</span> <span class=\"n\">at</span> <span class=\"n\">hx</span> <span class=\"bp\">⊢</span><span class=\"o\">,</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">prod.smul_snd</span><span class=\"o\">,</span> <span class=\"n\">prod.smul_fst</span><span class=\"o\">,</span> <span class=\"n\">ne.def</span><span class=\"o\">,</span> <span class=\"n\">smul_left_cancel_iff</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">],</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span> <span class=\"o\">}</span>\n\n<span class=\"c1\">-- doesn't type</span>\n<span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">X</span><span class=\"o\">]:</span> <span class=\"n\">mul_action.is_pretransitive</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">square_minus_diag.mul_action</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263052517,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638212133
    },
    {
        "content": "<p>Does deleting the last <code>.mul_action</code> fix it?</p>",
        "id": 263053010,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638212400
    },
    {
        "content": "<p>Maybe after adding additional variables <code>G</code> and <code>X</code>?</p>",
        "id": 263053151,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638212437
    },
    {
        "content": "<p>No, I get zigouigouis (twiddles) under <code>mul_action</code> and under <code>square_minus_diag</code>.</p>",
        "id": 263053376,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638212537
    },
    {
        "content": "<p>Hmm... I'm on my phone so I can't be more helpful, but I try it out in a few mins on the computer</p>",
        "id": 263053585,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1638212657
    },
    {
        "content": "<p>I would expect that you need to write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">[</span><span class=\"n\">nontrivial</span> <span class=\"n\">X</span><span class=\"o\">]:</span> <span class=\"n\">mul_action.is_pretransitive</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">square_minus_diag</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263053908,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638212799
    },
    {
        "content": "<p>What is the exact error that you get?</p>",
        "id": 263053921,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638212807
    },
    {
        "content": "<p>It was : </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">invalid</span> <span class=\"n\">field</span> <span class=\"kd\">notation</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">is</span> <span class=\"n\">not</span> <span class=\"n\">of</span> <span class=\"n\">the</span> <span class=\"n\">form</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">...</span><span class=\"o\">)</span> <span class=\"n\">where</span> <span class=\"n\">C</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"kd\">constant</span>\n  <span class=\"n\">square_minus_diag</span>\n<span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">G</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_3</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">?</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_4</span> <span class=\"o\">:</span> <span class=\"n\">mul_action</span> <span class=\"n\">G</span> <span class=\"n\">X</span><span class=\"o\">],</span> <span class=\"n\">sub_mul_action</span> <span class=\"n\">G</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"bp\">×</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 263054223,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638212963
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"130609\">@Antoine Chambert-Loir</span> Aha, but do I understand correctly that my suggestion works?</p>",
        "id": 263062026,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638216823
    },
    {
        "content": "<p>The error tells you that <code>square_minus_diag</code> expects explicit arguments <code>G</code> and <code>X</code>.</p>",
        "id": 263062114,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638216857
    },
    {
        "content": "<p>I never understand those <code>Type ?</code> messages. I thought it meant Lean couldn't find the type, but apparently that's not exactly that.</p>",
        "id": 263062758,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638217235
    },
    {
        "content": "<p>The error means \"you types <code>square_minus_diag.mul_action</code> , but the thing is, <code>square_minus_diag</code> is a function which wants to eat a group <code>G</code> and a G-module <code>X</code>, so in particular its type is a function type, so <code>square_minus_diag.mul_action</code> means something like <code>function.mul_action square_minus_diag</code> which makes no sense because <code>function.mul_action</code> doesn't exist\"</p>",
        "id": 263063023,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638217401
    },
    {
        "content": "<p>PS I love the \"pre-transitive\" name! It's like pre-primes being 1 or prime.</p>",
        "id": 263063270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1638217531
    },
    {
        "content": "<p>I am not responsible for pretransitive ! <br>\nOne comment in the <a href=\"https://github.com/leanprover-community/mathlib/issues/10253\">#10253</a> is that primitive should be turned to preprimitive, removing the nonempty hypothesis.</p>",
        "id": 263065227,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1638218568
    }
]