[
    {
        "content": "<p>Do we have <del>coproducts</del>colimits of topological spaces, in either unbundled or bundled form? <span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 171503334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563874827
    },
    {
        "content": "<p>that is disjoint union?</p>",
        "id": 171503353,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563874851
    },
    {
        "content": "<p>I just want to make a topological space from a union of open sets.</p>",
        "id": 171503355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563874854
    },
    {
        "content": "<p>Sorry, I mean colimits</p>",
        "id": 171503371,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563874867
    },
    {
        "content": "<p>Yes, we have arbitrarily limits and colimits, see <code>topology/Top/limits.lean</code></p>",
        "id": 171503384,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563874883
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/Top/limits.lean#L51\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/topology/Top/limits.lean#L51\">https://github.com/leanprover-community/mathlib/blob/master/src/topology/Top/limits.lean#L51</a></p>",
        "id": 171503387,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563874888
    },
    {
        "content": "<p>So this is the bundled form. How about the unbundled form?</p>",
        "id": 171503448,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563874929
    },
    {
        "content": "<p>Just some explicit lemma about I've got a bunch of topological spaces with no mention of <code>Top</code></p>",
        "id": 171503464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563874955
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> You also had some example file, showing how to work with these, right?</p>",
        "id": 171503466,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563874955
    },
    {
        "content": "<p>I'd be interested in extracting the unbundled form.</p>",
        "id": 171503485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563874972
    },
    {
        "content": "<p><code>docs/tutorial/category_theory/calculating_colimits_in_Top.lean</code></p>",
        "id": 171503508,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563874992
    },
    {
        "content": "<p><em>Super</em>, thanks.</p>",
        "id": 171503513,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563875005
    },
    {
        "content": "<p>Why not see if you can use the bundled version? You may find you like it. :-)</p>",
        "id": 171503516,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563875010
    },
    {
        "content": "<p>Where is <code>F.sections</code> defined?</p>",
        "id": 171503620,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563875094
    },
    {
        "content": "<p>I want to see the actual type</p>",
        "id": 171503636,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563875109
    },
    {
        "content": "<p>category_theory/types.lean</p>",
        "id": 171503733,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563875182
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>def sections (F : J ⥤ Type w) : set (Π j, F.obj j) :=\n{ u | ∀ {j j&#39;} (f : j ⟶ j&#39;), F.map f (u j) = u j&#39;}\n</pre></div>",
        "id": 171503738,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563875190
    },
    {
        "content": "<p>I think bundled v unbundled is a big question. We have to make judgements about what to do here. I have a love-hate relationship with the category theory repo, but every time I fail I come back later a little bit stronger.</p>",
        "id": 171503768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563875235
    },
    {
        "content": "<p>I will definitely try the bundled version as well. All we want to do is glue schemes. Kenny has \"proved the lemma\" that says you can glue locally ringed spaces, unbundled. That's a really useful result. Can you bundle that result? How much of the innards of his argument do you really have to gut in order to bundle it? My feeling is that is an important problem for the expert Bundlers like Reid, Scott and Johan to decide. Kenny is just using an interface really.</p>",
        "id": 171503769,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563875235
    },
    {
        "content": "<p>I prefer for new type definitions to be made free standing, where they can be straightforwardly topologized</p>",
        "id": 171503840,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563875296
    },
    {
        "content": "<p>We have to try to do really hard things both bundled and unbundled and to see which works best. Kenny is leading the pack with gluing on one top space in the unbundled world, and the bundled world is ahead with gluing topological spaces. Those are the two ingredients needed.</p>",
        "id": 171503853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563875314
    },
    {
        "content": "<p>I see that <code>F.sections</code> is a subset of a product, does that give it the right topology?</p>",
        "id": 171503859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563875325
    },
    {
        "content": "<blockquote>\n<p>I prefer for new type definitions to be made free standing, where they can be straightforwardly topologized</p>\n</blockquote>\n<p>What does that mean?</p>",
        "id": 171503905,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563875381
    },
    {
        "content": "<p><code>sum</code>, the type operator, is defined before category theory</p>",
        "id": 171503917,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563875398
    },
    {
        "content": "<p>Just that the type should be defined first, and then the bundled topological space</p>",
        "id": 171503968,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563875407
    },
    {
        "content": "<p>exactly as we do in this example: <code>F.sections</code> is the underlying type of <code>lim F</code>.</p>",
        "id": 171503981,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1563875425
    },
    {
        "content": "<p>The underlying unbundled type of <code>X × Y</code> for <code>X Y : Scheme</code> is horrible, and not what you would think it is.</p>",
        "id": 171503995,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563875452
    },
    {
        "content": "<p>It is a completely useless gadget without its topology and sheaf.</p>",
        "id": 171504012,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563875470
    },
    {
        "content": "<p>I think being able to ask what the topology is and what the type definition is of some category construction is a basic question. There are complicated constructions, but doing things via category theory always seems to make it hard to answer these kinds of questions, because everything is buried ten levels deep. It's fine if you never intend to see that stuff again, but I'm sure if Kenny was proving something about one of these concrete types he would just unfold the whole lot of it and work with the underlying representation</p>",
        "id": 171504315,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563875760
    },
    {
        "content": "<p>If you are just doing topology then all that structure just gets in the way</p>",
        "id": 171504394,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563875814
    },
    {
        "content": "<p>We are not doing products ever here, we are doing colimits of schemes at the minute for some fundamental constructions. We cannot even do scheme-theoretic products until we have colimits.</p>",
        "id": 171504543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563875938
    },
    {
        "content": "<p>A scheme is by definition a colimit of basic objects (affine schemes). The basic objects are rings. We do things on rings and then use an extensive transfer theory which we're building by hand to transfer results to colimits</p>",
        "id": 171504596,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563875998
    },
    {
        "content": "<p>You mean colimit, I think.</p>",
        "id": 171504649,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563876010
    },
    {
        "content": "<p>A product of schemes is just a colimit of products of basic objects</p>",
        "id": 171504658,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563876025
    },
    {
        "content": "<p>gaargh thanks Johan I'll edit.</p>",
        "id": 171504664,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563876033
    },
    {
        "content": "<p>Thanks. Johan -- do you understand the \"basic principle in algebraic geometry\" that to prove a certain class of results about schemes, it suffices to prove a related theorem about rings and then to just follow your intuitive algebraic geometer's nose?</p>",
        "id": 171504827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563876155
    },
    {
        "content": "<p>I think the question of using a predicate vs a construction comes up here btw</p>",
        "id": 171504833,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563876166
    },
    {
        "content": "<p>Can you formalise that? Is it something to do with commuting with colimits?</p>",
        "id": 171504839,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563876172
    },
    {
        "content": "<p>Are you sure you actually need the colimit construction?</p>",
        "id": 171504859,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563876196
    },
    {
        "content": "<p>It sounds like you just assert such and such is a colimit of some diagram</p>",
        "id": 171504897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563876234
    },
    {
        "content": "<p>and prove facts from that</p>",
        "id": 171504906,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563876242
    },
    {
        "content": "<p>If I were lecturing graduate algebraic geometry, I would say \"Definition of product of schemes. Step 1 tensor product of rings. Step 2 follow your nose.\" and I would include a link to the slogan in the stacks project</p>",
        "id": 171504908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563876242
    },
    {
        "content": "<p>But there's a subtlety actually because arbitrary colimits don't exist in the category of schemes!</p>",
        "id": 171504973,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563876282
    },
    {
        "content": "<p>I do not understand what is going on here at all, but I am sure there people who understand it well. Maybe I need to put a topology on the category of rings, and then I can just make schemes magically? Johan do you know this stuff?</p>",
        "id": 171505013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563876327
    },
    {
        "content": "<p>I don't know it well enough to extract a formal statement (-;</p>",
        "id": 171505033,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563876352
    },
    {
        "content": "<p>Struggling just as hard as you are.</p>",
        "id": 171505036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563876359
    },
    {
        "content": "<p>A topology on the category of rings does not typecheck</p>",
        "id": 171505091,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563876384
    },
    {
        "content": "<p>Of course there is the \"magic\" definition that produces algebraic spaces as certain sheaves for the etale topology on AffSch := CommRing^op</p>",
        "id": 171505099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563876398
    },
    {
        "content": "<p>I don't need the full strength of bundled colimits in top to be able to make the unbundled colimits I want.</p>",
        "id": 171505101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563876398
    },
    {
        "content": "<blockquote>\n<p>A topology on the category of rings does not typecheck</p>\n</blockquote>\n<p>I guess it would be <code>grothendieck-topology</code> or something</p>",
        "id": 171505112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563876415
    },
    {
        "content": "<p>I think Toen and Vezossi worked out those details.</p>",
        "id": 171505115,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563876419
    },
    {
        "content": "<p>But I don't think that definition will make building examples any easier.</p>",
        "id": 171505130,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563876432
    },
    {
        "content": "<p>okay, this is beyond my pay grade, good luck</p>",
        "id": 171505138,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1563876439
    },
    {
        "content": "<p>No but I would really like a tool which says \"This result about schemes is local, so it suffices to prove it in the affine case, which is the same as this question about rings, so let's just answer this question about rings instead.\"</p>",
        "id": 171505198,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563876489
    },
    {
        "content": "<p>Because I used that tool <em>loads</em> when I was doing alg geom.</p>",
        "id": 171505209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563876510
    },
    {
        "content": "<p>Definitely. And if we can't make it into a theorem, then it might be a meta-theorem (aka tactic).</p>",
        "id": 171505220,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563876535
    },
    {
        "content": "<p>I want to build products of schemes by saying \"look, I made products of rings, so now just give me all the ring-theory results which the machine needs\"</p>",
        "id": 171505237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563876562
    },
    {
        "content": "<p><a href=\"https://stacks.math.columbia.edu/tag/01JS\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/01JS\">The stacks project slogan</a></p>\n<p><a href=\"https://stacks.math.columbia.edu/tag/01JL\" target=\"_blank\" title=\"https://stacks.math.columbia.edu/tag/01JL\">The stacks project proof</a></p>\n<p>Not hard to see where de Jong is directing the reader, but good that he writes the abstract stuff!</p>",
        "id": 171505803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563877123
    },
    {
        "content": "<blockquote>\n<p>I think Toen and Vezossi worked out those details.</p>\n</blockquote>\n<p>Do you have a more precise reference? I'm interested</p>",
        "id": 171510767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1563882626
    },
    {
        "content": "<p>Note that this works best for algebraic spaces and stacks, not so much for schemes: <a href=\"https://mathoverflow.net/questions/26506/categorical-construction-of-the-category-of-schemes\" target=\"_blank\" title=\"https://mathoverflow.net/questions/26506/categorical-construction-of-the-category-of-schemes\">https://mathoverflow.net/questions/26506/categorical-construction-of-the-category-of-schemes</a></p>",
        "id": 171512669,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563884363
    },
    {
        "content": "<p>And once you want to prove theorems about schemes, you'll still want to know that there is a fully faithful functor to LRS.</p>",
        "id": 171512687,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563884388
    },
    {
        "content": "<p>So I don't think this path is directly worth pursuing</p>",
        "id": 171512734,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563884403
    },
    {
        "content": "<p>Are you guys aware of Vakils \"Affine Communication Lemma\"? (Lemma 5.3.2 in <a href=\"http://math.stanford.edu/~vakil/216blog/FOAGnov1817public.pdf\" target=\"_blank\" title=\"http://math.stanford.edu/~vakil/216blog/FOAGnov1817public.pdf\">http://math.stanford.edu/~vakil/216blog/FOAGnov1817public.pdf</a> )</p>",
        "id": 171520598,
        "sender_full_name": "Jan-David Salchow",
        "timestamp": 1563890157
    },
    {
        "content": "<p>No, I was not.</p>",
        "id": 171521074,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563890463
    },
    {
        "content": "<p>I was aware of the content, but I didn't know a written reference for it.</p>",
        "id": 171521228,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563890572
    },
    {
        "content": "<p>I'm not sure if it helps Kevin with his current problems. I feel like Kevin wants a data-variant, instead of only a predicate/property-variant.</p>",
        "id": 171521281,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1563890611
    }
]