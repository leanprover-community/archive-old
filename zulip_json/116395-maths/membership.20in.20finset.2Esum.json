[
    {
        "content": "<p>I do not know how to say that a dummy variable in the <code>finset</code> I am summing over <em>belongs</em> to the finset. A MWE is the following:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.finset</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">∈</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n<span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n\n<span class=\"kd\">def</span> <span class=\"n\">bleah</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"k\">in</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">bar</span> <span class=\"n\">a</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">A</span> <span class=\"n\">P</span> <span class=\"n\">_</span><span class=\"o\">),</span>\n  <span class=\"gr\">sorry</span><span class=\"o\">,</span><span class=\"c1\">---lean asks for ⊢ a ∈ A</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>What I am doing is definining a natural number in <code>bar</code> under the assumption that <code>P a</code> holds; and <code>foo</code> provides a proof of <code>P a</code> assuming that <code>a ∈ A</code>. When I perform the sum in <code>bleah</code>, I cannot extract the information that <code>a ∈ A</code> from the fact that <code>a in A</code>.</p>",
        "id": 263608090,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1638550984
    },
    {
        "content": "<p>You cannot do this when using<code> ∑ a in A, ...</code>.<br>\nOne thing you can do is to sum over <code>A.subtype P</code> (or even <code>A.subtype (∈ A)</code>?). See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.subtype\">docs#finset.subtype</a>.<br>\nAnother thing  you can try (which is probably more convenient) is to redefine <code>bar</code> to produce some garbage value if <code>P</code> does not hold, e.g.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bar</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">x</span> <span class=\"k\">then</span> <span class=\"gr\">sorry</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 263608899,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638551340
    },
    {
        "content": "<p>Ok, thanks! I will try to understand how to use <code>A.subtype P</code>(I am not sure the \"garbage\" strategy would really work in the case I am working on).</p>",
        "id": 263609207,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1638551450
    },
    {
        "content": "<p>Yet another option is to use <code>finsum</code> where you can write <code>∑ᶠ a ∈ A, f a</code></p>",
        "id": 263609319,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638551507
    },
    {
        "content": "<p>But you will then need to work a bit to relate it to <code>finset.sum</code></p>",
        "id": 263609347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1638551524
    },
    {
        "content": "<p>I'll try the first option suggested by Floris and if I can't make it work, I will come back here. Thanks <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 263609489,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1638551590
    },
    {
        "content": "<p>Very similar to what I suggested: you can also use <code>∑ a : (A : set ℤ), ...</code> (see e.g. <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.prod_finset_coe/src\">src#finset.prod_finset_coe</a>)</p>",
        "id": 263610115,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1638551915
    },
    {
        "content": "<p>Yes!</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">bleah</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">ℤ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℤ</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">decidable_pred</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">refine</span> <span class=\"bp\">∑</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">ℤ</span><span class=\"o\">),</span> <span class=\"n\">bar</span> <span class=\"n\">a</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">foo</span> <span class=\"n\">a</span> <span class=\"n\">A</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">finset.coe_mem</span> <span class=\"n\">_</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 263610343,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1638552056
    },
    {
        "content": "<p>Thanks (with the first option it was somewhat more cumbersome).</p>",
        "id": 263610383,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1638552076
    },
    {
        "content": "<p>And it also works perfectly in my \"true\" case.</p>",
        "id": 263610571,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1638552170
    },
    {
        "content": "<p>The correct thing to do here might be using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/finset.attach\">docs#finset.attach</a></p>",
        "id": 263657876,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1638568319
    },
    {
        "content": "<p>But that's just finset.univ!</p>",
        "id": 263660772,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1638569783
    }
]