[
    {
        "content": "<p>Can someone explain this docstring to me?<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/be161d119ac3ee06db86b7429201e4ea281e13f2/src/order/complete_lattice.lean#L71\">https://github.com/leanprover-community/mathlib/blob/be161d119ac3ee06db86b7429201e4ea281e13f2/src/order/complete_lattice.lean#L71</a></p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Create a `complete_lattice` from a `partial_order` and `Inf` function</span>\n<span class=\"sd\">that returns the greatest lower bound of a set. Usually this constructor provides</span>\n<span class=\"sd\">poor definitional equalities, so it should be used with</span>\n<span class=\"sd\">`.. complete_lattice_of_Inf α _`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">complete_lattice_of_Inf</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">H1</span> <span class=\"o\">:</span> <span class=\"n\">partial_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">H2</span> <span class=\"o\">:</span> <span class=\"n\">has_Inf</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">is_glb_Inf</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">is_glb</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">Inf</span> <span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">complete_lattice</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>Context:  I want to make a complete lattice.  There's already a partial order structure, and I can easily write down what the <code>has_Sup</code> and <code>has_Inf</code> instances are.  Will it cause definitional problems if I simply pick one of these, say the <code>has_Inf</code>, and then use <code>complete_lattice_of_Inf</code> to make the complete lattice structure?</p>",
        "id": 215211658,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604177825
    },
    {
        "content": "<p>It means that the <code>has_Sup</code> instance will not be the one you would otherwise have written down</p>",
        "id": 215211720,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604177903
    },
    {
        "content": "<p>as well as <code>sup</code> and <code>inf</code> and <code>top</code> and <code>bot</code></p>",
        "id": 215211725,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604177924
    },
    {
        "content": "<p>However, there is <code>complete_lattice.copy</code> that you can use to edit these fields after constructing most of the structure using <code>complete_lattice_of_Inf</code></p>",
        "id": 215211745,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604177990
    },
    {
        "content": "<p>Is it bad to take (eg) the <code>inf</code> that comes from this definition, which is <code>inf := λ a b, Inf {a, b}</code>?  Isn't that the same as what I would write down by hand?</p>",
        "id": 215211805,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604178032
    },
    {
        "content": "<p>It seems unlikely that this is what you would write down in any concrete instance unless you had nothing other than <code>Inf</code> to work with</p>",
        "id": 215211830,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604178086
    },
    {
        "content": "<p>for instance the inf for <code>set</code> is <code>\\cap</code> which is not the same as <code>\\bigcap {x, y}</code></p>",
        "id": 215211843,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604178115
    },
    {
        "content": "<p>I mean if you don't have any particular reason to care what the values are it's fine to just let it be</p>",
        "id": 215211897,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604178169
    },
    {
        "content": "<p>but if you ever unfold it and end up with something weird you might consider changing the definition to something more sensible</p>",
        "id": 215211921,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604178204
    },
    {
        "content": "<p>OK, thanks!</p>",
        "id": 215211924,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604178215
    },
    {
        "content": "<p>What does \"it should be used with <code>.. complete_lattice_of_Inf α _</code>.\" mean, in particular?  (From the docstring I quoted above.)</p>",
        "id": 215211971,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604178248
    },
    {
        "content": "<p>It's suggesting that you write</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">complete_lattice</span> <span class=\"n\">my_T</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">inf</span> <span class=\"o\">:=</span> <span class=\"n\">better_inf</span><span class=\"o\">,</span>\n  <span class=\"n\">sup</span> <span class=\"o\">:=</span> <span class=\"n\">better_sup</span><span class=\"o\">,</span>\n  <span class=\"c1\">-- don't care to fix Sup, bot, top</span>\n  <span class=\"bp\">..</span><span class=\"n\">complete_lattice_of_Inf</span> <span class=\"n\">my_T</span> <span class=\"n\">_</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>which is equivalent to my suggestion of using <code>complete_lattice.copy better_inf &lt;proof&gt; Sup rfl  (complete_lattice_of_Inf my_T _)</code></p>",
        "id": 215212034,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604178392
    },
    {
        "content": "<p>to take a random example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/subfield.complete_lattice/src\">src#subfield.complete_lattice</a></p>",
        "id": 215212057,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604178482
    },
    {
        "content": "<p>notice that top and inf are overridden but bot and sup are not because there isn't any much better expression for the sup of subfields</p>",
        "id": 215212104,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604178539
    },
    {
        "content": "<p>but it's definitely nice to have the inf of subfields be defeq to the binary intersection</p>",
        "id": 215212113,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604178589
    },
    {
        "content": "<p>so that you can use <code>&lt;hK, hL&gt;</code> to construct and destruct proofs of <code>x \\in K \\inf L</code></p>",
        "id": 215212160,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604178634
    },
    {
        "content": "<p>I see!  So when you do it this way, it is overwriting selected fields.  Does it require some kind of compatibility proof of the old fields with the new fields?  Eg, do I need to overwrite <code>le_inf</code> too?</p>",
        "id": 215212176,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604178718
    },
    {
        "content": "<p>You do if the new expression is not defeq to the old one (which is usually the case because otherwise there isn't much need to override)</p>",
        "id": 215212219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604178768
    },
    {
        "content": "<p><code>complete_lattice.copy</code> requires you prove the new field is equal to the old one, while using <code>{inf := new_inf, ..}</code> requires proving the new inf also satisfies the inf axioms</p>",
        "id": 215212240,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1604178830
    },
    {
        "content": "<p>I see.  Thanks.  I think for my WIP code I'll do it the lazy way, and change it field by field if I find myself using them.  When I PR I'll do it the right way ....</p>",
        "id": 215212302,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604178929
    },
    {
        "content": "<p>I agree that this docstring is obscure. It'd be great if we added some of the info from the conversation above to it.</p>",
        "id": 215213668,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1604181208
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/4859\">#4859</a></p>",
        "id": 215214600,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1604182810
    },
    {
        "content": "<p>(deleted)</p>",
        "id": 215223015,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1604198479
    }
]