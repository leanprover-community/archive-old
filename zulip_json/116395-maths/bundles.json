[
    {
        "content": "<p>What should be the simp-normal form of the map <code>bundle.total_space E -&gt; B</code>?<br>\nCurrently it is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma.fst\">docs#sigma.fst</a> since <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bundle.proj\">docs#bundle.proj</a> simplifies to <code>sigma.fst</code>. However, if <code>sigma.fst</code>, why do we even define <code>bundle.proj</code> in the first place? If <code>sigma.fst</code> is simp-normal form, we want to use <code>sigma.fst</code> everywhere, and not <code>bundle.proj</code>.</p>",
        "id": 282619640,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652783623
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"267205\">@Nicolò Cavalleri</span></p>",
        "id": 282619707,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1652783655
    },
    {
        "content": "<p>There might be some discussion about that in <a href=\"https://github.com/leanprover-community/mathlib/pull/4658\">#4658</a> which introduced it</p>",
        "id": 282748181,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652858189
    },
    {
        "content": "<p>My guess would be that it exists for dot notation, but is removed by simp to avoid repeating tonnes of boring lemmas</p>",
        "id": 282748424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652858360
    },
    {
        "content": "<p>Tangential question; why does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bundle\">docs#bundle</a> seem to pick up instances for other types of bundle?</p>",
        "id": 282748578,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652858493
    },
    {
        "content": "<p>Are those other bundle types deliberately marked as reducible?</p>",
        "id": 282748592,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1652858514
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"111080\">Floris van Doorn</span> <a href=\"#narrow/stream/116395-maths/topic/bundles/near/282619640\">said</a>:</p>\n<blockquote>\n<p>What should be the simp-normal form of the map <code>bundle.total_space E -&gt; B</code>?<br>\nCurrently it is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/sigma.fst\">docs#sigma.fst</a> since <a href=\"https://leanprover-community.github.io/mathlib_docs/find/bundle.proj\">docs#bundle.proj</a> simplifies to <code>sigma.fst</code>. However, if <code>sigma.fst</code>, why do we even define <code>bundle.proj</code> in the first place? If <code>sigma.fst</code> is simp-normal form, we want to use <code>sigma.fst</code> everywhere, and not <code>bundle.proj</code>.</p>\n</blockquote>\n<p>To me, this question is related to type synonyms. <code>sigma.fst</code> goes from <code>Σ x, E x</code> to <code>B</code>, while <code>bundle.proj E</code> goes from <code>total_space E</code> to <code>B</code>. Since these two spaces don't have the same typeclasses, I think it really makes a difference when discussing, say, continuity of the projection, as the topologies on  <code>Σ x, E x</code> and <code>total_space E</code> are typically not the same. But writing <code>v.1</code> is much more convenient than writing <code>proj E v</code>, so I have mixed feelings.</p>",
        "id": 283311679,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1653309266
    },
    {
        "content": "<p>Would it be a bad idea to make <code>E</code> implicit for <code>proj</code>? Then you could write <code>v.proj</code> instead of <code>proj E v</code>. When you just want the projection map you might need <code>@proj _ foo</code> though for a specific bundle <code>foo</code> (which in Lean 4 you'll be able to write as <code>proj (E := foo)</code>).</p>\n<p>Without making it implicit, I think <code>v.proj _</code> should work, but there are occasions where you need to put parentheses around the whole expression.</p>",
        "id": 283313053,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1653309975
    },
    {
        "content": "<p>I think that's a good idea, since the @ version is not too verbose.</p>",
        "id": 283313628,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1653310288
    },
    {
        "content": "<p>I had similar concerns to those of Sebastien: if we write a type synonym, we should develop and use its API. I like the suggestion to make the argument <code>E</code> of <code>proj</code> implicit. I will PR that.</p>",
        "id": 283738534,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1653396247
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/pull/14359\">#14359</a></p>",
        "id": 283778732,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1653412896
    }
]