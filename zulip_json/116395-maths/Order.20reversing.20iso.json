[
    {
        "content": "<p>Do we have a <code>α ≃ order_dual α</code>? Or the idea of a reversing <code>order_iso</code>?</p>",
        "id": 222028353,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610073472
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/order_dual.to_dual\">docs#order_dual.to_dual</a> has type <code>α ≃ order_dual α</code>.</p>",
        "id": 222028522,
        "sender_full_name": "Bryan Gin-ge Chen",
        "timestamp": 1610073660
    },
    {
        "content": "<p>But is there a proof that that takes <code>\\bot</code> to <code>\\top</code>?</p>",
        "id": 222028892,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610074150
    },
    {
        "content": "<p>Probably <code>rfl</code>?</p>",
        "id": 222028904,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610074176
    },
    {
        "content": "<p>I guess my question is, how is it that the <code>\\bot</code> portion of the following works, but not the <code>\\top</code>? And am I just misusing <code>order_dual</code> here?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.fin</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.order_dual</span>\n\n<span class=\"kd\">variable</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">fin</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">bot_eq_zero</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊥</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">top_eq_last</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"bp\">⊤</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">last</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">dual_bot_eq_top</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">bounded_lattice</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">order_dual</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"bp\">⊥</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hy</span> <span class=\"o\">:</span> <span class=\"n\">y</span> <span class=\"bp\">=</span> <span class=\"bp\">⊤</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">order_dual.to_dual</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span> <span class=\"o\">:=</span>\n<span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">hy</span><span class=\"o\">],</span> <span class=\"n\">refl</span> <span class=\"o\">}</span>\n\n<span class=\"sd\">/-- The isomorphism reversing the order on `fin n`. -/</span>\n<span class=\"kd\">def</span> <span class=\"n\">invert_iso</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"o\">(</span><span class=\"n\">fin</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">order_dual.to_dual</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">invert_iso_zero</span> <span class=\"o\">:</span> <span class=\"n\">invert_iso</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"n\">last</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">cases</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">invert_iso</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"n\">dual_bot_eq_top</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">bot_eq_zero</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n      <span class=\"n\">convert</span> <span class=\"n\">top_eq_last</span><span class=\"o\">,</span>\n      <span class=\"gr\">sorry</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 222029973,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610075554
    },
    {
        "content": "<p><code>invert_iso</code> is the identity so the lemma is false for n &gt; 0</p>",
        "id": 222030547,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610076378
    },
    {
        "content": "<p>of course most orders are not <strong>order</strong> isomorphic to their opposite orders</p>",
        "id": 222030554,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610076399
    },
    {
        "content": "<p><code>order_dual.to_dual</code> is just <code>equiv.refl</code></p>",
        "id": 222030622,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610076496
    },
    {
        "content": "<p>Right, ok, makes sense. But since we have an <code>order_iso</code>, shouldn't we be able to use that to generate the reversing one? Or does that require an explicit construction?</p>",
        "id": 222030759,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610076691
    },
    {
        "content": "<p>It needs a construction, it's entirely specific to <code>fin</code></p>",
        "id": 222030835,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610076790
    },
    {
        "content": "<p>or at least to finite total orders (which are all essentially <code>fin</code>)</p>",
        "id": 222030859,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610076824
    },
    {
        "content": "<p>I don't think we have an <code>order_iso</code> on fin n</p>",
        "id": 222031039,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610077057
    },
    {
        "content": "<p>I could imagine having a typeclass for symmetric orders, although I have no idea how important they are</p>",
        "id": 222031084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610077103
    },
    {
        "content": "<p>(also such an isomorphism is very often not unique even when it exists, as in <code>int</code>)</p>",
        "id": 222031166,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610077215
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/fin.order_iso_unique\">docs#fin.order_iso_unique</a></p>",
        "id": 222038870,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610082450
    },
    {
        "content": "<p>And of course, that <code>order_iso</code> is <code>fin.cast rfl</code></p>",
        "id": 222038874,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610082463
    },
    {
        "content": "<p>When stating the Galois correspondence, we wrote it as <code>a ≃ order_dual b</code></p>",
        "id": 222038941,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610082546
    },
    {
        "content": "<p>(we couldn't find a better option)</p>",
        "id": 222038947,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1610082555
    },
    {
        "content": "<p><code>data/zmod/basic</code> defines a <code>has_neg</code> on <code>fin n</code> and I am thinking it should be moved into a <code>data/fin</code> and a special <code>locale</code></p>",
        "id": 222039024,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610082650
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"308899\">@Yakov Pechersky</span> I mean an order_iso between fin and it's dual</p>",
        "id": 222039030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610082657
    },
    {
        "content": "<p>which should be <code>\\lam i : fin (n+1), n - i</code></p>",
        "id": 222039045,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610082678
    },
    {
        "content": "<p>and the empty function on fin 0</p>",
        "id": 222039050,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610082693
    },
    {
        "content": "<p>And was hoping to just use some neat way of flipping the <code>order_iso</code>. Yeah it's just that -- not sure why the <code>zmod</code> defn goes all the way through <code>nat_mod</code> on <code>int</code> coercions</p>",
        "id": 222039060,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610082707
    },
    {
        "content": "<p>Note that zmod negation is not correct, because <code>-0 = 0</code></p>",
        "id": 222039106,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610082737
    },
    {
        "content": "<p>I mean it's correct as negation but not as the order dual isomorphism</p>",
        "id": 222039109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610082753
    },
    {
        "content": "<p>I don't think it would be a good idea to register this function as <code>has_neg (fin n)</code> because it doesn't match the zmod negation or make sense with addition</p>",
        "id": 222039191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610082885
    },
    {
        "content": "<p>Is there a different <code>comm_ring</code> possible on <code>fin (n + 1)</code> other than the one defined in <code>data/basic/zmod</code>?</p>",
        "id": 222039283,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1610083038
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Order.20reversing.20iso/near/222031084\">said</a>:</p>\n<blockquote>\n<p>I could imagine having a typeclass for symmetric orders, although I have no idea how important they are</p>\n</blockquote>\n<p>Basically boolean algebras where <code>compl</code> is surjective?</p>",
        "id": 222040190,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1610084377
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> A boolean algebra would be an example of a \"symmetric preorder\", but there are many more examples. A boolean algebra needs a meet and join operation, but here we only need an order anti-automorphism</p>",
        "id": 222115129,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610134221
    },
    {
        "content": "<p>(FYI compl is surjective in a boolean algebra because <code>~~a = a</code>)</p>",
        "id": 222115191,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1610134266
    },
    {
        "content": "<p>I think <code>fin n</code> is not a boolean algebra for <code>n &gt;= 3</code>, for example</p>",
        "id": 222115475,
        "sender_full_name": "Reid Barton",
        "timestamp": 1610134423
    }
]