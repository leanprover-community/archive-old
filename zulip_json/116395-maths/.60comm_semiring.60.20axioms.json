[
    {
        "content": "<p>Should we minimize axioms of algebraic objects like <code>comm_semiring</code> (e.g., remove one of <code>mul_one</code>/<code>one_mul</code> etc)?</p>",
        "id": 259712501,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635572797
    },
    {
        "content": "<p>Or should we just default them?</p>",
        "id": 259713672,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635574827
    },
    {
        "content": "<p>Removing axioms makes <code>..some_semiring</code> less powerful</p>",
        "id": 259713682,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635574863
    },
    {
        "content": "<p>I've stopped caring about this kind of question now, because the definition of a group is now too chaotic to show to undergraduates. You can just make a custom constructor if this is annoying you. Am I right in thinking that in Lean 4 we will be able to write cool macros to make custom constructors look really nice?</p>",
        "id": 259716070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1635578856
    },
    {
        "content": "<p>I don't care about <code>#print</code> output but <a href=\"https://leanprover-community.github.io/mathlib_docs/find/cardinal.comm_semiring\">docs#cardinal.comm_semiring</a> has to use commutativity to get some axioms.</p>",
        "id": 259716407,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1635579418
    },
    {
        "content": "<p>Providing <code>auto_param</code>s for the proof fields would do the trick here, right <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>?</p>",
        "id": 259731702,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1635601377
    }
]