[
    {
        "content": "<p>I've sorted out a source of inconvenient <code>eq.rec</code>s that I've been suffering from, and it's very simple, and probably easily fixable in core. (Thanks <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> for the reminders to track problems to their origin instead of patching things afterwards...)</p>\n<p>In</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"o\">{</span> <span class=\"n\">subst</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"mi\">0</span><span class=\"o\">}</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">print</span> <span class=\"n\">f</span>\n</pre></div>\n\n\n<p>we see </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">),</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">ℕ</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span> <span class=\"mi\">0</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>which is perhaps unsurprising given we used <code>subst</code>. With <code>pp.all</code>, we see </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n<span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">),</span> <span class=\"bp\">@</span><span class=\"n\">eq</span><span class=\"bp\">.</span><span class=\"n\">rec</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">1</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">),</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">has_zero</span><span class=\"bp\">.</span><span class=\"n\">zero</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">nat</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">has_zero</span><span class=\"o\">)</span> <span class=\"n\">b</span> <span class=\"n\">h</span>\n</pre></div>\n\n\n<p>and observe that we're doing <code>eq.rec</code> transport through the family <code>(λ (b : nat), nat)</code>, which in particular is a constant family (the fibre doesn't depend on the base), and so the whole <code>eq.rec</code> term is equal (but not definitionally) to just <code>0</code>. (See <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/logic/basic.lean#L427\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/logic/basic.lean#L427\"><code>eq_rec_constant</code></a>.)</p>\n<p>Now, it's possible to clean up after the fact, but painful (and you have to know it's happening).</p>\n<p>Could we just change the behaviour of <code>subst</code>, to detect when the target doesn't even depend on the substitution we're doing (i.e. the <code>eq.rec</code> it wants to generate is through a constant family), and avoiding producing the <code>eq.rec</code>?</p>",
        "id": 192890416,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1585977130
    },
    {
        "content": "<p>Why invoke <code>subst</code> in the first place though? Some automation thing?</p>",
        "id": 192907392,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586006586
    },
    {
        "content": "<p>I'm not sure, but I think one way around it might be to only ever use <code>eq.mp</code> for data, and use <code>eq.rec</code> to prove the proof obligation that the two goals are equal after substituting <code>a = b</code>. Then I think you're guaranteed the right definitional equality whenever the two types before and after applying <code>eq.mp</code> are definitionally equal.</p>",
        "id": 192913495,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586014893
    },
    {
        "content": "<p>the definitional behavior of <code>eq.rec</code> and <code>eq.mp</code> are basically the same</p>",
        "id": 192913976,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586015488
    },
    {
        "content": "<p>I think Chris's point is that if you go through <code>eq.mp</code>, its argument is a proof of (in this case) <code>nat = nat</code> and so it's definitionally equal to <code>rfl</code> however you constructed it.</p>",
        "id": 192914240,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586015865
    },
    {
        "content": "<p>By definitional proof irrelevance, not by construction</p>",
        "id": 192914248,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586015878
    },
    {
        "content": "<p>Say I used <code>funext</code> to prove <code>h : f = g</code>, where <code>f g : nat - &gt; nat</code>. Then <code>eq.rec_on h (fin (g 2))</code> does not reduce, but <code>eq.mp (eq.rec_on h rfl) (fin (g 2))</code> does.</p>",
        "id": 192914302,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586015916
    },
    {
        "content": "<p>I'm on my phone</p>",
        "id": 192914321,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586015958
    },
    {
        "content": "<p>and you're checking things reduce??</p>",
        "id": 192914327,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586015973
    },
    {
        "content": "<p>Oh I see. Yes that should work. But lean doesn't have to guess here, it knows when the sides are defeq and just skip emitting the term</p>",
        "id": 192914441,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586016100
    },
    {
        "content": "<p>I assumed this is why <code>rw</code> always uses <code>eq.mpr</code>. If indeed it does, I can't check right now.</p>",
        "id": 192914590,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1586016304
    },
    {
        "content": "<p>Speaking of fixing core, is there any reason why <code>simp_rw</code> does not become the official <code>rw</code>?</p>",
        "id": 192914856,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586016702
    },
    {
        "content": "<p>I haven't used it. What's the difference?</p>",
        "id": 192916997,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586019521
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp_rw\" title=\"https://leanprover-community.github.io/mathlib_docs/tactics.html#simp_rw\">https://leanprover-community.github.io/mathlib_docs/tactics.html#simp_rw</a></p>",
        "id": 192917823,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586020676
    },
    {
        "content": "<p>is this going to make my <code>rw</code> much slower in big proofs?</p>",
        "id": 192918050,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1586020987
    },
    {
        "content": "<p>I think that they have different use cases and different behavior</p>",
        "id": 192918061,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586021019
    },
    {
        "content": "<p>In DTT it's not clear whether one mechanism (congr lemmas vs eq.rec) dominates the other</p>",
        "id": 192918112,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586021055
    },
    {
        "content": "<p>It might even break your big proofs! It might simplify too much I guess?</p>",
        "id": 192918114,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586021062
    },
    {
        "content": "<p>I'm only using <code>simp_rw</code> as \"rw that works under binders\".</p>",
        "id": 192918121,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1586021093
    },
    {
        "content": "<p>right but in theory it might rewrite under a binder which it didn't do before, if something occurs both inside and outside</p>",
        "id": 192918134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586021124
    },
    {
        "content": "<p>You also don't always want to rewrite repeatedly</p>",
        "id": 192918219,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586021222
    },
    {
        "content": "<p>Here is an example where the <code>simp</code> strategy fails and <code>rw</code> works</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">p</span> <span class=\"n\">h</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">=</span> <span class=\"mi\">3</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">false</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span> <span class=\"c1\">-- fails</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">this</span><span class=\"o\">],</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192918427,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586021522
    },
    {
        "content": "<p>Empirically speaking, I would find it interesting to know how many <code>rw</code> invocations in mathlib could be replaced by <code>simp_rw</code>.</p>",
        "id": 192918449,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586021584
    },
    {
        "content": "<p>I would be interested to know how many <code>erw</code>invocations in the perfectoid project could be replaced with <code>simp_rw</code></p>",
        "id": 192919320,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586022749
    },
    {
        "content": "<p>Probably none unless I misunderstood the purpose of <code>simp_rw</code></p>",
        "id": 192919393,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586022894
    },
    {
        "content": "<p>My algorithm for rewriting under binders used to be: (1) try <code>rw</code> and then remember it doesn't work (2) try <code>erw</code> (3) try <code>simp only</code> (4) whine to co-authors</p>",
        "id": 192919466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586022968
    },
    {
        "content": "<p><code>erw</code> doesn't rewrite under binders, it rewrites up to definitional equality. I guess if you're lucky enough that might look like rewriting under binders?</p>",
        "id": 192919479,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586023011
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>, the <code>subst</code> in question that I'm concerned about is in <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/equiv_rw.lean#L207\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/tactic/equiv_rw.lean#L207\"><code>equiv_rw</code></a>. I agree it may be viable to decide whether or not to actually use <code>subst</code> here, but my point is just that the only <code>eq.rec</code>s this <code>subst</code> is generating that cause problems are unnecessary ones!</p>",
        "id": 192935137,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586049085
    },
    {
        "content": "<p>I mean, \"don't use <code>subst</code> to construct data\" seems like a sound general principle, whether or not there are some edge cases where it happens not to do any harm (but doesn't seem to do any good either?)</p>",
        "id": 192935213,
        "sender_full_name": "Reid Barton",
        "timestamp": 1586049211
    },
    {
        "content": "<p>Hmmm.... I'm not sure what to replace it with in <code>equiv_rw</code>.</p>",
        "id": 192935266,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586049293
    },
    {
        "content": "<p>Leaving that line out (or replacing it with <code>clear</code>) certainly breaks some of things things I want <code>equiv_rw</code> to do.</p>",
        "id": 192935276,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586049328
    },
    {
        "content": "<p>But maybe you're saying those things I want it to do, I shouldn't want.</p>",
        "id": 192935282,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586049354
    },
    {
        "content": "<p>Okay, perhaps I can avoid <code>subst</code> here after all.</p>",
        "id": 192936726,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586052443
    },
    {
        "content": "<p>For posterity, here is a stable link that will not change when new commits are pushed to master: <a href=\"https://github.com/leanprover-community/mathlib/blob/23681c3db3dc30695a97a769641a99511297f784/src/tactic/equiv_rw.lean#L207\" title=\"https://github.com/leanprover-community/mathlib/blob/23681c3db3dc30695a97a769641a99511297f784/src/tactic/equiv_rw.lean#L207\">https://github.com/leanprover-community/mathlib/blob/23681c3db3dc30695a97a769641a99511297f784/src/tactic/equiv_rw.lean#L207</a>  (You can press <code>y</code> on the github page to get this link.)</p>",
        "id": 192947993,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586074592
    },
    {
        "content": "<p>More productively, I think it is useful to distinguish three cases here:</p>\n<ol>\n<li><code>e : α ≃ β, a : α ⊢ ℕ</code> (<code>a</code> does not occur as a dependency)</li>\n<li><code>e : α ≃ β, a : α, h : 0 &lt; a ⊢ ℕ</code> (<code>a</code> only occurs as a dependency in hypotheses)</li>\n<li><code>e : α ≃ β, a : α ⊢ 0 &lt; a</code> (<code>a</code> occurs in the target)</li>\n</ol>\n<p>For 1, you don't need any <code>eq.rec</code> at all, probably the easiest way to handle it is <code>assert</code>+<code>clear</code>.<br>\nCase 2 should only require <code>eq.rec</code> on the hypotheses, which is probably fine since they're often propositions.  But I don't see any easy way to implement this without introducing a β-redex in the produced term.<br>\nFor 3, I don't think there's any way around <code>subst</code> (or another way to produce <code>eq.rec</code>).</p>",
        "id": 192949198,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586076819
    },
    {
        "content": "<p>I'm not sure that you can do case 2 with eq.rec in the hypotheses only, or at least not easily, because there could be dependencies in the hypotheses as well, for example <code>e : α ≃ β, a : α, v : T a, h : v = 0 ⊢ ℕ</code>. For this you would have to tuple the hypotheses up or something, and I'm not convinced the result is better than just revert and eq.rec the goal</p>",
        "id": 192950284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586078668
    },
    {
        "content": "<p>Plus, this has the potential to compromise one of the things I like most about <code>subst</code>, which is that it works in any situation, cleaning up all sorts of DTT hell</p>",
        "id": 192950350,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586078767
    },
    {
        "content": "<p>I think it is reasonable to detect when <code>subst</code> would have an equivalent effect to <code>clear</code> and do that instead, but otherwise I think having a reliable term being produced is useful</p>",
        "id": 192950364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1586078861
    },
    {
        "content": "<p>Oh, these changes are not meant for <code>subst</code>.  The <code>subst</code> tactic should really stay as it is.</p>",
        "id": 192950365,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1586078869
    }
]