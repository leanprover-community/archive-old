[
    {
        "content": "<p>I think <code>monoid.closure (add_group.closure X) \\sub add_group.closure (monoid.closure X)</code> if X is a subset of a comm_ring (but I didn't prove it yet; doesn't look too hard). Is this in mathlib though?</p>",
        "id": 160419384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552229784
    },
    {
        "content": "<p>I think the second one is the definition of <code>ring.closure</code></p>",
        "id": 160419452,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1552229899
    },
    {
        "content": "<p>Why are these things called <code>closure</code> when <code>span</code> is so much shorter? Is it a coincidence that <code>submodule.span</code> is defined non-inductively as the intersection of all the submodules containing the set, whereas these closure operations are defined inductively?</p>",
        "id": 160421808,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552234134
    },
    {
        "content": "<blockquote>\n<p>I think the second one is the definition of <code>ring.closure</code></p>\n</blockquote>\n<p>That's a really useful comment, because the hardest part of the argument can be proved by the mul_mem field of the instance saying <code>ring.closure</code> is a subring.</p>",
        "id": 160423507,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552237207
    },
    {
        "content": "<p>[from mathlib]</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">namespace</span> <span class=\"n\">ring</span>\n\n<span class=\"bp\">...</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">is_subring</span> <span class=\"o\">(</span><span class=\"n\">closure</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">...</span>\n</pre></div>\n\n\n<p>The instance ends up being called <code>ring.is_subring</code> :-/</p>",
        "id": 160425350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552240410
    },
    {
        "content": "<p>Curiouser and curiouser:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">is_subring</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">is_submonoid.mul_mem :</span>\n<span class=\"cm\">  ∀ {a b : ?M_1}, a ∈ ring.closure ?M_3 → b ∈ ring.closure ?M_3 → a * b ∈ ring.closure ?M_3</span>\n<span class=\"cm\">-/</span>\n</pre></div>",
        "id": 160425353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552240421
    },
    {
        "content": "<p>End of my proof:</p>\n<div class=\"codehilite\"><pre><span></span>    <span class=\"c\">/-</span><span class=\"cm\"> state:</span>\n<span class=\"cm\">    Ha : a ∈ add_group.closure (monoid.closure T),</span>\n<span class=\"cm\">    Hb : b ∈ add_group.closure (monoid.closure T)</span>\n<span class=\"cm\">    ⊢ a * b ∈ add_group.closure (monoid.closure T)</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">is_subring</span> <span class=\"o\">(</span><span class=\"n\">add_group</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"o\">(</span><span class=\"n\">monoid</span><span class=\"bp\">.</span><span class=\"n\">closure</span> <span class=\"n\">T</span><span class=\"o\">))</span> <span class=\"o\">:=</span> <span class=\"n\">ring</span><span class=\"bp\">.</span><span class=\"n\">is_subring</span><span class=\"o\">,</span>\n    <span class=\"c1\">-- exact ring.is_subring.mul_mem Ha Hb, -- fails</span>\n    <span class=\"c\">/-</span><span class=\"cm\"> error is:</span>\n<span class=\"cm\">    invalid field notation, function &#39;is_submonoid.mul_mem&#39;</span>\n<span class=\"cm\">    does not have explicit argument with type (is_submonoid ...)</span>\n<span class=\"cm\">    -/</span>\n    <span class=\"n\">exact</span> <span class=\"n\">is_submonoid</span><span class=\"bp\">.</span><span class=\"n\">mul_mem</span> <span class=\"n\">Ha</span> <span class=\"n\">Hb</span><span class=\"o\">,</span> <span class=\"c1\">-- works</span>\n</pre></div>",
        "id": 160425632,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552240833
    },
    {
        "content": "<p>This is just some weirdness with structure fields, and is_subring extending is_submonoid I guess, but I don't really understand what's going on.</p>",
        "id": 160425645,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1552240885
    }
]