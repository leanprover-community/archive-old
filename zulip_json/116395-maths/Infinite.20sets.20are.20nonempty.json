[
    {
        "content": "<p>If I look at this theorem:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">infinite_set_is_not_empty</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">):</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span>\n</pre></div>\n\n\n<p>I'm not sure why it does not exist, maybe it's false but I don't really see why as <code>infinite</code> definition <em>is not</em> finite.</p>\n<p>And I can give this proof in Lean:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">infinite_set_is_not_empty</span> <span class=\"o\">(</span><span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">):</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">infinite</span> <span class=\"n\">S</span> <span class=\"bp\">→</span> <span class=\"n\">S</span><span class=\"bp\">.</span><span class=\"n\">nonempty</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">by_contra</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">not_nonempty_iff_eq_empty</span> <span class=\"n\">at</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n<span class=\"n\">exact</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite_empty</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 192927788,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586035647
    },
    {
        "content": "<p>(under the assumption of decidability, so I guess, <code>noncomputable theory</code> and <code>open_locale classical</code> are needed.)</p>",
        "id": 192927830,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586035700
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">fintype</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">infinite</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"n\">X</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>",
        "id": 192936184,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586051365
    },
    {
        "content": "<p>This is not a statement about sets, but about types.</p>",
        "id": 192936231,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1586051437
    },
    {
        "content": "<p>Note that <code>set.nonempty</code> is not a class, but <code>nonempty</code> is.</p>",
        "id": 192948943,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1586076324
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> But this is not really about my example, should I use subtypes to apply it to a subset of X?</p>",
        "id": 192950731,
        "sender_full_name": "Ryan Lahfa",
        "timestamp": 1586079460
    }
]