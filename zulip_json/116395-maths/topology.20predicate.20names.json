[
    {
        "content": "<p>In a <a href=\"https://github.com/leanprover-community/mathlib/pull/3130/files#r444084496\">PR review</a>, Sébastien wrote:</p>\n<blockquote>\n<p>The usual classes are postfixed with space (like complete_space, compact_space, proper_space and so on), while the set versions are prefixed with is (like is_open, is_complete, is_compact and so on). Do you think it would be possible to adhere to this general convention also here (with separated_space and is_separated respectively)?</p>\n</blockquote>\n<p>This is Sébastien's typical optimism. Actually the compactness predicate on sets is named <code>compact</code>. Should we try a general cleanup here? If people feel really brave we could even decide whether lemmas about closed sets contain <code>closed</code> or <code>is_closed</code> in their names.</p>",
        "id": 201748775,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1592929539
    },
    {
        "content": "<p>I think such a general cleanup is a good idea.</p>",
        "id": 201749416,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592929832
    },
    {
        "content": "<p>Even better would be to fix the slight inconveniences in the script that Jason wrote for such renaming.</p>",
        "id": 201749446,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592929851
    },
    {
        "content": "<p>And then life will be easy</p>",
        "id": 201749464,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592929857
    },
    {
        "content": "<p>In <a href=\"https://github.com/leanprover-community/mathlib/pull/3114#issuecomment-646848465\">another PR review</a> Chris brought up a closely related question for the algebra hierarchy. Now might be a good time to come up with a global convention which we can stick to going forwards.</p>",
        "id": 201749537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592929896
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/topology.20predicate.20names/near/201748775\">said</a>:</p>\n<blockquote>\n<p>This is Sébastien's typical optimism. Actually the compactness predicate on sets is named <code>compact</code>.</p>\n</blockquote>\n<p><span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 201751919,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592931024
    },
    {
        "content": "<p>I would guess the <code>is_...</code> started because <code>open</code> is not allowed for CS reasons, so you need <code>is_open</code>, and then for uniformity you put <code>is_</code> everywhere. I would be happy to get rid of <code>is_</code> everywhere and rename <code>open</code> to <code>CS_open</code> and <code>is_open</code> to <code>open</code>.</p>",
        "id": 201752189,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592931152
    },
    {
        "content": "<p>How about <code>open_namespace</code> instead of <code>CS_open</code> <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 201752255,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592931191
    },
    {
        "content": "<p>I'm open to anything :)</p>",
        "id": 201752327,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592931230
    },
    {
        "content": "<p>We should choose something, so that this discussion/issue can finally be closed :)</p>",
        "id": 201752544,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1592931332
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/topology.20predicate.20names/near/201752255\">said</a>:</p>\n<blockquote>\n<p>How about <code>open_namespace</code> instead of <code>CS_open</code> <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>\n</blockquote>\n<p>Another idea : why not have a specific notation for such reserved names ? Like we have <code>#</code> for... things with a # (I don't know the exact word). We could have something like : </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">::</span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"bp\">::</span><span class=\"kn\">open</span> <span class=\"n\">nat</span>\n<span class=\"c1\">--Or even :</span>\n<span class=\"bp\">::</span><span class=\"kn\">lemma</span> <span class=\"n\">foo</span> <span class=\"o\">:</span> <span class=\"bp\">...</span>\n</code></pre></div>",
        "id": 201759236,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592934784
    },
    {
        "content": "<p>Even better would be: <code>\\</code> instead of <code>::</code> (for the sake of LaTeX muscle memory).</p>",
        "id": 201759873,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1592935092
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/topology.20predicate.20names/near/201759873\">said</a>:</p>\n<blockquote>\n<p>Even better would be: <code>\\</code> instead of <code>::</code> (for the sake of LaTeX muscle memory).</p>\n</blockquote>\n<p>I thought about it, but it would mess up with VS-Code extension</p>",
        "id": 201759939,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1592935134
    },
    {
        "content": "<p>I think that we shouldn't do changes like this without a migration plan for Lean 4.</p>",
        "id": 201761216,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1592935711
    },
    {
        "content": "<p>Lean 4 should allow us to have different meanings for <code>open</code> depending on the context, hopefully.</p>",
        "id": 201762888,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1592936566
    },
    {
        "content": "<p>We tried that in maths -- we have 20 different meanings for normal. It just makes things more confusing :-/</p>",
        "id": 201762976,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1592936608
    }
]