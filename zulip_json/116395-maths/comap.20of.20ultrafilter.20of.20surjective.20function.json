[
    {
        "content": "<p>I see mathlib has a version of comap for ultrafilters involving injective functions, but I need a version involving surjective functions. For example, if m : α → β is surjective and u : filter β contains β, then comap m u should contain α, and hence ultrafilter.of (comap m u) also contains α.</p>",
        "id": 267317669,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641678432
    },
    {
        "content": "<p>Hmm.. but maybe this construction isn't really functorial.</p>",
        "id": 267317723,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641678487
    },
    {
        "content": "<p>You can pull back a filter along any map but in general the pullback of an ultrafilter might not be an ultrafilter.</p>",
        "id": 267319466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641680638
    },
    {
        "content": "<p>I'm a bit confused about the relevance of containing beta, this is not really much to do with an ultrafilter.</p>",
        "id": 267319540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641680710
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/ultrafilter.of\">docs#ultrafilter.of</a></p>",
        "id": 267319553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641680745
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.univ_sets\">docs#filter.univ_sets</a> ? Or maybe we're misunderstanding what you mean by \"containing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>β</mi></mrow><annotation encoding=\"application/x-tex\">\\beta</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span></span></span></span>\"</p>",
        "id": 267319557,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641680758
    },
    {
        "content": "<p>Oh this (ultrafilter.of) just chooses a random ultrafilter containing a filter, it's not functorial at all, as you rightly say</p>",
        "id": 267319610,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1641680793
    },
    {
        "content": "<p>Yeah. I am trying to prove that the continuous image of a compact set is compact in the convergence space setting. There is a slick proof using ultrafilters, but for that I need a lemma of the kind I mentioned in the original post.</p>",
        "id": 267319766,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641681025
    },
    {
        "content": "<p>For example if the types/sets involved are finite, then an ultrafilter is just an element, and you can pick an element of the preimage (since the map is surjective) but not in a canonical way</p>",
        "id": 267319772,
        "sender_full_name": "Reid Barton",
        "timestamp": 1641681036
    },
    {
        "content": "<p>Is compact defined by saying that every ultrafilter converges to a point?</p>",
        "id": 267319880,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641681218
    },
    {
        "content": "<p>Yes, compact means that every ultrafilter containing the compact set converges.</p>",
        "id": 267319927,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641681247
    },
    {
        "content": "<p>converges in the compact set, I suppose?</p>",
        "id": 267319943,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641681278
    },
    {
        "content": "<p>This is also the case in the topological setting.</p>",
        "id": 267319944,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641681278
    },
    {
        "content": "<p>Here's my definition:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">is_compact</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">ℱ</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">X</span><span class=\"o\">⦄,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℱ</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p.converges</span> <span class=\"n\">ℱ</span> <span class=\"n\">x</span>\n</code></pre></div>",
        "id": 267319968,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641681330
    },
    {
        "content": "<p>you don't want your <code>x</code> to be a member of <code>A</code>?</p>",
        "id": 267320040,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641681420
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_compact_iff_ultrafilter_le_nhds\">docs#is_compact_iff_ultrafilter_le_nhds</a></p>",
        "id": 267320054,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641681462
    },
    {
        "content": "<p>According to my notes, it doesn't matter, but maybe I need to fix that.</p>",
        "id": 267320103,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641681509
    },
    {
        "content": "<p>I don't really know, since I'm not actually familiar with convergence spaces... I'm just going from what I know about topological spaces here.</p>",
        "id": 267320123,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641681572
    },
    {
        "content": "<p>Here is the proof from my notes:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">Let</span> <span class=\"n\">X</span><span class=\"o\">,</span><span class=\"n\">Y</span> <span class=\"n\">be</span> <span class=\"n\">convergence</span> <span class=\"n\">spaces</span><span class=\"o\">,</span> <span class=\"k\">let</span> <span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span> <span class=\"n\">be</span> <span class=\"n\">continuous</span> <span class=\"n\">and</span> <span class=\"k\">let</span> <span class=\"n\">A</span> <span class=\"bp\">⊆</span> <span class=\"n\">X</span> <span class=\"n\">be</span>\n<span class=\"n\">compact.</span> <span class=\"n\">Then</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">is</span> <span class=\"n\">compact</span><span class=\"o\">:</span> <span class=\"n\">Define</span> <span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"kd\">by</span> <span class=\"n\">g</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span> <span class=\"n\">Let</span> <span class=\"n\">V</span> <span class=\"n\">be</span>\n<span class=\"n\">an</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">on</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span> <span class=\"n\">Since</span> <span class=\"n\">g</span> <span class=\"n\">is</span> <span class=\"n\">onto</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">[</span><span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">on</span> <span class=\"n\">A.</span> <span class=\"n\">Since</span> <span class=\"n\">A</span>\n<span class=\"n\">is</span> <span class=\"n\">compact</span><span class=\"o\">,</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">[</span><span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"n\">converges.</span> <span class=\"n\">Since</span> <span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">[</span><span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"n\">converges</span> <span class=\"n\">and</span> <span class=\"n\">is</span> <span class=\"n\">continuous</span><span class=\"o\">,</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">g</span><span class=\"o\">[</span><span class=\"n\">g</span><span class=\"bp\">⁻¹</span><span class=\"o\">[</span><span class=\"n\">V</span><span class=\"o\">]]</span>\n<span class=\"n\">converges</span> <span class=\"k\">in</span> <span class=\"n\">f</span><span class=\"o\">(</span><span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 267320299,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641681841
    },
    {
        "content": "<p><code> Since g is onto, g⁻¹[V] is an ultrafilter on A</code> here <code>g^-1[V]</code> is either some strange notation that I don't know, or the assertion is false.</p>",
        "id": 267320390,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641681956
    },
    {
        "content": "<p>But for that you should be able to use <code>ultrafilter.of</code> as above. You would need to show that <code>ultrafilter.map (ultrafilter.of (filter.comap F)) = F</code>.</p>",
        "id": 267320440,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641682009
    },
    {
        "content": "<p>Can you give a mwe with the definition of a convergence space and of continuity?</p>",
        "id": 267320460,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641682059
    },
    {
        "content": "<p><code>g⁻¹[V]</code> is basically <code>comap g V</code></p>",
        "id": 267320468,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641682081
    },
    {
        "content": "<p>but that's not an ultrafilter.</p>",
        "id": 267320508,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641682088
    },
    {
        "content": "<p>Indeed. That's an error in my notes!</p>",
        "id": 267320578,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641682202
    },
    {
        "content": "<p>Here's some code:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">mport</span> <span class=\"n\">order.filter.partial</span>\n<span class=\"kn\">import</span> <span class=\"n\">order.filter.ultrafilter</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.support</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.concrete_category.bundled</span>\n\n<span class=\"kd\">noncomputable theory</span>\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">function</span> <span class=\"n\">filter</span> <span class=\"n\">classical</span> <span class=\"n\">option</span> <span class=\"n\">category_theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"n\">Z</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">structure</span> <span class=\"n\">convergence_space</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">converges</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">pure_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">converges</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">le_converges</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">ℱ</span> <span class=\"bp\">𝒢</span><span class=\"o\">},</span> <span class=\"n\">ℱ</span> <span class=\"bp\">≤</span> <span class=\"bp\">𝒢</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">x</span><span class=\"o\">},</span> <span class=\"n\">converges</span> <span class=\"bp\">𝒢</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">converges</span> <span class=\"n\">ℱ</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"c1\">-- ℱ ≤ 𝒢 means 𝒢 ⊆ ℱ</span>\n\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"n\">ext</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n<span class=\"kn\">attribute</span> <span class=\"o\">[</span><span class=\"kd\">class</span><span class=\"o\">]</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">convergence_space</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">continuous</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span>\n<span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">x</span> <span class=\"n\">ℱ</span><span class=\"o\">⦄,</span> <span class=\"n\">p.converges</span> <span class=\"n\">ℱ</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">q.converges</span> <span class=\"o\">(</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">ℱ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">is_compact</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">⦃</span><span class=\"n\">ℱ</span> <span class=\"o\">:</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">X</span><span class=\"o\">⦄,</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">ℱ</span> <span class=\"bp\">→</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">p.converges</span> <span class=\"n\">ℱ</span> <span class=\"n\">x</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">is_compact.image</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"bp\">?</span>\n</code></pre></div>",
        "id": 267320608,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641682220
    },
    {
        "content": "<p>In my notes, I have this result, which I guess I was relying on:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">If</span> <span class=\"n\">G</span> <span class=\"n\">is</span> <span class=\"n\">an</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">and</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span><span class=\"o\">[</span><span class=\"n\">G</span><span class=\"o\">]</span> <span class=\"n\">is</span> <span class=\"n\">a</span> <span class=\"n\">filter</span> <span class=\"n\">on</span> <span class=\"n\">X</span><span class=\"o\">,</span> <span class=\"k\">then</span> <span class=\"n\">G</span> <span class=\"bp\">=</span> <span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">f</span><span class=\"bp\">⁻¹</span><span class=\"o\">[</span><span class=\"n\">G</span><span class=\"o\">]]</span> <span class=\"n\">and</span> <span class=\"n\">G</span><span class=\"bp\">=</span><span class=\"n\">f</span><span class=\"o\">[</span><span class=\"n\">U</span><span class=\"o\">]</span> <span class=\"n\">for</span> <span class=\"n\">every</span> <span class=\"n\">ultrafilter</span> <span class=\"n\">U</span> <span class=\"n\">on</span> <span class=\"n\">X</span> <span class=\"n\">finer</span> <span class=\"n\">than</span> <span class=\"n\">f</span><span class=\"bp\">⁻¹</span><span class=\"o\">[</span><span class=\"n\">G</span><span class=\"o\">]</span><span class=\"bp\">.</span>\n</code></pre></div>",
        "id": 267320788,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641682447
    },
    {
        "content": "<p>I think this is more-or-less the proof that your notes sketched here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">is_compact.image</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">X</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">q</span> <span class=\"o\">:</span> <span class=\"n\">convergence_space</span> <span class=\"n\">Y</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h'</span> <span class=\"o\">:</span> <span class=\"n\">continuous</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">is_compact</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rintros</span> <span class=\"n\">F</span> <span class=\"n\">hA</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">filter.comap</span> <span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">ne_bot</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">G</span> <span class=\"o\">:=</span> <span class=\"n\">ultrafilter.of</span> <span class=\"o\">(</span><span class=\"n\">filter.comap</span> <span class=\"n\">f</span> <span class=\"n\">F</span><span class=\"o\">),</span>\n  <span class=\"k\">have</span> <span class=\"n\">hG</span> <span class=\"o\">:</span> <span class=\"n\">G.map</span> <span class=\"n\">f</span> <span class=\"bp\">=</span> <span class=\"n\">F</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">∈</span> <span class=\"n\">G</span><span class=\"o\">,</span> <span class=\"gr\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">obtain</span> <span class=\"o\">⟨</span><span class=\"n\">t</span><span class=\"o\">,</span><span class=\"n\">ht</span><span class=\"o\">⟩</span> <span class=\"o\">:=</span> <span class=\"n\">h</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"n\">use</span> <span class=\"n\">f</span> <span class=\"n\">t</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">hG</span><span class=\"o\">,</span>\n  <span class=\"n\">tauto</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267320876,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1641682579
    },
    {
        "content": "<p>Yep, that looks about right. Thanks a lot. I'll try to fill in the sorries.</p>",
        "id": 267320974,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1641682749
    }
]