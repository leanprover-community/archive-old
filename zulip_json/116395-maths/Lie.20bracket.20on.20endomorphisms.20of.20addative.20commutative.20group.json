[
    {
        "content": "<p>I've spent most of the last 24 hours (mostly sleepless night) getting confused by the way the Lie bracket works in Lean. I'm trying to define the concept of a Jordan algebra and then work towards linearising the Jordan axiom. This is what I have so far:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.lie.of_associative</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom_instances</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n\n<span class=\"sd\">/-- A not-necessarily-unital, not-necessarily-associative ring. -/</span>\n<span class=\"kd\">@[protect_proj, ancestor add_comm_group non_unital_non_assoc_semiring ]</span>\n<span class=\"kd\">class</span> <span class=\"n\">non_unital_non_assoc_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">L</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">→</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">→</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">jordan</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">commL1R1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">commL1L2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">commL1R2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">commL2R1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"c1\">--(commL2R2: ∀ a : A, (L a^2)∘(R a^2) = (R a^2)∘(L a^2)) - This follows from commL1R1</span>\n<span class=\"o\">(</span><span class=\"n\">commR1R2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">has_pow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">comm_jordan</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">has_pow</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"n\">ℕ</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">comm</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">jordan</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n\n<span class=\"c1\">-- A (commutative) Jordan multiplication is also a (non-)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">comm_jordan_is_jordan</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_jordan</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">jordan</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">commL1R1</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">comm_jordan.comm</span><span class=\"o\">,</span>\n  <span class=\"n\">commL1L2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">comm_jordan.jordan</span><span class=\"o\">,</span>\n  <span class=\"n\">commL1R2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">comm_jordan.comm</span><span class=\"o\">,</span> <span class=\"n\">comm_jordan.jordan</span><span class=\"o\">],</span>\n  <span class=\"n\">commL2R1</span> <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">comm_jordan.comm</span><span class=\"o\">,</span> <span class=\"n\">comm_jordan.jordan</span><span class=\"o\">],</span>\n  <span class=\"n\">commR1R2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">comm_jordan.comm</span><span class=\"o\">,</span> <span class=\"n\">comm_jordan.jordan</span><span class=\"o\">],</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">def</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid.End</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_jordan</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">bra</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid.End</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⁅</span><span class=\"n\">E</span><span class=\"o\">,</span><span class=\"n\">F</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"n\">add_monoid_hom.comp</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"bp\">-</span> <span class=\"n\">add_monoid_hom.comp</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">op_jordan</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⁅</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">bra</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">add_monoid_hom.comp</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">comm_jordan.jordan</span><span class=\"o\">,</span> <span class=\"c1\">-- Goes wrong here</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_op_com1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">•⁅</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁆</span> <span class=\"bp\">+</span> <span class=\"bp\">⁅</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">⁆</span> <span class=\"bp\">+</span> <span class=\"bp\">⁅</span><span class=\"n\">T</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">⁆</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">•⁅</span><span class=\"n\">T</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lin_jordan</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"o\">(</span><span class=\"bp\">⁅</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">⁆</span> <span class=\"bp\">+</span> <span class=\"bp\">⁅</span><span class=\"n\">T</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">⁆</span> <span class=\"bp\">+</span> <span class=\"bp\">⁅</span><span class=\"n\">T</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁆</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>\n<p>For a start, I'm not really sure what the difference between <code>add_monoid.End A</code> and <code>A →+ A</code>. They seem to be almost the same thing, ecept that lean understands the former as having a Lie bracket but not the latter.</p>\n<p>Then I'm not sure if I should be defining:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid.End</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_zero</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_add</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>\n<p>or whether it should be:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span> <span class=\"bp\">→</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n</code></pre></div>\n<p>and then somehow show that this is a <code>add_monoid.End A</code>.</p>\n<p>lemma op_jordan comes a cropper because the statement is equivalent to:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">),</span> <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span> <span class=\"bp\">-</span> <span class=\"o\">{</span><span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">a</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"bp\">∘</span> <span class=\"bp\">⇑</span><span class=\"o\">(</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"n\">_</span><span class=\"o\">}</span>\n</code></pre></div>\n<p>And rewrite can't find the pattern <code>L ?m_3 ∘ (L ?m_3 ^ 2)</code>.</p>\n<p>Hope this makes some sort of sense?</p>\n<p>Thanks,</p>\n<p>Christopher</p>",
        "id": 265440280,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1639858117
    },
    {
        "content": "<p>(Written in \"normal maths\" this is sections 2.4.3-4 on p31 of <a href=\"https://folk.ntnu.no/hanche/joa/joa-m.pdf\">https://folk.ntnu.no/hanche/joa/joa-m.pdf</a>)</p>",
        "id": 265440443,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1639858365
    },
    {
        "content": "<p><code>add_monoid.End</code> is just <code>A →+ A</code> with a <code>monoid</code> structure. The reason they're different is for <code>monoid.End A</code> vs <code>A →* A</code>, where the former has a compositional monoid structure and the latter a pointwise one</p>",
        "id": 265441580,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639859291
    },
    {
        "content": "<p>The additive one doesn't need to worry about that ambiguity, but I guess it was easier to be consistent</p>",
        "id": 265441598,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639859329
    },
    {
        "content": "<p>If you want some instant gratification, replace <code>rw comm_jordan.jordan</code> with <code>simpa [sub_eq_zero]</code>.</p>",
        "id": 265441633,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1639859391
    },
    {
        "content": "<p>However I think what you really need are a bunch of <code>simp</code> lemmas for the new definitions. Putting <code>simps</code> in front of several of your <code>def</code>s will be a good start.</p>",
        "id": 265441727,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1639859442
    },
    {
        "content": "<p>Are you looking for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.mul\">docs#add_monoid_hom.mul</a>?</p>",
        "id": 265441941,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639859690
    },
    {
        "content": "<p>Or the left and right variants linked from its docstring</p>",
        "id": 265441976,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639859761
    },
    {
        "content": "<p>Just to give the idea of a <code>simp</code>-type approach, if you replace  the line <code>def T (a : A) : add_monoid.End A := {</code> with <code>@[simps] def T (a : A) : add_monoid.End A := {</code> then the following works:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"c1\">-- Appears to be missing from Mathlib</span>\n<span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">add_monoid_hom.pow_apply</span>\n  <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_monoid</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid.End</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">f</span><span class=\"bp\">^</span><span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">])</span> <span class=\"n\">a</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">refl</span><span class=\"o\">,</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">pow_succ</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">function.comp_app</span><span class=\"o\">,</span> <span class=\"n\">function.iterate_succ'</span><span class=\"o\">,</span> <span class=\"n\">add_monoid.coe_mul</span><span class=\"o\">],</span> <span class=\"o\">},</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">op_jordan</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⁅</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">b</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">bra</span><span class=\"o\">],</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 265442524,
        "sender_full_name": "Oliver Nash",
        "timestamp": 1639860395
    },
    {
        "content": "<p>I think we have that first lemma in a file about <code>iterate</code></p>",
        "id": 265443579,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639861659
    },
    {
        "content": "<p>We have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/monoid_hom.coe_pow\">docs#monoid_hom.coe_pow</a></p>",
        "id": 265443656,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639861710
    },
    {
        "content": "<p>Do we have <a href=\"https://leanprover-community.github.io/mathlib_docs/find/add_monoid_hom.coe_pow\">docs#add_monoid_hom.coe_pow</a>?</p>",
        "id": 265443673,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639861727
    },
    {
        "content": "<p>Added in <a href=\"https://github.com/leanprover-community/mathlib/pull/10886\">#10886</a> as <code>add_monoid.End.coe_pow</code></p>",
        "id": 265450788,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639871893
    },
    {
        "content": "<p>Maybe we should change the monoid structure on <code>add_monoid_hom</code> to make it a <code>rfl</code> lemma in a future PR.</p>",
        "id": 265450794,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1639871914
    },
    {
        "content": "<p>Oops, I made the wrong assumption about the order of precedence. It should be <code>T (a^2)</code> not <code>(T a)^2</code>. Sorry. Thank you for adding <code>add_monoid.End.coe_pow</code> though, as I will need <code>(T a)^2</code> in the future.</p>\n<p>The absence of a unit now creates a problem, as <code>non_unital_non_assoc_ring</code> won't be an instance of <code>[has_pow A ℕ]</code> on account of <code>a^0</code> not making sense. Is there a type of strictly positive natural numbers? I guess one could create a subtype of ℕ?</p>\n<p>I now have:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.lie.of_associative</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom_instances</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.iterate_hom</span>\n\n<span class=\"kd\">set_option</span> <span class=\"n\">old_structure_cmd</span> <span class=\"n\">true</span>\n\n<span class=\"kd\">variables</span> <span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span>\n\n<span class=\"sd\">/-- A not-necessarily-unital, not-necessarily-associative ring. -/</span>\n<span class=\"kd\">@[protect_proj, ancestor add_comm_group non_unital_non_assoc_semiring ]</span>\n<span class=\"kd\">class</span> <span class=\"n\">non_unital_non_assoc_ring</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kd\">extends</span>\n  <span class=\"n\">add_comm_group</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">α</span>\n\n<span class=\"kd\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span>\n<span class=\"kd\">def</span> <span class=\"n\">L</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">→</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">*</span> <span class=\"n\">b</span>\n<span class=\"kd\">def</span> <span class=\"n\">R</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">→</span><span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span><span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">*</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">jordan</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">commL1R1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">commL1L2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">commL1R2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">commL2R1</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">commR1R2</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">comm_jordan</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">comm</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">L</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">R</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">jordan</span><span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">))</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">))</span><span class=\"bp\">∘</span><span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n\n\n<span class=\"c1\">-- A (commutative) Jordan multiplication is also a (non-)</span>\n<span class=\"kd\">instance</span> <span class=\"n\">comm_jordan_is_jordan</span> <span class=\"o\">[</span><span class=\"n\">has_mul</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_jordan</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"n\">jordan</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n  <span class=\"n\">commL1R1</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">comm_jordan.comm</span><span class=\"o\">,</span>\n  <span class=\"n\">commL1L2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"n\">comm_jordan.jordan</span><span class=\"o\">,</span>\n  <span class=\"n\">commL1R2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">comm_jordan.comm</span><span class=\"o\">,</span> <span class=\"n\">comm_jordan.jordan</span><span class=\"o\">],</span>\n  <span class=\"n\">commL2R1</span> <span class=\"o\">:=</span>  <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">comm_jordan.comm</span><span class=\"o\">,</span> <span class=\"n\">comm_jordan.jordan</span><span class=\"o\">],</span>\n  <span class=\"n\">commR1R2</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"bp\">←</span> <span class=\"n\">comm_jordan.comm</span><span class=\"o\">,</span> <span class=\"bp\">←</span> <span class=\"n\">comm_jordan.comm</span><span class=\"o\">,</span> <span class=\"n\">comm_jordan.jordan</span><span class=\"o\">],</span>\n<span class=\"o\">}</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid.End</span> <span class=\"n\">A</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.mul_left</span> <span class=\"n\">a</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_jordan</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">brackets</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">add_monoid.End</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⁅</span><span class=\"n\">E</span><span class=\"o\">,</span><span class=\"n\">F</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"n\">add_monoid_hom.comp</span> <span class=\"n\">E</span> <span class=\"n\">F</span> <span class=\"bp\">-</span> <span class=\"n\">add_monoid_hom.comp</span> <span class=\"n\">F</span> <span class=\"n\">E</span> <span class=\"o\">:=</span> <span class=\"kd\">by</span> <span class=\"n\">exact</span> <span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">op_jordan</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">⁅</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">mul_op_com1</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">•⁅</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁆</span> <span class=\"bp\">+</span> <span class=\"bp\">⁅</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">b</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">⁆</span> <span class=\"bp\">+</span> <span class=\"bp\">⁅</span><span class=\"n\">T</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"bp\">^</span><span class=\"mi\">2</span><span class=\"bp\">⁆</span> <span class=\"bp\">+</span> <span class=\"mi\">2</span><span class=\"bp\">•⁅</span><span class=\"n\">T</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁆</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">lin_jordan</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"mi\">2</span><span class=\"bp\">•</span><span class=\"o\">(</span><span class=\"bp\">⁅</span><span class=\"n\">T</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">b</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">⁆</span> <span class=\"bp\">+</span> <span class=\"bp\">⁅</span><span class=\"n\">T</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">c</span><span class=\"o\">)</span><span class=\"bp\">⁆</span> <span class=\"bp\">+</span> <span class=\"bp\">⁅</span><span class=\"n\">T</span> <span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">T</span> <span class=\"o\">(</span><span class=\"n\">a</span><span class=\"bp\">*</span><span class=\"n\">b</span><span class=\"o\">)</span><span class=\"bp\">⁆</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n</code></pre></div>",
        "id": 265476832,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1639915295
    },
    {
        "content": "<p>Yes, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/pnat\">docs#pnat</a></p>",
        "id": 265477385,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1639916189
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"240862\">@Oliver Nash</span> Re. putting <code>[simps]</code> in front of the definitions, linting then fails with:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">geometry.manifold.algebra.monoid</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">L_apply'</span>\n</code></pre></div>\n<p>The documentation seems to imply that this name can be overridden with  <code>initialize_simps_projections</code>, but the documentation is a bit hard to understand. I'm trying something like this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">set_option</span> <span class=\"n\">trace.simps.verbose</span> <span class=\"n\">true</span>\n\n<span class=\"n\">initialize_simps_projections</span> <span class=\"n\">add_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"bp\">→</span> <span class=\"n\">jordan</span> <span class=\"n\">as_prefix</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>But it doesn't seem to have any affect:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">lean</span> <span class=\"c1\">--run scripts/lint_mathlib.lean</span>\n<span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span> <span class=\"n\">Already</span> <span class=\"n\">found</span> <span class=\"n\">projection</span> <span class=\"n\">information</span> <span class=\"n\">for</span> <span class=\"kd\">structure</span> <span class=\"n\">add_monoid_hom</span><span class=\"o\">:</span>\n        <span class=\"bp\">&gt;</span> <span class=\"n\">Projection</span> <span class=\"n\">apply</span><span class=\"o\">:</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_8</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_zero_class</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_zero_class</span> <span class=\"n\">N</span><span class=\"o\">],</span> <span class=\"n\">coe_fn</span>\n        <span class=\"bp\">&gt;</span> <span class=\"n\">No</span> <span class=\"n\">lemmas</span> <span class=\"n\">are</span> <span class=\"n\">generated</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">projections</span><span class=\"o\">:</span> <span class=\"n\">map_zero'</span><span class=\"o\">,</span> <span class=\"n\">map_add'.</span>\n<span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span> <span class=\"n\">Already</span> <span class=\"n\">found</span> <span class=\"n\">projection</span> <span class=\"n\">information</span> <span class=\"n\">for</span> <span class=\"kd\">structure</span> <span class=\"n\">add_monoid_hom</span><span class=\"o\">:</span>\n        <span class=\"bp\">&gt;</span> <span class=\"n\">Projection</span> <span class=\"n\">apply</span><span class=\"o\">:</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_8</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_zero_class</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_zero_class</span> <span class=\"n\">N</span><span class=\"o\">],</span> <span class=\"n\">coe_fn</span>\n        <span class=\"bp\">&gt;</span> <span class=\"n\">No</span> <span class=\"n\">lemmas</span> <span class=\"n\">are</span> <span class=\"n\">generated</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">projections</span><span class=\"o\">:</span> <span class=\"n\">map_zero'</span><span class=\"o\">,</span> <span class=\"n\">map_add'.</span>\n<span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span> <span class=\"n\">adding</span> <span class=\"n\">projection</span> <span class=\"n\">L_apply</span><span class=\"o\">:</span>\n        <span class=\"bp\">&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">non_unital_non_assoc_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">⇑</span><span class=\"n\">L</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">add_monoid_hom.mul_left</span> <span class=\"n\">r</span>\n<span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span> <span class=\"n\">Already</span> <span class=\"n\">found</span> <span class=\"n\">projection</span> <span class=\"n\">information</span> <span class=\"n\">for</span> <span class=\"kd\">structure</span> <span class=\"n\">add_monoid_hom</span><span class=\"o\">:</span>\n        <span class=\"bp\">&gt;</span> <span class=\"n\">Projection</span> <span class=\"n\">apply</span><span class=\"o\">:</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_8</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_zero_class</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_zero_class</span> <span class=\"n\">N</span><span class=\"o\">],</span> <span class=\"n\">coe_fn</span>\n        <span class=\"bp\">&gt;</span> <span class=\"n\">No</span> <span class=\"n\">lemmas</span> <span class=\"n\">are</span> <span class=\"n\">generated</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">projections</span><span class=\"o\">:</span> <span class=\"n\">map_zero'</span><span class=\"o\">,</span> <span class=\"n\">map_add'.</span>\n<span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span> <span class=\"n\">adding</span> <span class=\"n\">projection</span> <span class=\"n\">R_apply</span><span class=\"o\">:</span>\n        <span class=\"bp\">&gt;</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">non_unital_non_assoc_ring</span> <span class=\"n\">A</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"o\">),</span> <span class=\"bp\">⇑</span><span class=\"n\">R</span> <span class=\"n\">r</span> <span class=\"bp\">=</span> <span class=\"n\">add_monoid_hom.mul_right</span> <span class=\"n\">r</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mans0954</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib_jordan</span><span class=\"bp\">-</span><span class=\"n\">algebras</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">all.lean</span><span class=\"o\">:</span><span class=\"mi\">3</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">geometry.manifold.algebra.monoid</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">L_apply'</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mans0954</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib_jordan</span><span class=\"bp\">-</span><span class=\"n\">algebras</span><span class=\"bp\">/</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">lint_mathlib.lean</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">geometry.manifold.algebra.monoid</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">L_apply'</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">unknown</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">L_apply'</span>\n</code></pre></div>\n<p>What am I doing wrong?</p>\n<p>Thanks,</p>\n<p>Christopher</p>",
        "id": 265836406,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1640197346
    },
    {
        "content": "<p>Can you give a full mwe?</p>",
        "id": 265837006,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640197715
    },
    {
        "content": "<p>In <code>src/mwe.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom_instances</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">→+</span><span class=\"n\">add_monoid.End</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.mul_left</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.ext</span> <span class=\"bp\">$</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">add_monoid_hom.ext</span> <span class=\"bp\">$</span> <span class=\"n\">add_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>In <code>src/all.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">mwe</span>\n<span class=\"kn\">import</span> <span class=\"n\">geometry.manifold.algebra.monoid</span>\n</code></pre></div>\n<p>Run <code>lean --run scripts/lint_mathlib.lean</code>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mans0954</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib_jordan</span><span class=\"bp\">-</span><span class=\"n\">algebras</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">all.lean</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">geometry.manifold.algebra.monoid</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">L_apply'</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mans0954</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib_jordan</span><span class=\"bp\">-</span><span class=\"n\">algebras</span><span class=\"bp\">/</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">lint_mathlib.lean</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">geometry.manifold.algebra.monoid</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">L_apply'</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">unknown</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">L_apply'</span>\n</code></pre></div>",
        "id": 265890963,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1640245119
    },
    {
        "content": "<p>Does <a href=\"https://leanprover-community.github.io/mathlib_docs/find/L_apply\">docs#L_apply</a> already exist?</p>",
        "id": 265891050,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640245247
    },
    {
        "content": "<p>Yes, it does. I think it should probably be renamed.</p>",
        "id": 265891121,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640245323
    },
    {
        "content": "<p>Incidentally, that <code>L</code> is basically <a href=\"https://leanprover-community.github.io/mathlib_docs/find/module.to_add_monoid_End\">docs#module.to_add_monoid_End</a>, but that one requires a unit and associativity</p>",
        "id": 265891166,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640245416
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span> yes, the documentation seemed to imply that I could do something like this to rename the projection:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">algebra.group.hom_instances</span>\n<span class=\"kn\">import</span> <span class=\"n\">algebra.ring.basic</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">non_unital_non_assoc_semiring</span> <span class=\"n\">A</span><span class=\"o\">]</span>\n\n<span class=\"n\">initialize_simps_projections</span> <span class=\"n\">add_monoid_hom</span> <span class=\"o\">(</span><span class=\"n\">apply</span> <span class=\"bp\">→</span> <span class=\"n\">jordan</span> <span class=\"n\">as_prefix</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[simps]</span> <span class=\"kd\">def</span> <span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">A</span><span class=\"bp\">→+</span><span class=\"n\">add_monoid.End</span> <span class=\"n\">A</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">to_fun</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.mul_left</span><span class=\"o\">,</span>\n  <span class=\"n\">map_zero'</span> <span class=\"o\">:=</span> <span class=\"n\">add_monoid_hom.ext</span> <span class=\"bp\">$</span> <span class=\"n\">zero_mul</span><span class=\"o\">,</span>\n  <span class=\"n\">map_add'</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">,</span> <span class=\"n\">add_monoid_hom.ext</span> <span class=\"bp\">$</span> <span class=\"n\">add_mul</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>But <code>lean --run scripts/lint_mathlib.lean</code> still fails:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"o\">[</span><span class=\"n\">simps</span><span class=\"o\">]</span> <span class=\"bp\">&gt;</span> <span class=\"n\">Already</span> <span class=\"n\">found</span> <span class=\"n\">projection</span> <span class=\"n\">information</span> <span class=\"n\">for</span> <span class=\"kd\">structure</span> <span class=\"n\">add_monoid_hom</span><span class=\"o\">:</span>\n        <span class=\"bp\">&gt;</span> <span class=\"n\">Projection</span> <span class=\"n\">apply</span><span class=\"o\">:</span> <span class=\"bp\">λ</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_7</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_8</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">_inst_1</span> <span class=\"o\">:</span> <span class=\"n\">add_zero_class</span> <span class=\"n\">M</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">_inst_2</span> <span class=\"o\">:</span> <span class=\"n\">add_zero_class</span> <span class=\"n\">N</span><span class=\"o\">],</span> <span class=\"n\">coe_fn</span>\n        <span class=\"bp\">&gt;</span> <span class=\"n\">No</span> <span class=\"n\">lemmas</span> <span class=\"n\">are</span> <span class=\"n\">generated</span> <span class=\"n\">for</span> <span class=\"n\">the</span> <span class=\"n\">projections</span><span class=\"o\">:</span> <span class=\"n\">map_zero'</span><span class=\"o\">,</span> <span class=\"n\">map_add'.</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mans0954</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib_jordan</span><span class=\"bp\">-</span><span class=\"n\">algebras</span><span class=\"bp\">/</span><span class=\"n\">src</span><span class=\"bp\">/</span><span class=\"n\">all.lean</span><span class=\"o\">:</span><span class=\"mi\">2</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">geometry.manifold.algebra.monoid</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">L_apply'</span>\n<span class=\"bp\">/</span><span class=\"n\">home</span><span class=\"bp\">/</span><span class=\"n\">mans0954</span><span class=\"bp\">/</span><span class=\"n\">Documents</span><span class=\"bp\">/</span><span class=\"n\">lean</span><span class=\"bp\">/</span><span class=\"n\">mathlib_jordan</span><span class=\"bp\">-</span><span class=\"n\">algebras</span><span class=\"bp\">/</span><span class=\"n\">scripts</span><span class=\"bp\">/</span><span class=\"n\">lint_mathlib.lean</span><span class=\"o\">:</span><span class=\"mi\">9</span><span class=\"o\">:</span><span class=\"mi\">0</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"kn\">import</span><span class=\"o\">:</span> <span class=\"n\">geometry.manifold.algebra.monoid</span>\n<span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">L_apply'</span>\n<span class=\"bp\">&lt;</span><span class=\"n\">unknown</span><span class=\"bp\">&gt;</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span><span class=\"mi\">1</span><span class=\"o\">:</span> <span class=\"n\">error</span><span class=\"o\">:</span> <span class=\"n\">invalid</span> <span class=\"n\">object</span> <span class=\"n\">declaration</span><span class=\"o\">,</span> <span class=\"n\">environment</span> <span class=\"n\">already</span> <span class=\"n\">has</span> <span class=\"n\">an</span> <span class=\"n\">object</span> <span class=\"n\">named</span> <span class=\"bp\">'</span><span class=\"n\">L_apply'</span>\n</code></pre></div>",
        "id": 265987483,
        "sender_full_name": "Christopher Hoskin",
        "timestamp": 1640335367
    },
    {
        "content": "<p>You don't want to do that</p>",
        "id": 265987717,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640335710
    },
    {
        "content": "<p>What I meant was that the existing <code>L_apply</code> should be renamed</p>",
        "id": 265987727,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640335741
    },
    {
        "content": "<p>Alternatively, work in a namespace of your own</p>",
        "id": 265987735,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640335766
    },
    {
        "content": "<p><code>L</code> is an awfully short name to claim globally</p>",
        "id": 265987751,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1640335795
    }
]