[
    {
        "content": "<p>I've never used <code>is_scalar_tower</code> seriously until today, and I've had a great time with it, it worked like a dream. Except for here:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">ring_theory.algebra_tower</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">(</span><span class=\"n\">R₀</span> <span class=\"n\">R</span> <span class=\"n\">N</span> <span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R₀</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">comm_semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">R₀</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R₀</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">R₀</span> <span class=\"n\">R</span> <span class=\"n\">N</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">add_comm_monoid</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R₀</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"n\">P</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_scalar_tower</span> <span class=\"n\">R₀</span> <span class=\"n\">R</span> <span class=\"n\">P</span><span class=\"o\">]</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">add_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">semimodule</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">has_scalar</span> <span class=\"n\">R₀</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span>\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R₀</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">infer_instance</span> <span class=\"c1\">-- fails</span>\n</code></pre></div>\n<p>Is this a missing instance? I'm not quite confident enough to start adding things, but mathematically it looks OK. Am I missing an import?</p>",
        "id": 227123257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613860050
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"n\">is_scalar_tower</span> <span class=\"n\">R₀</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"bp\">→ₗ</span><span class=\"o\">[</span><span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"n\">P</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">smul_assoc</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">linear_map.ext</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">}</span>\n</code></pre></div>",
        "id": 227123449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613860239
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> this was why <code>simp</code> was failing -- <code>linear_map.map_smul_of_tower</code>  is a simp lemma and should have been making our lives easier but it wasn't firing for this reason.</p>",
        "id": 227123489,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613860283
    },
    {
        "content": "<p>I assume there is no <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.is_scalar_tower\">docs#linear_map.is_scalar_tower</a> or  <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.smul_comm_class\">docs#linear_map.smul_comm_class</a>?</p>",
        "id": 227124530,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613861225
    },
    {
        "content": "<p>I'd expect to find them next to each other, and the latter exists</p>",
        "id": 227124559,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613861267
    },
    {
        "content": "<p>OK thanks, I'll add the former. It's solved the problems we were having earlier.</p>",
        "id": 227124604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613861285
    },
    {
        "content": "<p>What lemmas does simp use in your example?</p>",
        "id": 227125069,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613861673
    },
    {
        "content": "<p>I'd kind of expect the instance to involve three rings not two</p>",
        "id": 227125085,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613861705
    },
    {
        "content": "<p>It's the <code>toric</code> branch of lean-liquid. The lemma which wasn't firing was <code>linear_map.map_smul_of_tower</code>.</p>",
        "id": 227125112,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613861725
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.map_smul_of_tower\">docs#linear_map.map_smul_of_tower</a></p>",
        "id": 227125118,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613861742
    },
    {
        "content": "<p>compatible_smul wasn't firing.</p>",
        "id": 227125160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613861764
    },
    {
        "content": "<p>Since <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.semimodule\">docs#linear_map.semimodule</a> involves two rings</p>",
        "id": 227125165,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613861765
    },
    {
        "content": "<p>M_2 in our case was (N -&gt;_l[S] P) in the notation of map_smul_of_tower</p>",
        "id": 227125189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613861801
    },
    {
        "content": "<p>so we had two rings and three modules</p>",
        "id": 227125197,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613861811
    },
    {
        "content": "<p>It all works fine with the instance added.</p>",
        "id": 227125218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613861832
    },
    {
        "content": "<p>Sure, but my point is that the missing instance you suggest upthread is not the most general one</p>",
        "id": 227125221,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613861837
    },
    {
        "content": "<p>It's definitely better than no instance though</p>",
        "id": 227125235,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1613861857
    },
    {
        "content": "<p>I'll make the PR and we can continue the discussion there.</p>",
        "id": 227125242,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613861873
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6331\">#6331</a>. I managed to remove the assumption that the \"bottom\" semiring was a semiring, instead its now a monoid with a smul_comm_class instance and a mul_action.</p>",
        "id": 227128400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1613865506
    },
    {
        "content": "<p>This is all great: thank you for taking the time to solve this!</p>\n<p>I will now look at the file!</p>",
        "id": 227144503,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1613886222
    }
]