[
    {
        "content": "<p>We have in the library the lemma</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">reindex_apply</span> <span class=\"o\">(</span><span class=\"n\">eₘ</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">eₙ</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≃</span> <span class=\"n\">o</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">reindex</span> <span class=\"n\">eₘ</span> <span class=\"n\">eₙ</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">M.minor</span> <span class=\"n\">eₘ.symm</span> <span class=\"n\">eₙ.symm</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n</code></pre></div>\n<p>I am not sure I am convinced by the simp attribute (but I am not experienced at all with the linear algebra part of the library). Any feeling on this?</p>",
        "id": 250806263,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1629997579
    },
    {
        "content": "<p>The idea here was to avoid having to repeat every lemma about <code>minor</code> for <code>reindex</code></p>",
        "id": 250806528,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629997685
    },
    {
        "content": "<p>If the latter simplifies to the former then that isn't necessary</p>",
        "id": 250806685,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629997765
    },
    {
        "content": "<p>Same corner of the library: </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[simp]</span> <span class=\"kd\">lemma</span> <span class=\"n\">reindex_alg_equiv_apply</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">reindex_alg_equiv</span> <span class=\"n\">R</span> <span class=\"n\">e</span> <span class=\"n\">M</span> <span class=\"bp\">=</span> <span class=\"n\">reindex</span> <span class=\"n\">e</span> <span class=\"n\">e</span> <span class=\"n\">M</span> <span class=\"o\">:=</span>\n<span class=\"n\">rfl</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">reindex_alg_equiv_mul</span> <span class=\"o\">(</span><span class=\"n\">e</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≃</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">N</span> <span class=\"o\">:</span> <span class=\"n\">matrix</span> <span class=\"n\">m</span> <span class=\"n\">m</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">reindex_alg_equiv</span> <span class=\"n\">R</span> <span class=\"n\">e</span> <span class=\"o\">(</span><span class=\"n\">M</span> <span class=\"bp\">⬝</span> <span class=\"n\">N</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">reindex_alg_equiv</span> <span class=\"n\">R</span> <span class=\"n\">e</span> <span class=\"n\">M</span> <span class=\"bp\">⬝</span> <span class=\"n\">reindex_alg_equiv</span> <span class=\"n\">R</span> <span class=\"n\">e</span> <span class=\"n\">N</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">reindex_alg_equiv</span> <span class=\"n\">R</span> <span class=\"n\">e</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map_mul</span> <span class=\"n\">M</span> <span class=\"n\">N</span>\n</code></pre></div>\n<p>The first simp lemma ensures that the second one can never be used as a simp lemma. Should the second one be phrased in terms of minors to be usable by simp?</p>",
        "id": 250806841,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1629997821
    },
    {
        "content": "<p>The second one phrased in terms of minor already exists</p>",
        "id": 250806955,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629997889
    },
    {
        "content": "<p>And is used to define <code>reindex_alg_equiv</code> in the first place</p>",
        "id": 250806996,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629997908
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.minor_mul_equiv\">docs#matrix.minor_mul_equiv</a> is that lemma, and it's more general</p>",
        "id": 250807276,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629998026
    },
    {
        "content": "<p>Thanks for the pointer! Unfortunately, it is not accepted as a simp lemma (<code>invalid simplification lemma 'matrix.minor_mul_equiv'</code>). I'll work my way by hand, then, tweaking my simp set to make it work.</p>",
        "id": 250807668,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1629998177
    },
    {
        "content": "<p>I think the argument for having <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.reindex_alg_equiv_mul\">docs#matrix.reindex_alg_equiv_mul</a> was to make rewrites easier, not for simp</p>",
        "id": 250808123,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629998401
    },
    {
        "content": "<p>I think the argument for having <a href=\"https://leanprover-community.github.io/mathlib_docs/find/matrix.reindex_alg_equiv_mul\">docs#matrix.reindex_alg_equiv_mul</a> was to make rewrites easier, not for simp</p>",
        "id": 250809723,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629999061
    },
    {
        "content": "<p>I think you can just add a simp copy of the minor lemma for when e1 = e2 = e3?</p>",
        "id": 250809724,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629999061
    },
    {
        "content": "<p>Since right now it's invalid as e2 appears only on the RHS</p>",
        "id": 250812428,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1630000192
    }
]