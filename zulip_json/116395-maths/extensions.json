[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110294\">@Johannes Hölzl</span>  At <a href=\"https://github.com/leanprover/mathlib/blob/master/analysis/topology/continuity.lean#L841-L843\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/analysis/topology/continuity.lean#L841-L843\">https://github.com/leanprover/mathlib/blob/master/analysis/topology/continuity.lean#L841-L843</a> do we really need that <code>[inhabited γ]</code>? It forces lots of other inhabited assumptions that seem unnecessary from a mathematical point of view. If γ is not inhabited then there shouldn't be that many <code>f : α → γ</code> to care about</p>",
        "id": 129772133,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531770589
    },
    {
        "content": "<p>the inhabited is needed for <code>lim</code></p>",
        "id": 129772434,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531770911
    },
    {
        "content": "<p>because it takes a default value when the limit is not defined</p>",
        "id": 129772460,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531770928
    },
    {
        "content": "<p>I understand this</p>",
        "id": 129772463,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531770928
    },
    {
        "content": "<p>But one could hope for a definition not using <code>lim</code> then</p>",
        "id": 129772485,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531770950
    },
    {
        "content": "<p>I recall puzzling over this definition a while ago; I also don't particularly like this style of definition</p>",
        "id": 129772566,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531771035
    },
    {
        "content": "<p>it seems like we should already know that the limit is defined at this point</p>",
        "id": 129772584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531771061
    },
    {
        "content": "<p>I guess we need the assumption of <code>continuous_ext</code> to know the definition makes sense</p>",
        "id": 129772750,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531771239
    },
    {
        "content": "<blockquote>\n<p>It forces lots of other inhabited assumptions that seem unnecessary from a mathematical point of view. </p>\n</blockquote>\n<p>Do you have any particular examples?</p>",
        "id": 129772839,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531771327
    },
    {
        "content": "<p>Why? <code>ext de</code> is a function from <code>α → γ</code> to <code>β → γ</code>. Can't Lean be happy if both are uninhabited types and we don't write anything about the definition?</p>",
        "id": 129772871,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531771408
    },
    {
        "content": "<p>Examples are in my work in progress in the perfectoid project. I'm working on Hausdorff completions of uniform spaces.</p>",
        "id": 129772922,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531771445
    },
    {
        "content": "<p>i mean maybe there is a way to pick an inhabitant in your setting</p>",
        "id": 129772943,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531771495
    },
    {
        "content": "<p>The completion functor, which is left-adjoint to the inclusion of Hausdorff and complete uniform spaces into all uniform spaces, is constructed on homs by extension</p>",
        "id": 129772945,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531771497
    },
    {
        "content": "<p>If I assume the starting uniform space is inhabited then its completion is also inhabited, no problem. But it mean I keep assuming spaces are inhabited</p>",
        "id": 129772974,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531771550
    },
    {
        "content": "<p>No, I mean somehow argue the empty case so it's not needed</p>",
        "id": 129773022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531771590
    },
    {
        "content": "<p>If this is possible there, why isn't possible right in the definition of <code>dense_embedding.ext</code></p>",
        "id": 129773058,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531771644
    },
    {
        "content": "<p>(by the way, this name is confusion since it has nothing to do with extensionality)</p>",
        "id": 129773067,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531771663
    },
    {
        "content": "<p>Agreed. Do you have a suggestion?</p>",
        "id": 129773120,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531771710
    },
    {
        "content": "<p>about the name?</p>",
        "id": 129773129,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531771728
    },
    {
        "content": "<p>yes</p>",
        "id": 129773131,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531771732
    },
    {
        "content": "<p><code>dense_embedding.extension</code> maybe?</p>",
        "id": 129773136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531771746
    },
    {
        "content": "<p>I managed this definition:</p>\n<div class=\"codehilite\"><pre><span></span>def extend (de : dense_embedding e) (f : α → γ) (b : β) : γ :=\nhave nonempty γ, from\nlet ⟨_, ⟨_, a, _⟩⟩ := exists_mem_of_ne_empty\n  (mem_closure_iff.1 (de.dense b) _ is_open_univ trivial) in ⟨f a⟩,\n@lim _ (classical.inhabited_of_nonempty this) _ (map f (vmap e (nhds b)))\n</pre></div>",
        "id": 129773533,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531772363
    },
    {
        "content": "<p>Scary! But I don't mind being scared by the definition: can you prove the expected properties?</p>",
        "id": 129773551,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531772400
    },
    {
        "content": "<p>It's mostly just a proof getting stuck into the <code>inhabited γ</code> slot - it doesn't change any of the proofs</p>",
        "id": 129773631,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531772439
    },
    {
        "content": "<p>all the proofs immediately after the definition still work, I may have to hunt down other uses</p>",
        "id": 129773686,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1531772518
    },
    {
        "content": "<p>and also hunt down the inhabited assumptions</p>",
        "id": 129773914,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1531772769
    }
]