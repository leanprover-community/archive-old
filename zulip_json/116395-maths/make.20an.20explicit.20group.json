[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"kn\">inductive</span> <span class=\"n\">mu2</span>\n<span class=\"bp\">|</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">mu2</span>\n<span class=\"bp\">|</span> <span class=\"n\">m1</span> <span class=\"o\">:</span> <span class=\"n\">mu2</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mu2</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">mu2</span> <span class=\"bp\">→</span> <span class=\"n\">mu2</span> <span class=\"bp\">→</span> <span class=\"n\">mu2</span>\n<span class=\"bp\">|</span> <span class=\"n\">p1</span> <span class=\"n\">p1</span> <span class=\"o\">:=</span> <span class=\"n\">p1</span>\n<span class=\"bp\">|</span> <span class=\"n\">p1</span> <span class=\"n\">m1</span> <span class=\"o\">:=</span> <span class=\"n\">m1</span>\n<span class=\"bp\">|</span> <span class=\"n\">m1</span> <span class=\"n\">p1</span> <span class=\"o\">:=</span> <span class=\"n\">m1</span>\n<span class=\"bp\">|</span> <span class=\"n\">m1</span> <span class=\"n\">m1</span> <span class=\"o\">:=</span> <span class=\"n\">p1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">mu2</span> <span class=\"o\">:=</span> <span class=\"n\">p1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">mu2</span> <span class=\"bp\">→</span> <span class=\"n\">mu2</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">mu2</span> <span class=\"o\">:=</span> <span class=\"n\">dec_trivial</span> <span class=\"c1\">-- doesn&#39;t work yet</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mu2</span>\n</code></pre></div>\n\n\n<p>Is it easy to get this working automatically somehow?</p>",
        "id": 203890872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594762131
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">derive</span> <span class=\"n\">decidable_eq</span><span class=\"o\">]</span> <span class=\"kn\">inductive</span> <span class=\"n\">mu2</span>\n<span class=\"bp\">|</span> <span class=\"n\">p1</span> <span class=\"o\">:</span> <span class=\"n\">mu2</span>\n<span class=\"bp\">|</span> <span class=\"n\">m1</span> <span class=\"o\">:</span> <span class=\"n\">mu2</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">fintype</span> <span class=\"n\">mu2</span> <span class=\"o\">:=</span> <span class=\"bp\">⟨⟨</span><span class=\"o\">[</span><span class=\"n\">mu2</span><span class=\"bp\">.</span><span class=\"n\">p1</span><span class=\"o\">,</span> <span class=\"n\">mu2</span><span class=\"bp\">.</span><span class=\"n\">m1</span><span class=\"o\">],</span> <span class=\"k\">by</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"bp\">;</span> <span class=\"n\">simp</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">mu2</span>\n\n<span class=\"n\">def</span> <span class=\"n\">mul</span> <span class=\"o\">:</span> <span class=\"n\">mu2</span> <span class=\"bp\">→</span> <span class=\"n\">mu2</span> <span class=\"bp\">→</span> <span class=\"n\">mu2</span>\n<span class=\"bp\">|</span> <span class=\"n\">p1</span> <span class=\"n\">p1</span> <span class=\"o\">:=</span> <span class=\"n\">p1</span>\n<span class=\"bp\">|</span> <span class=\"n\">p1</span> <span class=\"n\">m1</span> <span class=\"o\">:=</span> <span class=\"n\">m1</span>\n<span class=\"bp\">|</span> <span class=\"n\">m1</span> <span class=\"n\">p1</span> <span class=\"o\">:=</span> <span class=\"n\">m1</span>\n<span class=\"bp\">|</span> <span class=\"n\">m1</span> <span class=\"n\">m1</span> <span class=\"o\">:=</span> <span class=\"n\">p1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">one</span> <span class=\"o\">:</span> <span class=\"n\">mu2</span> <span class=\"o\">:=</span> <span class=\"n\">p1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"n\">mu2</span> <span class=\"bp\">→</span> <span class=\"n\">mu2</span> <span class=\"o\">:=</span> <span class=\"n\">id</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">group</span> <span class=\"n\">mu2</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">refine_struct</span> <span class=\"o\">{</span> <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"n\">one</span><span class=\"o\">,</span> <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"n\">mul</span><span class=\"o\">,</span> <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"n\">inv</span> <span class=\"o\">}</span><span class=\"bp\">;</span> <span class=\"n\">exact</span> <span class=\"n\">dec_trivial</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">mu2</span>\n</code></pre></div>",
        "id": 203892639,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594763292
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 203894288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594764391
    },
    {
        "content": "<p>I did all of that myself apart from the fintype, which I also tried to <code>derive</code>. I don't understand why we have to <code>derive</code> decidable equality, whereas if we want an extensionality lemma we just <code>[ext]</code></p>",
        "id": 203894382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594764477
    },
    {
        "content": "<p>Isn't there a way to derive the fintype instance?</p>",
        "id": 203894466,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1594764523
    },
    {
        "content": "<p>Adding to that question, is there a list of all the derivable instances somewhere?</p>",
        "id": 203894674,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1594764687
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110038\">Kevin Buzzard</span> <a href=\"#narrow/stream/116395-maths/topic/make.20an.20explicit.20group/near/203894466\">said</a>:</p>\n<blockquote>\n<p>Isn't there a way to derive the fintype instance?</p>\n</blockquote>\n<p>You'd think so but afaik it isn't implemented.</p>",
        "id": 203895039,
        "sender_full_name": "Reid Barton",
        "timestamp": 1594764957
    }
]