[
    {
        "content": "<p>Should</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">monotone</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span><span class=\"o\">⦃</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">⦄,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">f</span> <span class=\"n\">b</span>\n</pre></div>\n\n\n<p>be a class? I need compositions of these guys (and then applying a functor to them)...</p>",
        "id": 127196629,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527498745
    },
    {
        "content": "<p>I wouldn't mind if the type class inference system helped me a bit (-;</p>",
        "id": 127196637,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527498788
    },
    {
        "content": "<p>Ooh, this is line 37 of <code>order/basic.lean</code></p>",
        "id": 127196644,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527498831
    },
    {
        "content": "<p>would type class inference even help? don't you just need a lemma that says the composition of two monotonically increasing functions is also monotonic?</p>",
        "id": 127196934,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527499284
    },
    {
        "content": "<p>That exists. But now I need to explicitly refer to it every time I use functoriality</p>",
        "id": 127197054,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527499500
    },
    {
        "content": "<p>I'dd rather just have that transparently dealt with by Lean</p>",
        "id": 127197061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527499517
    },
    {
        "content": "<p>ahhh. I'm surprised you would reach for type class inference in this case, it's not my first choice. I would try parameters in sections, auto params, and figuring out how to write a mini tactic or helper lemma as well</p>",
        "id": 127197325,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527499968
    },
    {
        "content": "<p>Ok, I don't really understand what you mean.</p>",
        "id": 127198037,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527501063
    },
    {
        "content": "<p>I have proved that the simplicial complex is a complex, up to 1 sorry: <a href=\"https://github.com/jcommelin/mathlib/blob/simplicial/algebraic_topology/simplicial_set.lean#L15-L22\" target=\"_blank\" title=\"https://github.com/jcommelin/mathlib/blob/simplicial/algebraic_topology/simplicial_set.lean#L15-L22\">https://github.com/jcommelin/mathlib/blob/simplicial/algebraic_topology/simplicial_set.lean#L15-L22</a></p>",
        "id": 127198050,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527501077
    },
    {
        "content": "<p>The only thing in that proof is pulling some identity through a functor</p>",
        "id": 127198057,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527501095
    },
    {
        "content": "<p>I have no idea how to do that.</p>",
        "id": 127198061,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527501101
    },
    {
        "content": "<p>See <a href=\"https://github.com/jcommelin/mathlib/blob/simplicial/algebraic_topology/simplex_category.lean#L80\" target=\"_blank\" title=\"https://github.com/jcommelin/mathlib/blob/simplicial/algebraic_topology/simplex_category.lean#L80\">https://github.com/jcommelin/mathlib/blob/simplicial/algebraic_topology/simplex_category.lean#L80</a> for the corresponding identity in the source category.</p>",
        "id": 127198116,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527501133
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">class</span> <span class=\"n\">simplicial_set</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">objs</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">maps</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">objs</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">objs</span> <span class=\"n\">m</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">comp</span> <span class=\"o\">{</span><span class=\"n\">l</span> <span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">l</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"bp\">→</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"o\">]}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">monotone</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"o\">(</span><span class=\"n\">maps</span> <span class=\"n\">hf</span><span class=\"o\">)</span> <span class=\"err\">∘</span> <span class=\"o\">(</span><span class=\"n\">maps</span> <span class=\"n\">hg</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">maps</span> <span class=\"o\">(</span><span class=\"n\">monotone_comp</span> <span class=\"n\">hf</span> <span class=\"n\">hg</span><span class=\"o\">)))</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">simplicial_set</span>\n<span class=\"n\">def</span> <span class=\"n\">δ</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">simplicial_set</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">:=</span>\n<span class=\"n\">maps</span> <span class=\"o\">(</span><span class=\"n\">simplex_category</span><span class=\"bp\">.</span><span class=\"n\">δ_monotone</span> <span class=\"n\">i</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">simplicial_identity₁</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">simplicial_set</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">δ</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"err\">∘</span> <span class=\"n\">δ</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">δ</span> <span class=\"n\">j</span> <span class=\"err\">∘</span> <span class=\"n\">δ</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">unfold</span> <span class=\"n\">δ</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">comp</span><span class=\"o\">,</span>\n<span class=\"n\">rw</span> <span class=\"n\">comp</span><span class=\"o\">,</span>\n<span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127202542,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527508486
    },
    {
        "content": "<p>How do I remove the final sorry in my file?</p>",
        "id": 127202543,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527508496
    },
    {
        "content": "<p>In <code>simplex_category.lean</code>, I have</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">simplicial_identity₁</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">n</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">δ</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"err\">∘</span> <span class=\"n\">δ</span> <span class=\"n\">i</span> <span class=\"bp\">=</span> <span class=\"n\">δ</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"err\">∘</span> <span class=\"n\">δ</span> <span class=\"n\">j</span> <span class=\"o\">:=</span> <span class=\"s2\">&quot;long proof&quot;</span>\n</pre></div>",
        "id": 127202612,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527508590
    },
    {
        "content": "<p>I just want to pull this through <code>maps</code>, but I have no clue at all how to do it.</p>",
        "id": 127202623,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527508618
    },
    {
        "content": "<p>I would need to get your files to try to help you</p>",
        "id": 127202700,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527508703
    },
    {
        "content": "<p>I linked them a few posts up</p>",
        "id": 127202716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527508726
    },
    {
        "content": "<p>But generic pointers are also welcome</p>",
        "id": 127202725,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527508750
    },
    {
        "content": "<p>Also, why does my state look like</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">simplicial_set</span><span class=\"o\">,</span>\n<span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n<span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"n\">fin</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span>\n<span class=\"err\">⊢</span> <span class=\"n\">maps</span> <span class=\"bp\">_</span> <span class=\"err\">∘</span> <span class=\"n\">maps</span> <span class=\"bp\">_</span> <span class=\"bp\">=</span> <span class=\"n\">maps</span> <span class=\"bp\">_</span> <span class=\"err\">∘</span> <span class=\"n\">maps</span> <span class=\"bp\">_</span>\n</pre></div>\n\n\n<p>after I <code>unfold δ</code>?</p>",
        "id": 127202927,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509154
    },
    {
        "content": "<p>Why the underscores?</p>",
        "id": 127202946,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509162
    },
    {
        "content": "<p>I expected something more useful, like <code>maps (simplex_category.δ_monotone i) ∘ maps (simplex_category ... etc</code></p>",
        "id": 127202977,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509217
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">simplicial_identity₁</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"n\">simplicial_set</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"n\">j</span> <span class=\"o\">:</span> <span class=\"o\">[</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">])</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">i</span> <span class=\"bp\">≤</span> <span class=\"n\">j</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">δ</span> <span class=\"n\">X</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">i</span> <span class=\"err\">∘</span> <span class=\"n\">δ</span> <span class=\"n\">j</span><span class=\"bp\">.</span><span class=\"n\">succ</span> <span class=\"bp\">=</span> <span class=\"n\">δ</span> <span class=\"n\">j</span> <span class=\"err\">∘</span> <span class=\"n\">δ</span> <span class=\"n\">i</span><span class=\"bp\">.</span><span class=\"n\">raise</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">finish</span> <span class=\"o\">[</span><span class=\"n\">δ</span><span class=\"o\">,</span> <span class=\"n\">comp</span><span class=\"o\">,</span> <span class=\"n\">simplex_category</span><span class=\"bp\">.</span><span class=\"n\">simplicial_identity₁</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 127203036,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527509327
    },
    {
        "content": "<p>Brilliant!</p>",
        "id": 127203158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509541
    },
    {
        "content": "<p>I need to understand <code>finish</code></p>",
        "id": 127203160,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509547
    },
    {
        "content": "<p>But this is awesome, thanks!</p>",
        "id": 127203163,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527509555
    },
    {
        "content": "<p>No! Don't try to understand it, it's magic!</p>",
        "id": 127203167,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527509576
    },
    {
        "content": "<blockquote>\n<p>Why the underscores?</p>\n</blockquote>\n<p>The only explicit arg in <code>maps</code> is <code>monotone f</code>, which is a proof. Lean hides proof arguments by default, but this makes it hard to understand these goals unless the <code>f</code> is explicit too</p>",
        "id": 127218334,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527535635
    },
    {
        "content": "<p>You can enable proof printing with <code>set_option pp.proofs true</code></p>",
        "id": 127218337,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527535654
    },
    {
        "content": "<p>Ok, thanks for the explanation!</p>",
        "id": 127218384,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527535755
    },
    {
        "content": "<p>Johan, those <code>_</code>s used to really confuse me. Everyone has told you all the right things but let me tell you the stupid version</p>",
        "id": 127222060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527543121
    },
    {
        "content": "<p>All proofs are the same</p>",
        "id": 127222097,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527543126
    },
    {
        "content": "<p>and are instantly forgotten</p>",
        "id": 127222100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527543129
    },
    {
        "content": "<p>so don't even get names</p>",
        "id": 127222101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527543132
    },
    {
        "content": "<p>and this is kind of good but kind of annoying</p>",
        "id": 127222104,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527543140
    },
    {
        "content": "<p>because if you have a subtype, so a value and then a proof, it might well just get displayed as &lt;a,_&gt;</p>",
        "id": 127222108,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527543165
    },
    {
        "content": "<p>and this is annoying because sometimes you want to change the goal to something defeq with show, so you cut and paste the output from the pretty printer and write \"show &lt;the goal&gt;\"</p>",
        "id": 127222119,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527543211
    },
    {
        "content": "<p>and it doesn't work</p>",
        "id": 127222120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527543213
    },
    {
        "content": "<p>it's not instantly forgotten</p>",
        "id": 127222121,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527543215
    },
    {
        "content": "<p>it's there, it's a term</p>",
        "id": 127222123,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527543220
    },
    {
        "content": "<p>because Lean can't reconstruct the _s</p>",
        "id": 127222125,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527543222
    },
    {
        "content": "<p>yes so Lean is only pretending it forgot</p>",
        "id": 127222126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527543231
    },
    {
        "content": "<p>it's just a big and ugly term</p>",
        "id": 127222128,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527543234
    },
    {
        "content": "<p>and if you set_option pp.proofs true</p>",
        "id": 127222173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527543246
    },
    {
        "content": "<p>lean can reconstruct the _</p>",
        "id": 127222175,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527543246
    },
    {
        "content": "<p>then you can see them all and cut and paste them all again</p>",
        "id": 127222181,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527543259
    },
    {
        "content": "<p>and it turns out sometimes they're really ugly and long</p>",
        "id": 127222184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527543265
    }
]