[
    {
        "content": "<p>Cocycles are subgroups of cochains; coboundaries are subgroups of cocycles. Cohomology groups are cocycles over coboundaries. At least, that's how it works in group cohomology, and maybe in topology too.</p>\n<p>I guess the cocycles will have to end up being a type at some point, because many arguments involve chasing cocycles and then proving that everything descends...sorry...lifts...to cohomology classes. (That still leaves a bad taste in my mouth). But the coboundaries are going to end up being a subtype of a subtype, which is kind of silly. In general we'll have a group <code>G</code> and then <code>Z B : set G</code> with <code>B \\subseteq Z</code>, but will end up using the subtype corresponding to <code>B</code> and then we'll have to make the subtype of <code>B</code> corresponding to <code>Z</code>. Is this a situation where I should just try something and see if it works? Have we already run into this issue <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> ? Am I fussing over nothing? I have a student working on group cohomology and this is about to hit us.</p>",
        "id": 167038419,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559340289
    },
    {
        "content": "<p>In the Lean 2 HoTT library I've done homology (in this case of modules over a ring - obviously at some point we want to do it generally in an abelian category): <a href=\"https://github.com/cmu-phil/Spectral/blob/master/algebra/submodule.hlean#L376\" target=\"_blank\" title=\"https://github.com/cmu-phil/Spectral/blob/master/algebra/submodule.hlean#L376\">https://github.com/cmu-phil/Spectral/blob/master/algebra/submodule.hlean#L376</a><br>\n(note: <code>property</code> means <code>set</code>)</p>\n<p>You will indeed need lemma's/constructions, like if <code>Z</code> and <code>B</code> are both subgroups of <code>G</code> and <code>B \\subseteq Z</code> then <code>B</code> is a subgroup of <code>Z</code>. Of course, the last <code>B</code> is not actually <code>B</code> but something like <code>(subtype.val \\-1' B : set Z)</code>. But everything works fine.</p>\n<p><span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span>  might tell you a different story, which is also worth considering. The idea is that if you do a lot of group theory in a <em>single</em> group <code>G</code>, you should be really doing subgroup theory. That means that for every definition and lemma, when a mathematician would write \"Group\", you would write \"subgroup of <code>G</code>\". And then you try to reason as much as you can using sets (and subsets) instead of subtypes. Jeremy can probably tell this story better.</p>",
        "id": 167040355,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1559342119
    },
    {
        "content": "<p>I think this always the same story, explained in <a href=\"https://hal.inria.fr/hal-00825074v1/document\" target=\"_blank\" title=\"https://hal.inria.fr/hal-00825074v1/document\">https://hal.inria.fr/hal-00825074v1/document</a> that was already quoted countless times on this chat</p>",
        "id": 167041427,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1559343282
    },
    {
        "content": "<p>Can we do most of the subgroup theory using injective group homs instead? Sounds a bit like the localisation issue.</p>",
        "id": 167042858,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559344921
    },
    {
        "content": "<p>If you want to do homological algebra in an arbitrary abelian category then you are forced to do what Chris suggests anyways</p>",
        "id": 167057154,
        "sender_full_name": "Reid Barton",
        "timestamp": 1559368633
    },
    {
        "content": "<p>I was just conveying Georges' story, but I spent a year with Georges formalizing finite group theory, and I think he got that part right. The point is that finite group theory really is finite subgroup theory. There are zillions of constructions of subgroups-- intersections, subgroups generated by elements, conjugates, p-cores, the Frattini subgroup, products, semidirect products, etc., etc. The usual style of argumentation involves  elementhood and inclusions between them subgroup. It is fiddly and combinatorial, and it would be a mess to carry them out if each construction took you to a different type.</p>",
        "id": 167071806,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1559394102
    },
    {
        "content": "<p>I need this for a student project and I want to get it right. Seems to me that Assia is talking subgroups but Chris is suggesting something else. Chris' solution looks mathematically meaningful to me; an injection is canonically isomorphic to an inclusion and it's good to be as flexible as we can</p>",
        "id": 167075757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559401137
    },
    {
        "content": "<p>The downside of my approach is that the lattice of subgroups, or any other structure on the subgroups moves up a universe. And then there's the question of whether we should demand a computable partial inverse i.e. an equivalent of <code>subtype.mk</code>.</p>",
        "id": 167075917,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1559401400
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110172\">@Assia Mahboubi</span> 's story is about finite groups. We are thinking about typically infinite abelian groups. This might change things. Furthermore, in her situation one can imagine wanting to think about lots of subgroups of a group. We have cochains, cocycles, coboundaries, and that's it. </p>\n<p>Maybe this is a situation where I should just try something and see how it works out.</p>",
        "id": 167123575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559484053
    },
    {
        "content": "<p>Thinking about this a bit more, I think that perhaps we just need a general theory of cokernels of morphisms in our various concrete abelian categories. And such a theory would have to be rewritten when we bundle these morphisms. <span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> is there any progress on bundling?</p>",
        "id": 167266035,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1559633925
    }
]