[
    {
        "content": "<p>Hi, I have a pleb question about how Lean infers whether recursion is well-founded or not.<br>\nI'm writing a recursive function whose first two arguments are of type <code>fin m</code> and <code>fin n</code>,  and my algorithm:<br>\n 1) always decreases the size of my <code>fin n</code><br>\n 2) sometimes decreases the size of my <code>fin m</code><br>\nI would think that Lean should be able to work out that my recursion is well-founded from the first fact alone, but it does not seem able.<br>\nHowever, when I simply change the order that my arguments appear from <code>fin m -&gt; fin n -&gt; ...</code> to <code>fin n -&gt; fin m -&gt; ...</code> and nothing else (nontrivial), suddenly Lean recognises well-foundedness!</p>\n<p>It seems that Lean is only trying to show well-foundedness from my first argument and can't work out that there should be well-foundedness on the lexicographic order of my <code>fin m</code> and <code>fin n</code>, or that just my <code>fin n</code> alone should suffice. Everything's sort of \"doing what I want it to\" except that I have to write the arguments to my function in an unconventional way. How can I tell Lean to just look for well-foundedness on my second argument (the <code>fin n</code>), or on the lexicographic pair of <code>fin m</code> and <code>fin n</code>, and not just purely on my <code>fin m</code>? Thanks!</p>",
        "id": 133941390,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1536917389
    },
    {
        "content": "<p>MWE</p>",
        "id": 133941463,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536917475
    },
    {
        "content": "<p>By default Lean uses lexicographic ordering when trying to prove recursive functions are well-defined, so definitely the input order matters. The notes at <a href=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/well_founded_recursion.md\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/master/docs/extras/well_founded_recursion.md\">https://github.com/leanprover/mathlib/blob/master/docs/extras/well_founded_recursion.md</a> probably tell you all you need to know</p>",
        "id": 133941803,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536918002
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <br>\nhere's an MWE, compare the pair:</p>\n<div class=\"codehilite\"><pre><span></span>def mwe_aux {m n : ℕ} : Π (i : fin m) (j : fin n), bool\n| ⟨0, h₁⟩ ⟨k₂, h₂⟩ := ff\n| ⟨k₁+1, h₁⟩ ⟨0, h₂⟩ := ff\n| ⟨k₁+1, h₁⟩ ⟨k₂+1, h₂⟩ :=\nbegin\n    apply mwe_aux,\n    from if k₂%2 = 0 then ⟨k₁, nat.lt_of_succ_lt h₁⟩ else ⟨k₁+1, h₁⟩,\n    from ⟨k₂, nat.lt_of_succ_lt h₂⟩\nend\n\ndef mwe_aux2 {m n : ℕ} : Π (j : fin n) (i : fin m), bool\n| ⟨k₂, h₂⟩ ⟨0, h₁⟩ := ff\n| ⟨0, h₂⟩ ⟨k₁+1, h₁⟩ := ff\n| ⟨k₂+1, h₂⟩ ⟨k₁+1, h₁⟩ :=\nbegin\n    apply mwe_aux2,\n    from ⟨k₂, nat.lt_of_succ_lt h₂⟩,\n    from if k₂%2 = 0 then ⟨k₁, nat.lt_of_succ_lt h₁⟩ else ⟨k₁+1, h₁⟩,\nend\n</pre></div>",
        "id": 133941855,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1536918065
    },
    {
        "content": "<p>the linked notes explain how to change the well-order on your input.</p>",
        "id": 133941878,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1536918117
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span>  ah oops I didn't see that before I responded to Kenny, thanks, I'll have a look!</p>",
        "id": 133941927,
        "sender_full_name": "Jack Crawford",
        "timestamp": 1536918163
    },
    {
        "content": "<p>well I mean, what are you trying to do, instead of MWE of the error</p>",
        "id": 133941991,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1536918265
    }
]