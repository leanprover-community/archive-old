[
    {
        "content": "<p>Asked by <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span> on <a href=\"https://github.com/leanprover-community/mathlib/issues/3991\">#3991</a>, <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> or <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> or <span class=\"user-mention\" data-user-id=\"268315\">@Anatole Dedecker</span> will know: </p>\n<blockquote>\n<p>Do we have a name for the following property?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">is_interval</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"err\">∈</span> <span class=\"n\">s</span><span class=\"o\">)</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">&lt;</span> <span class=\"n\">z</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"bp\">&lt;</span> <span class=\"n\">y</span> <span class=\"bp\">→</span> <span class=\"n\">z</span> <span class=\"err\">∈</span> <span class=\"n\">s</span>\n</code></pre></div>\n\n\n<p>I'm not sure about the name <code>is_connected</code> might be another potential name, but that sounds very topological. It is at least the property shared by all intervals.</p>\n</blockquote>",
        "id": 208608385,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598904195
    },
    {
        "content": "<p><code>is_preconnected</code> doesn't require nonemptiness.</p>",
        "id": 208608914,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598904498
    },
    {
        "content": "<p>But it is of course not stated in the way you give it.</p>",
        "id": 208608945,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598904520
    },
    {
        "content": "<p>So we would need an <code>iff</code> lemma to connect it to the formula you want</p>",
        "id": 208608971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598904537
    },
    {
        "content": "<p>Ah -- and linked to from <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_preconnected_interval\">docs#is_preconnected_interval</a> there is <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.ord_connected\">docs#set.ord_connected</a>, which perhaps is better</p>",
        "id": 208609218,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598904680
    },
    {
        "content": "<p>I was really confused because I started to look for this and could only find <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_order_connected.\">docs#is_order_connected.</a> I almost had the right name...</p>",
        "id": 208609352,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598904760
    },
    {
        "content": "<p>Ah <code>ord_connected</code> is basically the same as what I wrote. I think that would be a good condition</p>",
        "id": 208609361,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598904771
    },
    {
        "content": "<p>oh I'm too slow</p>",
        "id": 208609421,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598904799
    },
    {
        "content": "<p>Yep, it's perfect.</p>",
        "id": 208609422,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598904799
    },
    {
        "content": "<p>There doesn't seem to exist the theorem Floris wrote?  <code>ord_connected</code> if and only if one of the 8 types of intervals.</p>",
        "id": 208609557,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598904858
    },
    {
        "content": "<p>9 I guess, counting the nonexistent <code>Iii</code>.</p>",
        "id": 208609603,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598904886
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110031\">Patrick Massot</span> <a href=\"#narrow/stream/116395-maths/topic/is_interval/near/208609352\">said</a>:</p>\n<blockquote>\n<p>I was really confused because I started to look for this and could only find <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_order_connected.\">docs#is_order_connected.</a> I almost had the right name...</p>\n</blockquote>\n<p>Same here I knew it existed but I didn't remember the name</p>",
        "id": 208609608,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1598904888
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/is_interval/near/208609557\">said</a>:</p>\n<blockquote>\n<p>There doesn't seem to exist the theorem Floris wrote?  <code>ord_connected</code> if and only if one of the 8 types of intervals.</p>\n</blockquote>\n<p>I've seen this lemma already I think</p>",
        "id": 208609680,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1598904926
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"260507\">Heather Macbeth</span> <a href=\"#narrow/stream/116395-maths/topic/is_interval/near/208609557\">said</a>:</p>\n<blockquote>\n<p>There doesn't seem to exist the theorem Floris wrote?  <code>ord_connected</code> if and only if one of the 8 types of intervals.</p>\n</blockquote>\n<p>But there are proofs that the 9 intervals (the 9th is called <code>univ</code> :) ) are <code>ord_connected</code>, which is the only direction we need for your application, right?</p>",
        "id": 208610092,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598905124
    },
    {
        "content": "<p>That's right!  But classification theorems are nice, even the trivial ones :)</p>",
        "id": 208610146,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598905158
    },
    {
        "content": "<p>Agreed. but it's not true in an arbitrary linear order, right? Maybe for a conditionally complete linear order or something?</p>",
        "id": 208610352,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1598905251
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/ordered.html#is_preconnected.mem_intervals\">https://leanprover-community.github.io/mathlib_docs/topology/algebra/ordered.html#is_preconnected.mem_intervals</a></p>",
        "id": 208610392,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1598905278
    },
    {
        "content": "<p>And <a href=\"https://leanprover-community.github.io/mathlib_docs/topology/algebra/ordered.html#is_preconnected_iff_ord_connected\">https://leanprover-community.github.io/mathlib_docs/topology/algebra/ordered.html#is_preconnected_iff_ord_connected</a></p>",
        "id": 208610422,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1598905298
    },
    {
        "content": "<p>But I haven't looked precisely, there might be some subtle difference</p>",
        "id": 208610537,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1598905368
    },
    {
        "content": "<p>Nice! We have Yury to thank it seems, <a href=\"https://github.com/leanprover-community/mathlib/issues/2943\">#2943</a></p>",
        "id": 208610734,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598905468
    },
    {
        "content": "<p>This is a topological result, not purely about order relation.</p>",
        "id": 208610937,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598905586
    },
    {
        "content": "<p>But the general claim is probably wrong.</p>",
        "id": 208610948,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598905597
    },
    {
        "content": "<p>I know I asked Yury to prove this lemma because it was on the undergrad todo list.</p>",
        "id": 208610983,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598905617
    },
    {
        "content": "<p>Yes, I guess in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>∪</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(0,1)\\cup (2,3)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∪</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span>, the set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(2,3)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mclose\">)</span></span></span></span> is not an interval</p>",
        "id": 208611085,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598905682
    },
    {
        "content": "<p>Sorry, I don't understand this message.</p>",
        "id": 208611432,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598905875
    },
    {
        "content": "<p>Did I make a mistake in my counterexample?  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">]</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">[</mo><mo>∪</mo><mo stretchy=\"false\">]</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo stretchy=\"false\">[</mo></mrow><annotation encoding=\"application/x-tex\">]0,1[\\cup ]2, 3[</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mclose\">]</span><span class=\"mord\">0</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mopen\">[</span><span class=\"mord\">∪</span><span class=\"mclose\">]</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mopen\">[</span></span></span></span> in French notation.</p>",
        "id": 208611678,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598906009
    },
    {
        "content": "<p>I don't understand the claim, but I should go sleeping (I also haven't forget that I initiated a discussion about fancy composition and didn't find time to come back to it at a time when I can think seriously).</p>",
        "id": 208611818,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598906094
    },
    {
        "content": "<p>I claimed that if the ordered space is the union of <code>Ioo 0 1</code> and <code>Ioo 2 3</code> (taken from the real numbers), and the set <code>s</code> is <code>Ioo 2 3</code>, then <code>s</code> satisfies <code>ord_connected</code> but is not an interval.</p>",
        "id": 208611948,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598906172
    },
    {
        "content": "<p>But operating on low sleep here too :)</p>",
        "id": 208611988,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598906208
    },
    {
        "content": "<p>as in it isn't Ioo or a friend thereof?</p>",
        "id": 208612102,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598906279
    },
    {
        "content": "<p>Oh, that's sneaky.</p>",
        "id": 208612136,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598906283
    },
    {
        "content": "<p>No, it's not Ioo because 2 and 3 don't exist there.</p>",
        "id": 208612166,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598906297
    },
    {
        "content": "<p>and the point is that it ins't an Ioi either</p>",
        "id": 208612188,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1598906314
    },
    {
        "content": "<p>I also had to stare at my screen for 30 seconds to see that.</p>",
        "id": 208612208,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598906333
    },
    {
        "content": "<p>Yes, it's not Ioi either, because of the other piece.</p>",
        "id": 208612227,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598906350
    },
    {
        "content": "<p>And now I'll go and meditate this in my bed.</p>",
        "id": 208612363,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598906415
    },
    {
        "content": "<p>Kids go back to school tomorrow, it's time to resume having a structured life.</p>",
        "id": 208612422,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598906467
    },
    {
        "content": "<p>That's a clever counterexample</p>",
        "id": 208612807,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1598906711
    },
    {
        "content": "<p>in fact, I think it fails in every ordered field other than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span></p>",
        "id": 208614377,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598907589
    },
    {
        "content": "<p>How about <code>is_convex</code>?</p>",
        "id": 208620348,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598911020
    },
    {
        "content": "<p>(for a name)</p>",
        "id": 208620502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598911103
    },
    {
        "content": "<p>or if that's too overloaded, perhaps <code>order_convex</code></p>",
        "id": 208621690,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598911938
    },
    {
        "content": "<p>But there already is a name, right? <a href=\"https://leanprover-community.github.io/mathlib_docs/find/set.ord_connected\">docs#set.ord_connected</a></p>",
        "id": 208625149,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598914171
    },
    {
        "content": "<p>Yes but it's too similar to <code>is_order_connected</code>, as Patrick and I found.</p>",
        "id": 208625266,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598914240
    },
    {
        "content": "<p>I see.  Personally I think \"convex\" should be reserved for objects with addition, though.</p>",
        "id": 208625519,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598914447
    },
    {
        "content": "<p>What about probability measures? They form a convex set <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>",
        "id": 208625681,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598914562
    },
    {
        "content": "<p>oh right, and the other problem with the name is something <code>ord_connected</code> doesn't have to be connected in the order topology</p>",
        "id": 208625717,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598914587
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/is_interval/near/208625681\">said</a>:</p>\n<blockquote>\n<p>What about probability measures? They form a convex set <span aria-label=\"grinning face with smiling eyes\" class=\"emoji emoji-1f601\" role=\"img\" title=\"grinning face with smiling eyes\">:grinning_face_with_smiling_eyes:</span></p>\n</blockquote>\n<p>Well, or affine spaces.</p>",
        "id": 208625723,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1598914598
    }
]