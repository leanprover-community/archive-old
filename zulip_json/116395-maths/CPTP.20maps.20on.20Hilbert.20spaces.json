[
    {
        "content": "<p>Hi, I'm trying to describe the structure of CPTP maps on Hilbert spaces, but I'm having trouble figuring out how the \"[]\" and \"extends\" notation differ, for example I have</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.inner_product_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.von_neumann_algebra.basic</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">hilbert</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">ℂ</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"kd\">extends</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">complete_space</span> <span class=\"n\">H</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">cptp_map</span> <span class=\"o\">{</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"n\">von_neumann_algebra</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">hilbert</span> <span class=\"n\">H</span><span class=\"o\">]</span>\n</code></pre></div>\n<p>But then it gives me the error</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">synthesize</span> <span class=\"n\">type</span> <span class=\"kd\">class</span> <span class=\"kd\">instance</span> <span class=\"n\">for</span>\n<span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span>\n<span class=\"bp\">⊢</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">H</span>\n</code></pre></div>\n<p>Which should trivially be resolved since <code>hilbert</code> extends inner_product_space</p>",
        "id": 289323516,
        "sender_full_name": "Magalame",
        "timestamp": 1657632713
    },
    {
        "content": "<p>Since <code>von_neumann_algebra</code> needs <code>inner_product_space</code>, you should put <code>[hilbert H]</code> before <code>(T: von_neumann_algebra H)</code>.</p>",
        "id": 289324583,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657633127
    },
    {
        "content": "<p>Also, I think we've decided <em>not</em> to define the class of Hilbert spaces, but instead use <code>[inner_product_space ℂ H} [complete_space H]</code> everywhere.</p>",
        "id": 289324812,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1657633222
    },
    {
        "content": "<p>Also I think what you've written provides two separate module structures</p>",
        "id": 289324998,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657633318
    },
    {
        "content": "<p>Because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/inner_product_space\">docs#inner_product_space</a> extends <code>module</code> and <code>add_comm_monoid</code></p>",
        "id": 289325119,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657633355
    },
    {
        "content": "<p>thank you! That makes sense, so eventually I went with structure along the lines of </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">finite_dim_hilbert</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">complete_space</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_finite</span><span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"n\">finite_dimensional</span>  <span class=\"n\">ℂ</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n\n<span class=\"kd\">class</span> <span class=\"n\">cptp_map</span> <span class=\"o\">{</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">finite_dim_hilbert</span> <span class=\"n\">H</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">T</span><span class=\"o\">:</span> <span class=\"n\">von_neumann_algebra</span> <span class=\"n\">H</span> <span class=\"o\">)</span>\n</code></pre></div>",
        "id": 289336636,
        "sender_full_name": "Magalame",
        "timestamp": 1657637854
    },
    {
        "content": "<p>I'm not working on a something that will be merged to mathlib so I'd prefer not having to write <code>[inner_product_space ℂ H} [complete_space H]</code> everywhere if I can avoid it!</p>",
        "id": 289336903,
        "sender_full_name": "Magalame",
        "timestamp": 1657637952
    },
    {
        "content": "<p>I think it should be this instead:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">class</span> <span class=\"n\">finite_dim_hilbert</span> <span class=\"o\">(</span><span class=\"n\">H</span><span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"kd\">extends</span> <span class=\"n\">inner_product_space</span> <span class=\"n\">ℂ</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">complete_space</span> <span class=\"n\">H</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_finite</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">ℂ</span> <span class=\"n\">H</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>What you wrote meant that <code>to_finite</code> is an arbitrary <code>Prop</code>, whose default value is <code>finite_dimensional ℂ H</code>.</p>",
        "id": 289338322,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1657638467
    },
    {
        "content": "<p>You'll want to add <code>attribute [instance] finite_dim_hilbert.to_finite</code> after that</p>",
        "id": 289344214,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1657640705
    },
    {
        "content": "<p>Ooh  I see, this line allows elements requiring [finite_dimensional K V] to see the field inside. Is there an intuitive reason why <code>finite_dimensional</code> is not a class? Naively it seems like it would simplify its use?</p>",
        "id": 290693619,
        "sender_full_name": "Magalame",
        "timestamp": 1658687551
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/finite_dimensional\">docs#finite_dimensional</a> is a reducible definition that unfolds to <code>module.finite</code> which is a class, so it's effectively a class too. You can put it in <code>[]</code> as an argument and it will get inferred.</p>",
        "id": 290693789,
        "sender_full_name": "Junyan Xu",
        "timestamp": 1658687857
    }
]