[
    {
        "content": "<p>Does this have a name. It came up because I conjecture it makes proving things about matrix minors easier. I can use it to define minors of the identity matrix (with extra zeros), and there's an equivalence of categories with matrices of this form I think.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">structure</span> <span class=\"n\">inj_pfun</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">to_fun</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv_fun</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">option</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">inv</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">),</span> <span class=\"n\">b</span> <span class=\"err\">∈</span> <span class=\"n\">to_fun</span> <span class=\"n\">a</span> <span class=\"bp\">↔</span> <span class=\"n\">a</span> <span class=\"err\">∈</span> <span class=\"n\">inv_fun</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 169577429,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562168524
    },
    {
        "content": "<p>I would call it a partial equiv</p>",
        "id": 169577509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562168598
    },
    {
        "content": "<p>It's a <code>semilattice_inf_bot</code> with this order I believe. And then I have supremums on disjoint ones, which correspond to adding matrices.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">instance</span> <span class=\"o\">:</span> <span class=\"n\">has_le</span> <span class=\"o\">(</span><span class=\"n\">inj_pfun</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">is_some</span> <span class=\"bp\">→</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">g</span> <span class=\"n\">a</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 169578113,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562169088
    },
    {
        "content": "<p>I guess one way you could write that is <code>\\all a b, b \\in f a -&gt; b \\in g a</code></p>",
        "id": 169578273,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562169227
    },
    {
        "content": "<p>Nice.</p>",
        "id": 169578329,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562169246
    },
    {
        "content": "<p>might be nice to have a <code>has_subset</code> for option to say this</p>",
        "id": 169578342,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562169267
    },
    {
        "content": "<p>It could be a has_le but that's more likely to conflict with domain-specific orders</p>",
        "id": 169578360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562169300
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span> What are you working on? Does it have anything to do with eigenvectors? I am working on a proof of the spectral theorem (stating that every normal linear operator/matrix is diagonalizable). Is there any overlap with what you are doing?</p>",
        "id": 169578400,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1562169334
    },
    {
        "content": "<p>There's no overlap.</p>",
        "id": 169578419,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562169355
    },
    {
        "content": "<p>Ok, very good.</p>",
        "id": 169578478,
        "sender_full_name": "Alexander Bentkamp",
        "timestamp": 1562169376
    },
    {
        "content": "<p>Out of interest, could <code>pequiv</code> be done with an arbitrary monad, and not just <code>option</code> (do you still get composition). Do all <code>monads</code> have <code>mem</code>?</p>",
        "id": 169579489,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562170178
    },
    {
        "content": "<p>You can define a mem via <code>a = pure b</code> on any applicative, but that doesn't necessarily make sense in a given monad</p>",
        "id": 169579787,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562170403
    },
    {
        "content": "<p>How about this?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">mem</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">bind</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">β</span><span class=\"o\">),</span>\n    <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">mem</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">mem</span> <span class=\"n\">b</span> <span class=\"o\">(</span><span class=\"n\">bind</span> <span class=\"n\">x</span> <span class=\"n\">f</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 169580980,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562171281
    },
    {
        "content": "<p>interesting</p>",
        "id": 169581079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562171349
    },
    {
        "content": "<p>or this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">mem</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"bp\">→</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">monad</span> <span class=\"n\">m</span><span class=\"o\">]</span> <span class=\"o\">:</span> <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">},</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">m</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">pure</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">pure</span> <span class=\"n\">a</span><span class=\"o\">)</span>\n<span class=\"bp\">|</span> <span class=\"n\">join</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">α</span><span class=\"o\">)),</span> <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"n\">mem</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"bp\">→</span>\n  <span class=\"n\">mem</span> <span class=\"n\">a</span> <span class=\"o\">(</span><span class=\"n\">monad</span><span class=\"bp\">.</span><span class=\"n\">join</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 169581214,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562171423
    },
    {
        "content": "<p>I think they're the same.</p>",
        "id": 169581248,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562171437
    },
    {
        "content": "<p>clearly it's definable in any monad, and it's correct for <code>option</code>, <code>roption</code>, <code>list</code>, <code>multiset</code>, <code>computation</code>...</p>",
        "id": 169581250,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562171441
    },
    {
        "content": "<p>The pure/join version doesn't work for polymorphic monads</p>",
        "id": 169581286,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562171472
    },
    {
        "content": "<p>Do you mean universe polymorphic?</p>",
        "id": 169581373,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562171542
    },
    {
        "content": "<p>yes</p>",
        "id": 169581379,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562171546
    },
    {
        "content": "<p><code>Type u -&gt; Type v</code> monads</p>",
        "id": 169581391,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562171555
    },
    {
        "content": "<p>is it even well-founded</p>",
        "id": 169581401,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562171576
    },
    {
        "content": "<p>of course it is, it's an inductive</p>",
        "id": 169581412,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562171588
    },
    {
        "content": "<p>I thought some inductives are not permissible</p>",
        "id": 169581421,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562171609
    },
    {
        "content": "<p>But I think there may be monads where the mem should not be well founded</p>",
        "id": 169581422,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562171610
    },
    {
        "content": "<p>I think it's more appropriate to say that some monads just have a mem relation, and the mem relation should satisfy <code>a \\in pure b &lt;-&gt; a = b</code> and <code>a \\in bind b f &lt;-&gt; \\ex b, a \\in f b</code></p>",
        "id": 169581512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562171686
    },
    {
        "content": "<p>so that you get some class <code>monad_mem</code></p>",
        "id": 169581543,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562171711
    },
    {
        "content": "<p>By the way, this is one component of a QPF or BNF</p>",
        "id": 169581558,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562171726
    },
    {
        "content": "<p>is every inductive to Prop permissible? even if the target is on the wrong side of the arrow in an argument?</p>",
        "id": 169581708,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562171831
    },
    {
        "content": "<p>With BNFs it's usually defined as a natural transformation <code>F =&gt; set</code> where <code>F : Type -&gt; Type</code> is the monad and <code>set : Type -&gt; Type</code> is the powerset functor</p>",
        "id": 169581715,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562171834
    },
    {
        "content": "<blockquote>\n<p>is every inductive to Prop permissible? even if the target is on the wrong side of the arrow in an argument?</p>\n</blockquote>\n<p>No</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">contradiction</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"bp\">→</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"o\">{</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span><span class=\"o\">},</span> <span class=\"o\">(</span><span class=\"n\">contradiction</span> <span class=\"n\">p</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">contradiction</span> <span class=\"n\">p</span>\n</pre></div>",
        "id": 169581834,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562171932
    },
    {
        "content": "<p>that doesn't typecheck, maybe you mean</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">inductive</span> <span class=\"n\">contradiction</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span>\n<span class=\"bp\">|</span> <span class=\"n\">mk</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">contradiction</span> <span class=\"bp\">→</span> <span class=\"n\">false</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">contradiction</span>\n</pre></div>",
        "id": 169582004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562172064
    },
    {
        "content": "<p>I could do it with <code>roption</code>. Then <code>inf</code> is computable. That would be kind of annoying for matrices though.</p>",
        "id": 169584166,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562173631
    },
    {
        "content": "<p>I'm not quite clear on how this construction helps with matrices</p>",
        "id": 169584257,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562173691
    },
    {
        "content": "<p>I'm doing a bunch of stuff that involves minors of matrices. I reckon it's easiest to handle this by writing minors as multiplying by some minor of the identity matrix. I need to prove a load of stuff about minors of the identity matrix, I have to prove that under some circumstances you get zero, sometimes you get a single entry of one, sometimes you get the identity matrix. I have to add them at some point as well, if you partition the columns of a  matrix <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi></mrow><annotation encoding=\"application/x-tex\">M</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span></span></span></span> into two sets <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>M</mi><mi>x</mi><mo>=</mo><msub><mi>M</mi><mi>A</mi></msub><msub><mi>x</mi><mi>A</mi></msub><mo>+</mo><msub><mi>M</mi><mi>B</mi></msub><msub><mi>x</mi><mi>B</mi></msub></mrow><annotation encoding=\"application/x-tex\">Mx = M_Ax_A + M_Bx_B</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"mord mathit\">x</span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mbin\">+</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.10903em;\">M</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05017em;\">B</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05017em;\">B</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> (because <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>I</mi><mi>A</mi></msub><msubsup><mi>I</mi><mi>A</mi><mi>T</mi></msubsup><mo>+</mo><msub><mi>I</mi><mi>B</mi></msub><msubsup><mi>I</mi><mi>B</mi><mi>T</mi></msubsup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">I_AI_A^T + I_BI_B^T = 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8413309999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.1166619999999998em;vertical-align:-0.275331em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-2.424669em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.275331em;\"></span></span></span></span></span><span class=\"mbin\">+</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05017em;\">B</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-2.424669em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05017em;\">B</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.275331em;\"></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">1</span></span></span></span>). I think the easiest way to handle this is to use these pequivs to express the closure under multiplication of the minors of the identity matrix.</p>",
        "id": 169598772,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562184921
    },
    {
        "content": "<p>Isn't the closure condition for minors of the identity just <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>I</mi><mi>A</mi></msub><msub><mi>I</mi><mi>B</mi></msub><mo>=</mo><msub><mi>I</mi><mrow><mi>A</mi><mo>∩</mo><mi>B</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">I_AI_B=I_{A\\cap B}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05017em;\">B</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\">A</span><span class=\"mbin mtight\">∩</span><span class=\"mord mathit mtight\" style=\"margin-right:0.05017em;\">B</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span>?</p>",
        "id": 169598925,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562185066
    },
    {
        "content": "<p>That doesn't type check. You need to multiply by the transpose. But then you get rows of zeros, so you're no longer dealing with minors of the identity.</p>",
        "id": 169599068,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562185197
    },
    {
        "content": "<p>rows and columns</p>",
        "id": 169599126,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562185214
    },
    {
        "content": "<p>I'm using the current Lean definition of minor, which includes reorderings by the way.</p>",
        "id": 169599447,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562185529
    },
    {
        "content": "<p>I was making the guess that <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>I</mi><mi>A</mi></msub></mrow><annotation encoding=\"application/x-tex\">I_A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> is a matrix on <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>α</mi><mo>×</mo><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha\\times\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.58333em;\"></span><span class=\"strut bottom\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.0037em;\">α</span><span class=\"mbin\">×</span><span class=\"mord mathit\" style=\"margin-right:0.0037em;\">α</span></span></span></span> which is only 1 at <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>i</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(i,i)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord mathit\">i</span><span class=\"mpunct\">,</span><span class=\"mord mathit\">i</span><span class=\"mclose\">)</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>i</mi><mo>∈</mo><mi>A</mi><mo>⊆</mo><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">i\\in A\\subseteq \\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.8193em;vertical-align:-0.13597em;\"></span><span class=\"base\"><span class=\"mord mathit\">i</span><span class=\"mrel\">∈</span><span class=\"mord mathit\">A</span><span class=\"mrel\">⊆</span><span class=\"mord mathit\" style=\"margin-right:0.0037em;\">α</span></span></span></span> and 0 elsewhere</p>",
        "id": 169599680,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562185763
    },
    {
        "content": "<p><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>I</mi><mi>A</mi></msub></mrow><annotation encoding=\"application/x-tex\">I_A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> is the matrix containing the columns of <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>I</mi></mrow><annotation encoding=\"application/x-tex\">I</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span></span></span></span> whose indices are in the set <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span></span></span></span>.</p>",
        "id": 169599897,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562185940
    },
    {
        "content": "<p>so it's a rectangular matrix? Is A a type or a set?</p>",
        "id": 169599948,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562186004
    },
    {
        "content": "<p>If it's a type then shouldn't there be a function somewhere to define what the diagonal is?</p>",
        "id": 169599988,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562186039
    },
    {
        "content": "<p>I think I see what you want partial equivs for. I think you can do a lot with just partial functions though, you don't need the inverse except for transposing</p>",
        "id": 169600185,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562186193
    },
    {
        "content": "<p>morally A is a subset of fin n of cardinality m. But to make things type check it will have to be some function <code>fin m -&gt; fin n</code></p>",
        "id": 169600207,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562186216
    },
    {
        "content": "<p>I'm transposing a lot.</p>",
        "id": 169600232,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562186235
    },
    {
        "content": "<p>I do want them to be injective as well.</p>",
        "id": 169600264,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562186276
    },
    {
        "content": "<p>whatever happened to using fintypes?</p>",
        "id": 169600530,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562186497
    },
    {
        "content": "<p>So <code>I_A i j := if A i = j then 1 else 0</code>?</p>",
        "id": 169600632,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562186574
    },
    {
        "content": "<p>And this has to be generalized to allow zeros, hence <code>I_A i j := if j \\in A i then 1 else 0</code> where <code>A : fin m -&gt; option (fin n)</code></p>",
        "id": 169600788,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562186715
    },
    {
        "content": "<p>and then given a local equiv <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>E</mi></mrow><annotation encoding=\"application/x-tex\">E</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.68333em;\"></span><span class=\"strut bottom\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.05764em;\">E</span></span></span></span> you can say <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>I</mi><mi>E</mi><mi>T</mi></msubsup><mo>=</mo><msub><mi>I</mi><msup><mi>E</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup></msub></mrow><annotation encoding=\"application/x-tex\">I_E^T = I_{E^{-1}}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8413309999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.1166619999999998em;vertical-align:-0.275331em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-2.424669em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05764em;\">E</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.275331em;\"></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.52238em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.05764em;\">E</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7463142857142857em;\"><span style=\"top:-2.786em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathrm mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17762em;\"></span></span></span></span></span></span></span></span></p>",
        "id": 169600829,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562186758
    },
    {
        "content": "<p>No if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>=</mo><mo>{</mo><mn>0</mn><mo separator=\"true\">,</mo><mn>2</mn><mo>}</mo></mrow><annotation encoding=\"application/x-tex\">A=\\{0,2\\}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span><span class=\"mrel\">=</span><span class=\"mopen\">{</span><span class=\"mord mathrm\">0</span><span class=\"mpunct\">,</span><span class=\"mord mathrm\">2</span><span class=\"mclose\">}</span></span></span></span> then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>I</mi><mi>A</mi></msub><mo>=</mo><mtable><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mn>1</mn></mrow></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow></mrow></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow></mrow></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mn>0</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mn>0</mn></mrow></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow></mrow></mstyle></mtd><mtd><mstyle displaystyle=\"false\" scriptlevel=\"0\"><mrow><mn>1</mn></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding=\"application/x-tex\">I_A = \\begin{matrix} 1 &amp;&amp; 0 \\\\ 0 &amp;&amp; 0 \\\\ 0 &amp;&amp; 1 \\end{matrix}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:2.05em;\"></span><span class=\"strut bottom\" style=\"height:3.6000000000000005em;vertical-align:-1.5500000000000007em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">1</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">0</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.05em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-2.849999999999999em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.6499999999999992em;\"><span class=\"pstrut\" style=\"height:2.84em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">0</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">0</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathrm\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"></span></span></span></span></span></span></span></span></span></p>",
        "id": 169600876,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562186770
    },
    {
        "content": "<p>I assume you mean <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>(</mo><mn>0</mn><mo>)</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">A(0)=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">0</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">0</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>A</mi><mo>(</mo><mn>1</mn><mo>)</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">A(1)=2</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\">A</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">1</span><span class=\"mclose\">)</span><span class=\"mrel\">=</span><span class=\"mord mathrm\">2</span></span></span></span>?</p>",
        "id": 169600930,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562186832
    },
    {
        "content": "<p>Yes. So <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msubsup><mi>I</mi><mi>A</mi><mi>T</mi></msubsup><msub><mi>I</mi><mi>A</mi></msub></mrow><annotation encoding=\"application/x-tex\">I_A^TI_A</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8413309999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.1166619999999998em;vertical-align:-0.275331em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-2.424669em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.275331em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> is what you said</p>",
        "id": 169600947,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562186850
    },
    {
        "content": "<p>And I think <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>I</mi><mi>A</mi></msub><msubsup><mi>I</mi><mi>A</mi><mi>T</mi></msubsup><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">I_AI_A^T = 1</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.8413309999999999em;\"></span><span class=\"strut bottom\" style=\"height:1.1166619999999998em;vertical-align:-0.275331em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathit\" style=\"margin-right:0.07847em;\">I</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-2.424669em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">A</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.275331em;\"></span></span></span></span></span><span class=\"mrel\">=</span><span class=\"mord mathrm\">1</span></span></span></span></p>",
        "id": 169600971,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562186882
    },
    {
        "content": "<p>Are you sure? My definition of <code>I_A</code> is rectangular</p>",
        "id": 169601016,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562186898
    },
    {
        "content": "<p>Yeah, sorry, yours is the same as mine.</p>",
        "id": 169601044,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562186936
    },
    {
        "content": "<p>Or maybe transposed.</p>",
        "id": 169601051,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562186942
    },
    {
        "content": "<p>we need a function <code>boole [has_zero A] [has_one A] : bool -&gt; A</code></p>",
        "id": 169601079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562186974
    },
    {
        "content": "<p>How does that help?</p>",
        "id": 169601169,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562187026
    },
    {
        "content": "<p>gets rid of the <code>if p then 1 else 0</code> part</p>",
        "id": 169601182,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562187041
    },
    {
        "content": "<p>also known as the iverson bracket</p>",
        "id": 169601214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562187066
    },
    {
        "content": "<p>I don't have an opinion on that.</p>",
        "id": 169601308,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562187132
    },
    {
        "content": "<p>anyway, I approve re: using local equivs for this</p>",
        "id": 169601326,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562187161
    },
    {
        "content": "<p>With <code>option</code> or <code>roption</code>?</p>",
        "id": 169601355,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562187195
    },
    {
        "content": "<p><code>option</code></p>",
        "id": 169601360,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562187200
    },
    {
        "content": "<p>We can look at refactoring later, for now do the thing that makes sense in your application</p>",
        "id": 169601380,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562187227
    }
]