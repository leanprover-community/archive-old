[
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> Any updates on special shapes? I would love to have (co)equalizers and pullbacks/pushouts. I could try to come up with something myself, but I think I won't get a better interface than what we had before.</p>",
        "id": 154475866,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546699897
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> I split up what I'd done before into <a href=\"https://github.com/leanprover-community/mathlib/tree/limits-shapes\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/limits-shapes\">https://github.com/leanprover-community/mathlib/tree/limits-shapes</a> and <a href=\"https://github.com/leanprover-community/mathlib/tree/limits-other\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/tree/limits-other\">https://github.com/leanprover-community/mathlib/tree/limits-other</a>.</p>",
        "id": 154499328,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1546747324
    },
    {
        "content": "<p>The first just has a minimal API for (de)constructing cones corresponding to each of the usual special shapes. It seems like this part, or at least some version of it, is necessary no matter what we do later, and I think <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> agrees.</p>",
        "id": 154499344,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1546747392
    },
    {
        "content": "<p>The second is just my original work on the <code>O(M*N)</code> api, rebased onto the <code>limits-shapes</code> branch.</p>",
        "id": 154499346,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1546747422
    },
    {
        "content": "<p>I would still be perfectly happy to work on getting that merged, but Reid wasn't too happy with it. I've been in holiday mode for a while (...maybe too long... :-) and now really better turn to grant-writing-mode, but if you want to discuss this I'm happy to make changes.</p>",
        "id": 154499390,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1546747497
    },
    {
        "content": "<p>I see. You didn't PR the <code>limits-shapes</code> branch yet, did you?</p>",
        "id": 154501854,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1546752466
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span> What's your opinion on <a href=\"https://github.com/leanprover-community/mathlib/commit/a55e2334379c4769220e9446068bac89ddb6f29a\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/commit/a55e2334379c4769220e9446068bac89ddb6f29a\">https://github.com/leanprover-community/mathlib/commit/a55e2334379c4769220e9446068bac89ddb6f29a</a>? I think this is <code>O(N)</code> stuff that we will want anyway. Should it be PR'd?</p>",
        "id": 155072768,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547458995
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110032\">@Reid Barton</span>  I'm just wondering, wouldn't it be \"better\" if <code>is_limit.lift</code> was a cone morphism, instead of just a hom between the tips?</p>",
        "id": 155345833,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547740340
    },
    {
        "content": "<p>I went back and forth on this a few times. Mario's suggestion had been that for the most basic definitions, it was good to write things out explicitly.</p>",
        "id": 156411010,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1547857421
    },
    {
        "content": "<p>I would not complain about switching this again. Can you point to places where it would essentially simplify use?</p>",
        "id": 156411078,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1547857451
    },
    {
        "content": "<p>I should PR the <code>limits-shapes</code> branch, I guess. I haven't had much Lean time recently -- but if, <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , you think it looks plausible, I will hit the PR button soon.</p>",
        "id": 156411125,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1547857500
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> I personally think it looks fine. So let's just go for it...</p>",
        "id": 156423791,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547878546
    },
    {
        "content": "<p>Unrelated question: should <code>is_colimit.mk_cocone_morphism</code> be renamed to <code>is_colimit.mk_of_cocone_morphism</code>?<br>\n<a href=\"https://github.com/leanprover/mathlib/blob/78f1949719676db358ea5e68e211a73e2ce95e7b/src/category_theory/limits/limits.lean#L149\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/blob/78f1949719676db358ea5e68e211a73e2ce95e7b/src/category_theory/limits/limits.lean#L149\">https://github.com/leanprover/mathlib/blob/78f1949719676db358ea5e68e211a73e2ce95e7b/src/category_theory/limits/limits.lean#L149</a></p>",
        "id": 156429529,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547889706
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> This is an example where I am using <code>unique</code>: <a href=\"https://github.com/leanprover-community/mathlib/blob/adjunctions-2/src/category_theory/adjunction.lean#L321\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/adjunctions-2/src/category_theory/adjunction.lean#L321\">https://github.com/leanprover-community/mathlib/blob/adjunctions-2/src/category_theory/adjunction.lean#L321</a></p>",
        "id": 156430349,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547891304
    },
    {
        "content": "<p>The proof is somewhat annoying with a <code>letI</code> that shouldn't be there.</p>",
        "id": 156430354,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547891332
    },
    {
        "content": "<p>That is probably because I didn't listen well enough to Mario, and made <code>equiv.unique_of_equiv</code> use instances, instead of explicit variables.</p>",
        "id": 156430366,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547891376
    },
    {
        "content": "<p>that</p>",
        "id": 156430367,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547891389
    },
    {
        "content": "<p>However, this proof captures very well the spirit of the maths proof.</p>",
        "id": 156430368,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547891395
    },
    {
        "content": "<p>Right, so I'll improve it by fixing <code>equiv.unique_of_equiv</code></p>",
        "id": 156430420,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547891414
    },
    {
        "content": "<p>And the proof would become even slicker if I don't have to call <code>is_colimit_iso_unique_cocone_morphism</code> two times.</p>",
        "id": 156430425,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1547891445
    },
    {
        "content": "<p>feel free to smuggle the change in your next category theory PR</p>",
        "id": 156430432,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1547891473
    },
    {
        "content": "<p>Ok, <a href=\"https://github.com/leanprover/mathlib/issues/611\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/611\">#611</a> contains <code>limits-shapes</code>.</p>",
        "id": 156432390,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1547894726
    },
    {
        "content": "<p>From the discussion in <a href=\"https://github.com/leanprover/mathlib/issues/611\" target=\"_blank\" title=\"https://github.com/leanprover/mathlib/issues/611\">#611</a>: <a href=\"https://arxiv.org/pdf/1401.7694.pdf\" target=\"_blank\" title=\"https://arxiv.org/pdf/1401.7694.pdf\">https://arxiv.org/pdf/1401.7694.pdf</a><br>\nSeems like a very interesting read to me.</p>",
        "id": 157638849,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549399398
    },
    {
        "content": "<p>\"Although pre-existing formalizations of category theory in proof assistants<br>\nabound [1, 4, 5, 6, 7, 8, 9, 12, 17, 18, 19, 20, 21, 22, 26, 29, 30, 31, 33, 34,<br>\n38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 50, 51, 54, 55, 59, 60, 61], we chose to<br>\nimplement our library [28] from scratch.\"</p>\n<p>!</p>",
        "id": 157642648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549402580
    },
    {
        "content": "<p>All these category theory libraries and nobody doing schemes??</p>",
        "id": 157642708,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549402633
    },
    {
        "content": "<p>I'd read that one before even meeting Lean; a lot of their discussion is HoTT specific.</p>",
        "id": 157665428,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549429128
    },
    {
        "content": "<p>Computer scientists know category theory; very few know schemes.</p>",
        "id": 157665445,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1549429154
    },
    {
        "content": "<p>I'm really curious which of these libraries have been applied to something other than category theory</p>",
        "id": 157665937,
        "sender_full_name": "Reid Barton",
        "timestamp": 1549430001
    },
    {
        "content": "<p>The current library in Lean 3 hasn't been stress-tested too much in that regard either...</p>",
        "id": 157668509,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1549433550
    },
    {
        "content": "<p>I know I've said this before but in my opinion one of the reasons that mathematicians have been slow adopters of these tools is because computer scientists have overwhelmingly been formalising the kind of mathematics they meet/like rather than the kind that is actually in used in maths departments. I don't think it will be long before Lean starts breaking this mould. I think Sebastien's work on the Morse lemma and Johannes' forthcoming work on Ellenberg-Gijswijt are rare examples of \"normal\" recent theorems formalised in provers but these are rare. Of course, to make progress one has to do category theory :-) but as the others have said, to mathematicians these things are often regarded by mathematicians as just tools, or even just a language, to make doing actual maths easier.</p>",
        "id": 157671903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1549439401
    }
]