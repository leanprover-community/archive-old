[
    {
        "content": "<p>I'm trying to show that for <a href=\"https://leanprover-community.github.io/mathlib_docs/find/dual_number\">docs#dual_number</a> s (aka <a href=\"https://leanprover-community.github.io/mathlib_docs/find/triv_sq_zero_ext\">docs#triv_sq_zero_ext</a>), <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo>+</mo><mi>y</mi><mi>ε</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi mathvariant=\"normal\">exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>y</mi><mi mathvariant=\"normal\">exp</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mi>ε</mi></mrow><annotation encoding=\"application/x-tex\">\\operatorname{exp}(x+y\\varepsilon) =\\operatorname{exp}(x) + (y\\operatorname{exp}(x) )\\varepsilon</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">exp</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">ε</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">exp</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">exp</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">))</span><span class=\"mord mathnormal\">ε</span></span></span></span>. <br>\nI'm able to show that</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">exp_series</span> <span class=\"n\">S</span> <span class=\"o\">(</span><span class=\"n\">tsze</span> <span class=\"n\">R</span> <span class=\"n\">M</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"n\">inl</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">a</span> <span class=\"bp\">•</span> <span class=\"n\">inr</span> <span class=\"n\">x.snd</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>but I'm not sure how to show that this sum is unique.</p>\n<p>I'm able to equate the first components thanks to the projection of the first component being continuous, but I'm not sure how to proceed for the second component since:</p>\n<ul>\n<li><code>t2_space (tsze R M)</code> doesn't hold</li>\n<li><code>normed_ring (tsze R M)</code> doesn't hold</li>\n<li>I don't have any topology available on <code>M</code>!</li>\n</ul>\n<p>Could someone take a look at <a href=\"https://github.com/leanprover-community/mathlib/pull/18200\">#18200</a> and advise how I might prove  <code>snd (exp S x) = exp S x.fst • x.snd</code>; or whether it's even true?</p>",
        "id": 321870256,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673972549
    },
    {
        "content": "<p>My guess would be that it's false because my topology is too coarse; but as understand it, if I make my topology finer I would need to choose a different norm</p>",
        "id": 321874229,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673973658
    },
    {
        "content": "<p>I have only glanced at this briefly, but if I understand correctly, your topology is just induced by the projection onto the first coordinate (i.e., <code>R</code>). So anything which converges to <code>(r,m)</code> also converges to <code>(r,m')</code> for any <code>m' : M</code>. Therefore, this sum is not unique. Consequently, you won't be able to show the specified equality, because <a href=\"https://leanprover-community.github.io/mathlib_docs/find/formal_multilinear_series.sum\">docs#formal_multilinear_series.sum</a> is just <code>classical.some</code> applied to <code>summable</code> (which is just an existential wrapper around <code>has_sum</code>).</p>\n<p>And yes, if you need to change the topology, then you need to change the norm too. I also don't see how you have much hope of this at all if you don't have <em>some</em> topology on <code>M</code> itself.</p>",
        "id": 321895405,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1673979442
    },
    {
        "content": "<p>I think I'm concluding that the norm <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∥</mi><mi>x</mi><mo>+</mo><mi>y</mi><mi>ε</mi><mi mathvariant=\"normal\">∥</mi><mo>=</mo><mi mathvariant=\"normal\">∥</mi><mi>x</mi><mi mathvariant=\"normal\">∥</mi></mrow><annotation encoding=\"application/x-tex\">\\|x + y\\varepsilon\\| = \\|x\\|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mord mathnormal\">ε</span><span class=\"mord\">∥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∥</span><span class=\"mord mathnormal\">x</span><span class=\"mord\">∥</span></span></span></span>, while perhaps natural, does not produce a desirable topology</p>",
        "id": 321896706,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673979857
    },
    {
        "content": "<p>I mean, it's not Hausdorff, so limits won't be unique.</p>",
        "id": 321896771,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1673979886
    },
    {
        "content": "<p>Note that norms on objects like these can be a bit subtle. For example, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/unitization\">docs#unitization</a> is similar in many ways to <a href=\"https://leanprover-community.github.io/mathlib_docs/find/triv_sq_zero_ext\">docs#triv_sq_zero_ext</a>, and the \"best\" norm on <code>unitization</code> (not in mathlib, but I have stuff locally for it) is kind of tricky. For example, a natural first choice would be the ℓ¹ norm (sum of the norms of the coordinates), but that norm doesn't preserve the C⋆-property when the original non-unital ring had it. Instead, the right thing to do in that situation is to take the max of (the norm of the left-regular representation of the unitization acting on the non-unital underlying algebra) and (the norm of the scalar part).</p>",
        "id": 321897415,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1673980086
    },
    {
        "content": "<p>Do you have any actual example of a <code>triv_sq_zero_ext</code> where the topology isn't the product topology? It's a bit strange that you would want to topologize <code>tsze R M</code> without a topology on both <code>R</code> and <code>M</code>. (Note: the topology induced by the norm I described on the <code>unitization</code> above is the product topology, not definitionally, but that can be fixed with forgetful inheritance)</p>",
        "id": 321898257,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1673980319
    },
    {
        "content": "<p>I've concluded that I probably do just want the product topology</p>",
        "id": 321899319,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673980609
    },
    {
        "content": "<p>And was led astray by the norm suggested by <a href=\"https://math.stackexchange.com/a/1056378/1896\">https://math.stackexchange.com/a/1056378/1896</a></p>",
        "id": 321899350,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673980619
    },
    {
        "content": "<p>I've updated the PR to use the product topology and everything works nicely. Perhaps I'll wait for you to push your unitization work before attempting to define a norm! As it turned out I didn't need it anyway.</p>",
        "id": 321902033,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673981540
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Exponentials.20in.20seminormed.20algebras/near/321899350\">said</a>:</p>\n<blockquote>\n<p>And was led astray by the norm suggested by <a href=\"https://math.stackexchange.com/a/1056378/1896\">https://math.stackexchange.com/a/1056378/1896</a></p>\n</blockquote>\n<p>Is it worth leaving a comment there pointing this out? They seem to just assume the convergence of the exponential and call it a day</p>",
        "id": 321902087,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1673981559
    },
    {
        "content": "<p>I think someone more versed in convergence than I am should leave that comment</p>",
        "id": 321902187,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673981594
    },
    {
        "content": "<p>convergence is not a well-behaved property in non-Hausdorff spaces.</p>",
        "id": 321907341,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1673983070
    },
    {
        "content": "<p>Note: it's not that the series doesn't converge to the stated value (it does, with the seminorm specified in the post), it's just that it also converges to a bunch of other random things; this is a problem for <em>us</em> because our definition of the sum uses <code>classical.some</code> to choose an arbitrary one of those, but I suspect it's not much of a problem for people working with dual numbers in practice.</p>",
        "id": 321925288,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1673989298
    },
    {
        "content": "<p>Is \"one of the things <code>f x</code> converges to is <code>y</code> so I'm going to use <code>y</code>\" even valid in informal mathematics?</p>",
        "id": 321928595,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673990586
    },
    {
        "content": "<p>It feels like the problem is still there, and if it works informally presumably it's because implicitly a different norm/topology was being used to take the limit?</p>",
        "id": 321928646,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673990614
    },
    {
        "content": "<ol>\n<li>If you have a way of specifying <code>y</code> other than \"the thing <code>f</code> converges to along some filter\", then sure (because you can take this other thing to be the definition). I think in this situation that's likely exactly what happens.</li>\n<li>I think here it's just convenient to motivate / explain the definition of the exponential by using the sum of the series for parallelism with more familiar exponentials.  Moreover, (a) it actually works if you use the product topology, and (b) the topology induced by the seminorm is weaker than the product topology, so the series still converges to the claimed value even though it's no longer a unique limit.</li>\n</ol>",
        "id": 321932007,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1673992012
    },
    {
        "content": "<p>Ah, so the formal version of 1) would be a typeclass with an <code>exp</code> field and a <code>exp_lawful : has_sum (the_usual_series) exp</code> proof?</p>",
        "id": 321933409,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673992601
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"284160\">Eric Rodriguez</span> <a href=\"#narrow/stream/116395-maths/topic/Exponentials.20in.20seminormed.20algebras/near/321902087\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Exponentials.20in.20seminormed.20algebras/near/321899350\">said</a>:</p>\n<blockquote>\n<p>And was led astray by the norm suggested by <a href=\"https://math.stackexchange.com/a/1056378/1896\">https://math.stackexchange.com/a/1056378/1896</a></p>\n</blockquote>\n<p>Is it worth leaving a comment there pointing this out? They seem to just assume the convergence of the exponential and call it a day</p>\n</blockquote>\n<p>I added a comment</p>",
        "id": 321934587,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673993092
    },
    {
        "content": "<p>yes, that could be a formalization of it, but I don't think it's really that necessary. Again, I think the series formulation is primarily there for motivation and parallelism.</p>",
        "id": 321937689,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1673994383
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Exponentials.20in.20seminormed.20algebras/near/321902033\">said</a>:</p>\n<blockquote>\n<p>Perhaps I'll wait for you to push your unitization work before attempting to define a norm! As it turned out I didn't need it anyway.</p>\n</blockquote>\n<p>Just in case it matters to you <span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>, I wasn't planning on pushing this until after the port is finished.</p>",
        "id": 321942265,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1673996394
    },
    {
        "content": "<p>Any particular reason?</p>",
        "id": 321945170,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673997554
    },
    {
        "content": "<p>I'd be keen to see the approach, even if you ultimately don't have time to polish it for a PR</p>",
        "id": 321947819,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1673998844
    },
    {
        "content": "<p>Mainly just to avoid creating extra mathlib3 burden, but I can push to a branch. I'll take a few minutes to clean it up and push to a branch. I didn't actually implement the forgetful inheritance for the topological structure yet.</p>",
        "id": 321965863,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674010956
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"310045\">@Eric Wieser</span>  <a href=\"https://github.com/leanprover-community/mathlib/tree/j-loreaux/cstar-unitization\">branch#j-loreaux/cstar-unitization</a> contains my implementation of the C⋆-norm on the unitization. I did end up implementing the forgetful inheritance for the <code>uniform_space</code> structure (it greatly simplifies the proof of completeness anyway; otherwise it's a bit of a pain). It's still a bit messy, but I suspect you'll be able to follow it without too much trouble.</p>\n<p>One note: I realized that this norm is actually not <em>quite</em> as nice as I had remembered when the underlying algebra is not a C⋆-algebra. The reason is that it's only a seminorm unless the left regular representation of the algebra is injective (it often is, but that's a separate proof obligation). This condition is automatic for C⋆-algebras because of the C⋆-property.</p>",
        "id": 321981384,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674023803
    },
    {
        "content": "<p>If the norm is only a seminorm, doesn't that make it incompatible with the product topology? (Edit: I see now that this is about the product topology on <code>(𝕜 × (A →L[𝕜] A)</code>, so they're compatible)</p>",
        "id": 322000869,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674032432
    },
    {
        "content": "<p>I think the SE is making an unjustified assumption that norms that are good for algebra are always also good for topology.</p>",
        "id": 322001059,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674032512
    },
    {
        "content": "<p>Is mathlib also making that unjustified assumption in your opinion?</p>",
        "id": 322001450,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674032684
    },
    {
        "content": "<p>I'm not sure what that question means</p>",
        "id": 322001525,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674032717
    },
    {
        "content": "<p>but I would guess not</p>",
        "id": 322001531,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674032720
    },
    {
        "content": "<p>Like, in general the algebraic norm <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mrow><mi>L</mi><mi mathvariant=\"normal\">/</mi><mi>K</mi></mrow></msub><mo stretchy=\"false\">(</mo><mi>a</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">N_{L/K}(a)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.1052em;vertical-align:-0.3552em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.5198em;margin-left:-0.109em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">L</span><span class=\"mord mtight\">/</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07153em;\">K</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3552em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mclose\">)</span></span></span></span> of an element of a field extension <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi><mo>⊆</mo><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">K \\subseteq L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8193em;vertical-align:-0.136em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">⊆</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> isn't a real number in the first place--it's an element of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>.</p>",
        "id": 322001678,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674032766
    },
    {
        "content": "<p>So really there are two different meanings of \"norm\" involved.</p>",
        "id": 322001715,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674032781
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110032\">Reid Barton</span> <a href=\"#narrow/stream/116395-maths/topic/Exponentials.20in.20seminormed.20algebras/near/322001525\">said</a>:</p>\n<blockquote>\n<p>I'm not sure what that question means</p>\n</blockquote>\n<p>The way that normed_space derives from topological_space means you can't implement an algebraic norm without having the associated topology forced upon you. Maybe the answer is that <code>norm</code> is not for algebraic norms.</p>",
        "id": 322001987,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674032867
    },
    {
        "content": "<p>Certainly not, if it always takes values in <code>real</code>.</p>",
        "id": 322002222,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674032932
    },
    {
        "content": "<p>Is there a good reason that a topological norm should always take values in real?</p>",
        "id": 322002342,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674032976
    },
    {
        "content": "<p>Well it had better at least take values in something ordered</p>",
        "id": 322003941,
        "sender_full_name": "Reid Barton",
        "timestamp": 1674033561
    },
    {
        "content": "<p>For algebraic norms we have \"valuation\", taking values in an arbitrary totally ordered commutative additive group with 0.</p>",
        "id": 322037862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674044336
    },
    {
        "content": "<p>Oh but this does not apply to norms for finite extensions of fields.</p>",
        "id": 322037965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674044380
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Exponentials.20in.20seminormed.20algebras/near/322000869\">said</a>:</p>\n<blockquote>\n<p>If the norm is only a seminorm, doesn't that make it incompatible with the product topology? (Edit: I see now that this is about the product topology on <code>(𝕜 × (A →L[𝕜] A)</code>, so they're compatible)</p>\n</blockquote>\n<p>No, we're trying to put a norm on <code>unitization 𝕜 A := 𝕜 × A</code>. We do this by pulling back the norm on <code>𝕜 × (A →L[𝕜] A)</code> via the map <code>((k, a) : unitization 𝕜 A) ↦ (k, algebra_map 𝕜 (A →L[𝕜] A) k + continuous_linear_map.mul 𝕜 A a)</code>. Note that <code>(0, a) ↦ (0, continuous_linear_map.mul 𝕜 A a)</code>, so, if <code>continuous_linear_map.mul 𝕜 A</code> is <em>not</em> injective, then we only end up with a seminorm on <code>unitization 𝕜 A</code>.</p>\n<p>That being said, it's a bit unusual for <code>continuous_linear_map.mul 𝕜 A</code> to fail to be injective, but it is possible. For instance, take <code>A</code> to be the (non-unital) algebra of strictly upper triangular <code>2 × 2</code> matrices. Note that the product of any two elements of this algebra is <code>0</code>, so in fact <code>continuous_linear_map.mul 𝕜 A = 0</code>, and hence the induced norm on the unitization simplifies to: <code>‖(k, a)‖ = ‖k‖</code> (so this does <em>not</em> induce the product topology).</p>",
        "id": 322082998,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674056250
    },
    {
        "content": "<p>Note: C⋆-norms on a specified algebra are unique, if they exist, so as far as C⋆-algebras are concerned, there really isn't another choice for the norm. This may necessitate another type synonym if we want to put this norm on the unitization of C⋆-algebras and another norm on the unitization of other Banach algebras.</p>",
        "id": 322084846,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674056663
    },
    {
        "content": "<blockquote>\n<p>there really isn't another choice for the norm</p>\n</blockquote>\n<p>Presumably it's possible that there's another definition that's equal to your definition in the C* case, but still produces the product topology in the more general case?</p>",
        "id": 322173969,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1674084709
    },
    {
        "content": "<p>I'm not so sure about that. I think it's unlikely. It seems that in the literature there is focus on so-called <em>regular</em> norms, which I think are norms for which <code>continuous_linear_map.mul</code> is an isometry.</p>",
        "id": 322205364,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674108590
    },
    {
        "content": "<p>In the p-adic theory when you have non-reduced affinoids you frequently get Banach spaces equipped with a so-called supremum seminorm which does not induce the Banach space topology.</p>",
        "id": 322222171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1674116847
    },
    {
        "content": "<p>For reference, the papers I saw on this subject were <a href=\"https://www.ams.org/journals/proc/1993-117-01/S0002-9939-1993-1104395-1/S0002-9939-1993-1104395-1.pdf\">norms on unitizations of banach algebras</a> and a follow-up paper <a href=\"https://users.math.cas.cz/~muller/javm.pdf\">norms on unitizations of banach algebras revisited</a>.</p>\n<p>In case you see <a href=\"https://math.stackexchange.com/questions/1157165/norms-on-unitization-of-nonunital-banach-algebra?rq=1\">this stack exchange question</a>, just realize that several things in the question and in the accepted answer are wrong (I need to add a comment to this effect). Basically, the OP claims that the supremum gives you a norm, but this is incorrect even in the C⋆-algebra case unless the algebra is <em>actually</em> not unital (i.e., there is no identity, having one that we forgot about is not allowed). And when it's not a C⋆-algebra I showed earlier in the thread how it can even be the zero function. The answrt is incorrect because it's assuming you actually get Banach spaces from both these \"norms\" (for <code>‖⬝‖₁</code> this is correct), however, when that actually happens (e.g., when the norm on A is regular) then the rest of the answer is valid, and the subject of investigation in the papers above is the minimal constant <code>c</code> you can get (apparently <code>c=3</code> is optimal).</p>",
        "id": 322277833,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1674134396
    }
]