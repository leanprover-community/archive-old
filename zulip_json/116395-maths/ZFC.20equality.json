[
    {
        "content": "<p>There were a couple of times in the schemes project when I really had to think \"beyond ZFC\" -- I had to write down a map, and there were two ways of doing it, and in ZFC they were the <em>literally the same way</em> but in Lean they were different. In this example I just chose a random Lean route to model my ZFC thoughts and it got me in to real trouble later.</p>",
        "id": 127197270,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527499900
    },
    {
        "content": "<p>Here's a naive definition of the image of a morphism in ZFC, translated seamlessly into Lean:</p>",
        "id": 127197324,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527499954
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"c1\">-- ZFC-safe! The below code uses only Prop and Type</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">image</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n</pre></div>",
        "id": 127197326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527499971
    },
    {
        "content": "<p>And now here's something which doesn't work</p>",
        "id": 127197328,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527499983
    },
    {
        "content": "<p><code>theorem they_are_not_defeq : image (@id X) U = U := rfl -- fails</code></p>",
        "id": 127197333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527499997
    },
    {
        "content": "<p>Does that mean that my definition of image is wrong?</p>",
        "id": 127197336,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500008
    },
    {
        "content": "<p>Or is there literally no way to make that happen in dependent type theory</p>",
        "id": 127197337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500019
    },
    {
        "content": "<p>they are definitely not defeq</p>",
        "id": 127197379,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500056
    },
    {
        "content": "<p>you see, a set is nothing more than a function to Prop</p>",
        "id": 127197384,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500068
    },
    {
        "content": "<p>Is that because I am bad at writing the image function?</p>",
        "id": 127197385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500068
    },
    {
        "content": "<p>Can you write a better one for me</p>",
        "id": 127197386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500076
    },
    {
        "content": "<p>no, it isn't</p>",
        "id": 127197387,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500077
    },
    {
        "content": "<p>where they are defeq</p>",
        "id": 127197388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500079
    },
    {
        "content": "<p>you can't</p>",
        "id": 127197391,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500086
    },
    {
        "content": "<p>you have to have an existential quantifier</p>",
        "id": 127197392,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500090
    },
    {
        "content": "<p>can you prove that you can't?</p>",
        "id": 127197393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500092
    },
    {
        "content": "<p>in Lean</p>",
        "id": 127197395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500099
    },
    {
        "content": "<p>3.4.1</p>",
        "id": 127197396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500101
    },
    {
        "content": "<p>not in lean</p>",
        "id": 127197403,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500110
    },
    {
        "content": "<p>it's a metatheorem</p>",
        "id": 127197405,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500115
    },
    {
        "content": "<p>Great.</p>",
        "id": 127197406,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500119
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> can it actually be proved?</p>",
        "id": 127197408,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500124
    },
    {
        "content": "<p>probably</p>",
        "id": 127197410,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500129
    },
    {
        "content": "<p>Well you know what</p>",
        "id": 127197411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500133
    },
    {
        "content": "<p>I think defeq is rubbish</p>",
        "id": 127197413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500140
    },
    {
        "content": "<p>because those two sets are <em>equal</em></p>",
        "id": 127197414,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500147
    },
    {
        "content": "<p>f(x) = x^2 and f(x) = x^2+1-1 are <em>equal</em></p>",
        "id": 127197452,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500163
    },
    {
        "content": "<p>and mathematicians have been thinking of those sets as <em>equal</em> since they started formalizing mathematics</p>",
        "id": 127197453,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500163
    },
    {
        "content": "<p>but not definitionally equal</p>",
        "id": 127197454,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500166
    },
    {
        "content": "<p>so what has gone wrong?</p>",
        "id": 127197455,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500167
    },
    {
        "content": "<p>nothing is wrong</p>",
        "id": 127197468,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500208
    },
    {
        "content": "<p>defeq is not ZFC equality</p>",
        "id": 127197470,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500219
    },
    {
        "content": "<p>Kenny -- the ZFC analogues of the two concepts <code>U</code> and <code>image id U</code> are <em>identical</em></p>",
        "id": 127197471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500219
    },
    {
        "content": "<p>I mean equal in the purest form</p>",
        "id": 127197475,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500227
    },
    {
        "content": "<p>are they?</p>",
        "id": 127197479,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500236
    },
    {
        "content": "<p>they are indistinguishable with the tools of ZFC</p>",
        "id": 127197480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500239
    },
    {
        "content": "<p>no, there is more to prove under one definition than the other in ZFC</p>",
        "id": 127197481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500244
    },
    {
        "content": "<p>the latter is <code>{ y in U | exists x, x = y }</code></p>",
        "id": 127197482,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500247
    },
    {
        "content": "<p>In ZFC they are the same object</p>",
        "id": 127197483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500250
    },
    {
        "content": "<p>in lean they are the same object</p>",
        "id": 127197484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500259
    },
    {
        "content": "<p>sure, but they aren't equal by definition</p>",
        "id": 127197485,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500259
    },
    {
        "content": "<p>they are equivalent</p>",
        "id": 127197486,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500262
    },
    {
        "content": "<p><code>exists x, x = y</code> is equivalent to <code>true</code></p>",
        "id": 127197488,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500271
    },
    {
        "content": "<p>How is one supposed to prove that stupid lemma anyway?</p>",
        "id": 127197531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500294
    },
    {
        "content": "<p><code>ext (by simp)</code></p>",
        "id": 127197535,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500307
    },
    {
        "content": "<p>I would guess</p>",
        "id": 127197539,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500318
    },
    {
        "content": "<p>actually it's probably already a theorem</p>",
        "id": 127197541,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500326
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- What actually happens in my head when proving the lemma id(U) = U for sets in Lean.</span>\n\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"c1\">-- ZFC-safe! The below code uses only Prop and Type</span>\n<span class=\"c1\">-- (I didn&#39;t check the imports though)</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">image</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">are_they_equal</span> <span class=\"o\">:</span> <span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">begin</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">why am I wasting my time proving this stupid theorem. These</span>\n<span class=\"cm\">objects are ZFC-equal and thus equal. I will not even try.</span>\n<span class=\"cm\">-/</span>\n<span class=\"c1\">-- rfl, -- fails</span>\n<span class=\"c1\">-- simp, -- fails -- *rolls eyes*</span>\n<span class=\"c1\">-- finish, -- I don&#39;t even understand what this one does but it sometimes works</span>\n<span class=\"c1\">-- cc (see comment above)</span>\n<span class=\"c1\">-- dsimp -- thought unlikely but maybe worth trying</span>\n<span class=\"c1\">-- can&#39;t think of any more tactics</span>\n<span class=\"n\">unfold</span> <span class=\"n\">image</span><span class=\"o\">,</span>\n<span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">eq_of_subset_of_subset</span><span class=\"o\">,</span>\n<span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">Hx</span><span class=\"o\">},</span>\n<span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span><span class=\"o\">,</span>\n  <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">Hx</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n<span class=\"c1\">-- thank goodness it&#39;s over</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127197552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500360
    },
    {
        "content": "<p>That's what actually happened</p>",
        "id": 127197553,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500364
    },
    {
        "content": "<p><code>set.image_id</code></p>",
        "id": 127197555,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500367
    },
    {
        "content": "<p>why are you proving trivial set theorems?</p>",
        "id": 127197559,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500387
    },
    {
        "content": "<p>It's hard for me to prove that  ZFC-equal things are equal</p>",
        "id": 127197561,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500397
    },
    {
        "content": "<p>because the tools I have honed in my brain to solve these problems</p>",
        "id": 127197617,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500410
    },
    {
        "content": "<p>are ZFC tools</p>",
        "id": 127197618,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500416
    },
    {
        "content": "<p>that theorem is just as hard in zfc land</p>",
        "id": 127197626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500426
    },
    {
        "content": "<p>and here for some reason ZFC tools are not adequate</p>",
        "id": 127197627,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500426
    },
    {
        "content": "<p>the proof is literally no different</p>",
        "id": 127197633,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500442
    },
    {
        "content": "<p>why does simp fail?</p>",
        "id": 127197644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500483
    },
    {
        "content": "<p>This proof is simple</p>",
        "id": 127197646,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500486
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I tell you, when a mathematician says they work in ZFC, they actually don't. They won't even be able to name all of the ZFC axioms.</p>",
        "id": 127197647,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500487
    },
    {
        "content": "<p>That's true for a general mathematician</p>",
        "id": 127197650,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500501
    },
    {
        "content": "<p>I can tell you I have worked in ZFC</p>",
        "id": 127197654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500509
    },
    {
        "content": "<p>but I know the axioms of ZFC and I've been working happily in it for years</p>",
        "id": 127197656,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500511
    },
    {
        "content": "<p>like for real</p>",
        "id": 127197657,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500518
    },
    {
        "content": "<p>You mean \"not using pen and paper\"</p>",
        "id": 127197697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500539
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_id</span><span class=\"o\">])</span>\n</pre></div>",
        "id": 127197702,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500553
    },
    {
        "content": "<p>I've done ZFC with pen and paper too, but that gets old fast</p>",
        "id": 127197707,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500566
    },
    {
        "content": "<p>I guess LaTeX is the true home of ZFC.</p>",
        "id": 127197709,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500574
    },
    {
        "content": "<p>For most people.</p>",
        "id": 127197713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500584
    },
    {
        "content": "<p>... isn't metamath basically zfc on pen and paper</p>",
        "id": 127197722,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527500626
    },
    {
        "content": "<p>OK so I think dependent type theory is stupid and I've decided to go back to ZFC and formulate perfectoid spaces there instead where I don't have to waste my time worrying about whether or not id U is equal to U.</p>",
        "id": 127197726,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500636
    },
    {
        "content": "<p>So where do I start?</p>",
        "id": 127197727,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500638
    },
    {
        "content": "<p>if I want to do it on a computer</p>",
        "id": 127197767,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500646
    },
    {
        "content": "<p>I thought Isabelle works in ZFC</p>",
        "id": 127197771,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500656
    },
    {
        "content": "<p>I don't even know what Isabelle is</p>",
        "id": 127197773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500663
    },
    {
        "content": "<p>It uses HOL for all the good stuff</p>",
        "id": 127197775,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500666
    },
    {
        "content": "<p>so Isabelle-ZFC is a thing?</p>",
        "id": 127197778,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500678
    },
    {
        "content": "<p>Isabelle/ZFC is more of a proof of concept</p>",
        "id": 127197779,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500678
    },
    {
        "content": "<p>that doesn't sound good</p>",
        "id": 127197780,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500686
    },
    {
        "content": "<p>does it have number fields?</p>",
        "id": 127197782,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500691
    },
    {
        "content": "<p>and secondly, nobody works in ZFC. they work in ZFC + definitorial expansion</p>",
        "id": 127197788,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527500706
    },
    {
        "content": "<p>If you want to really use ZFC on the computer, you should use Mizar or Metamath</p>",
        "id": 127197791,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500709
    },
    {
        "content": "<p>Why not Isabelle-ZFC?</p>",
        "id": 127197795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500718
    },
    {
        "content": "<p>because it is not mature enough</p>",
        "id": 127197798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500728
    },
    {
        "content": "<p>maybe mature is the wrong word, it's been around for a while but it doesn't have enough theorems</p>",
        "id": 127197810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500749
    },
    {
        "content": "<p>Which of the three possibilities for computer-ZFC is most mathematician-friendly?</p>",
        "id": 127197811,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500750
    },
    {
        "content": "<p>Or is it a case of \"learn one of them, you just learned all of them\"</p>",
        "id": 127197852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500766
    },
    {
        "content": "<p>I have no idea</p>",
        "id": 127197857,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500771
    },
    {
        "content": "<p>I just play ZFC internally on my own emulator</p>",
        "id": 127197863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500783
    },
    {
        "content": "<p>Mizar was written by mathematicians for mathematicians</p>",
        "id": 127197864,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500783
    },
    {
        "content": "<p>this is not necessarily a good thing</p>",
        "id": 127197866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500792
    },
    {
        "content": "<p>In ZFC</p>",
        "id": 127197867,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500795
    },
    {
        "content": "<p>in TG set theory</p>",
        "id": 127197869,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500802
    },
    {
        "content": "<p>If ZFC and DTT had a race to perfectoid spaces, and you could choose your foundational system, and we started tomorrow, who would win?</p>",
        "id": 127197879,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500830
    },
    {
        "content": "<p>ZFC is an axiom system not a program</p>",
        "id": 127197883,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500845
    },
    {
        "content": "<p>I am not CS-wise enough to understand the difference</p>",
        "id": 127197888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500858
    },
    {
        "content": "<p>I want a program whose only commands are things allowed in ZFC</p>",
        "id": 127197893,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500876
    },
    {
        "content": "<p>and all things allowed in ZFC are commands</p>",
        "id": 127197895,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500880
    },
    {
        "content": "<p>You aren't choosing ZFC or DTT, you're choosing Mizar or Lean or Coq or Isabelle</p>",
        "id": 127197933,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500886
    },
    {
        "content": "<p>Does this make sense -- \"I choose Mizar, and therefore I choose ZFC\"</p>",
        "id": 127197939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500912
    },
    {
        "content": "<p>sure</p>",
        "id": 127197941,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500918
    },
    {
        "content": "<p>I don't know what Mizar is</p>",
        "id": 127197942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500918
    },
    {
        "content": "<p>but I do know what ZFC is</p>",
        "id": 127197946,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500923
    },
    {
        "content": "<p>And \"I choose Lean, and therefore I choose dependent type theory\"</p>",
        "id": 127197951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500934
    },
    {
        "content": "<p>right, lean doesn't give you a choice here</p>",
        "id": 127197959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500950
    },
    {
        "content": "<p>same with most other systems</p>",
        "id": 127197963,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527500969
    },
    {
        "content": "<p>So who would win the perfectoid space showdown between Lean and \"insert computer program which models ZFC in some way\"</p>",
        "id": 127197971,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527500999
    },
    {
        "content": "<p>If I got cloned into two people and just had a race with myself</p>",
        "id": 127198017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501013
    },
    {
        "content": "<p>Isabelle and Metamath are a bit special since they are foundational frameworks, so you can technically pick your favorite axiom system, but in practice all the theorems go to one particular axiom system</p>",
        "id": 127198018,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501015
    },
    {
        "content": "<p>If you got cloned? Lean of course</p>",
        "id": 127198031,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501048
    },
    {
        "content": "<p>Are there more mathematical theorems in Mathlib than in any library for any ZFC system?</p>",
        "id": 127198032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501051
    },
    {
        "content": "<p>because you know lean better than any other system</p>",
        "id": 127198036,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501062
    },
    {
        "content": "<p>But Mario, I speak <em>fluent</em> ZFC</p>",
        "id": 127198040,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501065
    },
    {
        "content": "<p>and you will find that it doesn't matter</p>",
        "id": 127198049,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501077
    },
    {
        "content": "<p>It's my native language</p>",
        "id": 127198051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501078
    },
    {
        "content": "<p>because you will be struggling with formal details the whole way</p>",
        "id": 127198055,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501092
    },
    {
        "content": "<p>that's always the way it goes</p>",
        "id": 127198060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501100
    },
    {
        "content": "<p>I think this is precisely the point I don't understand</p>",
        "id": 127198063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501109
    },
    {
        "content": "<p>let me rephrase that -- the distinction between \"Lean\" and \"Dependent type theory\" is quite blurred in my mind</p>",
        "id": 127198138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501172
    },
    {
        "content": "<p>I thought I could just define dependent type theory to be Lean</p>",
        "id": 127198148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501193
    },
    {
        "content": "<p>it's one thing to know the theory behind Python</p>",
        "id": 127198151,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501198
    },
    {
        "content": "<p>it's a completely other thing to use Python</p>",
        "id": 127198154,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501205
    },
    {
        "content": "<p>I guess</p>",
        "id": 127198158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501218
    },
    {
        "content": "<p>I completely understand that</p>",
        "id": 127198160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501223
    },
    {
        "content": "<p>I see</p>",
        "id": 127198162,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501227
    },
    {
        "content": "<p>But this is a really easy problem</p>",
        "id": 127198205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501249
    },
    {
        "content": "<p>I just get the CS people to write python for me</p>",
        "id": 127198206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501255
    },
    {
        "content": "<p>so they are the same thing</p>",
        "id": 127198207,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501263
    },
    {
        "content": "<p>Now who wrote ZFC for me?</p>",
        "id": 127198210,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501282
    },
    {
        "content": "<p>but you don't want ZFC, not really</p>",
        "id": 127198214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501293
    },
    {
        "content": "<p>I love ZFC Mario</p>",
        "id": 127198218,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501304
    },
    {
        "content": "<p>you want by schoolkid and tactics and magic</p>",
        "id": 127198219,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501304
    },
    {
        "content": "<p>Yeah and we _need_ schoolkid</p>",
        "id": 127198223,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501313
    },
    {
        "content": "<p>ZFC is an axiom system, it made no magical promises</p>",
        "id": 127198227,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501321
    },
    {
        "content": "<p>no but you CS guys will just sort all that out</p>",
        "id": 127198230,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501332
    },
    {
        "content": "<p>that's just some stupid engineering issue</p>",
        "id": 127198234,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501337
    },
    {
        "content": "<p>I want to do ZFC, like I do Python in Python</p>",
        "id": 127198237,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501348
    },
    {
        "content": "<p>but it's a really important engineering issue for you</p>",
        "id": 127198238,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501350
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> how would you prove in ZFC that <code>id '' U = U</code>?</p>",
        "id": 127198239,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501355
    },
    {
        "content": "<p>I dare say it's far more important than the underlying axiom system</p>",
        "id": 127198279,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501366
    },
    {
        "content": "<p>id(u) is the same as u</p>",
        "id": 127198286,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501375
    },
    {
        "content": "<p>no they aren't</p>",
        "id": 127198290,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501380
    },
    {
        "content": "<p>sure it is</p>",
        "id": 127198292,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501386
    },
    {
        "content": "<p>how would you prove it?</p>",
        "id": 127198294,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501391
    },
    {
        "content": "<p>that's not a proof</p>",
        "id": 127198295,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501394
    },
    {
        "content": "<p>id is a big set of ordered pairs</p>",
        "id": 127198297,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501396
    },
    {
        "content": "<p>and they're all just (u,u)</p>",
        "id": 127198301,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501408
    },
    {
        "content": "<p>a proper class</p>",
        "id": 127198302,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501408
    },
    {
        "content": "<p>no it's a set</p>",
        "id": 127198303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501412
    },
    {
        "content": "<p>don't be silly</p>",
        "id": 127198307,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501414
    },
    {
        "content": "<p>wha...</p>",
        "id": 127198309,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501420
    },
    {
        "content": "<p>ok</p>",
        "id": 127198310,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501420
    },
    {
        "content": "<p>it's a function from U to U</p>",
        "id": 127198312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501422
    },
    {
        "content": "<p>but here it isn't</p>",
        "id": 127198319,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501428
    },
    {
        "content": "<p>ZFC warning</p>",
        "id": 127198324,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501435
    },
    {
        "content": "<p>it's a function from alpha to alpha, U is just a subset</p>",
        "id": 127198325,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501435
    },
    {
        "content": "<p>but here is stupid. I'm telling you the right way.</p>",
        "id": 127198326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501437
    },
    {
        "content": "<p>that's doing to make your job messy</p>",
        "id": 127198328,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501449
    },
    {
        "content": "<p>so id(u) is <em>equal</em> to u OK</p>",
        "id": 127198329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501452
    },
    {
        "content": "<p>so {id(u) : u in U}</p>",
        "id": 127198331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501460
    },
    {
        "content": "<p>EQUALS</p>",
        "id": 127198332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501462
    },
    {
        "content": "<p>{u : u in U}</p>",
        "id": 127198333,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501466
    },
    {
        "content": "<p>which</p>",
        "id": 127198334,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501467
    },
    {
        "content": "<blockquote>\n<p>so id(u) is <em>equal</em> to u OK</p>\n</blockquote>\n<p>you still haven't proved it. what after id being a big set of pairs</p>",
        "id": 127198335,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501468
    },
    {
        "content": "<p>EQUALS</p>",
        "id": 127198337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501469
    },
    {
        "content": "<p>U</p>",
        "id": 127198339,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501470
    },
    {
        "content": "<p>I don't understand which bit I missed</p>",
        "id": 127198382,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501492
    },
    {
        "content": "<p>you're abusing notations.</p>",
        "id": 127198384,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501495
    },
    {
        "content": "<p>oh</p>",
        "id": 127198385,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501498
    },
    {
        "content": "<p>yes, you unfold the definitions, that {id(u) : u in U} thing becomes {y : \\ex u, id(u) = y}</p>",
        "id": 127198389,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501507
    },
    {
        "content": "<p>{u : u in U} isn't equal to {u in U | true}</p>",
        "id": 127198390,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501508
    },
    {
        "content": "<p>I thought I was using \"=\" as in the underlying logic or syntax or whatever it's called of ZFC or logic or</p>",
        "id": 127198393,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501521
    },
    {
        "content": "<p>you mixed comprehension notation and subset notation</p>",
        "id": 127198394,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501522
    },
    {
        "content": "<p>I am not clear about what = is in ZFC</p>",
        "id": 127198395,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501527
    },
    {
        "content": "<p>I forgot the details</p>",
        "id": 127198396,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501530
    },
    {
        "content": "<p>and then you have a lemma proving that id(u) = u since (u,u) in id</p>",
        "id": 127198397,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501531
    },
    {
        "content": "<p>but it just means they're the same object</p>",
        "id": 127198400,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501538
    },
    {
        "content": "<p>by \"isn't equal to\" I mean \"you haven't proved that they are equal\"</p>",
        "id": 127198401,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501538
    },
    {
        "content": "<p>and id is a function because ...</p>",
        "id": 127198402,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501540
    },
    {
        "content": "<blockquote>\n<p>but it just means they're the same object</p>\n</blockquote>\n<p>but it needs to be proved</p>",
        "id": 127198407,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501547
    },
    {
        "content": "<p>you can't just say \"they must be equal\"</p>",
        "id": 127198412,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501553
    },
    {
        "content": "<p>you see, the problem is not in the axioms</p>",
        "id": 127198415,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501564
    },
    {
        "content": "<p>but in the formality</p>",
        "id": 127198416,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501567
    },
    {
        "content": "<p>and then you get \\ex u in U, u = y &lt;-&gt; u in U</p>",
        "id": 127198417,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501568
    },
    {
        "content": "<p>and hey presto it's the lean proof</p>",
        "id": 127198421,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501576
    },
    {
        "content": "<p>But in the world where proofs are free and can be appealed to at will using good tactics, \"simp\" would prove this</p>",
        "id": 127198425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501590
    },
    {
        "content": "<p>right, so ZFC isn't the problem at all</p>",
        "id": 127198428,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501601
    },
    {
        "content": "<p>SIMP CAN PROVE THIS</p>",
        "id": 127198429,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501601
    },
    {
        "content": "<p>yes</p>",
        "id": 127198470,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501607
    },
    {
        "content": "<p>because my definition of \"simp\" is the ZFC tactic \"this is simple if you use ZFC\"</p>",
        "id": 127198471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501608
    },
    {
        "content": "<p>That's not a tactic, that's magic</p>",
        "id": 127198481,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501623
    },
    {
        "content": "<p>I think that's why my understanding of tactics is so poor</p>",
        "id": 127198482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501632
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"n\">s</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"bp\">-</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_id</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 127198483,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501635
    },
    {
        "content": "<p>simp <strong>can</strong> prove this</p>",
        "id": 127198484,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501640
    },
    {
        "content": "<p>There are a whole bunch of distinct things in dependent type theory which I have truly identified in my head</p>",
        "id": 127198488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501654
    },
    {
        "content": "<p>and the big question is</p>",
        "id": 127198490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501663
    },
    {
        "content": "<p>is that going to give you problems down the line</p>",
        "id": 127198497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501670
    },
    {
        "content": "<p>by which I mean me</p>",
        "id": 127198499,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501681
    },
    {
        "content": "<p>the ZFCist</p>",
        "id": 127198500,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501685
    },
    {
        "content": "<p>I got lucky. I needed a map <code>F U -&gt; F (id '' U)</code></p>",
        "id": 127198505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501704
    },
    {
        "content": "<p>and I chose wrong. I proved <code>id '' U = U</code> and then did a rewrite and used id.</p>",
        "id": 127198545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501728
    },
    {
        "content": "<p>because they're the SAME OBJECT</p>",
        "id": 127198547,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501739
    },
    {
        "content": "<p>and the identity map from an object to itself is called id.</p>",
        "id": 127198552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501751
    },
    {
        "content": "<p>this is a better argument</p>",
        "id": 127198561,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501769
    },
    {
        "content": "<p>So I used id and instantly got into all manner of trouble the moment I tried to prove things</p>",
        "id": 127198565,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501770
    },
    {
        "content": "<p>1. you don't really work in pure ZFC. you work in ZFC + definitorial expansion + a whole bunch of other things</p>",
        "id": 127198567,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501771
    },
    {
        "content": "<p>in ZFC <code>id '' U</code> isn't even defined</p>",
        "id": 127198584,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501779
    },
    {
        "content": "<p>ZFC says that there exists such an object</p>",
        "id": 127198597,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501786
    },
    {
        "content": "<p>The dtt analogue of this is called equality reflection</p>",
        "id": 127198598,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501787
    },
    {
        "content": "<p>you're using the axiom of replacement</p>",
        "id": 127198611,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501793
    },
    {
        "content": "<p>And then I went back and thought \"do you know what -- I could use res!\"</p>",
        "id": 127198615,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501796
    },
    {
        "content": "<p>it says that if <code>x = y</code> then <code>x</code> and <code>y</code> are defeq</p>",
        "id": 127198618,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501805
    },
    {
        "content": "<p>it begins <code>forall A exists B</code></p>",
        "id": 127198620,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501809
    },
    {
        "content": "<p>And I thought \"that's funny, because it's an <em>axiom of a functor</em> that res U U = id\"</p>",
        "id": 127198623,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501821
    },
    {
        "content": "<p>in ZFC everything is Prop</p>",
        "id": 127198624,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501822
    },
    {
        "content": "<p>This is needed to typecheck things like <code>id : F U -&gt; F (id '' U)</code></p>",
        "id": 127198626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501829
    },
    {
        "content": "<p>\"so res is <em>the same as</em> id\"</p>",
        "id": 127198629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501836
    },
    {
        "content": "<p>and I tried res</p>",
        "id": 127198674,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501864
    },
    {
        "content": "<p>and then all my one page long goals were rfl</p>",
        "id": 127198676,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501877
    },
    {
        "content": "<p>because I gave same ZFC answer in two different ways, the first arguably being \"more natural for the ZFC-ist\", and the second apparently being \"more natural for the DTT-ist\".</p>",
        "id": 127198689,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501914
    },
    {
        "content": "<p>I don't understand why my id is the wrong idea.</p>",
        "id": 127198694,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501942
    },
    {
        "content": "<p>Kevin, formalized maths will be crazy in any system. You can only hope automation will get better at hiding this crazyness. And it seems DTT is better that set theory in order to build automation</p>",
        "id": 127198695,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527501943
    },
    {
        "content": "<p>You can use <code>id</code> like you did, but you need a lemma about it</p>",
        "id": 127198697,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501947
    },
    {
        "content": "<p>I cannot envisage a single problem doing this in ZFC</p>",
        "id": 127198699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501953
    },
    {
        "content": "<p>The issue is making a computer assert this statement?</p>",
        "id": 127198743,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501969
    },
    {
        "content": "<p>this would be WAY harder in metamath because of all the dependencies</p>",
        "id": 127198744,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527501976
    },
    {
        "content": "<blockquote>\n<p>I cannot envisage a single problem doing this in ZFC</p>\n</blockquote>\n<p>no, you would need as many lemmas</p>",
        "id": 127198746,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527501985
    },
    {
        "content": "<p>is metamath ZFC?</p>",
        "id": 127198747,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527501989
    },
    {
        "content": "<p>ZFC / DTT is not the issue at all</p>",
        "id": 127198748,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502002
    },
    {
        "content": "<p>lean is good at hiding complexity, which is not always a good thing</p>",
        "id": 127198749,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502005
    },
    {
        "content": "<p>I should do a proper survey.</p>",
        "id": 127198757,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502037
    },
    {
        "content": "<p>on the one hand it means you can formalize much bigger statements, on the other it means you don't work as much on parsimony and as a result have to struggle with large goals</p>",
        "id": 127198758,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502048
    },
    {
        "content": "<p>Do I have a complete list of \"computer programs which help you do ZFC\"?</p>",
        "id": 127198759,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502060
    },
    {
        "content": "<p>Of course lean is on that list</p>",
        "id": 127198798,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502088
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> No! Simp didn't prove it! You had to write some .set.image gobble-de-gook theorem as well which probably also says \"two identical things are equal\"</p>",
        "id": 127198806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502147
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> no, I had to write <code>-set.image_id</code> to show that it isn't automated</p>",
        "id": 127198810,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502162
    },
    {
        "content": "<p>because <code>set.image_id</code> is the theorem</p>",
        "id": 127198811,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502167
    },
    {
        "content": "<p>the set_image thing is just to avoid an even more trivial proof</p>",
        "id": 127198812,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502171
    },
    {
        "content": "<p>If simp worked properly, it would solve that goal</p>",
        "id": 127198814,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502185
    },
    {
        "content": "<p>just by simp</p>",
        "id": 127198815,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502186
    },
    {
        "content": "<p>because it's simple</p>",
        "id": 127198817,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502188
    },
    {
        "content": "<p>Kevin.</p>",
        "id": 127198818,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502190
    },
    {
        "content": "<p>it's a minus.</p>",
        "id": 127198819,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502195
    },
    {
        "content": "<p>I'm telling <code>simp</code> not to use that theorem.</p>",
        "id": 127198820,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502199
    },
    {
        "content": "<p>I know</p>",
        "id": 127198821,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502200
    },
    {
        "content": "<p>because otherwise the proof would be trivial</p>",
        "id": 127198861,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502205
    },
    {
        "content": "<p>just <code>by simp</code> does prove that theorem</p>",
        "id": 127198863,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502208
    },
    {
        "content": "<p>because it's a simp lemma</p>",
        "id": 127198866,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502213
    },
    {
        "content": "<p>and without the theorem, the proof is <code>ext $ by simp</code></p>",
        "id": 127198868,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502239
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">Tactic</span> <span class=\"n\">State</span>\n\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span>\n<span class=\"err\">⊢</span> <span class=\"n\">image</span> <span class=\"n\">id</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span>\n<span class=\"n\">id_U_equals_U</span><span class=\"bp\">.</span><span class=\"n\">lean</span><span class=\"o\">:</span><span class=\"mi\">11</span><span class=\"o\">:</span><span class=\"mi\">51</span><span class=\"o\">:</span> <span class=\"n\">error</span>\n\n<span class=\"n\">simplify</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span> <span class=\"n\">to</span> <span class=\"n\">simplify</span>\n<span class=\"n\">state</span><span class=\"o\">:</span>\n<span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">,</span>\n<span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span>\n<span class=\"err\">⊢</span> <span class=\"n\">image</span> <span class=\"n\">id</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span>\n</pre></div>",
        "id": 127198869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502239
    },
    {
        "content": "<p>\"by simp\" doesn't solve it so \"by simp\" is broken</p>",
        "id": 127198872,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502252
    },
    {
        "content": "<p>because it's simple</p>",
        "id": 127198873,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502257
    },
    {
        "content": "<p>that's all I'm saying</p>",
        "id": 127198874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502257
    },
    {
        "content": "<p>you defined your own image</p>",
        "id": 127198875,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502258
    },
    {
        "content": "<p>it has no simp lemmas like the real one</p>",
        "id": 127198878,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502267
    },
    {
        "content": "<p>you guys are just weirdos</p>",
        "id": 127198883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502288
    },
    {
        "content": "<p>Kevin</p>",
        "id": 127198885,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502299
    },
    {
        "content": "<p>It's like you shot me in the leg and asked why I can't run as fast</p>",
        "id": 127198887,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502305
    },
    {
        "content": "<p>have we established that in ZFC you still need to prove it</p>",
        "id": 127198889,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502306
    },
    {
        "content": "<p>Maybe it's time I tried Mizar.</p>",
        "id": 127198890,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502307
    },
    {
        "content": "<p>I'll come back with egg on my face later</p>",
        "id": 127198892,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502319
    },
    {
        "content": "<p>I don't really see the issue</p>",
        "id": 127198929,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502326
    },
    {
        "content": "<p>I think you're misunderstanding</p>",
        "id": 127198932,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502331
    },
    {
        "content": "<p>you said it's stupid because they aren't defeq</p>",
        "id": 127198933,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502342
    },
    {
        "content": "<p>if it's not by simp for some reason</p>",
        "id": 127198935,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502343
    },
    {
        "content": "<p>simp requires a whole library of carefully crafted lemmas to work well</p>",
        "id": 127198936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502344
    },
    {
        "content": "<p>then it should be by schoolkid</p>",
        "id": 127198937,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502347
    },
    {
        "content": "<p>because it's not magic</p>",
        "id": 127198938,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502359
    },
    {
        "content": "<p>How can you claim it works well</p>",
        "id": 127198940,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502359
    },
    {
        "content": "<p>if it cannot even prove id(U)=U</p>",
        "id": 127198942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502364
    },
    {
        "content": "<p>when they're the same object</p>",
        "id": 127198945,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502369
    },
    {
        "content": "<p>That's what I'm hearing :-)</p>",
        "id": 127198950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502385
    },
    {
        "content": "<p>you are being unusually stubborn today</p>",
        "id": 127198951,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502385
    },
    {
        "content": "<p>1. you said Lean is stupid because <code>id '' U = U</code> isn't <code>rfl</code>. But they also aren't rfl in ZFC, you also need to prove it (remember how you mixed comprehension notation and subset notation)</p>",
        "id": 127198952,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502386
    },
    {
        "content": "<p>and I know it's not what you're saying</p>",
        "id": 127198956,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502394
    },
    {
        "content": "<p>but I'm a bit deaf</p>",
        "id": 127198957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502397
    },
    {
        "content": "<p>2. you said Lean is stupid because <code>id '' U = u</code> isn't <code>by simp</code>. But it is.</p>",
        "id": 127198958,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502398
    },
    {
        "content": "<p>I was just doing my ZFC-baiting thing</p>",
        "id": 127198959,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502418
    },
    {
        "content": "<p>3. you said Lean is stupid because <code>id '' U = U</code> isn't <code>ext $ by simp</code>. But it is.</p>",
        "id": 127198960,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502427
    },
    {
        "content": "<p>so I don't know what your issue is</p>",
        "id": 127198961,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502434
    },
    {
        "content": "<p>by simp doesn't work for me</p>",
        "id": 127199000,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502446
    },
    {
        "content": "<p>does it work for you?</p>",
        "id": 127199002,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502448
    },
    {
        "content": "<p>because you're using the wrong image</p>",
        "id": 127199004,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502453
    },
    {
        "content": "<p>I'm using the image I wrote</p>",
        "id": 127199006,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502461
    },
    {
        "content": "<p>use the official image and everything will be fine</p>",
        "id": 127199007,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502463
    },
    {
        "content": "<p>of course your new image doesn't have simp lemmas</p>",
        "id": 127199011,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502473
    },
    {
        "content": "<p>Wait so didn't lots of people tell me that this was impossible or something?</p>",
        "id": 127199012,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502498
    },
    {
        "content": "<p>4. you said Lean is stupid because <code>simp</code> doesn't simplify it with your <strong>new</strong> image definition. But we already established that it is not a rfl theorem, so you have to use the official image if you want to use a simp lemma</p>",
        "id": 127199016,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502507
    },
    {
        "content": "<p>that's stupid. What if I can't find the official image so I just make my own image which would then be identical so all the old theorems would work anyway</p>",
        "id": 127199027,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502547
    },
    {
        "content": "<p>hmm</p>",
        "id": 127199028,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502548
    },
    {
        "content": "<p>no</p>",
        "id": 127199030,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502555
    },
    {
        "content": "<p>OK so</p>",
        "id": 127199032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502559
    },
    {
        "content": "<p>I can see there might be issues here</p>",
        "id": 127199063,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502563
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> read my point 4 again</p>",
        "id": 127199071,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502564
    },
    {
        "content": "<p>at least</p>",
        "id": 127199072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502567
    },
    {
        "content": "<p>from an engineering point of view</p>",
        "id": 127199075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502571
    },
    {
        "content": "<p>the theorems only \"work\" if you apply them</p>",
        "id": 127199079,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502592
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> it doesn't work</p>",
        "id": 127199081,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502600
    },
    {
        "content": "<p>No</p>",
        "id": 127199082,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502604
    },
    {
        "content": "<p>I'm listening</p>",
        "id": 127199083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502606
    },
    {
        "content": "<p>yeah, I messed up the copy there</p>",
        "id": 127199084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502620
    },
    {
        "content": "<p>I understand that I have to apply my theorems</p>",
        "id": 127199090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502630
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> so I don't really see where the issue is.</p>",
        "id": 127199091,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502635
    },
    {
        "content": "<p>but in return</p>",
        "id": 127199093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502640
    },
    {
        "content": "<p>here's the thing</p>",
        "id": 127199095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502647
    },
    {
        "content": "<p>you're complaining that <code>simp</code> doesn't know about your new <code>image</code></p>",
        "id": 127199098,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502660
    },
    {
        "content": "<p>Kevin, don't think of <code>simp</code> as \"simple\", but as \"simplify\"</p>",
        "id": 127199099,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527502663
    },
    {
        "content": "<p>when I prove a theorem that says that A and B are equal</p>",
        "id": 127199100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502663
    },
    {
        "content": "<p>in DTT speak</p>",
        "id": 127199101,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502668
    },
    {
        "content": "<p><code>theorem they_are_equal : X = Y := by schoolkid</code></p>",
        "id": 127199143,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502693
    },
    {
        "content": "<p>So, it's not <code>simp</code>'s purpose to prove it. But <code>schoolkid</code> or <code>math_trivial</code> should be able to prove it</p>",
        "id": 127199144,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527502703
    },
    {
        "content": "<p>Whenever that happens in dependent type theory</p>",
        "id": 127199146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502714
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> Kevin.</p>",
        "id": 127199147,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502726
    },
    {
        "content": "<p>I want dependent type theory to now collapse a little</p>",
        "id": 127199148,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502727
    },
    {
        "content": "<p>I think this will convince you.</p>",
        "id": 127199149,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502729
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">image</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">image</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 127199150,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502742
    },
    {
        "content": "<p>I think you are focusing on the wrong issue Kevin</p>",
        "id": 127199214,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502833
    },
    {
        "content": "<p>you broke the silence &gt;_&gt;</p>",
        "id": 127199217,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502845
    },
    {
        "content": "<p>So we want <code>schoolkid_1</code> which just does <code>simp [..every definition preceding it in the file..]</code></p>",
        "id": 127199218,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527502851
    },
    {
        "content": "<p>There is nothing at all wrong with the proof of id '' U = U, but it caused problems later when you used it as a functor in your presheaf</p>",
        "id": 127199231,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502889
    },
    {
        "content": "<p>For that you need theorems about the action of <code>eq.rec</code> or <code>cast</code></p>",
        "id": 127199275,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502925
    },
    {
        "content": "<p>Is this supposed to be rfl?</p>",
        "id": 127199279,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502933
    },
    {
        "content": "<p>and they aren't free, you have to state them</p>",
        "id": 127199280,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502936
    },
    {
        "content": "<p><code>theorem X : id '' U = U := sorry </code></p>",
        "id": 127199282,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502941
    },
    {
        "content": "<blockquote>\n<p>Is this supposed to be rfl?</p>\n</blockquote>\n<p>I thought we already established that it is not rfl</p>",
        "id": 127199285,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502947
    },
    {
        "content": "<p>not in ZFC either</p>",
        "id": 127199286,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502949
    },
    {
        "content": "<p>So that is not rfl</p>",
        "id": 127199287,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502956
    },
    {
        "content": "<p>but what was rfl?</p>",
        "id": 127199288,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527502959
    },
    {
        "content": "<p>rfl is using \"forall x, x = x\"</p>",
        "id": 127199290,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502970
    },
    {
        "content": "<p><code>schoolkid_1</code> is <code>simp!</code></p>",
        "id": 127199292,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527502975
    },
    {
        "content": "<p>so in ZFC, you need to do reductions to simplify them to the same expression, and then use that axiom</p>",
        "id": 127199299,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527502992
    },
    {
        "content": "<p>but they can't be reduced to the same thing</p>",
        "id": 127199301,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503003
    },
    {
        "content": "<p>ZFC has no reductions at all</p>",
        "id": 127199302,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527503018
    },
    {
        "content": "<blockquote>\n<p><code>schoolkid_1</code> is <code>simp!</code></p>\n</blockquote>\n<p>nope, doesn't work</p>",
        "id": 127199304,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503023
    },
    {
        "content": "<p>In fact rfl is much weaker in ZFC</p>",
        "id": 127199310,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527503032
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> you aren't working in ZFC. you are working in ZFC + definition expansion + delta reduction</p>",
        "id": 127199346,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503043
    },
    {
        "content": "<p>Mario quote</p>\n<div class=\"codehilite\"><pre><span></span>import data.set\n\n-- ZFC-safe! The below code uses only Prop and Type\n\nvariables {X Y : Type} (f : X → Y) (U : set X)\n\ntheorem they_are_not_defeq : image (@id X) U = U := rfl -- works\n</pre></div>\n\n\n<p>Doesn't work for me</p>",
        "id": 127199349,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503044
    },
    {
        "content": "<p><code>+</code> equality reflection</p>",
        "id": 127199355,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527503066
    },
    {
        "content": "<p><code>unknown identifier 'image'</code></p>",
        "id": 127199361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503097
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I really do not see any problem at all. <code>id '' U</code> does not expand to <code>U</code>. you have to destruct the definitions and <strong>use extensionality</strong></p>",
        "id": 127199362,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503098
    },
    {
        "content": "<p>I didn't say that</p>",
        "id": 127199365,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527503099
    },
    {
        "content": "<p>that's what I mean</p>",
        "id": 127199367,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503100
    },
    {
        "content": "<p>I am just trying to get to the bottom of things</p>",
        "id": 127199373,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503108
    },
    {
        "content": "<p>but I have never seen refl work for anything</p>",
        "id": 127199374,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503114
    },
    {
        "content": "<p>if you need to <strong>use the axiom of extensionality</strong> to prove that they are equal, then they aren't definitionally equal</p>",
        "id": 127199377,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503118
    },
    {
        "content": "<p>and I've never seen by simp work either</p>",
        "id": 127199378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503122
    },
    {
        "content": "<p>and i'm working in ZFC to say that</p>",
        "id": 127199380,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503131
    },
    {
        "content": "<p>but I'm just trying to put everything together</p>",
        "id": 127199381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503133
    },
    {
        "content": "<p>it's hard trying to distinguish between equal things</p>",
        "id": 127199384,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503141
    },
    {
        "content": "<p>It's not so hard: <code>id '' U</code> has more words than <code>U</code>, so they aren't the same</p>",
        "id": 127199440,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527503182
    },
    {
        "content": "<p>Here's an example of <code>rfl</code> working:</p>\n<div class=\"codehilite\"><pre><span></span>definition image := {y : Y | ∃ x ∈ U, y = f x}\n\nexample : image (@id X) U = {y | ∃ x ∈ U, y = x} := rfl\n</pre></div>",
        "id": 127199502,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527503333
    },
    {
        "content": "<p>that's how definitional expansion is supposed to work</p>",
        "id": 127199506,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527503346
    },
    {
        "content": "<p>this is what ZFC gives you (except you would have to work on id(x) = x in the middle there, that's not definitional in ZFC)</p>",
        "id": 127199512,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527503372
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> here's how I can formalize what I say: if you didn't have <code>propext</code> as an axiom, then you won't be able to prove that the two sets are equal, in Lean</p>",
        "id": 127199516,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503391
    },
    {
        "content": "<p>the ZFC version replaces <code>propext</code> with the axiom of extensionality</p>",
        "id": 127199557,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503406
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"c1\">-- ZFC-safe! The below code uses only Prop and Type</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">image&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">they_are_the_same</span> <span class=\"o\">:</span> <span class=\"n\">image&#39;</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">they_are_the_same&#39;</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">they_are_all_the_same_thing_</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">image&#39;</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">but_they_are_all_the_same</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">why_are_they_all_different</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">refl</span> <span class=\"c1\">-- thank god</span>\n</pre></div>",
        "id": 127199573,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503460
    },
    {
        "content": "<p>:-(</p>",
        "id": 127199574,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503461
    },
    {
        "content": "<p>They are the same -- you just have the wrong equivalence relation</p>",
        "id": 127199585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503489
    },
    {
        "content": "<p>I've been repeating the same thing 100 times.</p>",
        "id": 127199588,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503500
    },
    {
        "content": "<p><code>set.image</code> is defined as <code>{y : Y | ∃ x, x ∈ U ∧ f x = y}</code></p>",
        "id": 127199627,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527503524
    },
    {
        "content": "<blockquote>\n<p>I've been repeating the same thing 100 times.</p>\n</blockquote>\n<p>I know but you didn't fix it yet</p>",
        "id": 127199633,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503542
    },
    {
        "content": "<p>all the proofs are \"by schoolkid\"</p>",
        "id": 127199634,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503550
    },
    {
        "content": "<p>Kenny do you want to do that for your 1st year project?</p>",
        "id": 127199636,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503561
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">image</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n<span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">image</span><span class=\"o\">]</span>\n</pre></div>\n\n\n</blockquote>",
        "id": 127199637,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503565
    },
    {
        "content": "<p>you must be blind</p>",
        "id": 127199638,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503571
    },
    {
        "content": "<p>but it never just says \"by simp\"</p>",
        "id": 127199643,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503586
    },
    {
        "content": "<p>which ones get done by simp</p>",
        "id": 127199648,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503599
    },
    {
        "content": "<p>no because that would be horrible in most proofs</p>",
        "id": 127199649,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527503605
    },
    {
        "content": "<p>Kevin, you don't want <code>by simp</code> to automatically unfold every definition for you.</p>",
        "id": 127199651,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503622
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"c1\">-- ZFC-safe! The below code uses only Prop and Type</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"n\">Y</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">X</span> <span class=\"bp\">→</span> <span class=\"n\">Y</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">image&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">they_are_the_same</span> <span class=\"o\">:</span> <span class=\"n\">image&#39;</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">they_are_the_same&#39;</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">they_are_all_the_same_thing_</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">image&#39;</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">but_they_are_all_the_same</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- fails</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">why_are_they_all_different</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- I wasn&#39;t 100% confident but we got through</span>\n</pre></div>",
        "id": 127199692,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503651
    },
    {
        "content": "<p>Why do I have to work, or even <em>think</em>, about proving that two objects are the same, when they are the same object?</p>",
        "id": 127199695,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503673
    },
    {
        "content": "<p>here we go again</p>",
        "id": 127199696,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503680
    },
    {
        "content": "<p>Why doesn't it do it for me?</p>",
        "id": 127199697,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503680
    },
    {
        "content": "<p>That's what I want</p>",
        "id": 127199699,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503684
    },
    {
        "content": "<p>Make it do it for me</p>",
        "id": 127199700,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503686
    },
    {
        "content": "<p>simp is rubbish</p>",
        "id": 127199701,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503691
    },
    {
        "content": "<p>make a proper one</p>",
        "id": 127199703,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503694
    },
    {
        "content": "<p>do we have to go through the ZFC proof that they are the same again?</p>",
        "id": 127199704,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503699
    },
    {
        "content": "<p>make schoolkid</p>",
        "id": 127199705,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503699
    },
    {
        "content": "<p>Stop trolling Kevin</p>",
        "id": 127199710,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527503705
    },
    {
        "content": "<p>I don't understand why this can't be done</p>",
        "id": 127199713,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503712
    },
    {
        "content": "<p>I already explained 100 times</p>",
        "id": 127199715,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503720
    },
    {
        "content": "<p>Why can my brain do it?</p>",
        "id": 127199716,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503721
    },
    {
        "content": "<p>Aren't I just a computer?</p>",
        "id": 127199717,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503725
    },
    {
        "content": "<p>because your brain knows when to expand a definition and when not to</p>",
        "id": 127199718,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503738
    },
    {
        "content": "<p>I think Lean can also decide when to expand a definition and when not to</p>",
        "id": 127199763,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503770
    },
    {
        "content": "<p>how?</p>",
        "id": 127199765,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503777
    },
    {
        "content": "<p>I don't get what I'm so good at that Lean can't do</p>",
        "id": 127199768,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503781
    },
    {
        "content": "<p>with 10 definitions that is 1024 choices</p>",
        "id": 127199769,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503782
    },
    {
        "content": "<p>humans are good at small things</p>",
        "id": 127199771,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503789
    },
    {
        "content": "<p>humans don't have the guarantee that their algorithm works in every case</p>",
        "id": 127199773,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503805
    },
    {
        "content": "<p>I guess here's a good analogue.</p>",
        "id": 127199775,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503807
    },
    {
        "content": "<p>\"OK so I'm quite good at go. Why don't you CS guys quickly knock up something that's as good as me at go and then I can retire\"</p>",
        "id": 127199784,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503830
    },
    {
        "content": "<p>a human may be able to square a small number faster than a computer (not really)</p>",
        "id": 127199787,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503832
    },
    {
        "content": "<p>but as the number gets large, the computer wins by a lot</p>",
        "id": 127199789,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503840
    },
    {
        "content": "<p>I square small numbers by lookup</p>",
        "id": 127199793,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503850
    },
    {
        "content": "<p>they're hard wired</p>",
        "id": 127199794,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503854
    },
    {
        "content": "<p>right</p>",
        "id": 127199796,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503856
    },
    {
        "content": "<p>unlike whatever I said 5 minutes ago</p>",
        "id": 127199799,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503860
    },
    {
        "content": "<p>humans are good at small things</p>",
        "id": 127199800,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503860
    },
    {
        "content": "<p><code>id '' U = U</code> is short</p>",
        "id": 127199803,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503871
    },
    {
        "content": "<p>and true!</p>",
        "id": 127199806,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503877
    },
    {
        "content": "<p>here we go again</p>",
        "id": 127199822,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503882
    },
    {
        "content": "<p>The world just became a smaller place!</p>",
        "id": 127199846,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503887
    },
    {
        "content": "<p>Two things became equal!</p>",
        "id": 127199849,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503890
    },
    {
        "content": "<p>They are now the same thing, everyone please update your records</p>",
        "id": 127199851,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503897
    },
    {
        "content": "<p>Why doesn't it work like that?</p>",
        "id": 127199852,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503904
    },
    {
        "content": "<p>Where's the tactic that takes care of this for me?</p>",
        "id": 127199856,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503930
    },
    {
        "content": "<p>you want a tactic to try to expand definitions</p>",
        "id": 127199858,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503939
    },
    {
        "content": "<p>I have no clear idea what tactics do</p>",
        "id": 127199862,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503948
    },
    {
        "content": "<p>that will work for small cases</p>",
        "id": 127199864,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503950
    },
    {
        "content": "<p>that will not work for big cases</p>",
        "id": 127199866,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503956
    },
    {
        "content": "<p>In general that's undecidable</p>",
        "id": 127199867,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527503961
    },
    {
        "content": "<p>humans are <strong>only</strong> good at small things</p>",
        "id": 127199868,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503962
    },
    {
        "content": "<p>Maybe learning tactics would help me understand my frustrations better.</p>",
        "id": 127199869,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503970
    },
    {
        "content": "<blockquote>\n<p>Maybe learning tactics would help me understand my frustrations better.</p>\n</blockquote>\n<p>yes</p>",
        "id": 127199870,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527503978
    },
    {
        "content": "<p>It's a huge hole in my Lean knowledge</p>",
        "id": 127199871,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503980
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">image&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_id</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">they_are_the_same</span> <span class=\"o\">:</span> <span class=\"n\">image&#39;</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">image&#39;</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">they_are_the_same&#39;</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">they_are_all_the_same_thing_</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">image&#39;</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">image&#39;</span><span class=\"o\">]</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">but_they_are_all_the_same</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">why_are_they_all_different</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 127199873,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527503994
    },
    {
        "content": "<p>All I know is that tactic is a monoid or monad or something</p>",
        "id": 127199874,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527503995
    },
    {
        "content": "<p><code>theorem they_are_the_same' : id '' U = U := by simp -- fails</code></p>",
        "id": 127199920,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504025
    },
    {
        "content": "<p>?</p>",
        "id": 127199921,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504026
    },
    {
        "content": "<p>it works for you?</p>",
        "id": 127199923,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504031
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> can I get <code>simp</code> to automatically unfold certain definitions? <code>reducible</code> doesn't work</p>",
        "id": 127199924,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504034
    },
    {
        "content": "<p>oh you CHEATED</p>",
        "id": 127199928,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504045
    },
    {
        "content": "<p><code>@[simp]</code> can go on definitions</p>",
        "id": 127199929,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504048
    },
    {
        "content": "<p>You gave simp a hint</p>",
        "id": 127199931,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504055
    },
    {
        "content": "<p>YES</p>",
        "id": 127199934,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504063
    },
    {
        "content": "<p>So that hint should have been there alreadyt</p>",
        "id": 127199938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504070
    },
    {
        "content": "<p>already</p>",
        "id": 127199939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504073
    },
    {
        "content": "<p>thanks <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span></p>",
        "id": 127199941,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504082
    },
    {
        "content": "<p>why isn't it a simp lemma?</p>",
        "id": 127199942,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504085
    },
    {
        "content": "<p>now I can convince him:</p>",
        "id": 127199943,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504089
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">image&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">they_are_the_same</span> <span class=\"o\">:</span> <span class=\"n\">image&#39;</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">they_are_the_same&#39;</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">they_are_all_the_same_thing_</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">image&#39;</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">but_they_are_all_the_same</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">why_are_they_all_different</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 127199944,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504091
    },
    {
        "content": "<p>like I said, you shoot me in the leg and ask me to run a marathon</p>",
        "id": 127199945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504100
    },
    {
        "content": "<p>it should be a simp lemma, I fixed</p>",
        "id": 127199947,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504108
    },
    {
        "content": "<blockquote>\n<p>why isn't it a simp lemma?</p>\n</blockquote>\n<p>you mean a simp definition?</p>",
        "id": 127199948,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527504109
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> no, <code>set.image_id</code></p>",
        "id": 127199949,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504118
    },
    {
        "content": "<p>not a definition</p>",
        "id": 127199951,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504121
    },
    {
        "content": "<p>Aaah, ok, true</p>",
        "id": 127199990,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527504133
    },
    {
        "content": "<p>now is <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> happy?</p>",
        "id": 127199991,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504136
    },
    {
        "content": "<p>after the fix I will be able to remove that line</p>",
        "id": 127199995,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504148
    },
    {
        "content": "<p>Oh!</p>",
        "id": 127199996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504157
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">image&#39;</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">y</span> <span class=\"o\">:</span> <span class=\"n\">Y</span> <span class=\"bp\">|</span> <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">y</span><span class=\"o\">}</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"n\">simp</span><span class=\"o\">]</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_id</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">they_are_the_same</span> <span class=\"o\">:</span> <span class=\"n\">image&#39;</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">they_are_the_same&#39;</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">they_are_all_the_same_thing_</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">image&#39;</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">but_they_are_all_the_same</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span> <span class=\"c1\">-- works</span>\n<span class=\"kn\">theorem</span> <span class=\"n\">why_are_they_all_different</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image</span> <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">id</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">simp</span>\n</pre></div>",
        "id": 127199997,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504159
    },
    {
        "content": "<p>You see I have <em>absolutely no idea</em> about whether this is suitable as a simp lemma.</p>",
        "id": 127199998,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504183
    },
    {
        "content": "<p>All i know is that it passes two basic tests</p>",
        "id": 127200003,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504191
    },
    {
        "content": "<p>(1) it's an equality</p>",
        "id": 127200004,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504194
    },
    {
        "content": "<p>(2) the left hand side has more characters than the right hand side</p>",
        "id": 127200005,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504203
    },
    {
        "content": "<p>image_id is a good simp lemma</p>",
        "id": 127200007,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504208
    },
    {
        "content": "<p>My entry requirements for simp are pretty low</p>",
        "id": 127200009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504214
    },
    {
        "content": "<p>so is <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> satisfied now?</p>",
        "id": 127200010,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504226
    },
    {
        "content": "<p>most theorems of the form \"my_func special_arg = value\" are good simp lemmas</p>",
        "id": 127200011,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504230
    },
    {
        "content": "<blockquote>\n<p>image_id is a good simp lemma</p>\n</blockquote>\n<p>I feel I could not say that with confidence</p>",
        "id": 127200013,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504234
    },
    {
        "content": "<p>and that's what I mean when I say that I still don't understand simp properly</p>",
        "id": 127200051,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504244
    },
    {
        "content": "<p>It takes more knowledge to set up good simp lemmas than to use simp of course</p>",
        "id": 127200058,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504279
    },
    {
        "content": "<p>Exactly.</p>",
        "id": 127200060,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504291
    },
    {
        "content": "<p>I want to become a power user</p>",
        "id": 127200061,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504295
    },
    {
        "content": "<p>because it's a global problem with some locality</p>",
        "id": 127200062,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504301
    },
    {
        "content": "<p>but I don't know anywhere where random nuggets such as</p>",
        "id": 127200072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504321
    },
    {
        "content": "<blockquote>\n<p>most theorems of the form \"my_func special_arg = value\" are good simp lemmas</p>\n</blockquote>",
        "id": 127200074,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504328
    },
    {
        "content": "<p>appear, other than here</p>",
        "id": 127200075,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504336
    },
    {
        "content": "<p>You could just look at the many many examples in mathlib</p>",
        "id": 127200080,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504359
    },
    {
        "content": "<p>reading code is so <em>boring</em></p>",
        "id": 127200120,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504368
    },
    {
        "content": "<p>only masochistic CS graduate students get interested in software verification</p>",
        "id": 127200121,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527504370
    },
    {
        "content": "<p>that's what CS people do</p>",
        "id": 127200122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504373
    },
    {
        "content": "<p>your tips are folklore in CS departments</p>",
        "id": 127200123,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527504376
    },
    {
        "content": "<p>I want to talk to more CS people</p>",
        "id": 127200126,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504385
    },
    {
        "content": "<p>and that textbook I mentioned yesterday</p>",
        "id": 127200127,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527504386
    },
    {
        "content": "<p>I need simp tips so I can be a power user</p>",
        "id": 127200128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504391
    },
    {
        "content": "<p>term rewriting and all that?</p>",
        "id": 127200130,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504397
    },
    {
        "content": "<p>yeah</p>",
        "id": 127200131,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527504402
    },
    {
        "content": "<p>I remember a couple of months ago it all dawning on Chris</p>",
        "id": 127200132,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504403
    },
    {
        "content": "<p>I'm willing to bet it's full of tips on setting up simp</p>",
        "id": 127200134,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504419
    },
    {
        "content": "<p>all of a sudden every other day he was saying to me \"wooah simp does much more than you'd expect\"</p>",
        "id": 127200135,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504420
    },
    {
        "content": "<p>and then I knew he'd cracked it</p>",
        "id": 127200141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504430
    },
    {
        "content": "<p>and now you are stuck on the other end, where you think simp is magic that solves all problems</p>",
        "id": 127200146,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504453
    },
    {
        "content": "<p>I'm still at the novice stage, behind Patrick who can remember the {something = true} stuff that you sometimes have to write at the end of simp for some reason and which you don't have to write in schoolkid</p>",
        "id": 127200191,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504497
    },
    {
        "content": "<p>Actually, how about this for a tactic</p>",
        "id": 127200194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504517
    },
    {
        "content": "<p>I look through all the permutations and incantations that people have been using with simp recently</p>",
        "id": 127200200,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504536
    },
    {
        "content": "<p>and I just write a tactic that tries all of them on my goal</p>",
        "id": 127200203,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504545
    },
    {
        "content": "<p>and calls it schoolkid</p>",
        "id": 127200204,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504547
    },
    {
        "content": "<p>I think you could use some CS education, if only so that your suggestions come with algorithms</p>",
        "id": 127200215,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504580
    },
    {
        "content": "<p>that way I will never have to remember what comes after the [] in simp</p>",
        "id": 127200216,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504581
    },
    {
        "content": "<p>So I was under the misapprehension that the \"your brain is just a big computer\" people think that writing tactics to do what we do should be fine</p>",
        "id": 127200280,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504639
    },
    {
        "content": "<p>your brain is a big computer that doesn't have to do everything correctly, just the small things</p>",
        "id": 127200283,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504655
    },
    {
        "content": "<p>That same argument says that general AI is just around the corner</p>",
        "id": 127200284,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504662
    },
    {
        "content": "<p>I see</p>",
        "id": 127200289,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504672
    },
    {
        "content": "<p>So is it possible to isolate \"the techniques that I use to solve goals in ZFC\"?</p>",
        "id": 127200294,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504703
    },
    {
        "content": "<p>Is that the question?</p>",
        "id": 127200295,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504705
    },
    {
        "content": "<p>Can I code this in a Lean tactic?</p>",
        "id": 127200296,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504715
    },
    {
        "content": "<p>those techniques only work for small cases</p>",
        "id": 127200297,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504720
    },
    {
        "content": "<p>Are you saying that this is hard</p>",
        "id": 127200303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504722
    },
    {
        "content": "<p>they can't be verified</p>",
        "id": 127200336,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504725
    },
    {
        "content": "<p>can you write those techniques down as a sequence of steps in the language of Lean?</p>",
        "id": 127200340,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527504732
    },
    {
        "content": "<p>I find it so difficult to see how it can be hard when it's just checking that things are all the same</p>",
        "id": 127200342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504738
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110025\">@Andrew Ashworth</span> This is exactly the point.</p>",
        "id": 127200344,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504756
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> the techniques include \"run upon seeing a theorem with 10000 characters\", which can't be one of the things a verified algorithm can do</p>",
        "id": 127200345,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504763
    },
    {
        "content": "<p><a href=\"https://en.wikipedia.org/wiki/Word_problem_for_groups\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/Word_problem_for_groups\">https://en.wikipedia.org/wiki/Word_problem_for_groups</a></p>",
        "id": 127200346,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504764
    },
    {
        "content": "<p>When I discovered Lean I realised that it was the computer language I had been waiting for all my life</p>",
        "id": 127200347,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504767
    },
    {
        "content": "<p>and so just thought I'd code my brain up in it</p>",
        "id": 127200350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504776
    },
    {
        "content": "<p>and I was just assuming it was going to be easy</p>",
        "id": 127200353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504784
    },
    {
        "content": "<p>the world is imperfect</p>",
        "id": 127200354,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504784
    },
    {
        "content": "<p>computability matters</p>",
        "id": 127200357,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504788
    },
    {
        "content": "<p>just checking that things are all the same is undecidable in some simple situations</p>",
        "id": 127200358,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504788
    },
    {
        "content": "<p>that's an engineering problem</p>",
        "id": 127200360,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504801
    },
    {
        "content": "<p>you CS guys write great algos</p>",
        "id": 127200361,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504816
    },
    {
        "content": "<p>I'm sure you can decide all the stuff I want decided</p>",
        "id": 127200363,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504824
    },
    {
        "content": "<p>no that's a fundamental limit on progress</p>",
        "id": 127200364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504825
    },
    {
        "content": "<p>no, you can't</p>",
        "id": 127200367,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504835
    },
    {
        "content": "<p>because I have a <em>really good feeling</em> for the provability boundaries of ZFC</p>",
        "id": 127200368,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504842
    },
    {
        "content": "<p>I know which questions look \"weird to me\" like CH</p>",
        "id": 127200409,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504850
    },
    {
        "content": "<p>you don't</p>",
        "id": 127200410,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504858
    },
    {
        "content": "<p>and which questions look sensible to me like the Langlands Programme</p>",
        "id": 127200411,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527504859
    },
    {
        "content": "<p>there are infinitely many independent theorem in any computable extension of ZFC</p>",
        "id": 127200414,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504870
    },
    {
        "content": "<p>and there's no way any algorithm can decide whether a theorem is independent</p>",
        "id": 127200416,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504882
    },
    {
        "content": "<p>including your brain</p>",
        "id": 127200418,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504885
    },
    {
        "content": "<p>your brain only knows special cases like CH and AD and AC</p>",
        "id": 127200423,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527504891
    },
    {
        "content": "<p>and it only knows those because it has lots of simp lemmas</p>",
        "id": 127200439,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504916
    },
    {
        "content": "<p>hmm, I don't know if you will have long-term success with formal proofs if you don't engage with CS theory and tactic writing. because the tedious bits need to be attacked via automation, and lots of custom automation at that. Remember Bertrand Russell tried to do everything by hand and spent 5 years proving 2+2=4</p>",
        "id": 127200440,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527504921
    },
    {
        "content": "<p>and this is my own failing too, it's hard, I haven't learned Lean tactics yet</p>",
        "id": 127200442,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527504941
    },
    {
        "content": "<p>I could argue that automation is not necessary for getting things done formally</p>",
        "id": 127200482,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527504995
    },
    {
        "content": "<p>I have plenty of theorems in metamath as evidence</p>",
        "id": 127200484,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527505013
    },
    {
        "content": "<p>but proof engineering is a really important skill</p>",
        "id": 127200487,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527505026
    },
    {
        "content": "<p>but there's also evidence from adam chlipala and john harrison that automation is kind of a big deal</p>",
        "id": 127200534,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527505106
    },
    {
        "content": "<p>well, and I don't know about math, but software definitely needs automation to discharge repetitive, yet tediously involved goals</p>",
        "id": 127200547,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527505160
    },
    {
        "content": "<p>there are multiple styles of proof, and they are all effective in the right hands</p>",
        "id": 127200548,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527505167
    },
    {
        "content": "<p>and i get the feeling from Kevin's worry about schemes that advanced mathematical constructs could also use a large helping of custom automation</p>",
        "id": 127200550,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527505198
    },
    {
        "content": "<p>I find that good lemmas take most of the brunt of that</p>",
        "id": 127200551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527505199
    },
    {
        "content": "<p>but I grant that working with lean encourages good automation practices</p>",
        "id": 127200599,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527505234
    },
    {
        "content": "<p>there was that whole week long discussion about transporting across equivs and I was thinking \"so use <code>transfer</code> or write a tactic\" bingo problem solved</p>",
        "id": 127200608,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527505273
    },
    {
        "content": "<p>what was the solution?</p>",
        "id": 127200610,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527505292
    },
    {
        "content": "<p>to what?</p>",
        "id": 127200664,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527505386
    },
    {
        "content": "<blockquote>\n<p>in ZFC <code>id '' U</code> isn't even defined</p>\n</blockquote>\n<p>Oh what a bore, you're right</p>",
        "id": 127200954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527505906
    },
    {
        "content": "<p>metamath uses ZFC + classes to get around this</p>",
        "id": 127201003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527505948
    },
    {
        "content": "<p>it's a conservative extension, it just lets you express class equalities like this</p>",
        "id": 127201012,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527505983
    },
    {
        "content": "<p><a href=\"http://us.metamath.org/mpeuni/imai.html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/imai.html\">http://us.metamath.org/mpeuni/imai.html</a></p>",
        "id": 127201028,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527506035
    },
    {
        "content": "<blockquote>\n<p>that's stupid. What if I can't find the official image so I just make my own image which would then be identical so all the old theorems would work anyway</p>\n</blockquote>\n<p>This is bad, isn't it? Doesn't it mean that every time I have a terrific new idea for a function, I have to stop what I'm doing and plough through the library to see if someone already wrote it?</p>",
        "id": 127201134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527506186
    },
    {
        "content": "<p>it's called using interface to make your life better</p>",
        "id": 127201143,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527506218
    },
    {
        "content": "<blockquote>\n<p><code>schoolkid_1</code> is <code>simp!</code></p>\n</blockquote>\n<p>Then why do I even bother using simp? Should I just be using simp! all the time? Is there any case where simp works and simp! doesn't?</p>",
        "id": 127201412,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527506682
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I really do not see any problem at all. <code>id '' U</code> does not expand to <code>U</code>. you have to destruct the definitions and <strong>use extensionality</strong></p>\n</blockquote>\n<p>Yes -- you mean the definition of equal, right?</p>",
        "id": 127201465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527506763
    },
    {
        "content": "<p>no, I mean the axiom of extensionality.</p>",
        "id": 127201474,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527506776
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> here's how I can formalize what I say: if you didn't have <code>propext</code> as an axiom, then you won't be able to prove that the two sets are equal, in Lean</p>\n</blockquote>\n<p>But propext is in Lean! Is it a good simp lemma?</p>",
        "id": 127201493,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527506841
    },
    {
        "content": "<p>no</p>",
        "id": 127201500,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527506866
    },
    {
        "content": "<p>it looks good to me</p>",
        "id": 127201502,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527506872
    },
    {
        "content": "<p>simple predicate</p>",
        "id": 127201504,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527506877
    },
    {
        "content": "<p>implies an equality</p>",
        "id": 127201505,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527506879
    },
    {
        "content": "<p>it says p = q in the conclusion</p>",
        "id": 127201545,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527506888
    },
    {
        "content": "<p>it got over my simp bar</p>",
        "id": 127201548,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527506891
    },
    {
        "content": "<p>that means anything equals anything</p>",
        "id": 127201551,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527506896
    },
    {
        "content": "<p>it's too general</p>",
        "id": 127201553,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527506906
    },
    {
        "content": "<p>Just apply it sensibly</p>",
        "id": 127201555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527506915
    },
    {
        "content": "<p>and stop moaning</p>",
        "id": 127201556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527506915
    },
    {
        "content": "<p>don't just apply it randomly</p>",
        "id": 127201557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527506922
    },
    {
        "content": "<p>:-/</p>",
        "id": 127201558,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527506922
    },
    {
        "content": "<p>This is really interesting</p>",
        "id": 127201559,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527506922
    },
    {
        "content": "<p>this is the hard bit</p>",
        "id": 127201576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527506946
    },
    {
        "content": "<p>Here's another constraint: all the variables on the RHS should appear on the LHS</p>",
        "id": 127201577,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527506946
    },
    {
        "content": "<p>You can't make all the things I know are obvious yield to one tactic because you haven't worked hard enough</p>",
        "id": 127201583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527506967
    },
    {
        "content": "<p>otherwise simp has to be creative when rewriting</p>",
        "id": 127201584,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527506971
    },
    {
        "content": "<p>So again this is somehow about can we build a tactic that beats a human at maths</p>",
        "id": 127201586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527506991
    },
    {
        "content": "<p>Will this happen before I die? Say I live another 30 years</p>",
        "id": 127201629,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507008
    },
    {
        "content": "<p>I think you should try writing that tactic and get back to me</p>",
        "id": 127201630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527507009
    },
    {
        "content": "<p>That's your job</p>",
        "id": 127201635,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507016
    },
    {
        "content": "<p>you went to math classe</p>",
        "id": 127201637,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507023
    },
    {
        "content": "<p>s</p>",
        "id": 127201638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507023
    },
    {
        "content": "<p>you know how we think</p>",
        "id": 127201640,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507025
    },
    {
        "content": "<p>I want you to fail at it first so you understand what you are asking</p>",
        "id": 127201643,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527507036
    },
    {
        "content": "<p>can you write a better interface?</p>",
        "id": 127201644,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507037
    },
    {
        "content": "<p>Kevin, I completely agree that we need a smarter tactic. But I think that doesn't have to be <code>simp</code>. Simp is a very straightforward tool, that shouldn't try to be smart.</p>",
        "id": 127201659,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527507050
    },
    {
        "content": "<p>Yes, I need to go and play with Mizar and then some things which are conflated in my mind will become more separate</p>",
        "id": 127201667,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507059
    },
    {
        "content": "<p>no, we should use schoolkid or whatever you wanted to call it</p>",
        "id": 127201677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507075
    },
    {
        "content": "<p>I think you had a more grown-up name</p>",
        "id": 127201678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507084
    },
    {
        "content": "<blockquote>\n<p>Yes, I need to go and play with Mizar and then some things which are conflated in my mind will become more separate</p>\n</blockquote>\n<p>I don't see the point going to a weaker foundational system</p>",
        "id": 127201682,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527507101
    },
    {
        "content": "<blockquote>\n<p>I think you had a more grown-up name</p>\n</blockquote>\n<p><code>math_trivial</code>?</p>",
        "id": 127201689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527507115
    },
    {
        "content": "<p>Mizar is actually stronger axiomatically than lean</p>",
        "id": 127201726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527507126
    },
    {
        "content": "<p>why?</p>",
        "id": 127201733,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527507135
    },
    {
        "content": "<p>it has a proper class of inaccessibles</p>",
        "id": 127201734,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527507137
    },
    {
        "content": "<p>But I wouldn't mind have <code>kindergarten</code> or <code>schoolkid</code></p>",
        "id": 127201735,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527507143
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> again, your issue is not in the foundational system</p>",
        "id": 127201750,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527507158
    },
    {
        "content": "<p>but it seems that you are deaf</p>",
        "id": 127201752,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527507165
    },
    {
        "content": "<p>it can't hurt to play around with Mizar and Isabelle</p>",
        "id": 127201760,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527507206
    },
    {
        "content": "<blockquote>\n<p>why are you proving trivial set theorems?</p>\n</blockquote>\n<p>in this case it was because I was trying to understand something. But on other occasions the answer is \"because I don't really know a good way of finding it in the library and it's almost certainly in a file which I haven't imported yet\"</p>",
        "id": 127201761,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507240
    },
    {
        "content": "<p>most of us here are refugees from Coq / Agda / Isabelle anyway</p>",
        "id": 127201798,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527507246
    },
    {
        "content": "<p>they are organized fairly logically</p>",
        "id": 127201807,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527507283
    },
    {
        "content": "<p><code>set.image_id</code> is in the <code>image</code> section of <code>data.set.basic</code></p>",
        "id": 127201810,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527507303
    },
    {
        "content": "<blockquote>\n<p>I don't see the point going to a weaker foundational system</p>\n</blockquote>\n<p>I need to see it, in order to refine my definition of \"equality in ZFC\".</p>",
        "id": 127201820,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507323
    },
    {
        "content": "<blockquote>\n<p><code>set.image_id</code> is in the <code>image</code> section of <code>data.set.basic</code></p>\n</blockquote>\n<p>I just can't remember all this data.set.basic stuff. I just want to write set.image and hit tab a few times. This is a genuine frustration I have in my lean life</p>",
        "id": 127201903,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507459
    },
    {
        "content": "<p>I am not capable of learning all the names of all the library files</p>",
        "id": 127201904,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507466
    },
    {
        "content": "<p>it's init this and data that</p>",
        "id": 127201907,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507473
    },
    {
        "content": "<p>when I want set.image_id</p>",
        "id": 127201908,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507478
    },
    {
        "content": "<p>I type <code>#check set.image_id</code></p>",
        "id": 127201947,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507488
    },
    {
        "content": "<p>and it's not there</p>",
        "id": 127201948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507490
    },
    {
        "content": "<p>and then I have to stop what I'm doing and start faffing around with the search tool</p>",
        "id": 127201951,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507502
    },
    {
        "content": "<p>I have no clue where anything is</p>",
        "id": 127201953,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507507
    },
    {
        "content": "<p>they're just all theorems</p>",
        "id": 127201954,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507511
    },
    {
        "content": "<p>Can we have a better search?</p>",
        "id": 127201965,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507522
    },
    {
        "content": "<p>I just type <code>import set</code> and the autocomplete is pretty smart about it</p>",
        "id": 127201974,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527507527
    },
    {
        "content": "<p>oh!</p>",
        "id": 127201988,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507542
    },
    {
        "content": "<p>Because I know it's set.something I can just import set?</p>",
        "id": 127201994,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507557
    },
    {
        "content": "<p>Does that work with everything?</p>",
        "id": 127201996,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507564
    },
    {
        "content": "<p>it's not even set.something</p>",
        "id": 127202000,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527507569
    },
    {
        "content": "<p>can I import scheme?</p>",
        "id": 127202001,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507569
    },
    {
        "content": "<p>it's data.set.basic</p>",
        "id": 127202002,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527507575
    },
    {
        "content": "<p>but vscode will still give it to you</p>",
        "id": 127202004,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527507582
    },
    {
        "content": "<p>I see</p>",
        "id": 127202007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507595
    },
    {
        "content": "<p>I should \"key on set\"</p>",
        "id": 127202054,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507622
    },
    {
        "content": "<blockquote>\n<p>there are infinitely many independent theorem in any computable extension of ZFC</p>\n</blockquote>\n<p>I know but Kenny my point is that those independent theorems are just junk theorems like stupid theorems about how pi can't be a complex manifold.</p>",
        "id": 127202211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507937
    },
    {
        "content": "<p>are they</p>",
        "id": 127202214,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527507953
    },
    {
        "content": "<p>All the undecidable statements about stupid things like sets. [added later] -- that's not what ZFC is even _for_!</p>",
        "id": 127202215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507962
    },
    {
        "content": "<p>I am only interested in the Langlands Programme</p>",
        "id": 127202255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527507979
    },
    {
        "content": "<blockquote>\n<p>there was that whole week long discussion about transporting across equivs and I was thinking \"so use <code>transfer</code> or write a tactic\" bingo problem solved</p>\n</blockquote>\n<p>That's on my todo list. I'm going to write a short paper about my whole scheme experience for the ZFC people and I am going to have to get up to date as to exactly what we think is possible there</p>",
        "id": 127202302,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508088
    },
    {
        "content": "<blockquote>\n<p>it's called using interface to make your life better</p>\n</blockquote>\n<p>I need better interface search.</p>",
        "id": 127202312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508122
    },
    {
        "content": "<p>I thought we have google nowadays. Why isn't search easy?</p>",
        "id": 127202315,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508135
    },
    {
        "content": "<p>Why can't I write set.image_id and something pops up saying \"do you want to import data.set.basic\"?</p>",
        "id": 127202321,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508167
    },
    {
        "content": "<p>Can that be a thing one day?</p>",
        "id": 127202323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508171
    },
    {
        "content": "<p>Because nobody's written the code to do it. That's usually your answer.</p>",
        "id": 127202339,
        "sender_full_name": "Sean Leather",
        "timestamp": 1527508200
    },
    {
        "content": "<p>It could be. Maybe Lean gets tremendously popular, gets a research grant, and somebody gets hired to work on it to make it easier to use for mathematicians</p>",
        "id": 127202392,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527508215
    },
    {
        "content": "<blockquote>\n<p>Here's another constraint: all the variables on the RHS should appear on the LHS</p>\n</blockquote>\n<p>Is it possible to make a flowchart -- \"am I a good simp lemma?\"</p>",
        "id": 127202401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508229
    },
    {
        "content": "<blockquote>\n<p>It could be. Maybe Lean gets tremendously popular, gets a research grant, and somebody gets hired to work on it to make it easier to use for mathematicians</p>\n</blockquote>\n<p>How much does that cost in your CS world?</p>",
        "id": 127202484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508386
    },
    {
        "content": "<p>I could do all the costings for that other than salary</p>",
        "id": 127202487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508396
    },
    {
        "content": "<p>I have no idea how much you guys get paid</p>",
        "id": 127202488,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508401
    },
    {
        "content": "<p>the administration would be able to fill in the other boxes</p>",
        "id": 127202490,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508411
    },
    {
        "content": "<p>I'm meeting with EPSRC in two weeks</p>",
        "id": 127202537,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508449
    },
    {
        "content": "<p>I have several hours of meetings with them and I have already pre-warned them that I will be after money to spend on computer scientists</p>",
        "id": 127202540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508475
    },
    {
        "content": "<p>But it would be good to get an idea of how much to pay someone to do that job</p>",
        "id": 127202557,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527508517
    },
    {
        "content": "<p>I'm not too familiar with London CS pay, my general instinct is that it ranges from 30 ~ 70 thousand pounds / year</p>",
        "id": 127202970,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527509173
    },
    {
        "content": "<p>you could wait until Lean 4. We've been promised by <strong>Moses Schönfinkel</strong> that he wants to take a look at theorem search in Lean after the parser and tactics framework settles down</p>",
        "id": 127203100,
        "sender_full_name": "Andrew Ashworth",
        "timestamp": 1527509439
    },
    {
        "content": "<p>I just wrote a theorem that was in the library</p>",
        "id": 127203426,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527510044
    },
    {
        "content": "<p>yay me</p>",
        "id": 127203427,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527510045
    },
    {
        "content": "<p><code>#check topological_space.open_immersion_id </code></p>",
        "id": 127203430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527510048
    },
    {
        "content": "<p><code>#check topological_space.id_open_immersion</code></p>",
        "id": 127203433,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527510060
    },
    {
        "content": "<p>what should it be called?</p>",
        "id": 127203436,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527510066
    },
    {
        "content": "<p>The statement that the identity map is an open immersion</p>",
        "id": 127203444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527510073
    },
    {
        "content": "<p>I did the other one</p>",
        "id": 127203447,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527510082
    },
    {
        "content": "<p>is there a hard and fast convention for naming that extends beyond my <code>mul_one</code> levels?</p>",
        "id": 127203495,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527510136
    },
    {
        "content": "<p>I get the feeling that there's more of an art to it</p>",
        "id": 127203497,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527510144
    },
    {
        "content": "<p>What do the artists say about this one?</p>",
        "id": 127203498,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527510150
    },
    {
        "content": "<p>Yeah, Kevin is back to work! I'm amazed how fast he travels those math formalization <a href=\"https://en.wikipedia.org/wiki/K%C3%BCbler-Ross_model#Stages_of_grief\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/K%C3%BCbler-Ross_model#Stages_of_grief\">DTT stages</a> every month or so.</p>",
        "id": 127203562,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527510268
    },
    {
        "content": "<p>I'm much slower</p>",
        "id": 127203575,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527510321
    },
    {
        "content": "<p>I am trying to write a hard level for these CS guys</p>",
        "id": 127203932,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527510978
    },
    {
        "content": "<p>But I am stuck on something</p>",
        "id": 127203934,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527510982
    },
    {
        "content": "<p>If I have <code>x :\n  (presheaf_of_types_pullback_under_open_immersion ((zariski.structure_presheaf_of_rings R).to_presheaf_of_types) id\n     _).F\n    HU\n</code></p>",
        "id": 127203938,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527510990
    },
    {
        "content": "<p>in my context</p>",
        "id": 127203939,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527510994
    },
    {
        "content": "<p>oh I can answer my own question</p>",
        "id": 127203941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511008
    },
    {
        "content": "<p>oh no I can't</p>",
        "id": 127204007,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511135
    },
    {
        "content": "<p>Ok so there's my x</p>",
        "id": 127204009,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511139
    },
    {
        "content": "<p>and <code>presheaf_of_types_pullback_under_open_immersion</code> just has some definition</p>",
        "id": 127204015,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511151
    },
    {
        "content": "<p>which explictly says what its F bit is</p>",
        "id": 127204017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511167
    },
    {
        "content": "<p>and so probably this expands out to something with no .F in, by rfl</p>",
        "id": 127204021,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511182
    },
    {
        "content": "<p>but how do I find out what it expands to without having to work it out myself?</p>",
        "id": 127204022,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511196
    },
    {
        "content": "<p>I can't unfold <code>presheaf_of_types_pullback_under_open_immersion</code></p>",
        "id": 127204062,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511206
    },
    {
        "content": "<p>Do people need more context?</p>",
        "id": 127204066,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511209
    },
    {
        "content": "<p>I can provide a MWE but I just wondered if I'd already said enough for someone to tell me a trick</p>",
        "id": 127204070,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511227
    },
    {
        "content": "<p>Did you try <code>dsimp at x</code>?</p>",
        "id": 127204078,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527511265
    },
    {
        "content": "<p>I did</p>",
        "id": 127204083,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511284
    },
    {
        "content": "<p>it wasn't very effective</p>",
        "id": 127204089,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511299
    },
    {
        "content": "<p>it turned <code>presheaf_of_rings_pullback_under_open_immersion</code></p>",
        "id": 127204090,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511315
    },
    {
        "content": "<p>into <code>presheaf_of_types_pullback_under_open_immersion</code></p>",
        "id": 127204091,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511319
    },
    {
        "content": "<p>and then stopped</p>",
        "id": 127204093,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511322
    },
    {
        "content": "<p>Actually I should do it manually and see if it is refl</p>",
        "id": 127204146,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511383
    },
    {
        "content": "<p>Is it something I can git clone?</p>",
        "id": 127204154,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527511410
    },
    {
        "content": "<p>I have just done a bunch of editing to scheme.lean but not committed or pushed or anything</p>",
        "id": 127204298,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511645
    },
    {
        "content": "<p>I'd rather just move all those edits to a different file</p>",
        "id": 127204299,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511652
    },
    {
        "content": "<p>can git help me here?</p>",
        "id": 127204303,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511657
    },
    {
        "content": "<p>i.e. I want to push the file I have open</p>",
        "id": 127204309,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511667
    },
    {
        "content": "<p>but unfortunately it's an important file which I just broke</p>",
        "id": 127204312,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511673
    },
    {
        "content": "<p>goofing around</p>",
        "id": 127204326,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511682
    },
    {
        "content": "<p>you could create a broken branch</p>",
        "id": 127204355,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527511687
    },
    {
        "content": "<p>Can I do that in VS Code?</p>",
        "id": 127204372,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511729
    },
    {
        "content": "<p>I only have master</p>",
        "id": 127204380,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511744
    },
    {
        "content": "<p><code>git stash</code>, <code>git checkout -b experimental</code>, <code>git stash pop</code>, <code>git commit -a</code>, <code>git push --set-upstream experimental</code></p>",
        "id": 127204398,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527511787
    },
    {
        "content": "<p>I've got it</p>",
        "id": 127204401,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511797
    },
    {
        "content": "<p>you can problably do it in VScode but it would be longer</p>",
        "id": 127204403,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527511799
    },
    {
        "content": "<p>Oh crap I didn't stash</p>",
        "id": 127204445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511809
    },
    {
        "content": "<p>is that an issue?</p>",
        "id": 127204449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511812
    },
    {
        "content": "<p>maybe not</p>",
        "id": 127204453,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527511820
    },
    {
        "content": "<p>it wrote that to be on the safe side</p>",
        "id": 127204459,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527511834
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>      let y := (presheaf_of_types_pullback_under_open_immersion ((zariski.structure_presheaf_of_rings R).to_presheaf_of_types) id\n</pre></div>",
        "id": 127204471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511889
    },
    {
        "content": "<p>oops</p>",
        "id": 127204473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511892
    },
    {
        "content": "<p><a href=\"https://github.com/kbuzzard/lean-stacks-project/blob/broken/src/scheme.lean#L495\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-stacks-project/blob/broken/src/scheme.lean#L495\">https://github.com/kbuzzard/lean-stacks-project/blob/broken/src/scheme.lean#L495</a></p>",
        "id": 127204479,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511904
    },
    {
        "content": "<p>was what I meant to say</p>",
        "id": 127204480,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511907
    },
    {
        "content": "<p>line 495, I want to unfold that presheaf_of_types_pullback_under_open_immersion</p>",
        "id": 127204485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511921
    },
    {
        "content": "<p>no</p>",
        "id": 127204523,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511924
    },
    {
        "content": "<p>I want Lean to unfold it</p>",
        "id": 127204528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511928
    },
    {
        "content": "<p>I'm going to try it myself to see what I'm missing</p>",
        "id": 127204532,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527511936
    },
    {
        "content": "<p>This is really irritating</p>",
        "id": 127205165,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527513057
    },
    {
        "content": "<p>OK I minimised</p>",
        "id": 127206165,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527514733
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/e051858b8e3348e884610ace8cd87c20\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/e051858b8e3348e884610ace8cd87c20\">https://gist.github.com/kbuzzard/e051858b8e3348e884610ace8cd87c20</a></p>",
        "id": 127206167,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527514735
    },
    {
        "content": "<p>That is me setting up the theory of pre-semi-sheaves</p>",
        "id": 127206173,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527514749
    },
    {
        "content": "<p>which are a bit like distribs</p>",
        "id": 127206176,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527514757
    },
    {
        "content": "<p>and although the objects are a bit silly</p>",
        "id": 127206178,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527514768
    },
    {
        "content": "<p>I have tried to set up the theory in a sensible way</p>",
        "id": 127206184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527514785
    },
    {
        "content": "<p>and to create Line 53 of that script I had to do some work</p>",
        "id": 127206235,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527514811
    },
    {
        "content": "<p>which I am convinced a computer could have done for me</p>",
        "id": 127206236,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527514817
    },
    {
        "content": "<p>I cut and pasted the definition of <code>pre_semi_sheaf_of_rings_pullback</code></p>",
        "id": 127206243,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527514840
    },
    {
        "content": "<p>because I wanted to know what would happen if I unfolded it</p>",
        "id": 127206245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527514850
    },
    {
        "content": "<p>but the problem is that the unfolding is refl</p>",
        "id": 127206254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527514878
    },
    {
        "content": "<p>so the lemma has no name and I can't rewrite it to see what the answer is</p>",
        "id": 127206257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527514887
    },
    {
        "content": "<p>I have to work it out myself</p>",
        "id": 127206258,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527514890
    },
    {
        "content": "<p>This is an independent question</p>",
        "id": 127206265,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527514902
    },
    {
        "content": "<p>(Aside: Kevin, you can tell Github that your gist is a lean file. Then you/we have syntax highlighting.)</p>",
        "id": 127206396,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527515135
    },
    {
        "content": "<p>Oh cool</p>",
        "id": 127206440,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515173
    },
    {
        "content": "<p>but OK I have finally minimised my question</p>",
        "id": 127206445,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515183
    },
    {
        "content": "<p>my question is this gist which I'll attempt to highlight properly</p>",
        "id": 127206468,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515270
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/123384f9132d6db8650c3484e42bda81\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/123384f9132d6db8650c3484e42bda81\">https://gist.github.com/kbuzzard/123384f9132d6db8650c3484e42bda81</a></p>",
        "id": 127206469,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515272
    },
    {
        "content": "<p>That's my challenge to the CS people, I think</p>",
        "id": 127206511,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515299
    },
    {
        "content": "<p>I'm not sure I can prove that goal</p>",
        "id": 127206515,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515306
    },
    {
        "content": "<p>I'm not even sure that goal is true</p>",
        "id": 127206517,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515313
    },
    {
        "content": "<p>but I think it is</p>",
        "id": 127206519,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515316
    },
    {
        "content": "<p>for some reason it's a pain to prove though</p>",
        "id": 127206521,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515323
    },
    {
        "content": "<p>I'm hoping the file is fairly self-explanatory</p>",
        "id": 127206545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515376
    },
    {
        "content": "<p>It is \"math-true\", right?</p>",
        "id": 127206550,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527515397
    },
    {
        "content": "<p>exactly Johan</p>",
        "id": 127206592,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515407
    },
    {
        "content": "<p>Before I had something which was math-true</p>",
        "id": 127206597,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515414
    },
    {
        "content": "<p>and Kenny and Mario kept telling me it could be done by simp</p>",
        "id": 127206600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515425
    },
    {
        "content": "<p>I would like them to tell me how to do this one</p>",
        "id": 127206603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515437
    },
    {
        "content": "<p>Are the rings essential to the problem?</p>",
        "id": 127206673,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527515561
    },
    {
        "content": "<p>Or could you just use semi-quasi-demi-pre-sheaves of types?</p>",
        "id": 127206679,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527515589
    },
    {
        "content": "<p>No it's crucial they're rings</p>",
        "id": 127206859,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515922
    },
    {
        "content": "<p>because it's a trivial way to make it even harder</p>",
        "id": 127206863,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515933
    },
    {
        "content": "<p>this is a content-free statement from where I'm standing</p>",
        "id": 127206876,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515949
    },
    {
        "content": "<p>and if there aren't algorithms which currently prove content-free statements like this</p>",
        "id": 127206880,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515961
    },
    {
        "content": "<p>then I think that mathematicians will find it hard to learn Lean</p>",
        "id": 127206883,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515972
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> Can you fill in my sorry?</p>",
        "id": 127206885,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515987
    },
    {
        "content": "<p>Am I missing something easy?</p>",
        "id": 127206888,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527515997
    },
    {
        "content": "<p>Oh, he went back a couple of stages</p>",
        "id": 127206939,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527516018
    },
    {
        "content": "<p>I removed topology</p>",
        "id": 127206941,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516025
    },
    {
        "content": "<p>and open immersions</p>",
        "id": 127206944,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516030
    },
    {
        "content": "<blockquote>\n<p>Am I missing something easy?</p>\n</blockquote>\n<p>no</p>",
        "id": 127206945,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527516030
    },
    {
        "content": "<p>crap</p>",
        "id": 127206948,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516034
    },
    {
        "content": "<p>is that a provable but hard goal?</p>",
        "id": 127206950,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516043
    },
    {
        "content": "<p>well not really hard</p>",
        "id": 127206953,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527516050
    },
    {
        "content": "<p>i could do it</p>",
        "id": 127206954,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527516052
    },
    {
        "content": "<p>but not exactly easy</p>",
        "id": 127206957,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527516056
    },
    {
        "content": "<p>Teach me how to do it</p>",
        "id": 127206958,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516062
    },
    {
        "content": "<p>I can't do it</p>",
        "id": 127206962,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516065
    },
    {
        "content": "<p>and it's obvious</p>",
        "id": 127206963,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516066
    },
    {
        "content": "<p>and these are my least favourite things in Lean</p>",
        "id": 127206968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516075
    },
    {
        "content": "<p>teach me how to kill this pokemon</p>",
        "id": 127206970,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516085
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> you don't only want <code>schoolkid</code> tactic, you also want <code>kenny_lau</code> and <code>mario_carneiro</code></p>",
        "id": 127206971,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527516085
    },
    {
        "content": "<p>exactly</p>",
        "id": 127206972,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516090
    },
    {
        "content": "<p>Kenny</p>",
        "id": 127206974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516110
    },
    {
        "content": "<p>I'm up to here</p>",
        "id": 127206975,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516112
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">pre_semi_sheaves_iso</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">pre_semi_sheaf_of_rings</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">are_isomorphic_pre_semi_sheaves_of_rings</span>\n    <span class=\"o\">(</span><span class=\"n\">pre_semi_sheaf_of_rings_pullback</span> <span class=\"n\">F</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"n\">F</span>\n<span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">constructor</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">constructor</span><span class=\"o\">,</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">swap</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">constructor</span><span class=\"o\">,</span><span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">swap</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">U</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n        <span class=\"n\">unfold</span> <span class=\"n\">pre_semi_sheaf_of_rings_pullback</span><span class=\"o\">,</span>\n        <span class=\"n\">suffices</span> <span class=\"o\">:</span> <span class=\"n\">F</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span><span class=\"o\">),</span> <span class=\"k\">by</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n        <span class=\"k\">have</span> <span class=\"n\">reluctant_to_use</span> <span class=\"o\">:</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span> <span class=\"bp\">=</span> <span class=\"n\">U</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_id</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"n\">reluctant_to_use</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n      <span class=\"o\">},</span>\n      <span class=\"n\">intro</span> <span class=\"n\">U</span><span class=\"o\">,</span>\n      <span class=\"n\">simp</span><span class=\"o\">,</span>\n      <span class=\"n\">sorry</span>\n    <span class=\"o\">},</span>\n    <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"o\">},</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127206977,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516116
    },
    {
        "content": "<p>I'm trying</p>",
        "id": 127207029,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527516167
    },
    {
        "content": "<p>Thanks</p>",
        "id": 127207030,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516174
    },
    {
        "content": "<p>Are you writing a tactic?</p>",
        "id": 127207039,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516188
    },
    {
        "content": "<p>Don't try to solve the goal</p>",
        "id": 127207041,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516193
    },
    {
        "content": "<p>no</p>",
        "id": 127207042,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527516194
    },
    {
        "content": "<p>try to write a tactic which solves the goal</p>",
        "id": 127207043,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516198
    },
    {
        "content": "<p>I don't know how to write tactics</p>",
        "id": 127207045,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527516205
    },
    {
        "content": "<p>because this goal is solved by math_trivial</p>",
        "id": 127207046,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516209
    },
    {
        "content": "<p>This goal is the nightmare which I could avoid in my case of presheaves</p>",
        "id": 127207095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516249
    },
    {
        "content": "<p>but a pre_semi_sheaf does not have res</p>",
        "id": 127207098,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516257
    },
    {
        "content": "<p>so you have to bite the bullet</p>",
        "id": 127207100,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516263
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110026\">@Simon Hudon</span> Can you solve my goal with a tactic?</p>",
        "id": 127207109,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516301
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/123384f9132d6db8650c3484e42bda81\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/123384f9132d6db8650c3484e42bda81\">https://gist.github.com/kbuzzard/123384f9132d6db8650c3484e42bda81</a></p>",
        "id": 127207122,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516319
    },
    {
        "content": "<p>Last line</p>",
        "id": 127207124,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516321
    },
    {
        "content": "<p>the pre_semi_sheaves are isomorphic via the identity map</p>",
        "id": 127207128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516338
    },
    {
        "content": "<p>but checking the details is apparently a little tricky</p>",
        "id": 127207134,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516344
    },
    {
        "content": "<p>Would I have exactly the same problems in Mizar?</p>",
        "id": 127207138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516360
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110172\">@Assia Mahboubi</span> Would my goal be any easier to solve in Coq?</p>",
        "id": 127207186,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516406
    },
    {
        "content": "<p>I have isolated a frustration I have with dependent type theory</p>",
        "id": 127207194,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516425
    },
    {
        "content": "<p>I need to define a map from <code>F U</code> to <code>F (id '' U)</code></p>",
        "id": 127207202,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516467
    },
    {
        "content": "<p>where <code>id '' U</code> is the image of the set U under the identity map</p>",
        "id": 127207205,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516479
    },
    {
        "content": "<p>I define the map by rewriting <code>id '' U = U</code> and then using the identity</p>",
        "id": 127207244,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516502
    },
    {
        "content": "<p>and I never recover</p>",
        "id": 127207245,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516505
    },
    {
        "content": "<p>But I don't know any other way of doing it</p>",
        "id": 127207253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516530
    },
    {
        "content": "<p>Is there some sort of reason why I should not be proving this goal at all?</p>",
        "id": 127207319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527516614
    },
    {
        "content": "<p>How would you prove it without tactics?</p>",
        "id": 127207481,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527516882
    },
    {
        "content": "<p>he can't function without tactics</p>",
        "id": 127207490,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527516908
    },
    {
        "content": "<p>you would do <code>eq.drec</code> without tactics</p>",
        "id": 127207496,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527516913
    },
    {
        "content": "<p>I mean, I don't know any of the context so I'm not sure how the definitions relate to each other</p>",
        "id": 127207893,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1527517443
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> It will take me some time to catch up, the thread is long. Why did you use this equality at all? Aren't <code>F U</code> and <code>F (id '' U)</code> the exact same thing (aka convertible?). How can I play your formalization?</p>",
        "id": 127209693,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1527519997
    },
    {
        "content": "<p><a href=\"https://gist.github.com/kbuzzard/123384f9132d6db8650c3484e42bda81\" target=\"_blank\" title=\"https://gist.github.com/kbuzzard/123384f9132d6db8650c3484e42bda81\">https://gist.github.com/kbuzzard/123384f9132d6db8650c3484e42bda81</a></p>",
        "id": 127209705,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527520025
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110172\">@Assia Mahboubi</span> just prove the above</p>",
        "id": 127209710,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527520033
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> you know what, I take back my word, it's harder than I thought</p>",
        "id": 127209792,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527520145
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> ! Thanks! But I am more ignorant than you think : I meant, what install instructions should I follow. I am not a regular Lean user.</p>",
        "id": 127209810,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1527520195
    },
    {
        "content": "<p>oh, sorry</p>",
        "id": 127209855,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527520204
    },
    {
        "content": "<p>I think you can try it online</p>",
        "id": 127209865,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527520228
    },
    {
        "content": "<p><a href=\"https://leanprover.github.io/live/latest/\" target=\"_blank\" title=\"https://leanprover.github.io/live/latest/\">https://leanprover.github.io/live/latest/</a></p>",
        "id": 127209872,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527520261
    },
    {
        "content": "<p>Ok thanks, I am doing that now.</p>",
        "id": 127209873,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1527520263
    },
    {
        "content": "<p>Does one run into the same issues in Coq?</p>",
        "id": 127209968,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527520415
    },
    {
        "content": "<p>Does one run into the same issues in Mizar?</p>",
        "id": 127209974,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527520430
    },
    {
        "content": "<p>Which systems is this easy in?</p>",
        "id": 127210018,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527520450
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110172\">@Assia Mahboubi</span> I suspect you can see what I'm trying to do</p>",
        "id": 127210029,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527520478
    },
    {
        "content": "<p>I'm happy to let a lean expert like Mario or Kenny solve the lean one</p>",
        "id": 127210064,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527520515
    },
    {
        "content": "<p>I am trying to understand to what extent my worldview of mathematics is naive</p>",
        "id": 127210072,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527520543
    },
    {
        "content": "<p>lol it's been an hour already</p>",
        "id": 127210074,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527520547
    },
    {
        "content": "<p>The challenge was embedded well in a very long thread and I would imagine many have stopped reading</p>",
        "id": 127210131,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527520595
    },
    {
        "content": "<p>One could ask in a new thread, I think this question is sufficiently interesting</p>",
        "id": 127210149,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527520630
    },
    {
        "content": "<p>I am hoping that someone will come up with a curve ball solution of the form \"don't prove that, prove something that implies that</p>",
        "id": 127210215,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527520728
    },
    {
        "content": "<p>I tried to build up an interface</p>",
        "id": 127210220,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527520742
    },
    {
        "content": "<p>didn't work</p>",
        "id": 127210221,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527520743
    },
    {
        "content": "<p>Thanks <span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span>, it works like a charm. But unfortunately I will have to leave now (and I have not finished to read the problem <span class=\"emoji emoji-1f61e\" title=\"disappointed\">:disappointed:</span> ).  I will definitely look again later.</p>",
        "id": 127210326,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1527520906
    },
    {
        "content": "<p>see you</p>",
        "id": 127210332,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527520918
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span></p>",
        "id": 127210576,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521295
    },
    {
        "content": "<p>I had an idea</p>",
        "id": 127210577,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521297
    },
    {
        "content": "<p>but you would be quicker to implement it than me</p>",
        "id": 127210579,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521310
    },
    {
        "content": "<p>what is it</p>",
        "id": 127210581,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1527521316
    },
    {
        "content": "<p>and I have to tidy the kitchen anyway</p>",
        "id": 127210583,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521322
    },
    {
        "content": "<p>I claim that my definition is incomplete</p>",
        "id": 127210585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521330
    },
    {
        "content": "<p>as far as Lean is concerned</p>",
        "id": 127210586,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521334
    },
    {
        "content": "<p>I am missing some extra structure</p>",
        "id": 127210587,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521341
    },
    {
        "content": "<p>which can be filled in easily</p>",
        "id": 127210591,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521345
    },
    {
        "content": "<p>Is the \"correct\" object a pre_semi_sheaf whatever, but also equipped with maps res : F U -&gt; F V whenever U = V</p>",
        "id": 127210600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521373
    },
    {
        "content": "<p>plus axiom that res U U = id</p>",
        "id": 127210603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521389
    },
    {
        "content": "<p>plus axiom of composition</p>",
        "id": 127210604,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521395
    },
    {
        "content": "<p>res U V then res V W is res U W</p>",
        "id": 127210649,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521408
    },
    {
        "content": "<p>Given my stupid annoying structure</p>",
        "id": 127210654,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521417
    },
    {
        "content": "<p>can it be beefed up to such a structure</p>",
        "id": 127210655,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521424
    },
    {
        "content": "<p>and for this beefed-up structure</p>",
        "id": 127210657,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521431
    },
    {
        "content": "<p>can the map be defined to be res</p>",
        "id": 127210659,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521436
    },
    {
        "content": "<p>and then we deduce the result for the stupid structure</p>",
        "id": 127210673,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521449
    },
    {
        "content": "<p>My experience with schemes tells me</p>",
        "id": 127210679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521463
    },
    {
        "content": "<p>that when the map is res</p>",
        "id": 127210680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521467
    },
    {
        "content": "<p>all the hard proofs become rfl</p>",
        "id": 127210684,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521471
    },
    {
        "content": "<p>maybe not the ring one</p>",
        "id": 127210688,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521480
    },
    {
        "content": "<p>the ring one we have to use some equiv tactic thing</p>",
        "id": 127210690,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527521485
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">definition</span> <span class=\"n\">pre_semi_sheaf_of_rings_pullback_setmap</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">PR</span> <span class=\"o\">:</span> <span class=\"n\">pre_semi_sheaf_of_rings</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">pre_semi_sheaf_of_rings</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">V</span><span class=\"o\">,</span><span class=\"n\">PR</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">pre_semi_sheaves_iso_setmap</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">pre_semi_sheaf_of_rings</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">are_isomorphic_pre_semi_sheaves_of_rings</span>\n    <span class=\"o\">(</span><span class=\"n\">pre_semi_sheaf_of_rings_pullback_setmap</span> <span class=\"n\">F</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨⟨λ</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n <span class=\"bp\">⟨λ</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">),</span> <span class=\"n\">id</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span>\n\n<span class=\"kn\">definition</span> <span class=\"n\">pre_semi_sheaf_of_rings_pullback</span>\n  <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">PR</span> <span class=\"o\">:</span> <span class=\"n\">pre_semi_sheaf_of_rings</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">pre_semi_sheaf_of_rings</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">F</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">V</span><span class=\"o\">,</span><span class=\"n\">PR</span><span class=\"bp\">.</span><span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">V</span><span class=\"o\">)</span>\n<span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">pre_semi_sheaves_iso</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">pre_semi_sheaf_of_rings</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">are_isomorphic_pre_semi_sheaves_of_rings</span>\n    <span class=\"o\">(</span><span class=\"n\">pre_semi_sheaf_of_rings_pullback</span> <span class=\"n\">F</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"n\">F</span>\n<span class=\"o\">:=</span> <span class=\"k\">begin</span>\n  <span class=\"n\">convert</span> <span class=\"n\">pre_semi_sheaves_iso_setmap</span> <span class=\"n\">X</span> <span class=\"n\">F</span><span class=\"o\">,</span>\n  <span class=\"n\">change</span> <span class=\"n\">pre_semi_sheaf_of_rings_pullback_setmap</span> <span class=\"n\">F</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">id</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">congr</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"n\">U</span><span class=\"o\">,</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_id</span><span class=\"o\">]</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 127216106,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527531457
    },
    {
        "content": "<p>I was hoping you'd show up</p>",
        "id": 127216158,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527531498
    },
    {
        "content": "<p>I thought you'd like this one</p>",
        "id": 127216160,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527531508
    },
    {
        "content": "<p>I am cooking, will look later. Did you do it?</p>",
        "id": 127216179,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527531540
    },
    {
        "content": "<p>Yes</p>",
        "id": 127216188,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527531566
    },
    {
        "content": "<p>Convert? What does that do?</p>",
        "id": 127216190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1527531579
    },
    {
        "content": "<p>I split your construction into two pieces: pullback of a presheaf by a functor between sites and the functor between sites induced by a map of spaces</p>",
        "id": 127216241,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527531608
    },
    {
        "content": "<p><code>convert</code> basically says \"this is the term I want to be the proof, aside from some fiddling about the type not being definitionally equal to the desired one\"</p>",
        "id": 127216251,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527531640
    },
    {
        "content": "<p>so it generates a new goal which is that the type of the term you provided is the same as the goal type</p>",
        "id": 127216267,
        "sender_full_name": "Reid Barton",
        "timestamp": 1527531670
    },
    {
        "content": "<blockquote>\n<p><a href=\"#narrow/stream/116395-maths/subject/ZFC.20equality/near/127204479\" title=\"#narrow/stream/116395-maths/subject/ZFC.20equality/near/127204479\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/subject/ZFC.20equality/near/127204479</a></p>\n</blockquote>\n<p>Here's how you can use <code>cast</code> as a morphism without any <code>res</code> trickery:</p>\n<div class=\"codehilite\"><pre><span></span>def pre_semi_sheaf_of_rings.cast {α} (FPT : pre_semi_sheaf_of_rings α)\n  {U V : set α} (e : U = V) : FPT.F U → FPT.F V :=\ncast (congr_arg _ e)\n\ninstance pre_semi_sheaf_of_rings.cast.is_ring_hom\n  {α} (FPT : pre_semi_sheaf_of_rings α) {U V : set α} (e : U = V) :\n  is_ring_hom (FPT.cast e) :=\nby subst e; exact is_ring_hom.id\n\ntheorem pre_semi_sheaf_of_rings.cast_comp\n  {α} (FPT : pre_semi_sheaf_of_rings α) {U V W : set α}\n  (e₁ : U = V) (e₂ : V = W) (a) :\n  FPT.cast e₂ (FPT.cast e₁ a) = FPT.cast (e₁.trans e₂) a :=\nby substs e₂ e₁; exact rfl\n\ntheorem presheaves_iso (X : Type) (F : pre_semi_sheaf_of_rings X) :\nare_isomorphic_pre_semi_sheaves_of_rings\n    (pre_semi_sheaf_of_rings_pullback F id) F :=\nbegin\n  refine ⟨⟨λ U, F.cast (by simp), by apply_instance⟩,\n     ⟨λ U, F.cast (by simp), by apply_instance⟩, _, _⟩;\n  { intros U, funext a,\n    dsimp [is_identity_morphism_of_pre_semi_sheaves_of_rings,\n      composition_of_morphisms_of_pre_semi_sheaves_of_rings],\n    rw F.cast_comp, refl }\nend\n</pre></div>",
        "id": 127219336,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1527537379
    },
    {
        "content": "<blockquote>\n<p>I think you can try it online</p>\n</blockquote>\n<p>I think it's a bad idea to tell people to use the online version. Maybe it's my computer fault, but I find it too slow to be usable. I think it's very bad advertisement. So let me try something new: <a href=\"https://www.math.u-psud.fr/~pmassot/en/misc/index.html\" target=\"_blank\" title=\"https://www.math.u-psud.fr/~pmassot/en/misc/index.html\">https://www.math.u-psud.fr/~pmassot/en/misc/index.html</a> <span class=\"user-mention\" data-user-id=\"110172\">@Assia Mahboubi</span> I guess you have a Debian/Ubuntu computer at hand. Could you try using my installation script? It's meant to be a single step, one minute fully setup Lean install  (this obviously includes a compiled mathlib).</p>",
        "id": 127241361,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527583880
    },
    {
        "content": "<p>Does <code>https://www.math.u-psud.fr/~pmassot/files/lean/install_lean.sh</code> contain precompiled mathlib nightlies?</p>",
        "id": 127241525,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527584091
    },
    {
        "content": "<p>yes</p>",
        "id": 127241534,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527584105
    },
    {
        "content": "<p>Nice! I guess in this file, right? <code>https://www.math.u-psud.fr/~pmassot/files/lean/.lean.tar.gz</code></p>",
        "id": 127241549,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527584124
    },
    {
        "content": "<p>yes</p>",
        "id": 127241555,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527584132
    },
    {
        "content": "<p>Ok, you should change the topic of your anouncement. This deserves more PR.</p>",
        "id": 127241560,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527584150
    },
    {
        "content": "<p>I think this deserves to be taken up by Mario and Johannes. Right now, I set up an emergency solution. I don't want Assia to go away because Javascript was never meant to run proof assistants</p>",
        "id": 127241637,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527584241
    },
    {
        "content": "<p>But now I need to stop. This was meant to be a no Lean day. I'll go to my IHES office where I can't install anything on the computer (and nothing Lean related is pre-installed) and get some real work done</p>",
        "id": 127241710,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527584334
    },
    {
        "content": "<p>Have fun!</p>",
        "id": 127241720,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527584348
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> . Yes, it was very slow and I eventually gave up. I was planning to (re)install Lean on my machine today. What is your script doing? Will it be easy for me to update my Lean later? My plan is to look at <span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> 's stack project and he says <a href=\"https://github.com/kbuzzard/lean-stacks-project\" target=\"_blank\" title=\"https://github.com/kbuzzard/lean-stacks-project\">here</a> that I need a version from nightly of 2018-04-06. Does it matter? And yes, I have Debian/Ubuntu OS.</p>",
        "id": 127241724,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1527584351
    },
    {
        "content": "<p>It does what it says in <a href=\"https://www.math.u-psud.fr/~pmassot/files/lean/install_lean.sh\" target=\"_blank\" title=\"https://www.math.u-psud.fr/~pmassot/files/lean/install_lean.sh\">https://www.math.u-psud.fr/~pmassot/files/lean/install_lean.sh</a></p>",
        "id": 127241791,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527584415
    },
    {
        "content": "<p>install VScode using MS debian package, manually install the Lean extension, download Lean 3.4.1 and set the bash path variable, download precompiled mathlib</p>",
        "id": 127241810,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527584465
    },
    {
        "content": "<p>Let me check you can run Kevin's code using this version of mathlib</p>",
        "id": 127241834,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527584515
    },
    {
        "content": "<p>[sorry, wrong topic]</p>",
        "id": 127241835,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527584518
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Thanks for the answer to my silly question: I should have open the file first. It looks great. I'll wait from a confirmation (from you or from anyone else) and try (I guess that otherwise it's just a matter of changing a couple of lines in your script). Happy no-Lean day.</p>",
        "id": 127242075,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1527584813
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110172\">@Assia Mahboubi</span> It will be super easy to update Lean later.</p>",
        "id": 127242147,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527584903
    },
    {
        "content": "<p>Patrick's script just puts together the steps that you would otherwise perform manually.</p>",
        "id": 127242154,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527584926
    },
    {
        "content": "<p>And he has compiled mathlib for you. Which saves you an hour of coffee breaks <span class=\"emoji emoji-1f609\" title=\"wink\">:wink:</span></p>",
        "id": 127242162,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527584948
    },
    {
        "content": "<p>Hi <span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> , thanks for the help. I am trying it now.</p>",
        "id": 127242169,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1527584963
    },
    {
        "content": "<p>It seems you still need to manually copy mathlib to the stacks directory. Maybe I shouldn't have skipped using Sbeastian's elan. So, after running my script, the next steps are: <code>git clone https://github.com/kbuzzard/lean-stacks-project.git</code> then <code>cp -r ~/.lean/_target/ lean-stacks-project</code> then <code>cd lean-stacks-project</code>, <code>lean --make</code></p>",
        "id": 127242352,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527585275
    },
    {
        "content": "<p>There will probably be some errors because this repo is still a messy playground</p>",
        "id": 127242357,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527585295
    },
    {
        "content": "<p>Ok, I confirm I'm able to do that and then open the lean-stacvks-project folder in VScode and open scheme.lean without error. Assia: the first command to learn after opening a Lean file in VScode (and putting the cursor anywhere in that file) is Ctrl-shift-return which opens the Lean message window where all the interesting communication with lean takes place</p>",
        "id": 127242554,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527585680
    },
    {
        "content": "<p>Now I'll really go to IHES where I'll probably open Zulip anyway, but not VScode</p>",
        "id": 127242565,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527585722
    },
    {
        "content": "<p>Thanks again! Meanwhile I tried the instruction provided in the README.md (using <code>leanpkg</code>) and it is now indeed building stuff. If it goes wrong I''fall back to your suggestion.</p>",
        "id": 127242718,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1527586067
    },
    {
        "content": "<p>It's very long (and warms my office) : it seems that a mathlib has been copied and is being re-compiled in a <code>_target/dep</code> sub-directory...</p>",
        "id": 127242887,
        "sender_full_name": "Assia Mahboubi",
        "timestamp": 1527586356
    },
    {
        "content": "<p>Yes, we know that feeling... (-;</p>",
        "id": 127242954,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527586514
    },
    {
        "content": "<p>I wasn't joking when I told you about the \"hour of coffee breaks\"</p>",
        "id": 127242957,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1527586552
    },
    {
        "content": "<p>This is exactly what I tried to avoid</p>",
        "id": 127243006,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527586647
    },
    {
        "content": "<p>My instructions should bypass mathlib compilation</p>",
        "id": 127243011,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527586677
    },
    {
        "content": "<p>(I'm waiting for my train)</p>",
        "id": 127243059,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1527586751
    }
]