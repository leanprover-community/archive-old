[
    {
        "content": "<p><code>example (X : Type) (R : Type) (D : R → set X) (γ : Type) (f : γ → R) :\n  ⋃₀(D '' set.range f) = ⋃ (i : γ), D (f i) := sorry</code></p>",
        "id": 125683378,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524679228
    },
    {
        "content": "<p>I was rather hoping simp would do this one...</p>",
        "id": 125683386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524679241
    },
    {
        "content": "<p>is there some lemma?</p>",
        "id": 125683389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524679248
    },
    {
        "content": "<p>or do I stick with my 25 line tactic proof :-/</p>",
        "id": 125683403,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524679267
    },
    {
        "content": "<p>use <code>D '' range f = range (D o f)</code> and then hopefully <code>U range f = U i, f i</code> is a theorem</p>",
        "id": 125683516,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524679437
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">⋃₀</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">z</span><span class=\"o\">,</span> <span class=\"bp\">⟨λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x3</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h2</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x3</span><span class=\"o\">,</span> <span class=\"n\">h2</span> <span class=\"bp\">▸</span> <span class=\"n\">h1</span> <span class=\"bp\">▸</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n<span class=\"bp\">λ</span> <span class=\"bp\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x1</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">f</span> <span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"n\">x2</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h1</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"n\">h3</span><span class=\"bp\">⟩⟩</span>\n</pre></div>",
        "id": 125683659,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524679574
    },
    {
        "content": "<p>That's my 25 line tactic proof!</p>",
        "id": 125683764,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524679698
    },
    {
        "content": "<p>interesting</p>",
        "id": 125683768,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524679709
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">ext</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">V</span> <span class=\"n\">HV</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">HV</span> <span class=\"k\">with</span> <span class=\"n\">HV</span> <span class=\"n\">HX</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">HV</span> <span class=\"k\">with</span> <span class=\"n\">r</span> <span class=\"n\">HR</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">HR</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">Hi</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">Hi</span><span class=\"o\">,</span><span class=\"n\">rw</span> <span class=\"n\">HR</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">,</span>\n\n  <span class=\"n\">intro</span> <span class=\"n\">H</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"n\">V</span> <span class=\"n\">HV</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">HV</span> <span class=\"k\">with</span> <span class=\"n\">HV</span> <span class=\"n\">Hx</span><span class=\"o\">,</span>\n  <span class=\"n\">cases</span> <span class=\"n\">HV</span> <span class=\"k\">with</span> <span class=\"n\">i</span> <span class=\"n\">Hi</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">V</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n  <span class=\"n\">assumption</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">),</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">refl</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">Hi</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 125683776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524679722
    },
    {
        "content": "<p>use <code>rcases</code> :P</p>",
        "id": 125683779,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524679730
    },
    {
        "content": "<p>It must be, because we both start with the same line and then do nothing</p>",
        "id": 125683783,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524679734
    },
    {
        "content": "<p>other than following our nose</p>",
        "id": 125683795,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524679751
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">⋃₀</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_univ</span><span class=\"o\">,</span><span class=\"err\">←</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">image_comp</span><span class=\"o\">],</span>\n  <span class=\"k\">show</span> <span class=\"err\">⋃₀</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"err\">∘</span> <span class=\"n\">f</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">univ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"err\">∘</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"n\">i</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Union_eq_sUnion_image</span><span class=\"o\">],</span>\n  <span class=\"kn\">end</span>\n</pre></div>",
        "id": 125685487,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524681748
    },
    {
        "content": "<p>don't even need the show</p>",
        "id": 125685555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524681851
    },
    {
        "content": "<p>Mario's insight is that we reduce the number of functions from 2 to 1 and then simp can handle it</p>",
        "id": 125685585,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524681912
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">set</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">⋃₀</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">Union_eq_sUnion_image</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range_comp</span><span class=\"o\">]</span>\n</pre></div>",
        "id": 125685871,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524682251
    },
    {
        "content": "<p>do I win?</p>",
        "id": 125685873,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1524682253
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/wqULCViCYbpmWIeiX5WCeQ76/IMG_20180425_113712650.jpg\" target=\"_blank\" title=\"IMG_20180425_113712650.jpg\">IMG_20180425_113712650.jpg</a></p>\n<div class=\"message_inline_image\"><a href=\"/user_uploads/3121/wqULCViCYbpmWIeiX5WCeQ76/IMG_20180425_113712650.jpg\" target=\"_blank\" title=\"IMG_20180425_113712650.jpg\"><img src=\"/user_uploads/3121/wqULCViCYbpmWIeiX5WCeQ76/IMG_20180425_113712650.jpg\"></a></div>",
        "id": 125686366,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524682764
    },
    {
        "content": "<p>saw that on the way in today and thought of you</p>",
        "id": 125686376,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524682796
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> your 25 line tactic proof doesn't seem to work (fails at <code>cases H with V HV,</code>). I was curious how my tactics cope with this one. :-)</p>",
        "id": 125697140,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524697600
    },
    {
        "content": "<p>works for me</p>",
        "id": 125697303,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524697906
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>import data.set.lattice\n\nexample (X : Type) (R : Type) (D : R → set X) (γ : Type) (f : γ → R) :\n  ⋃₀(D &#39;&#39; set.range f) = ⋃ (i : γ), D (f i) :=\nbegin\n  apply set.ext,\n  ... +25 lines\nend\n</pre></div>",
        "id": 125697366,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524697976
    },
    {
        "content": "<p>Simon's code in the cases thread didn't work for me without a minor fix</p>",
        "id": 125712128,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728078
    },
    {
        "content": "<p>I wonder whether we are using different versions of Lean</p>",
        "id": 125712129,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728085
    },
    {
        "content": "<p>I'm running 04-20 now, along with the latest mathlib. Are you?</p>",
        "id": 125712137,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524728110
    },
    {
        "content": "<p>you are no doubt bleeding edge, I am enjoying the stability of 4-06</p>",
        "id": 125712138,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728115
    },
    {
        "content": "<p>Upgrading is such a chore</p>",
        "id": 125712140,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728125
    },
    {
        "content": "<p>I need to do it on three machines</p>",
        "id": 125712141,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728130
    },
    {
        "content": "<p>and make all the olean files</p>",
        "id": 125712142,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728133
    },
    {
        "content": "<p>and I just want to concentrate on getting schemes done</p>",
        "id": 125712144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728143
    },
    {
        "content": "<p>Everything is taking longer than expected</p>",
        "id": 125712184,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728166
    },
    {
        "content": "<p>because I have a bunch of commutative diagrams / exact sequences</p>",
        "id": 125712188,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728188
    },
    {
        "content": "<p>and I continually want to replace an object with a canonically isomorphic object</p>",
        "id": 125712189,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728201
    },
    {
        "content": "<p>and claim that everything is still commutative / exact</p>",
        "id": 125712190,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728208
    },
    {
        "content": "<p>I hate computers</p>",
        "id": 125712195,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728231
    },
    {
        "content": "<p>In maths you just say it works and nobody even notices</p>",
        "id": 125712206,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728241
    },
    {
        "content": "<p>My instinct always says there's a proof architectural solution to such problems</p>",
        "id": 125712261,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524728303
    },
    {
        "content": "<p>but sometimes you just have to do it the long way a few times before you can see the pattern</p>",
        "id": 125712268,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524728357
    },
    {
        "content": "<p>but once you identify the pattern, it's a short hop to formalized patterns and then lemmas that save you the boilerplate work</p>",
        "id": 125712269,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524728397
    },
    {
        "content": "<p>It is that way of thinking which led me to all this \"unique-R-algebra-hom\" stuff</p>",
        "id": 125712538,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728901
    },
    {
        "content": "<p>The proofs that the diagrams commute are just \"this is a map with a property, so it's the only map with the property, so it's equal to the map we want\"</p>",
        "id": 125712543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728945
    },
    {
        "content": "<p>I think a mathematician would instinctively prove commutativity using a diagram chase</p>",
        "id": 125712549,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728968
    },
    {
        "content": "<p>\"where does this element go? This way it goes here, that way it goes there, oh look they're the same\"</p>",
        "id": 125712552,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524728987
    },
    {
        "content": "<p>but seeing as I have a pathological fear of quotient types I had to find another way</p>",
        "id": 125712555,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524729000
    },
    {
        "content": "<p>I think that was a good idea on your part</p>",
        "id": 125712597,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524729018
    },
    {
        "content": "<p>I don't think my universal property methods are much quicker</p>",
        "id": 125712599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524729021
    },
    {
        "content": "<p>in the sense that if I asked Kenny to prove the diagrams commute he would just do the chase</p>",
        "id": 125712601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524729039
    },
    {
        "content": "<p>and the proof would be about as long, I suspect</p>",
        "id": 125712602,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524729047
    },
    {
        "content": "<p>but my methods are easier to explain</p>",
        "id": 125712603,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524729060
    },
    {
        "content": "<p>I think Kenny is good at getting to the end, but he needs to work on his long game</p>",
        "id": 125712608,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524729079
    },
    {
        "content": "<p>they just involve setting type class inference resolution depth to 93 occasionally ;-)</p>",
        "id": 125712609,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524729079
    },
    {
        "content": "<p>there is a lot more possibility for \"golfing\" at the large scale, planning out the right lemmas that give you the most bang for the buck</p>",
        "id": 125712654,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524729144
    },
    {
        "content": "<p>and that's where stuff like <code>is_unique_R_hom</code> come in</p>",
        "id": 125712668,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524729181
    },
    {
        "content": "<p>I think the difference between Kenny's and my answer to your union-image-range question demonstrate this well</p>",
        "id": 125712717,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524729286
    },
    {
        "content": "<p>on the one hand you can use matches and rfl and anonymous instances to just write out the whole thing from first principles, it's not so hard</p>",
        "id": 125712726,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524729325
    },
    {
        "content": "<p>and on the other you could chain together two lemmas that were written exactly for the purpose</p>",
        "id": 125712729,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524729345
    },
    {
        "content": "<p>I think it's a bit unfortunate that proofs from lemmas lose a lot relative to proofs using basic dependent type theory simply because they have names (and lean's naming convention averages 20 characters or so)</p>",
        "id": 125712781,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524729444
    },
    {
        "content": "<p>which is a bit misleading since something like <code>λ ⟨a, b⟩,</code> is actually quite a bit more complicated under the hood than it looks</p>",
        "id": 125712827,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524729498
    },
    {
        "content": "<p>In practice, my current problem is that I now know enough about the system to be able to prove these things from first principles, I know that ideally this is not what I should be doing, but I do not have an encyclopedic knowledge of the lemmas which are there and to be honest I am unclear about the roadmap for getting this knowledge.</p>",
        "id": 125713016,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524729875
    },
    {
        "content": "<p>I am not even sure this qualifies as a \"problem\"</p>",
        "id": 125713017,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524729888
    },
    {
        "content": "<p>but we saw it twice yesterday</p>",
        "id": 125713020,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524729896
    },
    {
        "content": "<p>My ability to retain information is not what it was; I can read the source code and think \"oh that is cool\" but then not remember everything that is there, unlike when I was in my 20s</p>",
        "id": 125713032,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524729940
    },
    {
        "content": "<p>I need to develop (as Kenny once pointed out) a good feeling for \"what _should_ be there\"</p>",
        "id": 125713034,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524729961
    },
    {
        "content": "<p>and then simply check that it is</p>",
        "id": 125713071,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524729965
    },
    {
        "content": "<p>Having said all that, I would rather be here than where I was 6 months ago</p>",
        "id": 125713078,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524729986
    },
    {
        "content": "<p>where I had to ask because I simply had no idea how to prove what I needed</p>",
        "id": 125713079,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524730001
    },
    {
        "content": "<p>I agree with kenny's quote. I certainly don't remember all the lemmas in mathlib, I just think about the things that should exist and make sure they are actually there. Your question about the union-image-range seems like a step in the right direction, you are getting the sense for what form the lemmas should take, but in that case union-image-range is three things and I like lemmas to talk about two things</p>",
        "id": 125713198,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524730229
    },
    {
        "content": "<p>One thing that has helped me terrifically is trying to use Kenny's localization work, because it was written in a completely different style to mathlib. Rather than being written by someone who knew everything and wanted to write an interface, it was written by someone who knew nothing and was learning the material.</p>",
        "id": 125713211,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524730315
    },
    {
        "content": "<p>In practice I said to Kenny \"can you please give me a function which given a ring R and a multiplicative subset S, returns the ring R[1/S]\"</p>",
        "id": 125713250,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524730338
    },
    {
        "content": "<p>As far as what you should learn by reading printouts, I would say focus on definitions, that's the core around which the lemmas are built</p>",
        "id": 125713251,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524730339
    },
    {
        "content": "<p>and he said \"sure\" and a day or so later I had that ring</p>",
        "id": 125713254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524730351
    },
    {
        "content": "<p>and then I realised I could do nothing with it</p>",
        "id": 125713257,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524730365
    },
    {
        "content": "<p>so I kept asking for more and he kept making it (basically by return of post)</p>",
        "id": 125713259,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524730380
    },
    {
        "content": "<p>and by the end of it I had a feeling for what it meant to build a mathlib file</p>",
        "id": 125713269,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524730408
    },
    {
        "content": "<p>writing for others is definitely harder than writing for yourself</p>",
        "id": 125713313,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524730450
    },
    {
        "content": "<p>focus on definitions -- thanks for the tip!</p>",
        "id": 125713314,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524730458
    },
    {
        "content": "<p>writing for others -- Kenny and I have worked really well as a team, I knew the maths and he did the dirty work</p>",
        "id": 125713319,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524730487
    },
    {
        "content": "<p>you can look at the lemmas, but your reaction to them should be \"oh, well of course\"</p>",
        "id": 125713322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524730497
    },
    {
        "content": "<p>and the really cool thing about the localization stuff was once he'd done the really primitive dirty work of proving that some map had some universal property, all the other universal properties which people used in practice could be deduced from Kenny's, and I could write that code myself</p>",
        "id": 125713381,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524730623
    },
    {
        "content": "<p>you have probably seen this phenomenon before</p>",
        "id": 125713386,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524730632
    },
    {
        "content": "<p>technical code full of [[ ]] and quot.sound or whatever to get stuff off the ground</p>",
        "id": 125713388,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524730655
    },
    {
        "content": "<p>but then the proofs get more conceptual after a while</p>",
        "id": 125713389,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524730663
    },
    {
        "content": "<p>oh yes</p>",
        "id": 125713390,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524730668
    },
    {
        "content": "<p>I expect that outside the free_group file we will never see <code>list (A x bool)</code></p>",
        "id": 125713430,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524730688
    },
    {
        "content": "<p>it's been a fascinating learning experience.</p>",
        "id": 125713434,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524730695
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"o\">:</span> <span class=\"n\">R</span> <span class=\"bp\">→</span> <span class=\"n\">set</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">γ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">γ</span> <span class=\"bp\">→</span> <span class=\"n\">R</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"err\">⋃₀</span><span class=\"o\">(</span><span class=\"n\">D</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">range</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"err\">⋃</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"n\">γ</span><span class=\"o\">),</span> <span class=\"n\">D</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">obviously</span>\n</pre></div>",
        "id": 125718755,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524741264
    },
    {
        "content": "<p>Well it does look obvious to me.</p>",
        "id": 125732464,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524761587
    },
    {
        "content": "<p>I think we are probably a long way from a tactic which will be able to prove everything which looks obvious to me</p>",
        "id": 125732467,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524761609
    },
    {
        "content": "<p>but I want to start along down that road.</p>",
        "id": 125732471,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524761622
    },
    {
        "content": "<p>Kevin,  you may have missed the point</p>",
        "id": 125732521,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524761658
    },
    {
        "content": "<p>Scott <em>does</em> have a tactic called <code>obviously</code> which does the job here</p>",
        "id": 125732527,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524761677
    },
    {
        "content": "<p><a href=\"https://github.com/semorrison/lean-tidy/blob/f2303e5376c3520d4432fd073fdb1fd0dfb1f8a8/examples/20180426-kbuzzard.lean\" target=\"_blank\" title=\"https://github.com/semorrison/lean-tidy/blob/f2303e5376c3520d4432fd073fdb1fd0dfb1f8a8/examples/20180426-kbuzzard.lean\">https://github.com/semorrison/lean-tidy/blob/f2303e5376c3520d4432fd073fdb1fd0dfb1f8a8/examples/20180426-kbuzzard.lean</a></p>",
        "id": 125732559,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524761724
    },
    {
        "content": "<p><a href=\"https://github.com/semorrison/lean-tidy/blob/b8c6661d4ea74d5e8b5df25b2225f4353e5c6bf5/src/tidy/tidy.lean#L136\" target=\"_blank\" title=\"https://github.com/semorrison/lean-tidy/blob/b8c6661d4ea74d5e8b5df25b2225f4353e5c6bf5/src/tidy/tidy.lean#L136\">https://github.com/semorrison/lean-tidy/blob/b8c6661d4ea74d5e8b5df25b2225f4353e5c6bf5/src/tidy/tidy.lean#L136</a></p>",
        "id": 125732580,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524761750
    },
    {
        "content": "<p>right</p>",
        "id": 125732772,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524761991
    },
    {
        "content": "<p>but unfortunately I suspect that it will not prove _everything_ which is obvious</p>",
        "id": 125732776,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524762001
    },
    {
        "content": "<p>He's working on it</p>",
        "id": 125732826,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1524762011
    },
    {
        "content": "<p>In particular I bet it won't prove that if there exists a,b,c,d nats with <code>a^2+b^2+c^2+d^2 = 2n</code> then there exists <code>w x y z</code> nats with <code>w^2+x^2+y^2+z^2=2n</code> and <code>w^2+x^2</code> even</p>",
        "id": 125732858,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1524762080
    },
    {
        "content": "<p>It would be nice to have a better name than <code>obviously</code>. Suggestions welcome. <code>follow_your_nose</code> is a a possibility :-)</p>",
        "id": 125750337,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524788012
    },
    {
        "content": "<p>I think your <code>a^2+b^2+c^2+d^2 = 2n</code> is far from \"obvious\" in this sense. I mean, it's easy, but I don't think \"let's think about the parity of the numbers, and the multiplicities of the parities, and solve the problem merely by permuting\" counts as \"following your nose\".</p>",
        "id": 125750401,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1524788139
    },
    {
        "content": "<p><code>left_as_an_exercise_to_the_reader</code></p>",
        "id": 125750639,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524788631
    },
    {
        "content": "<p>Or <code>beside_the_point</code></p>",
        "id": 125750695,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524788681
    },
    {
        "content": "<p>or <code>omitted</code></p>",
        "id": 125750703,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524788704
    },
    {
        "content": "<p>I think <code>by beside_the_point</code> is a hilarious substitute for <code>sorry</code></p>",
        "id": 125751085,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524789442
    },
    {
        "content": "<p>but none of those suggest that the proof is actually done automatically</p>",
        "id": 125751140,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524789501
    },
    {
        "content": "<p>How about <code>magic</code> or <code>automagic</code>? :D</p>",
        "id": 125751148,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524789539
    },
    {
        "content": "<p>I think I might like <code>chocolate</code> even better, since Uncyclopedia mentions it's a respectable proof technique:</p>\n<p><a href=\"http://uncyclopedia.wikia.com/wiki/Proof\" target=\"_blank\" title=\"http://uncyclopedia.wikia.com/wiki/Proof\">http://uncyclopedia.wikia.com/wiki/Proof</a></p>",
        "id": 125751215,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1524789640
    },
    {
        "content": "<p>Here's a nice proof of that statement: Given any three numbers <code>a b c</code>, I claim that the sum of two of them is even. If <code>a+b</code> is odd, and <code>a+c</code> is odd, and <code>b+c</code> is odd, then <code>(a+b)+(a+c)+(b+c)=2*(a+b+c)</code> is odd, a contradiction.</p>",
        "id": 125752084,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524791414
    },
    {
        "content": "<p>To do this formally you only need to know that every number is even or odd and apply it three times, and then do some simple algebra at the end</p>",
        "id": 125752135,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524791526
    },
    {
        "content": "<p>also you have to know parity rules for adding even and odd</p>",
        "id": 125752144,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524791564
    }
]