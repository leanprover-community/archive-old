[
    {
        "content": "<p>Is there a way to get a <code>list</code> from a <code>finset</code> without using <code>finset.sort</code> or writing my own recursive function on <code>finset</code>?</p>",
        "id": 125032331,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523623053
    },
    {
        "content": "<p>but <code>finset</code> is a subquotient of <code>list</code></p>",
        "id": 125032374,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523623095
    },
    {
        "content": "<p>and quotients can't be reversed</p>",
        "id": 125032377,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523623100
    },
    {
        "content": "<p>That's right, so I couldn't use a recursive function anyway.</p>",
        "id": 125032390,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523623188
    },
    {
        "content": "<p>Well, I suppose I could follow the <code>sort</code> example:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"n\">r</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"mi\">1</span>\n\n<span class=\"n\">def</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sort</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift_on</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"n\">merge_sort</span> <span class=\"n\">r</span><span class=\"o\">)</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n<span class=\"n\">eq_of_sorted_of_perm</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"n\">an</span><span class=\"bp\">.</span><span class=\"n\">antisymm</span>\n  <span class=\"o\">((</span><span class=\"n\">perm_merge_sort</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"err\">$</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"o\">(</span><span class=\"n\">perm_merge_sort</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">sorted_merge_sort</span> <span class=\"n\">r</span> <span class=\"n\">to</span><span class=\"bp\">.</span><span class=\"n\">total</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">sorted_merge_sort</span> <span class=\"n\">r</span> <span class=\"n\">to</span><span class=\"bp\">.</span><span class=\"n\">total</span> <span class=\"n\">tr</span><span class=\"bp\">.</span><span class=\"n\">trans</span> <span class=\"bp\">_</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125032522,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523623420
    },
    {
        "content": "<p>Ah, <code>fold</code>?</p>",
        "id": 125032728,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523623721
    },
    {
        "content": "<p>Why do you not want to sort it?</p>",
        "id": 125032788,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523623817
    },
    {
        "content": "<p>Because I don't need a particular order.</p>",
        "id": 125032790,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523623839
    },
    {
        "content": "<p>then it's uncomputable</p>",
        "id": 125032791,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523623847
    },
    {
        "content": "<p>Right but them being in a particular order can't be harmful, is it? Is it that you care about the performances?</p>",
        "id": 125032857,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523623934
    },
    {
        "content": "<p>It requires adding an ordering constraint to the elements that I don't need or want.</p>",
        "id": 125032874,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523623997
    },
    {
        "content": "<p>What you could do is compute on the list before taking it out of the quotient and proving that the result is independent of order</p>",
        "id": 125032878,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523624022
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">left_commutative</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift_on</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">foldr_eq_of_perm</span> <span class=\"n\">H</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 125032951,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523624130
    },
    {
        "content": "<blockquote>\n<p>It requires adding an ordering constraint to the elements that I don't need or want.</p>\n</blockquote>\n<p>otherwise it won't be a well-defined function</p>",
        "id": 125033001,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523624168
    },
    {
        "content": "<blockquote>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">foldr</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">left_commutative</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"o\">:=</span>\n<span class=\"n\">quot</span><span class=\"bp\">.</span><span class=\"n\">lift_on</span> <span class=\"n\">s</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l</span><span class=\"o\">,</span> <span class=\"n\">foldr</span> <span class=\"n\">f</span> <span class=\"n\">b</span> <span class=\"n\">l</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">l₁</span> <span class=\"n\">l₂</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">foldr_eq_of_perm</span> <span class=\"n\">H</span> <span class=\"n\">p</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n</pre></div>\n\n\n</blockquote>\n<p>Exactly. What are you trying to compute?</p>",
        "id": 125033199,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523624465
    },
    {
        "content": "<p>So, <code>finset.fold</code> doesn't work because it requires the append operator to be commutative, which it is not:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">to_list</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">list</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n  <span class=\"n\">fold</span> <span class=\"o\">(</span><span class=\"bp\">++</span><span class=\"o\">)</span> <span class=\"o\">[]</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"o\">[</span><span class=\"n\">a</span><span class=\"o\">])</span>\n\n<span class=\"err\">⊢</span> <span class=\"n\">is_commutative</span> <span class=\"o\">(</span><span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"n\">append</span>\n</pre></div>",
        "id": 125033557,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523625038
    },
    {
        "content": "<p>right, because the function you're trying to define isn't well-defined</p>",
        "id": 125033566,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523625059
    },
    {
        "content": "<p>Since <code>finset</code> is a quotient on list permutations, is it not possible to choose an arbitrary permutation?</p>",
        "id": 125033577,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523625088
    },
    {
        "content": "<p>no, that's what quotient is</p>",
        "id": 125033582,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523625097
    },
    {
        "content": "<p>it needs to work for any permutation</p>",
        "id": 125033583,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523625101
    },
    {
        "content": "<p>your functions need to be well-defined</p>",
        "id": 125033643,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523625173
    },
    {
        "content": "<p>if {2,1,3} gives [2,1,3] and {1,2,3} gives [1,2,3], then it isn't a well-defined function</p>",
        "id": 125033652,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523625195
    },
    {
        "content": "<p><code>quotient.out</code> works, but that's noncomputable</p>",
        "id": 125033654,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523625200
    },
    {
        "content": "<p><code>quot.unquot</code> also works, but you can't use that in a proof, because it implies false.</p>",
        "id": 125033665,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1523625237
    },
    {
        "content": "<p>in fact, if your function did that, then I can prove false</p>",
        "id": 125033708,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523625256
    },
    {
        "content": "<p>because {2,1,3} and {1,2,3} are equal</p>",
        "id": 125033714,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523625269
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110064\">@Kenny Lau</span> Right, so your point is that the function has to produce the same permutation for any set, and that's why sorting is necessary.</p>",
        "id": 125033803,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523625449
    },
    {
        "content": "<p>Right. But the other idea is: what are you going to do with that list? If the function that uses the list works the same for all permutation, you don't need to care about sorting the list. You just need to make sure that when you use the list, you produce the same results regardless of order</p>",
        "id": 125034441,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523626528
    },
    {
        "content": "<p>In the end, I want a list with certain properties. I thought using a finset to construct it would be simpler (since that function is easier), but it appears that I should just construct the list directly. I'm going to try using <code>list.to_finset</code> to simplify the property testing during construction in an auxiliary function and then extract the list-specific properties from the finset properties in a wrapper.</p>",
        "id": 125034446,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523626552
    },
    {
        "content": "<p>Instead of going inside the <code>quot</code> to extract a list, go inside to do more of your computations</p>",
        "id": 125034447,
        "sender_full_name": "Simon Hudon",
        "timestamp": 1523626560
    },
    {
        "content": "<p>Sean -- you want your function to be computable?</p>",
        "id": 125034894,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523627332
    },
    {
        "content": "<p>To catch up on this thread, I was trying to figure out how to use</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">fresh_finset</span> <span class=\"o\">(</span><span class=\"n\">s₁</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">s₂</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">card</span> <span class=\"n\">s₂</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">s₂</span> <span class=\"err\">∩</span> <span class=\"n\">s₁</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span>\n</pre></div>\n\n\n<p>in the definition of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">fresh_list</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"err\">Σ&#39;</span> <span class=\"o\">(</span><span class=\"n\">l</span> <span class=\"o\">:</span> <span class=\"n\">list</span> <span class=\"n\">α</span><span class=\"o\">),</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">length</span> <span class=\"bp\">=</span> <span class=\"n\">n</span> <span class=\"bp\">∧</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">nodup</span> <span class=\"bp\">∧</span> <span class=\"n\">l</span><span class=\"bp\">.</span><span class=\"n\">to_finset</span> <span class=\"err\">∩</span> <span class=\"n\">s</span> <span class=\"bp\">=</span> <span class=\"err\">∅</span>\n</pre></div>\n\n\n<p>but, as has been pointed out to me, this is not possible without adding an additional constraint on <code>α</code>. In the end, I wrote <code>fresh_list</code> from scratch. It wasn't as difficult as I thought, and it shares a proof structure with <code>fresh_finset</code>.</p>\n<p>See the <a href=\"https://github.com/spl/tts/blob/010faf776c4fda5a376994a06cd76dd0784f3faf/src/data/finset/fresh.lean#L19-L50\" target=\"_blank\" title=\"https://github.com/spl/tts/blob/010faf776c4fda5a376994a06cd76dd0784f3faf/src/data/finset/fresh.lean#L19-L50\">source</a> for the definitions.</p>\n<p>Kevin: Yes, I want a computable definition.</p>",
        "id": 125291437,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524119441
    },
    {
        "content": "<p>I agree that it is best to write the list definition directly in this case. I think it would be better to have the fresh list separate from the properties though</p>",
        "id": 125291609,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524119779
    },
    {
        "content": "<p>How so?</p>",
        "id": 125291625,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524119852
    },
    {
        "content": "<p>It makes the code path a bit more obvious</p>",
        "id": 125291630,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524119869
    },
    {
        "content": "<p>I always worry that the match and such will add extra overhead</p>",
        "id": 125291682,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524119890
    },
    {
        "content": "<p>it's not clear to me whether it is in fact optimized away</p>",
        "id": 125291688,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524119906
    },
    {
        "content": "<p>What type signature would you want?</p>",
        "id": 125291689,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524119907
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>class has_fresh (α : Type*) :=\n(fresh : finset α → α)\n(fresh_not_mem : ∀ s, fresh s ∉ s)\n\ndef fresh_list (s : finset α) : nat → list α\n| 0 := []\n| (n+1) := let l := fresh_list n in fresh (l.to_finset ∪ s) :: l\n\ntheorem fresh_list_length (s : finset α) : ∀ n, (fresh_list s n).length = n\n\ntheorem fresh_list_nodup_disjoint (s : finset α) :\n  ∀ n, (fresh_list s n).nodup ∧ (fresh_list s n).to_finset ∩ s = ∅\n</pre></div>\n\n\n<p>I conjoin the last two only because I think the proof is by mutual recursion</p>",
        "id": 125291854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524120174
    },
    {
        "content": "<p>Ah, I see what you mean. You're talking about splitting the methods of the <code>class</code>. Yeah, that seems fine, assuming it works.</p>",
        "id": 125291994,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524120382
    },
    {
        "content": "<p>By the way, it is conceivable that <code>fresh</code> in the typeclass will be difficult to define, since it enforces that the fresh element not depend on the order of the input list</p>",
        "id": 125292003,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524120437
    },
    {
        "content": "<blockquote>\n<p>By the way, it is conceivable that <code>fresh</code> in the typeclass will be difficult to define, since it enforces that the fresh element not depend on the order of the input list</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I don't follow. I'm guessing you mean it's difficult to define <code>fresh</code> for instances of <code>has_fresh</code>. But what “input list”? <code>has_fresh</code> only depends on the element of the <code>finset</code>.</p>\n<p>You could, of course, define different functions to produce a fresh element from a <code>list</code> or a fresh element from a <code>finset</code> with a required ordering to the element. Nonetheless, it is possible to define a <code>has_fresh</code> instance for <code>nat</code> and other infinite types for which it is possible to find an extreme, and <code>has_fresh</code> does not impose an ordering constraint that is not always needed.</p>",
        "id": 125293488,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524123378
    },
    {
        "content": "<p>I mean that to implement <code>fresh</code> on a type <code>A</code>, you need to define a function <code>list A -&gt; A</code>, and then lift it to a function <code>finset A -&gt; A</code>, meaning that the original function must map <code>[a, b]</code> and <code>[b, a]</code> to the same fresh value <code>c</code>. Depending on <code>A</code>, that may not be convenient to do, for example if you hash the list or something to generate a disambiguator</p>",
        "id": 125293581,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524123560
    },
    {
        "content": "<blockquote>\n<p>I think it would be better to have the fresh list separate from the properties though</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> This was a good suggestion. The <a href=\"https://github.com/spl/tts/blob/84267eb8dac118884ffb8de2f77fa3cfb3c397cd/src/data/finset/fresh.lean\" target=\"_blank\" title=\"https://github.com/spl/tts/blob/84267eb8dac118884ffb8de2f77fa3cfb3c397cd/src/data/finset/fresh.lean\">result</a> is much cleaner now.</p>\n<blockquote>\n<p>I mean that to implement <code>fresh</code> on a type <code>A</code>, you need to define a function <code>list A -&gt; A</code>, and then lift it to a function <code>finset A -&gt; A</code> [...]</p>\n</blockquote>\n<p>This is the part I don't follow. Why does one need to define a function <code>list A -&gt; A</code>? For <a href=\"https://github.com/spl/tts/blob/84267eb8dac118884ffb8de2f77fa3cfb3c397cd/src/data/finset/fresh.lean#L89-L142\" target=\"_blank\" title=\"https://github.com/spl/tts/blob/84267eb8dac118884ffb8de2f77fa3cfb3c397cd/src/data/finset/fresh.lean#L89-L142\"><code>nat</code></a>, this isn't necessary. I conjecture that the same is true for other types.</p>",
        "id": 125301276,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524137485
    },
    {
        "content": "<p>every function on <code>finset</code> is ultimately the <code>lift</code> of a function on <code>list</code></p>",
        "id": 125301322,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524137541
    },
    {
        "content": "<p>I assume you used <code>finset.fold</code> or something to define the nat function</p>",
        "id": 125301327,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1524137563
    },
    {
        "content": "<p>True, but that doesn't mean I have to write the <code>list</code> function itself.</p>",
        "id": 125301330,
        "sender_full_name": "Sean Leather",
        "timestamp": 1524137583
    }
]