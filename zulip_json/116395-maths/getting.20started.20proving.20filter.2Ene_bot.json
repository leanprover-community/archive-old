[
    {
        "content": "<p>I want to prove this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ℬ</span> <span class=\"o\">:</span> <span class=\"n\">filter_basis</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">∅</span> <span class=\"bp\">∉</span> <span class=\"n\">ℬ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℬ.filter.ne_bot</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>I don't see anything remotely like this in mathlib, which surprises me. How do I get started with this proof? I don't even see a theorem about ne_bot iff empty set is not a member of the filter.</p>",
        "id": 267760003,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642009436
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_basis.eq_bot_iff\">docs#has_basis.eq_bot_iff</a></p>",
        "id": 267762573,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642010530
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_basis.ne_bot_iff\">docs#has_basis.ne_bot_iff</a></p>",
        "id": 267762598,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642010541
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter_basis.has_basis\">docs#filter_basis.has_basis</a></p>",
        "id": 267762645,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642010565
    },
    {
        "content": "<p>Those should get you most of the way there.</p>",
        "id": 267762696,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642010589
    },
    {
        "content": "<p>The first two links are 404.</p>",
        "id": 267770434,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642014015
    },
    {
        "content": "<p>fixed</p>",
        "id": 267770529,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642014047
    },
    {
        "content": "<p>I don't get the has_basis stuff because it involves some kind of indexing set. What's that about?</p>",
        "id": 267770729,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642014126
    },
    {
        "content": "<p>you don't need to worry about that, just use filter_basis.has_basis to know that the filter associated to the basis satisfies <code>has_basis</code> for the given basis.</p>",
        "id": 267770836,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642014179
    },
    {
        "content": "<p>OK. I'll give it a shot. Thanks.</p>",
        "id": 267771106,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642014301
    },
    {
        "content": "<p>Here's a proof that can probably be golfed to a single line:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.bases</span>\n\n<span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">ℬ</span> <span class=\"o\">:</span> <span class=\"n\">filter_basis</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∅</span> <span class=\"bp\">∉</span> <span class=\"n\">ℬ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℬ.filter.ne_bot</span> <span class=\"o\">:=</span> <span class=\"kd\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">ℬ.has_basis.ne_bot_iff</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">i</span> <span class=\"n\">hh</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"bp\">←</span> <span class=\"n\">set.ne_empty_iff_nonempty</span><span class=\"o\">,</span>\n  <span class=\"n\">intros</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">dsimp</span> <span class=\"n\">at</span> <span class=\"n\">c</span><span class=\"o\">,</span>\n  <span class=\"n\">rwa</span> <span class=\"n\">c</span> <span class=\"n\">at</span> <span class=\"n\">hh</span><span class=\"o\">,</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 267771292,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642014375
    },
    {
        "content": "<p>It's going to take me a long time to be able code golf tactics.</p>",
        "id": 267771412,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642014440
    },
    {
        "content": "<p>You might want to replace your assumption that <code>B</code> doesn't contain empty with something like the assumption in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.has_basis.ne_bot_iff\">docs#filter.has_basis.ne_bot_iff</a></p>",
        "id": 267771488,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642014477
    },
    {
        "content": "<p>That would probably make it smoother to use your lemma in practice.</p>",
        "id": 267771575,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642014510
    },
    {
        "content": "<p>OK. The indexing stuff was confusing me, so I was avoiding it.</p>",
        "id": 267771791,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642014607
    },
    {
        "content": "<p>The indexing stuff is because the definition of <code>has_basis</code> prefers the collection of sets defining the basis for the filter to be indexed by some auxiliary type <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>ι</mi></mrow><annotation encoding=\"application/x-tex\">\\iota</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">ι</span></span></span></span>.</p>",
        "id": 267771848,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642014650
    },
    {
        "content": "<p>Do you know why they made it that way?</p>",
        "id": 267771975,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642014709
    },
    {
        "content": "<p>Bernd, a lot of bases are naturally indexed. For instance neighborhoods in metric spaces have a basis of balls indexed by positive radii.</p>",
        "id": 267772212,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642014817
    },
    {
        "content": "<p>And because Adam wanted it:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">ℬ</span> <span class=\"o\">:</span> <span class=\"n\">filter_basis</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∅</span> <span class=\"bp\">∉</span> <span class=\"n\">ℬ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">ℬ.filter.ne_bot</span> <span class=\"o\">:=</span>\n<span class=\"n\">ℬ.has_basis.ne_bot_iff.mpr</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">u</span> <span class=\"n\">hu</span><span class=\"o\">,</span> <span class=\"n\">ne_empty_iff_nonempty.mp</span> <span class=\"bp\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">u</span> <span class=\"bp\">=</span> <span class=\"bp\">∅</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"n\">H</span> <span class=\"bp\">▸</span> <span class=\"n\">hu</span><span class=\"o\">)</span>\n</code></pre></div>",
        "id": 267772800,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642015087
    },
    {
        "content": "<p>Alright. Thanks guys.</p>",
        "id": 267774249,
        "sender_full_name": "Bernd Losert",
        "timestamp": 1642015912
    }
]