[
    {
        "content": "<p>If a sequence <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span></span></span></span> of real numbers tends to a limit <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">ℓ</mi></mrow><annotation encoding=\"application/x-tex\">\\ell</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">ℓ</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">n\\to\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">n</span><span class=\"mrel\">→</span><span class=\"mord mathrm\">∞</span></span></span></span>, and if <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>:</mo><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><mo>→</mo><mrow><mi mathvariant=\"double-struck\">R</mi></mrow></mrow><annotation encoding=\"application/x-tex\">f:\\mathbb{R}\\to\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mrel\">:</span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> is continuous, then <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>(</mo><msub><mi>a</mi><mi>n</mi></msub><mo>)</mo><mo>→</mo><mi>f</mi><mo>(</mo><mi mathvariant=\"normal\">ℓ</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">f(a_n)\\to f(\\ell)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">ℓ</span><span class=\"mclose\">)</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>n</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">n\\to\\infty</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.43056em;\"></span><span class=\"strut bottom\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathit\">n</span><span class=\"mrel\">→</span><span class=\"mord mathrm\">∞</span></span></span></span>. This will follow from some general statement about limits of filters, probably called<code>tendsto.comp</code> or something.</p>\n<p>But there's an if and only if here -- I think <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>f</mi><mo>:</mo><mrow><mi mathvariant=\"double-struck\">R</mi></mrow><mo>→</mo><mrow><mi mathvariant=\"double-struck\">R</mi></mrow></mrow><annotation encoding=\"application/x-tex\">f:\\mathbb{R}\\to\\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"base\"><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mrel\">:</span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"mrel\">→</span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> is continuous at <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">ℓ</mi></mrow><annotation encoding=\"application/x-tex\">\\ell</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.69444em;\"></span><span class=\"strut bottom\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"base\"><span class=\"mord mathrm\">ℓ</span></span></span></span> if and only iff for all sequences <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>(</mo><msub><mi>a</mi><mi>n</mi></msub><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">(a_n)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mi>a</mi><mi>n</mi></msub><mo>→</mo><mi mathvariant=\"normal\">ℓ</mi><mspace width=\"0.277778em\"></mspace><mo>⟹</mo><mspace width=\"0.277778em\"></mspace><mi>f</mi><mo>(</mo><msub><mi>a</mi><mi>n</mi></msub><mo>)</mo><mo>→</mo><mi>f</mi><mo>(</mo><mi mathvariant=\"normal\">ℓ</mi><mo>)</mo></mrow><annotation encoding=\"application/x-tex\">a_n\\to\\ell\\implies f(a_n)\\to f(\\ell)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"strut\" style=\"height:0.75em;\"></span><span class=\"strut bottom\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"base\"><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mrel\">→</span><span class=\"mord mathrm\">ℓ</span><span class=\"mrel\"><span class=\"mspace thickspace\"></span><span class=\"mrel\">⟹</span></span><span class=\"mord mathit\"><span class=\"mspace thickspace\"></span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathit\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathit mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mrel\">→</span><span class=\"mord mathit\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathrm\">ℓ</span><span class=\"mclose\">)</span></span></span></span>. Is this a special case of some statement about filters?</p>",
        "id": 160189918,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551958881
    },
    {
        "content": "<p>that's only true for first countable spaces so no?</p>",
        "id": 160190097,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551959071
    },
    {
        "content": "<p>but this is also the whole motivation behind sequences =&gt; nets =&gt; filters so maybe yes?</p>",
        "id": 160190104,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551959087
    },
    {
        "content": "<p>So is there some more general statement about a function being continuous if and only if some generalized notion of sequence tends to a limit? The countability comes in because nat is countable I guess?</p>",
        "id": 160190209,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551959180
    },
    {
        "content": "<p>we developed nets because we noticed that sequential continuity doesn't imply continuity</p>",
        "id": 160190227,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551959209
    },
    {
        "content": "<p>net is a generalization of sequences</p>",
        "id": 160190233,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551959220
    },
    {
        "content": "<p>somehow net continuity implies continuity</p>",
        "id": 160190251,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551959232
    },
    {
        "content": "<p>I don't know what nets are. I wrote some notes on them once.</p>",
        "id": 160190253,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551959235
    },
    {
        "content": "<p>and then people generalized nets to filters</p>",
        "id": 160190257,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551959240
    },
    {
        "content": "<p>But I then forgot.</p>",
        "id": 160190263,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551959246
    },
    {
        "content": "<blockquote>\n<p>So is there some more general statement about a function being continuous if and only if some generalized notion of sequence tends to a limit? The countability comes in because nat is countable I guess?</p>\n</blockquote>\n<p>precisely</p>",
        "id": 160190267,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551959257
    },
    {
        "content": "<p>\"I bet with my net I can get those things yet\", Dr Seuss. That's how my notes started, and that's all I can remember about them :P</p>",
        "id": 160190272,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551959269
    },
    {
        "content": "<p>The kid catches Thing 1 and Thing 2 with his net when they're running amok.</p>",
        "id": 160190323,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551959300
    },
    {
        "content": "<p><a href=\"/user_uploads/3121/24_tqr9SQ2819VpM9TvWG4VF/nets.pdf\" target=\"_blank\" title=\"nets.pdf\">nets.pdf</a></p>",
        "id": 160190449,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551959443
    },
    {
        "content": "<p>great</p>",
        "id": 160190498,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1551959498
    },
    {
        "content": "<p>\"Remark:  if f:X→Y is a map of topological spaces, then f is continuous at x in X iff for every net (x_s) converging to x, f(x_s) converges to f(x). \" (plus reference to proof)</p>",
        "id": 160191144,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551960193
    },
    {
        "content": "<p>So what is the relation between nets and filters, are nets in Lean, and is this statement, or some more general statement which implies it, in Lean?</p>",
        "id": 160191171,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1551960237
    },
    {
        "content": "<p>Nets and filters are equivalent notions. Nets look like they are almost sequences, but filters are more functorial</p>",
        "id": 160194534,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551963507
    },
    {
        "content": "<p>The lemma you are referring to is so trivial it doesn't seem to be in mathlib. But you add it:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">cont_kevin</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n  <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">continuous_at</span> <span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">↔</span> <span class=\"bp\">∀</span> <span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">nhds</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">F</span> <span class=\"bp\">≤</span> <span class=\"n\">nhds</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"bp\">⟨λ</span> <span class=\"n\">h</span> <span class=\"n\">F</span> <span class=\"n\">F_le</span><span class=\"o\">,</span> <span class=\"n\">le_trans</span> <span class=\"o\">(</span><span class=\"n\">map_mono</span> <span class=\"n\">F_le</span><span class=\"o\">)</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">le_refl</span> <span class=\"bp\">_</span><span class=\"o\">)</span><span class=\"bp\">⟩</span>\n</pre></div>",
        "id": 160194574,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1551963546
    }
]