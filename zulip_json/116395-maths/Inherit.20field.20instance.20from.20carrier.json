[
    {
        "content": "<p>We have a situation where there is a subalgebra whose carrier is known to be a subfield, and we would like to show that the subalgebra is a field. What is the best way to do this?</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">field_theory</span><span class=\"bp\">.</span><span class=\"n\">subfield</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">algebra</span>\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">algebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">subalgebra</span> <span class=\"n\">F</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">obvious</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</code></pre></div>",
        "id": 208403981,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598655851
    },
    {
        "content": "<p>It is possible to do manually, but surely there's a better way</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">obvious</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">add</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">+</span><span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">add_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">add_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">add_comm</span> <span class=\"o\">:=</span> <span class=\"n\">add_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">zero</span> <span class=\"o\">:=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n    <span class=\"n\">zero_add</span> <span class=\"o\">:=</span> <span class=\"n\">zero_add</span><span class=\"o\">,</span>\n    <span class=\"n\">add_zero</span> <span class=\"o\">:=</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span>\n    <span class=\"n\">neg</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">-</span><span class=\"n\">x</span><span class=\"o\">,</span>\n    <span class=\"n\">add_left_neg</span> <span class=\"o\">:=</span> <span class=\"n\">add_left_neg</span><span class=\"o\">,</span>\n    <span class=\"n\">mul</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">*</span><span class=\"n\">y</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_assoc</span> <span class=\"o\">:=</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_comm</span> <span class=\"o\">:=</span> <span class=\"n\">mul_comm</span><span class=\"o\">,</span>\n    <span class=\"n\">one</span> <span class=\"o\">:=</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n    <span class=\"n\">one_mul</span> <span class=\"o\">:=</span> <span class=\"n\">one_mul</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_one</span> <span class=\"o\">:=</span> <span class=\"n\">mul_one</span><span class=\"o\">,</span>\n    <span class=\"n\">left_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">left_distrib</span><span class=\"o\">,</span>\n    <span class=\"n\">right_distrib</span> <span class=\"o\">:=</span> <span class=\"n\">right_distrib</span><span class=\"o\">,</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span><span class=\"k\">begin</span>\n        <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subsemiring</span><span class=\"bp\">.</span><span class=\"n\">coe_mul</span><span class=\"o\">,</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span> <span class=\"n\">subsemiring</span><span class=\"bp\">.</span><span class=\"n\">coe_one</span><span class=\"o\">],</span>\n        <span class=\"n\">apply</span> <span class=\"n\">mul_inv_cancel</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">inv_zero</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span> <span class=\"n\">inv_zero</span><span class=\"o\">,</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">coe_zero</span><span class=\"o\">],</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">exists_pair_ne</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_one</span><span class=\"o\">],</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 208405228,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598657294
    },
    {
        "content": "<p>Surely you can at least inherit the commutative ring structure, e.g. with <code>..show comm_ring K, by apply_instance</code></p>",
        "id": 208405458,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598657526
    },
    {
        "content": "<p>that's true, although I feel like the whole thing should be obvious</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">obvious</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"o\">{</span>\n    <span class=\"n\">inv</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"bp\">⟨</span><span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">E</span><span class=\"o\">)</span><span class=\"bp\">⁻¹</span><span class=\"o\">,</span><span class=\"k\">begin</span>\n        <span class=\"n\">apply</span> <span class=\"n\">h</span><span class=\"bp\">.</span><span class=\"n\">inv_mem</span><span class=\"o\">,</span>\n        <span class=\"n\">cases</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n        <span class=\"n\">assumption</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">mul_inv_cancel</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">intros</span> <span class=\"n\">a</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">subsemiring</span><span class=\"bp\">.</span><span class=\"n\">coe_mul</span><span class=\"o\">,</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span> <span class=\"n\">subsemiring</span><span class=\"bp\">.</span><span class=\"n\">coe_one</span><span class=\"o\">],</span>\n        <span class=\"n\">apply</span> <span class=\"n\">mul_inv_cancel</span><span class=\"o\">,</span>\n        <span class=\"n\">intro</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span>\n        <span class=\"n\">apply</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n        <span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">exact</span> <span class=\"n\">ha&#39;</span><span class=\"o\">,</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">inv_zero</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">ext</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">coe_mk</span><span class=\"o\">,</span> <span class=\"n\">inv_zero</span><span class=\"o\">,</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">coe_zero</span><span class=\"o\">],</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"n\">exists_pair_ne</span> <span class=\"o\">:=</span>\n    <span class=\"k\">begin</span>\n        <span class=\"n\">use</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n        <span class=\"n\">use</span> <span class=\"mi\">1</span><span class=\"o\">,</span>\n        <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ne</span><span class=\"bp\">.</span><span class=\"n\">def</span><span class=\"o\">,</span> <span class=\"n\">not_false_iff</span><span class=\"o\">,</span> <span class=\"n\">zero_ne_one</span><span class=\"o\">],</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n    <span class=\"bp\">..</span><span class=\"k\">show</span> <span class=\"n\">comm_ring</span> <span class=\"n\">K</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span><span class=\"o\">,</span>\n<span class=\"o\">}</span>\n</code></pre></div>",
        "id": 208405572,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598657688
    },
    {
        "content": "<p>You could probably golf those proofs a bit, but I don't know if you can avoid those fields altogether.</p>",
        "id": 208405840,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598658064
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">instance</span> <span class=\"n\">obvious</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">is_subfield</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">))</span> <span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">is_subfield</span><span class=\"bp\">.</span><span class=\"n\">field</span> <span class=\"n\">E</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"bp\">_</span>\n</code></pre></div>\n\n\n<p>It turns out that <code>is_subfield.field</code> gives something that's defeq to the instance. It just takes some gentle prodding to get Lean to agree.</p>",
        "id": 208408017,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598661159
    },
    {
        "content": "<p>Thanks Kyle!</p>",
        "id": 208408043,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1598661210
    },
    {
        "content": "<p>Ah nice! I missed the <code>is_subfield</code> in the first message. Actually, I didn't even know that was a thing!</p>",
        "id": 208408916,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598662500
    },
    {
        "content": "<p>I think I saw a message a while back that <code>is_subfield</code> will eventually be replaced by bundled objects, like how other subobjects are handled, which would be as terms of a type <code>subfield E</code>.</p>",
        "id": 208410702,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598665127
    },
    {
        "content": "<p>Yeah I think all the <code>is_foo</code> things are being deprecated.</p>",
        "id": 208411260,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598666062
    },
    {
        "content": "<p>About the bundled vs unbundled story... We should definitely continue with bundling things. But Reid pointed out (and I agree) that maybe we shouldn't throw away the <code>is_subfoobar</code>s. What we should do, is make them mere <code>structure</code>s instead of <code>class</code>es. Because they can be genuinely useful for certain inductive arguments.</p>",
        "id": 208415686,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598673568
    },
    {
        "content": "<p>I don't know if <code>is_subfield</code> should be bundled. It could just be a predicate on <code>is_subring</code>. Does the community have a clear view on this?</p>",
        "id": 208421462,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598685282
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Inherit.20field.20instance.20from.20carrier/near/208415686\">said</a>:</p>\n<blockquote>\n<p>About the bundled vs unbundled story... We should definitely continue with bundling things. But Reid pointed out (and I agree) that maybe we shouldn't throw away the <code>is_subfoobar</code>s. What we should do, is make them mere <code>structure</code>s instead of <code>class</code>es. Because they can be genuinely useful for certain inductive arguments.</p>\n</blockquote>\n<p>And the same for <code>is_foo_hom</code> as well</p>",
        "id": 208435638,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598710009
    },
    {
        "content": "<p>Why can't we have both? E.g. why isn't <code>subring</code> defined as <code>bundled is_subring</code> (pseudo-code)?</p>",
        "id": 208437095,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598712105
    },
    {
        "content": "<p>Well, bundled wouldn't work here, since it assumes a typeclass as an input, not a structure on a set, but  surely you get the idea.</p>",
        "id": 208437161,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598712200
    },
    {
        "content": "<p>Why isn't <code>monoid_hom</code> defined as <code>subtype is_monoid_hom</code>?</p>",
        "id": 208437420,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598712557
    },
    {
        "content": "<p>Of course the transition cost would be pretty high unless we could paper over the differences somehow</p>",
        "id": 208437572,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598712771
    },
    {
        "content": "<p>How bad would it be? E.g. for monoid hom it seems that the main thing would be to redefine monoid_hom.map_mul as subtype.prop.map_mul, and similarly for map_one.</p>",
        "id": 208438271,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598713590
    },
    {
        "content": "<p><code>{}</code> constructors would all need to be modified</p>",
        "id": 208438463,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598713894
    },
    {
        "content": "<p>it's too bad we can't use <code>extends</code> somehow</p>",
        "id": 208438472,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598713920
    },
    {
        "content": "<p>Oh right <span aria-label=\"oh no\" class=\"emoji emoji-1f615\" role=\"img\" title=\"oh no\">:oh_no:</span></p>",
        "id": 208438551,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1598714016
    },
    {
        "content": "<p>There two relevant things I hope will be much better in Lean 4: alternate constructors as first class citizens (already named arguments could make this mostly ok) and smarter dot notation.</p>",
        "id": 208438630,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1598714109
    },
    {
        "content": "<p>Well, in any case, actually being defined as a <code>subtype</code> or what have you isn't particularly important</p>",
        "id": 208440586,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598716668
    },
    {
        "content": "<p>Well... I just refactored <code>fin</code> because there I thought it was important <span aria-label=\"rofl\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rofl\">:rofl:</span> <span aria-label=\"oops\" class=\"emoji emoji-1f643\" role=\"img\" title=\"oops\">:oops:</span></p>",
        "id": 208441864,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1598718280
    },
    {
        "content": "<p>In the past I think we've also moved away from using <code>subtype</code> to custom structures</p>",
        "id": 208442095,
        "sender_full_name": "Reid Barton",
        "timestamp": 1598718554
    },
    {
        "content": "<p>My impression about these sorts of questions is that I naturally assume (or assumed) that \"the computer scientists\" would completely understand this kind of question, which presumably has been around for as long as people have been doing basic algebra in theorem provers, so why can't they just tell us the best way to do it? But what I now am beginning to realise is that the actual answer seems to be massively system-dependent, and even in Lean we are still kind of feeling our way around what the best answer is -- and there's even a possibility that in Lean 4 we might want to change our mind e.g. back to a formerly deprecated method.</p>",
        "id": 208442967,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1598719640
    },
    {
        "content": "<p>Mathlib seems to use classes in some places because they let us pretend we have sub-type polymorphism, where the sub-type relationship is the relationship between a structure and a structure that <code>extend</code>s it.  If the Lean elaborator were able to automatically coerce sub-types using the <code>to_FOO</code> functions, then it would make certain designs easier, I think.  For example, the <code>is_subfield</code> class extends <code>is_subring</code>, so right now you can use objects with an <code>is_subfield</code> instance with functions that except an object with an <code>is_subring</code>instance.  Switching these to structures would require manual coercions right now, but what if the elaborator could automatically insert the <code>to_is_subring</code> coercion?  Is there some theoretical reason why this cannot be done?  (I think there are some issues with type inference, specifically generalization in a Hindley-Milner setup, but this doesn't seem like something that affects Lean.)</p>\n<p><em>A proposal that doesn't involve wide-sweeping changes to the language:</em> for functions that are meant to be sub-type polymorphic, have an annotation that specifies which arguments are meant to accept subtypes.  Given the annotation, replace the definition with one that instead accepts arguments that implement a coercion typeclass (probably not <code>has_lift</code>, but perhaps a new <code>has_supertype_lift</code> or something like that), and have every <code>structure</code> automatically implement this typeclass for every structure it transitively extends using the <code>to_FOO</code> functions.  (Implementation detail: the original definition would still be available, but renamed.)</p>\n<p>Implementing this would probably only involve some attributes that do metaprogramming, but I haven't looked into this corner of Lean -- it just seems this functionality must exist given that things like <code>@[simps]</code> exist.</p>\n<p>More generally, this could apply to types that aren't strictly sub-types of a structure.  It could give us a principled way of adding automatic coercions to the arguments of functions -- it seems mathlib relies a lot on <code>has_coe_to_fun</code> and <code>has_coe_to_sort</code> to make ergonomic interfaces, and this might help make some of them even more natural.</p>",
        "id": 208449484,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1598728727
    }
]