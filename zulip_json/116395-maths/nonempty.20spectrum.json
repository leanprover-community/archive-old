[
    {
        "content": "<p>I am working my way towards proving that the spectrum of an element in a Banach algebra over ‚ÑÇ is nonempty. The standard argument uses the fact that resolvent function is analytic, and if it were entire, then by Liouville's theorem it would be constant (and by limiting arguments it would be zero), which is a contradiction. Therefore the resolvent set is not equal to ‚ÑÇ, and hence the spectrum is nonempty. We don't have Liouville's theorem yet, right? How close are we to this? How might I help contribute to this?</p>",
        "id": 262651102,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1637796476
    },
    {
        "content": "<p>I think, unfortunately, still a long way. <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> is the person to answer where help would be useful.</p>",
        "id": 262652221,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637797571
    },
    {
        "content": "<p>one day we'll have complex integrals <span aria-label=\"pray\" class=\"emoji emoji-1f64f\" role=\"img\" title=\"pray\">:pray:</span></p>",
        "id": 262653556,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1637798736
    },
    {
        "content": "<p><a href=\"https://math.stackexchange.com/a/2334921/28\">https://math.stackexchange.com/a/2334921/28</a> points to a proof that uses no complex analysis! It doesn't look to be super hard to formalise, but it's unclear if it's worth the detour.</p>",
        "id": 262654321,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637799429
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> I wrote a file on the Rayleigh quotient last month which basically gives us this result in one special case (compact self-adjoint operators on a Hilbert space):  see <a href=\"https://leanprover-community.github.io/mathlib_docs/find/is_self_adjoint.has_eigenvector_of_is_max_on\">docs#is_self_adjoint.has_eigenvector_of_is_max_on</a></p>",
        "id": 262661160,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1637807559
    },
    {
        "content": "<p>Once we have <a href=\"https://github.com/leanprover-community/mathlib/issues/10000\">#10000</a> merged, proving Liouville thm is easy. I'll try to make <a href=\"https://github.com/leanprover-community/mathlib/issues/10000\">#10000</a> ready for review tonight.</p>",
        "id": 262665678,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637814150
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110087\">@Scott Morrison</span> fascinating. I had never seen that proof before, but it seems like it won't be necessary.</p>",
        "id": 262726693,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1637859433
    },
    {
        "content": "<p>Nor me. I like that you can \"still see why it only works over C, not R\", through the essential dependence on the algebraic behaviour of roots of unity, rather than through analytic behaviour.</p>",
        "id": 262731278,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1637863369
    },
    {
        "content": "<p>I went to bed earlier than I expected. I'll have some time tonight.</p>",
        "id": 262732472,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1637864527
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span>, thanks, but I'm in no big rush, so don't feel pressured on my account to get it done. I still have a few things to do before I get there. I was just surveying the landscape.</p>",
        "id": 262733543,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1637865691
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Fr√©d√©ric Dupuis</span>, just FYI, I am starting a file on the spectrum in Banach algebras, in <code>normed_space</code>. I'll have a small PR in a few days to get us started.</p>",
        "id": 262735847,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1637868447
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"311453\">@Fr√©d√©ric Dupuis</span> and <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, when you get the chance, maybe have a look at <a href=\"https://github.com/leanprover-community/mathlib/issues/10476\">#10476</a> and <a href=\"https://github.com/leanprover-community/mathlib/issues/10530\">#10530</a>. I probably need some help in computing the derivative of the <code>resolvent</code> function. I had to do some gross <code>calc</code> stuff and I bet there is an easier way, but I'm not sure what it is. We should be pretty much ready to show that the spectrum is nonempty once we have Liouville's theorem. After that, we should be able to prove the Gelfand-Mazur theorem, which is the basis for Gelfand theory.</p>",
        "id": 262939260,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638120836
    },
    {
        "content": "<p>Reviewed!</p>",
        "id": 262945197,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638129253
    },
    {
        "content": "<p>I just had a look as well -- I didn't have much to add over Heather's comments, it looks good!</p>",
        "id": 262947617,
        "sender_full_name": "Fr√©d√©ric Dupuis",
        "timestamp": 1638132938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, you mentioned using <code>‚®Ü k ‚àà spectrum ùïú a, ‚à•k‚à•</code>, which is <code>supr</code> instead of <code>Sup</code>, and admittedly the notation is much nicer, and yes, they seem to be almost the same thing. But I'm confused about something.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"k\">#check</span> <span class=\"bp\">@</span><span class=\"n\">supr</span>\n<span class=\"c1\">-- supr : Œ† {Œ± : Type u_1} [_inst_1 : has_Sup Œ±] {Œπ : Sort u_2}, (Œπ ‚Üí Œ±) ‚Üí Œ±</span>\n<span class=\"k\">#print</span> <span class=\"bp\">@</span><span class=\"n\">spectral_radius</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">noncomputable def spectral_radius : Œ† (ùïú : Type u_1) {A : Type u_2}</span>\n<span class=\"cm\"> [_inst_1 : normed_field ùïú] [_inst_2 : ring A] [_inst_3 : algebra ùïú A],</span>\n<span class=\"cm\">  A ‚Üí ‚Ñù :=</span>\n<span class=\"cm\">Œª (ùïú : Type u_1) {A : Type u_2} [_inst_1 : normed_field ùïú] [_inst_2 : ring A]</span>\n<span class=\"cm\">[_inst_3 : algebra ùïú A] (a : A),</span>\n<span class=\"cm\">  ‚®Ü (k : ùïú) (H : k ‚àà spectrum ùïú a), ‚à•k‚à•</span>\n<span class=\"cm\">-/</span>\n</code></pre></div>\n<p>I can't seem to unify (in my head) the application of <code>‚®Ü</code> in <code>#print @spectral_radius</code> with the type of <code>supr</code>.  Namely, what is the index type <code>Œπ</code> in <code>@spectral_radius</code>? Is it the subtype <code>{ x :  ùïú // x ‚àà spectrum ùïú a}</code> and the definition you provided is just syntactic sugar for this, or am I missing something entirely?</p>",
        "id": 262964559,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638157938
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"197836\">@Jireh Loreaux</span> Excellent question, I don't know :) The notation is defined <a href=\"https://github.com/leanprover-community/mathlib/blob/16daabf74a759b06857973aac5beb24504ac2a61/src/order/complete_lattice.lean#L59\">here</a>:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">notation</span> <span class=\"bp\">`‚®Ü`</span> <span class=\"n\">binders</span> <span class=\"bp\">`</span><span class=\"o\">,</span> <span class=\"bp\">`</span> <span class=\"n\">r</span><span class=\"o\">:(</span><span class=\"n\">scoped</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">supr</span> <span class=\"n\">f</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">r</span>\n</code></pre></div>\n<p>but I don't understand that. Maybe someone else can give a layperson's explanation?</p>",
        "id": 262965581,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638159310
    },
    {
        "content": "<p><code>binders</code> is syntax for something like <code>i</code> or <code>(i : Œπ)</code> or <code>(i : Œπ) (h : 0 &lt; i)</code>. <code>r:(scoped f, supr f)</code> means that a function is defined in that local scope, with access to the arguments given in <code>binders</code>, and that that whole function <code>f</code> is provided to <code>supr</code>. That <code>given the binders, supr f</code>, is what the whole notation means. That's my understanding.</p>",
        "id": 262965747,
        "sender_full_name": "Yakov Pechersky",
        "timestamp": 1638159598
    },
    {
        "content": "<p>There are two applications of <code>supr</code> corresponding to the two binders <code>k</code> and <code>H</code></p>",
        "id": 262965992,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638159955
    },
    {
        "content": "<p>You can <code>set pp.notation false</code> and then <code>#print</code> again</p>",
        "id": 262966032,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638159972
    },
    {
        "content": "<p>If I understand correctly,</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code> <span class=\"bp\">‚®Ü</span> <span class=\"o\">(</span><span class=\"n\">k</span> <span class=\"o\">:</span> <span class=\"bp\">ùïú</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">‚àà</span> <span class=\"n\">spectrum</span> <span class=\"bp\">ùïú</span> <span class=\"n\">a</span><span class=\"o\">),</span> <span class=\"bp\">‚à•</span><span class=\"n\">k</span><span class=\"bp\">‚à•</span>\n</code></pre></div>\n<p>is taking nested <code>supr</code>s.  Firstly for each <code>k : ùïú</code> we take a supr with index type <code>k ‚àà spectrum ùïú a</code>, then we take a supr with index type <code>ùïú</code>.</p>",
        "id": 262966034,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638159981
    },
    {
        "content": "<p>Yes, this makes sense now. Thanks all.</p>",
        "id": 262966113,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638160164
    },
    {
        "content": "<p>Okay, after thinking about it further, I've confused myself again, but possibly for a different reason. What is the value of <code>‚®Ü (r : ‚Ñù) (hr : r ‚â§ -1), r</code>? I think it should be <code>0</code>, but that would mean the notation is very confusing. I'll explain my reasoning. This is defeq to <code>supr (Œª (r : ‚Ñù), supr (Œª (hr : r ‚â§ -1), r))</code> which itself unfolds to: <code>supr (Œª (r : ‚Ñù), Sup (set.range (Œª (hr : r ‚â§ -1), r)))</code>. Now, when r ‚â§ -1, we should have <code>set.range (Œª (hr : r ‚â§ -1), r) = {r}</code> since the type <code>r ‚â§ -1</code> is inhabited, and then <code>Sup (set.range (Œª (hr : r ‚â§ -1), r)) = Sup {r} = r</code>. But for r &gt; -1,  we should have <code>set.range (Œª (hr : r ‚â§ -1), r) = ‚àÖ</code> since the type <code>r ‚â§ -1</code> is uninhabited, and hence <code>Sup (set.range (Œª (hr : r ‚â§ -1), r)) = Sup ‚àÖ = 0</code> (the latter being the definition of <code>Sup</code> on <code>‚Ñù</code>). Thus, wouldn't the outer supremum then be <code>0</code>?</p>",
        "id": 262968013,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638162944
    },
    {
        "content": "<p>Oh yeah, this kind of notation is only good if you have something like a complete lattice where <code>supr</code> always makes sense</p>",
        "id": 262968338,
        "sender_full_name": "Reid Barton",
        "timestamp": 1638163406
    },
    {
        "content": "<p>Okay, at least I understand what's going on. In this case, even though we are working over <code>‚Ñù</code>, I think it might be okay because our function takes nonnegative values, so nothing gets screwed up. <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, what do you think?</p>",
        "id": 262969019,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638164405
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"197836\">Jireh Loreaux</span> <a href=\"#narrow/stream/116395-maths/topic/nonempty.20spectrum/near/262969019\">said</a>:</p>\n<blockquote>\n<p>In this case, even though we are working over <code>‚Ñù</code>, I think it might be okay because our function takes nonnegative values, so nothing gets screwed up.</p>\n</blockquote>\n<p>I agree with this point.  I'll leave it up to you whether to use the notation or not!</p>",
        "id": 262969142,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638164609
    },
    {
        "content": "<p>By the way, I should have mentioned that there's another trove of lemmas about <code>supr</code> in \"conditionally complete lattices\" (such as <code>‚Ñù</code>) in<br>\n<a href=\"https://leanprover-community.github.io/mathlib_docs/order/conditionally_complete_lattice.html\">https://leanprover-community.github.io/mathlib_docs/order/conditionally_complete_lattice.html</a><br>\nKeyword here is <code>csupr</code>.</p>",
        "id": 262969203,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638164656
    },
    {
        "content": "<p>Thanks, yes, I found that.</p>",
        "id": 262969335,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638164856
    },
    {
        "content": "<p>Oh, one other option is to let the spectral radius be of type <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nnreal\">docs#nnreal</a> (nonnegative real) rather than <code>‚Ñù</code>.  This (in fact, with <a href=\"https://leanprover-community.github.io/mathlib_docs/find/ennreal\">docs#ennreal</a>) is what is done for the radius of convergence of a power series, which is somewhat analogous: <a href=\"https://leanprover-community.github.io/mathlib_docs/find/formal_multilinear_series.radius\">docs#formal_multilinear_series.radius</a></p>",
        "id": 262969390,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1638164899
    },
    {
        "content": "<p>That seems like it might be the best decision. I'll use <code>‚®Ü k ‚àà spectrum ùïú a, ‚à•k‚à•‚Çä</code></p>",
        "id": 262969589,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638165210
    },
    {
        "content": "<p>I think I've made all the changes, I replied to some of the conversations and then marked them as resolved. <span class=\"user-mention\" data-user-id=\"311453\">@Fr√©d√©ric Dupuis</span>, I gave reasons for <code>ennreal</code>, and <span class=\"user-mention\" data-user-id=\"260507\">@Heather Macbeth</span>, you should look at the reasons too, because they are even more significant than we realized last night (namely, the spectrum can be unbounded, just not in a Banach algebra; but the algebra can even be \"complete\" relative to another topology, like convergence in measure).</p>",
        "id": 263086531,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638231735
    },
    {
        "content": "<p>also, should I request that someone in algebra reviews the other PR <a href=\"https://github.com/leanprover-community/mathlib/issues/10476\">#10476</a>? I don't know what the standard protocol is, and I would prefer not to start out by stepping on toes or pushing people's buttons. If there is documentation about this kind of thing, then I managed to miss it.</p>",
        "id": 263087041,
        "sender_full_name": "Jireh Loreaux",
        "timestamp": 1638232122
    },
    {
        "content": "<p>It's completely fine to prompt people for reviews on PRs if a few days have passed without progress. Usually best is to open a topic in <a class=\"stream\" data-stream-id=\"144837\" href=\"/#narrow/stream/144837-PR-reviews\">#PR reviews</a> stream (you may not be subscribed yet). Just saying \"This PR is ready for review, does XYZ, and I've followed the suggestions made by A\" will be enough to remind people to go have a look at it!</p>",
        "id": 263094039,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1638238183
    }
]