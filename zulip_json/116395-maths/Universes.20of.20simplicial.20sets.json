[
    {
        "content": "<p>I've been doing some stuff with singular homology and have run into universe issues. I think the problem is that the functor Top.to_sSet has no universe parameter, it always has type <code>Top.{0} ⥤ sSet.{0}</code>. Is there a good reason for this/am I misunderstanding something here? If not, I guess I'll have to edit mathlib's simplicial sets files</p>",
        "id": 289240216,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1657568422
    },
    {
        "content": "<p>Make a PR <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 289246568,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1657571724
    },
    {
        "content": "<p>Sure, I'll look into it. Also, just for my future reference if I am making a PR to fix universe stuff, it seems like lemma <code>Module.cokernel_π_ext</code> has also overspecialized universes (the carrier type of the category of modules over R is forced to live in the same universe as R)</p>",
        "id": 289395864,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1657666302
    },
    {
        "content": "<p>also, category_theory.nat_trans.app_zero requires [preadditive D] when it really only needs [has_zero_morphisms D]</p>",
        "id": 289519697,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1657745791
    },
    {
        "content": "<p>also also, algebraic_topology.topological_simplex.simplex_category.to_Top_obj should probably be defined in terms of analysis.convex.basic.std_simplex</p>",
        "id": 289914885,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658108670
    },
    {
        "content": "<p>Ha, yeah I noticed these universe issues when I was playing with singular homology a while ago<br>\n<a href=\"#narrow/stream/116395-maths/topic/Ext.20and.20Tor/near/246037632\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Ext.20and.20Tor/near/246037632</a><br>\nbut I never got around to relaxing the universes for <code>Top.to_sSet</code>. Please(!) open a PR for this <span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> ! (I can try to do it soon if you prefer)</p>",
        "id": 289915665,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658109909
    },
    {
        "content": "<p>Sure, I'll start on it tonight. Could you give me permission to submit PRs to mathlib? My github username is Shamrock-Frost</p>",
        "id": 289915944,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658110327
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110401\">@Brendan Seamas Murphy</span> Just sent an invite</p>",
        "id": 289916306,
        "sender_full_name": "Kyle Miller",
        "timestamp": 1658111027
    },
    {
        "content": "<p>thanks!</p>",
        "id": 289916352,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658111048
    },
    {
        "content": "<p>I'm working on this now and I've pinpointed the source of the universe issues. If we add in some implicit arguments, the standard simplex is defined by this:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">standard_simplex</span> <span class=\"o\">:</span> <span class=\"n\">simplex_category</span> <span class=\"bp\">⥤</span> <span class=\"n\">sSet</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">yoneda.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">simplex_category</span> <span class=\"n\">simplex_category.small_category</span>\n</code></pre></div>\n<p>This doesn't immediately generalize to <code>simplex_category ⥤ sSet.{u}</code>, but we could change it to </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">standard_simplex</span> <span class=\"o\">:</span> <span class=\"n\">simplex_category</span> <span class=\"bp\">⥤</span> <span class=\"n\">sSet.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n  <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">yoneda.</span><span class=\"o\">{</span><span class=\"mi\">0</span> <span class=\"mi\">0</span><span class=\"o\">}</span> <span class=\"n\">simplex_category</span> <span class=\"n\">simplex_category.small_category</span><span class=\"o\">)</span>\n  <span class=\"bp\">⋙</span> <span class=\"n\">whiskering_right.obj</span> <span class=\"o\">(</span><span class=\"n\">ulift_functor.</span><span class=\"o\">{</span><span class=\"n\">u</span> <span class=\"mi\">0</span><span class=\"o\">})</span>\n</code></pre></div>\n<p>which sends [n] to the (Type u)-valued presheaf it represents. This does make things sort of awkward when using the standard n simplex, since we need to insert ulift.up and ulift.down in places, but it's the best workaround I could think of. It seems like this is a more general thing though, turning an object in a small category into presheaf of large sets. Would it be a good idea to generalize the definition of yoneda in category_theory.yoneda by adding another universe parameter? Or maybe to define a new functor like ulift_yoneda to be this composition and prove various lemmas about it like those in category_theory.yoneda? I'm not sure what the right move is here, suggestions are appreciated</p>",
        "id": 289936799,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658133243
    },
    {
        "content": "<p>Also I couldn't find whiskering_right at first and so I defined the left and right composition composition functors of a bicategory, then specialized them to Cat, then found out this doesn't work! We can't take \"whiskering in Cat\" as a special case of whiskering in an arbitrary bicategory because category_theory.whiskering_left is polymorphic in the universes of the various categories. I'm sure someone has noticed this before, but I thought it was interesting. I'm planning to submit a pr for the bicategory stuff after I finish resolving the sSet universe issues</p>",
        "id": 289937242,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658133569
    },
    {
        "content": "<p>Oh nevermind, it looks like what I did has been added on the bicategory branch</p>",
        "id": 289937845,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658134007
    },
    {
        "content": "<p>Changing yoneda would break a lot of code and require clients of the code to insert ulift.up and ulift.down everywhere, but if we don't do it this way it seems like we'd have a bunch of duplicate code? I don't really know what the right option is here</p>",
        "id": 289943097,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658137597
    },
    {
        "content": "<p>Could you deduce the usual Yoneda from the universe-generalized Yoneda?</p>",
        "id": 289943472,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1658137899
    },
    {
        "content": "<p>If so, then having a couple versions of Yoneda seems fine to me, as long as there are docstrings explaining the differences.</p>",
        "id": 289943567,
        "sender_full_name": "Thomas Browning",
        "timestamp": 1658137950
    },
    {
        "content": "<p>I don't think so, since universe generalized yoneda involves ulifting</p>",
        "id": 289997321,
        "sender_full_name": "Brendan Seamas Murphy",
        "timestamp": 1658165029
    },
    {
        "content": "<p>You can still transfer properties across <code>ulift</code>, though.</p>",
        "id": 289997662,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1658165169
    },
    {
        "content": "<p>Another strategy would be to first lift <code>simplex_category</code> into the target universe</p>",
        "id": 289998908,
        "sender_full_name": "Reid Barton",
        "timestamp": 1658165804
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/category_theory.as_small.up\">docs#category_theory.as_small.up</a> would help with that, for example</p>",
        "id": 289998964,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658165843
    },
    {
        "content": "<p>But I think </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">standard_simplex</span> <span class=\"o\">:</span> <span class=\"n\">simplex_category</span> <span class=\"bp\">⥤</span> <span class=\"n\">sSet.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"n\">yoneda</span> <span class=\"bp\">⋙</span> <span class=\"o\">(</span><span class=\"n\">whiskering_right</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">obj</span> <span class=\"n\">ulift_functor</span>\n</code></pre></div>\n<p>is the right approach here.</p>",
        "id": 289999384,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1658166072
    }
]