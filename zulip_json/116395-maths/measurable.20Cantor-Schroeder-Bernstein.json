[
    {
        "content": "<p>I recently wrote up what I think is a nice fact: that the Cantor-Schroeder-Bernstein theorem holds for measurable embeddings and measurable equivalences:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n<span class=\"kd\">noncomputable</span>\n<span class=\"kd\">def</span> <span class=\"n\">schroeder_bernstein</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">β</span> <span class=\"bp\">→</span> <span class=\"n\">α</span><span class=\"o\">}</span>\n  <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">measurable_embedding</span> <span class=\"n\">f</span><span class=\"o\">)(</span><span class=\"n\">hg</span> <span class=\"o\">:</span> <span class=\"n\">measurable_embedding</span> <span class=\"n\">g</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃ᵐ</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>You can see the proof <a href=\"https://github.com/Felix-Weilacher/dst/blob/main/src/Borel_Isomorphism.lean#L186\">here</a>. (There are some unrelated sorry's in the first half of the file which this proof does not depend on.) My goal is to prove the Borel isomorphism theorem : Two Polish spaces are Borel isomorphic iff they have the same cardinality. This is now almost complete.</p>",
        "id": 306699206,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1666974678
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"464202\">@Felix Weilacher</span>  this is great! I hope you are planning to PR the Borel isomorphism theorem to mathlib. I am currently writing code about transition kernels and regular conditional probability, and a big missing piece is the first step of some proofs: \"we can wlog prove the result when the space is [0,1].\"</p>",
        "id": 306804496,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1667033066
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"350992\">@Rémy Degenne</span>  Thank you! I will PR this stuff once I learn how that process works. In the meantime, the theorem is now done. You can see the two main statements <a href=\"https://github.com/Felix-Weilacher/dst/blob/main/src/Borel_Isomorphism.lean#L336\">here</a>. They are:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">variables</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">polish_space</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n<span class=\"kd\">variables</span> <span class=\"o\">[</span><span class=\"n\">measurable_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">borel_space</span> <span class=\"n\">β</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">polish_space</span> <span class=\"n\">β</span><span class=\"o\">]</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">borel_equiv_of_uncountable</span> <span class=\"o\">(</span><span class=\"n\">ha</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">countable</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hb</span> <span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">countable</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃ᵐ</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n\n<span class=\"kd\">theorem</span> <span class=\"n\">borel_equiv_iff_equiv</span> <span class=\"o\">:</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃ᵐ</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"bp\">↔</span> <span class=\"n\">nonempty</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"bp\">≃</span> <span class=\"n\">β</span><span class=\"o\">)</span>\n</code></pre></div>\n<p>(Note the first statement is not obviously generalized by the second)</p>",
        "id": 306856435,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1667058136
    },
    {
        "content": "<p>Should we make an <code>uncountable</code> class by the way?</p>",
        "id": 306856552,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667058237
    },
    {
        "content": "<p>We have empty, nonempty, and finite classes. Do we have an infinite class? Do we have a countable class? I remember people discussing <code>encodable</code> but I don't remember the decisions. If we have most or all of these then I guess it's a natural continuation of what we have.</p>",
        "id": 306860827,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667060231
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/countable\">docs#countable</a>, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/infinite\">docs#infinite</a></p>",
        "id": 306861089,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1667060349
    },
    {
        "content": "<p>If these things are all classes then it looks like an uncountable class is a natural extension I guess.</p>",
        "id": 306861254,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1667060418
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"350992\">Rémy Degenne</span> <a href=\"#narrow/stream/116395-maths/topic/measurable.20Cantor-Schroeder-Bernstein/near/306804496\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"464202\">Felix Weilacher</span>  this is great! I hope you are planning to PR the Borel isomorphism theorem to mathlib. I am currently writing code about transition kernels and regular conditional probability, and a big missing piece is the first step of some proofs: \"we can wlog prove the result when the space is [0,1].\"</p>\n</blockquote>\n<p>I also very much hope that Felix will PR the result to mathlib, and I'm moreover super happy to hear that Rémy is working on transition kernels and regular conditional probabilities. Those would enable a huge amount of probability theory to be done in the right way in mathlib.</p>",
        "id": 306870814,
        "sender_full_name": "Kalle Kytölä",
        "timestamp": 1667065701
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"373986\">@Kalle Kytölä</span> the work I have on kernels is on <a href=\"https://github.com/leanprover-community/mathlib/tree/RD_kernel\">branch#RD_kernel</a>, if you want to have a look. There is nothing on disintegration or conditionals for now, so no use of the borel isomorphism theorem either. For now the main result I have in the measure_theory/measure/kernel file is the construction of the composition of two s-finite kernels.</p>",
        "id": 307734595,
        "sender_full_name": "Rémy Degenne",
        "timestamp": 1667483941
    },
    {
        "content": "<p>I seem to recall that the pea/sun version of the Banach-Tarski paradox uses yet another version of Cantor-Schroder-Bernstein - If A is equidecomposable with a subset of B and B is equidecomposable with a subset of A then A and B are equidecomposable. Is there some more general principle at play?</p>",
        "id": 307791827,
        "sender_full_name": "Bolton Bailey",
        "timestamp": 1667494291
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"282271\">Bolton Bailey</span> <a href=\"#narrow/stream/116395-maths/topic/measurable.20Cantor-Schroeder-Bernstein/near/307791827\">said</a>:</p>\n<blockquote>\n<p>I seem to recall that the pea/sun version of the Banach-Tarski paradox uses yet another version of Cantor-Schroder-Bernstein - If A is equidecomposable with a subset of B and B is equidecomposable with a subset of A then A and B are equidecomposable. Is there some more general principle at play?</p>\n</blockquote>\n<p>I think this one comes down to the fact that if f and g are the injections in the assumptions of CSB, then the bijection one builds is a subset of f union g^{-1}</p>",
        "id": 307803820,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1667497806
    },
    {
        "content": "<p>another way to say this is that if G is bipartite graph with bipartition {A,B}, and there is a matching from A to B and a matching from B to A, then there is a perfect matching of G.</p>",
        "id": 307804359,
        "sender_full_name": "Felix Weilacher",
        "timestamp": 1667497962
    }
]