[
    {
        "content": "<p><a href=\"/user_uploads/3121/bgkwswPmU3pqlCtxXniUSHVy/summable_geometric_of_norm_lt_1_Problem.lean\">summable_geometric_of_norm_lt_1_Problem.lean</a> <br>\nUsing ℂ results in a type mismatch error. This seems like a bug to me.</p>",
        "id": 256073169,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1633359658
    },
    {
        "content": "<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.complex.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.complex.basic</span>\n\n<span class=\"kd\">noncomputable theory</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">topological_space</span> <span class=\"n\">normed_space</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">topological_space</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">complex</span>\n\n<span class=\"kd\">instance</span> <span class=\"o\">:</span> <span class=\"n\">topological_space</span> <span class=\"n\">ℂ</span>  <span class=\"o\">:=</span> <span class=\"bp\">⊥</span>\n\n<span class=\"sd\">/-- works -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">works</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">r</span><span class=\"bp\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span><span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">summable_geometric_of_norm_lt_1</span> <span class=\"n\">h0</span>\n\n<span class=\"sd\">/-- fails -/</span>\n<span class=\"kd\">lemma</span> <span class=\"n\">fails</span> <span class=\"o\">(</span><span class=\"n\">r</span> <span class=\"o\">:</span> <span class=\"n\">ℂ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h0</span> <span class=\"o\">:</span> <span class=\"bp\">∥</span><span class=\"n\">r</span><span class=\"bp\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">summable</span> <span class=\"o\">(</span><span class=\"bp\">λ</span><span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">),</span><span class=\"n\">r</span><span class=\"bp\">^</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">summable_geometric_of_norm_lt_1</span> <span class=\"n\">h0</span>\n\n<span class=\"kd\">end</span> <span class=\"n\">complex</span>\n</code></pre></div>",
        "id": 256073676,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1633359839
    },
    {
        "content": "<p>It works if you drop the <code>instance</code></p>",
        "id": 256073744,
        "sender_full_name": "Ruben Van de Velde",
        "timestamp": 1633359851
    },
    {
        "content": "<p>Huh. Thanks.</p>",
        "id": 256073870,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1633359904
    },
    {
        "content": "<p>Mark, what did you have in mind when writing this instance line?</p>",
        "id": 256073874,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1633359906
    },
    {
        "content": "<p>Originally, I added it to stop LEAN from complaining when I was declaring<br>\nlemma prob_neg1 (f : ℕ → ℂ) (r : ℂ) (h0 : abs r &lt; 1) (h : ∀(k : ℕ), abs (f k) &lt; abs (r^k)) : summable f :=<br>\n...<br>\nThe word 'summable' was redlined and requested an instance which I provided. This seems to have been fixed by an import I added after that, I suspect 'import analysis.complex.basic' fixed it, but I don't know.</p>",
        "id": 256074627,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1633360185
    },
    {
        "content": "<p>Indeed, the <code>normed_space</code> structure on <code>complex</code> is defined in <code>analysis.complex.basic</code></p>",
        "id": 256075221,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633360393
    },
    {
        "content": "<p><code>instance : topological_space ℂ := ⊥</code> basically means \"give <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"double-struck\">C</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbb{C}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord mathbb\">C</span></span></span></span> the discrete topology\", in which case the lemma <code>fails</code> makes sense but is false, of course, and it's not what you want.</p>",
        "id": 256075300,
        "sender_full_name": "Reid Barton",
        "timestamp": 1633360429
    },
    {
        "content": "<p>OTOH, <code>instance : topological_space ℂ := ⊤</code> would make this lemma trivial ;)</p>",
        "id": 256075507,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1633360499
    },
    {
        "content": "<p>I copied and modified 'instance : topological_space ℤ := ⊥' without understanding what it meant.</p>",
        "id": 256075840,
        "sender_full_name": "Mark Gerads",
        "timestamp": 1633360622
    },
    {
        "content": "<p>Topological space structures on a type form a lattice, with the bottom one the discrete topology and the top one the indiscrete topology. Two topologies T1 and T2 satisfy T1&lt;=T2 iff the identity map (X,T1) -&gt; (X,T2) is continuous.</p>",
        "id": 256130544,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1633380585
    }
]