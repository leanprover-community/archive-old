[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_5</span><span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span>\n<span class=\"n\">S</span><span class=\"o\">:</span> <span class=\"n\">ideal</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">S</span> <span class=\"bp\">=</span> <span class=\"err\">⊥</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"n\">a</span><span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"err\">∈</span> <span class=\"n\">S</span>\n<span class=\"n\">h</span><span class=\"o\">:</span> <span class=\"bp\">¬</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">h_1</span><span class=\"o\">:</span> <span class=\"err\">↑</span><span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n<span class=\"err\">⊢</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>\n\n\n<p>val_ring K is a subring of K. As far as I understand, I am given that the lift of x to K is 0, and need to prove that x = 0. I don't know how to proceed. <br>\nAny help is appreciated, thank you!</p>",
        "id": 203344851,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594260760
    },
    {
        "content": "<p>Does <code>exact subtype.eq h_1</code> work?</p>",
        "id": 203344945,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594260855
    },
    {
        "content": "<p>Yes, that works!</p>",
        "id": 203344984,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594260941
    },
    {
        "content": "<p>does <code>assumption_mod_cast</code> work?</p>",
        "id": 203345264,
        "sender_full_name": "Jalex Stark",
        "timestamp": 1594261296
    },
    {
        "content": "<p>I don't think <code>norm_cast</code> knows about subtype casts</p>",
        "id": 203345341,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1594261397
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"252300\">Jalex Stark</span> <a href=\"#narrow/stream/116395-maths/topic/lift.20from.20subring.20to.20field/near/203345264\">said</a>:</p>\n<blockquote>\n<p>does <code>assumption_mod_cast</code> work?</p>\n</blockquote>\n<p>No, it gives the error </p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">assumption_mod_cast</span> <span class=\"n\">failed</span><span class=\"o\">:</span>\n<span class=\"n\">exact</span> <span class=\"n\">tactic</span> <span class=\"n\">failed</span><span class=\"o\">,</span> <span class=\"n\">type</span> <span class=\"n\">mismatch</span><span class=\"o\">,</span> <span class=\"n\">given</span> <span class=\"n\">expression</span> <span class=\"n\">has</span> <span class=\"n\">type</span>\n  <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"n\">but</span> <span class=\"n\">is</span> <span class=\"n\">expected</span> <span class=\"n\">to</span> <span class=\"k\">have</span> <span class=\"n\">type</span>\n  <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 203345516,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594261622
    },
    {
        "content": "<p>Alternatively, you can rewrite using h_1 (probably after doing a case split on x)</p>",
        "id": 203345598,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594261721
    },
    {
        "content": "<p>I am now having the same problem, with \\le :</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">K</span><span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_1</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_4</span><span class=\"o\">:</span> <span class=\"n\">field</span> <span class=\"n\">K</span>\n<span class=\"bp\">_</span><span class=\"n\">inst_5</span><span class=\"o\">:</span> <span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span>\n<span class=\"n\">x</span><span class=\"o\">:</span> <span class=\"err\">↥</span><span class=\"o\">(</span><span class=\"n\">val_ring</span> <span class=\"n\">K</span><span class=\"o\">)</span>\n<span class=\"err\">⊢</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"err\">↑</span><span class=\"n\">x</span>\n</code></pre></div>\n\n\n<p>The definition of val_ring K is:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"n\">def</span> <span class=\"n\">val_ring</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">discrete_valuation_field</span> <span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"o\">:=</span> <span class=\"o\">{</span> <span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">K</span> <span class=\"bp\">|</span> <span class=\"mi\">0</span> <span class=\"bp\">≤</span> <span class=\"n\">v</span> <span class=\"n\">x</span> <span class=\"o\">}</span>\n</code></pre></div>\n\n\n<p>Any help is appreciated, thank you!</p>",
        "id": 203346046,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594262376
    },
    {
        "content": "<p>Try the same thing -- split x, and see what you get.</p>",
        "id": 203346106,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594262449
    },
    {
        "content": "<p>(I think <code>exact x.2</code> should take care of this in one line.)</p>",
        "id": 203346142,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1594262516
    },
    {
        "content": "<p>Ah ok, cases x does it, as does exact x.2 . Thank you!</p>",
        "id": 203346350,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594262845
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"243562\">Adam Topaz</span> <a href=\"#narrow/stream/116395-maths/topic/lift.20from.20subring.20to.20field/near/203346142\">said</a>:</p>\n<blockquote>\n<p>(I think <code>exact x.2</code> should take care of this in one line.)</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"250372\">@Ashvni Narayanan</span> This is (strictly speaking) leaking an implementation detail. Hence it is encouraged to prove a lemma <code>val_ring.zero_le</code> as one of the first things after you define <code>val_ring</code>. It is part of the basic API.</p>",
        "id": 203349608,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1594268380
    },
    {
        "content": "<p>Ok sure. Thank you!</p>",
        "id": 203390173,
        "sender_full_name": "Ashvni Narayanan",
        "timestamp": 1594303951
    }
]