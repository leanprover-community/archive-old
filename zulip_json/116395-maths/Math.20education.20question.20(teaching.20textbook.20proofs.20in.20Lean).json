[
    {
        "content": "<p>Hi. I'm from the computer science contingency of Lean users, but I'm going through 'Understanding Analysis' to try some very basic 'proper math' in Lean. Many of the proofs use arguments that are classics, but either aren't very Lean-friendly or aren't constructive. As an example, the proof of <code>irrat (sqrt 2)</code> used in the book is the proof by contradiction/infinite descent.</p>\n<p>Is the approach you guys have taken (or would take) for math education to say \"Well here's how these are done in Lean/mathlib, the sooner you get used to doing things this way the better\", or is it to try and power through the classic definitions in Lean? Or are you trying to give equal time to both approaches?</p>\n<p>Thanks!</p>",
        "id": 177181202,
        "sender_full_name": "Chris B",
        "timestamp": 1570042710
    },
    {
        "content": "<p>We certainly don't worry about being constructive. Usually</p>",
        "id": 177183164,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1570044084
    },
    {
        "content": "<p>If something in mathlib differs from theclassical definition it's because it's in a greater generality, in which case the classical definition is better to formalize.</p>",
        "id": 177183317,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1570044188
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"228466\">@Chris B</span> What do you mean when you say \"Many of the proofs ... either aren't very Lean-friendly\"? If there are proofs in the library that can be optimized to become more Lean friendly, I think we very much welcome those.</p>",
        "id": 177184716,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570045220
    },
    {
        "content": "<p>Some of our contributors care more about being constructive than others. But in general, we unashamedly celebrate the axiom of choice.</p>",
        "id": 177184772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570045285
    },
    {
        "content": "<p>Do you refer to <a href=\"https://www.amazon.com/Understanding-Analysis-Undergraduate-Texts-Mathematics/dp/1493927116\" target=\"_blank\" title=\"https://www.amazon.com/Understanding-Analysis-Undergraduate-Texts-Mathematics/dp/1493927116\">https://www.amazon.com/Understanding-Analysis-Undergraduate-Texts-Mathematics/dp/1493927116</a>?</p>",
        "id": 177185748,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570045959
    },
    {
        "content": "<p>Note that I don't understand your question either way.</p>",
        "id": 177185828,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570046013
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> Sorry, I meant \"the proofs in the textbook aren't always Lean-friendly\" in that some of the things they take for granted don't seem trivial in Lean. I'm sure the ones in mathlib are great.</p>",
        "id": 177186025,
        "sender_full_name": "Chris B",
        "timestamp": 1570046136
    },
    {
        "content": "<p>What is an example of a non-Lean friendly proof? I don't understand the issue with the irrationality of sqrt 2 example.</p>",
        "id": 177186306,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570046306
    },
    {
        "content": "<p>Aha... I see. And I'm sure there are also lots of proofs in mathlib that could be improved. But yes... most maths is not \"designed to be formalised\" to quote Mario out of context.</p>",
        "id": 177186324,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1570046320
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span> Yes, that's the book. Maybe 'lean-aware' is a better choice of words than 'lean friendly'. The <code>irrat sqrt 2</code> proof is simple, but it's  not aware of the behavior/interaction between Lean's number types or the fact that rewriting terms in Lean is not always as easy as it is on paper, so as someone who's not super familiar with mathlib it's not trivial to recreate in terms of time and might end up brittle, ugly etc. On the other hand, there is also a definition of <code>irrat sqrt 2</code> in mathlib that is different but was written by someone who IS aware of those things.</p>\n<p>The question was whether educators who were using Lean and had a similar pair of proofs (one from mathlib and one from a textbook) were choosing to focus on one or the other.</p>",
        "id": 177192098,
        "sender_full_name": "Chris B",
        "timestamp": 1570050093
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110044\">@Chris Hughes</span>  That's good to know going forward, thanks.</p>",
        "id": 177192286,
        "sender_full_name": "Chris B",
        "timestamp": 1570050228
    },
    {
        "content": "<p>Maybe we should move this conversation to the \"Lean for teaching\" stream. When I use Lean for teaching I only use mathlib for its tactics and definition of real numbers. For instance I redefine limits of sequences and functions. I cannot expect my first year students to understand mathlib's use of filters and uniform spaces... This is the same reason we don't use Bourbaki for teaching. The good news is we can still use Lean (and mathlib tactics).</p>",
        "id": 177194041,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1570051589
    },
    {
        "content": "<p>Interesting, thanks for that insight.</p>",
        "id": 177198088,
        "sender_full_name": "Chris B",
        "timestamp": 1570054647
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110031\">@Patrick Massot</span>  I understand, from a lecture by Kevin Buzzard, that you have written python code to convert lean-related material to an interactive webpage, a \"literate form\" of input involving latex. Where can I get this?</p>",
        "id": 177210215,
        "sender_full_name": "Tim Daly",
        "timestamp": 1570070274
    },
    {
        "content": "<p>I believe it's <a href=\"https://github.com/leanprover-community/format_lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/format_lean\">https://github.com/leanprover-community/format_lean</a></p>",
        "id": 177211626,
        "sender_full_name": "Jesse Michael Han",
        "timestamp": 1570072708
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"210574\">@Patrick Massot</span> </p>\n<blockquote>\n<p>For instance I redefine limits of sequences and functions. </p>\n</blockquote>\n<p>I want to show my friend in advanced calculus the power of LEAN but I haven't got the hang of it yet. Could you show me how you redefined the limits? Btw the theorem I am working on is</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow></munder><mi>C</mi><mo>⋅</mo><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><mi>C</mi><mo>⋅</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow></munder><msub><mi>a</mi><mi>n</mi></msub><mtext> for </mtext><mi>C</mi><mo>∈</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\lim_{n\\to\\infty} C \\cdot a_n = C \\cdot \\lim_{n\\to\\infty} a_n \\text{ for } C \\in \\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.39444em;vertical-align:-0.7em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-2.1em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">∞</span></span></span></span><span style=\"top:-2.7em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span><span class=\"mop\">lim</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.39444em;vertical-align:-0.7em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-2.1em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">∞</span></span></span></span><span style=\"top:-2.7em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span><span class=\"mop\">lim</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord\"> for </span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span></span></p>",
        "id": 178342423,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571275163
    },
    {
        "content": "<p>I am trying to define it according to <a href=\"https://en.wikipedia.org/wiki/(%CE%B5,_%CE%B4)-definition_of_limit\" target=\"_blank\" title=\"https://en.wikipedia.org/wiki/(%CE%B5,_%CE%B4)-definition_of_limit\">https://en.wikipedia.org/wiki/(%CE%B5,_%CE%B4)-definition_of_limit</a></p>",
        "id": 178344291,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571277983
    },
    {
        "content": "<p>But it involves an equation and I am kinda stuck on this</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lim</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"kt\">Prop</span> <span class=\"o\">:=</span> <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"o\">)</span>\n</pre></div>",
        "id": 178344312,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571278054
    },
    {
        "content": "<p>Oh ok this seems to work</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">lim</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">δ</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">c</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">δ</span> <span class=\"bp\">→</span>\n    <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n</pre></div>",
        "id": 178344598,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571278479
    },
    {
        "content": "<p>lol how do I express infinity in this thing</p>",
        "id": 178344665,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571278587
    },
    {
        "content": "<p>There is a type <code>ennreal</code> in mathlib that represents non-negative reals with a positive infinity, possibly this does what you want?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">ennreal</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">ennreal</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">ennreal</span>\n\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"o\">(</span><span class=\"err\">∞</span> <span class=\"o\">:</span> <span class=\"n\">ennreal</span><span class=\"o\">)</span>\n</pre></div>",
        "id": 178345138,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1571279313
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132222\">@Yufan Lou</span> There are two answers... the first (which is what mathlib does) is to step back, generalize everything and use so-called filters, instead of the epsilon-delta-sequence definition. The second would be to say that some statement is true for <code>x</code> sufficiently close to infty, in other words, for <code>x</code> sufficiently large.</p>",
        "id": 178345231,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571279425
    },
    {
        "content": "<p>Btw, the <code>0 &lt; abs (x - c)</code> doesn't seem very useful in your definition.</p>",
        "id": 178345247,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571279454
    },
    {
        "content": "<p>I personally don't think that using <code>ennreal</code> would lead to a nice experience.</p>",
        "id": 178345264,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571279505
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132222\">@Yufan Lou</span> What do mathematicians actually mean when that say that <code>f</code> has a limit as <code>x</code> tends to infty? After all, they don't have <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">∞</mi><mo>∈</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\infty \\in \\mathbb{R}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord\">∞</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span> either. So they must have explained somewhere what they mean when the abuse notation like this.</p>",
        "id": 178345332,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571279588
    },
    {
        "content": "<p>LOL That's a great question, but I don't have a mathematician around to ask</p>",
        "id": 178345519,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571279879
    },
    {
        "content": "<p>Oh wait there is a subsection defining the infinity case separately</p>",
        "id": 178345570,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571279929
    },
    {
        "content": "<p>Ah... that goes into metric space which I don't understand tho</p>",
        "id": 178345589,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571279971
    },
    {
        "content": "<p>The precise statement for limits at infinity is as follows:[16]</p>\n<p>Suppose f  is defined on a subset D of a metric space X with a metric d X ( x , y ) and maps into a metric space Y with a metric d Y ( x , y ) . Let L ∈ Y.</p>\n<p>We say that</p>\n<div class=\"codehilite\"><pre><span></span>lim x → ∞ f ( x ) = L\n</pre></div>\n\n\n<p>if for every ε &gt; 0 , there is a real number N &gt; 0 such that there is an x ∈ D  where d X ( x , 0 ) &gt; N and such that if d X ( x , 0 ) &gt; N and x ∈ D, then d Y ( f ( x ) , L ) &lt; ε .</p>",
        "id": 178345658,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571280110
    },
    {
        "content": "<p>Ok metric space basically redefines absolute value aka \"distance\" right</p>",
        "id": 178345700,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571280140
    },
    {
        "content": "<p>if I only need real number I just replace d X with abs</p>",
        "id": 178345718,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571280211
    },
    {
        "content": "<p>Yep, that's right</p>",
        "id": 178345772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571280272
    },
    {
        "content": "<p>Yeah!</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">def</span> <span class=\"n\">lim_inf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">),</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n</pre></div>\n\n\n<p>How to type the maths abs notation tho</p>",
        "id": 178346011,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571280721
    },
    {
        "content": "<p>Also wikipedia language so redundant</p>",
        "id": 178346054,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571280764
    },
    {
        "content": "<p>Try <code>\\||</code> I think</p>",
        "id": 178346065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571280827
    },
    {
        "content": "<p>k</p>",
        "id": 178346143,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571280962
    },
    {
        "content": "<p>Btw, I think this is taking the limit at all infinities</p>",
        "id": 178346174,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571280970
    },
    {
        "content": "<p>You only want the positive one</p>",
        "id": 178346180,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571280981
    },
    {
        "content": "<p>In a general metric space you can't really talk of positive and negative infinity</p>",
        "id": 178346184,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571281003
    },
    {
        "content": "<p>But you want <code>x &gt; N</code> not <code>abs (x - 0) &gt; N</code></p>",
        "id": 178346187,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571281024
    },
    {
        "content": "<p>oh ok! thanks for simplifying :D</p>",
        "id": 178346193,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571281057
    },
    {
        "content": "<p><code>\\||</code> gives me unexpected token tho</p>",
        "id": 178346255,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571281151
    },
    {
        "content": "<p>I still need the other abs right?</p>",
        "id": 178346320,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571281229
    },
    {
        "content": "<p>Search mathlib for <code>norm</code>. You'll see the double-bar symbol show up a lot. But I forgot how to input it.</p>",
        "id": 178346535,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571281602
    },
    {
        "content": "<p>gotcha</p>",
        "id": 178346538,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571281613
    },
    {
        "content": "<p>I see it, it's the same, but I still get unexpected token</p>",
        "id": 178346615,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571281736
    },
    {
        "content": "<p>missing import?</p>",
        "id": 178346617,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571281739
    },
    {
        "content": "<p>Wouldn't think so...</p>",
        "id": 178346632,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571281776
    },
    {
        "content": "<p>also I cannot multiply a function directly with a real LOL</p>",
        "id": 178346635,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571281786
    },
    {
        "content": "<p>No... they are different things, right?</p>",
        "id": 178346641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571281801
    },
    {
        "content": "<p>You can try <code>r \\bu f</code></p>",
        "id": 178346685,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571281808
    },
    {
        "content": "<p>Where <code>r</code> is real and <code>f</code> a function</p>",
        "id": 178346689,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571281822
    },
    {
        "content": "<p>I understand LOL just musing</p>",
        "id": 178346692,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571281834
    },
    {
        "content": "<p>oh! let me try</p>",
        "id": 178346693,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571281841
    },
    {
        "content": "<p>What does <code>example : normed_field real := by apply_instance</code> give you? If it gives an error, then there is a missing import.</p>",
        "id": 178346706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571281889
    },
    {
        "content": "<p><code>unknown identifier 'normed_field'</code> missing import it is</p>",
        "id": 178346710,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571281920
    },
    {
        "content": "<p>/me never really works with real numbers</p>",
        "id": 178346747,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571281925
    },
    {
        "content": "<p><code>import analysis.normed_space.basic</code> fixes it</p>",
        "id": 178346758,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571281981
    },
    {
        "content": "<p>Good</p>",
        "id": 178346772,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571282030
    },
    {
        "content": "<p>The name is kinda scary XD I hope it doesn't make proof harder to write</p>",
        "id": 178346812,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571282043
    },
    {
        "content": "<p>This is the line that you needed: <a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/analysis/normed_space/basic.lean#L370\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/analysis/normed_space/basic.lean#L370\">https://github.com/leanprover-community/mathlib/blob/master/src/analysis/normed_space/basic.lean#L370</a></p>",
        "id": 178346836,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571282122
    },
    {
        "content": "<p>So that explains why the import fixes it</p>",
        "id": 178346837,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571282133
    },
    {
        "content": "<p>I see</p>",
        "id": 178346839,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571282152
    },
    {
        "content": "<p>Ahh I am getting <code>(deterministic) timeout</code> on this theorem signature</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">lim_inf</span> <span class=\"n\">a</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">lim_inf</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"err\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 178346883,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571282193
    },
    {
        "content": "<p>Can you post a MWE (minimal working example, i.e. showing the imports) so someone can investigate for you?</p>",
        "id": 178346895,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571282252
    },
    {
        "content": "<blockquote>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow></munder><mi>C</mi><mo>⋅</mo><msub><mi>a</mi><mi>n</mi></msub><mo>=</mo><mi>C</mi><mo>⋅</mo><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>n</mi><mo>→</mo><mi mathvariant=\"normal\">∞</mi></mrow></munder><msub><mi>a</mi><mi>n</mi></msub><mtext> for </mtext><mi>C</mi><mo>∈</mo><mi mathvariant=\"double-struck\">R</mi></mrow><annotation encoding=\"application/x-tex\">\\lim_{n\\to\\infty} C \\cdot a_n = C \\cdot \\lim_{n\\to\\infty} a_n \\text{ for } C \\in \\mathbb{R}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.39444em;vertical-align:-0.7em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-2.1em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">∞</span></span></span></span><span style=\"top:-2.7em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span><span class=\"mop\">lim</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.39444em;vertical-align:-0.7em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.69444em;\"><span style=\"top:-2.1em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span><span class=\"mrel mtight\">→</span><span class=\"mord mtight\">∞</span></span></span></span><span style=\"top:-2.7em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span><span class=\"mop\">lim</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord text\"><span class=\"mord\"> for </span></span><span class=\"mord mathdefault\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68889em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbb\">R</span></span></span></span></span></span></p>\n</blockquote>\n<p>This was the theorem I was going for</p>",
        "id": 178346898,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571282276
    },
    {
        "content": "<p>I've never used this part of the library myself, but I do remember students seeing deterministic timeouts when working with normed_fields way too often, so it would be good to get to the bottom of this.</p>",
        "id": 178346937,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571282290
    },
    {
        "content": "<p>(I meant, show us exactly the code that produces the deterministic timeout, including the imports)</p>",
        "id": 178346947,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571282318
    },
    {
        "content": "<p>Ah, sorry, this is the code</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">tactic</span><span class=\"bp\">.</span><span class=\"n\">norm_num</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lim_inf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">lim_inf</span> <span class=\"n\">a</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">lim_inf</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"err\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 178346951,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571282336
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132222\">@Yufan Lou</span> What happens if you replace <code>C \\bu a</code> with <code>(\\lambda x, C * a x)</code>?</p>",
        "id": 178347011,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571282452
    },
    {
        "content": "<p>That fixes it</p>",
        "id": 178347023,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571282495
    },
    {
        "content": "<p>Doubling the timeout limit, it works, but is incredibly slow. :-(</p>",
        "id": 178347084,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571282596
    },
    {
        "content": "<p><span aria-label=\"sweat\" class=\"emoji emoji-1f613\" role=\"img\" title=\"sweat\">:sweat:</span> hopefully it's not something too complicated</p>",
        "id": 178347132,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571282669
    },
    {
        "content": "<p>meanwhile I'll continue with my proof I think</p>",
        "id": 178347136,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571282684
    },
    {
        "content": "<p>LOL how to prove <code>1 &gt; 0</code></p>",
        "id": 178347351,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571283074
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132222\">@Yufan Lou</span> ,  I posted an issue for you, I have to go soon but hopefully someone will sort it out: <a href=\"https://github.com/leanprover-community/mathlib/issues/1561\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/issues/1561\">https://github.com/leanprover-community/mathlib/issues/1561</a></p>",
        "id": 178347404,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571283167
    },
    {
        "content": "<p><code>by norm_num</code>.</p>",
        "id": 178347406,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571283172
    },
    {
        "content": "<p>Ah Thank you!</p>",
        "id": 178347407,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571283181
    },
    {
        "content": "<p>Or <code>by linarith</code>.</p>",
        "id": 178347414,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571283204
    },
    {
        "content": "<p>or <code>by simp</code> :-)</p>",
        "id": 178347419,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571283228
    },
    {
        "content": "<p>How come I forgot <code>simp</code> XD only tried <code>trivial</code></p>",
        "id": 178347459,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571283268
    },
    {
        "content": "<p>Not trivial enough for Lean</p>",
        "id": 178347462,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571283280
    },
    {
        "content": "<p>(<code>simp</code> can only handle the case in <code>nat</code>; if you meant in the reals then use norm_num.)</p>",
        "id": 178347463,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1571283284
    },
    {
        "content": "<p>Was about to say <code>simp</code> gave me <code>0 &lt; 1</code> as a new goal LOL</p>",
        "id": 178347476,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571283329
    },
    {
        "content": "<p>Which tactic shall I use to factor <code>C * a 2 - C * L</code> into <code>C * (a 2 - L)</code></p>",
        "id": 178348044,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571284231
    },
    {
        "content": "<p>eh library_search to the rescue</p>",
        "id": 178348262,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571284630
    },
    {
        "content": "<p>ahhhh just realized this thing  requires by case cuz C = 0 C not = 0</p>",
        "id": 178353294,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571292435
    },
    {
        "content": "<p>I can't parse the last part of your sentence</p>",
        "id": 178353470,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571292667
    },
    {
        "content": "<p><code>by_cases C = 0 with Ceq0</code> gives me <code>invalid 'begin-end' expression, ',' expected</code></p>",
        "id": 178353619,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571292885
    },
    {
        "content": "<p>while <code>by_cases C = 0</code> is fine</p>",
        "id": 178353692,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571293008
    },
    {
        "content": "<p><code>by_cases hC : C = 0,</code></p>",
        "id": 178353693,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571293010
    },
    {
        "content": "<p>Yeah, the syntax is not always uniform <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 178353700,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571293026
    },
    {
        "content": "<p>Ah OK, that just means this needs update <a href=\"https://leanprover.github.io/reference/tactics.html#basic-tactics\" target=\"_blank\" title=\"https://leanprover.github.io/reference/tactics.html#basic-tactics\">https://leanprover.github.io/reference/tactics.html#basic-tactics</a></p>",
        "id": 178353707,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571293057
    },
    {
        "content": "<p>Ok. <span class=\"user-mention\" data-user-id=\"110865\">@Jeremy Avigad</span> <span aria-label=\"upper right\" class=\"emoji emoji-2197\" role=\"img\" title=\"upper right\">:upper_right:</span></p>",
        "id": 178353759,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571293128
    },
    {
        "content": "<p>As posted on the issue, the quick fix for the scalar multiplication is</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">900</span><span class=\"o\">]</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">has_scalar</span>\n<span class=\"n\">attribute</span> <span class=\"o\">[</span><span class=\"kn\">instance</span><span class=\"o\">,</span> <span class=\"n\">priority</span> <span class=\"mi\">800</span><span class=\"o\">]</span> <span class=\"n\">mul_action</span><span class=\"bp\">.</span><span class=\"n\">to_has_scalar</span>\n\n<span class=\"n\">def</span> <span class=\"n\">lim_inf</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"bp\">∃</span> <span class=\"n\">N</span> <span class=\"bp\">&gt;</span> <span class=\"o\">(</span><span class=\"mi\">0</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span>\n    <span class=\"bp\">∃</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">abs</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span>\n\n<span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">lim_inf</span> <span class=\"n\">a</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">lim_inf</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"err\">•</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span>\n</pre></div>",
        "id": 178353827,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1571293216
    },
    {
        "content": "<p>XD I see thanks</p>",
        "id": 178354000,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571293541
    },
    {
        "content": "<p>Well, thanks for the fix but the <code>C • a</code> version feels at least 10x slower than than the lambda version</p>",
        "id": 178354226,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571293884
    },
    {
        "content": "<p>I am sticking with the lambda version for now</p>",
        "id": 178354233,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571293906
    },
    {
        "content": "<p>I need this lemma as my final step but I don't know how</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">example</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"err\">∥</span><span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"err\">∥</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"n\">C</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"bp\">→</span> <span class=\"err\">∥</span><span class=\"n\">C</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">x</span><span class=\"err\">∥</span> <span class=\"bp\">&lt;</span> <span class=\"n\">ε</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n<span class=\"n\">intros</span><span class=\"o\">,</span>\n<span class=\"n\">simp</span> <span class=\"n\">at</span> <span class=\"bp\">*</span><span class=\"o\">,</span>\n<span class=\"n\">library_search</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 178356465,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571296649
    },
    {
        "content": "<p>Yeah, those things are really annoying</p>",
        "id": 178356706,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571296899
    },
    {
        "content": "<p>You'll need things like <code>norm_div</code> and <code>norm_nonneg</code> and <code>mul_lt_mul_left</code></p>",
        "id": 178356754,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571296950
    },
    {
        "content": "<p>Hmm, let me try</p>",
        "id": 178356982,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571297222
    },
    {
        "content": "<p>What should I import</p>",
        "id": 178356990,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571297231
    },
    {
        "content": "<p>I would think most of those things are already there</p>",
        "id": 178357013,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571297275
    },
    {
        "content": "<p>huh, I have <code>import analysis.normed_space.basic</code> but still <code>unknown identifier 'norm_div'</code></p>",
        "id": 178357087,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571297339
    },
    {
        "content": "<p><code>src/analysis/normed_space/basic.lean:@[simp] lemma norm_div {α : Type*} [normed_field α] (a b : α) : ∥a/b∥ = ∥a∥/∥b∥ :=</code></p>",
        "id": 178357158,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571297418
    },
    {
        "content": "<p>You might need to prefix it with something</p>",
        "id": 178357171,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571297426
    },
    {
        "content": "<p>Or open a namespace</p>",
        "id": 178357172,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571297432
    },
    {
        "content": "<p>k</p>",
        "id": 178357173,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571297432
    },
    {
        "content": "<p>Are you using VScode?</p>",
        "id": 178357176,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571297442
    },
    {
        "content": "<p>If so, hit <code>Ctrl-P</code> and then type <code>#norm_div</code>. You'll likely see the full name of the lemma</p>",
        "id": 178357201,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571297481
    },
    {
        "content": "<p>found it, thank you!</p>",
        "id": 178357277,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571297559
    },
    {
        "content": "<p>OMGGGGG I actually finished this</p>",
        "id": 178358960,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571299306
    },
    {
        "content": "<p>Now go and read the wiki page on Stockholm syndrome</p>",
        "id": 178359067,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571299377
    },
    {
        "content": "<p>LOOOOOOOL</p>",
        "id": 178359088,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571299404
    },
    {
        "content": "<p><a href=\"https://gist.github.com/louy2/4c5938960dd649d0e49aa53d3f56e07c\" target=\"_blank\" title=\"https://gist.github.com/louy2/4c5938960dd649d0e49aa53d3f56e07c\">https://gist.github.com/louy2/4c5938960dd649d0e49aa53d3f56e07c</a></p>",
        "id": 178359334,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571299666
    },
    {
        "content": "<p>Comments welcome!</p>",
        "id": 178359405,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571299712
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132222\">@Yufan Lou</span> there is a proof without casing C=0</p>",
        "id": 178360319,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571300553
    },
    {
        "content": "<p><code>let</code> should be used when the object is not <code>Prop</code>; otherwise use <code>have</code></p>",
        "id": 178360464,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571300711
    },
    {
        "content": "<p>I chose <code>let</code> where I couldn't figure out how to use <code>have</code></p>",
        "id": 178360799,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571301082
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">lim_inf_cons_mul_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">lim_inf</span> <span class=\"n\">a</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"bp\">∀</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">),</span> <span class=\"n\">lim_inf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"k\">assume</span> <span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">,</span>\n  <span class=\"n\">unfold</span> <span class=\"n\">lim_inf</span> <span class=\"n\">at</span> <span class=\"n\">H</span> <span class=\"err\">⊢</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> unfold definitions -/</span>\n  <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hε</span> <span class=\"o\">:</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">HC</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">],</span>\n    <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"n\">rw</span> <span class=\"n\">HC</span><span class=\"o\">,</span> <span class=\"c\">/-</span><span class=\"cm\"> ∥0 * a x - 0 * L∥ &lt; ε -/</span>\n    <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">Hε</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">HinvC</span> <span class=\"o\">:</span> <span class=\"n\">C</span><span class=\"bp\">⁻¹</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">inv_ne_zero</span> <span class=\"n\">HC</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">HnC</span> <span class=\"o\">:</span> <span class=\"err\">∥</span><span class=\"n\">C</span><span class=\"bp\">⁻¹</span><span class=\"err\">∥</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">abs_pos_of_ne_zero</span> <span class=\"n\">HinvC</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">HnCε</span> <span class=\"o\">:</span> <span class=\"err\">∥</span><span class=\"n\">C</span><span class=\"bp\">⁻¹</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mul_pos&#39;</span> <span class=\"n\">HnC</span> <span class=\"n\">Hε</span><span class=\"o\">,</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"err\">∥</span><span class=\"n\">C</span><span class=\"bp\">⁻¹</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">HnCε</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">HN</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">HN</span><span class=\"o\">],</span>\n    <span class=\"k\">assume</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">Hx</span> <span class=\"o\">:</span> <span class=\"n\">x</span> <span class=\"bp\">&gt;</span> <span class=\"n\">N</span><span class=\"o\">),</span>\n    <span class=\"n\">specialize</span> <span class=\"n\">H</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">HnC</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"n\">HC</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 178360919,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1571301213
    },
    {
        "content": "<p>Ah! <code>specialize</code>!</p>",
        "id": 178361076,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571301383
    },
    {
        "content": "<p>I fiddled with pattern matching for quite a while too... so <code>rcases</code> is the answer</p>",
        "id": 178361105,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571301433
    },
    {
        "content": "<p>Thank you so much!</p>",
        "id": 178361122,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571301473
    },
    {
        "content": "<p>You can even merge those two lines if you want</p>",
        "id": 178361750,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571302114
    },
    {
        "content": "<p>What's the point of all these type ascriptions? Is it for readability?</p>",
        "id": 178362116,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571302451
    },
    {
        "content": "<p>Why specializing right before an exact?</p>",
        "id": 178362122,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571302460
    },
    {
        "content": "<p>Anyway, I did a quick compression pass, maybe you'll learn something by studying:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">lim_inf_cons_mul_eq</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span> <span class=\"bp\">→</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">L</span> <span class=\"o\">:</span> <span class=\"n\">ℝ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">lim_inf</span> <span class=\"n\">a</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∀</span> <span class=\"n\">C</span><span class=\"o\">,</span> <span class=\"n\">lim_inf</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intros</span> <span class=\"n\">C</span> <span class=\"n\">ε</span> <span class=\"n\">Hε</span><span class=\"o\">,</span>\n  <span class=\"n\">by_cases</span> <span class=\"n\">HC</span> <span class=\"o\">:</span> <span class=\"n\">C</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">norm_num</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span><span class=\"o\">,</span>\n    <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"n\">HC</span><span class=\"o\">]</span> <span class=\"kn\">using</span> <span class=\"n\">Hε</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"n\">HnC</span> <span class=\"o\">:</span> <span class=\"err\">∥</span><span class=\"n\">C</span><span class=\"bp\">⁻¹</span><span class=\"err\">∥</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">abs_pos_of_ne_zero</span> <span class=\"o\">(</span><span class=\"n\">inv_ne_zero</span> <span class=\"n\">HC</span><span class=\"o\">),</span>\n    <span class=\"k\">have</span> <span class=\"n\">HnCε</span> <span class=\"o\">:</span> <span class=\"err\">∥</span><span class=\"n\">C</span><span class=\"bp\">⁻¹</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span> <span class=\"bp\">&gt;</span> <span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"k\">from</span> <span class=\"n\">mul_pos&#39;</span> <span class=\"n\">HnC</span> <span class=\"n\">Hε</span><span class=\"o\">,</span>\n    <span class=\"n\">rcases</span> <span class=\"n\">H</span> <span class=\"o\">(</span><span class=\"err\">∥</span><span class=\"n\">C</span><span class=\"bp\">⁻¹</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"n\">HnCε</span> <span class=\"k\">with</span> <span class=\"bp\">⟨</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">HN</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"bp\">⟩</span><span class=\"o\">,</span>\n    <span class=\"n\">use</span> <span class=\"o\">[</span><span class=\"n\">N</span><span class=\"o\">,</span> <span class=\"n\">HN</span><span class=\"o\">],</span>\n    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_sub</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_lt_mul_left</span> <span class=\"n\">HnC</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"n\">inv_mul_cancel</span> <span class=\"n\">HC</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span>\n    <span class=\"n\">exact</span> <span class=\"n\">H</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 178362135,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571302487
    },
    {
        "content": "<p>Thanks! Yeah I had readability in mind. I want to share this with my maths friend and try to make it somewhat similar to what we would do by hand. So I wonder if the <code>rw</code> at the end can be done with <code>calc</code>.</p>",
        "id": 178362333,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571302688
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"132222\">@Yufan Lou</span> In that case, you will love <code>show</code></p>",
        "id": 178362361,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571302715
    },
    {
        "content": "<p>You can write <code>show this = what * the * goal looks like</code>,</p>",
        "id": 178362382,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571302740
    },
    {
        "content": "<p>wow what LOL I couldn't tell what's different between <code>show</code> and <code>have</code></p>",
        "id": 178362417,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571302775
    },
    {
        "content": "<p><code>have</code> introduces a new assumption (but you have to prove it, of course)</p>",
        "id": 178362531,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571302857
    },
    {
        "content": "<p><code>show</code> restates the goal</p>",
        "id": 178362539,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1571302863
    },
    {
        "content": "<p>Ahhhhhh I suspected that but didn't get it to work for some reason XD</p>",
        "id": 178362713,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571302993
    },
    {
        "content": "<p>\"unification\" <span aria-label=\"thinking\" class=\"emoji emoji-1f914\" role=\"img\" title=\"thinking\">:thinking:</span> how far can I restate it</p>",
        "id": 178362866,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571303119
    },
    {
        "content": "<p>So far I have only read proofs  where <code>show</code>  is at the end</p>",
        "id": 178362912,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571303156
    },
    {
        "content": "<p>Sure you can use a calc block, ending like</p>",
        "id": 178363627,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571303779
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>    <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span><span class=\"o\">,</span>\n    <span class=\"k\">calc</span>  <span class=\"err\">∥</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"n\">L</span><span class=\"err\">∥</span>\n        <span class=\"bp\">=</span> <span class=\"err\">∥</span> <span class=\"n\">C</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">L</span><span class=\"o\">)</span> <span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"n\">mul_sub</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"err\">∥</span> <span class=\"n\">C</span> <span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"err\">∥</span><span class=\"n\">a</span> <span class=\"n\">x</span> <span class=\"bp\">-</span> <span class=\"n\">L</span> <span class=\"err\">∥</span> <span class=\"o\">:</span> <span class=\"n\">norm_mul</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">&lt;</span> <span class=\"err\">∥</span> <span class=\"n\">C</span> <span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"err\">∥</span><span class=\"n\">C</span><span class=\"bp\">⁻¹</span><span class=\"err\">∥</span> <span class=\"bp\">*</span> <span class=\"n\">ε</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">mul_lt_mul_of_pos_left</span> <span class=\"o\">(</span><span class=\"n\">H</span> <span class=\"n\">x</span> <span class=\"n\">Hx</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">abs_pos_of_ne_zero</span> <span class=\"n\">HC</span><span class=\"o\">)</span>\n    <span class=\"bp\">...</span> <span class=\"bp\">=</span> <span class=\"n\">ε</span> <span class=\"o\">:</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">mul_assoc</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">norm_mul</span><span class=\"o\">,</span> <span class=\"n\">mul_inv_cancel</span> <span class=\"n\">HC</span><span class=\"o\">,</span> <span class=\"n\">norm_one</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">]</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 178363633,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571303784
    },
    {
        "content": "<p>or many variation, depending where you want to split steps.</p>",
        "id": 178363645,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571303798
    },
    {
        "content": "<p>But this is probably not so good if you want to impress people. Really Lean should need help in all those steps. Stating the steps is ok, by tactics should then crush the proofs. <span class=\"user-mention\" data-user-id=\"110596\">@Rob Lewis</span> is that in scope for polya?</p>",
        "id": 178363757,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1571303896
    },
    {
        "content": "<p>That's beautiful! Thank you! I can explain that Lean can help with all those, but I feel that without showing the steps my friends would just not know what Lean is doing.</p>",
        "id": 178364857,
        "sender_full_name": "Yufan Lou",
        "timestamp": 1571304897
    },
    {
        "content": "<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"110596\">Rob Lewis</span> is that in scope for polya?</p>\n</blockquote>\n<p>Depending what you have in the context, some of it is. But this looks primarily like a rewriting problem, not an arithmetic one.</p>",
        "id": 178365249,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1571305214
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"112680\">@Johan Commelin</span> <span class=\"user-mention\" data-user-id=\"132222\">@Yufan Lou</span> I'll make the correction to the reference manual (I didn't think anyone was using it any more, but I guess people are still finding it). It may take a little while. I have lists of corrections to deal with for TPIL and Logic and Proof as well. I just need to find an afternoon to work through them all.</p>",
        "id": 178378807,
        "sender_full_name": "Jeremy Avigad",
        "timestamp": 1571317646
    },
    {
        "content": "<blockquote>\n<p>Thanks! Yeah I had readability in mind. I want to share this with my maths friend and try to make it somewhat similar to what we would do by hand. So I wonder if the <code>rw</code> at the end can be done with <code>calc</code>.</p>\n</blockquote>\n<p><span class=\"user-mention\" data-user-id=\"132222\">@Yufan Lou</span> if you want to make your code more appealing to your maths friends, you can try Patrick Massot's <a href=\"https://github.com/leanprover-community/format_lean\" target=\"_blank\" title=\"https://github.com/leanprover-community/format_lean\">formatter</a>. I used it to make <a href=\"http://wwwf.imperial.ac.uk/~buzzard/docs/lean/sandwich.html\" target=\"_blank\" title=\"http://wwwf.imperial.ac.uk/~buzzard/docs/lean/sandwich.html\">this Lean proof of the sandwich theorem</a> and I will be using it later on to make Lean notes for the course I am currently involved in. You click on stuff and it opens up Lean code -- click on the grey rectangles to view the tactic state at any point in the proof. In practice this just means adding a bunch of comments (in LaTeX) to your code.</p>",
        "id": 178426494,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1571350212
    }
]