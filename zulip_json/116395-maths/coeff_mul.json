[
    {
        "content": "<p>I have just finished the proof of <code>coeff_mul</code> for `mv_polynomial:<br>\n<a href=\"https://gist.github.com/jcommelin/add8c8df8b3479c435d3f5ac34cdb1f7#file-mv_polynomial_coeff_mul-lean-L189-L298\" target=\"_blank\" title=\"https://gist.github.com/jcommelin/add8c8df8b3479c435d3f5ac34cdb1f7#file-mv_polynomial_coeff_mul-lean-L189-L298\">https://gist.github.com/jcommelin/add8c8df8b3479c435d3f5ac34cdb1f7#file-mv_polynomial_coeff_mul-lean-L189-L298</a></p>",
        "id": 170428019,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562654575
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">coeff_mul</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">*</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">nat_downset</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">coeff</span> <span class=\"n\">m</span> <span class=\"n\">φ</span> <span class=\"bp\">*</span> <span class=\"n\">coeff</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">-</span> <span class=\"n\">m</span><span class=\"o\">)</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 170428029,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562654592
    },
    {
        "content": "<p>I think this would fill a little gap in the API for polynomials.</p>",
        "id": 170428038,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562654622
    },
    {
        "content": "<p>Question: what should <code>finsupp.nat_downset</code> be called? Does this somehow generalise? Is there something like \"partial orders with downsets that are finsets\"?</p>",
        "id": 170428087,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562654662
    },
    {
        "content": "<p>Also... if people want a golfing challenge... currently the proof is a whopping 120 lines...</p>",
        "id": 170428094,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562654688
    },
    {
        "content": "<p>Another option is to <code>sum</code> over a finset in the product, so that we are even closer to mimicking <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msub><mo>∑</mo><mrow><mi>i</mi><mo>+</mo><mi>j</mi><mo>=</mo><mi>n</mi></mrow></msub><msub><mi>c</mi><mi>i</mi></msub><mo stretchy=\"false\">(</mo><mi>ϕ</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><msub><mi>c</mi><mi>j</mi></msub><mo stretchy=\"false\">(</mo><mi>ψ</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{i + j = n} c_i(\\phi) \\cdot c_j(\\psi)</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.185818em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16195399999999993em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">i</span><span class=\"mbin mtight\">+</span><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span><span class=\"mrel mtight\">=</span><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\">ϕ</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">c</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">ψ</span><span class=\"mclose\">)</span></span></span></span>.</p>",
        "id": 170428168,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562654795
    },
    {
        "content": "<p>It already exists, it's called <code>multiset.diagonal</code> I think</p>",
        "id": 170428841,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562655744
    },
    {
        "content": "<p>(actually that's the subtraction free version - <code>nat_downset</code> is <code>multiset.powerset</code>)</p>",
        "id": 170428881,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562655827
    },
    {
        "content": "<p>Just like with <code>nat</code>, I recommend avoiding subtraction here and indeed I suggest using a finset over the product as you've indicated</p>",
        "id": 170428959,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562655931
    },
    {
        "content": "<p>Ok, but <code>multiset X</code> is not defeq to <code>finsupp X nat</code></p>",
        "id": 170429624,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562656759
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> I think <code>multiset.diagonal</code> is very nice. But how should I apply it in the context of <code>mv_polynomial</code>? There is no obvious analogue for arbitrary <code>finsupp</code>s. Should I use glue between <code>multiset X</code> and <code>finsupp X nat</code>?</p>",
        "id": 170429751,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562656952
    },
    {
        "content": "<p>The analogue I think is to axiomatize it</p>",
        "id": 170429834,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562657068
    },
    {
        "content": "<p>there are other examples, but I don't know a better way to say it than \"the set of all elements below x is finite\"</p>",
        "id": 170429857,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562657105
    },
    {
        "content": "<p>In the case of <code>finsupp X nat</code> specifically, I think I would just prove it by transferring from <code>multiset X</code></p>",
        "id": 170429936,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562657178
    },
    {
        "content": "<p>I'm still confused about what you would want the <em>statement</em> of <code>coeff_mul</code> to look like...</p>",
        "id": 170429962,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562657239
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">coeff_mul</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n<span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">*</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">diagonal</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">φ</span> <span class=\"bp\">*</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</pre></div>",
        "id": 170430022,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562657284
    },
    {
        "content": "<p>here <code>finsupp.diagonal n</code> is something like <code>(multiset.diagonal n.support).map (prod.map f f)</code> where <code>f m = \\lam x, count x m</code></p>",
        "id": 170430153,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562657449
    },
    {
        "content": "<p>and <code>f</code> is then shown to be one half of an order isomorphism, so that <code>mem_diagonal</code> holds also for finsupp</p>",
        "id": 170430228,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562657541
    },
    {
        "content": "<p>Aha... thanks for the suggestions!</p>",
        "id": 170430265,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562657594
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> It's not a problem that <code>finsupp.diagonal</code> is only defined for <code>ℕ</code>?</p>",
        "id": 170430334,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562657651
    },
    {
        "content": "<p>The generalization, like I said, is to have a typeclass for types that have a <code>diagonal</code> function; this is the instance for <code>nat</code></p>",
        "id": 170430368,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562657721
    },
    {
        "content": "<p>Another example of a type with this property (let's say \"downward finite\") is <code>finsupp X A</code> itself, when A is downward finite</p>",
        "id": 170430546,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562657932
    },
    {
        "content": "<blockquote>\n<p>Ok, but <code>multiset X</code> is not defeq to <code>finsupp X nat</code></p>\n</blockquote>\n<p>hey we have a natural isomorphism</p>",
        "id": 170430700,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562658085
    },
    {
        "content": "<p>I would have thought you would be the first to point out that it's not constructively provable</p>",
        "id": 170430821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562658210
    },
    {
        "content": "<p>which direction?</p>",
        "id": 170430933,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562658318
    },
    {
        "content": "<p>finsupp -&gt; multiset</p>",
        "id": 170431015,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562658399
    },
    {
        "content": "<p>but you have the support</p>",
        "id": 170431080,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562658474
    },
    {
        "content": "<p>Oh you're right. As long as X is decidable both directions work</p>",
        "id": 170431163,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1562658527
    },
    {
        "content": "<p>looks like I need to bring up my special category</p>",
        "id": 170431171,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562658539
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span> </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- ⟨s.to_finset, λ x, s.count x, λ x, multiset.mem_to_finset.trans $ multiset.count_pos.symm.trans $ nat.pos_iff_ne_zero⟩</span>\n<span class=\"c1\">-- faster but less idiomatic</span>\n<span class=\"n\">def</span> <span class=\"n\">Multiset_Finsupp_nat</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"err\">≅</span> <span class=\"n\">Finsupp_nat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">,</span>\n</pre></div>",
        "id": 170439996,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562667154
    },
    {
        "content": "<p>which one would you choose?</p>",
        "id": 170440002,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562667165
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">multiset</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">natural_isomorphism</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposites</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">concrete_category</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">instances</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">DecEq</span> <span class=\"o\">:=</span> <span class=\"n\">bundled</span> <span class=\"n\">decidable_eq</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">DecEq</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">str</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">DecEq_category</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">DecEq</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">instances</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">instances</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Multiset</span> <span class=\"o\">:</span> <span class=\"n\">DecEq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"err\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"o\">,</span>\n  <span class=\"n\">map_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_id</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_map</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Finsupp_nat</span> <span class=\"o\">:</span> <span class=\"n\">DecEq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"err\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain</span><span class=\"o\">,</span>\n  <span class=\"n\">map_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain_id</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain_comp</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_repeat</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_succ</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_succ</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_add</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">])</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_succ</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_succ</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">add_cons</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- ⟨s.to_finset, λ x, s.count x, λ x, multiset.mem_to_finset.trans $ multiset.count_pos.symm.trans $ nat.pos_iff_ne_zero⟩</span>\n<span class=\"c1\">-- faster but less idiomatic</span>\n<span class=\"n\">def</span> <span class=\"n\">Multiset_Finsupp_nat</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"err\">≅</span> <span class=\"n\">Finsupp_nat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">,</span>\n    <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">s</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n      <span class=\"k\">then</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n          <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain_add</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain_single</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n      <span class=\"k\">else</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n          <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain_add</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain_single</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span><span class=\"o\">,</span>\n    <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map_domain</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">hsx</span> <span class=\"n\">hn</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain_add</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_add_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain_single</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span>\n            <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_add_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_repeat</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n        <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_add</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_add</span> <span class=\"o\">}</span>\n      <span class=\"kn\">end</span> <span class=\"o\">},</span>\n  <span class=\"n\">hom_inv_id&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">skip</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_hom_id&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"k\">by</span> <span class=\"n\">skip</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 170444077,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562671239
    },
    {
        "content": "<p>that's it for now</p>",
        "id": 170444082,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562671244
    },
    {
        "content": "<p>I think I was just aware of <code>finsupp.of_multiset</code></p>",
        "id": 170452502,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562678733
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">multiset</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">finsupp</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">natural_isomorphism</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">types</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">opposites</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">concrete_category</span>\n\n<span class=\"kn\">universe</span> <span class=\"n\">u</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span>\n\n<span class=\"kn\">namespace</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">instances</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">DecEq</span> <span class=\"o\">:=</span> <span class=\"n\">bundled</span> <span class=\"n\">decidable_eq</span>\n\n<span class=\"kn\">instance</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">DecEq</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">decidable_eq</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"n\">str</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">DecEq_category</span> <span class=\"o\">:</span> <span class=\"n\">category</span> <span class=\"n\">DecEq</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span><span class=\"o\">,</span> <span class=\"n\">x</span> <span class=\"bp\">→</span> <span class=\"n\">y</span><span class=\"o\">,</span>\n  <span class=\"n\">id</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">,</span>\n  <span class=\"n\">comp</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">y</span> <span class=\"n\">z</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">g</span> <span class=\"err\">∘</span> <span class=\"n\">f</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">end</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">instances</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">category_theory</span><span class=\"bp\">.</span><span class=\"n\">instances</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Multiset</span> <span class=\"o\">:</span> <span class=\"n\">DecEq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"err\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">multiset</span> <span class=\"n\">α</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map</span><span class=\"o\">,</span>\n  <span class=\"n\">map_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_id</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_map</span> <span class=\"n\">g</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">}</span>\n\n<span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"kn\">reducible</span><span class=\"o\">]</span> <span class=\"n\">def</span> <span class=\"n\">Finsupp_nat</span> <span class=\"o\">:</span> <span class=\"n\">DecEq</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"err\">⥤</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">obj</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">α</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">,</span>\n  <span class=\"n\">map</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain</span><span class=\"o\">,</span>\n  <span class=\"n\">map_id&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain_id</span><span class=\"o\">,</span>\n  <span class=\"n\">map_comp&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">γ</span> <span class=\"n\">f</span> <span class=\"n\">g</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain_comp</span> <span class=\"o\">}</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_repeat</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">β</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">β</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"n\">x</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">x</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_succ</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_succ</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_add</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">x</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"n\">x</span> <span class=\"o\">(</span><span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"n\">x</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">rec_on</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">,</span> <span class=\"n\">add_zero</span><span class=\"o\">])</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n<span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_succ</span><span class=\"o\">,</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">add_succ</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_succ</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">add_cons</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n\n<span class=\"c1\">-- ⟨s.to_finset, λ x, s.count x, λ x, multiset.mem_to_finset.trans $ multiset.count_pos.symm.trans $ nat.pos_iff_ne_zero⟩</span>\n<span class=\"c1\">-- faster but less idiomatic</span>\n<span class=\"n\">def</span> <span class=\"n\">Multiset_Finsupp_nat</span> <span class=\"o\">:</span> <span class=\"n\">Multiset</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"err\">≅</span> <span class=\"n\">Finsupp_nat</span><span class=\"bp\">.</span><span class=\"o\">{</span><span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">:=</span>\n<span class=\"o\">{</span> <span class=\"n\">hom</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"o\">,</span>\n    <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span> <span class=\"n\">s</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">x</span> <span class=\"bp\">=</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">x</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">s</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">f</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">x</span>\n      <span class=\"k\">then</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n          <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain_add</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain_single</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_pos</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span>\n      <span class=\"k\">else</span> <span class=\"k\">by</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n          <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain_add</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">add_apply</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain_single</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_apply</span><span class=\"o\">,</span> <span class=\"n\">if_neg</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n  <span class=\"n\">inv</span> <span class=\"o\">:=</span>\n  <span class=\"o\">{</span> <span class=\"n\">app</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">s</span><span class=\"o\">,</span> <span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span><span class=\"o\">,</span>\n    <span class=\"n\">naturality&#39;</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span> <span class=\"n\">β</span> <span class=\"n\">f</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n      <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map_domain</span> <span class=\"n\">f</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"n\">f</span><span class=\"o\">,</span>\n      <span class=\"k\">from</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">hsx</span> <span class=\"n\">hn</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain_add</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_add_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">map_domain_single</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span>\n            <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_add_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_repeat</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">],</span>\n        <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_add</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_add</span> <span class=\"o\">}</span>\n      <span class=\"kn\">end</span> <span class=\"o\">},</span>\n  <span class=\"n\">hom_inv_id&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"o\">(</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">s</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">a</span> <span class=\"n\">s</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_cons</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_add_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_one</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">cons_add</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span>\n      <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_add</span> <span class=\"o\">}</span>\n    <span class=\"kn\">end</span><span class=\"o\">,</span>\n  <span class=\"n\">inv_hom_id&#39;</span> <span class=\"o\">:=</span> <span class=\"n\">nat_trans</span><span class=\"bp\">.</span><span class=\"n\">ext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">funext</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"k\">show</span> <span class=\"o\">((</span><span class=\"n\">s</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">map</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single</span> <span class=\"n\">x</span> <span class=\"mi\">1</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"bp\">=</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n    <span class=\"k\">from</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">induction</span> <span class=\"n\">s</span> <span class=\"n\">rfl</span> <span class=\"err\">$</span> <span class=\"bp\">λ</span> <span class=\"n\">y</span> <span class=\"n\">n</span> <span class=\"n\">s</span> <span class=\"n\">hsy</span> <span class=\"n\">hn</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"k\">begin</span>\n      <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_add_index</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">sum_single_index</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_add</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sum_add</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">map_repeat</span><span class=\"o\">],</span>\n      <span class=\"o\">{</span> <span class=\"n\">congr&#39;</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">clear</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">induction</span> <span class=\"n\">n</span> <span class=\"k\">with</span> <span class=\"n\">n</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_zero</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_zero</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sum_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_succ</span><span class=\"o\">,</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">sum_cons</span><span class=\"o\">,</span> <span class=\"n\">ih</span><span class=\"o\">,</span> <span class=\"err\">←</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">one_add</span><span class=\"o\">,</span> <span class=\"n\">finsupp</span><span class=\"bp\">.</span><span class=\"n\">single_add</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">refl</span> <span class=\"o\">},</span> <span class=\"o\">{</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">multiset</span><span class=\"bp\">.</span><span class=\"n\">repeat_add</span> <span class=\"o\">}</span>\n    <span class=\"kn\">end</span> <span class=\"o\">}</span>\n</pre></div>",
        "id": 170452978,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1562679119
    },
    {
        "content": "<p>Stuff got 90 lines shorter after <span class=\"user-mention\" data-user-id=\"110049\">@Mario Carneiro</span>'s suggestions: <a href=\"https://gist.github.com/jcommelin/add8c8df8b3479c435d3f5ac34cdb1f7\" target=\"_blank\" title=\"https://gist.github.com/jcommelin/add8c8df8b3479c435d3f5ac34cdb1f7\">https://gist.github.com/jcommelin/add8c8df8b3479c435d3f5ac34cdb1f7</a></p>",
        "id": 170457179,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562682037
    },
    {
        "content": "<p>Still using <code>-</code> to subtract <code>single s 1</code> but I think that can't be avoided.</p>",
        "id": 170457204,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562682059
    },
    {
        "content": "<p>This is still pretty frightening. It's really baffling to think the definition of multiplication does not make this lemma obvious...</p>",
        "id": 170457460,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1562682223
    },
    {
        "content": "<p>Of course people shouldn't be discouraged to golf this down to a 5 line proof</p>",
        "id": 170457487,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562682239
    },
    {
        "content": "<p>I really feel like making this the definition of multiplication.</p>",
        "id": 170459748,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562683567
    },
    {
        "content": "<p>But I guess <code>mv_polynomial</code> inherits multiplication in a crazy way from <code>ℕ</code> being a <code>add_monoid</code>.</p>",
        "id": 170459801,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562683606
    },
    {
        "content": "<p>I'm surprised you didn't use <code>multiset.count</code> anywhere.</p>",
        "id": 170460727,
        "sender_full_name": "Chris Hughes",
        "timestamp": 1562684205
    },
    {
        "content": "<p>Maybe I should not have proven it by induction on the polynomials...</p>",
        "id": 170460793,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562684251
    },
    {
        "content": "<p>I don't know.</p>",
        "id": 170460798,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562684255
    },
    {
        "content": "<p>It seemed like an obvious thing to do. Maybe it is obviously bad.</p>",
        "id": 170460821,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562684271
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">coeff_mul</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"n\">ψ</span> <span class=\"o\">:</span> <span class=\"n\">mv_polynomial</span> <span class=\"n\">σ</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">coeff</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">φ</span> <span class=\"bp\">*</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum</span> <span class=\"o\">(</span><span class=\"n\">diagonal</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">p</span><span class=\"o\">,</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">φ</span> <span class=\"bp\">*</span> <span class=\"n\">coeff</span> <span class=\"n\">p</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ψ</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">rw</span> <span class=\"n\">mul_def</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"o\">:=</span> <span class=\"bp\">@</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_sigma</span> <span class=\"o\">(</span><span class=\"n\">σ</span> <span class=\"bp\">→</span><span class=\"err\">₀</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"n\">α</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"n\">ψ</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">)</span>\n    <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"bp\">+</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">=</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"k\">then</span> <span class=\"n\">coeff</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">φ</span> <span class=\"bp\">*</span> <span class=\"n\">coeff</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">ψ</span> <span class=\"k\">else</span> <span class=\"mi\">0</span><span class=\"o\">),</span>\n  <span class=\"n\">convert</span> <span class=\"n\">this</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"kn\">using</span> <span class=\"mi\">1</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">this</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff</span><span class=\"o\">],</span>\n    <span class=\"n\">repeat</span> <span class=\"o\">{</span><span class=\"n\">rw</span> <span class=\"n\">sum_apply</span><span class=\"o\">,</span> <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_congr</span> <span class=\"n\">rfl</span><span class=\"o\">,</span> <span class=\"n\">intros</span><span class=\"o\">,</span> <span class=\"n\">dsimp</span> <span class=\"n\">only</span><span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">single_apply</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"k\">have</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">diagonal</span> <span class=\"n\">n</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">filter</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">x</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">support</span> <span class=\"bp\">∧</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"err\">∈</span> <span class=\"n\">ψ</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">)</span> <span class=\"err\">⊆</span> <span class=\"o\">(</span><span class=\"n\">diagonal</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n      <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">filter_subset</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_sdiff</span> <span class=\"n\">this</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span> <span class=\"n\">swap</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_sdiff</span><span class=\"o\">,</span> <span class=\"n\">not_iff_not_of_iff</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">),</span>\n        <span class=\"n\">not_and</span><span class=\"o\">,</span> <span class=\"n\">not_and</span><span class=\"o\">,</span> <span class=\"n\">not_mem_support_iff</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">by_cases</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"err\">∈</span> <span class=\"n\">φ</span><span class=\"bp\">.</span><span class=\"n\">support</span><span class=\"o\">,</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff</span><span class=\"o\">,</span> <span class=\"n\">coeff</span><span class=\"o\">,</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">mul_zero</span><span class=\"o\">]</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"n\">not_mem_support_iff</span> <span class=\"n\">at</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">coeff</span><span class=\"o\">,</span> <span class=\"n\">H</span><span class=\"o\">,</span> <span class=\"n\">zero_mul</span><span class=\"o\">]</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">symmetry</span><span class=\"o\">,</span>\n    <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"err\">←</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_sdiff</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">filter_subset</span> <span class=\"bp\">_</span><span class=\"o\">),</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_eq_zero</span><span class=\"o\">,</span> <span class=\"n\">zero_add</span><span class=\"o\">],</span> <span class=\"n\">swap</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_sdiff</span><span class=\"o\">,</span> <span class=\"n\">not_iff_not_of_iff</span> <span class=\"o\">(</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">),</span> <span class=\"n\">not_and</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n      <span class=\"n\">replace</span> <span class=\"n\">hx</span> <span class=\"o\">:=</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">if_neg</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">apply</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">sum_bij</span><span class=\"o\">,</span> <span class=\"n\">swap</span> <span class=\"mi\">5</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">x</span><span class=\"bp\">.</span><span class=\"mi\">2</span><span class=\"o\">)</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_sigma</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span>\n        <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">mem_diagonal</span><span class=\"o\">],</span>\n        <span class=\"n\">dsimp</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">x</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span> <span class=\"n\">at</span> <span class=\"n\">hx</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"n\">if_pos</span> <span class=\"n\">hx</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"bp\">⟩</span> <span class=\"bp\">⟨</span><span class=\"n\">k</span><span class=\"o\">,</span><span class=\"n\">l</span><span class=\"bp\">⟩</span> <span class=\"n\">hij</span> <span class=\"n\">hkl</span><span class=\"o\">,</span> <span class=\"n\">simpa</span> <span class=\"kn\">using</span> <span class=\"n\">and</span><span class=\"bp\">.</span><span class=\"n\">intro</span> <span class=\"o\">},</span>\n      <span class=\"o\">{</span> <span class=\"n\">rintros</span> <span class=\"bp\">⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"bp\">⟩</span> <span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">refine</span> <span class=\"bp\">⟨⟨</span><span class=\"n\">i</span><span class=\"o\">,</span><span class=\"n\">j</span><span class=\"bp\">⟩</span><span class=\"o\">,</span> <span class=\"bp\">_</span><span class=\"o\">,</span> <span class=\"bp\">_⟩</span><span class=\"o\">,</span> <span class=\"o\">{</span> <span class=\"n\">apply_instance</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">mem_diagonal</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hij</span><span class=\"o\">,</span> <span class=\"n\">rw</span> <span class=\"o\">[</span><span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_filter</span><span class=\"o\">,</span> <span class=\"n\">finset</span><span class=\"bp\">.</span><span class=\"n\">mem_sigma</span><span class=\"o\">],</span>\n          <span class=\"n\">exact</span> <span class=\"n\">hij</span><span class=\"bp\">.</span><span class=\"n\">symm</span> <span class=\"o\">},</span>\n        <span class=\"o\">{</span> <span class=\"n\">refl</span> <span class=\"o\">}</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n    <span class=\"n\">all_goals</span> <span class=\"o\">{</span> <span class=\"n\">apply_instance</span> <span class=\"o\">}</span> <span class=\"o\">}</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 170616065,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562836742
    },
    {
        "content": "<p>I hope this is a more reasonable length.</p>",
        "id": 170616076,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1562836755
    }
]