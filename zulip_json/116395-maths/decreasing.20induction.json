[
    {
        "content": "<p>I can not find the fact that, if a property <code>P n</code> holds and if <code>P (i+1)</code> implies <code>P i</code> for all <code>i</code>, then <code>P m</code> holds whenever <code>m &lt;= n</code>. Is this already in mathlib?</p>",
        "id": 162941917,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1554837760
    },
    {
        "content": "<p>We have currently a decreasing induction principle on nat, in the form</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">def</span> <span class=\"n\">decreasing_induction</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">mn</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_rec_on</span> <span class=\"n\">mn</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">ih</span> <span class=\"n\">hsk</span><span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"bp\">$</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"n\">hsk</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span><span class=\"o\">,</span> <span class=\"n\">h</span><span class=\"o\">)</span> <span class=\"n\">hP</span>\n</code></pre></div>\n<p>(notice the completely unreadable proof :-). This is even able to construct data, as testified by the fact that <code>P</code> takes values in <code>Sort*</code>. Unfortunately, the assumption is too strong: one should only need <code>h</code> for <code>k &lt; n</code>, not for all <code>k</code>. It is easy to prove it with this weaker assumption (just write <code>m = n - i</code> and do a usual induction on <code>i</code>), but it is not obvious to me if this kind of proof is able to construct data. So, I came up with the following proof, which avoids subtraction and is based on the above <code>decreasing_induction</code>, but my proof takes 30 lines instead of 1, so it is obviously wrong. Here it is:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">decreasing_induction'</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">k</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">mn</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"k\">let</span> <span class=\"n\">Q</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">k</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span> <span class=\"k\">then</span> <span class=\"n\">P</span> <span class=\"n\">k</span> <span class=\"k\">else</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">H</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span><span class=\"o\">,</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">Q</span> <span class=\"n\">k</span> <span class=\"o\">:=</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"k\">if</span> <span class=\"n\">hk</span> <span class=\"o\">:</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span> <span class=\"k\">then</span>\n  <span class=\"kd\">begin</span>\n    <span class=\"k\">have</span> <span class=\"n\">Qk'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">),</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_le</span><span class=\"o\">,</span> <span class=\"n\">ite_eq_left_iff</span><span class=\"o\">],</span>\n      <span class=\"k\">assume</span> <span class=\"n\">hk'</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"n\">succ_le_iff.2</span> <span class=\"n\">hk</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_lt</span> <span class=\"n\">hk'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">Qk</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">k</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_le</span><span class=\"o\">,</span> <span class=\"n\">ite_eq_left_iff</span><span class=\"o\">],</span>\n      <span class=\"k\">assume</span> <span class=\"n\">hk'</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hk.trans</span> <span class=\"n\">hk'</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">cast</span> <span class=\"n\">Qk.symm</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"n\">hk</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">Qk'</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"kd\">end</span> <span class=\"k\">else</span> <span class=\"kd\">begin</span>\n    <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_lt</span><span class=\"o\">]</span> <span class=\"n\">at</span> <span class=\"n\">hk</span><span class=\"o\">,</span>\n    <span class=\"k\">have</span> <span class=\"n\">Qk'</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ite_eq_right_iff</span><span class=\"o\">],</span>\n      <span class=\"k\">assume</span> <span class=\"n\">hk'</span><span class=\"o\">,</span>\n      <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span> <span class=\"o\">((</span><span class=\"n\">succ_le_iff.1</span> <span class=\"n\">hk'</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">trans_le</span> <span class=\"n\">hk</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n    <span class=\"k\">have</span> <span class=\"n\">Qk</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">k</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">ite_eq_right_iff</span><span class=\"o\">],</span>\n      <span class=\"k\">assume</span> <span class=\"n\">hk'</span><span class=\"o\">,</span>\n      <span class=\"n\">rw</span> <span class=\"n\">le_antisymm</span> <span class=\"n\">hk</span> <span class=\"n\">hk'</span> <span class=\"o\">},</span>\n    <span class=\"n\">exact</span> <span class=\"n\">cast</span> <span class=\"n\">Qk.symm</span> <span class=\"o\">((</span><span class=\"n\">cast</span> <span class=\"n\">Qk'</span> <span class=\"n\">a</span><span class=\"o\">))</span>\n  <span class=\"kd\">end</span><span class=\"o\">,</span>\n  <span class=\"k\">have</span> <span class=\"n\">Qn</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simp</span> <span class=\"o\">[</span><span class=\"n\">Q</span><span class=\"o\">],</span>\n  <span class=\"k\">have</span> <span class=\"n\">Qm</span> <span class=\"o\">:</span> <span class=\"n\">Q</span> <span class=\"n\">m</span> <span class=\"bp\">=</span> <span class=\"n\">P</span> <span class=\"n\">m</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">not_le</span><span class=\"o\">,</span> <span class=\"n\">ite_eq_left_iff</span><span class=\"o\">],</span>\n    <span class=\"k\">assume</span> <span class=\"n\">hmn</span><span class=\"o\">,</span>\n    <span class=\"n\">exact</span> <span class=\"o\">(</span><span class=\"n\">lt_irrefl</span> <span class=\"n\">_</span> <span class=\"o\">(</span><span class=\"n\">hmn.trans_le</span> <span class=\"n\">mn</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">elim</span> <span class=\"o\">},</span>\n  <span class=\"n\">exact</span> <span class=\"n\">cast</span> <span class=\"n\">Qm</span> <span class=\"o\">(</span><span class=\"n\">decreasing_induction</span> <span class=\"n\">H</span> <span class=\"n\">mn</span> <span class=\"o\">(</span><span class=\"n\">cast</span> <span class=\"n\">Qn.symm</span> <span class=\"n\">hP</span><span class=\"o\">)),</span>\n<span class=\"kd\">end</span>\n</code></pre></div>\n<p>How would a more proper proof look like?</p>",
        "id": 250022339,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1629395774
    },
    {
        "content": "<p>Here is the proof in the unreadable style:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.nat.basic</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">nat</span>\n\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">decreasing_induction'</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mn</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"n\">le_rec_on</span> <span class=\"n\">mn</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">h</span> <span class=\"n\">hn</span><span class=\"o\">,</span> <span class=\"n\">ih</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"n\">hk.step</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hn</span><span class=\"o\">))</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"n\">id</span><span class=\"o\">)</span> <span class=\"n\">h</span> <span class=\"n\">hP</span>\n</code></pre></div>",
        "id": 250028479,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629398190
    },
    {
        "content": "<p>or, the same but more readable:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">decreasing_induction'</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mn</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- induction mn using nat.le_rec_on generalizing h hP -- this doesn't work unfortunately</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_rec_on</span> <span class=\"n\">mn</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">hP</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">h</span> <span class=\"n\">hP</span> <span class=\"n\">mn</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">ih</span> <span class=\"n\">h</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"n\">hk.step</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">hP</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hP</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 250029030,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629398437
    },
    {
        "content": "<p>You could even weaken the assumption more:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"sd\">/-- Recursion starting at a non-zero number: given a map `C k → C (k+1)` for each `k ≥ n`,</span>\n<span class=\"sd\">there is a map from `C n` to each `C m`, `n ≤ m`. -/</span>\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">le_rec_on'</span> <span class=\"o\">{</span><span class=\"n\">C</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">:</span>\n  <span class=\"bp\">Π</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">},</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span> <span class=\"bp\">→</span> <span class=\"o\">(</span><span class=\"bp\">Π</span> <span class=\"o\">⦃</span><span class=\"n\">k</span><span class=\"o\">⦄,</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">n</span> <span class=\"bp\">→</span> <span class=\"n\">C</span> <span class=\"n\">m</span>\n<span class=\"bp\">|</span> <span class=\"mi\">0</span>     <span class=\"n\">H</span> <span class=\"n\">next</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">eq.rec_on</span> <span class=\"o\">(</span><span class=\"n\">nat.eq_zero_of_le_zero</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"n\">x</span>\n<span class=\"bp\">|</span> <span class=\"o\">(</span><span class=\"n\">m</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"n\">H</span> <span class=\"n\">next</span> <span class=\"n\">x</span> <span class=\"o\">:=</span> <span class=\"n\">or.by_cases</span> <span class=\"o\">(</span><span class=\"n\">of_le_succ</span> <span class=\"n\">H</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≤</span> <span class=\"n\">m</span><span class=\"o\">,</span> <span class=\"n\">next</span> <span class=\"n\">h</span> <span class=\"bp\">$</span> <span class=\"n\">le_rec_on'</span> <span class=\"n\">h</span> <span class=\"n\">next</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"bp\">λ</span> <span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">m</span> <span class=\"bp\">+</span> <span class=\"mi\">1</span><span class=\"o\">,</span> <span class=\"n\">eq.rec_on</span> <span class=\"n\">h</span> <span class=\"n\">x</span><span class=\"o\">)</span>\n\n<span class=\"kd\">@[elab_as_eliminator]</span>\n<span class=\"kd\">def</span> <span class=\"n\">decreasing_induction'</span> <span class=\"o\">{</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span> <span class=\"bp\">→</span> <span class=\"kt\">Sort</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">m</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">h</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">k</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">k</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"o\">(</span><span class=\"n\">k</span><span class=\"bp\">+</span><span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"bp\">→</span> <span class=\"n\">P</span> <span class=\"n\">k</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">mn</span> <span class=\"o\">:</span> <span class=\"n\">m</span> <span class=\"bp\">≤</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hP</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">P</span> <span class=\"n\">m</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"c1\">-- induction mn using nat.le_rec_on' generalizing h hP -- this doesn't work unfortunately</span>\n  <span class=\"n\">refine</span> <span class=\"n\">le_rec_on'</span> <span class=\"n\">mn</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">h</span> <span class=\"n\">hP</span><span class=\"bp\">;</span> <span class=\"n\">clear</span> <span class=\"n\">h</span> <span class=\"n\">hP</span> <span class=\"n\">mn</span> <span class=\"n\">n</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">n</span> <span class=\"n\">mn</span> <span class=\"n\">ih</span> <span class=\"n\">h</span> <span class=\"n\">hP</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ih</span><span class=\"o\">,</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"bp\">λ</span> <span class=\"n\">k</span> <span class=\"n\">hk</span><span class=\"o\">,</span> <span class=\"n\">h</span> <span class=\"n\">k</span> <span class=\"n\">hk.step</span> <span class=\"o\">},</span>\n    <span class=\"o\">{</span> <span class=\"n\">exact</span> <span class=\"n\">h</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"n\">lt_succ_self</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">mn</span> <span class=\"n\">hP</span> <span class=\"o\">}</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">intros</span> <span class=\"n\">h</span> <span class=\"n\">hP</span><span class=\"o\">,</span> <span class=\"n\">exact</span> <span class=\"n\">hP</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n</code></pre></div>",
        "id": 250030680,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629399206
    },
    {
        "content": "<p>Thanks for doing this, <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> and <span class=\"user-mention\" data-user-id=\"111080\">@Floris van Doorn</span>: I'd just been sad yesterday that this was missing.</p>",
        "id": 250065639,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629419957
    }
]