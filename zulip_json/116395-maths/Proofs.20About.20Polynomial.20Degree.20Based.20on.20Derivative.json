[
    {
        "content": "<p>I am trying to show that if P is a polynomial, and the nth derivative of P is a constant, then P is an nth degree polynomial. I began by using induction and proved the n=0 case, but I ran into trouble with the successor case. I was wondering if anyone has any insight or if my statement is actually incorrect and I am trying to prove something that isn't valid. I attached the statement of the code I wrote. </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span>\n<span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u_2</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span>\n<span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n<span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.iterated_deriv</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n.factorial</span> <span class=\"bp\">*</span> <span class=\"n\">P.leading_coeff</span><span class=\"o\">))</span>\n<span class=\"o\">:</span>\n<span class=\"n\">P.nat_degree</span> <span class=\"bp\">=</span> <span class=\"n\">n</span>\n<span class=\"o\">:=</span>\n</code></pre></div>\n<p>Edit: Changed symbol from X to P so its not confusing</p>",
        "id": 278245804,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1649379937
    },
    {
        "content": "<p>Does mathlib have the fact that any two antiderivatives differ by a constant? That seems like it would be useful</p>",
        "id": 278245890,
        "sender_full_name": "Leo Mayer",
        "timestamp": 1649380029
    },
    {
        "content": "<p>I can look, that does sound useful. Mathlib has currently that if f.nat_deriv &lt; n, then iterated_deriv f n = 0 and stuff like that, but they don't have the inverse. They have stuff depending on what f.nat_deriv is, but not something that proves f.nat_deriv</p>",
        "id": 278246138,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1649380243
    },
    {
        "content": "<p>I would suggest using a symbol different from <code>X</code> for the polynomial, since that is also the symbol for the variable!</p>",
        "id": 278246165,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649380275
    },
    {
        "content": "<p>Also, as stated your result is false: the semiring could be trivial, its characteristic could be smaller than <code>n</code>,...</p>",
        "id": 278246243,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649380340
    },
    {
        "content": "<p>and the polynomial could be 0</p>",
        "id": 278246260,
        "sender_full_name": "Reid Barton",
        "timestamp": 1649380364
    },
    {
        "content": "<p>Isn't there a classic problem here for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>x</mi><mi>p</mi></msup></mrow><annotation encoding=\"application/x-tex\">x^p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span></span></span></span> with a ring of characteristic <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>?</p>",
        "id": 278246264,
        "sender_full_name": "Heather Macbeth",
        "timestamp": 1649380375
    },
    {
        "content": "<p>I would change the goal to an inequality.</p>",
        "id": 278246298,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649380440
    },
    {
        "content": "<p>Then, <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.nat_degree_derivative_le\">docs#polynomial.nat_degree_derivative_le</a> should help (I hope I guessed the right name!). EDIT: the link works now!</p>",
        "id": 278246355,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649380491
    },
    {
        "content": "<p>Incidentally, until a couple of days ago, the lemma used to have <code>f.derivative.nat_degree ≤ f.nat_degree</code> as its conclusion: you'll be probably the first to use it in its revamped form!</p>",
        "id": 278246727,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649380860
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"321459\">Damiano Testa</span> <br>\nJust edited it, thank you!</p>",
        "id": 278248266,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1649382540
    },
    {
        "content": "<p>Could you explain why this would be false? I find it confusing why the fact that if the nth derivative is constant, it doesn't entail that P is degree n. I understand that it wouldn't be true to say that if the nth derivative is zero, the degree is n-1, but it seems like it must be true if the nth derivative is a constant. Like the polynomial can't be zero if its nth derivative is a constant</p>",
        "id": 278248354,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1649382638
    },
    {
        "content": "<p>Does this convince you?</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">subsingleton</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">P</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">h1</span> <span class=\"o\">:</span> <span class=\"n\">polynomial.iterated_deriv</span> <span class=\"n\">P</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n.factorial</span> <span class=\"bp\">*</span> <span class=\"n\">P.leading_coeff</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n  <span class=\"n\">P</span> <span class=\"bp\">=</span> <span class=\"mi\">0</span> <span class=\"o\">:=</span>\n<span class=\"n\">subsingleton.elim</span> <span class=\"n\">P</span> <span class=\"mi\">0</span>\n</code></pre></div>",
        "id": 278249831,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649384262
    },
    {
        "content": "<p>Note that <code>P = C ...</code> means that <code>P</code> is constant, not that it is non-zero.</p>",
        "id": 278249892,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649384297
    },
    {
        "content": "<p>I think that this was Reid's example:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">semiring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">ℕ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">n0</span> <span class=\"o\">:</span> <span class=\"n\">n</span> <span class=\"bp\">≠</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"bp\">∃</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">polynomial</span> <span class=\"n\">R</span><span class=\"o\">),</span>\n    <span class=\"n\">f.iterated_deriv</span> <span class=\"n\">n</span> <span class=\"bp\">=</span> <span class=\"n\">C</span> <span class=\"o\">(</span><span class=\"bp\">↑</span><span class=\"n\">n.factorial</span> <span class=\"bp\">*</span> <span class=\"n\">f.leading_coeff</span><span class=\"o\">)</span> <span class=\"bp\">∧</span> <span class=\"n\">f.nat_degree</span> <span class=\"bp\">≠</span> <span class=\"n\">n</span> <span class=\"o\">:=</span>\n<span class=\"o\">⟨</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"o\">{</span><span class=\"n\">simpa</span> <span class=\"n\">using</span> <span class=\"n\">n0.symm</span><span class=\"o\">}⟩</span>\n</code></pre></div>",
        "id": 278250718,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649385245
    },
    {
        "content": "<p>Hmm, I will have to look this over more and understand it. Still new to Lean and doing math proofs so forgive me for my slow understanding, but thank you for all your help, I really appreciate it! :)</p>",
        "id": 278255250,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1649391225
    },
    {
        "content": "<p>I think I understand what you're saying. I think my confusion lies in the fact that P being a constant does not entail it is non-zero. Follow-up question, would saying that P is non-zero then entail my above goal, or is there more to it than I am realizing?</p>",
        "id": 278255525,
        "sender_full_name": "Max Bobbin",
        "timestamp": 1649391558
    },
    {
        "content": "<p>There are still a number of things that could go wrong.  For instance, if <code>R</code> is the field with two elements (or, more generally, is a ring of characteristic 2), then the second derivative of <em>every</em> polynomial is zero.  This means that your assumption <code>h1</code> is automatically satisfied in this case, when <code>2 ≤ n</code>.  Your example would therefore say that every polynomial has degree any natural number at least 2: you'll have a hard time convincing lean of this!</p>",
        "id": 278256243,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649392463
    },
    {
        "content": "<p>Heather's example can be interpreted as follows.  Suppose that <code>R</code> is a field of characteristic <code>p</code>.  The polynomial <code>X ^ p + X</code> has degree <code>p</code>.  Its first derivative equals <code>1</code>, which has degree 0, and satisfies <code>h1</code> with <code>n=1</code>.  Yet, the degree of <code>X ^ p + X</code> is not 1.</p>",
        "id": 278256411,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649392696
    },
    {
        "content": "<p>The main issue is that derivatives bring natural numbers in the exponents to multiply the terms of the polynomial.  You need to have some control on whether these natural-numbers-converted-to-elements-of-R are zero or not.  In general, they could be, or some product of them could be.</p>",
        "id": 278256514,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649392879
    },
    {
        "content": "<p>(or some product with the leading coefficient of <code>P</code> might)</p>",
        "id": 278256521,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649392902
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"474115\">@Max Bobbin</span> You might just want to assume that you are working over a ring of characteristic 0 (maybe even a field) such as <code>ℚ</code> or <code>ℝ</code>. Then your intuition works.</p>",
        "id": 278258347,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649395220
    },
    {
        "content": "<p>...except if <code>P = 0</code>.</p>",
        "id": 278260152,
        "sender_full_name": "Damiano Testa",
        "timestamp": 1649397612
    },
    {
        "content": "<p>I will say, I have done a couple proofs relating to this stuff lately, and I didn't know <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.iterated_deriv\">docs#polynomial.iterated_deriv</a> existed, and have been using its definition instead</p>",
        "id": 278270857,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649406117
    },
    {
        "content": "<p>Shall we de-duplicate this?</p>",
        "id": 278270875,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649406122
    },
    {
        "content": "<p>Also, I don't think <code>hom_classes</code> allow this, but it'd be nice for iterated homs to also be a member of the <code>hom_class</code> semi-automatically</p>",
        "id": 278270987,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649406173
    },
    {
        "content": "<p>This is possible as a constant product of endomorphisms.</p>",
        "id": 278271035,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649406206
    },
    {
        "content": "<p>I recently made <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.iterate_derivative_eq_zero\">docs#polynomial.iterate_derivative_eq_zero</a>, I think the proof for this statement shouldn't be too different to it</p>",
        "id": 278271275,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649406346
    },
    {
        "content": "<p>maybe using <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.case_strong_induction_on\">docs#nat.case_strong_induction_on</a> instead of just strong induction</p>",
        "id": 278271391,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649406412
    },
    {
        "content": "<p>Note that for endomorphism <code>⇑(f^n)</code> is usually better than <code> ⇑f^[n]</code> because it has a stronger type</p>",
        "id": 278291137,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649417750
    },
    {
        "content": "<p>so Eric, should we refactor all uses of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/polynomial.iterated_deriv\">docs#polynomial.iterated_deriv</a> and the iterated derivative to use <code>(f^n)</code>?</p>",
        "id": 278307522,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649426173
    },
    {
        "content": "<p>I think that would make things easier</p>",
        "id": 278317205,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649430189
    },
    {
        "content": "<p>Do we have a <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.iterate\">docs#linear_map.iterate</a> lemma?</p>",
        "id": 278317225,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649430204
    },
    {
        "content": "<p>Ah, it's <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_map.coe_pow\">docs#linear_map.coe_pow</a></p>",
        "id": 278317303,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649430238
    },
    {
        "content": "<p>Confusingly lots of lemmas about linear_map's <code>pow</code> use <code>iterate</code> in the name</p>",
        "id": 278317424,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1649430278
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"252627\">@Jujian Zhang</span> do you see any issues with this? You seem to have written <code>iterated_deriv</code>; just want to check before I embark and people think it's a bad idea</p>",
        "id": 278327848,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649434899
    },
    {
        "content": "<p>Not at all. Please go ahead.</p>",
        "id": 278328800,
        "sender_full_name": "Jujian Zhang",
        "timestamp": 1649435319
    },
    {
        "content": "<p>I am doing this now, and it's pretty annoying that the SNF for <code>↑(f^n) x</code> is <code>↑f^[n] x</code>. why did we do this?</p>",
        "id": 278371809,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649458488
    },
    {
        "content": "<p>The motto was that you want to weaken the bundling as much as possible, notably because that might make different higher bundlings converge to the same weaker one.</p>",
        "id": 278371951,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649458609
    },
    {
        "content": "<p>but then you lose all the nice <code>linear_map</code> api, and if you really want this you can just stick <code>pow_apply</code> in there. i don't think it should be in the simpset by defualt</p>",
        "id": 278372490,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649459037
    },
    {
        "content": "<p>... and <code>coe_mul</code>, <code>coe_add</code> ...</p>",
        "id": 278372839,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649459328
    },
    {
        "content": "<p>It's perfectly acceptable to think that a rewrite might be desirable in the default simpset in a situation and not in the other. If only <code>simp [←foo]</code> was working, instead of having to do <code>simp [-foo, ←foo]</code>...</p>",
        "id": 278372890,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649459397
    },
    {
        "content": "<p><code>simp [←foo]</code> should already have that behavior</p>",
        "id": 278372961,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1649459453
    },
    {
        "content": "<p>Just yesterday I hit a case where it did not, when <code>foo</code> is already part of the simpset, of course.</p>",
        "id": 278372998,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649459498
    },
    {
        "content": "<p>anyways, I need to do other stuff, so if anyone wants to have a look this stuff is on <a href=\"https://github.com/leanprover-community/mathlib/tree/ericrbg/iterate_deriv\">branch#ericrbg/iterate_deriv</a>. feel free to push/pull; I removed the parts of <code>iterated_deriv.lean</code> that already exist in the rest of the API</p>",
        "id": 278375543,
        "sender_full_name": "Eric Rodriguez",
        "timestamp": 1649462177
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> <a href=\"#narrow/stream/116395-maths/topic/Proofs.20About.20Polynomial.20Degree.20Based.20on.20Derivative/near/278372998\">said</a>:</p>\n<blockquote>\n<p>Just yesterday I hit a case where it did not, when <code>foo</code> is already part of the simpset, of course.</p>\n</blockquote>\n<p>Weird, I'm very sure I've done <code>[← foo]</code> for many <code>foo</code> in the default simpset and it just worked.</p>",
        "id": 278391379,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1649485647
    },
    {
        "content": "<p>Sorry I should have recorded how it happened.</p>",
        "id": 278397880,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1649494308
    }
]