[
    {
        "content": "<p>So, after spending about two hours browsing through the standard library for the definition of a limit (among other things) and wrapping my head around the fact that limits are defined from a somewhat more general concept of filters (which I have no idea of as a CS major), I finally got down the following statement (named <code>SUBMISSION</code> in the code example below) which I <em>believe</em> should be logically equivalent to <code>0.999... = 1</code>:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"c\">/-</span><span class=\"cm\"> Preloaded.lean -/</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">geom_sum</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">filter</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">basic</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"err\">ùìù</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">nhds</span>\n\n<span class=\"c1\">-- 0.999... = 1</span>\n<span class=\"c1\">-- Or, more formally:</span>\n<span class=\"c1\">-- \\lim_{n\\to+\\infty} \\frac{9}{10} \\sum_{i = 0}^{n - 1} (\\frac{1}{10})^i = 1</span>\n<span class=\"n\">def</span> <span class=\"n\">SUBMISSION</span> <span class=\"o\">:=</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span><span class=\"o\">,</span> <span class=\"mi\">9</span> <span class=\"bp\">*</span> <span class=\"n\">geom_series</span> <span class=\"o\">(</span><span class=\"n\">rat</span><span class=\"bp\">.</span><span class=\"n\">mk</span> <span class=\"mi\">1</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"err\">ùìù</span> <span class=\"mi\">1</span><span class=\"o\">)</span>\n<span class=\"c1\">-- Cheat prevention</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">SUBMISSION</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">SUBMISSION</span>\n</pre></div>\n\n\n<p>I would like to ask for feedback on possible improvements (or corrections) to my formalization above. In particular:</p>\n<ul>\n<li>Are there any redundant <code>import</code>s that my statement (<code>SUBMISSION</code>) does not depend on? Ideally, I would like to import as few libraries from mathlib as possible, importing just enough for the statement to compile</li>\n<li>Is there any way I can speed up the compilation time of my file, most of which (I think) is currently spent on importing stuff? I timed <code>lean Preloaded.lean</code> with a stopwatch and it took about 14s to compile and I would like to get it down to well under 12 seconds (the faster the better)</li>\n<li>I noticed in <code>analysis/specific_limits.lean</code> from mathlib that <code>ùìù</code> is notation for <code>filter.nhds</code> but I can't seem to use it myself. I also noticed that this was declared as <code>local notation</code> for <code>topological_space</code> (whatever that means). In the meantime, my workaround was to (re-)declare this notation myself to use it in my statement. Is there a way to avoid this workaround, or would you recommend that I just type <code>nhds</code> explicitly in my statement?</li>\n<li>My formalization of the statement <code>0.999... = 1</code> seems rather clumsy to me - is there any way I could state it more cleanly (whatever that may mean)?</li>\n</ul>",
        "id": 188912631,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582538299
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"264734\">@Donald Sebastian Leung</span> Just to comfort you: mathematicians also don't know what a filter is <span aria-label=\"rolling on the floor laughing\" class=\"emoji emoji-1f923\" role=\"img\" title=\"rolling on the floor laughing\">:rolling_on_the_floor_laughing:</span></p>",
        "id": 188914007,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582539679
    },
    {
        "content": "<p>I think you can use an infinite sum directly rather than a limit of a finite sum</p>",
        "id": 188914109,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582539764
    },
    {
        "content": "<p><code>local notation</code> means that the notation is local to that file, so you would have to repeat that <code>local notation</code> in your file.</p>",
        "id": 188914134,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1582539789
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Formalization.20of.20the.20statement.20that.200.2E999.2E.2E.2E.20.3D.201/near/188914109\" title=\"#narrow/stream/116395-maths/topic/Formalization.20of.20the.20statement.20that.200.2E999.2E.2E.2E.20.3D.201/near/188914109\">said</a>:</p>\n<blockquote>\n<p>I think you can use an infinite sum directly rather than a limit of a finite sum</p>\n</blockquote>\n<p>Nice. How so?</p>",
        "id": 188914136,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582539789
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">algebra</span><span class=\"bp\">.</span><span class=\"n\">infinite_sum</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"c1\">-- 0.999... = 1</span>\n<span class=\"c1\">-- Or, more formally:</span>\n<span class=\"c1\">-- \\lim_{n\\to+\\infty} \\frac{9}{10} \\sum_{i = 0}^{n - 1} (\\frac{1}{10})^i = 1</span>\n<span class=\"n\">def</span> <span class=\"n\">SUBMISSION</span> <span class=\"o\">:=</span> <span class=\"n\">has_sum</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">i</span><span class=\"o\">:</span><span class=\"bp\">‚Ñï</span><span class=\"o\">,</span> <span class=\"mi\">9</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span> <span class=\"bp\">*</span> <span class=\"o\">(</span><span class=\"mi\">1</span> <span class=\"bp\">/</span> <span class=\"mi\">10</span><span class=\"o\">)</span> <span class=\"err\">^</span> <span class=\"n\">i</span><span class=\"o\">)</span> <span class=\"mi\">1</span>\n<span class=\"c1\">-- Cheat prevention</span>\n<span class=\"kn\">notation</span> <span class=\"bp\">`</span><span class=\"n\">SUBMISSION</span><span class=\"bp\">`</span> <span class=\"o\">:=</span> <span class=\"n\">SUBMISSION</span>\n</pre></div>",
        "id": 188914345,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582539988
    },
    {
        "content": "<p>Thank you!</p>",
        "id": 188914370,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582540023
    },
    {
        "content": "<p>You could also use <code>(‚àë i:‚Ñï, 9 / 10 * (1 / 10) ^ i) = 1</code> which looks nicer but doesn't exactly assert that the sum is convergent (although if it's not convergent you almost certainly wouldn't be able to prove the equality)</p>",
        "id": 188914462,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582540109
    },
    {
        "content": "<p>So is your first example a more faithful rendering of <code>0.999... = 1</code>, or does it not really matter?</p>",
        "id": 188914508,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582540171
    },
    {
        "content": "<p>oh, well actually it is defined to return 0 on nonconvergent sums, so that is actually provably equivalent in this case</p>",
        "id": 188914509,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582540172
    },
    {
        "content": "<p>Thanks, I think I will go with your second example then.</p>",
        "id": 188914565,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582540217
    },
    {
        "content": "<p>in practice people will almost certainly have to prove the first statement, but there is an easy lemma to go from that to the second statement</p>",
        "id": 188914591,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582540254
    },
    {
        "content": "<p>fwiw the metamath theorem asserting this uses the second form: <a href=\"http://us.metamath.org/mpeuni/0.999....html\" target=\"_blank\" title=\"http://us.metamath.org/mpeuni/0.999....html\">0.999...</a></p>",
        "id": 188914626,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582540317
    },
    {
        "content": "<p>(yes, the name of the theorem is actually <code>0.999...</code>. Dot is a valid label character and someone had fun with naming here)</p>",
        "id": 188914674,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582540357
    },
    {
        "content": "<p>However, none of this really helps with the total load time. If you want that, you will probably have to define your own version of the definitions</p>",
        "id": 188914944,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582540598
    },
    {
        "content": "<p>Oops, you need to write it as <code>def SUBMISSION := (‚àë i:‚Ñï, (9 / 10 * (1 / 10) ^ i : ‚Ñù)) = 1</code> or else it will be false</p>",
        "id": 188915060,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582540709
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Formalization.20of.20the.20statement.20that.200.2E999.2E.2E.2E.20.3D.201/near/188914944\" title=\"#narrow/stream/116395-maths/topic/Formalization.20of.20the.20statement.20that.200.2E999.2E.2E.2E.20.3D.201/near/188914944\">said</a>:</p>\n<blockquote>\n<p>However, none of this really helps with the total load time. If you want that, you will probably have to define your own version of the definitions</p>\n</blockquote>\n<p>What is the general stance of defining stuff yourself that is already in the stdlib/mathlib in one form or another, e.g. in order to speed up compilation time?</p>",
        "id": 188915063,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582540714
    },
    {
        "content": "<p>generally frowned upon. It's fine for local work, but if you want to feed back into mathlib you should instead see if you can restructure things to make the definitions have less dependencies</p>",
        "id": 188915107,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582540795
    },
    {
        "content": "<p>which might mean reorganizing files</p>",
        "id": 188915157,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582540812
    },
    {
        "content": "<p>What if it is intended to be published as an (beginner) exercise on an online platform? Would that be akin to teaching bad practices?</p>",
        "id": 188915188,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582540856
    },
    {
        "content": "<p>For a theorem like this, if you are okay with using rational numbers, you can get the statement in only a few lines, skipping the whole theory of topology</p>",
        "id": 188915193,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582540861
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Formalization.20of.20the.20statement.20that.200.2E999.2E.2E.2E.20.3D.201/near/188915193\" title=\"#narrow/stream/116395-maths/topic/Formalization.20of.20the.20statement.20that.200.2E999.2E.2E.2E.20.3D.201/near/188915193\">said</a>:</p>\n<blockquote>\n<p>For a theorem like this, if you are okay with using rational numbers, you can get the statement in only a few lines, skipping the whole theory of topology</p>\n</blockquote>\n<p>It's fine as long as it correctly states (something logically equivalent to) <code>0.999... = 1</code></p>",
        "id": 188915228,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582540900
    },
    {
        "content": "<p>For a beginner exercise you absolutely want to use mathlib definitions, because newbies can't write the theory</p>",
        "id": 188915230,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582540902
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Formalization.20of.20the.20statement.20that.200.2E999.2E.2E.2E.20.3D.201/near/188915230\" title=\"#narrow/stream/116395-maths/topic/Formalization.20of.20the.20statement.20that.200.2E999.2E.2E.2E.20.3D.201/near/188915230\">said</a>:</p>\n<blockquote>\n<p>For a beginner exercise you absolutely want to use mathlib definitions, because newbies can't write the theory</p>\n</blockquote>\n<p>Noted</p>",
        "id": 188915281,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582540924
    },
    {
        "content": "<p>for example a newbie knows that the sum f + g is the sum of f plus the sum of g, but they are not ready to prove that themselves</p>",
        "id": 188915325,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582540983
    },
    {
        "content": "<p>if you give them an undergraduate level definition of the limit, they can probably work with it but that's a separate exercise</p>",
        "id": 188915415,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582541068
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"110049\">Mario Carneiro</span> <a href=\"#narrow/stream/116395-maths/topic/Formalization.20of.20the.20statement.20that.200.2E999.2E.2E.2E.20.3D.201/near/188915415\" title=\"#narrow/stream/116395-maths/topic/Formalization.20of.20the.20statement.20that.200.2E999.2E.2E.2E.20.3D.201/near/188915415\">said</a>:</p>\n<blockquote>\n<p>if you give them an undergraduate level definition of the limit, they can probably work with it but that's a separate exercise</p>\n</blockquote>\n<p>If I intend to post the <code>0.999...</code> exercise as a way for beginners to practice with the concept of a limit (as taught at the undergraduate level), would it be fine to (re-)define the concept in the exercise instead of using the more general definition from mathlib?</p>",
        "id": 188915624,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582541280
    },
    {
        "content": "<p>yes</p>",
        "id": 188915671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582541302
    },
    {
        "content": "<p>Thanks for your feedback and guidance!</p>",
        "id": 188915693,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582541337
    },
    {
        "content": "<p>teaching material often uses redefinitions, in particular because it makes it easier to prevent students from accidentally or otherwise reusing lemmas from the library that they are supposed to be proving, but this stuff generally doesn't feed back to mathlib</p>",
        "id": 188915769,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1582541423
    },
    {
        "content": "<p>Got it. So basically:</p>\n<ul>\n<li>For teaching elementary concepts, redefining stuff already in mathlib is acceptable (and sometimes encouraged)</li>\n<li>For the development of mathlib itself, definitely use as many existing definitions as possible</li>\n</ul>",
        "id": 188915872,
        "sender_full_name": "Donald Sebastian Leung",
        "timestamp": 1582541546
    },
    {
        "content": "<p>BTW, <code>SUBMISSION</code> easily follows from <code>has_sum_geometric</code> and <code>has_sum_mul_left</code>.</p>",
        "id": 189136621,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1582738229
    }
]