[
    {
        "content": "<p>I want to add two typeclasses:</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"o\">[</span><span class=\"n\">to_additive</span><span class=\"o\">]</span>\n<span class=\"n\">class</span> <span class=\"n\">weakly_ordered_comm_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">partial_order</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">mul_le_mul_left</span>       <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">→</span> <span class=\"bp\">∀</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">c</span> <span class=\"bp\">*</span> <span class=\"n\">b</span><span class=\"o\">)</span>\n\n<span class=\"n\">class</span> <span class=\"n\">canonically_weakly_ordered_add_monoid</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"kn\">extends</span> <span class=\"n\">weakly_ordered_add_comm_monoid</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">order_bot</span> <span class=\"n\">α</span> <span class=\"o\">:=</span>\n<span class=\"o\">(</span><span class=\"n\">le_iff_exists_add</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span><span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">:</span><span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">≤</span> <span class=\"n\">b</span> <span class=\"bp\">↔</span> <span class=\"bp\">∃</span><span class=\"n\">c</span><span class=\"o\">,</span> <span class=\"n\">b</span> <span class=\"bp\">=</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>The main use cases for the second class are <code>measure α</code> and <code>α → enreal</code>. The axiom</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"o\">(</span><span class=\"n\">lt_of_add_lt_add_left</span> <span class=\"o\">:</span> <span class=\"bp\">∀</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"n\">c</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">c</span> <span class=\"bp\">→</span> <span class=\"n\">b</span> <span class=\"bp\">&lt;</span> <span class=\"n\">c</span><span class=\"o\">)</span>\n</code></pre></div>\n\n\n<p>doesn't work in these cases. E.g., for <code>bool → ennreal</code> the counterexample is given by <code>a = λ x, cond x 0 ∞</code>, <code>b = λ x, cond x 0 1</code>, <code>c = λ x, cond x 1 0</code>, <code>a + b = λ x, cond x 0 ∞</code>, <code>a + c = λ x, cond x 1 ∞</code>.</p>\n<p>What do you think about this? Do you have better names for these classes?</p>",
        "id": 205443724,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1596087570
    },
    {
        "content": "<p>I think those are useful. I'm just starting to wonder if we should transition to mixins in the order-meets-algebra part of the library...</p>",
        "id": 205444030,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1596088013
    },
    {
        "content": "<p>Sorry to necro this thread, but</p>\n<ol>\n<li>Where does our definition of <code>ordered_comm_monoid</code> with the additional axiom <code>lt_of_add_lt_add_left : ∀ a b c : α, a + b &lt; a + c → b &lt; c</code> come from (in the literature)? It is not the standard definition.</li>\n<li>I'm sure we've discussed this before --- can anyone find an old thread?</li>\n<li>Did <span class=\"user-mention\" data-user-id=\"214703\">@Yury G. Kudryashov</span> find a different solution to his problem besides introducing <code>weakly_ordered_comm_monoid</code>?</li>\n</ol>",
        "id": 250741680,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629967698
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"321459\">@Damiano Testa</span> ?</p>",
        "id": 250741773,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1629967769
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/has_le_iff_exist_add\">docs#has_le_iff_exist_add</a> and the covariant stuff should cover the weaker axiomatization?</p>",
        "id": 250743430,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629968795
    },
    {
        "content": "<p>Hmm, I was sure we had that somewhere</p>",
        "id": 250743465,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629968822
    },
    {
        "content": "<p>There was the thread \"canonically_ordered pathologies\" is that relevant?</p>",
        "id": 250743956,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1629969138
    },
    {
        "content": "<p>It seems (still <span aria-label=\"fencing\" class=\"emoji emoji-1f93a\" role=\"img\" title=\"fencing\">:fencing:</span>) that I may just be able to correct the definition to match the rest of the worlds, with minimal damage to mathlib...</p>",
        "id": 250744881,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629969714
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/8877\">#8877</a></p>",
        "id": 250759241,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1629978554
    },
    {
        "content": "<p>I found the typeclass I was thinking of, edited above.</p>",
        "id": 250762804,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1629980527
    },
    {
        "content": "<p>I'm happy with merging this. But since it drops 4 lemmas, maybe some other <span class=\"user-group-mention\" data-user-group-id=\"2494\">@maintainers</span> want to have a look as well.</p>",
        "id": 250763055,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1629980665
    },
    {
        "content": "<p>I think it's a good idea to remove the hypothesis from <code>ordered_comm_monoid</code> since we bring the library better in line with common usage, and if someone really needs the original version, there is a typeclass that provides it.</p>\n<p>I'd rather not delete any lemmas if they can still be formulated in a useful way, but if the four deleted lemmas are never used, then I'm not so concerned.</p>",
        "id": 250763553,
        "sender_full_name": "Anne Baanen",
        "timestamp": 1629980946
    },
    {
        "content": "<p>I had a look at the PR, and I'm fine with removing the lemmas.</p>",
        "id": 250764268,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1629981335
    },
    {
        "content": "<p>I'd be very happy to remove this field from <code>ordered_comm_monoid</code>. It would be very nice to make <code>measure</code> an <code>ordered_add_comm_monoid</code>.</p>\n<p>Please don't remove the lemmas from <code>ordered_sub</code> though, but reformulate them <del>for <code>ordered_cancel_add_comm_monoid</code></del> with an extra <code>contravariant_class ... (&lt;)</code> axiom.<br>\nIt is still a WIP to use the lemmas in <code>ordered_sub</code> throughout the library, so it's pretty likely that you're removing something that will be used in the library soon.</p>",
        "id": 250795954,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629993640
    },
    {
        "content": "<p>I'm surprised so little breaks in the library by this change!</p>",
        "id": 250796264,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1629993750
    },
    {
        "content": "<p>I was surprised too. I thought it was going to be a disaster, but mostly it is actually deleting unnecessary proofs!</p>",
        "id": 250853865,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630018645
    },
    {
        "content": "<p>I've restored these lemmas, adding a <code>contravariant_class _ _ (+) (&lt;)</code> hypothesis. Hopefully this PR is good to go again.</p>",
        "id": 252136975,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1630913289
    }
]