[
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">g</span> <span class=\"o\">:</span> <span class=\"n\">perm</span> <span class=\"n\">α</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">i</span> <span class=\"o\">:</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">U</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">α</span><span class=\"o\">)</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">g</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span>         <span class=\"c1\">-- set α</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">g</span><span class=\"err\">^</span><span class=\"n\">i</span>             <span class=\"c1\">-- perm α</span>\n<span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"n\">g</span><span class=\"err\">^</span><span class=\"n\">i</span> <span class=\"err\">&#39;&#39;</span> <span class=\"n\">U</span>     <span class=\"c1\">-- maximum class-instance resolution depth has been reached</span>\n</pre></div>\n\n\n<p>I tried adding various type annotations and parentheses, getting a variety of error messages but no luck</p>",
        "id": 125188730,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523955754
    },
    {
        "content": "<p>Trying <code>(g^i) '' U</code> is probably a better start</p>",
        "id": 125188792,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523955875
    },
    {
        "content": "<p>But then g is coerced to function too early</p>",
        "id": 125188794,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523955893
    },
    {
        "content": "<p>Is this related to the recent changes to powers?</p>",
        "id": 125188808,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523955937
    },
    {
        "content": "<p>did you try <code>((g^i:perm α):set α) '' U</code>?</p>",
        "id": 125188854,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523956036
    },
    {
        "content": "<p>but g^i isn't a set</p>",
        "id": 125188856,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523956058
    },
    {
        "content": "<p>He means <code>(g^i : perm α) '' U : set α</code></p>",
        "id": 125188901,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523956112
    },
    {
        "content": "<p>That works indeed</p>",
        "id": 125188902,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523956122
    },
    {
        "content": "<p>huh. You're right, that's nonsense, but lean is okay with it for some reason</p>",
        "id": 125188905,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523956126
    },
    {
        "content": "<p>Of course I tried <code>(g^i : perm α) '' U</code></p>",
        "id": 125188915,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523956188
    },
    {
        "content": "<p>But didn't think of giving <code>: set α</code> at the end</p>",
        "id": 125188960,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523956206
    },
    {
        "content": "<p>This is weird. Apparently the second type ascription isn't checked at all, the only important thing is that it's a function type so <code>coe_fn</code> is inserted</p>",
        "id": 125188966,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523956228
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span>#check ((g^i:perm α):_ → unit) &#39;&#39; U --ok\n</pre></div>",
        "id": 125188968,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523956235
    },
    {
        "content": "<p>At least I can continue. But I'd be interested in a shorter way</p>",
        "id": 125188969,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523956237
    },
    {
        "content": "<p>wow</p>",
        "id": 125188972,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523956251
    },
    {
        "content": "<p>strange</p>",
        "id": 125188973,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523956253
    },
    {
        "content": "<p><code>#check (↑(g^i : perm α)) '' U </code> also works</p>",
        "id": 125189026,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523956347
    },
    {
        "content": "<p><code>#check ↑(g^i) '' U</code> also!</p>",
        "id": 125189033,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523956384
    },
    {
        "content": "<p><code>#check ⇑(g^i) '' U</code></p>",
        "id": 125189037,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523956393
    },
    {
        "content": "<p>Do you understand what happens?</p>",
        "id": 125189102,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523956514
    },
    {
        "content": "<p>Actually I think it's not so far from stuff we already saw (but without me understanding enough to handle new instances of the problem)</p>",
        "id": 125189157,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523956664
    },
    {
        "content": "<p>The explicit coercion gives no information to the expected type on the inside, so <code>g^i : _</code> is inferred to <code>g^i : perm A</code> (usually it goes the other way around), so <code>⇑(g^i)</code> gets the coe_fn instance for <code>perm A</code> which is <code>A -&gt; A</code>, and it's simple from then on</p>",
        "id": 125189199,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523956718
    },
    {
        "content": "<p>And what happens when it does not work?</p>",
        "id": 125189254,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523956810
    },
    {
        "content": "<p>I mean when we don't help Lean at all</p>",
        "id": 125189263,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523956877
    },
    {
        "content": "<p>Without a literal arrow, it first assumes the types match up. So <code>(g^i) '' U : _</code> infers <code>set ?B</code> where <code>g^i : A -&gt; ?B</code> (using <code>U : set A</code>). By the type of <code>^</code> we get <code>g : A -&gt; ?B</code> and <code>i : ?C</code> which solves to <code>i : nat</code> and a coercion is inserted for <code>g</code> so <code>⇑g : A -&gt; A</code>. Finally, it tries to find <code>has_pow (A -&gt; A) nat</code> and no such instance exists.</p>",
        "id": 125189364,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523957073
    },
    {
        "content": "<p>Thanks</p>",
        "id": 125189513,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523957396
    },
    {
        "content": "<p>Would it make any sense to try to define a coercion from <code>perm X</code> to <code>set X -&gt; set X</code> and hope Lean would use that if I write <code>g U</code> or <code>g^i U</code>?</p>",
        "id": 125189574,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523957458
    },
    {
        "content": "<p>The original instance resolution overflow is due to <code>g^i '' U</code> which by precedence quirks means <code>g ^ (i '' U)</code>; it gets caught in a loop looking for <code>has_coe_to_fun nat</code> for some reason</p>",
        "id": 125189585,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523957472
    },
    {
        "content": "<p>Yes, I understood that bit</p>",
        "id": 125189597,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523957511
    },
    {
        "content": "<p>No, <code>coe_fn</code> only takes one argument, the domain, unlike <code>coe</code> which has domain and target</p>",
        "id": 125189642,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523957529
    },
    {
        "content": "<p>Not sure why <code>''</code> has higher precedence than <code>^</code> though</p>",
        "id": 125189652,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523957551
    },
    {
        "content": "<p>so you can only coerce to one kind of function for a given object</p>",
        "id": 125189653,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523957552
    },
    {
        "content": "<p>What about using the general <code>has_coe</code>?</p>",
        "id": 125189661,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523957569
    },
    {
        "content": "<p>it's way too underdetermined, I think</p>",
        "id": 125189671,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523957590
    },
    {
        "content": "<p>That's what I feared</p>",
        "id": 125189676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523957606
    },
    {
        "content": "<p>Any function can be treated as a set function by applying <code>image</code></p>",
        "id": 125189678,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523957607
    },
    {
        "content": "<p>it's basically just a functor</p>",
        "id": 125189681,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523957616
    },
    {
        "content": "<p>and there are loads of those</p>",
        "id": 125189684,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523957623
    },
    {
        "content": "<p>I heard functor</p>",
        "id": 125189686,
        "sender_full_name": "Kenny Lau",
        "timestamp": 1523957629
    },
    {
        "content": "<p>Even without the perm layer, this <code>f '' U</code> notation is definitely the part of my file that looks further away from usual mathematical notation</p>",
        "id": 125189728,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523957652
    },
    {
        "content": "<p>I know at least one math book which uses double open quotes as an infix operator for image</p>",
        "id": 125189741,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523957687
    },
    {
        "content": "<p>really?</p>",
        "id": 125189744,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523957700
    },
    {
        "content": "<p>Takeuti-Zaring Axiomatic Set Theory :P</p>",
        "id": 125189754,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523957721
    },
    {
        "content": "<p>I guess it makes sense to have some kind of specific notation for beginners</p>",
        "id": 125189760,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523957733
    },
    {
        "content": "<p>I see</p>",
        "id": 125189762,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523957740
    },
    {
        "content": "<p>that kind of books</p>",
        "id": 125189764,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523957748
    },
    {
        "content": "<p>I think it's more about unambiguous notation</p>",
        "id": 125189766,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523957751
    },
    {
        "content": "<p>it's not a beginners book</p>",
        "id": 125189767,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523957760
    },
    {
        "content": "<p>It seems to be a set theory book</p>",
        "id": 125189808,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523957779
    },
    {
        "content": "<p>of course if you pretend to be serious when you say everything is a set then you need contortions everywhere</p>",
        "id": 125189814,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523957822
    },
    {
        "content": "<p>Or if you pretend to be serious when you say everything you write is well typed</p>",
        "id": 125189821,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1523957850
    },
    {
        "content": "<p>This is all (both Patrick's coercion issue and the weird '' notation) part of one underlying problem.</p>",
        "id": 125192260,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962693
    },
    {
        "content": "<p>Mathematicians have developed a really good system for overloading notation</p>",
        "id": 125192262,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962707
    },
    {
        "content": "<p>Patrick is exactly right about '' -- I've never seen it used to mean image so it doesn't surprise me that he hasn't, and it also doesn't surprise me that the only place Mario has is some set theory book (as opposed to what Patrick and I would call mathematics)</p>",
        "id": 125192274,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962746
    },
    {
        "content": "<p>In maths the notation for the image of U under f : X -&gt; Y is of course just f(U)</p>",
        "id": 125192283,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962780
    },
    {
        "content": "<p>but I am well aware that life is not so easy in Lean</p>",
        "id": 125192284,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962792
    },
    {
        "content": "<p>What the current fix seems to be is this exotic type class system plus clever coercions</p>",
        "id": 125192329,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962808
    },
    {
        "content": "<p>I must be frank</p>",
        "id": 125192331,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962811
    },
    {
        "content": "<p>I am not sure that it scales</p>",
        "id": 125192332,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962814
    },
    {
        "content": "<p>I have seen problems with diamonds</p>",
        "id": 125192335,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962820
    },
    {
        "content": "<p>I have seen problems with the wrong coercion being chosen</p>",
        "id": 125192337,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962832
    },
    {
        "content": "<p>so my instinct is to</p>",
        "id": 125192343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962841
    },
    {
        "content": "<p>(a) give up type classes to a large extent</p>",
        "id": 125192345,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962848
    },
    {
        "content": "<p>and (b) to give up on mathematician's overloading</p>",
        "id": 125192346,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962860
    },
    {
        "content": "<p>With my schemes repo I've not made any attempt to do anything clever like this</p>",
        "id": 125192353,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962878
    },
    {
        "content": "<p>If F is a sheaf then F is not the function on open sets, it's some other thing</p>",
        "id": 125192355,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962890
    },
    {
        "content": "<p>and I have F.whatever_i_called_it for the function</p>",
        "id": 125192358,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962913
    },
    {
        "content": "<p>It looks a bit messier</p>",
        "id": 125192399,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962929
    },
    {
        "content": "<p>but I am coming round to the idea that it is not the end of the world to actually begin distinguishing between these things</p>",
        "id": 125192402,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962948
    },
    {
        "content": "<p>In particular if I were writing the code Patrick is writing I simply would not attempt to identify the permutation, the bijection and the function</p>",
        "id": 125192413,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962977
    },
    {
        "content": "<p>they would all be different notation</p>",
        "id": 125192416,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962984
    },
    {
        "content": "<p>and I would not moan about ''</p>",
        "id": 125192420,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523962993
    },
    {
        "content": "<p>because f(U) doesn't really make sense</p>",
        "id": 125192422,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963000
    },
    {
        "content": "<p>The reason for me is a practical one</p>",
        "id": 125192424,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963021
    },
    {
        "content": "<p>I just want to write code that works</p>",
        "id": 125192425,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963027
    },
    {
        "content": "<p>so I don't want to get bogged down with all the issues Patrick is running into just to make it look more like mathematics</p>",
        "id": 125192465,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963051
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110038\">@Kevin Buzzard</span> I think you should be sure that you're distinguishing between coercion issues and type class issues. I'm not sure they're the same.</p>",
        "id": 125192471,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523963097
    },
    {
        "content": "<p>You're right</p>",
        "id": 125192477,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963105
    },
    {
        "content": "<p>but in some sense they are both solved by filling in the answers myself</p>",
        "id": 125192481,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963114
    },
    {
        "content": "<p>and in all cases I know the answers</p>",
        "id": 125192482,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963119
    },
    {
        "content": "<p>the issue is that they are both issues</p>",
        "id": 125192483,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963131
    },
    {
        "content": "<p>and I don't want to be dealing with issues</p>",
        "id": 125192484,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963141
    },
    {
        "content": "<p>and filling in the answers myself resolves them</p>",
        "id": 125192485,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963159
    },
    {
        "content": "<p>I am very happy with how <code>{ H : blah}</code> works</p>",
        "id": 125192524,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963169
    },
    {
        "content": "<p>because if I have <code>{U : set X} (OU : is_open U)</code> then Lean is going to be able to guess what U is</p>",
        "id": 125192531,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963197
    },
    {
        "content": "<p>but I am becoming more and more suspicious of user-added coercions</p>",
        "id": 125192540,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963235
    },
    {
        "content": "<p>I cannot see a viable way of stopping different users creating loops</p>",
        "id": 125192542,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963253
    },
    {
        "content": "<p>What if person X and person Y are both interested in widgets and foos</p>",
        "id": 125192543,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963269
    },
    {
        "content": "<p>but one of them is more widgety</p>",
        "id": 125192545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963274
    },
    {
        "content": "<p>and one more fooey</p>",
        "id": 125192556,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963277
    },
    {
        "content": "<p>so one has some coercion from widgets to foos</p>",
        "id": 125192594,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963284
    },
    {
        "content": "<p>and the other a coercion from foos to widgets</p>",
        "id": 125192599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963292
    },
    {
        "content": "<p>and all of a sudden we have two pieces of incompatible code</p>",
        "id": 125192601,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963302
    },
    {
        "content": "<p>user-added type class inference I guess I'm talking about here</p>",
        "id": 125192613,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963372
    },
    {
        "content": "<p>but I am also avoiding has_coe_to_fun</p>",
        "id": 125192619,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963399
    },
    {
        "content": "<p>and this more cautious approach solved a lot of problems for me</p>",
        "id": 125192663,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963419
    },
    {
        "content": "<p>I agree with what you're saying in a purely practical sense. However, I think it stems in general from Lean using elaboration (esp. but not solely via coercions and type-class instance resolution) to guess what you mean. It gets it right most of the time, but it's those few times that it doesn't that wind up frustrating you.</p>",
        "id": 125192665,
        "sender_full_name": "Sean Leather",
        "timestamp": 1523963434
    },
    {
        "content": "<p>I think that what happened was that in these cases where it didn't work I first got completely stuck</p>",
        "id": 125192677,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963482
    },
    {
        "content": "<p>and then I learnt how to unravel things in some cases</p>",
        "id": 125192678,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963492
    },
    {
        "content": "<p>and then I got used to the unravelling</p>",
        "id": 125192679,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963496
    },
    {
        "content": "<p>and then I figured unravelling wasn't so bad</p>",
        "id": 125192680,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1523963504
    },
    {
        "content": "<p>I'm not convinced unraveling everything will scale</p>",
        "id": 125193991,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523966308
    },
    {
        "content": "<p>And, up to now, I've always been able to solve those kind of issue (well, Mario has always been able...)</p>",
        "id": 125194000,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523966355
    },
    {
        "content": "<p>And I'm very happy to see how it looks like now</p>",
        "id": 125194004,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523966368
    },
    {
        "content": "<p>Ok, it's summer here and I have a lot of maths to read. I'll be trying the IHES garden as a working place, without bringing a computer. See you. <span class=\"emoji emoji-1f60e\" title=\"sunglasses\">:sunglasses:</span></p>",
        "id": 125194058,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1523966450
    }
]