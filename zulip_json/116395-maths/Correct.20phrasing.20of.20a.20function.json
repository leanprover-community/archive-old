[
    {
        "content": "<p>I'm following the proof of Bertrand's postulate at page 40 of <a href=\"https://tartarus.org/gareth/maths/notes/ii/Number_Theory_2011.pdf\">https://tartarus.org/gareth/maths/notes/ii/Number_Theory_2011.pdf</a>, and it involves the following three lemmas.</p>\n<div class=\"codehilite\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span>\n<span class=\"kn\">import</span> <span class=\"n\">ring_theory</span><span class=\"bp\">.</span><span class=\"n\">multiplicity</span>\n<span class=\"kn\">import</span> <span class=\"n\">tactic</span>\n\n<span class=\"n\">open_locale</span> <span class=\"n\">big_operators</span>\n\n<span class=\"c1\">-- The multiplicity of p in 2n choose n</span>\n<span class=\"n\">def</span> <span class=\"n\">α</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">is_prime</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">nat</span> <span class=\"o\">:=</span>\n  <span class=\"k\">let</span> <span class=\"n\">not_one</span> <span class=\"o\">:</span> <span class=\"n\">p</span> <span class=\"bp\">≠</span> <span class=\"mi\">1</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span><span class=\"bp\">.</span><span class=\"n\">ne_one</span> <span class=\"n\">is_prime</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">pos</span> <span class=\"o\">:</span> <span class=\"mi\">0</span> <span class=\"bp\">&lt;</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span> <span class=\"o\">:=</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose_pos</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"k\">in</span>\n  <span class=\"k\">let</span> <span class=\"n\">fin</span> <span class=\"o\">:</span> <span class=\"n\">multiplicity</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n    <span class=\"o\">(</span><span class=\"bp\">@</span><span class=\"n\">multiplicity</span><span class=\"bp\">.</span><span class=\"n\">finite_nat_iff</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">⟨</span><span class=\"n\">not_one</span><span class=\"o\">,</span> <span class=\"n\">pos</span><span class=\"bp\">⟩</span> <span class=\"k\">in</span>\n  <span class=\"o\">(</span><span class=\"n\">multiplicity</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">choose</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">n</span><span class=\"o\">))</span><span class=\"bp\">.</span><span class=\"n\">get</span> <span class=\"o\">(</span><span class=\"n\">multiplicity</span><span class=\"bp\">.</span><span class=\"n\">finite_iff_dom</span><span class=\"bp\">.</span><span class=\"mi\">1</span> <span class=\"n\">fin</span><span class=\"o\">)</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">claim_1</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">is_prime</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n_big</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">pow</span> <span class=\"n\">p</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">is_prime</span><span class=\"o\">)</span> <span class=\"bp\">≤</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span>\n  <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">claim_2</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">is_prime</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n_big</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">smallish</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"bp\">&lt;</span> <span class=\"n\">p</span> <span class=\"bp\">^</span> <span class=\"mi\">2</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">is_prime</span><span class=\"o\">)</span> <span class=\"err\">∈</span> <span class=\"o\">({</span><span class=\"mi\">0</span><span class=\"o\">,</span> <span class=\"mi\">1</span><span class=\"o\">}</span> <span class=\"o\">:</span> <span class=\"n\">finset</span> <span class=\"bp\">ℕ</span><span class=\"o\">)</span>\n  <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">claim_3</span>\n  <span class=\"o\">(</span><span class=\"n\">p</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">is_prime</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"bp\">.</span><span class=\"n\">prime</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">nat</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">n_big</span> <span class=\"o\">:</span> <span class=\"mi\">3</span> <span class=\"bp\">&lt;</span> <span class=\"n\">n</span><span class=\"o\">)</span>\n  <span class=\"o\">(</span><span class=\"n\">biggish</span> <span class=\"o\">:</span> <span class=\"mi\">2</span> <span class=\"bp\">*</span> <span class=\"n\">n</span> <span class=\"bp\">&lt;</span> <span class=\"mi\">3</span> <span class=\"bp\">*</span> <span class=\"n\">p</span><span class=\"o\">)</span>\n  <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"n\">n</span> <span class=\"o\">(</span><span class=\"k\">by</span> <span class=\"n\">linarith</span><span class=\"o\">)</span> <span class=\"n\">p</span> <span class=\"n\">is_prime</span> <span class=\"bp\">=</span> <span class=\"mi\">1</span>\n  <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">sorry</span>\n</code></pre></div>\n\n\n<p>My question is: have I chosen a formulation of <code>α</code> that will make this job at all possible? I have a horrible feeling that by hiding away the use of <code>multiplicity</code>, I'll stop being able to deduce things about the behaviour of <code>α</code>; but I do want to make sure I don't have to keep re-proving that the multiplicity is noninfinite, because that's just a bit painful. What's likely to be the smoothest path to victory?</p>",
        "id": 198121486,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589919767
    },
    {
        "content": "<p>What does \"the multiplicity of p in 2n choose n\" mean?</p>",
        "id": 198121575,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589919823
    },
    {
        "content": "<p>Do you mean what I would call the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span></span></span></span>-adic valuation of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">(</mo><mfrac linethickness=\"0px\"><mrow><mn>2</mn><mi>n</mi></mrow><mi>n</mi></mfrac><mo fence=\"true\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\binom{2n}{n}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:1.245118em;vertical-align:-0.35001em;\"></span><span class=\"mord\"><span class=\"mopen delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">(</span></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8951079999999999em;\"><span style=\"top:-2.3550000000000004em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span><span style=\"top:-3.144em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span><span class=\"mord mathdefault mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose delimcenter\" style=\"top:0em;\"><span class=\"delimsizing size1\">)</span></span></span></span></span></span>?</p>",
        "id": 198121599,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589919838
    },
    {
        "content": "<p>Sorry, <code>multiplicity</code> is in mathlib's sense - yes</p>",
        "id": 198121669,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589919852
    },
    {
        "content": "<p>The highest power of p dividing the binomial coefficient</p>",
        "id": 198121713,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589919872
    },
    {
        "content": "<p>Oh great -- I was just going to point out that mathlib already had <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathdefault\">p</span></span></span></span>-adic valuations, but I realise that this is what you are using.</p>",
        "id": 198121745,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589919897
    },
    {
        "content": "<p>It's a bit hard to understand the definition because it seems to end with an unbalanced <code>(</code>.</p>",
        "id": 198121841,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589919940
    },
    {
        "content": "<p>Sorry, I seem to have dropped the parenthesis - fixed, am just checking that it's still the same text I copied out</p>",
        "id": 198121964,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589919976
    },
    {
        "content": "<p>However, I would start with something like <code>(multiplicity p (nat.choose (2 * n) n)).get $ begin ... end</code> and then stuff all the proofs in that Prop, where it's safe.</p>",
        "id": 198121972,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589919978
    },
    {
        "content": "<p>What do you mean by \"safe\" here?</p>",
        "id": 198122039,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589920013
    },
    {
        "content": "<p>They're not clogging anything up</p>",
        "id": 198122059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589920021
    },
    {
        "content": "<p>I just mean you can put random garbage in a proof, and never have to worry about what it is later.</p>",
        "id": 198122080,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589920031
    },
    {
        "content": "<p>they are forgotten the moment they are processed, unlike the <code>let</code>s</p>",
        "id": 198122088,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1589920037
    },
    {
        "content": "<p>Ah, that makes sense</p>",
        "id": 198122100,
        "sender_full_name": "Patrick Stevens",
        "timestamp": 1589920045
    },
    {
        "content": "<p>Whereas in your current definition you have to dig through a lot of clutter to even get to the main term</p>",
        "id": 198122129,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589920059
    },
    {
        "content": "<p>In practice, I think <code>let</code> is also not a big problem to deal with</p>",
        "id": 198122151,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589920070
    },
    {
        "content": "<p>However, stuffing those in the proof is more obviously fine</p>",
        "id": 198122209,
        "sender_full_name": "Reid Barton",
        "timestamp": 1589920086
    }
]