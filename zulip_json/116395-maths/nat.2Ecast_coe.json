[
    {
        "content": "<p>We've run into performance problems when <code>nat.cast_coe</code> is triggered when we'd prefer to not have implicit coercisions.   I'd like to hide the <code>nat.cast_coe</code> instance from Lean to avoid this implicit conversion.  Is there a way to hide instances?  Alternatively, would the mathlib folks consider turning nat.cast_coe into an ordinary declaration, and requiring users explicitly enable it with something like <code>local attribute [instance] nat.cast_coe</code>?</p>",
        "id": 162454885,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1554316062
    },
    {
        "content": "<p>I would call that <em>explicit</em> enabling.</p>",
        "id": 162455380,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554316336
    },
    {
        "content": "<p>Sorry, yes edited request.</p>",
        "id": 162457540,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1554317575
    },
    {
        "content": "<p>You can do <code>attribute [-instance] nat.cast_coe</code> to turn it off in-scope</p>",
        "id": 162917442,
        "sender_full_name": "Keeley Hoek",
        "timestamp": 1554821300
    },
    {
        "content": "<p>Brilliant! That is going to be useful</p>",
        "id": 162917641,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1554821414
    },
    {
        "content": "<p>I tried</p>\n<div class=\"codehilite\"><pre><span></span>instance nat.cast_coe : has_coe nat string := sorry\nlocal attribute [-instance] nat.cast_coe\n</pre></div>\n\n\n<p>I get <code>test.lean:2:0: error: cannot remove attribute [instance]</code>.  This is with lean3.4.2, commit 1229f9b2d7f0.</p>",
        "id": 162935063,
        "sender_full_name": "Joe Hendrix",
        "timestamp": 1554833344
    },
    {
        "content": "<p>What do you think about making <a href=\"https://leanprover-community.github.io/mathlib_docs/find/nat.cast_coe\">docs#nat.cast_coe</a> require <code>add_monoid</code>+<code>has_one</code> (or even <code>semiring</code>?) instead of <code>has_one</code>+<code>has_zero</code>+<code>has_add</code>?</p>",
        "id": 213438674,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602773985
    },
    {
        "content": "<p>I'm not necessarily against it, but what would we gain by doing that?</p>",
        "id": 213474255,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1602789307
    },
    {
        "content": "<p>E.g., we won't have a coercion from <code>nat</code> to <code>fin n</code>.</p>",
        "id": 213515804,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602819933
    },
    {
        "content": "<p>So we'll be able to add a coercion in the other direction.</p>",
        "id": 213515814,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602819948
    },
    {
        "content": "<p>And we'll be able to define it as <code>n •ℕ 1</code></p>",
        "id": 213515866,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1602819991
    }
]