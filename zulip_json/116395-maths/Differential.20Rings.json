[
    {
        "content": "<p>As we have many different rings in mathlib that have their own derivatives, I think it'd be useful to have some kind of <code>differential_ring</code> structure.</p>",
        "id": 217687107,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606168195
    },
    {
        "content": "<p>I'd just go ahead and make one, but it plays kind of strangely with our current definition of a <code>derivation</code> - right now, a derivative on a commutative ring could be seen as a particular sort of <code>derivation</code>, but not a noncommutative ring.</p>",
        "id": 217687265,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606168292
    },
    {
        "content": "<p>My default idea would be to have <code>differential_ring</code> (or perhaps some more suitable name) be a mixin on a <code>ring</code>, providing the additional data of a default derivation. Then rings that would have instances would include polynomial rings, relevant rings of functions, and any sorts of power series that have or may soon have (I'd like to add Hahn series, for instance)</p>",
        "id": 217687769,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606168541
    },
    {
        "content": "<p>But perhaps instead of a definition with use case <code>[ring R] [differential_ring R]</code>, it'd be better to make one with use case<code>[ring R] (D : derivative R)</code>?</p>",
        "id": 217687995,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606168651
    },
    {
        "content": "<p>(alternately, I could just start proving things about commutative differential algebra using our current definition of <code>derivation</code>)</p>",
        "id": 217688141,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606168728
    },
    {
        "content": "<p>Multivariable polynomials rings have lots of derivatives. In algebraic geometry I guess I'm more used to thinking about an entire module of derivations. Conversely, when we finally define a cohomology theory in Lean we might well end up with an abelian group <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>⊕</mo><mrow><mi>n</mi><mo>∈</mo><mi mathvariant=\"double-struck\">N</mi></mrow></msub><msub><mi>C</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\oplus_{n\\in\\mathbb{N}}C_n</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8607em;vertical-align:-0.17737em;\"></span><span class=\"mord\"><span class=\"mbin\">⊕</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33222299999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mrel mtight\">∈</span><span class=\"mord mtight\"><span class=\"mord mathbb mtight\">N</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.17737em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> equipped with a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>d</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">d^2=0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, but no ring structure.</p>",
        "id": 217689356,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606169345
    },
    {
        "content": "<p>Model theorists do sometimes consider multiple commuting derivations.</p>",
        "id": 217689752,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606169545
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"302826\">@Aaron Anderson</span> there's this more general notion of rings with operators that also includes multiple operations (both differential and difference algebra are special cases). I wonder if it would be better to start by formalizing this more general thing, and later specialize?</p>",
        "id": 217689875,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606169614
    },
    {
        "content": "<p>Just in case you want a reference: </p>\n<p><a href=\"https://arxiv.org/abs/1212.5838\">https://arxiv.org/abs/1212.5838</a></p>",
        "id": 217690379,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606169887
    },
    {
        "content": "<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/derivation\">docs#derivation</a> (since I'm lazy and on mobile)</p>",
        "id": 217690415,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606169904
    },
    {
        "content": "<p>Just in case you want a reference: </p>\n<p><a href=\"https://arxiv.org/abs/1212.5838\">https://arxiv.org/abs/1212.5838</a></p>",
        "id": 217690633,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606170007
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Differential.20Rings/near/217690415\">said</a>:</p>\n<blockquote>\n<p><a href=\"https://leanprover-community.github.io/mathlib_docs/find/derivation\">docs#derivation</a> (since I'm lazy and on mobile)</p>\n</blockquote>\n<p>Some of the ideas I proposed use this - all would prove at least some relation to it</p>",
        "id": 217690638,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606170010
    },
    {
        "content": "<p>(sorry for the double posting... Internet is sketchy right now <span aria-label=\"frown\" class=\"emoji emoji-1f641\" role=\"img\" title=\"frown\">:frown:</span>)</p>",
        "id": 217690743,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606170072
    },
    {
        "content": "<p>Yep, I just wanted a link I could click on</p>",
        "id": 217690758,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606170080
    },
    {
        "content": "<p>Sad to see that it doesn't generalize to non-commutative algebras...</p>",
        "id": 217690874,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606170132
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"310045\">Eric Wieser</span> <a href=\"#narrow/stream/116395-maths/topic/Differential.20Rings/near/217690874\">said</a>:</p>\n<blockquote>\n<p>Sad to see that it doesn't generalize to non-commutative algebras...</p>\n</blockquote>\n<p>Yeah, you really want to be able to scalar-multiply on the right. Which is no problem if you're working with a non-commutative <em>ring</em>...</p>",
        "id": 217690991,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606170198
    },
    {
        "content": "<p>still, most of the important examples I can think of right now are commutative, so if there's any enthusiasm for implementing something like this using <code>derivation</code>, I wouldn't mind sticking to the commutative case for the moment.</p>",
        "id": 217691099,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606170247
    },
    {
        "content": "<p>Ah right, for rings you're happy to work with the simpler case where the map is from R to itself</p>",
        "id": 217691390,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606170427
    },
    {
        "content": "<p>Rather than generalizing to an arbitrary codomain</p>",
        "id": 217691423,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606170445
    },
    {
        "content": "<p>I honestly can't think of any natural example of a noncommutative differential ring. Do you have something in mind? </p>\n<p>I tend to think of the derivation itself as some sort of noncommutative structure</p>",
        "id": 217692449,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606170994
    },
    {
        "content": "<p>I suppose I don't know either.</p>",
        "id": 217692566,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606171082
    },
    {
        "content": "<p>I suppose DGAs are the only example I know of...</p>",
        "id": 217693591,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1606171712
    },
    {
        "content": "<p>Right, that's basically the case I'm thinking of</p>",
        "id": 217693619,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606171737
    },
    {
        "content": "<p>But I'm not so sure that left/right modules would help much anyway, partly because I'm somewhat out of my depth</p>",
        "id": 217693769,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1606171817
    },
    {
        "content": "<p>I'm working on refactoring the derivative on polynomials to be a <code>derivation</code> at <a href=\"https://github.com/leanprover-community/mathlib/tree/polynomial_derivation\">branch#polynomial_derivation</a></p>",
        "id": 218383307,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606801929
    },
    {
        "content": "<p>So far, I've just made it a <code>linear_map</code>, and I'm working on modifying the import tree so that <code>ring_theory.derivation</code> doesn't import <code>data.polynomial.derivative</code></p>",
        "id": 218383322,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606801991
    },
    {
        "content": "<p>Separately, I want to prove some basic lemmas about <code>derivation A R R</code> where <code>R</code> is a ring</p>",
        "id": 218383635,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606802446
    },
    {
        "content": "<p>which seems like a sensible definition of a derivative</p>",
        "id": 218383657,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606802474
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"302826\">Aaron Anderson</span> <a href=\"#narrow/stream/116395-maths/topic/Differential.20Rings/near/218383322\">said</a>:</p>\n<blockquote>\n<p>So far, I've just made it a <code>linear_map</code>, and I'm working on modifying the import tree so that <code>ring_theory.derivation</code> doesn't import <code>data.polynomial.derivative</code></p>\n</blockquote>\n<p>Oh no... this broke <code>is_R_or_C</code>...</p>",
        "id": 218494337,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606863669
    },
    {
        "content": "<p>It seems line 548 of <code>is_R_or_C</code> stops working, but if I replace the implicit</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"n\">re_lm.mk_continuous</span> <span class=\"mi\">1</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">re_lm_coe</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">abs_re_le_abs</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>with the explicit</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"bp\">@</span><span class=\"n\">linear_map.mk_continuous</span> <span class=\"n\">ℝ</span> <span class=\"n\">K</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">re_lm</span> <span class=\"mi\">1</span> <span class=\"bp\">$</span> <span class=\"kd\">by</span> <span class=\"o\">{</span> <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">norm_eq_abs</span><span class=\"o\">,</span> <span class=\"n\">re_lm_coe</span><span class=\"o\">,</span> <span class=\"n\">one_mul</span><span class=\"o\">],</span> <span class=\"n\">exact</span> <span class=\"n\">abs_re_le_abs</span> <span class=\"o\">}</span>\n</code></pre></div>\n<p>then everything is saved.</p>",
        "id": 218495095,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606864087
    },
    {
        "content": "<p>Can anyone help me figure out what this has to do with <code>data.polynomial.derivative</code>?</p>",
        "id": 218495156,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606864136
    },
    {
        "content": "<p>Actually, <code>linear_map.mk_continuous re_lm 1 $ by { simp only [norm_eq_abs, re_lm_coe, one_mul], exact abs_re_le_abs }</code> works</p>",
        "id": 218504581,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606871853
    },
    {
        "content": "<p>Bizarre, once that's done, it all builds</p>",
        "id": 218508046,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606875417
    },
    {
        "content": "<p>Ah, but now we have the issue of <code>derivation</code>s not being defined on noncommutative semirings.</p>",
        "id": 218508117,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606875513
    },
    {
        "content": "<p>I'm assuming that it'd be an inconvenience if we stopped being able to define the derivative of polynomials with noncommutative coefficients, so I should define the linear map and the derivation separately?</p>",
        "id": 218508219,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606875661
    },
    {
        "content": "<p>oh, not even on <code>comm_semiring</code>, yeah, I definitely want to take the derivative of a <code>polynomial nat</code></p>",
        "id": 218508250,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606875722
    },
    {
        "content": "<p>I didn't even know we had polynomials with noncommutative coefficients. Does <code>rX=Xr</code>?</p>",
        "id": 218508350,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606875836
    },
    {
        "content": "<p>I don't know what the D-module people do, but in algebraic geometry (at least the part of it I know something about) you only seem to take derivations on commutative rings.</p>",
        "id": 218508421,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1606875894
    },
    {
        "content": "<p>Yeah, the coefficients still commute with <code>X</code></p>",
        "id": 218508610,
        "sender_full_name": "Reid Barton",
        "timestamp": 1606876163
    },
    {
        "content": "<p>I'm just trying to see if there's a class that extends both <code>semiring</code> and <code>add_cancel_comm_monoid</code> that applies to <code>nat</code></p>",
        "id": 218509230,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606876907
    },
    {
        "content": "<p>Maybe this is the time to define <code>semidomain</code>... hmm, that probably won't do it either</p>",
        "id": 218509329,
        "sender_full_name": "Aaron Anderson",
        "timestamp": 1606876997
    }
]