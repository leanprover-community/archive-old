[
    {
        "content": "<p>I am trying to prove the following lemma</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">open</span> <span class=\"n\">metric</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">variables</span>\n<span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_span_seq_closed</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_seq_closed</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Is this somewhere in mathlib? If not, how can you induct on the cardinality of A?</p>",
        "id": 182461837,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1575388050
    },
    {
        "content": "<p>It might be in there -- <span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> ? Oh, I just remembered he's giving a talk in Orsay right now ;-)</p>\n<p>If it's not then maybe this is a useful induction procedure for you:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">finite_span_seq_closed</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_seq_closed</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finite</span><span class=\"bp\">.</span><span class=\"n\">induction_on</span> <span class=\"n\">h</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span><span class=\"o\">,</span> <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 182463255,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575388791
    },
    {
        "content": "<p>So it turns out it is actually in mathlib! </p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">ùïú</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">[</span><span class=\"n\">complete_space</span> <span class=\"err\">ùïú</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">closed_of_finite_dimensional</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">submodule</span> <span class=\"err\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">finite_dimensional</span> <span class=\"err\">ùïú</span> <span class=\"n\">s</span><span class=\"o\">]</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_closed</span> <span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">E</span><span class=\"o\">)</span>\n</pre></div>\n\n\n<p>but I'm not quite sure how to make lean transform this into what I need.</p>",
        "id": 182470233,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1575392235
    },
    {
        "content": "<p>I guess you want to find the following facts:<br>\n(1) Closed implies sequentially closed [this will be proved near the definition of sequentially closed]<br>\n(2) the reals are a nondiscrete normed field [type class inference will handle this]<br>\n(3) the vector space spanned by a finite set is finite-dimensional [that will surely be there somewhere]</p>",
        "id": 182470430,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575392349
    },
    {
        "content": "<p>(2) is indeed there:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"n\">noncomputable</span> <span class=\"kn\">example</span> <span class=\"o\">:</span> <span class=\"n\">nondiscrete_normed_field</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">:=</span> <span class=\"k\">by</span> <span class=\"n\">apply_instance</span>\n</pre></div>\n\n\n<p>so you don't have to do anything -- type class inference will do it for you.</p>",
        "id": 182470607,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575392426
    },
    {
        "content": "<p>So we are this far</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">finite_span_seq_closed</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_seq_closed</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h_fin</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_seq_closed_of_is_closed</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">closed_of_finite_dimensional</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>but we get an error: <br>\ninvalid apply tactic, failed to unify<br>\n  is_closed S<br>\nwith<br>\n  is_closed ‚Üë?m_6</p>",
        "id": 182470621,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1575392431
    },
    {
        "content": "<p>I thought that this should reduce it to showing that submodule.span \\R A is finite dimensional</p>",
        "id": 182470682,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1575392467
    },
    {
        "content": "<p>Is there any possibility that you can post some fully working code?</p>",
        "id": 182470715,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575392486
    },
    {
        "content": "<p>I'm getting a bit sick of having to guess all the imports ;-)</p>",
        "id": 182470807,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575392528
    },
    {
        "content": "<p>Yes of course, sorry.</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">banach</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">basis</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">dimension</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra</span><span class=\"bp\">.</span><span class=\"n\">finite_dimensional</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">subset_properties</span>\n<span class=\"kn\">import</span> <span class=\"n\">set_theory</span><span class=\"bp\">.</span><span class=\"n\">cardinal</span>\n<span class=\"kn\">import</span> <span class=\"n\">data</span><span class=\"bp\">.</span><span class=\"n\">real</span><span class=\"bp\">.</span><span class=\"n\">basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">topology</span><span class=\"bp\">.</span><span class=\"n\">sequences</span>\n<span class=\"kn\">import</span> <span class=\"n\">order</span><span class=\"bp\">.</span><span class=\"n\">bounded_lattice</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis</span><span class=\"bp\">.</span><span class=\"n\">normed_space</span><span class=\"bp\">.</span><span class=\"n\">finite_dimension</span>\n\n<span class=\"n\">noncomputable</span> <span class=\"n\">theory</span>\n<span class=\"n\">open_locale</span> <span class=\"n\">classical</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">metric</span> <span class=\"n\">set</span>\n\n<span class=\"kn\">variables</span>\n<span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_span_seq_closed</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_seq_closed</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h_fin</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:=</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">carrier</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_seq_closed_of_is_closed</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n\n  <span class=\"n\">apply</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">closed_of_finite_dimensional</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 182470930,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1575392616
    },
    {
        "content": "<p>Yeah. There might be a universe issue and also a typeclass issue.</p>",
        "id": 182471516,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575392943
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"bp\">#</span><span class=\"kn\">check</span> <span class=\"bp\">@</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">closed_of_finite_dimensional</span>\n<span class=\"c\">/-</span><span class=\"cm\"></span>\n<span class=\"cm\">submodule.closed_of_finite_dimensional :</span>\n<span class=\"cm\">  ‚àÄ {ùïú : Type u_2} [_inst_1 : nondiscrete_normed_field ùïú] {E : Type u_2} [_inst_2 : normed_group E]</span>\n<span class=\"cm\">  [_inst_3 : normed_space ùïú E] [_inst_6 : complete_space ùïú] (s : submodule ùïú E)</span>\n<span class=\"cm\">  [_inst_7 : finite_dimensional ùïú ‚Ü•s], is_closed ‚Üës</span>\n<span class=\"cm\">-/</span>\n</pre></div>\n\n\n<p>For some reason <code>ùïú</code> and <code>E</code> are supposed to be in the same universe in this lemma. This might be some subtlety that I don't know about, or it might be an error in mathlib.</p>",
        "id": 182471719,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575393071
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"c1\">-- we use linear equivs, which require all the types to live in the same universe</span>\n<span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"err\">ùïú</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">nondiscrete_normed_field</span> <span class=\"err\">ùïú</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">E</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">E</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">ùïú</span> <span class=\"n\">E</span><span class=\"o\">]</span>\n<span class=\"o\">{</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">F</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"err\">ùïú</span> <span class=\"n\">F</span><span class=\"o\">]</span>\n</pre></div>\n\n\n<p>This is explicit design decision. I don't know what's going on here. This has consequences for you -- the reals have type <code>Type</code> so Lean expects your  vector space also to have type <code>Type</code>.</p>",
        "id": 182471853,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575393161
    },
    {
        "content": "<p>But changing the variable to <code>{V : Type}</code> unmasks a new problem.</p>",
        "id": 182471914,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575393220
    },
    {
        "content": "<p>which is that type class inference cannot figure out why s is finite-dimensional.</p>",
        "id": 182472059,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575393312
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span>\n<span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_span_seq_closed</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_seq_closed</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h_fin</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"err\">‚Üë</span><span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_seq_closed_of_is_closed</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">closed_of_finite_dimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">_</span> <span class=\"n\">V</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>works, but there's a sorry</p>",
        "id": 182472099,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575393350
    },
    {
        "content": "<p>So what is left is the proof that S is finite-dimensional. Oh -- by the way -- in Lean there is a \"canonical\" way of doing many things, and your definition of <code>S</code> as <code>(...).carrier</code> is non-canonical: I changed it to the canonical way of writing this, with the little up-arrow.</p>",
        "id": 182472229,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575393423
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">V</span><span class=\"o\">]</span>\n\n<span class=\"kn\">instance</span> <span class=\"n\">moo</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"err\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_span_seq_closed</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_seq_closed</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span><span class=\"bp\">.</span><span class=\"n\">carrier</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h_fin</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">S</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span> <span class=\"o\">:=</span> <span class=\"err\">‚Üë</span><span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">),</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_seq_closed_of_is_closed</span> <span class=\"n\">S</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"bp\">@</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">closed_of_finite_dimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"bp\">_</span> <span class=\"n\">V</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">moo</span> <span class=\"n\">A</span> <span class=\"n\">h_fin</span><span class=\"o\">),</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>There is this thing called type class inference, which mathematicians tend to push in all sorts of directions which it turns out that Lean 3 was not quite expecting, because computer scientists did not really know what mathematicians wanted to do with it. I can't actually get it to work in this situation (hence all the ridiculous <code>_</code>s and the <code>moo</code> in the lemma) but probably some fiddling around with priorities could fix this.</p>",
        "id": 182473055,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575393832
    },
    {
        "content": "<p>You should really change the statement to use the coercion.</p>",
        "id": 182473327,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575393946
    },
    {
        "content": "<p>Actually I see now that perhaps <code>moo</code> is a bad instance, because <code>finite</code> is not a typeclass which might mean that typeclass inference will not be able to find the hypothesis that <code>A</code> is finite. I am a bit out of my depth here.</p>\n<p>However this is eventually resolved, the missing part of the argument is still the <code>sorry</code> above.</p>",
        "id": 182473342,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575393957
    },
    {
        "content": "<p><code>lemma finite_span_seq_closed (A : set V) : finite A ‚Üí is_seq_closed (‚Üë(submodule.span ‚Ñù A) : set V)</code></p>",
        "id": 182473354,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575393962
    },
    {
        "content": "<p>Needing this up-arrow in the statement is really painful, but we don't know how to avoid this. We explain a tiny variation on this issue in our perfectoid paper.</p>",
        "id": 182473440,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575394006
    },
    {
        "content": "<p>Exactly in the paragraph where we complain about Lean elaboration being not yet good enough for maths.</p>",
        "id": 182473475,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575394030
    },
    {
        "content": "<p>Then you can write:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">lemma</span> <span class=\"n\">finite_span_seq_closed</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_seq_closed</span> <span class=\"o\">(</span><span class=\"err\">‚Üë</span><span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h_fin</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_seq_closed_of_is_closed</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">sorry</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">closed_of_finite_dimensional</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 182473594,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575394085
    },
    {
        "content": "<p>Where the sorry is still the same one, but there is no more Morse code <code>@... _ _ _ _ _</code></p>",
        "id": 182473642,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575394109
    },
    {
        "content": "<p>Patrick do you understand why V has to have type Type?</p>",
        "id": 182473781,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575394179
    },
    {
        "content": "<blockquote>\n<p>It might be in there -- <span class=\"user-mention silent\" data-user-id=\"110050\">Sebastien Gouezel</span> ? Oh, I just remembered he's giving a talk in Orsay right now ;-)</p>\n</blockquote>\n<p>Yes, he was finishing his talk at that moment. It was very nice talk. He explained maths for 15 minutes, then propaganda for Sledgehammer for 30 minutes then 15 minutes about how simple type theory is unfortunately unbearable.</p>",
        "id": 182473915,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575394236
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">finite_dimensional_of_finite_span</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"err\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_span_seq_closed</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_seq_closed</span> <span class=\"o\">(</span><span class=\"err\">‚Üë</span><span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h_fin</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_seq_closed_of_is_closed</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finite_dimensional_of_finite_span</span> <span class=\"n\">h_fin</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">closed_of_finite_dimensional</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>I moved the sorry to a more respectable place.</p>",
        "id": 182474019,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575394290
    },
    {
        "content": "<p>He was a bit unfair to Lean though. He explained how Lean is harder to read than Isabelle by comparing tactic scripts on a white background with proof terms on a black background (using a video beamer making it impossible to read VScode's default dark theme).</p>",
        "id": 182474109,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575394322
    },
    {
        "content": "<p>I would rename that as <code>finite_dimensional_span_of_finite</code>.</p>",
        "id": 182474187,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575394362
    },
    {
        "content": "<p>And no, I don't know anything about universe issues.</p>",
        "id": 182474206,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575394375
    },
    {
        "content": "<p>but then did someone ask him the question about which system is more likely to be able to define the tangent space of a manifold, a trivial undergraduate thing?</p>",
        "id": 182474221,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575394386
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">finite_dimensional_span_of_finite</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"err\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n\n<span class=\"kn\">lemma</span> <span class=\"n\">finite_span_seq_closed</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">is_seq_closed</span> <span class=\"o\">(</span><span class=\"err\">‚Üë</span><span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">intro</span> <span class=\"n\">h_fin</span><span class=\"o\">,</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_seq_closed_of_is_closed</span><span class=\"o\">,</span>\n  <span class=\"n\">haveI</span> <span class=\"o\">:</span> <span class=\"n\">finite_dimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"n\">finite_dimensional_span_of_finite</span> <span class=\"n\">h_fin</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">closed_of_finite_dimensional</span> <span class=\"bp\">_</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 182474304,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575394434
    },
    {
        "content": "<p>He was very clear Isabelle/HOL is unusable for maths. And also very clear that any system giving him dependant type (and the type <code>Type -&gt; X</code>) + Sledgehammer would make him quit Lean without thinking twice (which looks like a very sensible thing to do).</p>",
        "id": 182474466,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575394511
    },
    {
        "content": "<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">finite_dimensional_span_of_finite</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"err\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finite_dimensional</span><span class=\"bp\">.</span><span class=\"n\">of_fg</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>Now we need a finset from a finite set</p>",
        "id": 182474473,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575394516
    },
    {
        "content": "<blockquote>\n<p>He was very clear Isabelle/HOL is unusable for maths. And also very clear that any system giving him dependant type (and the type <code>Type -&gt; X</code>) + Sledgehammer would make him quit Lean without thinking twice (which looks like a very sensible thing to do).</p>\n</blockquote>\n<p>So we need to make a sledgehammer? Then he'll quit Lean for Lean.</p>",
        "id": 182474681,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575394626
    },
    {
        "content": "<p>Look at the discussion we are having. How could we say this software is usable if two non-beginners cannot prove <code>finite_dimensional_span_of_finite</code> within 10 seconds?</p>",
        "id": 182475201,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575394885
    },
    {
        "content": "<p>Of course we don't know the linear algebra part of the library, but this was S√©bastien main point: sledgehammer makes knowing the library much much less important.</p>",
        "id": 182475384,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575394992
    },
    {
        "content": "<p>Jasmin's project <a href=\"http://matryoshka.gforge.inria.fr/\" target=\"_blank\" title=\"http://matryoshka.gforge.inria.fr/\">http://matryoshka.gforge.inria.fr/</a> was meant to solve this problem, but it doesn't seem to progress much <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>",
        "id": 182475432,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575395040
    },
    {
        "content": "<p>I see -- so this is the sort of thing which Sledgehammer does quickly?</p>",
        "id": 182475545,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575395099
    },
    {
        "content": "<p>Of course this result is easily provable, we just have to look through the library and learn the relevant parts (except that I need to leave the office in 10 minutes and I'm trying to finish a grant proposal before that ;-) )</p>",
        "id": 182475789,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575395249
    },
    {
        "content": "<blockquote>\n<p>sledgehammer makes knowing the library much much less important</p>\n</blockquote>\n<p>I found this to be the nicest thing about sledgehammer in Isabelle, even more so than the fact that it gives you a proof. The generated snippet is <em>a</em> proof of the goal at hand, but more importantly it contains a list of lemmas which can be used to prove it. Effectively, it's like <code>library_search</code> on steroids, because it automatically finds relevant facts - you can look at the lemmas it found and use them to write a nicer proof.</p>",
        "id": 182475980,
        "sender_full_name": "Wojciech Nawrocki",
        "timestamp": 1575395386
    },
    {
        "content": "<p>Then what is our long-term plan for getting a sledgehammer for Lean?</p>",
        "id": 182476357,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575395587
    },
    {
        "content": "<blockquote>\n<p>Then what is our long-term plan for getting a sledgehammer for Lean?</p>\n</blockquote>\n<p>Me moving to Amsterdam. <span aria-label=\"smile\" class=\"emoji emoji-263a\" role=\"img\" title=\"smile\">:smile:</span>  I'll talk about the current status in January.</p>",
        "id": 182476610,
        "sender_full_name": "Gabriel Ebner",
        "timestamp": 1575395751
    },
    {
        "content": "<blockquote>\n<p>Yes, he was finishing his talk at that moment. It was very nice talk. He explained maths for 15 minutes, then propaganda for Sledgehammer for 30 minutes then 15 minutes about how simple type theory is unfortunately unbearable.</p>\n</blockquote>\n<p>I think that's a fair summary. I also said that Sledgehammer makes the learning curve much smoother in Isabelle/HOL than in Lean or COQ.</p>",
        "id": 182476942,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575395909
    },
    {
        "content": "<blockquote>\n<p>He was a bit unfair to Lean though. He explained how Lean is harder to read than Isabelle by comparing tactic scripts on a white background with proof terms on a black background (using a video beamer making it impossible to read VScode's default dark theme).</p>\n</blockquote>\n<p>The point is that, proof terms don't exist in Isabelle, and this proof in Isabelle would just have been done by automation without needing to think at all. While a tactic proof in Lean would not have been nicer than the term proof. So, I don't think I have been really unfair :)</p>",
        "id": 182477182,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575396034
    },
    {
        "content": "<blockquote>\n<p>Jasmin's project <a href=\"http://matryoshka.gforge.inria.fr/\" target=\"_blank\" title=\"http://matryoshka.gforge.inria.fr/\">http://matryoshka.gforge.inria.fr/</a> was meant to solve this problem, but it doesn't seem to progress much <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>\n<p>I don't think that's fair at all, the higher order proving work that they're doing is great progress.</p>",
        "id": 182477191,
        "sender_full_name": "Rob Lewis",
        "timestamp": 1575396042
    },
    {
        "content": "<p>Thanks for the extensive discussion. So do I understand correctly that I cannot use this lemma unless R and V have the same type? I find this very strange.</p>",
        "id": 182480021,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1575397743
    },
    {
        "content": "<p>When I try to prove this theorem I need to transform <code>A : set V</code> to <code>A set ‚Ü•(submodule.span ‚Ñù A)</code>... How does that work?</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">finite_dimensional_span_of_finite</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"err\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finite_dimensional</span><span class=\"bp\">.</span><span class=\"n\">of_fg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">fg_def</span><span class=\"o\">,</span>\n  <span class=\"n\">existsi</span> <span class=\"o\">(</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)),</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 182481084,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1575398398
    },
    {
        "content": "<p>Things which mathematicians think of as equal are perhaps not equal in type theory. The submodule.span has type <code>submodule ‚Ñù V</code> and probably <code>A</code> has type <code>set V</code>, but when you start talking about the span as an abstract vector space you want A to be a subset of the span, so the span needs to become a type (the <code>‚Ü•</code>) rather than a term, and then <code>A</code> needs to be changed from <code>set V</code> to <code>set &lt;the finite-dimensional space&gt;</code>.</p>",
        "id": 182486638,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575401806
    },
    {
        "content": "<blockquote>\n<p>I don't think that's fair at all, the higher order proving work that they're doing is great progress</p>\n</blockquote>\n<p>I don't know anything about what they're doing. I looked at the website and it didn't seem to mention Lean. So the plan is their work + Gabriel will result in a sledgehammer for Lean? This makes me happy, I am somehow convinced that Gabriel can do anything :D</p>",
        "id": 182486835,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575401940
    },
    {
        "content": "<blockquote>\n<p>So do I understand correctly that I cannot use this lemma unless R and V have the same type? I find this very strange.</p>\n</blockquote>\n<p>Not the same type, the same universe. This is an issue with the linear algebra library, that requires vector spaces to be in the same universe to define linear equivalences between them. But in practice one can do all mathematics in a single universe, so this is not a real issue.</p>",
        "id": 182488896,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575403056
    },
    {
        "content": "<blockquote>\n<p>But in practice one can do all mathematics in a single universe, so this is not a real issue.</p>\n</blockquote>\n<p>That is  not the message we get from the CS people. They assure us that it is important that we be maximally universe polymorphic. Is there an actual reason why this design decision was made or was it just for convenience?</p>\n<p>Clark Barwick gave a talk at Imperial yesterday and when he was talking about pyknotic sets he had to fix a strongly inaccessible cardinal. This is a point where one really cannot do mathematics in a single universe. Scholze's condensed sets are a variant of this which does not need the inaccessible cardinal, however Scholze ends up with a slightly different class of objects (and he has to jump through a lot of set-theoretic hoops, choosing uncountable cardinals with properties whose existence can be proved in ZFC). We have to make a decision about whether to follow Scholze's point of view or Barwick's, and Barwick's would be much easier to do in Lean, although his pyknotic sets will end up having type Type 1, so pyknotic vector spaces are not going to work in Lean.</p>",
        "id": 182491095,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575404494
    },
    {
        "content": "<blockquote>\n<p>But in practice one can do all mathematics in a single universe, so this is not a real issue.</p>\n</blockquote>\n<p>I think that should read \"in <em>principle</em> one can do all mathematics in a single universe\". In practice you run into exactly the issues that Lambert is noting. Do we have a comprehensive set of instances on <code>ulift</code>? (Including a <code>ulift_instance</code> tactic for making more instances.) If so, it <em>might</em> be possible to work around this by using <code>ulift R</code> as the scalar ring, but it's not a particularly natural solution to work with.</p>",
        "id": 182492291,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575405296
    },
    {
        "content": "<p>And what about the solution of making mathlib properly polymorphic? Why is it not polymorphic here?</p>",
        "id": 182492343,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575405340
    },
    {
        "content": "<p>What prevents you from adding a large cardinal axiom and doing exactly his construction in <code>Type</code>? (Note that I wouldn't mind using the additional flexibility of type theory to simplify things, but my point is that everything you do in usual mathematics with set theory should be doable in <code>Type</code>).</p>",
        "id": 182492344,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575405340
    },
    {
        "content": "<blockquote>\n<p>What prevents you from adding a large cardinal axiom and doing exactly his construction in <code>Type</code>? (Note that I wouldn't mind using the additional flexibility of type theory to simplify things, but my point is that everything you do in usual mathematics with set theory should be doable in <code>Type</code>).</p>\n</blockquote>\n<p>Nothing, I believe. Except then you'll have an extra axiom which somehow looks silly in Lean because it basically says \"assume Type -1 exists\".</p>",
        "id": 182492444,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575405399
    },
    {
        "content": "<p>The obvious response is \"why not renumber?\"</p>",
        "id": 182492461,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575405410
    },
    {
        "content": "<p>And to be honest if we're going to start using cardinal bounds then we may as well do it the Scholze way anyway, because proving the existence of an uncountable strong limit cardinal (a fun exercise for you Mario? ;-) ) will be possible in Lean without any extra axioms.</p>",
        "id": 182492661,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575405558
    },
    {
        "content": "<p>(what we need is an uncountable <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Œ∫</mi></mrow><annotation encoding=\"application/x-tex\">\\kappa</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">Œ∫</span></span></span></span> such that  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Œª</mi><mo>&lt;</mo><mi>Œ∫</mi><mtext>‚ÄÖ‚Ää</mtext><mo>‚üπ</mo><mtext>‚ÄÖ‚Ää</mtext><msup><mn>2</mn><mi>Œª</mi></msup><mo>&lt;</mo><mi>Œ∫</mi></mrow><annotation encoding=\"application/x-tex\">\\lambda&lt;\\kappa\\implies 2^{\\lambda}&lt;\\kappa</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathdefault\">Œª</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.549em;vertical-align:-0.024em;\"></span><span class=\"mord mathdefault\">Œ∫</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">‚üπ</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.888208em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.849108em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">Œª</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">Œ∫</span></span></span></span>)</p>",
        "id": 182492691,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575405594
    },
    {
        "content": "<p>(proof: define a sequence of cardinals <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Œ∫</mi><mi>Œ±</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\kappa_\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Œ∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.0037em;\">Œ±</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Œ±</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\" style=\"margin-right:0.0037em;\">Œ±</span></span></span></span> an ordinal by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Œ∫</mi><mn>0</mn></msub><mo>=</mo><msub><mi mathvariant=\"normal\">‚Ñµ</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">\\kappa_0=\\aleph_0</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Œ∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\">‚Ñµ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Œ∫</mi><mrow><mi>Œ±</mi><mo>+</mo><mn>1</mn></mrow></msub><mo>=</mo><msup><mn>2</mn><msub><mi>Œ∫</mi><mi>Œ±</mi></msub></msup></mrow><annotation encoding=\"application/x-tex\">\\kappa_{\\alpha+1}=2^{\\kappa_\\alpha}</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.638891em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Œ∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.0037em;\">Œ±</span><span class=\"mbin mtight\">+</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathdefault mtight\">Œ∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.16454285714285719em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.0037em;\">Œ±</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span>, and unions at limits; then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>Œ∫</mi><mi>Œ±</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\kappa_\\alpha</annotation></semantics></math></span><span aria-hidden=\"true\" class=\"katex-html\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">Œ∫</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\" style=\"margin-right:0.0037em;\">Œ±</span></span></span></span><span class=\"vlist-s\">‚Äã</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> for any (positive) limit ordinal will do the trick)</p>",
        "id": 182492913,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575405720
    },
    {
        "content": "<p>I don't know where the root of polymorphism loss is, but <code>dimension.lean</code> starts with the line</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">{</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">u</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"n\">V‚ÇÇ</span> <span class=\"n\">V‚ÇÉ</span> <span class=\"n\">V‚ÇÑ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span> <span class=\"n\">v</span><span class=\"o\">}</span>\n</pre></div>\n\n\n<p>And since this file was written by Mario and Johannes I am pretty sure there is a very good reason for this.</p>",
        "id": 182493222,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575405926
    },
    {
        "content": "<p>Probably when you have maps between these modules you want to compare their dimensions, which are cardinals in some fixed universe.</p>",
        "id": 182493369,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575406015
    },
    {
        "content": "<p>Probably you sometimes want to compare their dimensions, but you often do not? That's like saying that <code>equiv</code> should only take two types from the same universe because sometimes you might want to compare their cardinalities. That is not what is done there. I am confused.</p>",
        "id": 182493528,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575406113
    },
    {
        "content": "<p>For instance</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">linear_equiv</span><span class=\"bp\">.</span><span class=\"n\">dim_eq</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">V</span> <span class=\"err\">‚âÉ‚Çó</span><span class=\"o\">[</span><span class=\"n\">K</span><span class=\"o\">]</span> <span class=\"n\">V‚ÇÇ</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">dim</span> <span class=\"n\">K</span> <span class=\"n\">V</span> <span class=\"bp\">=</span> <span class=\"n\">dim</span> <span class=\"n\">K</span> <span class=\"n\">V‚ÇÇ</span>\n</pre></div>\n\n\n<p>does not make sense if <code>V</code> and <code>V_2</code> are not in the same universe, as their dimensions don't live in the same place.</p>",
        "id": 182493585,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575406158
    },
    {
        "content": "<p>So that one theorem could be formalised under the assumption that the universes are the same.</p>",
        "id": 182493647,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575406201
    },
    {
        "content": "<p>That's the first statement that breaks in this file if I change the universe constraints, but there are many more below. But I agree with you that it would make sense to only assume the same universe when it is really necessary.</p>",
        "id": 182493749,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575406253
    },
    {
        "content": "<p>or some ulift nonsense could be added. There are ways around this and all I am saying is that I am surprised that this design decision was taken by people who take universe polymorphism so seriously.</p>",
        "id": 182493796,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575406280
    },
    {
        "content": "<p>Of course the Barwick example is very much an extreme case. I absolutely agree with you that 99% of modern maths can be done within one universe. I'm sure Lambert doesn't want to assume the existence of an inaccessible cardinal in his proof so he could change V to have type <code>Type</code> and not lose too much sleep about it.</p>\n<p>Can the finite-dimensionality proof be made into an instance?</p>",
        "id": 182493957,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575406395
    },
    {
        "content": "<p>Sorry, which proof?</p>",
        "id": 182493993,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575406432
    },
    {
        "content": "<p><a href=\"#narrow/stream/116395-maths/topic/Span.20of.20finite.20set.20is.20sequentially.20closed/near/182481084\" title=\"#narrow/stream/116395-maths/topic/Span.20of.20finite.20set.20is.20sequentially.20closed/near/182481084\">https://leanprover.zulipchat.com/#narrow/stream/116395-maths/topic/Span.20of.20finite.20set.20is.20sequentially.20closed/near/182481084</a></p>\n<p><code>finite_dimensional</code> is a class but <code>finite</code> is not.</p>",
        "id": 182494451,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575406702
    },
    {
        "content": "<p>Oh -- this does not even compile for me! I thought Lambert had done it!</p>",
        "id": 182494554,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575406760
    },
    {
        "content": "<p>sorry the proof for now :D</p>",
        "id": 182494600,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575406795
    },
    {
        "content": "<p>It doesn't look like an instance. It could be one if you replaced your finite set by a finset, I guess.</p>",
        "id": 182494744,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575406853
    },
    {
        "content": "<p>There are a few statements in there that require the universe restriction to typecheck, but I'm wary about having that be in the variables list because this is likely to carry the restriction through to other theorems that don't have the restriction</p>",
        "id": 182494761,
        "sender_full_name": "Mario Carneiro",
        "timestamp": 1575406863
    },
    {
        "content": "<p>I'm pretty sure that Lambert's result doesn't need V to be in Type.</p>",
        "id": 182494837,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575406912
    },
    {
        "content": "<p>In the dimension file, most of the statements require it, as they talk about dimensions as cardinals. However, when one uses these results to prove things on <code>findim</code>, this imposes the universe restriction in situations where it shouldn't be needed any more.</p>",
        "id": 182495024,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575407010
    },
    {
        "content": "<blockquote>\n<p>Oh -- this does not even compile for me! I thought Lambert had done it!</p>\n</blockquote>\n<p>I have not haha. I just changed <code>V : Type*</code> to <code>V:Type</code> (I don't understand what this means anyways.) and I now I am just left with this nonsensical theorem that the span of a finite set is finite dimensional but I don't know how to prove it because I don't understand the coercion stuff.</p>",
        "id": 182495590,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1575407246
    },
    {
        "content": "<p>I tried this but now I don't know how to prove things about B...</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">finite_dimensional_span_of_finite</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">normed_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">normed_space</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">‚Ñù</span> <span class=\"err\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">finite_dimensional</span><span class=\"bp\">.</span><span class=\"n\">of_fg</span><span class=\"o\">,</span>\n  <span class=\"n\">rw</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">fg_def</span><span class=\"o\">,</span>\n  <span class=\"k\">let</span> <span class=\"n\">B</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"err\">‚Ü•</span><span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">‚Ñù</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span> <span class=\"o\">{</span><span class=\"n\">b</span> <span class=\"bp\">|</span> <span class=\"bp\">‚àÉ</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">V</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"err\">‚àà</span> <span class=\"n\">A</span> <span class=\"bp\">‚àß</span> <span class=\"n\">a</span> <span class=\"bp\">=</span> <span class=\"n\">b</span><span class=\"o\">},</span>\n  <span class=\"n\">existsi</span> <span class=\"n\">B</span><span class=\"o\">,</span>\n  <span class=\"n\">sorry</span>\n<span class=\"kn\">end</span>\n</pre></div>",
        "id": 182495962,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1575407412
    },
    {
        "content": "<blockquote>\n<blockquote>\n<p>Jasmin's project <a href=\"http://matryoshka.gforge.inria.fr/\" target=\"_blank\" title=\"http://matryoshka.gforge.inria.fr/\">http://matryoshka.gforge.inria.fr/</a> was meant to solve this problem, but it doesn't seem to progress much <span aria-label=\"sad\" class=\"emoji emoji-2639\" role=\"img\" title=\"sad\">:sad:</span></p>\n</blockquote>\n<p>I don't think that's fair at all, the higher order proving work that they're doing is great progress.</p>\n</blockquote>\n<p>I'm very sorry I wrote that too quickly. I was trying to help Lambert, report on S√©bastien's talk and cook dinner for my kids in a 10 minutes time slot (on top of the frustration boost I get each time I see sledgehammer). I should have written that end users don't see any progress so far. But I understand there is foundational work to be done, and I'm very excited to read it's progressing (and Gabriel is helping).</p>",
        "id": 182496092,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575407474
    },
    {
        "content": "<p>Something along the lines of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">finite_dimensional_of_finite_span</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"n\">A</span><span class=\"o\">):</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_noetherian_of_fg_of_noetherian</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">fg_def</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">‚ü®</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>could help you.</p>",
        "id": 182497521,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1575408199
    },
    {
        "content": "<p>Do we have to wait until January to hear the progress about Lean's sledgehammer?</p>",
        "id": 182497551,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575408213
    },
    {
        "content": "<p>Lambert -- you should come along to Xena and get educated by Imperial's undergraduates ;-)</p>",
        "id": 182497665,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575408264
    },
    {
        "content": "<blockquote>\n<p>Something along the lines of</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">theorem</span> <span class=\"n\">finite_dimensional_of_finite_span</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">set</span><span class=\"bp\">.</span><span class=\"n\">finite</span> <span class=\"n\">A</span><span class=\"o\">):</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"k\">begin</span>\n  <span class=\"n\">apply</span> <span class=\"n\">is_noetherian_of_fg_of_noetherian</span><span class=\"o\">,</span>\n  <span class=\"n\">exact</span> <span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">fg_def</span><span class=\"bp\">.</span><span class=\"mi\">2</span> <span class=\"bp\">‚ü®</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">‚ü©</span><span class=\"o\">,</span>\n<span class=\"kn\">end</span>\n</pre></div>\n\n\n<p>could help you.</p>\n</blockquote>\n<p>Thank you! That did it.</p>",
        "id": 182497968,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1575408466
    },
    {
        "content": "<blockquote>\n<p>Lambert -- you should come along to Xena and get educated by Imperial's undergraduates ;-)</p>\n</blockquote>\n<p>Yeah I want to come, I just didn't have time on Thursdays so far. But the unit ball compact -&gt; finite dimensional proof is now complete !</p>",
        "id": 182498151,
        "sender_full_name": "Lambert A'Campo",
        "timestamp": 1575408535
    },
    {
        "content": "<blockquote>\n<p>And to be honest if we're going to start using cardinal bounds then we may as well do it the Scholze way anyway, because proving the existence of an uncountable strong limit cardinal (a fun exercise for you Mario? ;-) ) will be possible in Lean without any extra axioms.</p>\n</blockquote>\n<p>Mario already did this fun exercise:<br>\n<a href=\"https://github.com/leanprover-community/mathlib/blob/master/src/set_theory/cofinality.lean#L488\" target=\"_blank\" title=\"https://github.com/leanprover-community/mathlib/blob/master/src/set_theory/cofinality.lean#L488\">https://github.com/leanprover-community/mathlib/blob/master/src/set_theory/cofinality.lean#L488</a></p>",
        "id": 182498583,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575408736
    },
    {
        "content": "<p>Unless I misunderstand, and you want a strong limit ordinal in <code>Type 0</code>.</p>",
        "id": 182498672,
        "sender_full_name": "Floris van Doorn",
        "timestamp": 1575408799
    },
    {
        "content": "<p>This certainly looks like a hole in mathlib (whose finite dimensional stuff is very sketchy). Shoud it be PRed? Probably something like:</p>\n<div class=\"codehilite\"><pre><span></span><span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">R</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">comm_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">is_noetherian_ring</span> <span class=\"n\">R</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">is_noetherian_span_of_finite</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">module</span> <span class=\"n\">R</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">is_noetherian</span> <span class=\"n\">R</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">R</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_noetherian_of_fg_of_noetherian</span> <span class=\"bp\">_</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">fg_def</span><span class=\"bp\">.</span><span class=\"n\">mpr</span> <span class=\"bp\">‚ü®</span><span class=\"n\">A</span><span class=\"o\">,</span> <span class=\"n\">hA</span><span class=\"o\">,</span> <span class=\"n\">rfl</span><span class=\"bp\">‚ü©</span><span class=\"o\">)</span>\n\n\n<span class=\"kn\">variables</span> <span class=\"o\">(</span><span class=\"n\">K</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">)</span> <span class=\"o\">[</span><span class=\"n\">discrete_field</span> <span class=\"n\">K</span><span class=\"o\">]</span>\n\n<span class=\"kn\">theorem</span> <span class=\"n\">finite_dimensional_span_of_finite</span> <span class=\"o\">{</span><span class=\"n\">V</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">A</span> <span class=\"o\">:</span> <span class=\"n\">set</span> <span class=\"n\">V</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">add_comm_group</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">vector_space</span> <span class=\"n\">K</span> <span class=\"n\">V</span><span class=\"o\">]</span> <span class=\"o\">(</span><span class=\"n\">hA</span> <span class=\"o\">:</span> <span class=\"n\">finite</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:</span>\n  <span class=\"n\">finite_dimensional</span> <span class=\"n\">K</span> <span class=\"o\">(</span><span class=\"n\">submodule</span><span class=\"bp\">.</span><span class=\"n\">span</span> <span class=\"n\">K</span> <span class=\"n\">A</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n<span class=\"n\">is_noetherian_span_of_finite</span> <span class=\"n\">K</span> <span class=\"n\">hA</span>\n</pre></div>\n\n\n<p>PRed in noetherian.lean and finite_dimensional.lean</p>",
        "id": 182499188,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575409118
    },
    {
        "content": "<p>Oh that's totally the correct way to do it :-) Finitely-generated modules over a Noetherian ring are Noetherian, and hence finitely-generated vector spaces are finite-dimensional :D That's absolutely great :D My mind was muddied by the fact that they teach finite-dimensional vector spaces several years before Noetherian modules!</p>",
        "id": 182500102,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575409603
    },
    {
        "content": "<p>Seriously, that linear algebra library is really really hard to use. What Lambert was trying to do was completely natural, but ended up with had_coe_to_sort hell.</p>",
        "id": 182500283,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575409738
    },
    {
        "content": "<p>I think that if a part of the library is new to someone then they often find it hard to use.</p>",
        "id": 182500474,
        "sender_full_name": "Kevin Buzzard",
        "timestamp": 1575409881
    },
    {
        "content": "<p>In the topology part there is nothing that would get you stuck like Lambert was.</p>",
        "id": 182500676,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575409994
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"110050\">@Sebastien Gouezel</span> Is there a recording of your talk? (With subtitles <span aria-label=\"grimacing\" class=\"emoji emoji-1f62c\" role=\"img\" title=\"grimacing\">:grimacing:</span>)</p>",
        "id": 182534036,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575447101
    },
    {
        "content": "<p>I think there will be video available soon (without subtitles).</p>",
        "id": 182536108,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575449342
    },
    {
        "content": "<p>I asked and immediately got a temporary url: <a href=\"https://webdiff.math.u-psud.fr/5de68f39862d2a0419e311ed\" target=\"_blank\" title=\"https://webdiff.math.u-psud.fr/5de68f39862d2a0419e311ed\">https://webdiff.math.u-psud.fr/5de68f39862d2a0419e311ed</a></p>",
        "id": 182536399,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575449634
    },
    {
        "content": "<p>I have no idea why they kept the streams from cameras looking at the audience, especially since they were zooming on mostly empty areas of the lecture room.</p>",
        "id": 182536546,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1575449776
    },
    {
        "content": "<p>Thanks for the link. I'll see if I can get anything out of it (-;</p>",
        "id": 182536741,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1575449967
    }
]