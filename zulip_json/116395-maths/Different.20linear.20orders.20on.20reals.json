[
    {
        "content": "<p>It seems that <code>@conditionally_complete_linear_order.to_linear_order ℝ real.conditionally_complete_linear_order</code> is not defeq with <code>real.linear_order</code>, which seems strange since <code>real.conditionally_complete_linear_order</code> is defined in terms of <code>real.linear_order</code>. </p>\n<p>Here is an example where it causes a problem : I have a proof of the intermediate value theorem for intervals, and the definition of <code>interval</code> requires a <code>linear_order</code> instance. So the following fails, because I'm mixing two different notions of <code>interval</code> on <code>ℝ</code>.</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.trigonometric</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">set</span> <span class=\"n\">real</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">intermediate_value_interval</span> <span class=\"o\">{</span><span class=\"n\">α</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">conditionally_complete_linear_order</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">densely_ordered</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">α</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">order_topology</span> <span class=\"n\">α</span><span class=\"o\">]</span>\n  <span class=\"o\">{</span><span class=\"n\">δ</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">[</span><span class=\"n\">linear_order</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">[</span><span class=\"n\">topological_space</span> <span class=\"n\">δ</span><span class=\"o\">]</span>\n  <span class=\"o\">[</span><span class=\"n\">order_closed_topology</span> <span class=\"n\">δ</span><span class=\"o\">]</span> <span class=\"o\">{</span><span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:</span> <span class=\"n\">α</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">α</span> <span class=\"bp\">→</span> <span class=\"n\">δ</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">hf</span> <span class=\"o\">:</span> <span class=\"n\">continuous_on</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span><span class=\"o\">))</span> <span class=\"o\">:</span>\n<span class=\"n\">interval</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"n\">b</span><span class=\"o\">)</span> <span class=\"bp\">⊆</span> <span class=\"n\">f</span> <span class=\"bp\">''</span> <span class=\"n\">interval</span> <span class=\"n\">a</span> <span class=\"n\">b</span> <span class=\"o\">:=</span> <span class=\"gr\">sorry</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">:</span> <span class=\"o\">(</span><span class=\"n\">interval</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"mi\">0</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">exp</span> <span class=\"mi\">1</span><span class=\"o\">))</span> <span class=\"bp\">⊆</span> <span class=\"n\">exp</span> <span class=\"bp\">''</span> <span class=\"o\">(</span><span class=\"n\">interval</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n  <span class=\"bp\">@</span><span class=\"n\">intermediate_value_interval</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">ℝ</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"n\">_</span> <span class=\"mi\">0</span> <span class=\"mi\">1</span> <span class=\"n\">exp</span> <span class=\"n\">continuous_exp.continuous_on</span>\n</code></pre></div>\n<p>Note that it won't happen with <code>Icc</code>s, because the def of <code>Icc</code> only requires a <code>preorder</code>, and the <code>preorder</code> instances are indeed defeq.</p>\n<p>Is there any way around this issue that doesn't require a ton of refactoring ?</p>",
        "id": 226257434,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1613238233
    },
    {
        "content": "<p>Could you please try to remove <code>decidable_le</code> from the definition of <a href=\"https://leanprover-community.github.io/mathlib_docs/find/real.conditionally_complete_linear_order/src\">src#real.conditionally_complete_linear_order</a>?</p>",
        "id": 226262603,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1613244669
    },
    {
        "content": "<p>It is now included into <a href=\"https://leanprover-community.github.io/mathlib_docs/find/linear_order\">docs#linear_order</a></p>",
        "id": 226262655,
        "sender_full_name": "Yury G. Kudryashov",
        "timestamp": 1613244731
    },
    {
        "content": "<p>I'll try this, thanks !</p>",
        "id": 226262944,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1613245133
    },
    {
        "content": "<p>It works !</p>",
        "id": 226264739,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1613247553
    },
    {
        "content": "<p><a href=\"https://github.com/leanprover-community/mathlib/issues/6223\">#6223</a></p>",
        "id": 226264995,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1613247890
    }
]