[
    {
        "content": "<p>For a natural number $n$, it is equivalent that $0&lt;n$ or that $n\\neq 0$. But what is the good way to state it in Lean ?<br>\nI had convinced myself that for <code>n : ℕ</code>, it was better to state <code>n ≠ 0</code> in hypotheses and <code>0&lt; n</code> in conclusions, because of way <code>simp</code> works, but if I browse at some of mathlib, it seems that it is the other way round!</p>",
        "id": 300298567,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1663916500
    },
    {
        "content": "<p>This is mostly historical, but also sometimes it's convenient to use <code>0 &lt; n</code>. I would say that a blanket suggestion of using <code>n ≠ 0</code> unless you know what you're doing is best.</p>",
        "id": 300298935,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663916670
    },
    {
        "content": "<p>In particular, the problem with the approach of having <code>n ≠ 0</code> in hypotheses and <code>0 &lt; n</code> in conclusions is that you need to permanently weaken using <code>lt.ne'</code> when constructing a nontrivial proof term.</p>",
        "id": 300299063,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663916739
    },
    {
        "content": "<p>Have you considered using <code>pnat</code> directly? It's not always a good idea (you can end up with a lot of coercions), but sometimes it works very well.</p>",
        "id": 300299185,
        "sender_full_name": "Riccardo Brasca",
        "timestamp": 1663916774
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"387244\">@Yaël Dillies</span> I thought we had actually decided to settle on exactly that. <code>\\ne</code> in assumptions and <code>&lt;</code> in conclusions.</p>",
        "id": 300299195,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663916781
    },
    {
        "content": "<p>There is a discussion about this somewhere on zulip</p>",
        "id": 300299226,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663916795
    },
    {
        "content": "<p>Yes, and I've come to believe it actually is a bad decision <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 300299267,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663916816
    },
    {
        "content": "<p>How many lemmas are actually stated like that? I suspect not many.</p>",
        "id": 300299321,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663916840
    },
    {
        "content": "<p>But that's because of historical inertia</p>",
        "id": 300299587,
        "sender_full_name": "Johan Commelin",
        "timestamp": 1663916975
    },
    {
        "content": "<p>To me, this decision makes sense when the <code>n</code> in the hypothesis is considered an index (as in cyclotomic polynomials for example), but it doesn't when the function we're proving positivity of is considered an operation on naturals (as is multiplication for example).</p>",
        "id": 300299862,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663917092
    },
    {
        "content": "<p>This is a philosophical difference, but it seems to follow usage.</p>",
        "id": 300299968,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663917127
    },
    {
        "content": "<p>In my case, the <code>n</code> is like an index. Such as in <a href=\"https://leanprover-community.github.io/mathlib_docs/find/one_lt_zpow\">docs#one_lt_zpow</a>  that proves <code>0 &lt; n → 1 &lt; a ^ n</code>.</p>",
        "id": 300300228,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1663917250
    },
    {
        "content": "<p>Then that should be <code>n ≠ 0</code>, yes.</p>",
        "id": 300300281,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663917273
    },
    {
        "content": "<p>I suspect that eventually we won't care much anymore as <a href=\"https://github.com/leanprover-community/mathlib/pull/16529\">#16529</a> will make <code>positivity</code> solve both types of goals seamlessly (so no big term mode proofs for those obligations anymore).</p>",
        "id": 300300464,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663917363
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"112680\">Johan Commelin</span> <a href=\"#narrow/stream/116395-maths/topic/Hypotheses.2Fconclusions.20for.20strictly.20positive.20natural.20numbers/near/300299195\">said</a>:</p>\n<blockquote>\n<p><span class=\"user-mention silent\" data-user-id=\"387244\">Yaël Dillies</span> I thought we had actually decided to settle on exactly that. <code>\\ne</code> in assumptions and <code>&lt;</code> in conclusions.</p>\n</blockquote>\n<p>I thought this too, but it does make library search \"weaker\" compared to just picking one and sticking with it right? This is the big problem I have with the convention, maybe this is less of an issue for measure theory (where the convention was first settled on iirc)</p>",
        "id": 300302452,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663918297
    },
    {
        "content": "<p>Indeed, we have been consistently using the convention in measure theory, and it is quite convenient. So I'd say that in new lemmas one should also use the convention, but I doubt anyone will refactor the whole library to make it consistent.<br>\nAs for <code>library_search</code>, it should be possible to tweak it for this kind of situation (just like it has been tweaked to recognize lemmas when sides are swapped, for instance). It is a weakness of <code>library_search</code>, not of the convention.</p>",
        "id": 300305180,
        "sender_full_name": "Sebastien Gouezel",
        "timestamp": 1663919558
    },
    {
        "content": "<p>Can we record this convention somewhere?</p>",
        "id": 300305812,
        "sender_full_name": "Eric Wieser",
        "timestamp": 1663919809
    },
    {
        "content": "<p>I think this is mentioned <a href=\"https://leanprover-community.github.io/contribute/style.html#normal-forms\">here</a> in the style guide.</p>",
        "id": 300306146,
        "sender_full_name": "Andrew Yang",
        "timestamp": 1663919928
    },
    {
        "content": "<p>To refactor the library, I wonder whether one can <code>grep</code> all files that do not follow the convention. <br>\n(In my ongoing work with <span class=\"user-mention\" data-user-id=\"406490\">@María Inés de Frutos Fernández</span>  on divided powers,  we can  refactor all cases that we fall on…)</p>",
        "id": 300306443,
        "sender_full_name": "Antoine Chambert-Loir",
        "timestamp": 1663920041
    },
    {
        "content": "<p>One could do that with lean metaprogramming fairly easily, and it would be far more accurate than grep. Definitely worth doing at least to see the scale of the problem.<br>\nAnd yes Sebastian you are right of course this can be fixed on the side of library search, I'm just sad because I've just been bitten by this too many times and ended up reproving obvious things because I didn't remember to follow the convention</p>",
        "id": 300307298,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663920352
    },
    {
        "content": "<p>Maybe the only question is: for which types should library search do this extra step? Do we have already have a  <code>zero_eq_bot</code> type typeclass that can be found for assumptions of the form <code>0 &lt; n</code> and turn them into <code>n \\ne 0</code>?</p>",
        "id": 300307786,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663920510
    },
    {
        "content": "<p><code>0 &lt; n → n ≠ 0</code>  holds for all preorders with a zero</p>",
        "id": 300307945,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663920567
    },
    {
        "content": "<p>What is a preorder with a zero?</p>",
        "id": 300308025,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663920592
    },
    {
        "content": "<p><code>[preorder α] [has_zero α]</code> <span aria-label=\"grinning\" class=\"emoji emoji-1f600\" role=\"img\" title=\"grinning\">:grinning:</span></p>",
        "id": 300308118,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663920610
    },
    {
        "content": "<p>Surely I can just call whatever I want \"zero\" in a preorder</p>",
        "id": 300308139,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663920616
    },
    {
        "content": "<p>Right, I guess I don't understand what you mean then</p>",
        "id": 300308184,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663920631
    },
    {
        "content": "<p>What about <code>rat</code>?</p>",
        "id": 300308199,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663920638
    },
    {
        "content": "<p><code>a &lt; b → a ≠ b</code> in all preorders. It's the other direction that's harder.</p>",
        "id": 300308248,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663920653
    },
    {
        "content": "<p>Oh wait I'm thinking backwards!</p>",
        "id": 300308259,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663920655
    },
    {
        "content": "<p>Ok so should we just do this for every <code>&lt;</code> hypothesis? Add the <code>\\ne</code> to the assumption list in library search?</p>",
        "id": 300308397,
        "sender_full_name": "Alex J. Best",
        "timestamp": 1663920704
    },
    {
        "content": "<p>In both directions, I assume yes. We want to get <code>a ≠ b</code> and <code>b ≠ a</code> from <code>a &lt; b</code></p>",
        "id": 300308948,
        "sender_full_name": "Yaël Dillies",
        "timestamp": 1663920869
    },
    {
        "content": "<p><span class=\"user-mention silent\" data-user-id=\"127136\">Alex J. Best</span> <a href=\"#narrow/stream/116395-maths/topic/Hypotheses.2Fconclusions.20for.20strictly.20positive.20natural.20numbers/near/300308397\">said</a>:</p>\n<blockquote>\n<p>Ok so should we just do this for every <code>&lt;</code> hypothesis? Add the `≠ to the assumption list in library search?</p>\n</blockquote>\n<p>This would actually be very easy to implement in library search. Library search tries to close subsidiary goals using <code>solve_by_elim</code>, and you can pass <code>solve_by_elim</code> additional lemmas to use.</p>",
        "id": 300314089,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663922676
    },
    {
        "content": "<p>Just adding <code>ne_of_lt</code> or whatever it is called might suffice.</p>",
        "id": 300314141,
        "sender_full_name": "Scott Morrison",
        "timestamp": 1663922703
    }
]