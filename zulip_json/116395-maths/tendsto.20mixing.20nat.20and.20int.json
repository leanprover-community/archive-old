[
    {
        "content": "<p>Do we have the following</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">example</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñù</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"bp\">‚Üî</span>\n  <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"o\">(</span><span class=\"n\">n</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">))</span> <span class=\"n\">at_top</span> <span class=\"o\">(</span><span class=\"bp\">ùìù</span> <span class=\"n\">a</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>(if you replace all <code>‚Ñ§</code> by <code>‚Ñï</code> in the above <code>example</code>, this is exactly <a href=\"https://leanprover-community.github.io/mathlib_docs/find/filter.tendsto_add_at_top_iff_nat\">docs#filter.tendsto_add_at_top_iff_nat</a>). This would be immediate to prove if  <code>(Œª n : ‚Ñï, f (n + d))</code> sent the <code>at_top</code> filter of <code>‚Ñï</code> to itself, which is true but I cannot say it: I tried </p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kd\">lemma</span> <span class=\"n\">map_zadd_at_top_eq_nat</span> <span class=\"o\">(</span><span class=\"n\">d</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">a</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">a</span> <span class=\"bp\">+</span> <span class=\"n\">d</span><span class=\"o\">)</span> <span class=\"o\">(</span><span class=\"n\">at_top</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"bp\">=</span> <span class=\"o\">(</span><span class=\"n\">at_top</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">‚Ñï</span><span class=\"o\">)</span> <span class=\"o\">:=</span>\n</code></pre></div>\n<p>but of course got the error that the map <code>(Œª n : ‚Ñï, f (n + d))</code> does not respect  <code>‚Ñï</code>. I would have an idea on how to prove the lemma using some \"eventual\" business, but I do not actually know how to <em>state</em> it...</p>",
        "id": 268024785,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1642172595
    },
    {
        "content": "<p>There must be some way, using filter voodoo, of using the fact that these two maps are eventually the same, where eventually is in the sense of the filters involved. But I also don't immediately see how to formulate the statement!</p>",
        "id": 268025205,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642172771
    },
    {
        "content": "<p>Yes, I also see the proof of a statement I can't state... <span aria-label=\"cold sweat\" class=\"emoji emoji-1f630\" role=\"img\" title=\"cold sweat\">:cold_sweat:</span></p>",
        "id": 268025273,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1642172809
    },
    {
        "content": "<p><span class=\"user-mention\" data-user-id=\"300245\">@Filippo A. E. Nuccio</span> can you give me your imports?</p>",
        "id": 268027198,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642173621
    },
    {
        "content": "<p>import data.int.interval<br>\nimport data.finset.nat_antidiagonal<br>\nimport laurent_measures.basic<br>\nimport laurent_measures.theta<br>\nimport linear_algebra.basic</p>",
        "id": 268027236,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1642173640
    },
    {
        "content": "<p>Mathlib only imports?</p>",
        "id": 268027331,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642173676
    },
    {
        "content": "<p>Ah, how can I get this? Should I retrace back all the mathlib imports in those files, or is there a way to ask Lean about this?</p>",
        "id": 268027496,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1642173737
    },
    {
        "content": "<p>It's okay, I can probably figure it out.</p>",
        "id": 268027536,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642173755
    },
    {
        "content": "<p>A not-so-minimal import list, in case it helps anyone else:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">data.int.interval</span>\n<span class=\"kn\">import</span> <span class=\"n\">data.finset.nat_antidiagonal</span>\n<span class=\"kn\">import</span> <span class=\"n\">linear_algebra.basic</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.pow</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.special_functions.log</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.specific_limits</span>\n<span class=\"kn\">import</span> <span class=\"n\">category_theory.Fintype</span>\n<span class=\"kn\">import</span> <span class=\"n\">analysis.normed_space.basic</span>\n</code></pre></div>",
        "id": 268027645,
        "sender_full_name": "Adam Topaz",
        "timestamp": 1642173802
    },
    {
        "content": "<p>(I don't think I need the <code>category_theory.Fintype</code> for the statement at hand)</p>",
        "id": 268027737,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1642173836
    },
    {
        "content": "<p>I can have a look if you want</p>",
        "id": 268027783,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642173843
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 268027847,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1642173867
    },
    {
        "content": "<p>I proved it by brute forcing a lemma for Filippo:</p>\n<div class=\"codehilite\" data-code-language=\"Lean\"><pre><span></span><code><span class=\"kn\">import</span> <span class=\"n\">order.filter.at_top_bot</span> <span class=\"n\">tactic.linarith</span>\n\n<span class=\"kn\">open</span> <span class=\"n\">filter</span>\n\n<span class=\"kd\">lemma</span> <span class=\"n\">filippo</span> <span class=\"o\">:</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">coe</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">‚Ñ§</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"bp\">=</span> <span class=\"n\">at_top</span> <span class=\"o\">:=</span>\n<span class=\"kd\">begin</span>\n  <span class=\"n\">ext</span> <span class=\"n\">s</span><span class=\"o\">,</span>\n  <span class=\"n\">simp</span> <span class=\"n\">only</span> <span class=\"o\">[</span><span class=\"n\">set.mem_preimage</span><span class=\"o\">,</span> <span class=\"n\">mem_at_top_sets</span><span class=\"o\">,</span> <span class=\"n\">ge_iff_le</span><span class=\"o\">,</span> <span class=\"n\">mem_map</span><span class=\"o\">],</span>\n  <span class=\"n\">split</span><span class=\"o\">,</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">use</span> <span class=\"n\">a</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">lift</span> <span class=\"n\">b</span> <span class=\"n\">to</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">linarith</span> <span class=\"o\">},</span>\n  <span class=\"o\">{</span> <span class=\"n\">rintro</span> <span class=\"o\">‚ü®</span><span class=\"n\">a</span><span class=\"o\">,</span> <span class=\"n\">ha</span><span class=\"o\">‚ü©,</span>\n    <span class=\"n\">use</span> <span class=\"n\">a.nat_abs</span><span class=\"o\">,</span>\n    <span class=\"n\">intros</span> <span class=\"n\">b</span> <span class=\"n\">hb</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">ha</span><span class=\"o\">,</span>\n    <span class=\"n\">apply</span> <span class=\"n\">int.le_nat_abs.trans</span><span class=\"o\">,</span>\n    <span class=\"n\">exact_mod_cast</span> <span class=\"n\">hb</span> <span class=\"o\">}</span>\n<span class=\"kd\">end</span>\n\n<span class=\"kd\">example</span> <span class=\"o\">{</span><span class=\"n\">X</span> <span class=\"o\">:</span> <span class=\"kt\">Type</span><span class=\"bp\">*</span><span class=\"o\">}</span> <span class=\"o\">{</span><span class=\"n\">f</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñ§</span> <span class=\"bp\">‚Üí</span> <span class=\"n\">X</span><span class=\"o\">}</span> <span class=\"o\">(</span><span class=\"n\">F</span> <span class=\"o\">:</span> <span class=\"n\">filter</span> <span class=\"n\">X</span><span class=\"o\">)</span> <span class=\"o\">:</span> <span class=\"n\">tendsto</span> <span class=\"o\">(</span><span class=\"bp\">Œª</span> <span class=\"n\">n</span> <span class=\"o\">:</span> <span class=\"n\">‚Ñï</span><span class=\"o\">,</span> <span class=\"n\">f</span> <span class=\"n\">n</span><span class=\"o\">)</span> <span class=\"n\">at_top</span> <span class=\"n\">F</span> <span class=\"bp\">‚Üî</span>\n  <span class=\"n\">tendsto</span> <span class=\"n\">f</span> <span class=\"n\">at_top</span> <span class=\"n\">F</span> <span class=\"o\">:=</span>\n<span class=\"k\">show</span> <span class=\"n\">map</span> <span class=\"o\">(</span><span class=\"n\">f</span> <span class=\"bp\">‚àò</span> <span class=\"n\">coe</span><span class=\"o\">)</span> <span class=\"n\">_</span> <span class=\"bp\">‚â§</span> <span class=\"n\">_</span> <span class=\"bp\">‚Üî</span> <span class=\"n\">_</span><span class=\"o\">,</span> <span class=\"kd\">by</span> <span class=\"n\">simpa</span> <span class=\"o\">[</span><span class=\"bp\">‚Üê</span> <span class=\"n\">map_map</span><span class=\"o\">,</span> <span class=\"n\">filippo</span><span class=\"o\">]</span>\n</code></pre></div>",
        "id": 268029715,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642174653
    },
    {
        "content": "<p>The first proof is ugly because I didn't took time to think about the proper generality so I proved it by brute force. But then the example becomes obvious</p>",
        "id": 268029828,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642174697
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 268033696,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1642176256
    },
    {
        "content": "<p>I'll have a look and ask if I have questions (in the meanwhile, I will also  copy-paste it in LTE, with your permission <span aria-label=\"smile\" class=\"emoji emoji-1f642\" role=\"img\" title=\"smile\">:smile:</span> )</p>",
        "id": 268033820,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1642176314
    },
    {
        "content": "<p>Sure.</p>",
        "id": 268041234,
        "sender_full_name": "Patrick Massot",
        "timestamp": 1642179411
    },
    {
        "content": "<p>Thanks!</p>",
        "id": 268041449,
        "sender_full_name": "Filippo A. E. Nuccio",
        "timestamp": 1642179484
    },
    {
        "content": "<p>See <a href=\"https://leanprover-community.github.io/mathlib_docs/find/tendsto_coe_nat_at_top_at_top\">docs#tendsto_coe_nat_at_top_at_top</a></p>",
        "id": 272526078,
        "sender_full_name": "Anatole Dedecker",
        "timestamp": 1645286330
    }
]